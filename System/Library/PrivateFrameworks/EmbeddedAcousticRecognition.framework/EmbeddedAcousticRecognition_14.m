void sub_1ADDC641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, char a17, __int16 a18, char a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~StateReachable((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADDC64F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::IntervalSet<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<fst::IntervalSet<int>>::__append(a1, a2 - v4);
  }
}

uint64_t fst::LabelReachableData<int>::Label2Index(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (!*(_BYTE *)(a1 + 2))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LabelReachableData: no relabeling data", 38);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  return a1 + 16;
}

void sub_1ADDC6648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~StateReachable(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 8);
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::StateReachable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x800000000, 1))
    fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::AcyclicStateReachable(a1, a2);
  else
    fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CyclicStateReachable(a1, a2);
  return a1;
}

void sub_1ADDC6748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)(v2 + 32);
  if (v4)
  {
    *(_QWORD *)(v2 + 40) = v4;
    operator delete(v4);
  }
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::AcyclicStateReachable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD v8[3];
  int v9;
  char v10;

  v4 = a1 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (uint64_t *)(a1 + 8);
  v8[0] = a2;
  v8[1] = v6;
  v8[2] = v4;
  if (v5 == *(_QWORD *)(v4 + 8))
    v7 = 1;
  else
    v7 = -1;
  v9 = v7;
  v10 = 0;
  std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100](v6);
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)v8, 0);
  if (v10)
    *(_BYTE *)(a1 + 56) = 1;
}

uint64_t fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CyclicStateReachable(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  int *v5;
  char *v6;
  char *v7;
  char *v8;
  std::vector<int>::size_type v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  std::vector<int>::size_type v18;
  uint64_t *v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  fst *v27;
  _QWORD *v28;
  uint64_t result;
  int v30;
  void *__p[2];
  char v32;
  void *v33;
  char *v34;
  char *v35;
  char v36[8];
  uint64_t v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  int v46;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v44);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  fst::Condense<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, (uint64_t)&v44, (uint64_t *)&v41);
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::StateReachable(v36, &v44);
  if (v40)
  {
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v5 = (int *)v41;
    v4 = v42;
    if (v42 == v41)
    {
      v18 = (v42 - (_BYTE *)v41) >> 2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = v5[v9];
        v11 = (v8 - v7) >> 3;
        if (v11 <= v10)
        {
          do
          {
            if (v8 >= v35)
            {
              v12 = v11 + 1;
              if ((v11 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v13 = v35 - v7;
              if ((v35 - v7) >> 2 > v12)
                v12 = v13 >> 2;
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
                v14 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v14 = v12;
              if (v14)
              {
                v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v35, v14);
                v7 = (char *)v33;
                v8 = v34;
              }
              else
              {
                v15 = 0;
              }
              v6 = &v15[8 * v11];
              *(_QWORD *)v6 = 0;
              v16 = v6 + 8;
              while (v8 != v7)
              {
                v17 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v6 - 1) = v17;
                v6 -= 8;
              }
              v33 = v6;
              v34 = v16;
              v35 = &v15[8 * v14];
              if (v7)
              {
                operator delete(v7);
                v6 = (char *)v33;
              }
              v8 = v16;
            }
            else
            {
              *(_QWORD *)v8 = 0;
              v8 += 8;
            }
            v34 = v8;
            v11 = (v8 - v6) >> 3;
            v7 = v6;
          }
          while (v11 <= v10);
          v5 = (int *)v41;
          v4 = v42;
          v7 = v6;
        }
        ++*(_QWORD *)&v7[8 * v10];
        ++v9;
        v18 = (v4 - (_BYTE *)v5) >> 2;
      }
      while (v18 > v9);
    }
    LODWORD(__p[0]) = -1;
    std::vector<int>::resize((std::vector<int> *)(a1 + 32), v18, (std::vector<int>::const_reference)__p);
    v19 = (uint64_t *)(a1 + 8);
    std::vector<fst::IntervalSet<int>>::resize((uint64_t *)(a1 + 8), (v42 - (_BYTE *)v41) >> 2);
    v20 = (int *)v41;
    if (v42 != v41)
    {
      v21 = 0;
      v22 = 24;
      while (1)
      {
        v23 = v20[v21];
        v24 = v37 + 32 * v23;
        v25 = *v19;
        v26 = (char *)(*v19 + v22 - 24);
        if (v26 != (char *)v24)
          std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v26, *(char **)v24, *(_QWORD *)(v24 + 8), (uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)v24) >> 3);
        *(_DWORD *)(v25 + v22) = *(_DWORD *)(v24 + 24);
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v21) = *((_DWORD *)v38 + v23);
        LODWORD(__p[0]) = **(_DWORD **)(*(_QWORD *)(v45 + 64) + 8 * v23);
        v46 = 2139095040;
        if (*(float *)__p != INFINITY && *((_QWORD *)v33 + v23) >= 2uLL)
          break;
        ++v21;
        v20 = (int *)v41;
        v22 += 32;
        if (v21 >= (v42 - (_BYTE *)v41) >> 2)
          goto LABEL_42;
      }
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v27 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)__p);
      v28 = (_QWORD *)fst::cerr(v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"StateReachable: final state contained in a cycle", 48);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
      if (v32 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a1 + 56) = 1;
    }
LABEL_42:
    if (v33)
    {
      v34 = (char *)v33;
      operator delete(v33);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v33 = &v37;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v44 = &unk_1E5D256C0;
  result = v45;
  if (v45)
  {
    v30 = *(_DWORD *)(v45 + 56) - 1;
    *(_DWORD *)(v45 + 56) = v30;
    if (!v30)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADDC6B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  _DWORD *v29;
  int v30;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v27 - 84));
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~StateReachable((uint64_t)&a18);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  *(_QWORD *)(v27 - 104) = &unk_1E5D256C0;
  v29 = *(_DWORD **)(v27 - 96);
  if (v29)
  {
    v30 = v29[14] - 1;
    v29[14] = v30;
    if (!v30)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v32;
  std::vector<char>::pointer end;
  char *v34;
  std::vector<char>::pointer v35;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  std::vector<char>::value_type v48[8];
  std::vector<char>::value_type __x[8];
  int v50;
  int v51;
  void *v52;
  _QWORD v53[6];
  _QWORD *v54;
  _OWORD v55[2];
  __int128 v56;
  std::vector<char> v57;

  *(_BYTE *)(a2 + 28) = 0;
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v47 == -1)
    return;
  memset(&v57, 0, sizeof(v57));
  v56 = 0u;
  memset(v55, 0, sizeof(v55));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v52, 64);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v46)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v47 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v57.__end_ - v57.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v57.__end_ - v57.__begin_))
      v57.__end_ = &v57.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v57, (int)v6 - (unint64_t)(v57.__end_ - v57.__begin_), __x);
  }
  v51 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v47 >= (int)v6)
    goto LABEL_98;
  v7 = v47;
  v45 = a3;
  do
  {
    v57.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v54;
    if (v54)
    {
      v54 = (_QWORD *)v54[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v53, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v48 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v55, v48);
    inited = fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitState((_QWORD *)a2, v7);
LABEL_15:
    v10 = inited;
    while (*((_QWORD *)&v56 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v55[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v56 + 1) + v56 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v56 + 1) + v56 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v57.__end_ - v57.__begin_;
      if (v57.__end_ - v57.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v48[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v57.__end_ = &v57.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v57, v12 + 1 - v13, v48);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_32;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_32;
        v15 = v11[1];
        if (!v15)
          goto LABEL_28;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_29:
        v17 = *(int *)(v16 + 12);
        begin = v57.__begin_;
        v19 = v57.__end_ - v57.__begin_;
        if (v57.__end_ - v57.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v48[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v57.__end_ = &v57.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v57, (int)v6 - v19, v48);
            v17 = *(int *)(v16 + 12);
            begin = v57.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::BackArc(a2);
          v25 = v11[1];
          if (!v25)
            goto LABEL_52;
LABEL_41:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v28 = (uint64_t)v54;
            if (v54)
            {
              v54 = (_QWORD *)v54[6];
            }
            else
            {
              v28 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v53, 1);
              *(_QWORD *)(v28 + 48) = 0;
            }
            *(_DWORD *)v28 = *(_DWORD *)(v16 + 12);
            *(_QWORD *)(v28 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v48 = v28;
            std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v55, v48);
            inited = fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitState((_QWORD *)a2, *(unsigned int *)(v16 + 12));
            goto LABEL_15;
          }
          fst::IntervalSet<int>::Union((char **)(**(_QWORD **)(a2 + 8) + 32 * v12), (_QWORD **)(**(_QWORD **)(a2 + 8) + 32 * v17));
          v27 = v11[1];
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
            v10 = 1;
          }
          else
          {
            v10 = 1;
LABEL_52:
            ++v11[5];
          }
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_28:
          v16 = v11[2] + 16 * v11[5];
          goto LABEL_29;
        }
LABEL_32:
        v57.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v54;
        v54 = v11;
        --*((_QWORD *)&v56 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v55, 1);
        if (*((_QWORD *)&v56 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v55[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v56 + 1) + v56 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v56 + 1) + v56 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FinishState(a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_41;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FinishState(a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v47)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v29 = &v57.__begin_[(int)v7];
      v30 = (int)v6 - (uint64_t)(int)v7;
      while (*v29++)
      {
        v7 = (v7 + 1);
        if (!--v30)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v46 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_68:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_74;
      }
    }
    else if (v51 >= v50)
    {
      continue;
    }
    v32 = v51;
LABEL_74:
    if (v32 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v51;
      goto LABEL_68;
    }
    end = v57.__end_;
    if (v57.__end_ >= v57.__end_cap_.__value_)
    {
      v35 = v57.__begin_;
      v36 = v57.__end_ - v57.__begin_;
      v37 = v57.__end_ - v57.__begin_ + 1;
      if (v37 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v38 = v57.__end_cap_.__value_ - v57.__begin_;
      if (2 * (v57.__end_cap_.__value_ - v57.__begin_) > (unint64_t)v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v40 = (char *)operator new(v39);
      else
        v40 = 0;
      v41 = &v40[v36];
      v42 = &v40[v36];
      *v42 = 0;
      v34 = v42 + 1;
      if (end != v35)
      {
        v43 = &end[~(unint64_t)v35];
        do
        {
          v44 = *--end;
          (v43--)[(_QWORD)v40] = v44;
        }
        while (end != v35);
        end = v57.__begin_;
        v41 = v40;
      }
      v57.__begin_ = v41;
      v57.__end_ = v34;
      v57.__end_cap_.__value_ = &v40[v39];
      a3 = v45;
      if (end)
        operator delete(end);
    }
    else
    {
      *v57.__end_ = 0;
      v34 = end + 1;
    }
    v57.__end_ = v34;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_98:
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v52 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v53);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v55);
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
}

void sub_1ADDC72E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitState(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD **v8;
  _DWORD *v9;
  unint64_t i;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t result;
  _QWORD *v43;
  fst *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void *__p;
  void *v58;
  uint64_t v59;
  int v60;
  int v61;

  v4 = (int)a2;
  v5 = (uint64_t *)a1[1];
  if ((int)a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    do
    {
      __p = 0;
      v58 = 0;
      v59 = 0;
      v60 = -1;
      std::vector<fst::IntervalSet<int>>::push_back[abi:ne180100](v5, (uint64_t)&__p);
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      v5 = (uint64_t *)a1[1];
    }
    while (v4 >= (v5[1] - *v5) >> 5);
  }
  v6 = a1[2];
  v8 = (_DWORD **)(v6 + 8);
  v7 = *(_DWORD **)(v6 + 8);
  v9 = *(_DWORD **)v6;
  for (i = ((uint64_t)v7 - *(_QWORD *)v6) >> 2; i <= v4; i = ((uint64_t)v7 - *(_QWORD *)v6) >> 2)
  {
    v11 = *(_QWORD *)(v6 + 16);
    if ((unint64_t)v7 >= v11)
    {
      v13 = i + 1;
      if ((i + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = v11 - (_QWORD)v9;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v15);
        v7 = *v8;
        v9 = *(_DWORD **)v6;
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[4 * i];
      *(_DWORD *)v17 = -1;
      v12 = v17 + 4;
      while (v7 != v9)
      {
        v18 = *--v7;
        *((_DWORD *)v17 - 1) = v18;
        v17 -= 4;
      }
      *(_QWORD *)v6 = v17;
      *v8 = v12;
      *(_QWORD *)(v6 + 16) = &v16[4 * v15];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v7 = -1;
      v12 = v7 + 1;
    }
    *v8 = v12;
    v6 = a1[2];
    v8 = (_DWORD **)(v6 + 8);
    v7 = *(_DWORD **)(v6 + 8);
    v9 = *(_DWORD **)v6;
  }
  LODWORD(__p) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
  v61 = 2139095040;
  if (*(float *)&__p == INFINITY)
    return 1;
  v19 = (void **)(*(_QWORD *)a1[1] + 32 * v4);
  v20 = *((unsigned int *)a1 + 6);
  if ((v20 & 0x80000000) == 0)
  {
    v21 = v20 + 1;
    v22 = (unint64_t)v19[2];
    v23 = (uint64_t *)v19[1];
    if ((unint64_t)v23 < v22)
    {
      *v23 = v20 | (v21 << 32);
      v24 = v23 + 1;
LABEL_47:
      v19[1] = v24;
      v41 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v41 + 1;
      *(_DWORD *)(*(_QWORD *)a1[2] + 4 * v4) = v41;
      return 1;
    }
    v27 = ((char *)v23 - (_BYTE *)*v19) >> 3;
    if (!((unint64_t)(v27 + 1) >> 61))
    {
      v28 = v22 - (_QWORD)*v19;
      v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1))
        v29 = v27 + 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v19 + 2), v30);
      else
        v31 = 0;
      v36 = &v31[8 * v27];
      v37 = &v31[8 * v30];
      *(_QWORD *)v36 = v20 | (v21 << 32);
      v24 = v36 + 8;
      v39 = (char *)*v19;
      v38 = (char *)v19[1];
      if (v38 != *v19)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v36 - 1) = v40;
          v36 -= 8;
        }
        while (v38 != v39);
        v38 = (char *)*v19;
      }
      *v19 = v36;
      v19[1] = v24;
      v19[2] = v37;
      if (v38)
        operator delete(v38);
      goto LABEL_47;
    }
LABEL_74:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v25 = fst::LogMessage::LogMessage((fst *)&v61, (uint64_t)&__p);
    v26 = (_QWORD *)fst::cerr(v25);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"IntervalReachVisitor: state2index map must be empty ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"for this FST", 12);
  }
  else
  {
    v32 = *(unsigned int *)(*(_QWORD *)a1[2] + 4 * v4);
    if ((v32 & 0x80000000) == 0)
    {
      v33 = v32 + 1;
      v34 = (unint64_t)v19[2];
      v35 = (char *)v19[1];
      if ((unint64_t)v35 < v34)
      {
        *(_QWORD *)v35 = v32 | (v33 << 32);
        v19[1] = v35 + 8;
        return 1;
      }
      v46 = (v35 - (_BYTE *)*v19) >> 3;
      v47 = v46 + 1;
      if (!((unint64_t)(v46 + 1) >> 61))
      {
        v48 = v34 - (_QWORD)*v19;
        if (v48 >> 2 > v47)
          v47 = v48 >> 2;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v19 + 2), v49);
        else
          v50 = 0;
        v51 = &v50[8 * v46];
        v52 = &v50[8 * v49];
        *(_QWORD *)v51 = v32 | (v33 << 32);
        v53 = v51 + 8;
        v55 = (char *)*v19;
        v54 = (char *)v19[1];
        if (v54 != *v19)
        {
          do
          {
            v56 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *((_QWORD *)v51 - 1) = v56;
            v51 -= 8;
          }
          while (v54 != v55);
          v54 = (char *)*v19;
        }
        *v19 = v51;
        v19[1] = v53;
        v19[2] = v52;
        if (v54)
          operator delete(v54);
        v19[1] = v53;
        return 1;
      }
      goto LABEL_74;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v44 = fst::LogMessage::LogMessage((fst *)&v61, (uint64_t)&__p);
    v45 = (_QWORD *)fst::cerr(v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"IntervalReachVisitor: state2index map incomplete", 48);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v61);
  if (SHIBYTE(v59) < 0)
    operator delete(__p);
  result = 0;
  *((_BYTE *)a1 + 28) = 1;
  return result;
}

void sub_1ADDC781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0 && (*(float (**)(void))(**(_QWORD **)a1 + 32))() != INFINITY)
    *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 32 * a2) + 4) = *(_DWORD *)(a1 + 24);
  fst::IntervalSet<int>::Normalize(**(_QWORD **)(a1 + 8) + 32 * a2);
  if (a3 != -1)
    fst::IntervalSet<int>::Union((char **)(**(_QWORD **)(a1 + 8) + 32 * a3), (_QWORD **)(**(_QWORD **)(a1 + 8) + 32 * a2));
}

uint64_t fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::BackArc(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"IntervalReachVisitor: cyclic input", 34);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 28) = 1;
  return 0;
}

void sub_1ADDC79FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::IntervalSet<int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(a2 + 24);
    v16[2] = v14 + 32;
    std::vector<fst::IntervalSet<int>>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    result = std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
    v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1ADDC7B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::IntervalSet<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<fst::IntervalSet<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<fst::IntervalSet<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void fst::IntervalSet<int>::Normalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int *v16;
  int v17;
  char v18;

  v2 = *(_QWORD *)a1;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (uint64_t *)v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,false>(v2, v3, (uint64_t)&v18, v5, 1);
  *(_DWORD *)(a1 + 24) = 0;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 == *(_QWORD *)a1)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = (v7 - *(_QWORD *)a1) >> 3;
    do
    {
      v12 = (int *)(v6 + 8 * v8);
      v13 = *v12;
      v14 = v12[1];
      if (*v12 != v14)
      {
        LODWORD(v15) = v10 + 1;
        if (v11 > v10 + 1)
        {
          v15 = (int)v15;
          v16 = (int *)(v6 + 8 * (int)v15 + 4);
          do
          {
            if (*(v16 - 1) > v14)
              break;
            v17 = *v16;
            if (*v16 > v14)
            {
              v12[1] = v17;
              v14 = v17;
            }
            ++v10;
            ++v15;
            v16 += 2;
          }
          while (v11 > v15);
        }
        *(_DWORD *)(a1 + 24) += v14 - v13;
        *(_QWORD *)(v6 + 8 * v9++) = *(_QWORD *)v12;
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)(a1 + 8);
      }
      v8 = ++v10;
      v11 = (v7 - v6) >> 3;
    }
    while (v11 > v10);
  }
  std::vector<kaldi::quasar::LmeFst::Stats>::resize(a1, v9);
}

void fst::IntervalSet<int>::Union(char **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v2 = *a2;
  if (*a2 != a2[1])
  {
    v5 = a1 + 2;
    v6 = a1[1];
    do
    {
      if ((unint64_t)v6 >= *v5)
      {
        v7 = (v6 - *a1) >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v8 = *v5 - (_QWORD)*a1;
        v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1))
          v9 = v7 + 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v5, v10);
        else
          v11 = 0;
        v12 = &v11[8 * v7];
        *(_QWORD *)v12 = *v2;
        v6 = v12 + 8;
        v14 = *a1;
        v13 = a1[1];
        if (v13 != *a1)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = *a1;
        }
        *a1 = v12;
        a1[1] = v6;
        a1[2] = &v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v6 = *v2;
        v6 += 8;
      }
      a1[1] = v6;
      ++v2;
    }
    while (v2 != a2[1]);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *((_DWORD *)a2 - 2);
        if (v21 < *(_DWORD *)v9 || v21 == *(_DWORD *)v9 && *((_DWORD *)a2 - 1) > *(_DWORD *)(v9 + 4))
        {
          v22 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(a2 - 1);
          *(a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v9, (int *)(v9 + 8), a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(v9, (int *)(v9 + 8), v9 + 16, (uint64_t)(a2 - 1));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(v9, (int *)(v9 + 8), v9 + 16, v9 + 24, (uint64_t)(a2 - 1));
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((_QWORD *)v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (int *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)(v9 + 8 * (v13 >> 1)), (int *)v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v9, (int *)(v9 + 8 * (v13 >> 1)), a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)(v9 + 8), v15 - 2, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)(v9 + 16), (int *)(v9 + 8 + 8 * v14), a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v15 - 1, v15, (uint64_t *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(_DWORD *)(v9 - 8);
          if (v17 >= *(_DWORD *)v9 && (v17 != *(_DWORD *)v9 || *(_DWORD *)(v9 - 4) <= *(_DWORD *)(v9 + 4)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>((_QWORD *)v9, (unint64_t)a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>((uint64_t *)v9, (unint64_t)a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(v9, (uint64_t)v18);
          v9 = (uint64_t)(v18 + 1);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t)(v18 + 1), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v18 + 1);
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,fst::IntervalSet<int>::Interval *>(v9, a2, a2, a3);
        return result;
    }
  }
}

_QWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v6 = *((_DWORD *)v5 + 2);
        if (v6 < *(_DWORD *)v5 || v6 == *(_DWORD *)v5 && *((_DWORD *)v5 + 3) > *((_DWORD *)v5 + 1))
        {
          v7 = v5[1];
          v5[1] = *v5;
          v8 = result;
          if (v5 != result)
          {
            v9 = v3;
            do
            {
              v10 = *(_DWORD *)((char *)result + v9 - 8);
              if (v10 <= (int)v7)
              {
                if (v10 != (_DWORD)v7)
                {
                  v8 = v5;
                  goto LABEL_16;
                }
                v8 = (_QWORD *)((char *)result + v9);
                if (*(_DWORD *)((char *)result + v9 - 4) >= SHIDWORD(v7))
                  goto LABEL_16;
              }
              --v5;
              *(_QWORD *)((char *)result + v9) = *(_QWORD *)((char *)result + v9 - 8);
              v9 -= 8;
            }
            while (v9);
            v8 = result;
          }
LABEL_16:
          *v8 = v7;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;

  if (result != a2)
  {
    while (result + 1 != a2)
    {
      v2 = result++;
      v3 = *((_DWORD *)v2 + 2);
      if (v3 < *(_DWORD *)v2 || v3 == *(_DWORD *)v2 && *((_DWORD *)v2 + 3) > *((_DWORD *)v2 + 1))
      {
        v4 = *result;
        v5 = HIDWORD(*result);
        do
        {
          do
          {
            v6 = v2;
            v2[1] = *v2;
            v7 = *((_DWORD *)v2-- - 2);
            v8 = v7 == (_DWORD)v4;
          }
          while (v7 > (int)v4);
        }
        while (v8 && *((_DWORD *)v6 - 1) < (int)v5);
        *v6 = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t *a1, int *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  if (*a2 < *(_DWORD *)a1 || v3 == *(_DWORD *)a1 && a2[1] > *((_DWORD *)a1 + 1))
  {
    if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((_DWORD *)a3 + 1) > a2[1])
    {
      v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      v8 = *a1;
      *a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v8;
      if (*(_DWORD *)a3 < (int)v8 || *(_DWORD *)a3 == (_DWORD)v8 && *((_DWORD *)a3 + 1) > SHIDWORD(v8))
      {
        *(_QWORD *)a2 = *a3;
        *a3 = v8;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((_DWORD *)a3 + 1) > a2[1])
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && a2[1] > *((_DWORD *)a1 + 1))
    {
      v7 = *a1;
      *a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _DWORD *i;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;

  v2 = *a1;
  v3 = HIDWORD(*a1);
  v4 = *(_DWORD *)(a2 - 8);
  if (v4 > (int)*a1 || v4 == *a1 && *(_DWORD *)(a2 - 4) < (int)v3)
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= (int)v2 && (v6 != (_DWORD)v2 || i[1] >= (int)v3));
  }
  else
  {
    for (i = a1 + 1; (unint64_t)i < a2 && *i <= (int)v2 && (*i != (_DWORD)v2 || i[1] >= (int)v3); i += 2)
      ;
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 8; v4 > (int)v2 || v4 == (_DWORD)v2 && *(_DWORD *)(a2 + 4) < (int)v3; a2 -= 8)
    {
      v8 = *(_DWORD *)(a2 - 8);
      v4 = v8;
    }
  }
  while ((unint64_t)i < a2)
  {
    v9 = *(_QWORD *)i;
    *(_QWORD *)i = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    do
    {
      v11 = i[2];
      i += 2;
      v10 = v11;
    }
    while (v11 <= (int)v2 && (v10 != (_DWORD)v2 || i[1] >= (int)v3));
    do
    {
      do
      {
        v12 = *(_DWORD *)(a2 - 8);
        a2 -= 8;
        v13 = v12 == (_DWORD)v2;
      }
      while (v12 > (int)v2);
    }
    while (v13 && *(_DWORD *)(a2 + 4) < (int)v3);
  }
  if (i - 2 != (_DWORD *)a1)
    *a1 = *((_QWORD *)i - 1);
  *((_QWORD *)i - 1) = v2;
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = 0;
  v3 = *a1;
  v4 = HIDWORD(*a1);
  while (1)
  {
    v5 = a1[v2 + 1];
    if (v5 >= (int)v3 && (v5 != (_DWORD)v3 || SHIDWORD(a1[v2 + 1]) <= (int)v4))
      break;
    ++v2;
  }
  v6 = &a1[v2];
  v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      v9 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      v8 = v9;
    }
    while (v9 >= (int)v3 && (v8 != (_DWORD)v3 || *(_DWORD *)(a2 + 4) <= (int)v4));
  }
  else
  {
LABEL_19:
    if (v7 < a2)
    {
      do
      {
        v11 = *(_DWORD *)(a2 - 8);
        a2 -= 8;
        v10 = v11;
        if (v11 < (int)v3)
          break;
        if (v10 != (_DWORD)v3)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 4) <= (int)v4 && v7 < a2);
    }
  }
  if (v7 < a2)
  {
    v13 = v7;
    v14 = a2;
    do
    {
      v15 = *(_QWORD *)v13;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v13 += 8;
      *(_QWORD *)v14 = v15;
      while (*(_DWORD *)v13 < (int)v3 || *(_DWORD *)v13 == (_DWORD)v3 && *(_DWORD *)(v13 + 4) > (int)v4)
        v13 += 8;
      do
      {
        v17 = *(_DWORD *)(v14 - 8);
        v14 -= 8;
        v16 = v17;
      }
      while (v17 >= (int)v3 && (v16 != (_DWORD)v3 || *(_DWORD *)(v14 + 4) <= (int)v4));
    }
    while (v13 < v14);
    v6 = (uint64_t *)(v13 - 8);
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      if (v6 < *(_DWORD *)a1 || v6 == *(_DWORD *)a1 && *(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 4))
      {
        v7 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)a1, (int *)(a1 + 8), (uint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, (int *)(a1 + 8), a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, (int *)(a1 + 8), a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v8 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)a1, (int *)(a1 + 8), (uint64_t *)(a1 + 16));
      v9 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v9 < *(_DWORD *)v8 || *(_DWORD *)v9 == *(_DWORD *)v8 && *(_DWORD *)(v9 + 4) > *(_DWORD *)(v8 + 4))
    {
      v12 = *(_QWORD *)v9;
      *(_QWORD *)v9 = *(_QWORD *)v8;
      v13 = (_QWORD *)a1;
      if (v8 != a1)
      {
        v14 = v10;
        while (1)
        {
          v15 = *(_DWORD *)(a1 + v14 + 8);
          if (v15 <= (int)v12)
          {
            if (v15 != (_DWORD)v12)
            {
              v13 = (_QWORD *)v8;
              goto LABEL_20;
            }
            if (*(_DWORD *)(a1 + v14 + 12) >= SHIDWORD(v12))
              break;
          }
          v8 -= 8;
          *(_QWORD *)(a1 + v14 + 16) = *(_QWORD *)(a1 + v14 + 8);
          v14 -= 8;
          if (v14 == -16)
          {
            v13 = (_QWORD *)a1;
            goto LABEL_20;
          }
        }
        v13 = (_QWORD *)(a1 + v14 + 16);
      }
LABEL_20:
      *v13 = v12;
      if (++v11 == 8)
        return v9 + 8 == a2;
    }
    v8 = v9;
    v10 += 8;
    v9 += 8;
    if (v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)a1, a2, (uint64_t *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && *(_DWORD *)(a3 + 4) > a2[1])
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && a2[1] > *(_DWORD *)(a1 + 4))
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 == *(_DWORD *)a4 && *(_DWORD *)(a5 + 4) > *(_DWORD *)(a4 + 4))
  {
    v11 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v12;
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && *(_DWORD *)(a3 + 4) > a2[1])
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && a2[1] > *(_DWORD *)(a1 + 4))
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,fst::IntervalSet<int>::Interval *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 3;
    if ((uint64_t)a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 8 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 == *(_DWORD *)a1 && *((_DWORD *)v14 + 1) > *(_DWORD *)(a1 + 4))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, a4, v9, (uint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (uint64_t *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((_DWORD *)a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, (uint64_t)(v19 + 1), a4, ((uint64_t)v19 - a1 + 8) >> 3);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (_DWORD *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || *v8 == v10 && *(_DWORD *)(result + 8 * v7 + 4) > v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      if (*v8 >= *(_DWORD *)a4 && (*v8 != *(_DWORD *)a4 || v8[1] <= *((_DWORD *)a4 + 1)))
      {
        v11 = *a4;
        *a4 = *(_QWORD *)v8;
        if (v5 >= v7)
        {
          while (1)
          {
            v13 = 2 * v7;
            v7 = (2 * v7) | 1;
            v12 = (_DWORD *)(result + 8 * v7);
            v14 = v13 + 2;
            if (v14 < a3)
            {
              v15 = v12[2];
              if (*v12 < v15 || *v12 == v15 && *(_DWORD *)(result + 8 * v7 + 4) > v12[3])
              {
                v12 += 2;
                v7 = v14;
              }
            }
            if (*v12 < (int)v11 || *v12 == (_DWORD)v11 && v12[1] > SHIDWORD(v11))
              break;
            *(_QWORD *)v8 = *(_QWORD *)v12;
            v8 = v12;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v12 = v8;
LABEL_22:
        *(_QWORD *)v12 = v11;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || *result == v10 && SHIDWORD(v6[v7]) > result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *(_QWORD *)result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v7 = *(_DWORD *)(a2 - 8);
    if (*(_DWORD *)v6 < v7 || *(_DWORD *)v6 == v7 && *(_DWORD *)(result + 8 * v5 + 4) > *(_DWORD *)(a2 - 4))
    {
      v8 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = *v6;
      if (v4 >= 2)
      {
        while (1)
        {
          v10 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v9 = (_DWORD *)(result + 8 * v5);
          if (*v9 >= (int)v8 && (*v9 != (_DWORD)v8 || *(_DWORD *)(result + 8 * v5 + 4) <= SHIDWORD(v8)))
            break;
          *v6 = *(_QWORD *)v9;
          v6 = (_QWORD *)(result + 8 * v5);
          if (v10 <= 1)
            goto LABEL_11;
        }
      }
      v9 = v6;
LABEL_11:
      *(_QWORD *)v9 = v8;
    }
  }
  return result;
}

uint64_t fst::Condense<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  __n128 v10;
  float v11;
  BOOL v13;
  uint64_t v14;
  __int128 *v15;
  int v16;
  __int128 v18;
  _QWORD v19[3];
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22[11];
  uint64_t v23;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v23 = 0;
  v22[0] = (uint64_t)a3;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = (uint64_t)&v23;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, v22, 0);
  v6 = *a3;
  if (a3[1] == *a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 0x2800000000, 0x2800000000);
  v7 = 0;
  do
  {
    v8 = *(unsigned int *)(v6 + 4 * v7);
    while ((int)v8 >= (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2))
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    if (v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v8);
    v9 = (*(float (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, v7);
    *(float *)v19 = v9;
    LODWORD(v18) = 2139095040;
    if (v9 != INFINITY)
    {
      v10.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v8);
      if (v10.n128_f32[0] >= v9)
        v11 = v9;
      else
        v11 = v10.n128_f32[0];
      v13 = v9 == -INFINITY || v10.n128_f32[0] == -INFINITY;
      v10.n128_u32[0] = 2143289344;
      if (!v13)
        v10.n128_f32[0] = v11;
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 184))(a2, v8, v10);
    }
    v21 = 0;
    (*(void (**)(uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v7, v19);
    while (1)
    {
      if (!v19[0])
      {
        if (v21 >= v19[2])
          goto LABEL_37;
        goto LABEL_27;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v19[0] + 24))(v19[0]))
        break;
      if (v19[0])
      {
        v15 = (__int128 *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v19[0] + 32))(v19[0], v14);
        goto LABEL_28;
      }
LABEL_27:
      v15 = (__int128 *)(v19[1] + 16 * v21);
LABEL_28:
      v18 = *v15;
      v16 = *(_DWORD *)(*a3 + 4 * SHIDWORD(v18));
      if (v16 != (_DWORD)v8)
      {
        while (v16 >= (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2))
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        HIDWORD(v18) = v16;
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, v8, &v18);
      }
      if (v19[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 40))(v19[0]);
      else
        ++v21;
    }
    if (v19[0])
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v19[0] + 8))(v19[0], v14);
      goto LABEL_39;
    }
LABEL_37:
    if (v20)
      --*v20;
LABEL_39:
    ++v7;
    v6 = *a3;
  }
  while (v7 < (a3[1] - *a3) >> 2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 0x2800000000, 0x2800000000);
}

void sub_1ADDC9220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::IntervalSet<int>>::__assign_with_size[abi:ne180100]<fst::IntervalSet<int>*,fst::IntervalSet<int>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  char v23;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<fst::IntervalSet<int>>::__vdeallocate(a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*,fst::IntervalSet<int>*,fst::IntervalSet<int>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::IntervalSet<int> *,fst::IntervalSet<int> *,fst::IntervalSet<int> *>((int)&v22, a2, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*,fst::IntervalSet<int>*,fst::IntervalSet<int>*>(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::IntervalSet<int> *,fst::IntervalSet<int> *,fst::IntervalSet<int> *>((int)&v23, a2, a3, v9);
  v17 = v16;
  v18 = a1[1];
  if (v18 != v16)
  {
    v19 = a1[1];
    do
    {
      v21 = *(void **)(v19 - 32);
      v19 -= 32;
      v20 = v21;
      if (v21)
      {
        *(_QWORD *)(v18 - 24) = v20;
        operator delete(v20);
      }
      v18 = v19;
    }
    while (v19 != v17);
  }
  a1[1] = v17;
}

void sub_1ADDC93AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADDC93B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<fst::IntervalSet<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*,fst::IntervalSet<int>*,fst::IntervalSet<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<fst::IntervalSet<int>::Interval,std::allocator<fst::IntervalSet<int>::Interval>>::__init_with_size[abi:ne180100]<fst::IntervalSet<int>::Interval*,fst::IntervalSet<int>::Interval*>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADDC9498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::IntervalSet<int>::Interval,std::allocator<fst::IntervalSet<int>::Interval>>::__init_with_size[abi:ne180100]<fst::IntervalSet<int>::Interval*,fst::IntervalSet<int>::Interval*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADDC9508(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::IntervalSet<int> *,fst::IntervalSet<int> *,fst::IntervalSet<int> *>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(v5 + 24);
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<fst::IntervalSet<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = -1;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_DWORD *)v15 + 6) = -1;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<fst::IntervalSet<int>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_1ADDC9728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1BE28;
  v2 = a1[3];
  if (v2)
  {
    *(_QWORD *)(v2 + 24) = a1[17];
    a1[17] = v2;
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[10] = &unk_1E5D196C0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_1AE182340;
  *(_QWORD *)a1 = &unk_1E5D21CC8;
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(a1 + 32, a2 + 32, a3);
  v5 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  if (v5)
  {
    v6 = operator new();
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(v6, *(_QWORD *)(a2 + 184));
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a1 + 184) = v6;
  *(_DWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 198) = *(_BYTE *)(a2 + 198);
  return a1;
}

void sub_1ADDC9870(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10A0C40F647C574);
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = operator new();
  v5 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
  v6 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v4 + 32) = v6;
  *(_BYTE *)(v4 + 48) = *(_BYTE *)(v5 + 48);
  ++*(_DWORD *)(v6 + 48);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  ++*(_DWORD *)(*(_QWORD *)(a1 + 80) + 8);
  return a1;
}

void sub_1ADDC995C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Find(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 196))
  {
    fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SetState(a1 + 32, *(_DWORD *)(a1 + 192));
    *(_BYTE *)(a1 + 196) = 1;
  }
  return fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Find(a1 + 32, a2);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachInit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v11;
  char v12;

  *(_BYTE *)(a1 + 112) = a3;
  if (a3)
    v7 = 0x10000000;
  else
    v7 = 0x40000000;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v7, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LabelReachable::ReachInit: fst is not sorted", 44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 113) = 1;
  }
  fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(*(_QWORD *)(a1 + 88), a2, a4);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 48))
    *(_BYTE *)(a1 + 113) = 1;
}

void sub_1ADDC9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  fst *v5;
  _QWORD *v6;
  void **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float *v46;
  double v47;
  unint64_t v48;
  double *v49;
  double *v50;
  double *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  double *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p[2];
  unint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;

  if ((a3 & 1) != 0)
    return;
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)v4 != *(_QWORD *)(v4 + 8) || *(_QWORD *)(a1 + 8) < *(_QWORD *)(a1 + 16))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v64, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FastLogAccumulator: initialization error.", 41);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v64);
    if (SHIBYTE(v61) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 48) = 1;
    return;
  }
  v8 = (void **)(v4 + 24);
  v9 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  std::vector<long long>::reserve((void **)(v4 + 24), v9);
  v66 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v64);
  v10 = 0;
  v59 = v4 + 40;
LABEL_12:
  if (!v64)
  {
    if ((int)v66 >= v65)
      return;
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64))
  {
    if (v64)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v64 + 24))();
LABEL_18:
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v11);
      v14 = *(char **)(v4 + 32);
      v13 = *(_QWORD *)(v4 + 40);
      if (v12 < *(_QWORD *)(a1 + 8))
      {
        if ((unint64_t)v14 >= v13)
        {
          v17 = (char *)*v8;
          v18 = (v14 - (_BYTE *)*v8) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v13 - (_QWORD)v17;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v59, v21);
            v17 = *(char **)(v4 + 24);
            v14 = *(char **)(v4 + 32);
          }
          else
          {
            v22 = 0;
          }
          v29 = &v22[8 * v18];
          *(_QWORD *)v29 = -1;
          v15 = v29 + 8;
          while (v14 != v17)
          {
            v30 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v29 - 1) = v30;
            v29 -= 8;
          }
          *(_QWORD *)(v4 + 24) = v29;
          *(_QWORD *)(v4 + 32) = v15;
          *(_QWORD *)(v4 + 40) = &v22[8 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v14 = -1;
          v15 = v14 + 8;
        }
        *(_QWORD *)(v4 + 32) = v15;
        goto LABEL_100;
      }
      if ((unint64_t)v14 >= v13)
      {
        v23 = (char *)*v8;
        v24 = (v14 - (_BYTE *)*v8) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v26 = v13 - (_QWORD)v23;
        if (v26 >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v59, v27);
          v23 = *(char **)(v4 + 24);
          v14 = *(char **)(v4 + 32);
        }
        else
        {
          v28 = 0;
        }
        v31 = &v28[8 * v24];
        *(_QWORD *)v31 = v10;
        v16 = v31 + 8;
        while (v14 != v23)
        {
          v32 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v31 - 1) = v32;
          v31 -= 8;
        }
        *(_QWORD *)(v4 + 24) = v31;
        *(_QWORD *)(v4 + 32) = v16;
        *(_QWORD *)(v4 + 40) = &v28[8 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v14 = v10;
        v16 = v14 + 8;
      }
      *(_QWORD *)(v4 + 32) = v16;
      v34 = *(_QWORD **)(v4 + 8);
      v33 = *(_QWORD *)(v4 + 16);
      if ((unint64_t)v34 >= v33)
      {
        v36 = *(_QWORD **)v4;
        v37 = ((uint64_t)v34 - *(_QWORD *)v4) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v33 - (_QWORD)v36;
        if (v39 >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4 + 16, v40);
          v36 = *(_QWORD **)v4;
          v34 = *(_QWORD **)(v4 + 8);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[8 * v37];
        *(_QWORD *)v42 = 0x7FF0000000000000;
        v35 = v42 + 8;
        while (v34 != v36)
        {
          v43 = *--v34;
          *((_QWORD *)v42 - 1) = v43;
          v42 -= 8;
        }
        *(_QWORD *)v4 = v42;
        *(_QWORD *)(v4 + 8) = v35;
        *(_QWORD *)(v4 + 16) = &v41[8 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v34 = 0x7FF0000000000000;
        v35 = v34 + 1;
      }
      *(_QWORD *)(v4 + 8) = v35;
      v63 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v11, __p);
      v44 = 0;
      ++v10;
      v45 = INFINITY;
      while (1)
      {
        if (__p[0])
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]))
          {
            if (__p[0])
            {
              (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
              goto LABEL_100;
            }
LABEL_98:
            if (v62)
              --*v62;
LABEL_100:
            if (v64)
              (*(void (**)(uint64_t))(*(_QWORD *)v64 + 32))(v64);
            else
              ++v66;
            goto LABEL_12;
          }
          if (__p[0])
          {
            v46 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
            goto LABEL_75;
          }
        }
        else if (v63 >= v61)
        {
          goto LABEL_98;
        }
        v46 = (float *)((char *)__p[1] + 16 * v63);
LABEL_75:
        v47 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v45, v46[2]);
        v45 = v47;
        if (!(++v44 % *(_QWORD *)(a1 + 16)))
        {
          v49 = *(double **)(v4 + 8);
          v48 = *(_QWORD *)(v4 + 16);
          if ((unint64_t)v49 >= v48)
          {
            v51 = *(double **)v4;
            v52 = ((uint64_t)v49 - *(_QWORD *)v4) >> 3;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v54 = v48 - (_QWORD)v51;
            if (v54 >> 2 > v53)
              v53 = v54 >> 2;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4 + 16, v55);
              v51 = *(double **)v4;
              v49 = *(double **)(v4 + 8);
            }
            else
            {
              v56 = 0;
            }
            v57 = (double *)&v56[8 * v52];
            *v57 = v45;
            v50 = v57 + 1;
            while (v49 != v51)
            {
              v58 = *((_QWORD *)v49-- - 1);
              *((_QWORD *)v57-- - 1) = v58;
            }
            *(_QWORD *)v4 = v57;
            *(_QWORD *)(v4 + 8) = v50;
            *(_QWORD *)(v4 + 16) = &v56[8 * v55];
            if (v51)
              operator delete(v51);
          }
          else
          {
            *v49 = v47;
            v50 = v49 + 1;
          }
          *(_QWORD *)(v4 + 8) = v50;
          ++v10;
        }
        if (__p[0])
          (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
        else
          ++v63;
      }
    }
LABEL_17:
    v11 = v66;
    goto LABEL_18;
  }
  if (v64)
    (*(void (**)(void))(*(_QWORD *)v64 + 8))();
}

void sub_1ADDCA080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(double a1, float a2)
{
  double v3;
  double v4;
  long double v5;
  double v6;
  long double v7;

  v3 = a2;
  if (a1 != INFINITY)
  {
    if (v3 >= a1)
    {
      v6 = 0.0;
      if (v3 - a1 != INFINITY)
      {
        v7 = exp(-(v3 - a1));
        v6 = log(v7 + 1.0);
      }
      return a1 - v6;
    }
    else
    {
      v4 = 0.0;
      if (a1 - v3 != INFINITY)
      {
        v5 = exp(-(a1 - v3));
        v4 = log(v5 + 1.0);
      }
      return v3 - v4;
    }
  }
  return v3;
}

BOOL fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LookAheadLabel(uint64_t a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 1;
  v2 = *(_QWORD *)(a1 + 184);
  if (!v2)
    return 1;
  if (!*(_BYTE *)(a1 + 197))
  {
    *(_DWORD *)(v2 + 8) = *(_DWORD *)(a1 + 192);
    *(_BYTE *)(a1 + 197) = 1;
  }
  return !*(_BYTE *)(v2 + 113)
      && fst::IntervalSet<int>::Member((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + 56) + 32 * *(int *)(v2 + 8)), a2);
}

void fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v9;
  char v10;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[3];
  if (a2 >= (unint64_t)((v3[4] - v4) >> 3))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v10, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"FastLogAccumulator::SetState: invalid state id.", 47);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v10);
    if (v9 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 8 * a2);
    if (v5 < 0)
      *(_QWORD *)(a1 + 40) = 0;
    else
      *(_QWORD *)(a1 + 40) = *v3 + 8 * v5;
  }
}

void sub_1ADDCA2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::IntervalSet<int>::Member(_QWORD *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;

  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = v2 >> 3;
  v4 = (_DWORD *)*a1;
  do
  {
    v5 = v3 >> 1;
    v6 = &v4[2 * (v3 >> 1)];
    if (*v6 < a2 || *v6 == a2 && v4[2 * v5 + 1] > a2)
    {
      v4 = v6 + 2;
      v5 = v3 + ~v5;
    }
    v3 = v5;
  }
  while (v5);
  return v4 != (_DWORD *)*a1 && *(v4 - 1) > a2;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LookAheadFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  float v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  float v17;
  float v18;
  _QWORD v22[3];
  _DWORD *v23;
  uint64_t v24;
  int v25;
  float v26;

  if (*(_QWORD *)(a1 + 176) != a2)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 112))(a1, a2, 0);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v6 = *(_QWORD *)(a1 + 184);
  if (!v6)
    return 1;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a1 + 192);
  if ((_DWORD)a3 != -1)
  {
    fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(*(_QWORD *)(v6 + 88), a3);
    if (*(_BYTE *)(*(_QWORD *)(v6 + 88) + 48))
      *(_BYTE *)(v6 + 113) = 1;
  }
  *(_BYTE *)(a1 + 197) = 1;
  v24 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3, v22);
  if (v22[0])
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v22[0] + 80))(v22[0], 16, 16);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 40))(*(_QWORD *)(a1 + 176), a3);
  v9 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Reach<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v7, v22, 0, v8, 1);
  v10 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176), a3);
  v26 = v10;
  v25 = 2139095040;
  if (v10 == INFINITY)
  {
    v12 = 0;
    if (!v9)
      goto LABEL_39;
  }
  else
  {
    v11 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachFinal(*(_QWORD *)(a1 + 184));
    v12 = v11;
    if (!v9)
    {
      if (!v11)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  v14 = *(_QWORD *)(a1 + 184);
  v15 = *(_QWORD *)(v14 + 56);
  if (*(_QWORD *)(v14 + 64) - v15 != 1 || (v12 & 1) != 0)
  {
    v17 = *(float *)(v14 + 72);
    *(float *)(a1 + 8) = v17;
    if ((v12 & 1) == 0)
    {
LABEL_34:
      v12 = 0;
      goto LABEL_39;
    }
    if (v10 <= v17)
      v18 = v10;
    else
      v18 = v17;
    if (v10 == -INFINITY || v17 == -INFINITY)
      v10 = NAN;
    else
      v10 = v18;
LABEL_33:
    *(float *)(a1 + 8) = v10;
    v12 = 1;
    goto LABEL_39;
  }
  if (!v22[0])
  {
    v24 = *(_QWORD *)(v14 + 56);
LABEL_37:
    v16 = (_OWORD *)(v22[1] + 16 * v15);
    goto LABEL_38;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v22[0] + 64))(v22[0]);
  if (!v22[0])
  {
    v15 = v24;
    goto LABEL_37;
  }
  v16 = (_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v22[0] + 32))(v22[0]);
LABEL_38:
  *(_OWORD *)(a1 + 12) = *v16;
LABEL_39:
  v13 = v9 | v12;
  if (v22[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v22[0] + 8))(v22[0]);
  }
  else if (v23)
  {
    --*v23;
  }
  return v13;
}

void sub_1ADDCA5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Reach<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  int **v11;
  int *v12;
  int *v13;
  uint64_t *v14;
  double v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 113))
    return 0;
  v11 = (int **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 32 * *(int *)(a1 + 8));
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)(a1 + 56) = -1;
  v14 = (uint64_t *)(a1 + 56);
  v15 = *(double *)(a1 + 104) + (double)(unint64_t)(((char *)v12 - (char *)v13) >> 3);
  *(double *)(a1 + 96) = *(double *)(a1 + 96) + 1.0;
  *(double *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 2139095040;
  if (*a2)
  {
    v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
    if (*a2)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, 16, 16);
      if (*a2)
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 64))(*a2, a3);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v16 = 15;
  }
  a2[4] = a3;
LABEL_9:
  v18 = *v11;
  v17 = v11[1];
  if (2 * (a4 - a3) >= (unint64_t)(((char *)v17 - (char *)*v11) >> 3))
  {
    while (v18 != v17)
    {
      v26 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LowerBound<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a3, a4, *v18);
      v27 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LowerBound<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, v26, a4, v18[1]);
      a3 = v27;
      if (v27 > v26)
      {
        if (*v14 < 0)
          *v14 = v26;
        *(_QWORD *)(a1 + 64) = v27;
        if (a5)
        {
          if (*a2)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, 4, 15);
          *(float *)(a1 + 72) = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Sum<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(_QWORD *)(a1 + 88), a2, v26, a3, *(float *)(a1 + 72));
        }
      }
      v17 = v11[1];
      v18 += 2;
    }
  }
  else
  {
    if (*a2)
    {
      if (*(_BYTE *)(a1 + 112))
        v19 = 1;
      else
        v19 = 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, v19, 15);
    }
    if (a4 > a3)
    {
      v20 = -1;
      do
      {
        if (*a2)
          v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
        else
          v21 = a2[1] + 16 * a2[4];
        if (*(_BYTE *)(a1 + 112))
          v22 = (int *)v21;
        else
          v22 = (int *)(v21 + 4);
        v23 = *v22;
        if (*v22 == v20
          || v23
          && !*(_BYTE *)(a1 + 113)
          && fst::IntervalSet<int>::Member((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 32 * *(int *)(a1 + 8)), v23))
        {
          if (*v14 < 0)
            *v14 = a3;
          *(_QWORD *)(a1 + 64) = a3 + 1;
          if (a5)
          {
            if (!*a2 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 4) != 0)
            {
              *(float *)(a1 + 72) = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(*(float *)(a1 + 72), *(float *)(v21 + 8));
            }
            else
            {
              if (*a2
                && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, 4, 15), *a2))
              {
                v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
              }
              else
              {
                v24 = a2[1] + 16 * a2[4];
              }
              *(float *)(a1 + 72) = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(*(float *)(a1 + 72), *(float *)(v24 + 8));
              if (!*a2)
              {
                v20 = v23;
LABEL_47:
                ++a2[4];
                goto LABEL_48;
              }
              if (*(_BYTE *)(a1 + 112))
                v25 = 1;
              else
                v25 = 2;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, v25, 15);
            }
          }
          v20 = v23;
        }
        if (!*a2)
          goto LABEL_47;
        (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
LABEL_48:
        ++a3;
      }
      while (a4 != a3);
    }
  }
  if (*a2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, v16, 31);
  return *v14 >= 0;
}

BOOL fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachFinal(uint64_t a1)
{
  _QWORD *v2;
  int v3;

  if (*(_BYTE *)(a1 + 113))
    return 0;
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 56) + 32 * *(int *)(a1 + 8));
  v3 = fst::LabelReachableData<int>::FinalLabel(*(_QWORD *)(a1 + 80));
  return fst::IntervalSet<int>::Member(v2, v3);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LowerBound<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(a1 + 112))
      v11 = 1;
    else
      v11 = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, v11, 15);
  }
  while (a3 < a4)
  {
    v12 = a4 + a3;
    if (a4 + a3 < 0 != __OFADD__(a4, a3))
      ++v12;
    v13 = v12 >> 1;
    if (*a2)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 64))(*a2, v13);
    else
      a2[4] = v13;
    v14 = *a2;
    if (*(_BYTE *)(a1 + 112))
    {
      if (v14)
        v15 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      else
        v15 = (_DWORD *)(a2[1] + 16 * a2[4]);
    }
    else
    {
      if (v14)
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      else
        v16 = a2[1] + 16 * a2[4];
      v15 = (_DWORD *)(v16 + 4);
    }
    if (*v15 <= a5)
    {
      if (*v15 >= a5)
      {
        while (v13 > a3)
        {
          --v13;
          if (*a2)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 64))(*a2, v13);
          else
            a2[4] = v13;
          v17 = *a2;
          if (*(_BYTE *)(a1 + 112))
          {
            if (v17)
              v18 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
            else
              v18 = (_DWORD *)(a2[1] + 16 * a2[4]);
          }
          else
          {
            if (v17)
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
            else
              v19 = a2[1] + 16 * a2[4];
            v18 = (_DWORD *)(v19 + 4);
          }
          if (*v18 != a5)
          {
            v20 = *a2;
            a3 = v13 + 1;
            if (*a2)
              goto LABEL_39;
            goto LABEL_43;
          }
        }
        goto LABEL_40;
      }
      a3 = v13 + 1;
    }
    else
    {
      a4 = v13;
    }
  }
  v20 = *a2;
  if (!*a2)
  {
LABEL_43:
    a2[4] = a3;
    return a3;
  }
LABEL_39:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 64))(v20, a3);
LABEL_40:
  if (*a2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, 15, 15);
  return a3;
}

float fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Sum<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, float a5)
{
  float v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  float v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(a1 + 48))
    return NAN;
  v5 = a5;
  if (*(_QWORD *)(a1 + 40))
  {
    if (a3 <= 0)
    {
      v11 = 0;
      v10 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = (a3 - 1) / v10 + 1;
    }
    v12 = a4 / v10;
    v13 = v10 * v11;
    v14 = a4 / v10 * v10;
  }
  else
  {
    v12 = -1;
    v13 = a4;
    v14 = a4;
    v11 = -1;
  }
  if (v13 > a3)
  {
    v15 = v13 >= a4 ? a4 : v13;
    if (*a2)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 64))(*a2, a3);
    else
      a2[4] = a3;
    v16 = __OFSUB__(v15, a3);
    v17 = v15 - a3;
    if (!((v17 < 0) ^ v16 | (v17 == 0)))
    {
      do
      {
        if (*a2)
          v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
        else
          v18 = a2[1] + 16 * a2[4];
        v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v5, *(float *)(v18 + 8));
        if (*a2)
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
        else
          ++a2[4];
        --v17;
      }
      while (v17);
    }
  }
  if (v13 < v14)
  {
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(double *)(v19 + 8 * v12);
    v21 = *(double *)(v19 + 8 * v11);
    if (v20 < v21)
    {
      if (v21 != INFINITY)
      {
        v22 = v21 - v20;
        v23 = 0.0;
        if (v22 != INFINITY)
        {
          v24 = exp(-v22);
          v23 = log(1.0 - v24);
        }
        v20 = v20 - v23;
      }
      v25 = v20;
      v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v5, v25);
    }
  }
  if (v14 < a4)
  {
    v26 = v13 <= v14 ? v14 : v13;
    if (*a2)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 64))(*a2, v26);
    else
      a2[4] = v26;
    v27 = a4 <= v26;
    v28 = a4 - v26;
    if (!v27)
    {
      do
      {
        if (*a2)
          v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
        else
          v29 = a2[1] + 16 * a2[4];
        v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v5, *(float *)(v29 + 8));
        if (*a2)
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
        else
          ++a2[4];
        --v28;
      }
      while (v28);
    }
  }
  return v5;
}

float fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(float a1, float a2)
{
  double v2;
  double v3;
  double v4;
  long double v5;
  double v7;
  long double v8;

  v2 = a1;
  v3 = a2;
  if (a1 <= a2)
  {
    v7 = 0.0;
    if (v3 - v2 != INFINITY)
    {
      v8 = exp(-(v3 - v2));
      v7 = log(v8 + 1.0);
    }
    return v2 - v7;
  }
  else
  {
    v4 = 0.0;
    if (v2 - v3 != INFINITY)
    {
      v5 = exp(-(v2 - v3));
      v4 = log(v5 + 1.0);
    }
    return v3 - v4;
  }
}

uint64_t fst::LabelReachableData<int>::FinalLabel(uint64_t a1)
{
  uint64_t result;
  int *v3;

  result = *(unsigned int *)(a1 + 4);
  if ((_DWORD)result == -1)
  {
    v3 = &fst::kNoLabel;
    result = *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 16, &fst::kNoLabel, (uint64_t)&std::piecewise_construct, &v3)+ 5);
    *(_DWORD *)(a1 + 4) = result;
  }
  return result;
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D22D40;
  v9 = *(_QWORD *)(a2 + 8);
  ++*(_DWORD *)(v9 + 56);
  *(_QWORD *)(a1 + 64) = &unk_1E5D22AC8;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = a4;
  std::string::operator=(v8, a3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                               + 32))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0007);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(v10 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
    v10 = *(_QWORD *)(a1 + 72);
  }
  v14 = *(_QWORD *)(v10 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 != v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 48) = v16;
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (v17)
    ++*(_DWORD *)(v17 + 16);
  return a1;
}

{
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D22D40;
  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst((_QWORD *)(a1 + 64), a2);
  *(_QWORD *)(a1 + 80) = a4;
  std::string::operator=(v8, a3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                               + 32))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0007);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 40) = v12;
    v9 = *(_QWORD *)(a1 + 72);
  }
  v13 = *(_QWORD *)(v9 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  if (v14 != v13)
  {
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v13)
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    else
      v15 = 0;
    *(_QWORD *)(a1 + 48) = v15;
  }
  v16 = *(_QWORD *)(a1 + 80);
  if (v16)
    ++*(_DWORD *)(v16 + 16);
  return a1;
}

void sub_1ADDCB09C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(v1 + 64) = &unk_1E5D23A78;
  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~AddOnImpl(_QWORD *a1)
{
  fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~AddOnImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~AddOnImpl(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D22D40;
  v2 = a1[10];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16) - 1;
    *(_DWORD *)(v2 + 16) = v3;
    if (!v3)
    {
      v4 = fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::~AddOnPair((uint64_t *)v2);
      MEMORY[0x1AF44D190](v4, 0x1020C40EDCEB4C7);
    }
  }
  a1[8] = &unk_1E5D23A78;
  v5 = (_DWORD *)a1[9];
  if (v5)
  {
    v6 = v5[14] - 1;
    v5[14] = v6;
    if (!v6)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t *fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::~AddOnPair(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 + 8) - 1;
    *(_DWORD *)(v2 + 8) = v3;
    if (!v3)
    {
      v7 = (void **)(v2 + 56);
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v7);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 16);
      MEMORY[0x1AF44D190](v2, 0x10A0C40A16849A9);
    }
  }
  v4 = a1[1];
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8) - 1;
    *(_DWORD *)(v4 + 8) = v5;
    if (!v5)
    {
      v7 = (void **)(v4 + 56);
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v7);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 16);
      MEMORY[0x1AF44D190](v4, 0x10A0C40A16849A9);
    }
  }
  return a1;
}

uint64_t fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>::LabelLookAheadRelabeler<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[120];
  std::string v17;

  v4 = *a2;
  v5 = *a2 + 64;
  v6 = *(_QWORD *)(*a2 + 80);
  if (*(char *)(*a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v4 + 16), *(_QWORD *)(v4 + 24));
  else
    v17 = *(std::string *)(v4 + 16);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 2, 0);
  if (v7)
  {
    v8 = (_QWORD *)v5;
  }
  else
  {
    v8 = (_QWORD *)operator new();
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v8, v5);
    ++*(_DWORD *)(v6 + 16);
    if (*a2)
      (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 8))(*a2);
  }
  if (*(_QWORD *)v6)
  {
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v16, *(_QWORD *)v6, 0);
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel((uint64_t)v16, v8, 1);
    if (!*FLAGS_save_relabel_ipairs)
      goto LABEL_17;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::RelabelPairs((uint64_t)v16, (char **)&v13, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, FLAGS_save_relabel_ipairs);
    fst::WriteIntPairs<int>((uint64_t)__p, &v13);
  }
  else
  {
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v16, *(_QWORD *)(v6 + 8), 0);
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel((uint64_t)v16, v8, 0);
    if (!*FLAGS_save_relabel_opairs)
      goto LABEL_17;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::RelabelPairs((uint64_t)v16, (char **)&v13, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, FLAGS_save_relabel_opairs);
    fst::WriteIntPairs<int>((uint64_t)__p, &v13);
  }
  if (v12 < 0)
    operator delete(__p[0]);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
LABEL_17:
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)v16);
  if (!v7)
  {
    v9 = operator new();
    fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(v9, (uint64_t)v8, &v17, 0);
    *a2 = v9;
    fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::SetAddOn(v9, v6);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    --*(_DWORD *)(v6 + 16);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADDCB488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)&a19);
  if (*(char *)(v19 - 73) < 0)
    operator delete(*(void **)(v19 - 96));
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v13 = 0;
  (*(void (**)(void *, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v11);
  while (1)
  {
    if (!v11)
    {
      if ((int)v13 >= v12)
        goto LABEL_21;
LABEL_7:
      v6 = v13;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
      break;
    if (!v11)
      goto LABEL_7;
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 24))();
LABEL_8:
    (*(void (**)(void *, uint64_t, uint64_t *))(*(_QWORD *)a2 + 296))(a2, v6, &v10);
    while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      v9 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      if (a3)
        LODWORD(v9) = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(a1, v9);
      else
        DWORD1(v9) = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(a1, DWORD1(v9));
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 88))(v10, &v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    else
      ++v13;
  }
  if (v11)
    (*(void (**)(void))(*(_QWORD *)v11 + 8))();
LABEL_21:
  if ((a3 & 1) != 0)
  {
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
    v7 = 35;
  }
  else
  {
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
    v7 = 36;
  }
  return (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)a2 + 8 * v7))(a2, 0);
}

void sub_1ADDCB6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::RelabelPairs(uint64_t a1, char **a2, char a3)
{
  uint64_t v5;
  uint64_t *i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v40;

  a2[1] = *a2;
  v5 = fst::LabelReachableData<int>::Label2Index(*(_QWORD *)(a1 + 80));
  for (i = *(uint64_t **)(v5 + 16); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 5);
    if (v7 != fst::LabelReachableData<int>::FinalLabel(*(_QWORD *)(a1 + 80)))
    {
      v9 = *((unsigned int *)i + 4);
      v8 = *((unsigned int *)i + 5);
      v11 = (uint64_t *)a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - *a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
LABEL_44:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = v10 - (_QWORD)*a2;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = v9 | (v8 << 32);
        v12 = v18 + 8;
        v20 = *a2;
        v19 = a2[1];
        if (v19 != *a2)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = *a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v9 | (v8 << 32);
        v12 = (char *)(v11 + 1);
      }
      a2[1] = v12;
    }
  }
  if ((a3 & 1) != 0)
  {
    v40 = 1;
    if (*(_QWORD *)(v5 + 24))
    {
      do
      {
        v22 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)v5, (int *)&v40);
        if (!v22
          || (v23 = *((_DWORD *)v22 + 5),
              v23 == fst::LabelReachableData<int>::FinalLabel(*(_QWORD *)(a1 + 80))))
        {
          v24 = v40;
          v25 = (*(_DWORD *)(v5 + 24) + 1);
          v27 = (unint64_t *)a2[1];
          v26 = (unint64_t)a2[2];
          if ((unint64_t)v27 >= v26)
          {
            v29 = ((char *)v27 - *a2) >> 3;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_44;
            v30 = v26 - (_QWORD)*a2;
            v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1))
              v31 = v29 + 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v32);
            else
              v33 = 0;
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = v24 | (v25 << 32);
            v28 = v34 + 8;
            v36 = *a2;
            v35 = a2[1];
            if (v35 != *a2)
            {
              do
              {
                v37 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v34 - 1) = v37;
                v34 -= 8;
              }
              while (v35 != v36);
              v35 = *a2;
            }
            *a2 = v34;
            a2[1] = v28;
            a2[2] = &v33[8 * v32];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v27 = v40 | (unint64_t)(v25 << 32);
            v28 = (char *)(v27 + 1);
          }
          a2[1] = v28;
        }
        v38 = (int)v40++ + 1;
      }
      while (*(_QWORD *)(v5 + 24) >= v38);
    }
  }
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 80) = a2;
  if (!a3)
  {
    a3 = operator new();
    a2 = *(_QWORD *)(a1 + 80);
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a3;
  *(_WORD *)(a1 + 112) = 0;
  ++*(_DWORD *)(a2 + 8);
  return a1;
}

void sub_1ADDCBA04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v5;
  int *v6;

  v5 = a2;
  if ((_DWORD)a2)
  {
    if (!*(_BYTE *)(a1 + 113))
    {
      v2 = fst::LabelReachableData<int>::Label2Index(*(_QWORD *)(a1 + 80));
      v6 = &v5;
      v3 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v2, &v5, (uint64_t)&std::piecewise_construct, &v6);
      a2 = *((unsigned int *)v3 + 5);
      if (!(_DWORD)a2)
      {
        a2 = (*(_DWORD *)(v2 + 24) + 1);
        *((_DWORD *)v3 + 5) = a2;
      }
    }
  }
  return a2;
}

uint64_t fst::WriteIntPairs<int>(uint64_t a1, _QWORD *a2)
{
  fst *v4;
  uint64_t v5;
  _QWORD *v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  fst::LogMessage *p_p;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type size;
  std::string __p;
  char v26;
  void *v27[2];
  char v28;

  v4 = (fst *)fst::cout((fst *)a1);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = (_QWORD *)operator new();
    v4 = (fst *)std::ofstream::basic_ofstream(v6);
    if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ERROR");
      v7 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)v27);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"WriteIntPairs: Can't open file: ", 32);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = a1;
      else
        v11 = *(_QWORD *)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      p_p = (fst::LogMessage *)&__p;
LABEL_35:
      fst::LogMessage::~LogMessage(p_p);
      if (v28 < 0)
        operator delete(v27[0]);
      return 0;
    }
  }
  else
  {
    v6 = v4;
  }
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\t", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v4 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
      ++v15;
      v14 += 8;
    }
    while (v15 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)v27);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"WriteIntPairs: Write failed: ", 29);
    if (*(char *)(a1 + 23) < 0)
    {
      v22 = *(_QWORD *)(a1 + 8);
      if (v22)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, v22);
        goto LABEL_26;
      }
    }
    else if (*(_BYTE *)(a1 + 23))
    {
      __p = *(std::string *)a1;
LABEL_26:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &__p;
      else
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v23, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      p_p = (fst::LogMessage *)&v26;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
    goto LABEL_26;
  }
  if (v6 != (_QWORD *)fst::cout(v4))
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return 1;
}

void sub_1ADDCBD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  fst *v6;
  _QWORD *v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(v2 + 8) - 1;
  *(_DWORD *)(v2 + 8) = v3;
  if (!v3)
  {
    __p[0] = (void *)(v2 + 56);
    std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 16);
    MEMORY[0x1AF44D190](v2, 0x10A0C40A16849A9);
  }
  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
    MEMORY[0x1AF44D190](v4, 0xC400A2AC0F1);
  if (*(double *)(a1 + 96) > 0.0 && FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v6 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"# of calls: ", 12);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0)
      operator delete(__p[0]);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"# of intervals/call: ", 21);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 16);
  return a1;
}

void sub_1ADDCC03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D21CC8;
  v2 = a1[23];
  if (v2)
  {
    v3 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C40F647C574);
  }
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(a1 + 4);
  return a1;
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  fst *v7;
  _QWORD *v8;
  fst *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_DWORD *)(v2 + 8) - 1;
  *(_DWORD *)(v2 + 8) = v3;
  if (!v3)
  {
    __p[0] = (void *)(v2 + 56);
    std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 16);
    MEMORY[0x1AF44D190](v2, 0x10A0C40A16849A9);
  }
  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
  {
    v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FastLogAccumulator(v4);
    MEMORY[0x1AF44D190](v5, 0x10A0C4057A1BE17);
  }
  if (*(double *)(a1 + 96) > 0.0 && FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    v7 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v8 = (_QWORD *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"# of calls: ", 12);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v9 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      v10 = (_QWORD *)fst::cerr(v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"# of intervals/call: ", 21);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 16);
  return a1;
}

uint64_t fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FastLogAccumulator(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 48) - 1;
  *(_DWORD *)(v2 + 48) = v3;
  if (!v3)
  {
    v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(_QWORD *)(v2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x1AF44D190](v2, 0x1090C40FB833234);
  }
  return a1;
}

_QWORD *fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D27AA8;
  if (a3)
  {
    v5 = operator new();
    fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADDCC334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4057577405);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D22D40;
  *(_QWORD *)(a1 + 64) = &unk_1E5D22AC8;
  v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  ++*(_DWORD *)(v5 + 56);
  std::string::operator=(v4, (const std::string *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                               + 32))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0004);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 40) = v9;
    v6 = *(_QWORD *)(a1 + 72);
  }
  v10 = *(_QWORD *)(v6 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  v13 = *(_QWORD *)(a1 + 80);
  if (v13)
    ++*(_DWORD *)(v13 + 16);
  return a1;
}

void sub_1ADDCC4A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(v1 + 64) = &unk_1E5D23A78;
  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Write(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string __p;
  int v10;
  std::string v11;
  int v12;
  _BYTE v13[8];
  void *v14[2];
  void *v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v19 = 0;
  v20 = 0;
  v18 = -1;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  v12 = *(_DWORD *)(a3 + 24);
  *(_WORD *)((char *)&v12 + 1) = 0;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, &v11, 1, (uint64_t)v13);
  LODWORD(__p.__r_.__value_.__l.__data_) = 446681434;
  std::ostream::write();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  v10 = *(_DWORD *)(a3 + 24);
  LOBYTE(v10) = 1;
  v6 = fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::WriteFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>((_QWORD *)(a1 + 64), a2, (uint64_t)&__p);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 80);
    v21 = v7 != 0;
    std::ostream::write();
    if (v7)
      fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::Write(*(uint64_t **)(a1 + 80));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
  return v6;
}

void sub_1ADDCC650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a21 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a24);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::Write(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  std::ostream::write();
  if (v2)
    fst::LabelReachableData<int>::Write(*a1);
  v3 = a1[1];
  std::ostream::write();
  if (v3)
    fst::LabelReachableData<int>::Write(a1[1]);
  return 1;
}

uint64_t fst::LabelReachableData<int>::Write(uint64_t a1)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  LOBYTE(__p) = *(_BYTE *)a1;
  std::ostream::write();
  LOBYTE(__p) = *(_BYTE *)(a1 + 1);
  std::ostream::write();
  if (*(_BYTE *)(a1 + 1))
  {
    __p = *(void **)(a1 + 40);
    std::ostream::write();
    for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)*i)
    {
      LODWORD(v10) = *((_DWORD *)i + 4);
      std::ostream::write();
      LODWORD(v10) = *((_DWORD *)i + 5);
      std::ostream::write();
    }
  }
  LODWORD(__p) = fst::LabelReachableData<int>::FinalLabel(a1);
  std::ostream::write();
  v10 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 5;
  std::ostream::write();
  v4 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  while (v4 != v3)
  {
    __p = 0;
    v7 = 0;
    v8 = 0;
    std::vector<fst::IntervalSet<int>::Interval,std::allocator<fst::IntervalSet<int>::Interval>>::__init_with_size[abi:ne180100]<fst::IntervalSet<int>::Interval*,fst::IntervalSet<int>::Interval*>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
    v9 = *(_DWORD *)(v4 + 24);
    fst::IntervalSet<int>::Write((uint64_t *)&__p);
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
    v3 = *(_QWORD *)(a1 + 64);
    v4 += 32;
  }
  return 1;
}

void sub_1ADDCC888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::IntervalSet<int>::Write(uint64_t *a1)
{
  uint64_t i;

  std::ostream::write();
  for (i = *a1; i != a1[1]; i += 8)
  {
    std::ostream::write();
    std::ostream::write();
  }
  return std::ostream::write();
}

uint64_t fst::Replace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  void *v6;
  uint64_t v7;

  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFst(&v6, a1, a3);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 168))(a2, &v6);
  v6 = &unk_1E5D263C8;
  result = v7;
  if (v7)
  {
    v5 = *(_DWORD *)(v7 + 56) - 1;
    *(_DWORD *)(v7 + 56) = v5;
    if (!v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADDCC9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a10);
  _Unwind_Resume(exception_object);
}

void XCount::freeThread(XCount *this)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;

  v1 = (void **)xcountTableTLS();
  if (*v1)
  {
    free(*v1);
    *v1 = 0;
  }
  v2 = (void **)refCountsTLS();
  if (*v2)
  {
    free(*v2);
    *v2 = 0;
  }
  v3 = (void **)freeListTLS();
  if (*v3)
  {
    free(*v3);
    *v3 = 0;
  }
  v4 = (void **)initializedTLS();
  if (*v4)
  {
    free(*v4);
    *v4 = 0;
  }
}

float kaldi::quasar::Range(kaldi::quasar *this, kaldi::quasar::ComputeEngineBufferItf *a2)
{
  float result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;

  if ((*(int (**)(kaldi::quasar *, kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 152))(this, a2) >= 1)
  {
    if ((*(int (**)(kaldi::quasar *))(*(_QWORD *)this + 152))(this) < 1)
    {
      v5 = 1;
    }
    else
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v5 *= (*(unsigned int (**)(kaldi::quasar *, uint64_t))(*(_QWORD *)this + 160))(this, v4);
        v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(kaldi::quasar *))(*(_QWORD *)this + 152))(this));
    }
    v6 = (*(uint64_t (**)(kaldi::quasar *))(*(_QWORD *)this + 120))(this);
    if (v5 >= 1)
    {
      for (i = 0; i != v5; ++i)
      {
        result = (float)(int)i;
        *(float *)(v6 + 4 * i) = (float)(int)i;
      }
    }
  }
  return result;
}

void kaldi::quasar::FixedConfigStream(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  std::string *v13;
  _QWORD *v14;
  std::string __p;
  _BYTE v16[8];
  uint64_t v17[3];

  kaldi::Input::Input(v16, a1, a2);
  v4 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v16);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(_QWORD **)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40), 0);
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = (std::string *)((char *)p_p + size);
    v8 = size - 1;
    while (1)
    {
      v9 = 0;
      while (p_p->__r_.__value_.__s.__data_[v9] == aEngine_0[v9])
      {
        v10 = v9 + 1;
        if (v8 != v9 && v9++ != 8)
          continue;
        v12 = &aEngine_0[v10];
        v13 = (std::string *)((char *)p_p + v10);
        goto LABEL_15;
      }
      v12 = &aEngine_0[v9];
      v13 = (std::string *)((char *)p_p + v9);
LABEL_15:
      if (v12 == "")
        break;
      p_p = (std::string *)((char *)p_p + 1);
      --v8;
      if (p_p == v7)
        goto LABEL_20;
    }
    if (p_p != v13)
    {
      v17[0] = (uint64_t)"</Engine>";
      v17[1] = (uint64_t)"";
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&__p, v17, "\n</Engine>", "", p_p, v13, "\n</Engine>", "");
    }
  }
LABEL_20:
  v14 = (_QWORD *)operator new();
  std::istringstream::basic_istringstream[abi:ne180100](v14, &__p, 8);
  *a3 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)v16);
}

void sub_1ADDCCCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x1AF44D190](v16, 0x10B3C4097FF09DFLL);
  if (a15 < 0)
    operator delete(__p);
  kaldi::Input::~Input((kaldi::Input *)&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoderConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string::size_type v8;
  void **v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  BOOL v24;
  BOOL v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  BOOL v38;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v45;
  BOOL v46;
  std::string::size_type v47;
  uint64_t v48;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  _BOOL4 v57;
  std::string::size_type size;
  std::string::size_type v59;
  uint64_t i;
  _BOOL4 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t result;
  _QWORD *v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  std::string::size_type v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  std::string __p[11];
  std::string *v89;
  std::string *v90;
  uint64_t v91;
  std::string v92;
  void *v93[3];
  uint64_t *v94;
  char v95[17];

  v95[0] = 0;
  kaldi::quasar::FixedConfigStream(a3, (uint64_t)v95, &v94);
  v5 = v94;
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v6 = __p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v7 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = __p[0].__r_.__value_.__r.__words[0];
    __p[0].__r_.__value_.__r.__words[0] = 0;
    if (v8)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v8 + 8))(v8);
  }
  while ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 2) == 0)
  {
    memset(v93, 0, sizeof(v93));
    kaldi::ReadToken(v5, v95[0], (uint64_t)v93);
    if (SHIBYTE(v93[2]) < 0)
    {
      v12 = v93[1];
      if (v93[1] == (void *)6)
      {
        v13 = *(_DWORD *)v93[0] == 1935756604 && *((_WORD *)v93[0] + 2) == 15979;
        v11 = a1 + 216;
        if (v13)
          goto LABEL_152;
      }
      if (v93[1] == (void *)16)
      {
        v14 = *(_QWORD *)v93[0] == 0x65626D45736F503CLL && *((_QWORD *)v93[0] + 1) == 0x3E74657366664F64;
        v11 = a1 + 240;
        if (v14)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)12)
      {
        v15 = *(_QWORD *)v93[0] == 0x7375466B73614D3CLL && *((_DWORD *)v93[0] + 2) == 1047424873;
        v11 = a1 + 384;
        if (v15)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)22)
      {
        v17 = *(_QWORD *)v93[0] == 0x65626D45736F503CLL
           && *((_QWORD *)v93[0] + 1) == 0x4674657366664F64
           && *(_QWORD *)((char *)v93[0] + 14) == 0x3E6E6F6973754674;
        v11 = a1 + 408;
        if (v17)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)15)
      {
        v18 = *(_QWORD *)v93[0] == 0x74736F504354433CLL && *(_QWORD *)((char *)v93[0] + 7) == 0x3E73726F69726574;
        v11 = a1 + 96;
        if (v18)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)14)
      {
        v19 = *(_QWORD *)v93[0] == 0x6D726F666E6F433CLL && *(_QWORD *)((char *)v93[0] + 6) == 0x3E74754F72656D72;
        v11 = a1 + 120;
        if (v19)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)10)
      {
        v20 = *(_QWORD *)v93[0] == 0x754F6E6E6466523CLL && *((_WORD *)v93[0] + 4) == 15988;
        v11 = a1 + 144;
        if (v20)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)24)
      {
        v22 = *(_QWORD *)v93[0] == 0x747865746E6F433CLL
           && *((_QWORD *)v93[0] + 1) == 0x6F69746E65747441
           && *((_QWORD *)v93[0] + 2) == 0x3E7365726F63536ELL;
        v11 = a1 + 192;
        if (v22)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)19)
      {
        v24 = *(_QWORD *)v93[0] == 0x747865746E6F433CLL
           && *((_QWORD *)v93[0] + 1) == 0x6E69646465626D45
           && *(_QWORD *)((char *)v93[0] + 11) == 0x3E73676E69646465;
        v11 = a1 + 24;
        if (v24)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)22)
      {
        v26 = *(_QWORD *)v93[0] == 0x747865746E6F433CLL
           && *((_QWORD *)v93[0] + 1) == 0x6E69646465626D45
           && *(_QWORD *)((char *)v93[0] + 14) == 0x3E6B73614D676E69;
        v11 = a1 + 48;
        if (v26)
          goto LABEL_152;
        v12 = v93[1];
      }
      if (v12 == (void *)25)
      {
        v9 = (void **)v93[0];
LABEL_86:
        v27 = *v9;
        v28 = v9[1];
        v29 = v9[2];
        v30 = *((unsigned __int8 *)v9 + 24);
        v31 = v27 == (void *)0x747865746E6F433CLL && v28 == (void *)0x6E69646465626D45;
        v32 = v31 && v29 == (void *)0x6D69446B73614D67;
        v33 = v32 && v30 == 62;
        v34 = a1 + 352;
        if (v33)
          goto LABEL_97;
      }
    }
    else
    {
      v9 = v93;
      switch(HIBYTE(v93[2]))
      {
        case 6:
          v10 = LODWORD(v93[0]) == 1935756604 && WORD2(v93[0]) == 15979;
          v11 = a1 + 216;
          if (!v10)
            break;
          goto LABEL_152;
        case 0xA:
          goto LABEL_138;
        case 0xC:
LABEL_103:
          v36 = v93[0] == (void *)0x7375466B73614D3CLL && LODWORD(v93[1]) == 1047424873;
          v11 = a1 + 384;
          if (v36)
            goto LABEL_152;
          goto LABEL_137;
        case 0xE:
          goto LABEL_133;
        case 0xF:
LABEL_127:
          v41 = v93[0] == (void *)0x74736F504354433CLL && *(void **)((char *)v93 + 7) == (void *)0x3E73726F69726574;
          v11 = a1 + 96;
          if (v41)
            goto LABEL_152;
          if (HIBYTE(v93[2]) == 10)
            goto LABEL_138;
          if (HIBYTE(v93[2]) != 14)
            break;
LABEL_133:
          v42 = v93[0] == (void *)0x6D726F666E6F433CLL && *(void **)((char *)v93 + 6) == (void *)0x3E74754F72656D72;
          v11 = a1 + 120;
          if (v42)
            goto LABEL_152;
LABEL_137:
          if (HIBYTE(v93[2]) != 10)
            break;
LABEL_138:
          v43 = v93[0] == (void *)0x754F6E6E6466523CLL && LOWORD(v93[1]) == 15988;
          v11 = a1 + 144;
          if (!v43)
            break;
          goto LABEL_152;
        case 0x10:
          v35 = v93[0] == (void *)0x65626D45736F503CLL && v93[1] == (void *)0x3E74657366664F64;
          v11 = a1 + 240;
          if (!v35)
          {
            switch(HIBYTE(v93[2]))
            {
              case 0xA:
                goto LABEL_138;
              case 0xC:
                goto LABEL_103;
              case 0xE:
                goto LABEL_133;
              case 0xF:
                goto LABEL_127;
              default:
                goto LABEL_151;
            }
          }
          goto LABEL_152;
        case 0x13:
          goto LABEL_144;
        case 0x16:
          v40 = v93[0] == (void *)0x65626D45736F503CLL
             && v93[1] == (void *)0x4674657366664F64
             && *(void **)((char *)&v93[1] + 6) == (void *)0x3E6E6F6973754674;
          v11 = a1 + 408;
          if (!v40)
          {
            switch(HIBYTE(v93[2]))
            {
              case 0xE:
                goto LABEL_133;
              case 0xF:
                goto LABEL_127;
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x14:
              case 0x15:
                goto LABEL_151;
              case 0x13:
                goto LABEL_144;
              case 0x16:
                goto LABEL_167;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_152;
        case 0x18:
          v38 = v93[0] == (void *)0x747865746E6F433CLL
             && v93[1] == (void *)0x6F69746E65747441
             && v93[2] == (void *)0x3E7365726F63536ELL;
          v11 = a1 + 192;
          if (v38)
            goto LABEL_152;
          if (HIBYTE(v93[2]) == 22)
          {
LABEL_167:
            v50 = v93[0] == (void *)0x747865746E6F433CLL
               && v93[1] == (void *)0x6E69646465626D45
               && *(void **)((char *)&v93[1] + 6) == (void *)0x3E6B73614D676E69;
            v11 = a1 + 48;
            if (v50)
              goto LABEL_152;
          }
          else
          {
            if (HIBYTE(v93[2]) != 19)
              break;
LABEL_144:
            v45 = v93[0] == (void *)0x747865746E6F433CLL
               && v93[1] == (void *)0x6E69646465626D45
               && *(void **)((char *)&v93[1] + 3) == (void *)0x3E73676E69646465;
            v11 = a1 + 24;
            if (v45)
              goto LABEL_152;
          }
          break;
        case 0x19:
          goto LABEL_86;
        default:
          break;
      }
    }
LABEL_151:
    v46 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<BiasingGatingThreshold>");
    v11 = a1 + 72;
    if (v46)
      goto LABEL_152;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InputFeats>"))
    {
      kaldi::ReadToken(v5, v95[0], a1);
      goto LABEL_153;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InputStates>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v5, v95[0], (uint64_t)__p);
      std::string::basic_string[abi:ne180100]<0>(&v92, ",");
      kaldi::SplitStringOnString((uint64_t)__p, (char *)&v92, (uint64_t *)(a1 + 264));
      goto LABEL_163;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<OutputStates>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v5, v95[0], (uint64_t)__p);
      std::string::basic_string[abi:ne180100]<0>(&v92, ",");
      kaldi::SplitStringOnString((uint64_t)__p, (char *)&v92, (uint64_t *)(a1 + 288));
LABEL_163:
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      goto LABEL_181;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InputShapeTemplate>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v5, v95[0], (uint64_t)__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v92, __p);
      v47 = v92.__r_.__value_.__r.__words[0];
      v48 = a1 + 312;
      goto LABEL_180;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<ContextEmbeddingShapeTemplate>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v5, v95[0], (uint64_t)__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v92, __p);
      v47 = v92.__r_.__value_.__r.__words[0];
      v48 = a1 + 324;
      goto LABEL_180;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<ContextEmbeddingMaskShapeTemplate>"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(v5, v95[0], (uint64_t)__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v92, __p);
      v47 = v92.__r_.__value_.__r.__words[0];
      v48 = a1 + 336;
LABEL_180:
      *(_QWORD *)v48 = v47;
      *(_DWORD *)(v48 + 8) = v92.__r_.__value_.__r.__words[1];
LABEL_181:
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_153;
    }
    v51 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InputDim>");
    v34 = a1 + 348;
    if (!v51)
    {
      v52 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<ContextEmbeddingDim>");
      v34 = a1 + 356;
      if (!v52)
      {
        v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InputFrameCount>");
        v34 = a1 + 364;
        if (!v53)
        {
          v54 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<OutputDim>");
          v34 = a1 + 360;
          if (!v54)
          {
            v55 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<FrameOverlap>");
            v34 = a1 + 368;
            if (!v55)
            {
              v56 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<FrameSubsamplingFactor>");
              v34 = a1 + 372;
              if (!v56)
              {
                v57 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<FrameSubsamplingFactorFusion>");
                v34 = a1 + 432;
                if (!v57)
                {
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<FlexibleInputSizeIsAllowed>"))
                  {
                    kaldi::ReadBasicType<BOOL>(v5, v95[0], (char *)(a1 + 444));
                    goto LABEL_153;
                  }
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<StateShapes>"))
                  {
                    memset(__p, 0, 24);
                    kaldi::ReadToken(v5, v95[0], (uint64_t)__p);
                    size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      size = __p[0].__r_.__value_.__l.__size_;
                    std::string::basic_string(&v92, __p, 1uLL, size - 2, (std::allocator<char> *)&v89);
                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p[0].__r_.__value_.__l.__data_);
                    __p[0] = v92;
                    memset(&v92, 0, sizeof(v92));
                    std::string::basic_string[abi:ne180100]<0>(&v89, "),(");
                    kaldi::SplitStringOnString((uint64_t)__p, (char *)&v89, (uint64_t *)&v92);
                    if (SHIBYTE(v91) < 0)
                      operator delete(v89);
                    v59 = v92.__r_.__value_.__l.__size_;
                    v84 = v92.__r_.__value_.__l.__size_;
                    for (i = v92.__r_.__value_.__r.__words[0]; i != v59; i = v86 + 24)
                    {
                      v89 = 0;
                      v90 = 0;
                      v91 = 0;
                      v86 = i;
                      kaldi::SplitStringToIntegers<long long>(i, ",", 1, &v89);
                      std::vector<std::vector<long long>>::push_back[abi:ne180100]((uint64_t *)(a1 + 456), (uint64_t)&v89);
                      if (v89)
                      {
                        v90 = v89;
                        operator delete(v89);
                      }
                      v59 = v84;
                    }
                    v89 = &v92;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
                    goto LABEL_181;
                  }
                  v61 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<EPPosteriors>");
                  v11 = a1 + 168;
                  if (!v61)
                  {
                    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<Engine>"))
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                      if (SHIBYTE(v93[2]) >= 0)
                        v81 = v93;
                      else
                        v81 = (void **)v93[0];
                      if (SHIBYTE(v93[2]) >= 0)
                        v82 = HIBYTE(v93[2]);
                      else
                        v82 = (uint64_t)v93[1];
                      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)", a typo in config file?", 24);
                      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
                    }
                    v87 = *(_QWORD *)(a1 + 448);
                    v85 = v95[0];
                    std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
                    (*(void (**)(uint64_t, uint64_t *, BOOL, std::string *))(*(_QWORD *)v87 + 16))(v87, v5, v85 != 0, __p);
                    goto LABEL_181;
                  }
LABEL_152:
                  kaldi::ReadToken(v5, v95[0], v11);
                  goto LABEL_153;
                }
              }
            }
          }
        }
      }
    }
LABEL_97:
    kaldi::ReadBasicType<int>(v5, v95[0], v34);
LABEL_153:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v5);
    if (SHIBYTE(v93[2]) < 0)
      operator delete(v93[0]);
  }
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 464) - *(_QWORD *)(a1 + 456)) >> 3);
  v63 = *(_QWORD *)(a1 + 264);
  v64 = *(_QWORD *)(a1 + 272);
  if (v62 != 0xAAAAAAAAAAAAAAABLL * ((v64 - v63) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"state_shapes.size() == input_states.size()", 42);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v62 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"state_shapes.size() == output_states.size()", 43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if ((*(_DWORD *)(a1 + 364) - *(_DWORD *)(a1 + 368)) % *(_DWORD *)(a1 + 372))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"(InputFrameCount - FrameOverlap) must be a multiple of FrameSubsamplingFactor", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v63 != v64)
  {
    v65 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v63, v64, (unsigned __int8 **)(a1 + 216));
    v66 = *(_QWORD *)(a1 + 264);
    v67 = *(_QWORD *)(a1 + 272);
    if (v65 != v67)
    {
      *(_DWORD *)(a1 + 376) = -1431655765 * ((unint64_t)(v65 - v66) >> 3);
      if (kaldi::g_kaldi_verbose_level < 0)
      {
        v65 = v67;
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Mask == InputStates[", 20);
        v68 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"]", 1);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        v66 = *(_QWORD *)(a1 + 264);
        v65 = *(_QWORD *)(a1 + 272);
      }
    }
    v69 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v66, v65, (unsigned __int8 **)(a1 + 240));
    v70 = *(_QWORD *)(a1 + 264);
    v71 = *(_QWORD *)(a1 + 272);
    if (v69 != v71)
    {
      *(_DWORD *)(a1 + 380) = -1431655765 * ((unint64_t)(v69 - v70) >> 3);
      if (kaldi::g_kaldi_verbose_level < 0)
      {
        v69 = v71;
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PosEmbedOffset == InputStates[", 30);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"]", 1);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        v70 = *(_QWORD *)(a1 + 264);
        v69 = *(_QWORD *)(a1 + 272);
      }
    }
    v73 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v70, v69, (unsigned __int8 **)(a1 + 384));
    v74 = *(_QWORD *)(a1 + 264);
    v75 = *(_QWORD *)(a1 + 272);
    if (v73 != v75)
    {
      *(_DWORD *)(a1 + 436) = -1431655765 * ((unint64_t)(v73 - v74) >> 3);
      if (kaldi::g_kaldi_verbose_level < 0)
      {
        v73 = v75;
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"MaskFusion == InputStates[", 26);
        v76 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"]", 1);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        v74 = *(_QWORD *)(a1 + 264);
        v73 = *(_QWORD *)(a1 + 272);
      }
    }
    v77 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v74, v73, (unsigned __int8 **)(a1 + 408));
    if (v77 != *(_QWORD *)(a1 + 272))
    {
      *(_DWORD *)(a1 + 440) = -1431655765 * ((unint64_t)(v77 - *(_QWORD *)(a1 + 264)) >> 3);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PosEmbedOffsetFusion == InputStates[", 36);
        v78 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"]", 1);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
    }
  }
  result = (uint64_t)v94;
  if (v94)
    return (*(uint64_t (**)(uint64_t *))(*v94 + 8))(v94);
  return result;
}

void sub_1ADDCDE04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 112);
  if (v3)
    (*(void (**)(_QWORD))(*(_QWORD *)v3 + 8))(*(_QWORD *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::SplitStringToIntegers<long long>(uint64_t a1, const char *a2, int a3, _QWORD *a4)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *__endptr;

  if (*(char *)(a1 + 23) >= 0)
    v5 = (_BYTE *)a1;
  else
    v5 = *(_BYTE **)a1;
  if (*v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v13);
    std::vector<unsigned long>::resize((uint64_t)a4, 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3));
    v6 = v13;
    if (v14 == v13)
    {
LABEL_12:
      v11 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = (const char *)(v6 + v7);
        if (*(char *)(v6 + v7 + 23) < 0)
          v9 = *(const char **)v9;
        __endptr = 0;
        v10 = strtoll(v9, &__endptr, 10);
        if (__endptr == v9 || *__endptr)
          break;
        *(_QWORD *)(*a4 + 8 * v8++) = v10;
        v6 = v13;
        v7 += 24;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3))
          goto LABEL_12;
      }
      v11 = 0;
      a4[1] = *a4;
    }
    __endptr = (char *)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  else
  {
    a4[1] = *a4;
    return 1;
  }
  return v11;
}

void sub_1ADDCDF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a1, a2);
  }
  else
  {
    std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a1, a2);
    result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

void kaldi::quasar::CEFusedAcousticEncoder::~CEFusedAcousticEncoder(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  kaldi::quasar::CEFusedAcousticEncoderConfig::~CEFusedAcousticEncoderConfig(this);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::CEFusedAcousticEncoder(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5)
{
  kaldi::quasar::CEFusedAcousticEncoderConfig *v10;
  uint64_t *v11;
  size_t v12;
  void *p_p;
  const void *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  uint64_t v23;
  char v24;

  v10 = kaldi::quasar::CEFusedAcousticEncoderConfig::CEFusedAcousticEncoderConfig((kaldi::quasar::CEFusedAcousticEncoderConfig *)a1);
  v11 = (uint64_t *)((char *)v10 + 480);
  *((_QWORD *)v10 + 60) = 0;
  *((_QWORD *)v10 + 61) = 0;
  *((_BYTE *)v10 + 504) = 0;
  *((_QWORD *)v10 + 62) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 7);
  if (v24 < 0)
    p_p = __p;
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    memmove(p_p, v14, v12);
  }
  strcpy((char *)p_p + v12, ".config");
  kaldi::quasar::CEFusedAcousticEncoderConfig::Read(a1, a2, (uint64_t)&__p);
  if (v24 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 448) + 16), a3);
  v15 = *(_BYTE **)(a1 + 448);
  v15[32] = a4;
  v15[33] = a5;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v15 + 32))(&__p);
  *(_BYTE *)(a1 + 504) = (_BYTE)__p;
  v16 = v23;
  v23 = 0;
  v17 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v23;
    v23 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v16 = *v11;
  }
  if (!v16)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to create compute engine", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v19 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return a1;
}

void sub_1ADDCE200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  kaldi::quasar::CEFusedAcousticEncoderConfig *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = *((_QWORD *)v15 + 62);
  *((_QWORD *)v15 + 62) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)v15 + 61);
  *((_QWORD *)v15 + 61) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v16;
  *v16 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  kaldi::quasar::CEFusedAcousticEncoderConfig::~CEFusedAcousticEncoderConfig(v15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FillMask(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[34];

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2);
  if ((int)result >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, v10);
      if ((_DWORD)v10 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2) - 1)
      {
        if (a3 == -1)
          a3 = v11;
        if (a5)
        {
          if (a3 >= 1)
          {
            v12 = 0;
            do
            {
              (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 96))(*a2, a4, v12);
              v12 = (v12 + 1);
            }
            while (a3 != (_DWORD)v12);
          }
        }
        else if (a3 >= 1)
        {
          v13 = (v11 - a3);
          do
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 96))(*a2, a4, v13);
            v13 = (v13 + 1);
          }
          while ((int)v13 < v11);
        }
      }
      else if (v11 != 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Only the last dimension of the mask could be non-one");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      v10 = (v10 + 1);
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 152))(*a2);
    }
    while ((int)v10 < (int)result);
  }
  return result;
}

void kaldi::quasar::CEFusedAcousticEncoder::Encode(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int32x2_t *a5, int32x2_t *a6, int32x2_t *a7, int32x2_t *a8, int32x2_t *a9, uint64_t **a10)
{
  std::string *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t p_size;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  std::string *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::string *v35;
  uint64_t v36;
  std::string::size_type v37;
  __int128 v38;
  __int128 *v39;
  _OWORD *size;
  __int128 v41;
  std::string *v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  std::string::size_type v55;
  int32x2_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int32x2_t *v93;
  void *__p;
  char *v97;
  char *v98;
  std::string v99;
  void **v100[35];
  uint64_t v101;
  std::string *v102;
  unint64_t v103;

  v101 = 0;
  v102 = 0;
  v103 = 0;
  if (kaldi::g_kaldi_verbose_level <= 2)
  {
    v17 = *a2;
    goto LABEL_6;
  }
  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"preparing feature", 17);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  v16 = v102;
  v17 = *a2;
  if ((unint64_t)v102 >= v103)
  {
LABEL_6:
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, (__int128 *)a1, v17);
    goto LABEL_9;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v18 = *(_OWORD *)a1;
    v102->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  v16[1].__r_.__value_.__r.__words[0] = v17;
  p_size = (unint64_t)&v16[1].__r_.__value_.__l.__size_;
  v102 = (std::string *)((char *)v16 + 32);
LABEL_9:
  v102 = (std::string *)p_size;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_31;
  }
  else if (!*(_BYTE *)(a1 + 47))
  {
    goto LABEL_31;
  }
  v20 = (__int128 *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 496);
  if (p_size >= v103)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, v20, *(_QWORD *)(a1 + 496));
  }
  else
  {
    if ((*(_BYTE *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)p_size, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v22 = *v20;
      *(_QWORD *)(p_size + 16) = *(_QWORD *)(a1 + 40);
      *(_OWORD *)p_size = v22;
    }
    *(_QWORD *)(p_size + 24) = v21;
    p_size += 32;
    v102 = (std::string *)p_size;
  }
  v102 = (std::string *)p_size;
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_31;
  }
  else if (!*(_BYTE *)(a1 + 71))
  {
    goto LABEL_31;
  }
  v23 = *(_QWORD *)(a1 + 488);
  if (v23)
  {
    v24 = (__int128 *)(a1 + 48);
    if (p_size >= v103)
    {
      p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, v24, *(_QWORD *)(a1 + 488));
    }
    else
    {
      if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)p_size, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
      else
      {
        v25 = *v24;
        *(_QWORD *)(p_size + 16) = *(_QWORD *)(a1 + 64);
        *(_OWORD *)p_size = v25;
      }
      *(_QWORD *)(p_size + 24) = v23;
      p_size += 32;
      v102 = (std::string *)p_size;
    }
    v102 = (std::string *)p_size;
  }
LABEL_31:
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_43;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    goto LABEL_43;
  }
  v26 = *a3;
  if (v26)
  {
    v27 = (__int128 *)(a1 + 72);
    if (p_size >= v103)
    {
      v29 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, v27, v26);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 95) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)p_size, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        v28 = *v27;
        *(_QWORD *)(p_size + 16) = *(_QWORD *)(a1 + 88);
        *(_OWORD *)p_size = v28;
      }
      *(_QWORD *)(p_size + 24) = v26;
      v29 = (std::string *)(p_size + 32);
      v102 = (std::string *)(p_size + 32);
    }
    v102 = v29;
  }
LABEL_43:
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"preparing input_states ", 23);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  v31 = *(_QWORD *)(a1 + 264);
  v32 = *(_QWORD *)(a1 + 272);
  if (0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3) != (a4[1] - *a4) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"input_states.size() == cfg_.input_states.size()", 47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v100);
  }
  if (v32 != v31)
  {
    v33 = 0;
    v34 = 0;
    v35 = v102;
    do
    {
      v36 = v31 + v33;
      v37 = *(_QWORD *)(*a4 + 8 * v34);
      if ((unint64_t)v35 >= v103)
      {
        v35 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, (__int128 *)v36, *(_QWORD *)(*a4 + 8 * v34));
      }
      else
      {
        if (*(char *)(v36 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(v31 + v33), *(_QWORD *)(v31 + v33 + 8));
        }
        else
        {
          v38 = *(_OWORD *)v36;
          v35->__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 16);
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v38;
        }
        v35[1].__r_.__value_.__r.__words[0] = v37;
        v35 = (std::string *)((char *)v35 + 32);
        v102 = v35;
      }
      v102 = v35;
      ++v34;
      v31 = *(_QWORD *)(a1 + 264);
      v33 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 272) - v31) >> 3) > v34);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"preparing outputs", 17);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  memset(&v99, 0, sizeof(v99));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *(__int128 **)(a1 + 288), *(__int128 **)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3));
  v39 = (__int128 *)(a1 + 96);
  size = (_OWORD *)v99.__r_.__value_.__l.__size_;
  if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
  {
    v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v39);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v99.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
    }
    else
    {
      v41 = *v39;
      *(_QWORD *)(v99.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a1 + 112);
      *size = v41;
    }
    v42 = (std::string *)((char *)size + 24);
  }
  v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  if (*(char *)(a1 + 143) < 0)
  {
    v43 = *(_QWORD *)(a1 + 128);
    if (!a6)
      goto LABEL_75;
  }
  else
  {
    v43 = *(unsigned __int8 *)(a1 + 143);
    if (!a6)
      goto LABEL_75;
  }
  if (v43)
  {
    v44 = (__int128 *)(a1 + 120);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v44);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 143) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 120), *(_QWORD *)(a1 + 128));
      }
      else
      {
        v45 = *v44;
        v42->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 136);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v45;
      }
      ++v42;
    }
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  }
LABEL_75:
  if (*(char *)(a1 + 167) < 0)
    v46 = *(_QWORD *)(a1 + 152);
  else
    v46 = *(unsigned __int8 *)(a1 + 167);
  if (a7 && v46)
  {
    v47 = (__int128 *)(a1 + 144);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v47);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 167) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 144), *(_QWORD *)(a1 + 152));
      }
      else
      {
        v48 = *v47;
        v42->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 160);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v48;
      }
      ++v42;
    }
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  }
  if (*(char *)(a1 + 215) < 0)
  {
    v49 = *(_QWORD *)(a1 + 200);
    if (!a9)
      goto LABEL_99;
  }
  else
  {
    v49 = *(unsigned __int8 *)(a1 + 215);
    if (!a9)
      goto LABEL_99;
  }
  if (v49)
  {
    v50 = (__int128 *)(a1 + 192);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v50);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 215) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 192), *(_QWORD *)(a1 + 200));
      }
      else
      {
        v51 = *v50;
        v42->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 208);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v51;
      }
      ++v42;
    }
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  }
LABEL_99:
  if (*(char *)(a1 + 191) < 0)
    v52 = *(_QWORD *)(a1 + 176);
  else
    v52 = *(unsigned __int8 *)(a1 + 191);
  if (a8 && v52)
  {
    v53 = (__int128 *)(a1 + 168);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v53);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 191) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 168), *(_QWORD *)(a1 + 176));
      }
      else
      {
        v54 = *v53;
        v42->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 184);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v54;
      }
      v55 = (std::string::size_type)&v42[1];
    }
    v99.__r_.__value_.__l.__size_ = v55;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"running engine", 14);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  v93 = a6;
  v56 = a5;
  v57 = *(_QWORD *)(a1 + 480);
  memset(v100, 0, 24);
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, uint64_t **))(*(_QWORD *)v57 + 128))(v57, &v101, &v99, v100, a10);
  __p = v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = 0;
  v97 = 0;
  v98 = 0;
  v59 = *a10;
  v58 = a10[1];
  if (*a10 != v58)
  {
    v60 = 0;
    do
    {
      v61 = *v59;
      if (v60 >= v98)
      {
        v62 = (v60 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v62 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v63 = (v98 - (_BYTE *)__p) >> 2;
        if (v63 <= v62 + 1)
          v63 = v62 + 1;
        if ((unint64_t)(v98 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
          v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v98, v64);
        else
          v65 = 0;
        v66 = &v65[8 * v62];
        *(_QWORD *)v66 = v61;
        v60 = v66 + 8;
        v68 = (char *)__p;
        v67 = v97;
        if (v97 != __p)
        {
          do
          {
            v69 = *((_QWORD *)v67 - 1);
            v67 -= 8;
            *((_QWORD *)v66 - 1) = v69;
            v66 -= 8;
          }
          while (v67 != v68);
          v67 = (char *)__p;
        }
        __p = v66;
        v97 = v60;
        v98 = &v65[8 * v64];
        if (v67)
          operator delete(v67);
      }
      else
      {
        *(_QWORD *)v60 = v61;
        v60 += 8;
      }
      v97 = v60;
      ++v59;
    }
    while (v59 != v58);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"organizing outputs", 18);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  if (*(char *)(a1 + 191) < 0)
    v70 = *(_QWORD *)(a1 + 176);
  else
    v70 = *(unsigned __int8 *)(a1 + 191);
  if (a8 && v70)
  {
    v71 = *((_QWORD *)v97 - 1);
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 152))(v71);
    v73 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 160))(v71, (v72 - 1));
    kaldi::quasar::CopyBufferToMatrix(v71, 0xFFFFFFFFLL, v73, a8);
    v97 -= 8;
  }
  if (*(char *)(a1 + 215) < 0)
  {
    if (!*(_QWORD *)(a1 + 200))
      goto LABEL_147;
  }
  else if (!*(_BYTE *)(a1 + 215))
  {
    goto LABEL_147;
  }
  if (a9)
  {
    v74 = *((_QWORD *)v97 - 1);
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 152))(v74);
    v76 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v74 + 160))(v74, (v75 - 1));
    kaldi::quasar::CopyBufferToMatrix(v74, 0xFFFFFFFFLL, v76, a9);
  }
  v97 -= 8;
LABEL_147:
  if (*(char *)(a1 + 167) < 0)
    v77 = *(_QWORD *)(a1 + 152);
  else
    v77 = *(unsigned __int8 *)(a1 + 167);
  if (a7 && v77)
  {
    v78 = *((_QWORD *)v97 - 1);
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 152))(v78);
    v80 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 160))(v78, (v79 - 1));
    kaldi::quasar::CopyBufferToMatrix(v78, 0xFFFFFFFFLL, v80, a7);
    v97 -= 8;
  }
  if (*(char *)(a1 + 143) < 0)
    v81 = *(_QWORD *)(a1 + 128);
  else
    v81 = *(unsigned __int8 *)(a1 + 143);
  v82 = v97;
  if (v93 && v81)
  {
    v83 = *((_QWORD *)v97 - 1);
    v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 152))(v83);
    v85 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 160))(v83, (v84 - 1));
    kaldi::quasar::CopyBufferToMatrix(v83, 0xFFFFFFFFLL, v85, v93);
    v82 = v97 - 8;
    v97 -= 8;
  }
  v86 = *((_QWORD *)v82 - 1);
  v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 152))(v86);
  v88 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v86 + 160))(v86, (v87 - 1));
  kaldi::quasar::CopyBufferToMatrix(v86, 0xFFFFFFFFLL, v88, v56);
  v89 = (char *)__p;
  v97 -= 8;
  v90 = *a4;
  v91 = a4[1];
  if (v91 - *a4 != v97 - (_BYTE *)__p)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"input_states.size() == output_states.size()", 43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v100);
  }
  if (v91 != v90)
  {
    v92 = 0;
    do
    {
      kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(v90 + 8 * v92), *((const kaldi::quasar::ComputeEngineBufferItf **)__p + v92));
      ++v92;
      v90 = *a4;
    }
    while (v92 < (a4[1] - *a4) >> 3);
    v89 = (char *)__p;
  }
  if (v89)
  {
    v97 = v89;
    operator delete(v89);
  }
  v100[0] = (void **)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v100);
  v100[0] = (void **)&v101;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v100);
}

void kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::quasar::ComputeEngineBufferItf **a3@<X2>, kaldi::quasar::ComputeEngineBufferItf **a4@<X8>)
{
  kaldi::quasar::InputShapeTemplate *v8;
  int *v9;
  kaldi::quasar::ComputeEngineBufferItf *v10;
  kaldi::quasar::ComputeEngineBufferItf *v11;
  kaldi::quasar::ComputeEngineBufferItf *v12;
  void *__p[3];

  v8 = (kaldi::quasar::InputShapeTemplate *)(a1 + 312);
  if (*(_BYTE *)(a1 + 444))
    v9 = (int *)(a2 + 20);
  else
    v9 = (int *)(a1 + 364);
  kaldi::quasar::InputShapeTemplate::Get(v8, *v9, *(int *)(a1 + 348), __p);
  v10 = *a3;
  *a3 = 0;
  v12 = v10;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 480), a2, (uint64_t)__p, &v12, a4);
  v11 = v12;
  v12 = 0;
  if (v11)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v11 + 8))(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADDCF048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned __int8 *)this + 444);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 91);
}

float kaldi::quasar::CEFusedAcousticEncoder::InitialStates@<S0>(kaldi::quasar::CEFusedAcousticEncoder *this@<X0>, kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, kaldi::quasar::CEFusedAcousticEncoder ***a3@<X8>, float result@<S0>)
{
  kaldi::quasar::CEFusedAcousticEncoder *v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  kaldi::quasar::CEFusedAcousticEncoder **v9;
  kaldi::quasar::CEFusedAcousticEncoder *v10;
  kaldi::quasar::CEFusedAcousticEncoder **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  kaldi::quasar::CEFusedAcousticEncoder **v17;
  char *v18;
  kaldi::quasar::CEFusedAcousticEncoder *v19;
  kaldi::quasar::CEFusedAcousticEncoder **v20;
  kaldi::quasar::CEFusedAcousticEncoder **v21;
  kaldi::quasar::CEFusedAcousticEncoder *v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  _QWORD *v32;
  kaldi::quasar::CEFusedAcousticEncoder *v33;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((_QWORD *)this + 33) != *((_QWORD *)this + 34))
  {
    v5 = this;
    v6 = *((_QWORD *)this + 57);
    for (i = *((_QWORD *)this + 58); v6 != i; v6 += 24)
    {
      (*(void (**)(kaldi::quasar::CEFusedAcousticEncoder **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v5 + 60) + 56))(&v33, *((_QWORD *)v5 + 60), v6);
      v9 = a3[1];
      v8 = (unint64_t)a3[2];
      if ((unint64_t)v9 >= v8)
      {
        v12 = v9 - *a3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)*a3;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v32 = a3 + 2;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v15);
        else
          v16 = 0;
        v17 = (kaldi::quasar::CEFusedAcousticEncoder **)&v16[8 * v12];
        v18 = &v16[8 * v15];
        v31 = v18;
        v19 = v33;
        v33 = 0;
        *v17 = v19;
        v11 = v17 + 1;
        v30.i64[1] = (uint64_t)(v17 + 1);
        v21 = *a3;
        v20 = a3[1];
        if (v20 == *a3)
        {
          v23 = vdupq_n_s64((unint64_t)v20);
        }
        else
        {
          do
          {
            v22 = *--v20;
            *v20 = 0;
            *--v17 = v22;
          }
          while (v20 != v21);
          v23 = *(int64x2_t *)a3;
          v11 = (kaldi::quasar::CEFusedAcousticEncoder **)v30.i64[1];
          v18 = v31;
        }
        *a3 = v17;
        a3[1] = v11;
        v30 = v23;
        v24 = (char *)a3[2];
        a3[2] = (kaldi::quasar::CEFusedAcousticEncoder **)v18;
        v31 = v24;
        v29 = v23.i64[0];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v29);
      }
      else
      {
        v10 = v33;
        v33 = 0;
        *v9 = v10;
        v11 = v9 + 1;
      }
      a3[1] = v11;
      this = v33;
      v33 = 0;
      if (this)
        this = (kaldi::quasar::CEFusedAcousticEncoder *)(*(uint64_t (**)(kaldi::quasar::CEFusedAcousticEncoder *))(*(_QWORD *)this + 8))(this);
    }
    v25 = *((unsigned int *)v5 + 94);
    if ((v25 & 0x80000000) == 0)
      this = (kaldi::quasar::CEFusedAcousticEncoder *)kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)this, &(*a3)[v25], (*((_DWORD *)v5 + 91) - *((_DWORD *)v5 + 92))/ *((_DWORD *)v5 + 93), 1, 0);
    v26 = *((unsigned int *)v5 + 109);
    if ((v26 & 0x80000000) == 0)
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)this, &(*a3)[v26], (*((_DWORD *)v5 + 91) - *((_DWORD *)v5 + 92)) / *((_DWORD *)v5 + 108), 1, 0);
    v27 = *((unsigned int *)v5 + 95);
    if ((v27 & 0x80000000) == 0)
      result = kaldi::quasar::Range((*a3)[v27], a2);
    v28 = *((unsigned int *)v5 + 110);
    if ((v28 & 0x80000000) == 0)
      return kaldi::quasar::Range((*a3)[v28], a2);
  }
  return result;
}

void sub_1ADDCF298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 94);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 92);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 93);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMaskFusion(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 109);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 108);
}

void kaldi::quasar::CEFusedAcousticEncoder::SetContextEmbeddings(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::quasar::ComputeEngineBufferItf *v11;
  uint64_t v12;
  kaldi::quasar::ComputeEngineBufferItf *v13;
  kaldi::quasar::ComputeEngineBufferItf *v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  int v24;
  int v25;
  void *v26;
  void *v27;
  void *__p;
  __int128 v29;
  __int128 v30;
  kaldi::quasar::ComputeEngineBufferItf *v31;
  kaldi::quasar::ComputeEngineBufferItf *v32;
  void *v33;
  __int128 v34;
  __int128 v35;

  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_34;
  }
  else if (!*(_BYTE *)(a1 + 47))
  {
    goto LABEL_34;
  }
  v4 = *(_DWORD *)(a2 + 20);
  if (v4 >= 1)
  {
    v5 = *(_DWORD *)(a1 + 352);
    if (v4 >= v5)
      v6 = *(_DWORD *)(a1 + 352);
    else
      v6 = *(_DWORD *)(a2 + 20);
    v7 = *(_DWORD *)(a2 + 16);
    if (v5 > 0)
    {
      v8 = v5;
    }
    else
    {
      v6 = *(_DWORD *)(a2 + 20);
      v8 = v4;
    }
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 32);
    __p = &unk_1E5D29D40;
    *(_QWORD *)&v29 = v9;
    *((_QWORD *)&v29 + 1) = __PAIR64__(v6, v7);
    *(_QWORD *)&v30 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)&v30 + 1) = v10;
    v33 = &unk_1E5D29D40;
    v34 = 0u;
    v35 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 324), v8, *(int *)(a2 + 16), &v33);
    v31 = 0;
    kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 480), a2, (uint64_t)&v33, &v31, &v32);
    v11 = v32;
    v32 = 0;
    v12 = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 496) = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = v32;
      v32 = 0;
      if (v13)
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = v31;
    v31 = 0;
    if (v14)
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v14 + 8))(v14);
    if (v33)
    {
      *(_QWORD *)&v34 = v33;
      operator delete(v33);
    }
    __p = &unk_1E5D29D40;
    v29 = 0u;
    v30 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    goto LABEL_34;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(_QWORD *)(a1 + 56))
    {
LABEL_22:
      v15 = *(_DWORD *)(a1 + 352);
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      goto LABEL_27;
    }
  }
  else if (*(_BYTE *)(a1 + 71))
  {
    goto LABEL_22;
  }
  v16 = 1;
LABEL_27:
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 324), v16, *(int *)(a1 + 356), &v33);
  (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 480) + 56))(&__p, *(_QWORD *)(a1 + 480), &v33);
  v17 = __p;
  __p = 0;
  v18 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = __p;
    __p = 0;
    if (v19)
      (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The model expects context embeddings. But it's not provided. Use all zeros", 74);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (v33)
  {
    *(_QWORD *)&v34 = v33;
    operator delete(v33);
  }
LABEL_34:
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
  }
  else if (!*(_BYTE *)(a1 + 71))
  {
    return;
  }
  v20 = *(_DWORD *)(a2 + 20);
  v21 = *(_DWORD *)(a1 + 352);
  if (v21 >= 1)
    v22 = *(_DWORD *)(a1 + 352);
  else
    v22 = *(_DWORD *)(a2 + 20);
  if (v21 < 1 && v20 < 1)
    v21 = 1;
  if (v20 >= 1)
    v24 = *(_DWORD *)(a2 + 20);
  else
    v24 = v21;
  if (v20 >= 1)
    v25 = v22;
  else
    v25 = v21;
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 336), 1, v25, &__p);
  (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 480) + 56))(&v33, *(_QWORD *)(a1 + 480), &__p);
  v26 = v33;
  v33 = 0;
  v27 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v26;
  if (v27)
  {
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
    v27 = v33;
    v33 = 0;
    if (v27)
      v27 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  }
  kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v27, (_QWORD *)(a1 + 488), v24, 1, 1);
  if (__p)
  {
    *(_QWORD *)&v29 = __p;
    operator delete(__p);
  }
}

void sub_1ADDCF618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  v12 = *(void **)(v10 - 88);
  if (v12)
  {
    *(_QWORD *)(v10 - 80) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::OutputDim(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 90);
}

BOOL kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  uint64_t v1;

  if (*((char *)this + 167) < 0)
    v1 = *((_QWORD *)this + 19);
  else
    v1 = *((unsigned __int8 *)this + 167);
  return v1 != 0;
}

BOOL kaldi::quasar::CEFusedAcousticEncoder::HasEpOut(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  uint64_t v1;

  if (*((char *)this + 191) < 0)
    v1 = *((_QWORD *)this + 22);
  else
    v1 = *((unsigned __int8 *)this + 191);
  return v1 != 0;
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingMaskDim(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 88);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingDim(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 89);
}

BOOL kaldi::quasar::CEFusedAcousticEncoder::HasContextualBiasing(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  uint64_t v1;

  if (*((char *)this + 47) < 0)
    v1 = *((_QWORD *)this + 4);
  else
    v1 = *((unsigned __int8 *)this + 47);
  return v1 != 0;
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::AttemptComputeEngineUpgrade(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[34];

  if (!*((_BYTE *)this + 504))
    return 0;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 40))(*((_QWORD *)this + 56)) & 1) == 0)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Engine upgrade unlikely", 23);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    }
    return 0;
  }
  v2 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 56) + 32))(&v12);
  v3 = v13;
  v13 = 0;
  v4 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v12;
  *((_BYTE *)this + 504) = v12;
  if (v5)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Engine upgrade failed, still ", 29);
      if (!v3)
        __cxa_bad_typeid();
LABEL_16:
      v8 = v6;
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v10 = strlen(v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Engine upgrade succeeded, now ", 30);
    if (!v3)
      __cxa_bad_typeid();
    goto LABEL_16;
  }
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return 1;
}

void sub_1ADDCF8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoderConfig::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v21;
  BOOL v22;
  BOOL v25;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  _QWORD *v46;
  __int128 *v47;
  uint64_t v48;
  _QWORD *v49;
  void *__p[2];
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  char v57[9];

  v57[0] = 0;
  kaldi::quasar::FixedConfigStream(a3, (uint64_t)v57, &v56);
  v5 = v56;
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v6 = __p[0];
  __p[0] = 0;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = __p[0];
    __p[0] = 0;
    if (v8)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *v5;
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 2) == 0)
  {
    while (1)
    {
      v54 = 0uLL;
      v55 = 0;
      kaldi::ReadToken(v5, v57[0], (uint64_t)&v54);
      if ((SHIBYTE(v55) & 0x80000000) == 0)
      {
        v10 = &v54;
        switch(HIBYTE(v55))
        {
          case 8:
            goto LABEL_7;
          case 0xA:
            goto LABEL_137;
          case 0xB:
            goto LABEL_121;
          case 0xC:
LABEL_94:
            v30 = (_QWORD)v54 == 0x6568746F7079483CLL && DWORD2(v54) == 1047751027;
            v11 = (uint64_t)(a1 + 9);
            if (v30)
              goto LABEL_127;
            if (HIBYTE(v55) == 8)
            {
LABEL_7:
              v11 = (uint64_t)(a1 + 15);
              if ((_QWORD)v54 == 0x3E7365726F63533CLL)
                goto LABEL_127;
              goto LABEL_141;
            }
LABEL_118:
            if (HIBYTE(v55) != 10)
            {
              if (HIBYTE(v55) != 11)
                goto LABEL_141;
              v10 = &v54;
              goto LABEL_121;
            }
LABEL_137:
            v38 = (_QWORD)v54 == 0x69447475706E493CLL && WORD4(v54) == 15981;
            v15 = (uint64_t)(a1 + 21);
            if (v38)
              goto LABEL_145;
            break;
          case 0xE:
            v31 = (_QWORD)v54 == 0x7265646F636E453CLL && *(_QWORD *)((char *)&v54 + 6) == 0x3E736B73614D7265;
            v11 = (uint64_t)(a1 + 6);
            if (!v31)
              goto LABEL_141;
            goto LABEL_127;
          case 0xF:
LABEL_89:
            v29 = (_QWORD)v54 == 0x7265646F636E453CLL && *(_QWORD *)((char *)&v54 + 7) == 0x3E73657461745372;
            v11 = (uint64_t)(a1 + 3);
            if (!v29)
            {
              v10 = &v54;
              switch(HIBYTE(v55))
              {
                case 8:
                  goto LABEL_7;
                case 0xA:
                  goto LABEL_137;
                case 0xB:
                  goto LABEL_121;
                case 0xC:
                  goto LABEL_94;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_127;
          case 0x10:
            v26 = (_QWORD)v54 == 0x6F636E4578614D3CLL && *((_QWORD *)&v54 + 1) == 0x3E657A6953726564;
            v15 = (uint64_t)(a1 + 24);
            if (!v26)
            {
              v10 = &v54;
              switch(HIBYTE(v55))
              {
                case 8:
                  goto LABEL_7;
                case 0xA:
                  goto LABEL_137;
                case 0xB:
                  goto LABEL_121;
                case 0xC:
                  goto LABEL_94;
                case 0xF:
                  goto LABEL_89;
                case 0x10:
                  goto LABEL_114;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_145;
          case 0x12:
            v28 = (_QWORD)v54 == 0x64726F5778614D3CLL
               && *((_QWORD *)&v54 + 1) == 0x7A69536563656950
               && (unsigned __int16)v55 == 15973;
            v15 = (uint64_t)a1 + 196;
            if (!v28)
            {
              v10 = &v54;
              switch(HIBYTE(v55))
              {
                case 8:
                  goto LABEL_7;
                case 0xA:
                  goto LABEL_137;
                case 0xB:
                  goto LABEL_121;
                case 0xC:
                  goto LABEL_94;
                case 0xF:
                  goto LABEL_89;
                case 0x10:
                  goto LABEL_114;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_145;
          case 0x14:
            v33 = (_QWORD)v54 == 0x657372657665523CLL
               && *((_QWORD *)&v54 + 1) == 0x6568746F70794864
               && v55 == 1047751027;
            v11 = (uint64_t)(a1 + 12);
            if (!v33)
            {
              v10 = &v54;
              switch(HIBYTE(v55))
              {
                case 8:
                  goto LABEL_7;
                case 9:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                  goto LABEL_141;
                case 0xA:
                  goto LABEL_137;
                case 0xB:
                  goto LABEL_121;
                case 0x10:
LABEL_114:
                  v34 = (_QWORD)v54 == 0x657372657665523CLL && *((_QWORD *)&v54 + 1) == 0x3E7365726F635364;
                  v11 = (uint64_t)(a1 + 18);
                  if (!v34)
                    goto LABEL_118;
                  goto LABEL_127;
                default:
                  if (HIBYTE(v55) != 20)
                    goto LABEL_141;
                  v36 = (_QWORD)v54 == 0x68537475706E493CLL && *((_QWORD *)&v54 + 1) == 0x6C706D6554657061;
                  if (!v36 || v55 != 1046836321)
                    goto LABEL_141;
                  goto LABEL_153;
              }
            }
            goto LABEL_127;
          default:
            goto LABEL_141;
        }
        goto LABEL_141;
      }
      v12 = *((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1) == 14)
      {
        v13 = *(_QWORD *)v54 == 0x7265646F636E453CLL && *(_QWORD *)(v54 + 6) == 0x3E736B73614D7265;
        v11 = (uint64_t)(a1 + 6);
        if (v13)
          break;
      }
      if (*((_QWORD *)&v54 + 1) == 16)
      {
        v14 = *(_QWORD *)v54 == 0x6F636E4578614D3CLL && *(_QWORD *)(v54 + 8) == 0x3E657A6953726564;
        v15 = (uint64_t)(a1 + 24);
        if (v14)
          goto LABEL_145;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 == 18)
      {
        v17 = *(_QWORD *)v54 == 0x64726F5778614D3CLL
           && *(_QWORD *)(v54 + 8) == 0x7A69536563656950
           && *(_WORD *)(v54 + 16) == 15973;
        v15 = (uint64_t)a1 + 196;
        if (v17)
          goto LABEL_145;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 == 15)
      {
        v18 = *(_QWORD *)v54 == 0x7265646F636E453CLL && *(_QWORD *)(v54 + 7) == 0x3E73657461745372;
        v11 = (uint64_t)(a1 + 3);
        if (v18)
          break;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 == 12)
      {
        v19 = *(_QWORD *)v54 == 0x6568746F7079483CLL && *(_DWORD *)(v54 + 8) == 1047751027;
        v11 = (uint64_t)(a1 + 9);
        if (v19)
          break;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 == 20)
      {
        v21 = *(_QWORD *)v54 == 0x657372657665523CLL
           && *(_QWORD *)(v54 + 8) == 0x6568746F70794864
           && *(_DWORD *)(v54 + 16) == 1047751027;
        v11 = (uint64_t)(a1 + 12);
        if (v21)
          break;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 == 8)
      {
        v11 = (uint64_t)(a1 + 15);
        if (*(_QWORD *)v54 == 0x3E7365726F63533CLL)
          break;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 == 16)
      {
        v22 = *(_QWORD *)v54 == 0x657372657665523CLL && *(_QWORD *)(v54 + 8) == 0x3E7365726F635364;
        v11 = (uint64_t)(a1 + 18);
        if (v22)
          break;
        v12 = *((_QWORD *)&v54 + 1);
      }
      if (v12 != 20)
        goto LABEL_68;
      if (*(_QWORD *)v54 != 0x68537475706E493CLL
        || *(_QWORD *)(v54 + 8) != 0x6C706D6554657061
        || *(_DWORD *)(v54 + 16) != 1046836321)
      {
        v12 = *((_QWORD *)&v54 + 1);
LABEL_68:
        if (v12 == 10)
        {
          v25 = *(_QWORD *)v54 == 0x69447475706E493CLL && *(_WORD *)(v54 + 8) == 15981;
          v15 = (uint64_t)(a1 + 21);
          if (!v25)
          {
            v12 = *((_QWORD *)&v54 + 1);
            goto LABEL_74;
          }
LABEL_145:
          kaldi::ReadBasicType<int>(v5, v57[0], v15);
          goto LABEL_146;
        }
LABEL_74:
        if (v12 == 11)
        {
          v10 = (__int128 *)v54;
LABEL_121:
          v35 = *(_QWORD *)v10 == 0x4474757074754F3CLL && *(_QWORD *)((char *)v10 + 3) == 0x3E6D694474757074;
          v15 = (uint64_t)a1 + 172;
          if (v35)
            goto LABEL_145;
        }
LABEL_141:
        v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<PaddingIndex>");
        v15 = (uint64_t)(a1 + 22);
        if (!v39)
        {
          v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<EndOfSentenceIndex>");
          v15 = (uint64_t)a1 + 180;
          if (!v40)
          {
            v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<BeginOfSentenceIndex>");
            v15 = (uint64_t)(a1 + 23);
            if (!v41)
            {
              v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<BlankIndex>");
              v15 = (uint64_t)a1 + 188;
              if (!v42)
              {
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, "<Engine>"))
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                  if (v55 >= 0)
                    v47 = &v54;
                  else
                    v47 = (__int128 *)v54;
                  if (v55 >= 0)
                    v48 = HIBYTE(v55);
                  else
                    v48 = *((_QWORD *)&v54 + 1);
                  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", a typo in config file?", 24);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
                }
                v43 = *a1;
                v44 = v57[0];
                std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
                (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v43 + 16))(v43, v5, v44 != 0, __p);
                if ((SHIBYTE(v51) & 0x80000000) == 0)
                  goto LABEL_146;
LABEL_154:
                operator delete(__p[0]);
                goto LABEL_146;
              }
            }
          }
        }
        goto LABEL_145;
      }
LABEL_153:
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      kaldi::ReadToken(v5, v57[0], (uint64_t)__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v52, __p);
      a1[1] = v52;
      *((_DWORD *)a1 + 4) = v53;
      if (SHIBYTE(v51) < 0)
        goto LABEL_154;
LABEL_146:
      std::ws[abi:ne180100]<char,std::char_traits<char>>(v5);
      if (SHIBYTE(v55) < 0)
        operator delete((void *)v54);
      v9 = *v5;
      if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 2) != 0)
        return (*(uint64_t (**)(uint64_t *))(v9 + 8))(v5);
    }
LABEL_127:
    kaldi::ReadToken(v5, v57[0], v11);
    goto LABEL_146;
  }
  return (*(uint64_t (**)(uint64_t *))(v9 + 8))(v5);
}

void sub_1ADDD0254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (*(char *)(v27 - 105) < 0)
    operator delete(*(void **)(v27 - 128));
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::CEAttnEncoderDecoder(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;

  *(_QWORD *)a1 = 0;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::InputShapeTemplate *)(a1 + 8));
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 168) = -1;
  *(_QWORD *)(a1 + 176) = -1;
  *(_DWORD *)(a1 + 184) = -1;
  *(_QWORD *)(a1 + 188) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 196) = -1;
  *(_QWORD *)(a1 + 200) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v12 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEAttnEncoderDecoderConfig::Read((uint64_t *)a1, a2, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 24))(__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1ADDD041C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 + 200);
  *(_QWORD *)(v14 + 200) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::CEAttnEncoderDecoderConfig::~CEAttnEncoderDecoderConfig((void **)v14);
  _Unwind_Resume(a1);
}

void sub_1ADDD0464()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  *v0 = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1ADDD045CLL);
}

void kaldi::quasar::CEAttnEncoderDecoder::~CEAttnEncoderDecoder(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  kaldi::quasar::CEAttnEncoderDecoderConfig::~CEAttnEncoderDecoderConfig((void **)this);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::Decode(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  kaldi::quasar::ComputeEngineBufferItf *v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  std::string *v19;
  std::string *v20;
  unsigned int **v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  uint64_t v44;
  __int128 v45;
  std::string *v46;
  uint64_t v47;
  uint64_t i;
  _QWORD *v49;
  unint64_t v50;
  float v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  float v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  kaldi::quasar::ComputeEngineBufferItf *v65;
  uint64_t result;
  __int128 *v67;
  __int128 *v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t *v75;
  std::string **v76;
  uint64_t v77;
  uint64_t v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string *v88;
  unint64_t v89;
  kaldi::quasar::ComputeEngineBufferItf *v90;
  kaldi::quasar::ComputeEngineBufferItf *v91;
  void *v92[3];
  int32x2_t v93[2];
  unsigned int v94;
  int v95;
  __int128 v96;
  void ***v97;
  std::string __p;
  std::string v99;
  __int128 v100[15];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "scores != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (!a5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "reversed_scores != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::CuVector<float>::Resize(a4, -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3), 0);
  kaldi::CuVector<float>::Resize(a5, -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3), 0);
  if (*(char *)(a1 + 71) < 0)
    v7 = *(_QWORD *)(a1 + 56);
  else
    v7 = *(unsigned __int8 *)(a1 + 71);
  v72 = v7;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"AED rescoring with dynamic shaped inputs/outputs: ", 50);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  }
  v8 = *(_DWORD *)(a2 + 20);
  v9 = *(_DWORD *)(a1 + 192);
  if (v72)
  {
    if ((int)v9 <= (int)v8)
      v10 = v8;
    else
      v10 = v9;
    v11 = *(_QWORD *)(a1 + 200);
    v12 = (int64x2_t *)operator new(0x18uLL);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].u64[1];
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v12[1].u64[1];
    *v12 = vdupq_n_s64(1uLL);
    v12[1].i64[0] = (int)v10;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    (*(void (**)(int32x2_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v11 + 56))(v93, v11, &__p);
    v74 = (uint64_t)v93[0];
    v93[0] = 0;
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((int)v10 >= 1)
    {
      v13 = 0;
      do
      {
        (*(void (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)v74 + 96))(v74, (int)v13 < *(_DWORD *)(a2 + 20), v13);
        v13 = (v13 + 1);
      }
      while ((_DWORD)v10 != (_DWORD)v13);
    }
  }
  else
  {
    v74 = 0;
    if ((int)v8 >= (int)v9)
      v10 = v9;
    else
      v10 = v8;
  }
  kaldi::CuMatrix<float>::CuMatrix(v93, v10, *(unsigned int *)(a2 + 16), 0, 0, 0);
  __p.__r_.__value_.__r.__words[2] = __PAIR64__(*(_DWORD *)(a2 + 20), v94);
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v96;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D29D40;
  __p.__r_.__value_.__r.__words[1] = (std::string::size_type)v93[1];
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&__p, a2, 111);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D29D40;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  v14 = *(int *)(a2 + 16);
  if ((_DWORD)v14 != *(_DWORD *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"encoder_states.NumCols() == InputDim()", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 8), v95, v14, v92);
  v90 = 0;
  v75 = (uint64_t *)(a1 + 200);
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 200), (uint64_t)v93, (uint64_t)v92, &v90, &v91);
  v15 = v90;
  v90 = 0;
  if (v15)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v15 + 8))(v15);
  v16 = *a3;
  if (a3[1] != *a3)
  {
    v17 = 0;
    v67 = (__int128 *)(a1 + 48);
    v70 = (__int128 *)(a1 + 96);
    v71 = (__int128 *)(a1 + 72);
    v18 = "attn_score[";
    do
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v19 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v87, (__int128 *)(a1 + 24), (uint64_t)v91);
      v20 = v19;
      v21 = (unsigned int **)(v16 + 24 * v17);
      v88 = v19;
      if (v72)
      {
        if ((unint64_t)v19 >= v89)
        {
          v25 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v87, v67, v74);
        }
        else
        {
          if (*(char *)(a1 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
          }
          else
          {
            v22 = *v67;
            v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v22;
          }
          v20[1].__r_.__value_.__r.__words[0] = v74;
          v25 = (std::string *)((char *)v20 + 32);
        }
        v88 = v25;
        v26 = (*(_QWORD *)(v16 + 24 * v17 + 8) - (_QWORD)*v21) >> 2;
        if (*(_DWORD *)(a1 + 196) <= (int)v26 + 1)
          v24 = v26 + 1;
        else
          v24 = *(_DWORD *)(a1 + 196);
      }
      else
      {
        v23 = (*(_QWORD *)(v16 + 24 * v17 + 8) - (_QWORD)*v21) >> 2;
        if ((int)v23 + 1 < *(_DWORD *)(a1 + 196))
          v24 = v23 + 1;
        else
          v24 = *(_DWORD *)(a1 + 196);
      }
      v27 = (uint64_t)v18;
      v28 = *v75;
      v29 = operator new(0x10uLL);
      v30 = v24 + 1;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 2);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 2);
      *v29 = 1;
      v29[1] = v30;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v28 + 56))(&v86, v28, &__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v31 = *v75;
      v32 = operator new(0x10uLL);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v32 + 2);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v32 + 2);
      *v32 = 1;
      v32[1] = v30;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v31 + 56))(&v85, v31, &__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v86 + 96))(v86, *(unsigned int *)(a1 + 184), 0);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v85 + 96))(v85, *(unsigned int *)(a1 + 184), 0);
      v33 = *v21;
      v34 = v16 + 24 * v17;
      v36 = *(unsigned int **)(v34 + 8);
      v35 = (unsigned int **)(v34 + 8);
      v37 = 1;
      if (*v21 == v36)
        goto LABEL_49;
      do
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v86 + 96))(v86, *v33, v37);
        v37 = (v37 + 1);
        ++v33;
      }
      while (v33 != *v35);
      if (v33 == *v21)
      {
LABEL_49:
        v38 = 1;
      }
      else
      {
        v38 = 1;
        do
        {
          v39 = *--v33;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v85 + 96))(v85, v39, v38);
          v38 = (v38 + 1);
        }
        while (v33 != *v21);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v86 + 96))(v86, *(unsigned int *)(a1 + 180), v37);
      v18 = (const char *)v27;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v85 + 96))(v85, *(unsigned int *)(a1 + 180), v38);
      if (v24 <= (int)v37)
        v24 = v37;
      while (1)
      {
        v40 = v86;
        if (v24 == (_DWORD)v37)
          break;
        v37 = (v37 + 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v86 + 96))(v86, *(unsigned int *)(a1 + 176), v37);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v85 + 96))(v85, *(unsigned int *)(a1 + 176), v37);
      }
      v41 = v88;
      if ((unint64_t)v88 >= v89)
      {
        v43 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v87, v71, v86);
      }
      else
      {
        if (*(char *)(a1 + 95) < 0)
        {
          std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
        }
        else
        {
          v42 = *v71;
          v88->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        }
        v41[1].__r_.__value_.__r.__words[0] = v40;
        v43 = (std::string *)((char *)v41 + 32);
      }
      v88 = v43;
      v44 = v85;
      if ((unint64_t)v43 >= v89)
      {
        v46 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v87, v70, v85);
      }
      else
      {
        if (*(char *)(a1 + 119) < 0)
        {
          std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
        }
        else
        {
          v45 = *v70;
          v43->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
          *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v45;
        }
        v43[1].__r_.__value_.__r.__words[0] = v44;
        v46 = (std::string *)((char *)v43 + 32);
      }
      v88 = v46;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v47 = *(_QWORD *)(a1 + 200);
      if (*(char *)(a1 + 143) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 120), *(_QWORD *)(a1 + 128));
      else
        __p = *(std::string *)(a1 + 120);
      if (*(char *)(a1 + 167) < 0)
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(a1 + 144), *(_QWORD *)(a1 + 152));
      else
        v99 = *(std::string *)(a1 + 144);
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v76 = &v79;
      LOBYTE(v77) = 0;
      v79 = (std::string *)operator new(0x30uLL);
      v80 = v79;
      v81 = v79 + 2;
      v80 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v81, (__int128 *)&__p, v100, v79);
      v76 = 0;
      v77 = 0;
      v78 = 0;
      (*(void (**)(uint64_t, uint64_t *, std::string **, std::string ***, uint64_t *))(*(_QWORD *)v47 + 128))(v47, &v87, &v79, &v76, &v82);
      v97 = (void ***)&v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      v76 = &v79;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&__p + i * 8 + 24));
      }
      v49 = v83;
      if ((char *)*v35 - (char *)*v21 != -4)
      {
        v50 = 0;
        do
        {
          v51 = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*(v49 - 1) + 112))(*(v49 - 1), v50);
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"r_attn_score[", 13);
            v52 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"][", 2);
            v53 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"] = ", 4);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
          *(float *)(*(_QWORD *)(a5 + 8) + 4 * v17) = v51 + *(float *)(*(_QWORD *)(a5 + 8) + 4 * v17);
          ++v50;
        }
        while (*v35 - *v21 + 1 > v50);
        v49 = v83;
      }
      v55 = v49 - 1;
      v54 = *(v49 - 1);
      *(v49 - 1) = 0;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      v83 = v49 - 1;
      if ((char *)*v35 - (char *)*v21 != -4)
      {
        v56 = 0;
        do
        {
          v57 = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*(v49 - 2) + 112))(*(v49 - 2), v56);
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v27, 11);
            v58 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"][", 2);
            v59 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] = ", 4);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
          *(float *)(*(_QWORD *)(a4 + 8) + 4 * v17) = v57 + *(float *)(*(_QWORD *)(a4 + 8) + 4 * v17);
          ++v56;
        }
        while (*v35 - *v21 + 1 > v56);
        v55 = v83;
      }
      v62 = *(v55 - 1);
      v61 = v55 - 1;
      v60 = v62;
      *v61 = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      v83 = v61;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v63 = v85;
      v85 = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      v64 = v86;
      v86 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v17;
      v16 = *a3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v17);
  }
  v65 = v91;
  v91 = 0;
  if (v65)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v65 + 8))(v65);
  if (v92[0])
  {
    v92[1] = v92[0];
    operator delete(v92[0]);
  }
  result = kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v93);
  if (v74)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  return result;
}

void sub_1ADDD1110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *a51)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  a51 = &a31;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  v52 = a34;
  a34 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = a35;
  a35 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  a51 = &a36;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  v54 = a40;
  a40 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a44);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  _Unwind_Resume(a1);
}

void sub_1ADDD1120(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADDD11E8);
}

void sub_1ADDD113C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a51);
  JUMPOUT(0x1ADDD114CLL);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  return *((unsigned int *)this + 47);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::MaxWordpieceSize(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  return *((unsigned int *)this + 49);
}

void kaldi::quasar::CEFusedAcousticEncoderConfig::~CEFusedAcousticEncoderConfig(kaldi::quasar::CEFusedAcousticEncoderConfig *this)
{
  uint64_t v2;
  void **v3;

  v3 = (void **)((char *)this + 456);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  v3 = (void **)((char *)this + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

kaldi::quasar::CEFusedAcousticEncoderConfig *kaldi::quasar::CEFusedAcousticEncoderConfig::CEFusedAcousticEncoderConfig(kaldi::quasar::CEFusedAcousticEncoderConfig *this)
{
  *((_QWORD *)this + 38) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEFusedAcousticEncoderConfig *)((char *)this + 312));
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEFusedAcousticEncoderConfig *)((char *)this + 324));
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEFusedAcousticEncoderConfig *)((char *)this + 336));
  *(_QWORD *)((char *)this + 348) = -1;
  *(_QWORD *)((char *)this + 356) = -1;
  *(_OWORD *)((char *)this + 364) = xmmword_1AE182400;
  *((_DWORD *)this + 95) = -1;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 54) = 0xFFFFFFFF00000001;
  *((_DWORD *)this + 110) = -1;
  *((_BYTE *)this + 444) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  return this;
}

void sub_1ADDD1410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 263) < 0)
    operator delete(*(void **)(v10 + 240));
  if (*(char *)(v10 + 239) < 0)
    operator delete(*(void **)(v10 + 216));
  if (*(char *)(v10 + 215) < 0)
    operator delete(*(void **)(v10 + 192));
  if (*(char *)(v10 + 191) < 0)
    operator delete(*(void **)(v10 + 168));
  if (*(char *)(v10 + 167) < 0)
    operator delete(*(void **)(v10 + 144));
  if (*(char *)(v10 + 143) < 0)
    operator delete(*(void **)(v10 + 120));
  if (*(char *)(v10 + 119) < 0)
    operator delete(*(void **)(v10 + 96));
  if (*(char *)(v10 + 95) < 0)
    operator delete(*(void **)(v10 + 72));
  if (*(char *)(v10 + 71) < 0)
    operator delete(*(void **)(v10 + 48));
  if (*(char *)(v10 + 47) < 0)
    operator delete(*(void **)(v10 + 24));
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAttnEncoderDecoderConfig::~CEAttnEncoderDecoderConfig(void **this)
{
  void *v2;

  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = *this;
  *this = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 == v5)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        v6 = 0;
        do
        {
          if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6))
            break;
          if (++v6 + v3 == a3)
            break;
        }
        while (v6 + v4 != v5);
        if (v4 + v6 == v5)
          break;
        if (++v3 == a3)
          return a3;
      }
    }
  }
  return v3;
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, _BYTE *a5, _BYTE *a6, char *a7, char *a8)
{
  _BYTE *v8;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v15;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  std::string::value_type *v32;
  char *v33;
  std::string::value_type *v34;
  std::string::size_type v35;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v8 = a6;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  v11 = *(_BYTE **)a1;
  if ((int)v10 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  if (a5 == a6)
  {
    v19 = v12;
  }
  else
  {
    v15 = a5;
    v19 = v12;
    v20 = v12;
    do
    {
      v12 = v8;
      v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      v21 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      if ((_QWORD)v38 == v37.i64[1])
        v22 = 0;
      else
        v22 = *(_QWORD *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v37, v21, v22, a7, a8, a8 - a7);
      v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 8);
      v15 = (_BYTE *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      v8 = v25;
      v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = *(_BYTE **)a1;
  }
  v10 = v10;
  if ((v10 & 0x80u) == 0)
    v26 = a1;
  else
    v26 = (uint64_t)v11;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (_BYTE *)(v26 + v10));
  v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = a1;
  else
    v29 = *(_QWORD *)a1;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a1 + 8);
  v30 = v29 + v28;
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((_QWORD)v38 == v37.i64[1])
    {
      v32 = 0;
      v34 = 0;
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
    }
    else
    {
      v32 = (std::string::value_type *)(*(_QWORD *)v31 + (v39 & 0xFFF));
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      v34 = (std::string::value_type *)(*(_QWORD *)v33 + ((v39 + *((_QWORD *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32)
      v35 = 0;
    else
      v35 = &v34[512 * (v33 - v31)] - &v32[*(_QWORD *)v33] + *(_QWORD *)v31;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (_QWORD)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_1ADDD1834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_BYTE *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int a1, int64x2_t *a2, int a3, _BYTE *__dst, _BYTE *__src, _BYTE *a6)
{
  _BYTE *v8;
  uint64_t v10;
  BOOL v11;
  size_t v12;

  v8 = __dst;
  v10 = a2[2].i64[1];
  if (v10)
    v11 = __dst == __src;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      *v8++ = *(_BYTE *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_1AE13F780);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
      v10 = a2[2].i64[1];
    }
    while (v10 && v8 != __src);
  }
  if (v10)
  {
    while (v8 != a6)
    {
      std::deque<char>::push_back(a2, v8);
      *v8++ = *(_BYTE *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_1AE13F780);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
    }
  }
  else if (v8 != __src)
  {
    v12 = a6 - __src;
    if (v12)
      memmove(v8, __src, v12);
    return &v8[v12];
  }
  return a6;
}

void std::deque<char>::push_back(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADDD1CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1000)
    a2 = 1;
  if (v2 < 0x2000)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

_QWORD *std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  void **v41;
  uint64_t v42;
  size_t v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  const void **v49;
  char *v50;
  const void **v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 12;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + (a1[2].i64[0] & 0xFFF);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = a3 + ((a2 - v14) << 9) - (v15 + *(_QWORD *)a2) + *(_QWORD *)v14;
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v10 + v17;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (_QWORD *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = (char *)(*v23 + (v21 & 0xFFF));
    *(_QWORD *)&v68 = v12 + 8 * (v21 >> 12);
    *((_QWORD *)&v68 + 1) = v24;
    v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1)
        v46 = &a4[v45];
      if (v46 != a5)
      {
        v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            v48 = (char *)v23[1];
            ++v23;
            v24 = v48;
          }
          ++v47;
          ++a1[2].i64[1];
        }
        while (v47 != a5);
        a5 = v46;
      }
      v6 = v17 - v16;
    }
    if (v6)
    {
      v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
      v51 = v49;
      v52 = v50;
      v53 = *((_QWORD *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        v54 = v49;
        v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            v56 = (char *)v23[1];
            ++v23;
            v24 = v56;
          }
          if (&(++v55)[-*v54] == (char *)4096)
          {
            v57 = (char *)v54[1];
            ++v54;
            v55 = v57;
          }
          ++a1[2].i64[1];
          v53 = *((_QWORD *)&v68 + 1);
        }
        while (v55 != *((char **)&v68 + 1));
      }
      if (v6 < v45)
      {
        v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v45);
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        v53 = *((_QWORD *)&v70 + 1);
        v68 = v70;
      }
      if (a5 != a4)
      {
        v61 = (uint64_t *)(v68 - 8);
        v60 = *(_QWORD *)v68;
        while (1)
        {
          v62 = v53 - v60;
          if (a5 - a4 >= v62)
            v63 = v62;
          else
            v63 = a5 - a4;
          a5 -= v63;
          if (v63)
            memmove((void *)(v53 - v63), a5, v63);
          if (a5 == a4)
            break;
          v64 = *v61--;
          v60 = v64;
          v53 = v64 + 4096;
        }
      }
    }
  }
  else
  {
    if (a6 > v10)
    {
      std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
      v10 = a1[2].u64[0];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v11 = v10 >> 12;
    }
    v18 = (_QWORD *)(v12 + 8 * v11);
    if (v13 == v12)
      v19 = 0;
    else
      v19 = *v18 + (v10 & 0xFFF);
    *(_QWORD *)&v68 = v12 + 8 * v11;
    *((_QWORD *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1)
        v25 = &a5[-v16];
      if (v25 != a4)
      {
        v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            v27 = *--v18;
            v19 = v27 + 4096;
          }
          v28 = *--v26;
          *(_BYTE *)--v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE140E90);
        }
        while (v26 != a4);
        a4 = v25;
      }
      v6 = v16;
    }
    if (v6)
    {
      v30 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
      v31 = v29;
      v32 = (_BYTE *)*((_QWORD *)&v68 + 1);
      if (*((_BYTE **)&v68 + 1) != v29)
      {
        v33 = v30;
        v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            v35 = *--v18;
            v19 = v35 + 4096;
          }
          if (v34 == (_BYTE *)*v33)
          {
            v36 = *--v33;
            v34 = (_BYTE *)(v36 + 4096);
          }
          v37 = *--v34;
          *(_BYTE *)--v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE140E90);
          v32 = (_BYTE *)*((_QWORD *)&v68 + 1);
        }
        while (v34 != *((_BYTE **)&v68 + 1));
      }
      if (v6 < v16)
      {
        v38 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
        v69 = v68;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v30, v31, (_BYTE **)v38, v39, (void ***)&v69);
        v32 = (_BYTE *)*((_QWORD *)&v69 + 1);
        v68 = v69;
      }
      if (a4 != a5)
      {
        v41 = (void **)(v68 + 8);
        v40 = *(_BYTE **)v68;
        while (1)
        {
          v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42)
            v43 = v42;
          else
            v43 = a5 - a4;
          if (v43)
            memmove(v32, a4, v43);
          a4 += v43;
          if (a4 == a5)
            break;
          v44 = *v41++;
          v40 = v44;
          v32 = v44;
        }
      }
    }
  }
  v65 = a1->i64[1];
  if (a1[1].i64[0] == v65)
    v66 = 0;
  else
    v66 = *(_QWORD *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  *(_QWORD *)&v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((_QWORD *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void std::deque<char>::__add_front_capacity(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 9) - 1;
  if ((v6 & 0xFFF) != 0)
    v8 = (v6 >> 12) + 1;
  else
    v8 = v6 >> 12;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 12)
    v11 = v10 >> 12;
  else
    v11 = v8;
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 4095 : 4096;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_1ADDD2638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - *result + a2;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void std::deque<char>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0xFFF) != 0)
    v6 = (v5 >> 12) + 1;
  else
    v6 = v5 >> 12;
  v7 = a1[4];
  if (v6 >= v7 >> 12)
    v8 = v7 >> 12;
  else
    v8 = v6;
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 4095;
          else
            v64 = 4096;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1ADDD2C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - a2 - *result;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, void ***a5)
{
  _QWORD *v7;
  _BYTE *i;
  _BYTE *v9;
  void ***v11;

  v11 = a5;
  if (a1 != a3)
  {
    v7 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4096); ; i = v9 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, i);
      if (v7 == a3)
        break;
      v9 = (_BYTE *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, a4);
}

void ****std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](void ****result, _BYTE *__src, _BYTE *a3)
{
  void ***v3;
  void **v4;
  void **v5;
  _BYTE *v7;
  void ****v8;
  void **v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void **v13;

  v3 = *result;
  v5 = **result;
  v4 = (*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v10 = (char *)*v5++;
    v9 = (void **)v10;
    while (1)
    {
      v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11)
        v12 = v11;
      else
        v12 = a3 - v7;
      if (v12)
        result = (void ****)memmove(v4, v7, v12);
      v7 += v12;
      if (v7 == a3)
        break;
      v13 = (void **)*v5++;
      v9 = v13;
      v4 = v13;
    }
    v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4)
      v4 = (void **)*v5;
    else
      --v5;
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  void *result;
  uint64_t v20;
  char *v21;
  const void **v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_46;
    v35 = (uint64_t)*a5;
    v36 = a4;
    while (1)
    {
      v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37)
        v38 = (size_t)v37;
      else
        v38 = v36 - a2;
      v36 -= v38;
      a6 -= v38;
      if (v38)
        result = memmove(a6, v36, v38);
      if (v36 == a2)
        break;
      v39 = (uint64_t)*--v8;
      v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17)
        v18 = (size_t)v17;
      else
        v18 = v16 - v14;
      v16 -= v18;
      a6 -= v18;
      if (v18)
        result = memmove(a6, v16, v18);
      if (v16 == v14)
        break;
      v20 = (uint64_t)*--v8;
      v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v23 = (char *)*v8;
    do
    {
      v24 = *v22;
      v25 = (char *)*v22 + 4096;
      while (1)
      {
        v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26)
          v27 = (size_t)v26;
        else
          v27 = v25 - v24;
        v25 -= v27;
        a6 -= v27;
        if (v27)
          result = memmove(a6, v25, v27);
        if (v25 == v24)
          break;
        v28 = (char *)*--v8;
        v23 = v28;
        a6 = v28 + 4096;
      }
      v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        v29 = (char *)v8[1];
        ++v8;
        v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    v31 = (uint64_t)*v8;
    while (1)
    {
      v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32)
        v33 = (size_t)v32;
      else
        v33 = v30 - a2;
      v30 -= v33;
      a6 -= v33;
      if (v33)
        result = memmove(a6, v30, v33);
      if (v30 == a2)
        break;
      v34 = (uint64_t)*--v8;
      v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

char *std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(uint64_t a1, uint64_t a2, _QWORD *a3, std::string::value_type *a4, uint64_t a5, std::string::value_type *a6, std::string::size_type a7)
{
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v8 = (std::string *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    v9 = a2 - *(_QWORD *)a1;
    if (!a7)
    {
      v8 = *(std::string **)a1;
      return (char *)v8 + v9;
    }
  }
  else
  {
    v9 = a2 - a1;
    if (!a7)
      return (char *)v8 + v9;
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(&__p, a3, a4, a5, a6);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v8, a7, v9, (char *)p_p, (char *)p_p + size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (char *)v12;
}

void sub_1ADDD30D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(std::string *this, _QWORD *a2, std::string::value_type *a3, uint64_t a4, std::string::value_type *a5)
{
  std::string::value_type *v6;
  std::string::value_type *v9;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      std::string::push_back(this, *v6++);
      if (&v6[-*a2] == (std::string::value_type *)4096)
      {
        v9 = (std::string::value_type *)a2[1];
        ++a2;
        v6 = v9;
      }
    }
    while (v6 != a5);
  }
}

void sub_1ADDD3270(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1ADDD328C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADDD337C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<long long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADDD3484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void quasar::tennessee::lm::CreatePersonalizationSlotInfoT(const std::string *a1@<X0>, const std::string **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  const std::string *v7;
  const std::string *i;
  uint64_t v9;
  const std::string *v10;
  uint64_t v11;
  std::string **v12;
  _QWORD *v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  std::string **v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  _QWORD v26[5];

  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *a3 = v6;
  std::string::operator=((std::string *)v6, a1);
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::reserve((uint64_t *)(v6 + 24), 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
  v7 = *a2;
  for (i = a2[1]; v7 != i; v7 = v10 + 1)
  {
    v9 = operator new();
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)v9 = 0u;
    v25 = (std::string *)v9;
    std::string::operator=((std::string *)v9, v7);
    v10 = v7 + 1;
    std::string::operator=(v25 + 1, v10);
    v11 = *a3;
    v12 = *(std::string ***)(*a3 + 32);
    v13 = (_QWORD *)(*a3 + 40);
    if ((unint64_t)v12 >= *v13)
    {
      v16 = *(_QWORD *)(v11 + 24);
      v17 = ((uint64_t)v12 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = *v13 - v16;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v26[4] = *a3 + 40;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v13, v20);
      else
        v21 = 0;
      v22 = (std::string **)&v21[8 * v17];
      v26[0] = v21;
      v26[1] = v22;
      v26[3] = &v21[8 * v20];
      v23 = v25;
      v25 = 0;
      *v22 = v23;
      v26[2] = v22 + 1;
      std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__swap_out_circular_buffer((uint64_t *)(v11 + 24), v26);
      v15 = *(_QWORD **)(v11 + 32);
      std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer((uint64_t)v26);
    }
    else
    {
      v14 = v25;
      v25 = 0;
      *v12 = v14;
      v15 = v12 + 1;
      *(_QWORD *)(v11 + 32) = v15;
    }
    *(_QWORD *)(v11 + 32) = v15;
    v24 = (uint64_t)v25;
    v25 = 0;
    if (v24)
      std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100]((uint64_t)&v25, v24);
  }
}

void sub_1ADDD37AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)v1, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADDD3888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::tennessee::lm::LoadDefaultPersonalizationSlotInfos(uint64_t *a1@<X8>)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void **v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t i;
  void **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void **v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t j;
  void **v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t k;
  void **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void **v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t m;
  void **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t n;
  void **v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void **v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t ii;
  void **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t jj;
  void **v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void **v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t kk;
  void **v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void **v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t mm;
  void **v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void **v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t nn;
  void **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void **v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void **v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t i1;
  void **v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void **v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  void **v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void **v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void **v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  void **v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void **v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  void **v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  void **v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t i2;
  void **v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  void **v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t i3;
  void **v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  void **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  void **v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  void **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  void **v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  void **v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  void **v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  void **v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  void **v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  void **v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  void **v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  std::string *v427;
  std::string *v428;
  const std::string *v429;
  std::string *v430;
  std::string *v431;
  const std::string *v432;
  std::string *v433;
  std::string *v434;
  const std::string *v435;
  std::string *v436;
  std::string *v437;
  const std::string *v438;
  std::string *v439;
  std::string *v440;
  const std::string *v441;
  std::string *v442;
  std::string *v443;
  const std::string *v444;
  std::string *v445;
  std::string *v446;
  const std::string *v447;
  std::string *v448;
  std::string *v449;
  const std::string *v450;
  std::string *v451;
  std::string *v452;
  const std::string *v453;
  std::string *v454;
  std::string *v455;
  const std::string *v456;
  std::string *v457;
  std::string *v458;
  const std::string *v459;
  std::string *v460;
  std::string *v461;
  const std::string *v462;
  std::string *v463;
  std::string *v464;
  const std::string *v465;
  std::string *v466;
  std::string *v467;
  const std::string *v468;
  std::string *v469;
  std::string *v470;
  const std::string *v471;
  std::string *v472;
  std::string *v473;
  const std::string *v474;
  std::string *v475;
  std::string *v476;
  const std::string *v477;
  std::string *v478;
  std::string *v479;
  const std::string *v480;
  std::string *v481;
  std::string *v482;
  const std::string *v483;
  std::string *v484;
  std::string *v485;
  const std::string *v486;
  std::string *v487;
  std::string *v488;
  const std::string *v489;
  std::string *v490;
  std::string *v491;
  const std::string *v492;
  std::string *v493;
  std::string *v494;
  const std::string *v495;
  std::string *v496;
  std::string *v497;
  const std::string *v498;
  std::string *v499;
  std::string *v500;
  const std::string *v501;
  std::string *v502;
  std::string *v503;
  const std::string *v504;
  std::string *v505;
  std::string *v506;
  const std::string *v507;
  std::string *v508;
  std::string *v509;
  const std::string *v510;
  std::string *v511;
  std::string *v512;
  const std::string *v513;
  std::string *v514;
  std::string *v515;
  const std::string *v516;
  std::string *v517;
  std::string *v518;
  const std::string *v519;
  std::string *v520;
  std::string *v521;
  const std::string *v522;
  std::string *v523;
  std::string *v524;
  const std::string *v525;
  std::string *v526;
  std::string *v527;
  const std::string *v528;
  std::string *v529;
  std::string *v530;
  const std::string *v531;
  std::string __p;
  uint64_t v533;
  std::string **v534;
  uint64_t *v535;
  _QWORD *v536;
  void **v537;
  uint64_t *v538;
  void *v539[2];
  char v540;
  void *v541;
  char v542;
  __int128 v543[3];
  __int128 v544[3];
  __int128 v545[3];
  _QWORD v546[6];
  _QWORD v547[6];
  __int128 v548[3];
  _QWORD v549[6];
  _QWORD v550[6];
  __int128 v551[3];
  __int128 v552[3];
  uint64_t v553[6];
  uint64_t v554[6];
  uint64_t v555[6];
  uint64_t v556[6];
  uint64_t v557[6];
  uint64_t v558[6];
  uint64_t v559[6];
  __int128 v560;

  *(_QWORD *)&v560 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::reserve(a1, 0x23uLL);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-contact");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v539, "\\company-first", "COMPANYFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v543, "\\contact-first", "CONTACTFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[17],0>(v544, "\\contact-first-derived", "CONTACTFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v545, "\\contact-group", "CONTACTGROUPNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v546, "\\contact-last", "CONTACTLASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[16],0>(v547, "\\contact-last-derived", "CONTACTLASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v548, "\\contact-middle", "CONTACTMIDDLENAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v549, "\\contact-nickname", "CONTACTFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v550, "\\interaction-first", "INTERACTIONNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[19],0>(v551, "\\interaction-last", "INTERACTIONNAMELME");
  v530 = 0;
  v529 = 0;
  v531 = 0;
  v534 = &v529;
  LOBYTE(v535) = 0;
  v529 = (std::string *)operator new(0x1E0uLL);
  v530 = v529;
  v531 = v529 + 20;
  v530 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v531, (__int128 *)v539, v552, v529);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v529, &v533);
  v4 = (uint64_t **)(a1 + 1);
  v3 = (uint64_t *)a1[1];
  v6 = a1 + 2;
  v5 = a1[2];
  if ((unint64_t)v3 >= v5)
  {
    v9 = ((uint64_t)v3 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v538 = a1 + 2;
    if (v12)
      v13 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[v9];
    v534 = (std::string **)v13;
    v535 = v14;
    v537 = &v13[v12];
    v15 = v533;
    v533 = 0;
    *v14 = v15;
    v536 = v14 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v8 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v7 = v533;
    v533 = 0;
    *v3 = v7;
    v8 = v3 + 1;
    *v4 = v8;
  }
  *v4 = v8;
  v16 = v533;
  v533 = 0;
  if (v16)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v16);
  v534 = &v529;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  v17 = 60;
  do
  {
    v18 = &v539[v17];
    if (SHIBYTE(v539[v17 - 1]) < 0)
      operator delete(*(v18 - 3));
    if (*((char *)v18 - 25) < 0)
      operator delete(*(v18 - 6));
    v17 -= 6;
  }
  while (v17 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-appname");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[17],0>(v539, "\\app-first", "APPNAMEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[16],0>(v543, "\\app-last", "APPNAMELASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[18],0>(v544, "\\app-middle", "APPNAMEMIDDLENAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v545, "\\appname-first", "APPNAMEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v546, "\\appname-last", "APPNAMELASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v547, "\\appname-middle", "APPNAMEMIDDLENAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[17],0>(v548, "\\carProfileName-first", "APPNAMEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[17],0>(v549, "\\carProfileName-last", "APPNAMEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[17],0>(v550, "\\carProfileName-middle", "APPNAMEFIRSTNAME");
  v527 = 0;
  v526 = 0;
  v528 = 0;
  v534 = &v526;
  LOBYTE(v535) = 0;
  v526 = (std::string *)operator new(0x1B0uLL);
  v527 = v526;
  v528 = v526 + 18;
  v527 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v528, (__int128 *)v539, v551, v526);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v526, &v533);
  v19 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v22 = ((uint64_t)v19 - *a1) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v23 = *v6 - *a1;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    v538 = a1 + 2;
    if (v25)
      v26 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v25);
    else
      v26 = 0;
    v27 = (uint64_t *)&v26[v22];
    v534 = (std::string **)v26;
    v535 = v27;
    v537 = &v26[v25];
    v28 = v533;
    v533 = 0;
    *v27 = v28;
    v536 = v27 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v21 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v20 = v533;
    v533 = 0;
    *v19 = v20;
    v21 = v19 + 1;
    *v4 = v21;
  }
  *v4 = v21;
  v29 = v533;
  v533 = 0;
  if (v29)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v29);
  v534 = &v526;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  v30 = 54;
  do
  {
    v31 = &v539[v30];
    if (SHIBYTE(v539[v30 - 1]) < 0)
      operator delete(*(v31 - 3));
    if (*((char *)v31 - 25) < 0)
      operator delete(*(v31 - 6));
    v30 -= 6;
  }
  while (v30 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-scene");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(v539, "\\scene-first", "SCENEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v543, "\\scene-last", "SCENELASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v544, "\\scene-middle", "SCENEMIDDLENAME");
  v524 = 0;
  v523 = 0;
  v525 = 0;
  v534 = &v523;
  LOBYTE(v535) = 0;
  v523 = (std::string *)operator new(0x90uLL);
  v524 = v523;
  v525 = v523 + 6;
  v524 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v525, (__int128 *)v539, v545, v523);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v523, &v533);
  v32 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v35 = ((uint64_t)v32 - *a1) >> 3;
    if ((unint64_t)(v35 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v36 = *v6 - *a1;
    v37 = v36 >> 2;
    if (v36 >> 2 <= (unint64_t)(v35 + 1))
      v37 = v35 + 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v37;
    v538 = a1 + 2;
    if (v38)
      v39 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v38);
    else
      v39 = 0;
    v40 = (uint64_t *)&v39[v35];
    v534 = (std::string **)v39;
    v535 = v40;
    v537 = &v39[v38];
    v41 = v533;
    v533 = 0;
    *v40 = v41;
    v536 = v40 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v34 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v33 = v533;
    v533 = 0;
    *v32 = v33;
    v34 = v32 + 1;
    *v4 = v34;
  }
  *v4 = v34;
  v42 = v533;
  v533 = 0;
  if (v42)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v42);
  v534 = &v523;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (i = 0; i != -144; i -= 48)
  {
    v44 = &v539[i / 8];
    if (SHIBYTE(v544[i / 0x10 + 2]) < 0)
      operator delete(v44[15]);
    if (*((char *)v44 + 119) < 0)
      operator delete(v44[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-room");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v539, "\\room-first", "ROOMFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[13],0>(v543, "\\room-last", "ROOMLASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(v544, "\\room-middle", "ROOMMIDDLENAME");
  v521 = 0;
  v520 = 0;
  v522 = 0;
  v534 = &v520;
  LOBYTE(v535) = 0;
  v520 = (std::string *)operator new(0x90uLL);
  v521 = v520;
  v522 = v520 + 6;
  v521 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v522, (__int128 *)v539, v545, v520);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v520, &v533);
  v45 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v48 = ((uint64_t)v45 - *a1) >> 3;
    if ((unint64_t)(v48 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v49 = *v6 - *a1;
    v50 = v49 >> 2;
    if (v49 >> 2 <= (unint64_t)(v48 + 1))
      v50 = v48 + 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    v538 = a1 + 2;
    if (v51)
      v52 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v51);
    else
      v52 = 0;
    v53 = (uint64_t *)&v52[v48];
    v534 = (std::string **)v52;
    v535 = v53;
    v537 = &v52[v51];
    v54 = v533;
    v533 = 0;
    *v53 = v54;
    v536 = v53 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v47 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v46 = v533;
    v533 = 0;
    *v45 = v46;
    v47 = v45 + 1;
    *v4 = v47;
  }
  *v4 = v47;
  v55 = v533;
  v533 = 0;
  if (v55)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v55);
  v534 = &v520;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (j = 0; j != -144; j -= 48)
  {
    v57 = &v539[j / 8];
    if (SHIBYTE(v544[j / 0x10 + 2]) < 0)
      operator delete(v57[15]);
    if (*((char *)v57 + 119) < 0)
      operator delete(v57[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-house");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(v539, "\\house-first", "HOUSEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v543, "\\house-last", "HOUSELASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v544, "\\house-middle", "HOUSEMIDDLENAME");
  v518 = 0;
  v517 = 0;
  v519 = 0;
  v534 = &v517;
  LOBYTE(v535) = 0;
  v517 = (std::string *)operator new(0x90uLL);
  v518 = v517;
  v519 = v517 + 6;
  v518 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v519, (__int128 *)v539, v545, v517);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v517, &v533);
  v58 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v61 = ((uint64_t)v58 - *a1) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v62 = *v6 - *a1;
    v63 = v62 >> 2;
    if (v62 >> 2 <= (unint64_t)(v61 + 1))
      v63 = v61 + 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    v538 = a1 + 2;
    if (v64)
      v65 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v64);
    else
      v65 = 0;
    v66 = (uint64_t *)&v65[v61];
    v534 = (std::string **)v65;
    v535 = v66;
    v537 = &v65[v64];
    v67 = v533;
    v533 = 0;
    *v66 = v67;
    v536 = v66 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v60 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v59 = v533;
    v533 = 0;
    *v58 = v59;
    v60 = v58 + 1;
    *v4 = v60;
  }
  *v4 = v60;
  v68 = v533;
  v533 = 0;
  if (v68)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v68);
  v534 = &v517;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (k = 0; k != -144; k -= 48)
  {
    v70 = &v539[k / 8];
    if (SHIBYTE(v544[k / 0x10 + 2]) < 0)
      operator delete(v70[15]);
    if (*((char *)v70 + 119) < 0)
      operator delete(v70[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-device");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v539, "\\accessory-first", "ACCESSORYNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v543, "\\carName-first", "CARNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v544, "\\device-first", "DEVICEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(v545, "\\device-last", "DEVICELASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v546, "\\device-middle", "DEVICEMIDDLENAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v547, "\\deviceNames-first", "APPLEDEVICENAMELME");
  v515 = 0;
  v514 = 0;
  v516 = 0;
  v534 = &v514;
  LOBYTE(v535) = 0;
  v514 = (std::string *)operator new(0x120uLL);
  v515 = v514;
  v516 = v514 + 12;
  v515 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v516, (__int128 *)v539, v548, v514);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v514, &v533);
  v71 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v74 = ((uint64_t)v71 - *a1) >> 3;
    if ((unint64_t)(v74 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v75 = *v6 - *a1;
    v76 = v75 >> 2;
    if (v75 >> 2 <= (unint64_t)(v74 + 1))
      v76 = v74 + 1;
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
      v77 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v77 = v76;
    v538 = a1 + 2;
    if (v77)
      v78 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v77);
    else
      v78 = 0;
    v79 = (uint64_t *)&v78[v74];
    v534 = (std::string **)v78;
    v535 = v79;
    v537 = &v78[v77];
    v80 = v533;
    v533 = 0;
    *v79 = v80;
    v536 = v79 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v73 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v72 = v533;
    v533 = 0;
    *v71 = v72;
    v73 = v71 + 1;
    *v4 = v73;
  }
  *v4 = v73;
  v81 = v533;
  v533 = 0;
  if (v81)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v81);
  v534 = &v514;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  v82 = 36;
  do
  {
    v83 = &v539[v82];
    if (SHIBYTE(v539[v82 - 1]) < 0)
      operator delete(*(v83 - 3));
    if (*((char *)v83 - 25) < 0)
      operator delete(*(v83 - 6));
    v82 -= 6;
  }
  while (v82 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-zone");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v539, "\\zone-first", "ZONEFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[13],0>(v543, "\\zone-last", "ZONELASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(v544, "\\zone-middle", "ZONEMIDDLENAME");
  v512 = 0;
  v511 = 0;
  v513 = 0;
  v534 = &v511;
  LOBYTE(v535) = 0;
  v511 = (std::string *)operator new(0x90uLL);
  v512 = v511;
  v513 = v511 + 6;
  v512 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v513, (__int128 *)v539, v545, v511);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v511, &v533);
  v84 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v87 = ((uint64_t)v84 - *a1) >> 3;
    if ((unint64_t)(v87 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v88 = *v6 - *a1;
    v89 = v88 >> 2;
    if (v88 >> 2 <= (unint64_t)(v87 + 1))
      v89 = v87 + 1;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
      v90 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v90 = v89;
    v538 = a1 + 2;
    if (v90)
      v91 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v90);
    else
      v91 = 0;
    v92 = (uint64_t *)&v91[v87];
    v534 = (std::string **)v91;
    v535 = v92;
    v537 = &v91[v90];
    v93 = v533;
    v533 = 0;
    *v92 = v93;
    v536 = v92 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v86 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v85 = v533;
    v533 = 0;
    *v84 = v85;
    v86 = v84 + 1;
    *v4 = v86;
  }
  *v4 = v86;
  v94 = v533;
  v533 = 0;
  if (v94)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v94);
  v534 = &v511;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (m = 0; m != -144; m -= 48)
  {
    v96 = &v539[m / 8];
    if (SHIBYTE(v544[m / 0x10 + 2]) < 0)
      operator delete(v96[15]);
    if (*((char *)v96 + 119) < 0)
      operator delete(v96[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-group");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(v539, "\\group-first", "GROUPFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v543, "\\group-last", "GROUPLASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v544, "\\group-middle", "GROUPMIDDLENAME");
  v509 = 0;
  v508 = 0;
  v510 = 0;
  v534 = &v508;
  LOBYTE(v535) = 0;
  v508 = (std::string *)operator new(0x90uLL);
  v509 = v508;
  v510 = v508 + 6;
  v509 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v510, (__int128 *)v539, v545, v508);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v508, &v533);
  v97 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v100 = ((uint64_t)v97 - *a1) >> 3;
    if ((unint64_t)(v100 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v101 = *v6 - *a1;
    v102 = v101 >> 2;
    if (v101 >> 2 <= (unint64_t)(v100 + 1))
      v102 = v100 + 1;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
      v103 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v103 = v102;
    v538 = a1 + 2;
    if (v103)
      v104 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v103);
    else
      v104 = 0;
    v105 = (uint64_t *)&v104[v100];
    v534 = (std::string **)v104;
    v535 = v105;
    v537 = &v104[v103];
    v106 = v533;
    v533 = 0;
    *v105 = v106;
    v536 = v105 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v99 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v98 = v533;
    v533 = 0;
    *v97 = v98;
    v99 = v97 + 1;
    *v4 = v99;
  }
  *v4 = v99;
  v107 = v533;
  v533 = 0;
  if (v107)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v107);
  v534 = &v508;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (n = 0; n != -144; n -= 48)
  {
    v109 = &v539[n / 8];
    if (SHIBYTE(v544[n / 0x10 + 2]) < 0)
      operator delete(v109[15]);
    if (*((char *)v109 + 119) < 0)
      operator delete(v109[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-photoalbum");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[18],0>(v539, "\\photoAlbumName-first", "photoAlbumNameLME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(v543, "\\photoAlbumName-last", "photoAlbumNameLME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[18],0>(v544, "\\photoAlbumName-middle", "photoAlbumNameLME");
  v506 = 0;
  v505 = 0;
  v507 = 0;
  v534 = &v505;
  LOBYTE(v535) = 0;
  v505 = (std::string *)operator new(0x90uLL);
  v506 = v505;
  v507 = v505 + 6;
  v506 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v507, (__int128 *)v539, v545, v505);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v505, &v533);
  v110 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v113 = ((uint64_t)v110 - *a1) >> 3;
    if ((unint64_t)(v113 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v114 = *v6 - *a1;
    v115 = v114 >> 2;
    if (v114 >> 2 <= (unint64_t)(v113 + 1))
      v115 = v113 + 1;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
      v116 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v116 = v115;
    v538 = a1 + 2;
    if (v116)
      v117 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v116);
    else
      v117 = 0;
    v118 = (uint64_t *)&v117[v113];
    v534 = (std::string **)v117;
    v535 = v118;
    v537 = &v117[v116];
    v119 = v533;
    v533 = 0;
    *v118 = v119;
    v536 = v118 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v112 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v111 = v533;
    v533 = 0;
    *v110 = v111;
    v112 = v110 + 1;
    *v4 = v112;
  }
  *v4 = v112;
  v120 = v533;
  v533 = 0;
  if (v120)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v120);
  v534 = &v505;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (ii = 0; ii != -144; ii -= 48)
  {
    v122 = &v539[ii / 8];
    if (SHIBYTE(v544[ii / 0x10 + 2]) < 0)
      operator delete(v122[15]);
    if (*((char *)v122 + 119) < 0)
      operator delete(v122[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-phototag");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v539, "\\photoTags-first", "PHOTOTAGNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v543, "\\photoTags-last", "PHOTOTAGNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v544, "\\photoTags-middle", "PHOTOTAGNAMELME");
  v503 = 0;
  v502 = 0;
  v504 = 0;
  v534 = &v502;
  LOBYTE(v535) = 0;
  v502 = (std::string *)operator new(0x90uLL);
  v503 = v502;
  v504 = v502 + 6;
  v503 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v504, (__int128 *)v539, v545, v502);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v502, &v533);
  v123 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v126 = ((uint64_t)v123 - *a1) >> 3;
    if ((unint64_t)(v126 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v127 = *v6 - *a1;
    v128 = v127 >> 2;
    if (v127 >> 2 <= (unint64_t)(v126 + 1))
      v128 = v126 + 1;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
      v129 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v129 = v128;
    v538 = a1 + 2;
    if (v129)
      v130 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v129);
    else
      v130 = 0;
    v131 = (uint64_t *)&v130[v126];
    v534 = (std::string **)v130;
    v535 = v131;
    v537 = &v130[v129];
    v132 = v533;
    v533 = 0;
    *v131 = v132;
    v536 = v131 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v125 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v124 = v533;
    v533 = 0;
    *v123 = v124;
    v125 = v123 + 1;
    *v4 = v125;
  }
  *v4 = v125;
  v133 = v533;
  v533 = 0;
  if (v133)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v133);
  v534 = &v502;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (jj = 0; jj != -144; jj -= 48)
  {
    v135 = &v539[jj / 8];
    if (SHIBYTE(v544[jj / 0x10 + 2]) < 0)
      operator delete(v135[15]);
    if (*((char *)v135 + 119) < 0)
      operator delete(v135[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-appcontact");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v539, "\\appcontact-first", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(v543, "\\appcontact-last", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v544, "\\appcontact-middle", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[18],0>(v545, "\\paymentsUserName-first", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[18],0>(v546, "\\paymentsUserName-last", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[18],0>(v547, "\\paymentsUserName-middle", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[18],0>(v548, "\\personFullName-first", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(v549, "\\personFullName-last", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[18],0>(v550, "\\personFullName-middle", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[18],0>(v551, "\\phoneCallContactName-first", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[18],0>(v552, "\\phoneCallContactName-last", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[18],0>(v553, "\\phoneCallContactName-middle", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[18],0>(v554, "\\photoContactName-first", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[18],0>(v555, "\\photoContactName-last", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[18],0>(v556, "\\photoContactName-middle", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(v557, "\\smsGroupName-first", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v558, "\\smsGroupName-last", "APPCONTACTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(v559, "\\smsGroupName-middle", "APPCONTACTNAMELME");
  v500 = 0;
  v499 = 0;
  v501 = 0;
  v534 = &v499;
  LOBYTE(v535) = 0;
  v499 = (std::string *)operator new(0x360uLL);
  v500 = v499;
  v501 = v499 + 36;
  v500 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v501, (__int128 *)v539, &v560, v499);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v499, &v533);
  v136 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v139 = ((uint64_t)v136 - *a1) >> 3;
    if ((unint64_t)(v139 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v140 = *v6 - *a1;
    v141 = v140 >> 2;
    if (v140 >> 2 <= (unint64_t)(v139 + 1))
      v141 = v139 + 1;
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
      v142 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v142 = v141;
    v538 = a1 + 2;
    if (v142)
      v143 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v142);
    else
      v143 = 0;
    v144 = (uint64_t *)&v143[v139];
    v534 = (std::string **)v143;
    v535 = v144;
    v537 = &v143[v142];
    v145 = v533;
    v533 = 0;
    *v144 = v145;
    v536 = v144 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v138 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v137 = v533;
    v533 = 0;
    *v136 = v137;
    v138 = v136 + 1;
    *v4 = v138;
  }
  *v4 = v138;
  v146 = v533;
  v533 = 0;
  if (v146)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v146);
  v534 = &v499;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  v147 = 108;
  do
  {
    v148 = &v539[v147];
    if (SHIBYTE(v539[v147 - 1]) < 0)
      operator delete(*(v148 - 3));
    if (*((char *)v148 - 25) < 0)
      operator delete(*(v148 - 6));
    v147 -= 6;
  }
  while (v147 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-appvocab");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[19],0>(v539, "\\rideVehicleType-first", "VEHICLETYPENAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[19],0>(v543, "\\rideVehicleType-last", "VEHICLETYPENAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[19],0>(v544, "\\rideVehicleType-middle", "VEHICLETYPENAMELME");
  v497 = 0;
  v496 = 0;
  v498 = 0;
  v534 = &v496;
  LOBYTE(v535) = 0;
  v496 = (std::string *)operator new(0x90uLL);
  v497 = v496;
  v498 = v496 + 6;
  v497 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v498, (__int128 *)v539, v545, v496);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v496, &v533);
  v149 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v152 = ((uint64_t)v149 - *a1) >> 3;
    if ((unint64_t)(v152 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v153 = *v6 - *a1;
    v154 = v153 >> 2;
    if (v153 >> 2 <= (unint64_t)(v152 + 1))
      v154 = v152 + 1;
    if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
      v155 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v155 = v154;
    v538 = a1 + 2;
    if (v155)
      v156 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v155);
    else
      v156 = 0;
    v157 = (uint64_t *)&v156[v152];
    v534 = (std::string **)v156;
    v535 = v157;
    v537 = &v156[v155];
    v158 = v533;
    v533 = 0;
    *v157 = v158;
    v536 = v157 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v151 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v150 = v533;
    v533 = 0;
    *v149 = v150;
    v151 = v149 + 1;
    *v4 = v151;
  }
  *v4 = v151;
  v159 = v533;
  v533 = 0;
  if (v159)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v159);
  v534 = &v496;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (kk = 0; kk != -144; kk -= 48)
  {
    v161 = &v539[kk / 8];
    if (SHIBYTE(v544[kk / 0x10 + 2]) < 0)
      operator delete(v161[15]);
    if (*((char *)v161 + 119) < 0)
      operator delete(v161[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-savedactivity");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(v539, "\\healthActivity-first", "HEALTHACTIVITYNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[22],0>(v543, "\\healthActivity-last", "HEALTHACTIVITYNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(v544, "\\healthActivity-middle", "HEALTHACTIVITYNAMELME");
  v494 = 0;
  v493 = 0;
  v495 = 0;
  v534 = &v493;
  LOBYTE(v535) = 0;
  v493 = (std::string *)operator new(0x90uLL);
  v494 = v493;
  v495 = v493 + 6;
  v494 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v495, (__int128 *)v539, v545, v493);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v493, &v533);
  v162 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v165 = ((uint64_t)v162 - *a1) >> 3;
    if ((unint64_t)(v165 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v166 = *v6 - *a1;
    v167 = v166 >> 2;
    if (v166 >> 2 <= (unint64_t)(v165 + 1))
      v167 = v165 + 1;
    if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
      v168 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v168 = v167;
    v538 = a1 + 2;
    if (v168)
      v169 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v168);
    else
      v169 = 0;
    v170 = (uint64_t *)&v169[v165];
    v534 = (std::string **)v169;
    v535 = v170;
    v537 = &v169[v168];
    v171 = v533;
    v533 = 0;
    *v170 = v171;
    v536 = v170 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v164 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v163 = v533;
    v533 = 0;
    *v162 = v163;
    v164 = v162 + 1;
    *v4 = v164;
  }
  *v4 = v164;
  v172 = v533;
  v533 = 0;
  if (v172)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v172);
  v534 = &v493;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (mm = 0; mm != -144; mm -= 48)
  {
    v174 = &v539[mm / 8];
    if (SHIBYTE(v544[mm / 0x10 + 2]) < 0)
      operator delete(v174[15]);
    if (*((char *)v174 + 119) < 0)
      operator delete(v174[12]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-payaccount");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[18],0>(v539, "\\paymentsAccountName-first", "PAYACCOUNTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[18],0>(v543, "\\paymentsOrganizationName-first", "PAYACCOUNTNAMELME");
  v490 = 0;
  v491 = 0;
  v492 = 0;
  v534 = &v490;
  LOBYTE(v535) = 0;
  v490 = (std::string *)operator new(0x60uLL);
  v491 = v490;
  v492 = v490 + 4;
  v491 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v492, (__int128 *)v539, v544, v490);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v490, &v533);
  v175 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v178 = ((uint64_t)v175 - *a1) >> 3;
    if ((unint64_t)(v178 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v179 = *v6 - *a1;
    v180 = v179 >> 2;
    if (v179 >> 2 <= (unint64_t)(v178 + 1))
      v180 = v178 + 1;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
      v181 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v181 = v180;
    v538 = a1 + 2;
    if (v181)
      v182 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v181);
    else
      v182 = 0;
    v183 = (uint64_t *)&v182[v178];
    v534 = (std::string **)v182;
    v535 = v183;
    v537 = &v182[v181];
    v184 = v533;
    v533 = 0;
    *v183 = v184;
    v536 = v183 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v177 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v176 = v533;
    v533 = 0;
    *v175 = v176;
    v177 = v175 + 1;
    *v4 = v177;
  }
  *v4 = v177;
  v185 = v533;
  v533 = 0;
  if (v185)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v185);
  v534 = &v490;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (nn = 0; nn != -96; nn -= 48)
  {
    v187 = &v539[nn / 8];
    if (SHIBYTE(v543[nn / 0x10 + 2]) < 0)
      operator delete(v187[9]);
    if (*((char *)v187 + 71) < 0)
      operator delete(v187[6]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-inline");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[16],0>(v539, "\\jit", "INLINEFIRSTNAME");
  v487 = 0;
  v488 = 0;
  v489 = 0;
  v534 = &v487;
  LOBYTE(v535) = 0;
  v487 = (std::string *)operator new(0x30uLL);
  v488 = v487;
  v489 = v487 + 2;
  v488 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v489, (__int128 *)v539, v543, v487);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v487, &v533);
  v188 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v191 = ((uint64_t)v188 - *a1) >> 3;
    if ((unint64_t)(v191 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v192 = *v6 - *a1;
    v193 = v192 >> 2;
    if (v192 >> 2 <= (unint64_t)(v191 + 1))
      v193 = v191 + 1;
    if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
      v194 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v194 = v193;
    v538 = a1 + 2;
    if (v194)
      v195 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v194);
    else
      v195 = 0;
    v196 = (uint64_t *)&v195[v191];
    v534 = (std::string **)v195;
    v535 = v196;
    v537 = &v195[v194];
    v197 = v533;
    v533 = 0;
    *v196 = v197;
    v536 = v196 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v190 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v189 = v533;
    v533 = 0;
    *v188 = v189;
    v190 = v188 + 1;
    *v4 = v190;
  }
  *v4 = v190;
  v198 = v533;
  v533 = 0;
  if (v198)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v198);
  v534 = &v487;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-unknown");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(v539, "<UNK>", "UNKNOWNNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v543, "\\keyboard-first", "KEYBOARDNAMELME");
  v484 = 0;
  v485 = 0;
  v486 = 0;
  v534 = &v484;
  LOBYTE(v535) = 0;
  v484 = (std::string *)operator new(0x60uLL);
  v485 = v484;
  v486 = v484 + 4;
  v485 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v486, (__int128 *)v539, v544, v484);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v484, &v533);
  v199 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v202 = ((uint64_t)v199 - *a1) >> 3;
    if ((unint64_t)(v202 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v203 = *v6 - *a1;
    v204 = v203 >> 2;
    if (v203 >> 2 <= (unint64_t)(v202 + 1))
      v204 = v202 + 1;
    if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF8)
      v205 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v205 = v204;
    v538 = a1 + 2;
    if (v205)
      v206 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v205);
    else
      v206 = 0;
    v207 = (uint64_t *)&v206[v202];
    v534 = (std::string **)v206;
    v535 = v207;
    v537 = &v206[v205];
    v208 = v533;
    v533 = 0;
    *v207 = v208;
    v536 = v207 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v201 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v200 = v533;
    v533 = 0;
    *v199 = v200;
    v201 = v199 + 1;
    *v4 = v201;
  }
  *v4 = v201;
  v209 = v533;
  v533 = 0;
  if (v209)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v209);
  v534 = &v484;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (i1 = 0; i1 != -96; i1 -= 48)
  {
    v211 = &v539[i1 / 8];
    if (SHIBYTE(v543[i1 / 0x10 + 2]) < 0)
      operator delete(v211[9]);
    if (*((char *)v211 + 71) < 0)
      operator delete(v211[6]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-bizname");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[24],0>(v539, "LBNTAG", "LOCALSEARCHBUSINESSNAME");
  v481 = 0;
  v482 = 0;
  v483 = 0;
  v534 = &v481;
  LOBYTE(v535) = 0;
  v481 = (std::string *)operator new(0x30uLL);
  v482 = v481;
  v483 = v481 + 2;
  v482 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v483, (__int128 *)v539, v543, v481);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v481, &v533);
  v212 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v215 = ((uint64_t)v212 - *a1) >> 3;
    if ((unint64_t)(v215 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v216 = *v6 - *a1;
    v217 = v216 >> 2;
    if (v216 >> 2 <= (unint64_t)(v215 + 1))
      v217 = v215 + 1;
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
      v218 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v218 = v217;
    v538 = a1 + 2;
    if (v218)
      v219 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v218);
    else
      v219 = 0;
    v220 = (uint64_t *)&v219[v215];
    v534 = (std::string **)v219;
    v535 = v220;
    v537 = &v219[v218];
    v221 = v533;
    v533 = 0;
    *v220 = v221;
    v536 = v220 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v214 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v213 = v533;
    v533 = 0;
    *v212 = v213;
    v214 = v212 + 1;
    *v4 = v214;
  }
  *v4 = v214;
  v222 = v533;
  v533 = 0;
  if (v222)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v222);
  v534 = &v481;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\CS-movieName");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v539, "CLASSMOVIETAG", "CLASSMOVIENAME");
  v478 = 0;
  v479 = 0;
  v480 = 0;
  v534 = &v478;
  LOBYTE(v535) = 0;
  v478 = (std::string *)operator new(0x30uLL);
  v479 = v478;
  v480 = v478 + 2;
  v479 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v480, (__int128 *)v539, v543, v478);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v478, &v533);
  v223 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v226 = ((uint64_t)v223 - *a1) >> 3;
    if ((unint64_t)(v226 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v227 = *v6 - *a1;
    v228 = v227 >> 2;
    if (v227 >> 2 <= (unint64_t)(v226 + 1))
      v228 = v226 + 1;
    if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8)
      v229 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v229 = v228;
    v538 = a1 + 2;
    if (v229)
      v230 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v229);
    else
      v230 = 0;
    v231 = (uint64_t *)&v230[v226];
    v534 = (std::string **)v230;
    v535 = v231;
    v537 = &v230[v229];
    v232 = v533;
    v533 = 0;
    *v231 = v232;
    v536 = v231 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v225 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v224 = v533;
    v533 = 0;
    *v223 = v224;
    v225 = v223 + 1;
    *v4 = v225;
  }
  *v4 = v225;
  v233 = v533;
  v533 = 0;
  if (v233)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v233);
  v534 = &v478;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\CS-GeoBizName");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v539, "CLASSGEOBIZTAG", "CLASSGEOBIZNAME");
  v475 = 0;
  v476 = 0;
  v477 = 0;
  v534 = &v475;
  LOBYTE(v535) = 0;
  v475 = (std::string *)operator new(0x30uLL);
  v476 = v475;
  v477 = v475 + 2;
  v476 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v477, (__int128 *)v539, v543, v475);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v475, &v533);
  v234 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v237 = ((uint64_t)v234 - *a1) >> 3;
    if ((unint64_t)(v237 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v238 = *v6 - *a1;
    v239 = v238 >> 2;
    if (v238 >> 2 <= (unint64_t)(v237 + 1))
      v239 = v237 + 1;
    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
      v240 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v240 = v239;
    v538 = a1 + 2;
    if (v240)
      v241 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v240);
    else
      v241 = 0;
    v242 = (uint64_t *)&v241[v237];
    v534 = (std::string **)v241;
    v535 = v242;
    v537 = &v241[v240];
    v243 = v533;
    v533 = 0;
    *v242 = v243;
    v536 = v242 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v236 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v235 = v533;
    v533 = 0;
    *v234 = v235;
    v236 = v234 + 1;
    *v4 = v236;
  }
  *v4 = v236;
  v244 = v533;
  v533 = 0;
  if (v244)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v244);
  v534 = &v475;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\CS-streetName");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v539, "CLASSSTREETTAG", "CLASSSTREETNAME");
  v472 = 0;
  v473 = 0;
  v474 = 0;
  v534 = &v472;
  LOBYTE(v535) = 0;
  v472 = (std::string *)operator new(0x30uLL);
  v473 = v472;
  v474 = v472 + 2;
  v473 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v474, (__int128 *)v539, v543, v472);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v472, &v533);
  v245 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v248 = ((uint64_t)v245 - *a1) >> 3;
    if ((unint64_t)(v248 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v249 = *v6 - *a1;
    v250 = v249 >> 2;
    if (v249 >> 2 <= (unint64_t)(v248 + 1))
      v250 = v248 + 1;
    if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8)
      v251 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v251 = v250;
    v538 = a1 + 2;
    if (v251)
      v252 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v251);
    else
      v252 = 0;
    v253 = (uint64_t *)&v252[v248];
    v534 = (std::string **)v252;
    v535 = v253;
    v537 = &v252[v251];
    v254 = v533;
    v533 = 0;
    *v253 = v254;
    v536 = v253 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v247 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v246 = v533;
    v533 = 0;
    *v245 = v246;
    v247 = v245 + 1;
    *v4 = v247;
  }
  *v4 = v247;
  v255 = v533;
  v533 = 0;
  if (v255)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v255);
  v534 = &v472;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-buzz");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v539, "\\buzz-first", "BUZZNAMELME");
  v469 = 0;
  v470 = 0;
  v471 = 0;
  v534 = &v469;
  LOBYTE(v535) = 0;
  v469 = (std::string *)operator new(0x30uLL);
  v470 = v469;
  v471 = v469 + 2;
  v470 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v471, (__int128 *)v539, v543, v469);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v469, &v533);
  v256 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v259 = ((uint64_t)v256 - *a1) >> 3;
    if ((unint64_t)(v259 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v260 = *v6 - *a1;
    v261 = v260 >> 2;
    if (v260 >> 2 <= (unint64_t)(v259 + 1))
      v261 = v259 + 1;
    if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8)
      v262 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v262 = v261;
    v538 = a1 + 2;
    if (v262)
      v263 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v262);
    else
      v263 = 0;
    v264 = (uint64_t *)&v263[v259];
    v534 = (std::string **)v263;
    v535 = v264;
    v537 = &v263[v262];
    v265 = v533;
    v533 = 0;
    *v264 = v265;
    v536 = v264 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v258 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v257 = v533;
    v533 = 0;
    *v256 = v257;
    v258 = v256 + 1;
    *v4 = v258;
  }
  *v4 = v258;
  v266 = v533;
  v533 = 0;
  if (v266)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v266);
  v534 = &v469;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-playlist");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[20],0>(v539, "\\appAudiobookTitle-first", "APPAUDIOBOOKNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[19],0>(v543, "\\appPlaylistTitle-first", "APPPLAYLISTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v544, "\\appShowTitle-first", "APPSHOWTITLENAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[16],0>(v545, "\\custom_words-first", "PLAYLISTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v546, "\\playlist-first", "PLAYLISTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v547, "\\podcastTitle-first", "PODCASTTITLENAMELME");
  v466 = 0;
  v467 = 0;
  v468 = 0;
  v534 = &v466;
  LOBYTE(v535) = 0;
  v466 = (std::string *)operator new(0x120uLL);
  v467 = v466;
  v468 = v466 + 12;
  v467 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v468, (__int128 *)v539, v548, v466);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v466, &v533);
  v267 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v270 = ((uint64_t)v267 - *a1) >> 3;
    if ((unint64_t)(v270 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v271 = *v6 - *a1;
    v272 = v271 >> 2;
    if (v271 >> 2 <= (unint64_t)(v270 + 1))
      v272 = v270 + 1;
    if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8)
      v273 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v273 = v272;
    v538 = a1 + 2;
    if (v273)
      v274 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v273);
    else
      v274 = 0;
    v275 = (uint64_t *)&v274[v270];
    v534 = (std::string **)v274;
    v535 = v275;
    v537 = &v274[v273];
    v276 = v533;
    v533 = 0;
    *v275 = v276;
    v536 = v275 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v269 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v268 = v533;
    v533 = 0;
    *v267 = v268;
    v269 = v267 + 1;
    *v4 = v269;
  }
  *v4 = v269;
  v277 = v533;
  v533 = 0;
  if (v277)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v277);
  v534 = &v466;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  v278 = 36;
  do
  {
    v279 = &v539[v278];
    if (SHIBYTE(v539[v278 - 1]) < 0)
      operator delete(*(v279 - 3));
    if (*((char *)v279 - 25) < 0)
      operator delete(*(v279 - 6));
    v278 -= 6;
  }
  while (v278 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-correction");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v539, "\\correction-first", "CORRECTIONNAMELME");
  v463 = 0;
  v464 = 0;
  v465 = 0;
  v534 = &v463;
  LOBYTE(v535) = 0;
  v463 = (std::string *)operator new(0x30uLL);
  v464 = v463;
  v465 = v463 + 2;
  v464 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v465, (__int128 *)v539, v543, v463);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v463, &v533);
  v280 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v283 = ((uint64_t)v280 - *a1) >> 3;
    if ((unint64_t)(v283 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v284 = *v6 - *a1;
    v285 = v284 >> 2;
    if (v284 >> 2 <= (unint64_t)(v283 + 1))
      v285 = v283 + 1;
    if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8)
      v286 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v286 = v285;
    v538 = a1 + 2;
    if (v286)
      v287 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v286);
    else
      v287 = 0;
    v288 = (uint64_t *)&v287[v283];
    v534 = (std::string **)v287;
    v535 = v288;
    v537 = &v287[v286];
    v289 = v533;
    v533 = 0;
    *v288 = v289;
    v536 = v288 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v282 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v281 = v533;
    v533 = 0;
    *v280 = v281;
    v282 = v280 + 1;
    *v4 = v282;
  }
  *v4 = v282;
  v290 = v533;
  v533 = 0;
  if (v290)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v290);
  v534 = &v463;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-artist");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[17],0>(v539, "\\appMusicArtistName-first", "APPARTISTNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v543, "\\artist-first", "ARTISTNAMELME");
  v460 = 0;
  v461 = 0;
  v462 = 0;
  v534 = &v460;
  LOBYTE(v535) = 0;
  v460 = (std::string *)operator new(0x60uLL);
  v461 = v460;
  v462 = v460 + 4;
  v461 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v462, (__int128 *)v539, v544, v460);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v460, &v533);
  v291 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v294 = ((uint64_t)v291 - *a1) >> 3;
    if ((unint64_t)(v294 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v295 = *v6 - *a1;
    v296 = v295 >> 2;
    if (v295 >> 2 <= (unint64_t)(v294 + 1))
      v296 = v294 + 1;
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
      v297 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v297 = v296;
    v538 = a1 + 2;
    if (v297)
      v298 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v297);
    else
      v298 = 0;
    v299 = (uint64_t *)&v298[v294];
    v534 = (std::string **)v298;
    v535 = v299;
    v537 = &v298[v297];
    v300 = v533;
    v533 = 0;
    *v299 = v300;
    v536 = v299 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v293 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v292 = v533;
    v533 = 0;
    *v291 = v292;
    v293 = v291 + 1;
    *v4 = v293;
  }
  *v4 = v293;
  v301 = v533;
  v533 = 0;
  if (v301)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v301);
  v534 = &v460;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (i2 = 0; i2 != -96; i2 -= 48)
  {
    v303 = &v539[i2 / 8];
    if (SHIBYTE(v543[i2 / 0x10 + 2]) < 0)
      operator delete(v303[9]);
    if (*((char *)v303 + 71) < 0)
      operator delete(v303[6]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-notetitle");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[17],0>(v539, "\\notebookTargetTitle-first", "NOTETITLENAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[17],0>(v543, "\\notebookTitle-first", "NOTETITLENAMELME");
  v457 = 0;
  v458 = 0;
  v459 = 0;
  v534 = &v457;
  LOBYTE(v535) = 0;
  v457 = (std::string *)operator new(0x60uLL);
  v458 = v457;
  v459 = v457 + 4;
  v458 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v459, (__int128 *)v539, v544, v457);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v457, &v533);
  v304 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v307 = ((uint64_t)v304 - *a1) >> 3;
    if ((unint64_t)(v307 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v308 = *v6 - *a1;
    v309 = v308 >> 2;
    if (v308 >> 2 <= (unint64_t)(v307 + 1))
      v309 = v307 + 1;
    if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFF8)
      v310 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v310 = v309;
    v538 = a1 + 2;
    if (v310)
      v311 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v310);
    else
      v311 = 0;
    v312 = (uint64_t *)&v311[v307];
    v534 = (std::string **)v311;
    v535 = v312;
    v537 = &v311[v310];
    v313 = v533;
    v533 = 0;
    *v312 = v313;
    v536 = v312 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v306 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v305 = v533;
    v533 = 0;
    *v304 = v305;
    v306 = v304 + 1;
    *v4 = v306;
  }
  *v4 = v306;
  v314 = v533;
  v533 = 0;
  if (v314)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v314);
  v534 = &v457;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  for (i3 = 0; i3 != -96; i3 -= 48)
  {
    v316 = &v539[i3 / 8];
    if (SHIBYTE(v543[i3 / 0x10 + 2]) < 0)
      operator delete(v316[9]);
    if (*((char *)v316 + 71) < 0)
      operator delete(v316[6]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-notefolder");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[18],0>(v539, "\\notebookFolderTitle-first", "NOTEFOLDERNAMELME");
  v454 = 0;
  v455 = 0;
  v456 = 0;
  v534 = &v454;
  LOBYTE(v535) = 0;
  v454 = (std::string *)operator new(0x30uLL);
  v455 = v454;
  v456 = v454 + 2;
  v455 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v456, (__int128 *)v539, v543, v454);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v454, &v533);
  v317 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v320 = ((uint64_t)v317 - *a1) >> 3;
    if ((unint64_t)(v320 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v321 = *v6 - *a1;
    v322 = v321 >> 2;
    if (v321 >> 2 <= (unint64_t)(v320 + 1))
      v322 = v320 + 1;
    if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFF8)
      v323 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v323 = v322;
    v538 = a1 + 2;
    if (v323)
      v324 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v323);
    else
      v324 = 0;
    v325 = (uint64_t *)&v324[v320];
    v534 = (std::string **)v324;
    v535 = v325;
    v537 = &v324[v323];
    v326 = v533;
    v533 = 0;
    *v325 = v326;
    v536 = v325 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v319 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v318 = v533;
    v533 = 0;
    *v317 = v318;
    v319 = v317 + 1;
    *v4 = v319;
  }
  *v4 = v319;
  v327 = v533;
  v533 = 0;
  if (v327)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v327);
  v534 = &v454;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-entity");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v539, "\\entity-first", "ENTITYNAMELME");
  v451 = 0;
  v452 = 0;
  v453 = 0;
  v534 = &v451;
  LOBYTE(v535) = 0;
  v451 = (std::string *)operator new(0x30uLL);
  v452 = v451;
  v453 = v451 + 2;
  v452 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v453, (__int128 *)v539, v543, v451);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v451, &v533);
  v328 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v331 = ((uint64_t)v328 - *a1) >> 3;
    if ((unint64_t)(v331 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v332 = *v6 - *a1;
    v333 = v332 >> 2;
    if (v332 >> 2 <= (unint64_t)(v331 + 1))
      v333 = v331 + 1;
    if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFF8)
      v334 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v334 = v333;
    v538 = a1 + 2;
    if (v334)
      v335 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v334);
    else
      v335 = 0;
    v336 = (uint64_t *)&v335[v331];
    v534 = (std::string **)v335;
    v535 = v336;
    v537 = &v335[v334];
    v337 = v533;
    v533 = 0;
    *v336 = v337;
    v536 = v336 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v330 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v329 = v533;
    v533 = 0;
    *v328 = v329;
    v330 = v328 + 1;
    *v4 = v330;
  }
  *v4 = v330;
  v338 = v533;
  v533 = 0;
  if (v338)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v338);
  v534 = &v451;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-location");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v539, "\\location-first", "LOCATIONNAMELME");
  v448 = 0;
  v449 = 0;
  v450 = 0;
  v534 = &v448;
  LOBYTE(v535) = 0;
  v448 = (std::string *)operator new(0x30uLL);
  v449 = v448;
  v450 = v448 + 2;
  v449 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v450, (__int128 *)v539, v543, v448);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v448, &v533);
  v339 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v342 = ((uint64_t)v339 - *a1) >> 3;
    if ((unint64_t)(v342 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v343 = *v6 - *a1;
    v344 = v343 >> 2;
    if (v343 >> 2 <= (unint64_t)(v342 + 1))
      v344 = v342 + 1;
    if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFF8)
      v345 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v345 = v344;
    v538 = a1 + 2;
    if (v345)
      v346 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v345);
    else
      v346 = 0;
    v347 = (uint64_t *)&v346[v342];
    v534 = (std::string **)v346;
    v535 = v347;
    v537 = &v346[v345];
    v348 = v533;
    v533 = 0;
    *v347 = v348;
    v536 = v347 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v341 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v340 = v533;
    v533 = 0;
    *v339 = v340;
    v341 = v339 + 1;
    *v4 = v341;
  }
  *v4 = v341;
  v349 = v533;
  v533 = 0;
  if (v349)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v349);
  v534 = &v448;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-calevent");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v539, "\\calevent-first", "CALEVENTNAMELME");
  v445 = 0;
  v446 = 0;
  v447 = 0;
  v534 = &v445;
  LOBYTE(v535) = 0;
  v445 = (std::string *)operator new(0x30uLL);
  v446 = v445;
  v447 = v445 + 2;
  v446 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v447, (__int128 *)v539, v543, v445);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v445, &v533);
  v350 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v353 = ((uint64_t)v350 - *a1) >> 3;
    if ((unint64_t)(v353 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v354 = *v6 - *a1;
    v355 = v354 >> 2;
    if (v354 >> 2 <= (unint64_t)(v353 + 1))
      v355 = v353 + 1;
    if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFF8)
      v356 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v356 = v355;
    v538 = a1 + 2;
    if (v356)
      v357 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v356);
    else
      v357 = 0;
    v358 = (uint64_t *)&v357[v353];
    v534 = (std::string **)v357;
    v535 = v358;
    v537 = &v357[v356];
    v359 = v533;
    v533 = 0;
    *v358 = v359;
    v536 = v358 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v352 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v351 = v533;
    v533 = 0;
    *v350 = v351;
    v352 = v350 + 1;
    *v4 = v352;
  }
  *v4 = v352;
  v360 = v533;
  v533 = 0;
  if (v360)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v360);
  v534 = &v445;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-searchterm");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v539, "\\searchterm-first", "SEARCHTERMNAMELME");
  v442 = 0;
  v443 = 0;
  v444 = 0;
  v534 = &v442;
  LOBYTE(v535) = 0;
  v442 = (std::string *)operator new(0x30uLL);
  v443 = v442;
  v444 = v442 + 2;
  v443 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v444, (__int128 *)v539, v543, v442);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v442, &v533);
  v361 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v364 = ((uint64_t)v361 - *a1) >> 3;
    if ((unint64_t)(v364 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v365 = *v6 - *a1;
    v366 = v365 >> 2;
    if (v365 >> 2 <= (unint64_t)(v364 + 1))
      v366 = v364 + 1;
    if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
      v367 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v367 = v366;
    v538 = a1 + 2;
    if (v367)
      v368 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v367);
    else
      v368 = 0;
    v369 = (uint64_t *)&v368[v364];
    v534 = (std::string **)v368;
    v535 = v369;
    v537 = &v368[v367];
    v370 = v533;
    v533 = 0;
    *v369 = v370;
    v536 = v369 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v363 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v362 = v533;
    v533 = 0;
    *v361 = v362;
    v363 = v361 + 1;
    *v4 = v363;
  }
  *v4 = v363;
  v371 = v533;
  v533 = 0;
  if (v371)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v371);
  v534 = &v442;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-action");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[14],0>(v539, "\\voiceCommandName-first", "ACTIONNAMELME");
  v439 = 0;
  v440 = 0;
  v441 = 0;
  v534 = &v439;
  LOBYTE(v535) = 0;
  v439 = (std::string *)operator new(0x30uLL);
  v440 = v439;
  v441 = v439 + 2;
  v440 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v441, (__int128 *)v539, v543, v439);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v439, &v533);
  v372 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v375 = ((uint64_t)v372 - *a1) >> 3;
    if ((unint64_t)(v375 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v376 = *v6 - *a1;
    v377 = v376 >> 2;
    if (v376 >> 2 <= (unint64_t)(v375 + 1))
      v377 = v375 + 1;
    if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
      v378 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v378 = v377;
    v538 = a1 + 2;
    if (v378)
      v379 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v378);
    else
      v379 = 0;
    v380 = (uint64_t *)&v379[v375];
    v534 = (std::string **)v379;
    v535 = v380;
    v537 = &v379[v378];
    v381 = v533;
    v533 = 0;
    *v380 = v381;
    v536 = v380 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v374 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v373 = v533;
    v533 = 0;
    *v372 = v373;
    v374 = v372 + 1;
    *v4 = v374;
  }
  *v4 = v374;
  v382 = v533;
  v533 = 0;
  if (v382)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v382);
  v534 = &v439;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-widget");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v539, "\\widget-first", "UIWIDGETNAMELME");
  v436 = 0;
  v437 = 0;
  v438 = 0;
  v534 = &v436;
  LOBYTE(v535) = 0;
  v436 = (std::string *)operator new(0x30uLL);
  v437 = v436;
  v438 = v436 + 2;
  v437 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v438, (__int128 *)v539, v543, v436);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v436, &v533);
  v383 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v386 = ((uint64_t)v383 - *a1) >> 3;
    if ((unint64_t)(v386 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v387 = *v6 - *a1;
    v388 = v387 >> 2;
    if (v387 >> 2 <= (unint64_t)(v386 + 1))
      v388 = v386 + 1;
    if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFF8)
      v389 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v389 = v388;
    v538 = a1 + 2;
    if (v389)
      v390 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v389);
    else
      v390 = 0;
    v391 = (uint64_t *)&v390[v386];
    v534 = (std::string **)v390;
    v535 = v391;
    v537 = &v390[v389];
    v392 = v533;
    v533 = 0;
    *v391 = v392;
    v536 = v391 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v385 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v384 = v533;
    v533 = 0;
    *v383 = v384;
    v385 = v383 + 1;
    *v4 = v385;
  }
  *v4 = v385;
  v393 = v533;
  v533 = 0;
  if (v393)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v393);
  v534 = &v436;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-appunknown");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v539, "\\appunknown-first", "APPUNKNOWNNAMELME");
  v433 = 0;
  v434 = 0;
  v435 = 0;
  v534 = &v433;
  LOBYTE(v535) = 0;
  v433 = (std::string *)operator new(0x30uLL);
  v434 = v433;
  v435 = v433 + 2;
  v434 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v435, (__int128 *)v539, v543, v433);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v433, &v533);
  v394 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v397 = ((uint64_t)v394 - *a1) >> 3;
    if ((unint64_t)(v397 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v398 = *v6 - *a1;
    v399 = v398 >> 2;
    if (v398 >> 2 <= (unint64_t)(v397 + 1))
      v399 = v397 + 1;
    if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFF8)
      v400 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v400 = v399;
    v538 = a1 + 2;
    if (v400)
      v401 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v400);
    else
      v401 = 0;
    v402 = (uint64_t *)&v401[v397];
    v534 = (std::string **)v401;
    v535 = v402;
    v537 = &v401[v400];
    v403 = v533;
    v533 = 0;
    *v402 = v403;
    v536 = v402 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v396 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v395 = v533;
    v533 = 0;
    *v394 = v395;
    v396 = v394 + 1;
    *v4 = v396;
  }
  *v4 = v396;
  v404 = v533;
  v533 = 0;
  if (v404)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v404);
  v534 = &v433;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\CS-spell");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v539, "CLASSSPELLTAG", "CLASSSPELLNAME");
  v430 = 0;
  v431 = 0;
  v432 = 0;
  v534 = &v430;
  LOBYTE(v535) = 0;
  v430 = (std::string *)operator new(0x30uLL);
  v431 = v430;
  v432 = v430 + 2;
  v431 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v432, (__int128 *)v539, v543, v430);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v430, &v533);
  v405 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v408 = ((uint64_t)v405 - *a1) >> 3;
    if ((unint64_t)(v408 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v409 = *v6 - *a1;
    v410 = v409 >> 2;
    if (v409 >> 2 <= (unint64_t)(v408 + 1))
      v410 = v408 + 1;
    if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF8)
      v411 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v411 = v410;
    v538 = a1 + 2;
    if (v411)
      v412 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v411);
    else
      v412 = 0;
    v413 = (uint64_t *)&v412[v408];
    v534 = (std::string **)v412;
    v535 = v413;
    v537 = &v412[v411];
    v414 = v533;
    v533 = 0;
    *v413 = v414;
    v536 = v413 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v407 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v406 = v533;
    v533 = 0;
    *v405 = v406;
    v407 = v405 + 1;
    *v4 = v407;
  }
  *v4 = v407;
  v415 = v533;
  v533 = 0;
  if (v415)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v415);
  v534 = &v430;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "\\NT-edit");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v539, "\\edit-first", "EDITNAMELME");
  v427 = 0;
  v428 = 0;
  v429 = 0;
  v534 = &v427;
  LOBYTE(v535) = 0;
  v427 = (std::string *)operator new(0x30uLL);
  v428 = v427;
  v429 = v427 + 2;
  v428 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v429, (__int128 *)v539, v543, v427);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT(&__p, (const std::string **)&v427, &v533);
  v416 = *v4;
  if ((unint64_t)*v4 >= *v6)
  {
    v419 = ((uint64_t)v416 - *a1) >> 3;
    if ((unint64_t)(v419 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v420 = *v6 - *a1;
    v421 = v420 >> 2;
    if (v420 >> 2 <= (unint64_t)(v419 + 1))
      v421 = v419 + 1;
    if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFF8)
      v422 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v422 = v421;
    v538 = a1 + 2;
    if (v422)
      v423 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v422);
    else
      v423 = 0;
    v424 = (uint64_t *)&v423[v419];
    v534 = (std::string **)v423;
    v535 = v424;
    v537 = &v423[v422];
    v425 = v533;
    v533 = 0;
    *v424 = v425;
    v536 = v424 + 1;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, &v534);
    v418 = *v4;
    std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&v534);
  }
  else
  {
    v417 = v533;
    v533 = 0;
    *v416 = v417;
    v418 = v416 + 1;
    *v4 = v418;
  }
  *v4 = v418;
  v426 = v533;
  v533 = 0;
  if (v426)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&v533, v426);
  v534 = &v427;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v534);
  if (v542 < 0)
    operator delete(v541);
  if (v540 < 0)
    operator delete(v539[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADDD7A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v11;

  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&STACK[0x368]);
  v11 = STACK[0x360];
  STACK[0x360] = 0;
  if (v11)
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&STACK[0x360], v11);
  STACK[0x390] = (unint64_t)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x390]);
  std::pair<std::string,std::string>::~pair((uint64_t)&STACK[0x398]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  STACK[0x398] = v9;
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x398]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADDD8B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::tennessee::lm::ExtractPreItnPersonalizationTags@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const void ***v5;
  const void ***v6;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *result;
  v4 = result[1];
  while (v3 != v4)
  {
    v5 = *(const void ****)(*(_QWORD *)v3 + 24);
    v6 = *(const void ****)(*(_QWORD *)v3 + 32);
    while (v5 != v6)
      result = quasar::tennessee::InsertOrDie<std::set<std::string>>((uint64_t **)a2, *v5++);
    v3 += 8;
  }
  return result;
}

void sub_1ADDD8BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *quasar::tennessee::InsertOrDie<std::set<std::string>>(uint64_t **a1, const void **a2)
{
  uint64_t *result;
  char v4;
  _QWORD *v5;
  _OWORD v6[17];

  result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
  if ((v4 & 1) == 0)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"duplicate element ", 18);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a2);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8C90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8D30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8D80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8E20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8E70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8EC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8F60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD8FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9000(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9050(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD90A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD90F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9140(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9190(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD91E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9230(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9280(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD92D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9320(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9370(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD93C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9410(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9460(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD94B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9500(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9550(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD95A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD95F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9640(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9690(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD96E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9730(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9780(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD97D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9820(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9870(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD98C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9910(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9960(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[24],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD99B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9A00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9A50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9AA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9AF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9B40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9B90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9BE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9C80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADDD9CD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(uint64_t **)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        result = std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100](i - 8, v5);
  }
}

uint64_t std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 24);
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    return MEMORY[0x1AF44D190](a2, 0x1032C402D514303);
  }
  return result;
}

void std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      result = std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      result = v2 - 8;
      *(_QWORD *)(v4 + 16) = v2 - 8;
      v5 = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (v5)
        result = std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100](result, v5);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void quasar::MovingAverage::init(quasar::MovingAverage *this, uint64_t a2)
{
  _OWORD v2[17];

  if (!a2)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "n must be positive");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  *(_QWORD *)this = a2;
  quasar::MovingAverage::clear(this);
}

void quasar::MovingAverage::clear(quasar::MovingAverage *this)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_DWORD *)this + 2) = 0;
  v2 = (void **)*((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 7) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *((_QWORD *)this + 4);
      v2 = (void **)(*((_QWORD *)this + 3) + 8);
      *((_QWORD *)this + 3) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 1024;
  }
  *((_QWORD *)this + 6) = v6;
}

void quasar::MovingAverage::add(quasar::MovingAverage *this, float a2)
{
  char *v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD v7[17];
  float v8;

  v8 = a2;
  if (!*(_QWORD *)this)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "init() was not called");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  v3 = (char *)this + 16;
  std::deque<float>::push_back((_QWORD *)this + 2, &v8);
  v4 = v8 + *((float *)this + 2);
  *((float *)this + 2) = v4;
  v5 = *((_QWORD *)this + 7);
  if (v5 > *(_QWORD *)this)
  {
    v6 = *((_QWORD *)this + 6);
    *((float *)this + 2) = v4
                         - *(float *)(*(_QWORD *)(*((_QWORD *)this + 3) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v6 & 0x3FF));
    *((_QWORD *)this + 6) = v6 + 1;
    *((_QWORD *)this + 7) = v5 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v3, 1);
  }
}

float std::deque<float>::push_back(_QWORD *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<float>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(float *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

BOOL quasar::MovingAverage::full(quasar::MovingAverage *this)
{
  return *((_QWORD *)this + 7) == *(_QWORD *)this;
}

float quasar::MovingAverage::getAverage(quasar::MovingAverage *this)
{
  unint64_t v1;
  _OWORD v3[17];

  v1 = *((_QWORD *)this + 7);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Cannot compute average of 0 items");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return *((float *)this + 2) / (float)v1;
}

uint64_t quasar::MovingAverage::getCount(quasar::MovingAverage *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t quasar::MovingAverage::resize(uint64_t this, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD v7[17];

  if (!a2)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "n must be positive for resize");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  v3 = this;
  v4 = *(_QWORD *)(this + 56);
  if (v4 > a2)
  {
    v5 = a2;
    do
    {
      v6 = *(_QWORD *)(v3 + 48);
      *(float *)(v3 + 8) = *(float *)(v3 + 8)
                         - *(float *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v6 & 0x3FF));
      *(_QWORD *)(v3 + 48) = v6 + 1;
      *(_QWORD *)(v3 + 56) = v4 - 1;
      this = std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3 + 16, 1);
      ++v5;
      v4 = *(_QWORD *)(v3 + 56);
    }
    while (v5 < v4);
  }
  *(_QWORD *)v3 = a2;
  return this;
}

void std::deque<float>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADDDA9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1ADDDAB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  uint64_t v19;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v19, 0x10B2C405945ECF2);

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::SystemConfig,char const*>(char **a1@<X0>, quasar::SystemConfig **a2@<X8>)
{
  quasar::SystemConfig *v4;
  _OWORD v5[2];
  int v6;
  uint64_t v7[3];
  void *v8[2];
  char v9;

  v4 = (quasar::SystemConfig *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v8, *a1);
  memset(v7, 0, sizeof(v7));
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  quasar::SystemConfig::SystemConfig(v4, (uint64_t)v8, v7, (uint64_t)v5);
  *a2 = v4;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  *(_QWORD *)&v5[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1ADDDAC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v10 - 33) < 0)
    operator delete(*(void **)(v10 - 56));
  MEMORY[0x1AF44D190](v9, 0x10B3C4039F8198BLL);
  _Unwind_Resume(a1);
}

void sub_1ADDDAD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1ADDDB274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  uint64_t v39;
  uint64_t v41;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a14);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a24);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  v41 = *(_QWORD *)(v39 - 144);
  *(_QWORD *)(v39 - 144) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);

  _Unwind_Resume(a1);
}

BOOL sdapi::SdapiITNImpl::fetchHeadClone(sdapi::SdapiITNImpl *this, const char *a2, char *a3)
{
  std::recursive_mutex *SharedMutex;
  _BOOL8 v4;
  _OWORD v6[17];

  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  if (TPLexicon_GetInfo())
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Failed TPLexicon_GetInfo()", 26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  LODWORD(v6[0]) = 0;
  v4 = TPLexicon_GetHeadClone() == 0;
  std::recursive_mutex::unlock(SharedMutex);
  return v4;
}

void sub_1ADDDB818(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiITNImpl::formatWords(sdapi::SdapiUtil *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::QsrText *v5;
  uint64_t v6;
  quasar::Token *v7;
  int v8;
  uint64_t v9;
  const char *v10;
  __int128 v11;
  BOOL v12;
  std::string::size_type size;
  std::string::size_type v14;
  int v15;
  int v16;
  std::string *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  std::string *v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char v46;
  char *v47;
  char *v48;
  char *v49;
  char v50;
  std::string::size_type v51;
  int *v52;
  int *v53;
  int *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  int *v60;
  int v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  size_t v80;
  void *v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  char *v85;
  char v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  BOOL v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  int v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  int v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  int *v129;
  int v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  float *v148;
  float v149;
  int v150;
  uint64_t v151;
  int v152;
  char *v153;
  int v154;
  int v155;
  unint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  int v165;
  std::recursive_mutex *SharedMutex;
  void *v167;
  uint64_t v168;
  uint64_t *v169;
  int v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  void *v175[2];
  char v176;
  __int128 *v177[3];
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  std::string v182;
  _DWORD v183[2];
  std::string v184;
  void *v185;
  char v186;
  uint64_t v187;
  void *v188;
  char v189;
  uint64_t v190;
  void *v191;
  char v192;
  void *v193;
  char v194;
  void *v195;
  char *v196;
  char *v197;
  void *v198;
  char *v199;
  char *v200;
  std::vector<unsigned int> v201;
  std::vector<unsigned int> v202;
  unsigned int __dst;
  std::string __dst_4;
  std::vector<char> v205;
  std::vector<char>::size_type __n;
  uint64_t v207;
  uint64_t v208;
  void *__p;
  int *v210;
  int *v211;
  void *v212;
  char *v213;
  char *v214;
  quasar::Token *v215;
  quasar::Token *v216;
  uint64_t v217;
  void **v218;
  std::string v219[2];
  void *v220[2];
  _QWORD v221[4];
  void *v222[2];
  _QWORD v223[4];
  void *v224[2];
  __int128 v225;
  void *v226[2];
  _OWORD v227[2];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(a1);
  std::recursive_mutex::lock(SharedMutex);
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_293;
  }
  v216 = 0;
  v215 = 0;
  v217 = 0;
  v6 = quasar::QsrText::SingletonInstance(v5);
  quasar::QsrText::qsrToHatTokens(v6, (__int128 **)a2, (uint64_t *)&v215, 1);
  v213 = 0;
  v212 = 0;
  v214 = 0;
  v210 = 0;
  __p = 0;
  v211 = 0;
  v7 = v215;
  if (v215 == v216)
    goto LABEL_116;
  v8 = 0;
  v173 = 0;
  v169 = a3;
  v9 = MEMORY[0x1E0C80978];
  do
  {
    if (quasar::Token::isPrintable(v7))
    {
      v10 = (const char *)v7;
      if (*((char *)v7 + 23) < 0)
        v10 = *(const char **)v7;
      if (sdapi::SdapiITNImpl::fetchHeadClone(a1, v10, (char *)v219))
      {
        std::string::basic_string[abi:ne180100]<0>(&v184, (char *)v219);
      }
      else if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v11 = *(_OWORD *)v7;
        v184.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v11;
      }
      v171 = v8;
      v12 = (v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = HIBYTE(v184.__r_.__value_.__r.__words[2]);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v184.__r_.__value_.__l.__size_;
      if (size)
      {
        v14 = 0;
        v15 = 0;
        v16 = 1;
        do
        {
          if (v12)
            v17 = (std::string *)v184.__r_.__value_.__r.__words[0];
          else
            v17 = &v184;
          v18 = v17->__r_.__value_.__s.__data_[v14];
          if (v18 == 94)
          {
            v19 = 0;
            v20 = 0;
            v21 = v15 + 2;
            v22 = v15 + 1;
            do
            {
              if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v23 = &v184;
              else
                v23 = (std::string *)v184.__r_.__value_.__r.__words[0];
              v24 = v23->__r_.__value_.__s.__data_[v22 + v19];
              if ((*(_DWORD *)(v9 + 4 * v24 + 60) & 0x400) != 0)
              {
                v26 = v24 - 48;
              }
              else
              {
                if ((v24 & 0x80) != 0)
                  v25 = __maskrune(v24, 0x1000uLL);
                else
                  v25 = *(_DWORD *)(v9 + 4 * v24 + 60) & 0x1000;
                if (v25)
                  LODWORD(v24) = __toupper(v24);
                v26 = v24 - 55;
              }
              v20 = v26 + 16 * v20;
              ++v19;
            }
            while (v19 != 2);
            v27 = v213;
            if (v213 >= v214)
            {
              v37 = (unint64_t)v212;
              v38 = v213 - (_BYTE *)v212;
              v39 = v213 - (_BYTE *)v212 + 1;
              if (v39 < 0)
LABEL_294:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v40 = v214 - (_BYTE *)v212;
              if (2 * (v214 - (_BYTE *)v212) > (unint64_t)v39)
                v39 = 2 * v40;
              if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
                v41 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
                v42 = (char *)operator new(v41);
              else
                v42 = 0;
              v47 = &v42[v38];
              v48 = &v42[v38];
              *v48 = v20;
              v28 = v48 + 1;
              if (v27 != (char *)v37)
              {
                v49 = &v27[~v37];
                do
                {
                  v50 = *--v27;
                  (v49--)[(_QWORD)v42] = v50;
                }
                while (v27 != (char *)v37);
                v27 = (char *)v212;
                v47 = v42;
              }
              v212 = v47;
              v213 = v28;
              v214 = &v42[v41];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *v213 = v20;
              v28 = v27 + 1;
            }
            v213 = v28;
            if (!v20)
              ++v16;
            v15 = v21;
          }
          else
          {
            v29 = v213;
            if (v213 >= v214)
            {
              v31 = (unint64_t)v212;
              v32 = v213 - (_BYTE *)v212;
              v33 = v213 - (_BYTE *)v212 + 1;
              if (v33 < 0)
                goto LABEL_294;
              v34 = v214 - (_BYTE *)v212;
              if (2 * (v214 - (_BYTE *)v212) > (unint64_t)v33)
                v33 = 2 * v34;
              if (v34 >= 0x3FFFFFFFFFFFFFFFLL)
                v35 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
                v36 = (char *)operator new(v35);
              else
                v36 = 0;
              v43 = &v36[v32];
              v44 = &v36[v32];
              *v44 = v18;
              v30 = v44 + 1;
              if (v29 != (char *)v31)
              {
                v45 = &v29[~v31];
                do
                {
                  v46 = *--v29;
                  (v45--)[(_QWORD)v36] = v46;
                }
                while (v29 != (char *)v31);
                v29 = (char *)v212;
                v43 = v36;
              }
              v212 = v43;
              v213 = v30;
              v214 = &v36[v35];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *v213 = v18;
              v30 = v29 + 1;
            }
            v213 = v30;
          }
          v14 = (v15 + 1);
          v12 = (v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          v51 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v51 = v184.__r_.__value_.__l.__size_;
          ++v15;
        }
        while (v51 > v14);
      }
      else
      {
        v16 = 1;
      }
      v52 = v210;
      if (v210 >= v211)
      {
        v54 = (int *)__p;
        v55 = ((char *)v210 - (_BYTE *)__p) >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v57 = (char *)v211 - (_BYTE *)__p;
        if (((char *)v211 - (_BYTE *)__p) >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v211, v58);
          v52 = v210;
          v54 = (int *)__p;
        }
        else
        {
          v59 = 0;
        }
        v60 = (int *)&v59[4 * v55];
        *v60 = v16;
        v53 = v60 + 1;
        while (v52 != v54)
        {
          v61 = *--v52;
          *--v60 = v61;
        }
        __p = v60;
        v210 = v53;
        v211 = (int *)&v59[4 * v58];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *v210 = v16;
        v53 = v52 + 1;
      }
      v210 = v53;
      v62 = v213;
      if (v213 >= v214)
      {
        v64 = (unint64_t)v212;
        v65 = v213 - (_BYTE *)v212;
        v66 = v213 - (_BYTE *)v212 + 1;
        if (v66 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v67 = v214 - (_BYTE *)v212;
        if (2 * (v214 - (_BYTE *)v212) > (unint64_t)v66)
          v66 = 2 * v67;
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL)
          v68 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
          v69 = (char *)operator new(v68);
        else
          v69 = 0;
        v70 = &v69[v65];
        v71 = &v69[v65];
        *v71 = 0;
        v63 = v71 + 1;
        if (v62 != (char *)v64)
        {
          v72 = &v62[~v64];
          do
          {
            v73 = *--v62;
            (v72--)[(_QWORD)v69] = v73;
          }
          while (v62 != (char *)v64);
          v62 = (char *)v212;
          v70 = v69;
        }
        v212 = v70;
        v213 = v63;
        v214 = &v69[v68];
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v213 = 0;
        v63 = v62 + 1;
      }
      v213 = v63;
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v184.__r_.__value_.__l.__data_);
      v8 = v16 + v171;
      ++v173;
    }
    v7 = (quasar::Token *)((char *)v7 + 224);
  }
  while (v7 != v216);
  a3 = v169;
  if (!v173)
  {
LABEL_116:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_288;
  }
  v74 = v213;
  if (v213 >= v214)
  {
    v76 = (unint64_t)v212;
    v77 = v213 - (_BYTE *)v212;
    v78 = v213 - (_BYTE *)v212 + 1;
    if (v78 < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v79 = v214 - (_BYTE *)v212;
    if (2 * (v214 - (_BYTE *)v212) > (unint64_t)v78)
      v78 = 2 * v79;
    if (v79 >= 0x3FFFFFFFFFFFFFFFLL)
      v80 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (v80)
      v81 = operator new(v80);
    else
      v81 = 0;
    v82 = (char *)v81 + v77;
    v83 = (char *)v81 + v80;
    v84 = (char *)v81 + v77;
    *v84 = 0;
    v75 = v84 + 1;
    if (v74 == (char *)v76)
    {
      v81 = v82;
    }
    else
    {
      v85 = &v74[~v76];
      do
      {
        v86 = *--v74;
        (v85--)[(_QWORD)v81] = v86;
      }
      while (v74 != (char *)v76);
      v74 = (char *)v212;
    }
    v212 = v81;
    v213 = v75;
    v214 = v83;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *v213 = 0;
    v75 = v74 + 1;
  }
  v213 = v75;
  v208 = 0;
  v207 = 0;
  if (TPItn_WordSequenceToResult())
  {
    v230 = 0u;
    v229 = 0u;
    v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not format word sequence: ", 32);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  LODWORD(__n) = 0;
  if (TPItn_GetResultText())
  {
    v230 = 0u;
    v229 = 0u;
    v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get text of word sequence", 35);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  std::vector<char>::vector(&v205, __n);
  if (TPItn_GetResultText())
  {
    v230 = 0u;
    v229 = 0u;
    v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get result", 20);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  std::string::basic_string[abi:ne180100](&__dst_4, v205.__begin_, (__n - 1));
  __dst = 0;
  if (TPItn_GetResultAlignment())
  {
    v230 = 0u;
    v229 = 0u;
    v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get result Alignment ", 31);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  std::vector<unsigned int>::vector(&v202, __dst);
  std::vector<unsigned int>::vector(&v201, __dst);
  if (TPItn_GetResultAlignment())
  {
    v230 = 0u;
    v229 = 0u;
    v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get result Alignment ", 31);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  v199 = 0;
  v198 = 0;
  v200 = 0;
  v196 = 0;
  v195 = 0;
  v197 = 0;
  v87 = __p;
  if (v210 == __p)
    goto LABEL_223;
  v88 = 0;
  v89 = 0;
  do
  {
    v90 = __dst;
    if (v89 >= __dst)
      goto LABEL_222;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = v87[v88];
    v168 = v89;
    v95 = (int)v89;
    v96 = (int)v89;
    while (1)
    {
      v97 = v201.__begin_[v96];
      v98 = v202.__begin_[v96];
      if (v97)
        v99 = 0;
      else
        v99 = v96 == v95;
      if (v99)
      {
        v100 = v199;
        if (v199 >= v200)
        {
          v102 = (char *)v198;
          v103 = (v199 - (_BYTE *)v198) >> 2;
          v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) >> 62)
            goto LABEL_295;
          v105 = v200 - (_BYTE *)v198;
          if ((v200 - (_BYTE *)v198) >> 1 > v104)
            v104 = v105 >> 1;
          if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
            v106 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v106 = v104;
          if (v106)
          {
            v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v106);
            v100 = v199;
            v102 = (char *)v198;
          }
          else
          {
            v107 = 0;
          }
          v108 = &v107[4 * v103];
          *(_DWORD *)v108 = 0;
          v101 = v108 + 4;
          while (v100 != v102)
          {
            v109 = *((_DWORD *)v100 - 1);
            v100 -= 4;
            *((_DWORD *)v108 - 1) = v109;
            v108 -= 4;
          }
          v198 = v108;
          v199 = v101;
          v200 = &v107[4 * v106];
          if (v102)
            operator delete(v102);
        }
        else
        {
          *(_DWORD *)v199 = 0;
          v101 = v100 + 4;
        }
        v199 = v101;
        v110 = v196;
        if (v196 >= v197)
        {
          v112 = (char *)v195;
          v113 = (v196 - (_BYTE *)v195) >> 2;
          v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62)
            goto LABEL_295;
          v115 = v197 - (_BYTE *)v195;
          if ((v197 - (_BYTE *)v195) >> 1 > v114)
            v114 = v115 >> 1;
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
            v116 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
          {
            v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v197, v116);
            v110 = v196;
            v112 = (char *)v195;
          }
          else
          {
            v117 = 0;
          }
          v118 = (unsigned int *)&v117[4 * v113];
          *v118 = v98;
          v111 = (char *)(v118 + 1);
          while (v110 != v112)
          {
            v119 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *--v118 = v119;
          }
          v195 = v118;
          v196 = v111;
          v197 = &v117[4 * v116];
          if (v112)
            operator delete(v112);
        }
        else
        {
          *(_DWORD *)v196 = v98;
          v111 = v110 + 4;
        }
        v196 = v111;
        v90 = __dst;
        goto LABEL_184;
      }
      v93 += v98;
      if (v97 > 0)
        ++v92;
      v91 += v97;
      if (v92 == v94)
        break;
LABEL_184:
      if (v90 <= ++v96)
      {
        v89 = v168;
        goto LABEL_222;
      }
    }
    if (v94 > 1)
      v120 = 1;
    else
      v120 = v91;
    v121 = v199;
    if (v199 >= v200)
    {
      v123 = (char *)v198;
      v124 = (v199 - (_BYTE *)v198) >> 2;
      v125 = v124 + 1;
      if ((unint64_t)(v124 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v126 = v200 - (_BYTE *)v198;
      if ((v200 - (_BYTE *)v198) >> 1 > v125)
        v125 = v126 >> 1;
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
        v127 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v127 = v125;
      if (v127)
      {
        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v127);
        v121 = v199;
        v123 = (char *)v198;
      }
      else
      {
        v128 = 0;
      }
      v129 = (int *)&v128[4 * v124];
      *v129 = v120;
      v122 = (char *)(v129 + 1);
      while (v121 != v123)
      {
        v130 = *((_DWORD *)v121 - 1);
        v121 -= 4;
        *--v129 = v130;
      }
      v198 = v129;
      v199 = v122;
      v200 = &v128[4 * v127];
      if (v123)
        operator delete(v123);
    }
    else
    {
      *(_DWORD *)v199 = v120;
      v122 = v121 + 4;
    }
    v199 = v122;
    v131 = v196;
    if (v196 >= v197)
    {
      v133 = (char *)v195;
      v134 = (v196 - (_BYTE *)v195) >> 2;
      v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 62)
LABEL_295:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v136 = v197 - (_BYTE *)v195;
      if ((v197 - (_BYTE *)v195) >> 1 > v135)
        v135 = v136 >> 1;
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
        v137 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v137 = v135;
      if (v137)
      {
        v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v197, v137);
        v131 = v196;
        v133 = (char *)v195;
      }
      else
      {
        v138 = 0;
      }
      v139 = &v138[4 * v134];
      *(_DWORD *)v139 = v93;
      v132 = v139 + 4;
      while (v131 != v133)
      {
        v140 = *((_DWORD *)v131 - 1);
        v131 -= 4;
        *((_DWORD *)v139 - 1) = v140;
        v139 -= 4;
      }
      v195 = v139;
      v196 = v132;
      v197 = &v138[4 * v137];
      if (v133)
        operator delete(v133);
    }
    else
    {
      *(_DWORD *)v196 = v93;
      v132 = v131 + 4;
    }
    v89 = (v96 + 1);
    v196 = v132;
LABEL_222:
    ++v88;
    v87 = __p;
  }
  while (v88 < ((char *)v210 - (_BYTE *)__p) >> 2);
LABEL_223:
  quasar::Token::Token((quasar::Token *)&v184);
  *(_DWORD *)((char *)v183 + 3) = 0;
  v183[0] = 0;
  v169[1] = 0;
  v169[2] = 0;
  *v169 = 0;
  if ((int)((unint64_t)(v199 - (_BYTE *)v198) >> 2) < 1)
  {
    v167 = 0;
    v174 = 0;
  }
  else
  {
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v174 = 0;
    v167 = 0;
    v172 = ((unint64_t)(v199 - (_BYTE *)v198) >> 2);
    do
    {
      v144 = *((int *)v198 + v141);
      if ((_DWORD)v144)
      {
        v145 = v144 + (int)v143;
        if ((int)v144 < 1)
        {
          v146 = 0;
        }
        else
        {
          v146 = 0;
          v147 = (int)v143;
          v148 = (float *)((char *)v215 + 224 * (int)v143 + 40);
          do
          {
            v149 = *v148;
            v148 += 56;
            v146 = (int)(float)(v149 + (float)v146);
            ++v147;
          }
          while (v147 < (int)v145);
        }
        v152 = *((_DWORD *)v215 + 56 * (int)v143 + 7);
        v153 = (char *)v215 + 224 * v145;
        v154 = *((_DWORD *)v153 - 48);
        v155 = *((_DWORD *)v153 - 47);
        std::string::basic_string(v219, &__dst_4, v142, *((int *)v195 + v141), (std::allocator<char> *)v180);
        if (v174 < 0)
          operator delete(v167);
        v183[0] = v219[0].__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v183 + 3) = *(_DWORD *)((char *)&v219[0].__r_.__value_.__r.__words[2] + 3);
        v167 = (void *)v219[0].__r_.__value_.__r.__words[0];
        v174 = HIBYTE(v219[0].__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v219[0].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v182, v219[0].__r_.__value_.__l.__data_, v219[0].__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v182.__r_.__value_.__l.__data_ = *(_OWORD *)&v219[0].__r_.__value_.__l.__data_;
          LODWORD(v182.__r_.__value_.__r.__words[2]) = v183[0];
          *(_DWORD *)((char *)&v182.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v183 + 3);
          *((_BYTE *)&v182.__r_.__value_.__s + 23) = *((_BYTE *)&v219[0].__r_.__value_.__s + 23);
        }
        std::string::basic_string[abi:ne180100]<0>(v180, "");
        std::string::basic_string[abi:ne180100]<0>(v178, "");
        memset(v177, 0, sizeof(v177));
        std::string::basic_string[abi:ne180100]<0>(v175, "");
        quasar::Token::Token(v219, (__int128 *)&v182, v152, v154, v155, 0, 0, (__int128 *)v180, (float)(v146 / (int)v144), (__int128 *)v178, v177, 0, (__int128 *)v175, 0, 0);
        v156 = v169[1];
        if (v156 >= v169[2])
        {
          v164 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(v169, (__int128 *)v219);
          v165 = SBYTE7(v227[0]);
          v169[1] = v164;
          if (v165 < 0)
            operator delete(v226[0]);
        }
        else
        {
          v157 = *(_OWORD *)&v219[0].__r_.__value_.__l.__data_;
          *(_QWORD *)(v156 + 16) = *((_QWORD *)&v219[0].__r_.__value_.__l + 2);
          *(_OWORD *)v156 = v157;
          memset(v219, 0, 24);
          v158 = *(std::string::size_type *)((char *)&v219[1].__r_.__value_.__r.__words[1] + 6);
          *(_OWORD *)(v156 + 24) = *(_OWORD *)&v219[1].__r_.__value_.__l.__data_;
          *(_QWORD *)(v156 + 38) = v158;
          v159 = v221[0];
          *(_OWORD *)(v156 + 48) = *(_OWORD *)v220;
          *(_QWORD *)(v156 + 64) = v159;
          *(_QWORD *)(v156 + 72) = 0;
          v220[1] = 0;
          v221[0] = 0;
          v220[0] = 0;
          *(_QWORD *)(v156 + 80) = 0;
          *(_QWORD *)(v156 + 88) = 0;
          *(_OWORD *)(v156 + 72) = *(_OWORD *)&v221[1];
          *(_QWORD *)(v156 + 88) = v221[3];
          memset(&v221[1], 0, 24);
          v160 = *(_OWORD *)v222;
          *(_QWORD *)(v156 + 112) = v223[0];
          *(_QWORD *)(v156 + 120) = 0;
          *(_OWORD *)(v156 + 96) = v160;
          v222[1] = 0;
          v223[0] = 0;
          v222[0] = 0;
          *(_QWORD *)(v156 + 128) = 0;
          *(_QWORD *)(v156 + 136) = 0;
          *(_OWORD *)(v156 + 120) = *(_OWORD *)&v223[1];
          *(_QWORD *)(v156 + 136) = v223[3];
          memset(&v223[1], 0, 24);
          v161 = *(_OWORD *)v224;
          *(_QWORD *)(v156 + 160) = v225;
          *(_OWORD *)(v156 + 144) = v161;
          v224[1] = 0;
          *(_QWORD *)&v225 = 0;
          v224[0] = 0;
          LODWORD(v159) = DWORD2(v225);
          *(_WORD *)(v156 + 172) = WORD6(v225);
          *(_DWORD *)(v156 + 168) = v159;
          v162 = *(_OWORD *)v226;
          *(_QWORD *)(v156 + 192) = *(_QWORD *)&v227[0];
          *(_OWORD *)(v156 + 176) = v162;
          v226[1] = 0;
          *(_QWORD *)&v227[0] = 0;
          v226[0] = 0;
          v163 = *(_OWORD *)((char *)v227 + 8);
          *(_DWORD *)(v156 + 216) = DWORD2(v227[1]);
          *(_OWORD *)(v156 + 200) = v163;
          v169[1] = v156 + 224;
        }
        if (SBYTE7(v225) < 0)
          operator delete(v224[0]);
        v218 = (void **)&v223[1];
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v218);
        if (SHIBYTE(v223[0]) < 0)
          operator delete(v222[0]);
        v218 = (void **)&v221[1];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v218);
        if (SHIBYTE(v221[0]) < 0)
          operator delete(v220[0]);
        if (SHIBYTE(v219[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v219[0].__r_.__value_.__l.__data_);
        if (v176 < 0)
          operator delete(v175[0]);
        v175[0] = v177;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
        if (v179 < 0)
          operator delete(v178[0]);
        if (v181 < 0)
          operator delete(v180[0]);
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v182.__r_.__value_.__l.__data_);
        v150 = *((_DWORD *)v195 + v141);
      }
      else
      {
        v150 = *((_DWORD *)v195 + v141);
        v151 = v169[1];
        if (v151 != *v169)
          *(_BYTE *)(v151 - 180) = v202.__begin_[v141] != 0;
        v145 = v143;
      }
      v142 += v150;
      ++v141;
      v143 = v145;
    }
    while (v141 != v172);
  }
  if (TPItn_DeleteResult())
  {
    v230 = 0u;
    v229 = 0u;
    v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"result could not be deleted", 27);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  if (v174 < 0)
    operator delete(v167);
  if (v194 < 0)
    operator delete(v193);
  if (v192 < 0)
    operator delete(v191);
  v219[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
  if (v189 < 0)
    operator delete(v188);
  v219[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
  if (v186 < 0)
    operator delete(v185);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (v195)
  {
    v196 = (char *)v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = (char *)v198;
    operator delete(v198);
  }
  if (v201.__begin_)
  {
    v201.__end_ = v201.__begin_;
    operator delete(v201.__begin_);
  }
  if (v202.__begin_)
  {
    v202.__end_ = v202.__begin_;
    operator delete(v202.__begin_);
  }
  if (SHIBYTE(__dst_4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst_4.__r_.__value_.__l.__data_);
  if (v205.__begin_)
  {
    v205.__end_ = v205.__begin_;
    operator delete(v205.__begin_);
  }
LABEL_288:
  if (__p)
  {
    v210 = (int *)__p;
    operator delete(__p);
  }
  if (v212)
  {
    v213 = (char *)v212;
    operator delete(v212);
  }
  v219[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
LABEL_293:
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1ADDDCB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::recursive_mutex *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  STACK[0x320] = a27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  if (a30 < 0)
    operator delete(__p);
  quasar::Token::~Token((void **)&a47);
  v48 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v48;
    operator delete(v48);
  }
  v49 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v49;
    operator delete(v49);
  }
  v50 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v50;
    operator delete(v50);
  }
  v51 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v51;
    operator delete(v51);
  }
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  v52 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v52;
    operator delete(v52);
  }
  v53 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v53;
    operator delete(v53);
  }
  v54 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v54;
    operator delete(v54);
  }
  STACK[0x320] = (unint64_t)&STACK[0x300];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  std::recursive_mutex::unlock(a21);
  _Unwind_Resume(a1);
}

uint64_t *SpeechITN::createSdapiITN@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t *v10;
  uint64_t *result;

  v10 = (uint64_t *)operator new();
  result = sdapi::SdapiITNImpl::SdapiITNImpl(v10, a1, a2, a3, a4);
  *a5 = v10;
  return result;
}

void sub_1ADDDCE00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sdapi::SdapiITNImpl::~SdapiITNImpl(sdapi::SdapiITNImpl *this)
{
  sdapi::SdapiITNImpl::~SdapiITNImpl(this);
  JUMPOUT(0x1AF44D190);
}

{
  std::recursive_mutex *SharedMutex;

  *(_QWORD *)this = &off_1E5D341F0;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  if (*((_QWORD *)this + 3) != -1)
  {
    TPItn_Close();
    *((_QWORD *)this + 3) = -1;
  }
  if (*((_QWORD *)this + 2) != -1)
  {
    TPLexicon_Close();
    *((_QWORD *)this + 2) = -1;
  }
  if (*((_QWORD *)this + 1) != -1)
  {
    SDVoc_Delete();
    *((_QWORD *)this + 1) = -1;
  }
  std::recursive_mutex::unlock(SharedMutex);
  quasar::Bitmap::~Bitmap(this);
}

uint64_t *sdapi::SdapiITNImpl::SdapiITNImpl(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::recursive_mutex *SharedMutex;
  uint64_t GeneralVoc;
  uint64_t LexiconHandle;
  _OWORD v14[17];

  *a1 = (uint64_t)&off_1E5D341F0;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  GeneralVoc = sdapi::SdapiUtil::loadGeneralVoc(a2, a3);
  if (GeneralVoc == -1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Could not load general voc", 26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  a1[1] = GeneralVoc;
  LexiconHandle = sdapi::SdapiUtil::fetchLexiconHandle(GeneralVoc, a4);
  a1[2] = LexiconHandle;
  a1[3] = sdapi::SdapiUtil::fetchItnHandle(a1[1], LexiconHandle, a5);
  std::recursive_mutex::unlock(SharedMutex);
  return a1;
}

void sub_1ADDDCFE0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void sub_1ADDDD3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, _QWORD *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&__p, a19);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  std::__tree<std::string>::destroy((uint64_t)&a13, a14);

  _Unwind_Resume(a1);
}

void sub_1ADDDD538(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;

  v3 = __cxa_begin_catch(a1);
  EarArtifactLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARArtifact getVersion].cold.1(v5, (uint64_t)v3, v4);
  else
    -[_EARArtifact getVersion].cold.2(v5, v4);
  JUMPOUT(0x1ADDDD528);
}

id EarArtifactLogger(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&unk_1EED8B000;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)&unk_1EED8B000;
    if (v3)
    {
      EarArtifactLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.artifact");
      v1 = (id *)&unk_1EED8B000;
    }
  }
  return v1[195];
}

void sub_1ADDDD6DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,__int128 buf)
{
  void *v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;

  if (a2)
  {
    if (a20 < 0)
      operator delete(__p);
    if (a14 < 0)
      operator delete(a9);
    std::pair<std::string,std::string>::~pair((uint64_t)&buf);
    v23 = __cxa_begin_catch(a1);
    EarArtifactLogger();
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v25)
      {
        v26 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v26;
        _os_log_impl(&dword_1AD756000, v24, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v25)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v24, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDDD6A8);
  }
  _Unwind_Resume(a1);
}

void sub_1ADDDD878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADDDD914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADDDDA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, int a17, __int16 a18, char a19, char a20)
{
  void *v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;

  if (a2)
  {
    v21 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDDD9E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDDDBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADDDDC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADDDDD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, int a17, __int16 a18, char a19, char a20)
{
  void *v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;

  if (a2)
  {
    v21 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDDDD24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDDDEBC(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarArtifactLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARArtifact minimize].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADDDDEACLL);
}

void sub_1ADDDDFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDDDF78);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDDE0F4(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarArtifactLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARArtifact minimize].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADDDE0DCLL);
}

void sub_1ADDDE14C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADDDE1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDDE1C4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDDE4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;

  if (a32 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADDDE668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int a16, __int16 a17, char a18, char a19)
{
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;

  if (a2)
  {
    v20 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDDE628);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDDE8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1ADDDEDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;
  NSObject *v32;
  _BOOL4 v33;
  uint64_t v34;

  if (a2)
  {
    v31 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v33)
      {
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 16))(v31);
        *(_DWORD *)(v29 - 112) = 136315138;
        *(_QWORD *)(v29 - 108) = v34;
        _os_log_impl(&dword_1AD756000, v32, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v29 - 112), 0xCu);
      }
    }
    else if (v33)
    {
      *(_WORD *)(v29 - 112) = 0;
      _os_log_impl(&dword_1AD756000, v32, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v29 - 112), 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADDDEC90);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<quasar::AppLmData>::operator=[abi:ne180100]<quasar::AppLmData,std::default_delete<quasar::AppLmData>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D46498;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1ADDDF1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1ADDDF518(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  void *v19;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t v22;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
    v19 = __cxa_begin_catch(a1);
    EarArtifactLogger();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v21)
      {
        v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v22;
        _os_log_impl(&dword_1AD756000, v20, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v21)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v20, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADDDF460);
  }
  _Unwind_Resume(a1);
}

void sub_1ADDDF7C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  void *v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;

  if (a2)
  {
    std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100]((void ***)&buf, 0);
    v13 = __cxa_begin_catch(a1);
    EarArtifactLogger();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v15)
      {
        v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 16))(v13);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_impl(&dword_1AD756000, v14, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v15)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v14, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADDDF748);
  }
  _Unwind_Resume(a1);
}

void sub_1ADDDFC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,__int128 buf,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v28;
  void *v29;
  NSObject *v30;
  _BOOL4 v31;
  uint64_t v32;

  if (a2)
  {
    v28 = buf;
    *(_QWORD *)&buf = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    v29 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v31)
      {
        v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v32;
        _os_log_impl(&dword_1AD756000, v30, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v31)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v30, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADDDFA74);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<kaldi::quasar::LmHandle>::operator=[abi:ne180100]<kaldi::quasar::LmHandle,std::default_delete<kaldi::quasar::LmHandle>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45E78;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1ADDE0084(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,__int128 buf)
{
  void *v29;
  NSObject *v30;
  _BOOL4 v31;
  uint64_t v32;

  if (a2)
  {
    std::pair<std::string,std::string>::~pair((uint64_t)&buf);
    if (a18 < 0)
      operator delete(__p);
    if (a24 < 0)
      operator delete(a19);
    v29 = __cxa_begin_catch(a1);
    EarArtifactLogger();
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v31)
      {
        v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v32;
        _os_log_impl(&dword_1AD756000, v30, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v31)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v30, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADDDFF5CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ADDE03B8(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarArtifactLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARArtifact minimize].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADDE0368);
}

void sub_1ADDE040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADDE060C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,__int128 buf,int a36,__int16 a37,char a38,char a39)
{
  void *v41;
  NSObject *v42;
  _BOOL4 v43;
  uint64_t v44;

  if (a2)
  {
    if (a34)
      (*(void (**)(uint64_t))(*(_QWORD *)a34 + 8))(a34);
    v41 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v43)
      {
        v44 = (*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v44;
        _os_log_impl(&dword_1AD756000, v42, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v43)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v42, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDE05C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDE0A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v56;
  void *v57;
  NSObject *v58;
  _BOOL4 v59;
  uint64_t v60;

  if (a2)
  {
    v56 = *(_QWORD *)(v53 - 152);
    *(_QWORD *)(v53 - 152) = 0;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v57 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v58 = objc_claimAutoreleasedReturnValue();
    v59 = os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v59)
      {
        v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v57 + 16))(v57);
        *(_DWORD *)(v53 - 144) = 136315138;
        *(_QWORD *)(v53 - 140) = v60;
        _os_log_impl(&dword_1AD756000, v58, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v53 - 144), 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v59)
      {
        *(_WORD *)(v53 - 144) = 0;
        _os_log_impl(&dword_1AD756000, v58, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v53 - 144), 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDE0A40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDE1194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,__int128 buf,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v36;
  NSObject *v37;
  _BOOL4 v38;
  uint64_t v39;

  if (a2)
  {
    if (a20 < 0)
      operator delete(__p);
    if (a33 < 0)
      operator delete((void *)buf);
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v36 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v38)
      {
        v39 = (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 16))(v36);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v39;
        _os_log_impl(&dword_1AD756000, v37, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v38)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v37, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADDE1140);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDE14F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1ADDE15CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADDE1850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,__int128 buf,int a23,__int16 a24,char a25,char a26)
{
  void *v27;
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;

  if (a2)
  {
    v27 = __cxa_begin_catch(exception_object);
    EarArtifactLogger();
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v29)
      {
        v30 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v30;
        _os_log_impl(&dword_1AD756000, v28, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v29)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v28, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADDE1808);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDE2064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a41 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__10(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
}

void ___ZN10EARHelpers15DictionaryToMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIS7_NS5_IS7_EEEEZ63___EARArtifact_initWithAcceptedContent_acceptedInfo_dependent__E3__2Z63___EARArtifact_initWithAcceptedContent_acceptedInfo_dependent__E3__3EENS1_3mapIT_T0_NS1_4lessISE_EENS5_INS1_4pairIKSE_SF_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  std::vector<std::string>::pointer end;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  uint64_t **v23;
  std::vector<std::wstring> *v24;
  void *v26;
  id v27;
  std::vector<std::string> v28;
  void *v29[2];
  uint64_t v30;
  void *__p[2];
  std::string::size_type v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__split_buffer<std::string> __v;
  void **v38[18];

  v38[16] = *(void ***)MEMORY[0x1E0C80C00];
  v4 = a2;
  v27 = a3;
  v5 = v4;
  v6 = v5;
  v26 = v5;
  if (v5)
  {
    objc_msgSend(v5, "ear_toString");
  }
  else
  {
    v29[0] = 0;
    v29[1] = 0;
    v30 = 0;
  }

  v7 = v27;
  memset(&v28, 0, sizeof(v28));
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v34 != v10)
          objc_enumerationMutation(v8);
        v12 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * i);
        v13 = v12;
        if (v12)
        {
          objc_msgSend(v12, "ear_toString");
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v32 = 0;
        }

        end = v28.__end_;
        if (v28.__end_ >= v28.__end_cap_.__value_)
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3);
          v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) > v17)
            v17 = 0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) >= 0x555555555555555)
            v18 = 0xAAAAAAAAAAAAAAALL;
          else
            v18 = v17;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v28.__end_cap_;
          if (v18)
            v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v28.__end_cap_, v18);
          else
            v19 = 0;
          v20 = v19 + v16;
          __v.__first_ = v19;
          __v.__begin_ = v20;
          __v.__end_cap_.__value_ = &v19[v18];
          v21 = *(_OWORD *)__p;
          v20->__r_.__value_.__r.__words[2] = v32;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          __p[1] = 0;
          v32 = 0;
          __p[0] = 0;
          __v.__end_ = v20 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v28, &__v);
          v22 = v28.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v28.__end_ = v22;
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v15 = *(_OWORD *)__p;
          v28.__end_->__r_.__value_.__r.__words[2] = v32;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
          v28.__end_ = end + 1;
        }

      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v9);
  }

  v23 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  *(_QWORD *)&v33 = v29;
  v24 = (std::vector<std::wstring> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (const void **)v29, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)+ 7);
  if (v24 != (std::vector<std::wstring> *)&v28)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v24, v28.__begin_, (__int128 *)v28.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
  v38[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);

}

void sub_1ADDE2520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, void *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__pa,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__split_buffer<std::wstring> *a28,uint64_t a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::Artifact,std::allocator<quasar::artifact::Artifact>,std::set<std::string> &,std::set<std::string> &,std::map<std::string,std::vector<std::string>> &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::Artifact>::__shared_ptr_emplace[abi:ne180100]<std::set<std::string> &,std::set<std::string> &,std::map<std::string,std::vector<std::string>> &,std::allocator<quasar::artifact::Artifact>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADDE2634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::Artifact>::__shared_ptr_emplace[abi:ne180100]<std::set<std::string> &,std::set<std::string> &,std::map<std::string,std::vector<std::string>> &,std::allocator<quasar::artifact::Artifact>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45200;
  a1[1] = 0;
  quasar::artifact::Artifact::Artifact(a1 + 3);
  return a1;
}

void sub_1ADDE2680(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::Artifact>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::Artifact>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::Artifact>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::AppLmArtifact,std::allocator<quasar::artifact::AppLmArtifact>,std::string,quasar::Locale,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,quasar::Locale,std::allocator<quasar::artifact::AppLmArtifact>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADDE2738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,quasar::Locale,std::allocator<quasar::artifact::AppLmArtifact>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45120;
  a1[1] = 0;
  quasar::artifact::AppLmArtifact::AppLmArtifact(a1 + 3);
  return a1;
}

void sub_1ADDE2784(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::AppLmArtifact,std::allocator<quasar::artifact::AppLmArtifact>,std::string,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::artifact::AppLmArtifact>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADDE2834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::artifact::AppLmArtifact>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45120;
  a1[1] = 0;
  quasar::artifact::AppLmArtifact::AppLmArtifact(a1 + 3);
  return a1;
}

void sub_1ADDE2880(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::AppLmData  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::AppLmData  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::AppLmData  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<quasar::CustomPronData  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::CustomPronData  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<quasar::CustomPronData>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<quasar::CustomPronData  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<quasar::artifact::AppLmArtifact  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::artifact::AppLmArtifact  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::artifact::AppLmArtifact  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<kaldi::quasar::LmHandle  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::LmHandle  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::LmHandle  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::Align::getDestToks(quasar::Align *this)
{
  return (uint64_t)this + 32;
}

uint64_t quasar::Align::splitTime(uint64_t result, int a2, int a3, int a4, uint64_t *a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;

  v5 = a2 - result;
  if (a2 - (int)result >= 0)
  {
    v6 = *a5;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((a5[1] - *a5) >> 5);
    if (v7 <= (int)result)
      goto LABEL_11;
    *(_DWORD *)(v6 + 224 * (int)result + 28) = a3;
    if (a2 > (int)result)
    {
      v8 = v5 + 1;
      v9 = (_DWORD *)(v6 + 224 * (int)result + 252);
      v10 = (int)result + 1;
      v11 = a4 - a3;
      while (1)
      {
        v12 = v11 / v8 + a3;
        *(v9 - 55) = v12;
        if (v7 <= v10)
          break;
        *v9 = v12;
        v9 += 56;
        v11 += a4 - a3;
        ++v10;
        if (!--v5)
          goto LABEL_7;
      }
LABEL_11:
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_7:
    if (v7 <= a2)
      goto LABEL_11;
    *(_DWORD *)(v6 + 224 * a2 + 32) = a4;
    v13 = a2 - 1;
    if (v7 <= v13)
      goto LABEL_11;
    *(_DWORD *)(v6 + 224 * a2 + 28) = *(_DWORD *)(v6 + 224 * v13 + 32);
  }
  return result;
}

BOOL quasar::Align::monotonicStartAndEnd(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *a1;
  v1 = a1[1];
  v3 = v1 - *a1;
  if (v1 != *a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = v3 / 224;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = (unsigned int *)(v2 + 32);
    while (1)
    {
      if (v4)
      {
        v9 = (v4 - 1);
        if (v6 <= v9)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v10 = *(_DWORD *)(v2 + 224 * v9 + 32);
        v11 = *(v8 - 1);
        if (v10 > v11)
          return v5;
      }
      else
      {
        v11 = *(_DWORD *)(v2 + 28);
      }
      if (v11 <= *v8)
      {
        v5 = v6 <= ++v4;
        v8 += 56;
        if (v7 != v4)
          continue;
      }
      return v5;
    }
  }
  return 1;
}

BOOL quasar::Align::applyAlignment(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  int v12;
  int v13;
  int v14;
  std::string::reference v15;
  std::string::size_type v16;
  int v17;
  std::string::size_type v18;
  unint64_t v19;
  std::string::size_type v20;
  std::string::size_type v21;
  int v22;
  uint64_t v23;
  const quasar::Token *v24;
  std::string *v25;
  std::string *v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  std::string::size_type v38;
  std::string::size_type v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  int v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int v76;
  std::string::size_type v77;
  std::string::size_type v78;
  int v79;
  uint64_t v80;
  std::string::size_type v81;
  int v82;
  std::string::size_type v83;
  char v84;
  std::string::size_type v85;
  std::string::size_type v86;
  int v87;
  std::string::size_type v88;
  int v89;
  std::string::size_type v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  _BOOL4 v97;
  std::string::size_type v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  std::string::size_type v103;
  uint64_t v104;
  std::string::size_type v105;
  int v106;
  uint64_t v107;
  std::string::size_type v108;
  _BOOL8 v109;
  _BOOL8 v110;
  char v111;
  char *v115;
  char *v116;
  char *v117;
  void *__p;
  char *v119;
  char *v120;
  uint64_t v121;
  std::string *v122;
  unint64_t v123;
  __int128 v124;
  _OWORD v125[2];
  void *v126[2];
  _QWORD v127[4];
  __int128 v128;
  _QWORD v129[4];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD v133[4];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  std::string v137;
  void **v138[3];

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v137 = *(std::string *)a1;
  size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
  v7 = &v137;
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v137.__r_.__value_.__l.__size_;
    v7 = (std::string *)v137.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    if (v7->__r_.__value_.__s.__data_[0] == 83)
      v7->__r_.__value_.__s.__data_[0] = 67;
    v7 = (std::string *)((char *)v7 + 1);
  }
  if (quasar::Align::monotonicStartAndEnd(a2))
  {
    v8 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    v9 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
    v10 = v137.__r_.__value_.__l.__size_;
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = v137.__r_.__value_.__l.__size_;
    if (v8)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = std::string::at(&v137, v11++);
        v16 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = v137.__r_.__value_.__l.__size_;
        v17 = *v15;
        switch(v17)
        {
          case 'I':
            ++v13;
            if (v11 != v16 && *std::string::at(&v137, v11) == 68)
            {
              if (quasar::gLogLevel >= 2)
              {
                v135 = 0u;
                v136 = 0u;
                v134 = 0u;
                v132 = 0u;
                memset(v133, 0, sizeof(v133));
                v130 = 0u;
                v131 = 0u;
                memset(v129, 0, sizeof(v129));
                v128 = 0u;
                memset(v127, 0, sizeof(v127));
                *(_OWORD *)v126 = 0u;
                v124 = 0u;
                memset(v125, 0, sizeof(v125));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Adjacent 'ID'", 13);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
              }
              goto LABEL_236;
            }
            break;
          case 'D':
            ++v12;
            if (v11 != v16 && *std::string::at(&v137, v11) == 73)
            {
              if (quasar::gLogLevel >= 2)
              {
                v135 = 0u;
                v136 = 0u;
                v134 = 0u;
                v132 = 0u;
                memset(v133, 0, sizeof(v133));
                v130 = 0u;
                v131 = 0u;
                memset(v129, 0, sizeof(v129));
                v128 = 0u;
                memset(v127, 0, sizeof(v127));
                *(_OWORD *)v126 = 0u;
                v124 = 0u;
                memset(v125, 0, sizeof(v125));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Adjacent 'DI'", 13);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
              }
              goto LABEL_236;
            }
            break;
          case 'C':
            ++v14;
            break;
          default:
            if (quasar::gLogLevel >= 2)
            {
              v135 = 0u;
              v136 = 0u;
              v134 = 0u;
              v132 = 0u;
              memset(v133, 0, sizeof(v133));
              v130 = 0u;
              v131 = 0u;
              memset(v129, 0, sizeof(v129));
              v128 = 0u;
              memset(v127, 0, sizeof(v127));
              *(_OWORD *)v126 = 0u;
              v124 = 0u;
              memset(v125, 0, sizeof(v125));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Unexpected character", 20);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
            }
            goto LABEL_236;
        }
        v18 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        v9 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
        v10 = v137.__r_.__value_.__l.__size_;
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = v137.__r_.__value_.__l.__size_;
        if (v18 <= v11)
          goto LABEL_33;
      }
    }
    v14 = 0;
    v13 = 0;
    v12 = 0;
LABEL_33:
    if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) != v12 + v14
      || 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) != v13 + v14)
    {
      if (quasar::gLogLevel >= 2)
      {
        v135 = 0u;
        v136 = 0u;
        v134 = 0u;
        v132 = 0u;
        memset(v133, 0, sizeof(v133));
        v130 = 0u;
        v131 = 0u;
        memset(v129, 0, sizeof(v129));
        v128 = 0u;
        memset(v127, 0, sizeof(v127));
        *(_OWORD *)v126 = 0u;
        v124 = 0u;
        memset(v125, 0, sizeof(v125));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Invalid alignment string", 24);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
      }
      goto LABEL_236;
    }
    if (!v14)
    {
      if (quasar::gLogLevel >= 2)
      {
        v135 = 0u;
        v136 = 0u;
        v134 = 0u;
        v132 = 0u;
        memset(v133, 0, sizeof(v133));
        v130 = 0u;
        v131 = 0u;
        memset(v129, 0, sizeof(v129));
        v128 = 0u;
        memset(v127, 0, sizeof(v127));
        *(_OWORD *)v126 = 0u;
        v124 = 0u;
        memset(v125, 0, sizeof(v125));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"String is all I's, all D's, or empty", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
      }
      goto LABEL_236;
    }
    v121 = 0;
    v122 = 0;
    v123 = 0;
    __p = 0;
    v119 = 0;
    v120 = 0;
    v115 = 0;
    v116 = 0;
    if (v9 >= 0)
      v19 = v9;
    else
      v19 = v10;
    v117 = 0;
    std::vector<quasar::Token>::reserve(&v121, v19);
    v20 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = v137.__r_.__value_.__l.__size_;
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        if (*std::string::at(&v137, v21) == 67 || *std::string::at(&v137, v21) == 68)
        {
          v23 = *a2;
          if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) <= (unint64_t)v22)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v24 = (const quasar::Token *)(v23 + 224 * v22);
          v25 = v122;
          if ((unint64_t)v122 >= v123)
          {
            v26 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v121, v24);
          }
          else
          {
            quasar::Token::Token(v122, v24);
            v26 = (std::string *)((char *)v25 + 224);
          }
          v122 = v26;
          if (a4 == 2 && *std::string::at((const std::string *)a1, v21) != 67)
          {
            MEMORY[0x1AF44C914](&v122[-8].__r_.__value_.__r.__words[2], "");
            MEMORY[0x1AF44C914](&v122[-6].__r_.__value_.__r.__words[2], "");
          }
          v27 = *(_DWORD *)(v23 + 224 * v22 + 28);
          v28 = v119;
          if (v119 >= v120)
          {
            v30 = (char *)__p;
            v31 = (v119 - (_BYTE *)__p) >> 2;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v33 = v120 - (_BYTE *)__p;
            if ((v120 - (_BYTE *)__p) >> 1 > v32)
              v32 = v33 >> 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
              v34 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v120, v34);
              v30 = (char *)__p;
              v28 = v119;
            }
            else
            {
              v35 = 0;
            }
            v44 = &v35[4 * v31];
            *(_DWORD *)v44 = v27;
            v29 = v44 + 4;
            while (v28 != v30)
            {
              v45 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *((_DWORD *)v44 - 1) = v45;
              v44 -= 4;
            }
            __p = v44;
            v119 = v29;
            v120 = &v35[4 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_DWORD *)v119 = v27;
            v29 = v28 + 4;
          }
          v119 = v29;
          v46 = *(_DWORD *)(v23 + 224 * v22 + 32);
          v47 = v116;
          if (v116 >= v117)
          {
            v49 = v115;
            v50 = (v116 - v115) >> 2;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v52 = v117 - v115;
            if ((v117 - v115) >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v53);
              v49 = v115;
              v47 = v116;
            }
            else
            {
              v54 = 0;
            }
            v55 = &v54[4 * v50];
            *(_DWORD *)v55 = v46;
            v48 = v55 + 4;
            while (v47 != v49)
            {
              v56 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v55 - 1) = v56;
              v55 -= 4;
            }
            v115 = v55;
            v117 = &v54[4 * v53];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *(_DWORD *)v116 = v46;
            v48 = v116 + 4;
          }
          v116 = v48;
          ++v22;
        }
        else
        {
          quasar::Token::Token((quasar::Token *)&v124);
          v36 = v122;
          if ((unint64_t)v122 >= v123)
          {
            v122 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(&v121, &v124);
            if (SHIBYTE(v133[0]) < 0)
              operator delete((void *)v132);
          }
          else
          {
            v37 = v124;
            v122->__r_.__value_.__r.__words[2] = *(_QWORD *)&v125[0];
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
            *(_QWORD *)&v125[0] = 0;
            v124 = 0uLL;
            v38 = *(_QWORD *)((char *)&v125[1] + 6);
            *(_OWORD *)&v36[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v125 + 8);
            *(std::string::size_type *)((char *)&v36[1].__r_.__value_.__r.__words[1] + 6) = v38;
            v39 = v127[0];
            *(_OWORD *)&v36[2].__r_.__value_.__l.__data_ = *(_OWORD *)v126;
            v36[2].__r_.__value_.__r.__words[2] = v39;
            v36[3].__r_.__value_.__r.__words[0] = 0;
            v126[1] = 0;
            v127[0] = 0;
            v126[0] = 0;
            v36[3].__r_.__value_.__l.__size_ = 0;
            v36[3].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v36[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v127[1];
            v36[3].__r_.__value_.__r.__words[2] = v127[3];
            memset(&v127[1], 0, 24);
            v40 = v128;
            v36[4].__r_.__value_.__r.__words[2] = v129[0];
            v36[5].__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)&v36[4].__r_.__value_.__l.__data_ = v40;
            v129[0] = 0;
            v128 = 0uLL;
            v36[5].__r_.__value_.__l.__size_ = 0;
            v36[5].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v36[5].__r_.__value_.__l.__data_ = *(_OWORD *)&v129[1];
            v36[5].__r_.__value_.__r.__words[2] = v129[3];
            memset(&v129[1], 0, 24);
            v41 = v130;
            v36[6].__r_.__value_.__r.__words[2] = v131;
            *(_OWORD *)&v36[6].__r_.__value_.__l.__data_ = v41;
            *(_QWORD *)&v131 = 0;
            v130 = 0uLL;
            LODWORD(v39) = DWORD2(v131);
            WORD2(v36[7].__r_.__value_.__r.__words[0]) = WORD6(v131);
            LODWORD(v36[7].__r_.__value_.__l.__data_) = v39;
            v42 = v132;
            v36[8].__r_.__value_.__r.__words[0] = v133[0];
            *(_OWORD *)&v36[7].__r_.__value_.__r.__words[1] = v42;
            v133[0] = 0;
            v132 = 0uLL;
            v43 = *(_OWORD *)&v133[1];
            LODWORD(v36[9].__r_.__value_.__l.__data_) = v133[3];
            *(_OWORD *)&v36[8].__r_.__value_.__r.__words[1] = v43;
            v122 = (std::string *)((char *)v36 + 224);
          }
          if (SBYTE7(v131) < 0)
            operator delete((void *)v130);
          v138[0] = (void **)&v129[1];
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v138);
          if (SHIBYTE(v129[0]) < 0)
            operator delete((void *)v128);
          v138[0] = (void **)&v127[1];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v138);
          if (SHIBYTE(v127[0]) < 0)
            operator delete(v126[0]);
          if (SBYTE7(v125[0]) < 0)
            operator delete((void *)v124);
          v57 = v119;
          if (v119 >= v120)
          {
            v59 = (char *)__p;
            v60 = (v119 - (_BYTE *)__p) >> 2;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v62 = v120 - (_BYTE *)__p;
            if ((v120 - (_BYTE *)__p) >> 1 > v61)
              v61 = v62 >> 1;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
              v63 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v120, v63);
              v59 = (char *)__p;
              v57 = v119;
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[4 * v60];
            *(_DWORD *)v65 = -1;
            v58 = v65 + 4;
            while (v57 != v59)
            {
              v66 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *((_DWORD *)v65 - 1) = v66;
              v65 -= 4;
            }
            __p = v65;
            v119 = v58;
            v120 = &v64[4 * v63];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_DWORD *)v119 = -1;
            v58 = v57 + 4;
          }
          v119 = v58;
          v67 = v116;
          if (v116 >= v117)
          {
            v69 = v115;
            v70 = (v116 - v115) >> 2;
            v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v72 = v117 - v115;
            if ((v117 - v115) >> 1 > v71)
              v71 = v72 >> 1;
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
              v73 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v73)
            {
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v73);
              v69 = v115;
              v67 = v116;
            }
            else
            {
              v74 = 0;
            }
            v75 = &v74[4 * v70];
            *(_DWORD *)v75 = -1;
            v68 = v75 + 4;
            while (v67 != v69)
            {
              v76 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v75 - 1) = v76;
              v75 -= 4;
            }
            v115 = v75;
            v117 = &v74[4 * v73];
            if (v69)
              operator delete(v69);
          }
          else
          {
            *(_DWORD *)v116 = -1;
            v68 = v116 + 4;
          }
          v116 = v68;
        }
        ++v21;
        v77 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v77 = v137.__r_.__value_.__l.__size_;
      }
      while (v77 > v21);
      if (v77)
      {
        v78 = 0;
        v79 = 1;
        LODWORD(v80) = -1;
        while (1)
        {
          v81 = v78;
          v82 = *std::string::at(&v137, v78++);
          v83 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          v84 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          v85 = v137.__r_.__value_.__l.__size_;
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          else
            v86 = v137.__r_.__value_.__l.__size_;
          if (v86 <= v78)
          {
            v87 = 0;
          }
          else
          {
            v87 = *std::string::at(&v137, v81 + 1);
            v83 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
            v85 = v137.__r_.__value_.__l.__size_;
            v84 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          }
          v88 = v81 + 2;
          if (v84 < 0)
            v83 = v85;
          if (v83 <= v88)
            v89 = 0;
          else
            v89 = *std::string::at(&v137, v88);
          if ((v82 == 68 || v82 == 73) && (_DWORD)v80 == -1)
            LODWORD(v80) = v81;
          if (v82 == 73)
          {
            if (!v87 || v87 == 67 && v89 != 73)
              goto LABEL_162;
          }
          else if (v82 == 68 && (v87 == 67 || !v87))
          {
LABEL_162:
            if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
            else
              v92 = v137.__r_.__value_.__l.__size_;
            v93 = (v80 - 1);
            if ((int)v80 < 1)
              v94 = -1;
            else
              v94 = v80 - 1;
            if (v82 == 73)
            {
              if ((int)v80 >= 1)
                v80 = v93;
              else
                v80 = v80;
              if (v92 > v78)
                LODWORD(v81) = v81 + 1;
              if ((int)v80 <= (int)v81)
              {
                v98 = (int)v80;
                v99 = 224 * (int)v80;
                v100 = v79 + (v92 > v78) - v80;
                v96 = -1;
                v95 = -1;
                do
                {
                  if (*std::string::at(&v137, v98) == 67)
                  {
                    if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5) <= v98)
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    v96 = *(_DWORD *)(v121 + v99 + 32);
                    if (v95 == -1)
                      v95 = *(_DWORD *)(v121 + v99 + 28);
                  }
                  ++v98;
                  v99 += 224;
                  --v100;
                }
                while (v100);
              }
              else
              {
                v95 = -1;
                v96 = -1;
              }
              quasar::Align::splitTime(v80, v81, v95, v96, &v121);
            }
            else
            {
              if ((int)v80 < 1)
                goto LABEL_189;
              if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5) <= (unint64_t)v93)
                goto LABEL_254;
              if (v93 >= (v119 - (_BYTE *)__p) >> 2)
LABEL_257:
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              if (*(_DWORD *)(v121 + 224 * v93 + 28) == *((_DWORD *)__p + v93))
              {
                if (v93 >= (v116 - v115) >> 2)
                  goto LABEL_257;
                v97 = *(_DWORD *)(v121 + 224 * v93 + 32) != *(_DWORD *)&v115[4 * v93];
              }
              else
              {
LABEL_189:
                v97 = 1;
              }
              if (v97 && v92 > v78)
              {
                v101 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5);
                if (v101 <= (int)v80 || v101 <= v78)
                  goto LABEL_254;
                *(_DWORD *)(v121 + 224 * v78 + 28) = *(_DWORD *)(v121 + 224 * (int)v80 + 28);
              }
              else
              {
                v102 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5);
                if (v102 <= v81 || v102 <= v94)
LABEL_254:
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                *(_DWORD *)(v121 + 224 * v94 + 32) = *(_DWORD *)(v121 + 224 * v81 + 32);
              }
            }
            LODWORD(v80) = -1;
          }
          v103 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v103 = v137.__r_.__value_.__l.__size_;
          ++v79;
          if (v103 <= v78)
          {
            if (v103)
            {
              v104 = 0;
              v105 = 0;
              v106 = 0;
              do
              {
                if (*std::string::at(&v137, v105) == 67 || *std::string::at(&v137, v105) == 73)
                {
                  v107 = *a3;
                  if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) <= (unint64_t)v106)
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  quasar::Token::Token((std::string *)&v124, (const quasar::Token *)(v107 + 224 * v106));
                  if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5) <= v105)
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  quasar::Token::operator=(v107 + 224 * v106, v121 + v104);
                  *(_DWORD *)(v107 + 224 * v106 + 40) = DWORD2(v125[1]);
                  if (!a4)
                  {
                    std::string::operator=((std::string *)(v107 + 224 * v106 + 48), (const std::string *)v126);
                    std::string::operator=((std::string *)(v107 + 224 * v106 + 96), (const std::string *)&v128);
                  }
                  if (SHIBYTE(v133[0]) < 0)
                    operator delete((void *)v132);
                  if (SBYTE7(v131) < 0)
                    operator delete((void *)v130);
                  v138[0] = (void **)&v129[1];
                  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v138);
                  if (SHIBYTE(v129[0]) < 0)
                    operator delete((void *)v128);
                  v138[0] = (void **)&v127[1];
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v138);
                  if (SHIBYTE(v127[0]) < 0)
                    operator delete(v126[0]);
                  if (SBYTE7(v125[0]) < 0)
                    operator delete((void *)v124);
                  ++v106;
                }
                ++v105;
                v108 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
                if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v108 = v137.__r_.__value_.__l.__size_;
                v104 += 224;
              }
              while (v108 > v105);
            }
            break;
          }
        }
      }
    }
    v109 = quasar::Align::monotonicStartAndEnd(a3);
    v110 = v109;
    v111 = quasar::gLogLevel < 2 || v109;
    if ((v111 & 1) == 0)
    {
      v135 = 0u;
      v136 = 0u;
      v134 = 0u;
      v132 = 0u;
      memset(v133, 0, sizeof(v133));
      v130 = 0u;
      v131 = 0u;
      memset(v129, 0, sizeof(v129));
      v128 = 0u;
      memset(v127, 0, sizeof(v127));
      *(_OWORD *)v126 = 0u;
      v124 = 0u;
      memset(v125, 0, sizeof(v125));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Output not monotonic", 20);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
    }
    if (v115)
      operator delete(v115);
    if (__p)
    {
      v119 = (char *)__p;
      operator delete(__p);
    }
    *(_QWORD *)&v124 = &v121;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v135 = 0u;
      v136 = 0u;
      v134 = 0u;
      v132 = 0u;
      memset(v133, 0, sizeof(v133));
      v130 = 0u;
      v131 = 0u;
      memset(v129, 0, sizeof(v129));
      v128 = 0u;
      memset(v127, 0, sizeof(v127));
      *(_OWORD *)v126 = 0u;
      v124 = 0u;
      memset(v125, 0, sizeof(v125));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Input not monotonic", 19);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
    }
LABEL_236:
    v110 = 0;
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  return v110;
}

void sub_1ADDE3C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a31);
  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  _Unwind_Resume(a1);
}

uint64_t *quasar::Align::MakeMonotonic(uint64_t *result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *result;
  v4 = result[1];
  v5 = v4 - *result;
  if (v4 != *result)
  {
    v6 = 0;
    v7 = v5 / 224;
    if (v7 <= 1)
      v7 = 1;
    v8 = (unsigned int *)(v3 + 36);
    do
    {
      v10 = *(v8 - 2);
      v9 = *(v8 - 1);
      if (v10 == v9)
        *a2 = 1;
      if (v6)
      {
        v11 = *(_DWORD *)(v3 + 224 * (v6 - 1) + 32);
        if (v11 > v10)
        {
          *(v8 - 2) = v11;
          *a3 = 1;
          v10 = v11;
        }
      }
      v12 = *v8;
      if (v10 > *v8)
      {
        *v8 = v10;
        *a3 = 1;
        v12 = v10;
      }
      if (v12 > v9)
      {
        *(v8 - 1) = v12;
        *a3 = 1;
      }
      ++v6;
      v8 += 56;
    }
    while (v7 != v6);
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)*result;
  v4 = (uint64_t *)result[1];
  if ((uint64_t *)*result != v4)
  {
    do
    {
      result = quasar::Align::MakeMonotonic(v3, a2, a3);
      v3 += 3;
    }
    while (v3 != v4);
  }
  return result;
}

void quasar::Align::RestoreSilence(_QWORD *a1, _QWORD *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD **v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v21;
  _QWORD *v22[2];
  unsigned int *v23;

  v22[0] = 0;
  v22[1] = 0;
  v21 = (uint64_t *)v22;
  v4 = (_DWORD *)*a1;
  v5 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v5)
  {
    do
    {
      if (v4[7] != v4[8])
      {
        v6 = v4[9];
        v23 = v4 + 8;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v21, v4 + 8, (uint64_t)&std::piecewise_construct, &v23)+ 8) = v6;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  v8 = (_DWORD *)*a2;
  v7 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v7)
  {
    v9 = v22[0];
    do
    {
      v10 = v8[8];
      v8[9] = v10;
      if (v9)
      {
        v11 = v22;
        v12 = v9;
        do
        {
          v13 = v12;
          v14 = v11;
          v15 = *((_DWORD *)v12 + 7);
          if (v15 >= v10)
            v11 = (_QWORD **)v12;
          else
            ++v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
        if (v11 != v22)
        {
          if (v15 < v10)
            v13 = v14;
          if (v10 >= *((_DWORD *)v13 + 7))
          {
            v16 = *((_DWORD *)v11 + 8);
            if (v8[7] < v16 && v16 <= v10)
              v8[9] = v16;
          }
        }
      }
      v8 += 56;
    }
    while (v8 != v7);
    v18 = a1[1];
    if (*a1 != v18)
    {
      v19 = *(_DWORD *)(v18 - 188);
      if (*(v7 - 49) < v19 && v19 < *(v7 - 48))
        *(v7 - 47) = v19;
    }
  }
  std::__tree<int>::destroy((uint64_t)&v21, v22[0]);
}

void sub_1ADDE4004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

quasar::SyncRecogAudioBuffer *quasar::SyncRecogAudioBuffer::SyncRecogAudioBuffer(quasar::SyncRecogAudioBuffer *this, unsigned int a2, int a3, int a4, int a5)
{
  int v8;
  int v9;
  float v10;
  _QWORD *v11;
  char *v12;
  int v13;
  int v14;
  _OWORD v16[17];

  v8 = a3 * a2;
  *(_QWORD *)this = off_1E5D37E90;
  if (a3 < 0)
    v8 = -1;
  v9 = a4 * a2;
  if (a4 < 0)
    v9 = -1;
  *((_DWORD *)this + 2) = v8;
  *((_DWORD *)this + 3) = v9;
  v10 = (float)a2 * 5.0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 4) = v10;
  v11 = (_QWORD *)operator new();
  v11[4] = 0;
  v12 = (char *)boost::circular_buffer<float,std::allocator<float>>::allocate((uint64_t)v11, a2);
  *v11 = v12;
  v11[1] = &v12[4 * a2];
  v11[2] = v12;
  v11[3] = v12;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = v11;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 65) = a5;
  *((_BYTE *)this + 66) = 0;
  v13 = *((_DWORD *)this + 2);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *((_DWORD *)this + 3);
    if ((v14 & 0x80000000) == 0 && v14 > v13)
    {
      memset(v16, 0, sizeof(v16));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"It does not make sense for maxRingSizeSeconds (limit on the amount of unread audio queued in the buffer) to be greater than maxBufferLenReached (limit on the total amount of audio written to the buffer)", 202);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
    }
  }
  if (a5)
    std::vector<float>::reserve((void **)this + 5, (unint64_t)v10);
  return this;
}

void sub_1ADDE4180(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[6] = (uint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100](v1 + 4, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void quasar::SyncRecogAudioBuffer::~SyncRecogAudioBuffer(quasar::SyncRecogAudioBuffer *this)
{
  void *v2;

  *(_QWORD *)this = off_1E5D37E90;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100]((uint64_t *)this + 4, 0);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::SyncRecogAudioBuffer::~SyncRecogAudioBuffer(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::SyncRecogAudioBuffer::addAudioHelper(quasar::SyncRecogAudioBuffer *this, float *a2, int a3, char a4)
{
  unsigned int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  float *v38;
  int v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  if (*((_BYTE *)this + 66))
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v49, "Coding error. addAudio() called after endAudio()");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v49);
  }
  if (*((_BYTE *)this + 64))
    return 0;
  v8 = *((_DWORD *)this + 2);
  if ((v8 & 0x80000000) == 0 && *((_DWORD *)this + 6) >= v8)
  {
    *((_BYTE *)this + 64) = 1;
    if (quasar::gLogLevel >= 2)
    {
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Maximum buffer length ", 22);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
LABEL_75:
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v49);
    }
    return 0;
  }
  v9 = *((unsigned int *)this + 3);
  if ((v9 & 0x80000000) == 0 && *(_QWORD *)(*((_QWORD *)this + 4) + 32) >= v9)
  {
    *((_BYTE *)this + 64) = 1;
    if (quasar::gLogLevel >= 2)
    {
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Maximum ring size ", 18);
      v48 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
      goto LABEL_75;
    }
    return 0;
  }
  v10 = a3;
  if ((v8 & 0x80000000) == 0)
  {
    v11 = v8 - *((_DWORD *)this + 6);
    if (v11 >= a3)
      v10 = a3;
    else
      v10 = v11;
  }
  if ((v9 & 0x80000000) == 0)
  {
    v12 = v9 - *(_DWORD *)(*((_QWORD *)this + 4) + 32);
    if (v12 < v10)
      v10 = v12;
  }
  if (v10 < a3 && quasar::gLogLevel >= 5)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Clipped audio length ", 21);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v49);
  }
  v14 = *((_QWORD *)this + 4);
  v15 = *(_QWORD *)(v14 + 8) - *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 32) + v10;
  if (v16 > v15 >> 2)
  {
    v17 = v15 >> 1;
    if (v17 <= v16)
      v17 = *(_QWORD *)(v14 + 32) + v10;
    v18 = *((unsigned int *)this + 3);
    if (v17 >= v18)
      v19 = *((unsigned int *)this + 3);
    else
      v19 = v17;
    if ((v18 & 0x80000000) == 0)
      v20 = v19;
    else
      v20 = v17;
    boost::circular_buffer<float,std::allocator<float>>::set_capacity((char **)v14, v20);
  }
  if (*((_BYTE *)this + 65))
  {
    v21 = (float *)*((_QWORD *)this + 6);
    v22 = (void **)((char *)this + 40);
    v23 = (uint64_t)v21 - *((_QWORD *)this + 5);
    v24 = *((unsigned int *)this + 4);
    if (v24 > v23 >> 2)
    {
      v25 = v24 - ((unint64_t)v23 >> 2);
      v26 = v10 >= v25 ? v25 : v10;
      if ((_DWORD)v26)
      {
        v27 = 0;
        v28 = (_QWORD *)((char *)this + 56);
        do
        {
          v29 = a2[v27];
          if ((a4 & 1) == 0)
          {
            v30 = 1.0;
            if (v29 <= 1.0)
            {
              v30 = a2[v27];
              if (v29 < -1.0)
                v30 = -1.0;
            }
            v29 = v30 * 32767.0;
          }
          if ((unint64_t)v21 >= *v28)
          {
            v32 = (float *)*v22;
            v33 = ((char *)v21 - (_BYTE *)*v22) >> 2;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v35 = *v28 - (_QWORD)v32;
            if (v35 >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 56, v36);
              v32 = (float *)*((_QWORD *)this + 5);
              v21 = (float *)*((_QWORD *)this + 6);
            }
            else
            {
              v37 = 0;
            }
            v38 = (float *)&v37[4 * v33];
            *v38 = v29;
            v31 = v38 + 1;
            while (v21 != v32)
            {
              v39 = *((_DWORD *)v21-- - 1);
              *((_DWORD *)v38-- - 1) = v39;
            }
            *((_QWORD *)this + 5) = v38;
            *((_QWORD *)this + 6) = v31;
            *((_QWORD *)this + 7) = &v37[4 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *v21 = v29;
            v31 = v21 + 1;
          }
          *((_QWORD *)this + 6) = v31;
          ++v27;
          v21 = v31;
        }
        while (v27 != v26);
      }
    }
  }
  if (v10 >= 1)
  {
    v40 = v10;
    do
    {
      v41 = *a2;
      if ((a4 & 1) == 0)
      {
        if (v41 < -1.0)
          v42 = -1.0;
        else
          v42 = *a2;
        if (v41 <= 1.0)
          v43 = v42;
        else
          v43 = 1.0;
        v41 = v43 * 32767.0;
      }
      v44 = (_QWORD *)*((_QWORD *)this + 4);
      *(float *)&v49 = v41;
      boost::circular_buffer<float,std::allocator<float>>::push_back_impl<float const&>(v44, &v49);
      ++a2;
      --v40;
    }
    while (v40);
  }
  if (quasar::gLogLevel > 4)
  {
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Added ", 6);
    v45 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" samples: ", 10);
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"-", 1);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v49);
  }
  *((_DWORD *)this + 6) += v10;
  return 1;
}

void sub_1ADDE477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncRecogAudioBuffer::addAudio(quasar::SyncRecogAudioBuffer *this, const __int16 *a2, uint64_t a3)
{
  int v3;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v10[3];

  v3 = a3;
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize((void **)v10, a3, 0);
  v6 = v10[0];
  if (v3)
  {
    v7 = 0;
    do
    {
      v6[(int)v7] = (float)a2[v7];
      ++v7;
    }
    while (v3 != (_DWORD)v7);
  }
  v8 = quasar::SyncRecogAudioBuffer::addAudioHelper(this, v6, v3, 1);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
  return v8;
}

void sub_1ADDE485C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncRecogAudioBuffer::addScaledAudio(quasar::SyncRecogAudioBuffer *this, float *a2, int a3)
{
  return quasar::SyncRecogAudioBuffer::addAudioHelper(this, a2, a3, 1);
}

uint64_t quasar::SyncRecogAudioBuffer::addUnscaledAudio(quasar::SyncRecogAudioBuffer *this, float *a2, int a3)
{
  return quasar::SyncRecogAudioBuffer::addAudioHelper(this, a2, a3, 0);
}

uint64_t quasar::SyncRecogAudioBuffer::Read(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, a2, 0);
}

BOOL quasar::SyncRecogAudioBuffer::Read(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  if (*(_BYTE *)(a1 + 66))
  {
    if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 24))
    {
      kaldi::Vector<float>::Resize((void **)a2, 0, 0);
      return 0;
    }
    else
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v6 = *(_DWORD *)(a2 + 8);
      if ((int)v6 >= (int)v5)
        v7 = v5;
      else
        v7 = v6;
      kaldi::Vector<float>::Resize((void **)a2, v7, 0);
      return quasar::SyncRecogAudioBuffer::exportAudio(a1, (_QWORD *)a2, v7);
    }
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= a3)
      v11 = a3;
    else
      v11 = *(_DWORD *)(a2 + 8);
    if (a3 <= 0)
      v12 = v10;
    else
      v12 = v11;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    if (v13 >= v12)
    {
      if (v13 < v10)
      {
        kaldi::Vector<float>::Resize((void **)a2, v13, 0);
        v10 = *(_DWORD *)(a2 + 8);
      }
      quasar::SyncRecogAudioBuffer::exportAudio(a1, (_QWORD *)a2, v10);
    }
    else
    {
      kaldi::Vector<float>::Resize((void **)a2, 0, 0);
    }
    return 1;
  }
}

BOOL quasar::SyncRecogAudioBuffer::exportAudio(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD v15[17];

  if (a3 >= 1)
  {
    for (i = 0; i != a3; ++i)
    {
      v6 = *(_QWORD **)(a1 + 32);
      v7 = v6[1];
      v8 = v6[2];
      if (v7 - v8 <= 0)
        v9 = -((v7 - *v6) >> 2);
      else
        v9 = 0;
      *(_DWORD *)(*a2 + 4 * i) = *(_DWORD *)(v8 + 4 * v9);
      v10 = v8 + 4;
      v6[2] = v10;
      if (v10 == v7)
        v6[2] = *v6;
      --v6[4];
    }
  }
  if (quasar::gLogLevel > 4)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Copied ", 7);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" samples (", 10);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"-", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") into data", 11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v15);
  }
  *(_DWORD *)(a1 + 20) += a3;
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) != 0;
}

void sub_1ADDE4AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncRecogAudioBuffer::endAudio(uint64_t this)
{
  *(_BYTE *)(this + 66) = 1;
  return this;
}

uint64_t kaldi::OnlineAudioSourceItf::HasReadAllFrames(kaldi::OnlineAudioSourceItf *this)
{
  return 0;
}

void kaldi::nnet1::GatedRecurrentUnit::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t *v6;
  uint64_t v8;
  BOOL v12;
  float *v13;
  BOOL v14;
  BOOL v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  std::string *v24;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  int inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  void *__p;
  void *v52;
  __int128 v53;
  uint64_t v54;
  std::string v55;
  std::string v56;
  float v57;
  float v58;
  int v59;
  int v60[3];

  *(float *)&v59 = -2.0;
  v60[0] = -1;
  v57 = 0.1;
  v58 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v56);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[19].u32[1], &v55);
  v53 = 0uLL;
  v54 = 0;
  while ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v53);
    if ((SHIBYTE(v54) & 0x80000000) == 0)
    {
      v6 = (uint64_t *)&v53;
      switch(HIBYTE(v54))
      {
        case 9:
          goto LABEL_90;
        case 0xA:
          if ((_QWORD)v53 != 0x61654D736169423CLL || WORD4(v53) != 15982)
            goto LABEL_118;
          goto LABEL_70;
        case 0xB:
          if ((_QWORD)v53 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v53 + 3) == 0x3E65676E61527361)
            goto LABEL_83;
          goto LABEL_89;
        case 0xC:
          goto LABEL_109;
        case 0xD:
          if ((_QWORD)v53 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v53 + 5) == 0x3E7665646474536DLL)
            goto LABEL_77;
          if (HIBYTE(v54) == 9)
            goto LABEL_90;
          goto LABEL_108;
        case 0xF:
          v27 = (_QWORD)v53 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v53 + 7) == 0x3E66656F43657461;
          v13 = (float *)&a1[76];
          if (v27)
            goto LABEL_100;
          if (HIBYTE(v54) == 12)
            goto LABEL_109;
LABEL_89:
          if (HIBYTE(v54) != 9)
            goto LABEL_118;
LABEL_90:
          v28 = (_QWORD)v53 == 0x6D726F4E78614D3CLL && BYTE8(v53) == 62;
          v13 = (float *)&a1[76] + 1;
          if (!v28)
          {
            if (HIBYTE(v54) != 9)
              goto LABEL_118;
            v29 = (_QWORD)v53 == 0x6461724778614D3CLL && BYTE8(v53) == 62;
            v13 = (float *)&a1[19];
            if (!v29)
              goto LABEL_118;
          }
          goto LABEL_100;
        case 0x12:
          if ((_QWORD)v53 == 0x6E6569646172473CLL
            && *((_QWORD *)&v53 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v54 == 15973)
          {
            goto LABEL_115;
          }
LABEL_108:
          if (HIBYTE(v54) != 12)
            goto LABEL_118;
LABEL_109:
          if ((_QWORD)v53 != 0x536D6F646E61523CLL || DWORD2(v53) != 1046766949)
            goto LABEL_118;
          goto LABEL_114;
        case 0x13:
          goto LABEL_61;
        default:
          goto LABEL_118;
      }
    }
    v8 = *((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1) == 10 && *(_QWORD *)v53 == 0x61654D736169423CLL && *(_WORD *)(v53 + 8) == 15982)
    {
LABEL_70:
      v13 = (float *)&v59;
LABEL_100:
      kaldi::ReadBasicType<float>(a2, 0, v13);
      goto LABEL_117;
    }
    if (*((_QWORD *)&v53 + 1) == 11)
    {
      if (*(_QWORD *)v53 == 0x6E6152736169423CLL && *(_QWORD *)(v53 + 3) == 0x3E65676E61527361)
      {
LABEL_83:
        v13 = &v58;
        goto LABEL_100;
      }
      v8 = *((_QWORD *)&v53 + 1);
    }
    if (v8 == 13)
    {
      if (*(_QWORD *)v53 == 0x74536D617261503CLL && *(_QWORD *)(v53 + 5) == 0x3E7665646474536DLL)
      {
LABEL_77:
        v13 = &v57;
        goto LABEL_100;
      }
      v8 = *((_QWORD *)&v53 + 1);
    }
    if (v8 == 15)
    {
      v12 = *(_QWORD *)v53 == 0x61526E7261654C3CLL && *(_QWORD *)(v53 + 7) == 0x3E66656F43657461;
      v13 = (float *)&a1[76];
      if (v12)
        goto LABEL_100;
      v8 = *((_QWORD *)&v53 + 1);
    }
    if (v8 == 9)
    {
      v14 = *(_QWORD *)v53 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v53 + 8) == 62;
      v13 = (float *)&a1[76] + 1;
      if (v14)
        goto LABEL_100;
      v8 = *((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1) == 9)
      {
        v15 = *(_QWORD *)v53 == 0x6461724778614D3CLL && *(_BYTE *)(v53 + 8) == 62;
        v13 = (float *)&a1[19];
        if (v15)
          goto LABEL_100;
        if ((v54 & 0x8000000000000000) == 0)
          goto LABEL_118;
      }
    }
    if (v8 == 18)
    {
      if (*(_QWORD *)v53 == 0x6E6569646172473CLL
        && *(_QWORD *)(v53 + 8) == 0x7079546D726F4E74
        && *(_WORD *)(v53 + 16) == 15973)
      {
LABEL_115:
        v24 = &v55;
        goto LABEL_116;
      }
      v8 = *((_QWORD *)&v53 + 1);
    }
    if (v8 == 12)
    {
      if (*(_QWORD *)v53 == 0x536D6F646E61523CLL && *(_DWORD *)(v53 + 8) == 1046766949)
      {
LABEL_114:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v60);
        goto LABEL_117;
      }
      v8 = *((_QWORD *)&v53 + 1);
    }
    if (v8 != 19)
      goto LABEL_118;
    v6 = (uint64_t *)v53;
LABEL_61:
    v19 = *v6;
    v20 = v6[1];
    v21 = *(uint64_t *)((char *)v6 + 11);
    v22 = v19 == 0x61725474696E493CLL && v20 == 0x79546D726F66736ELL;
    if (!v22 || v21 != 0x3E657079546D726FLL)
    {
LABEL_118:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v53, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Invalid token ", 14);
        if (v54 >= 0)
          v41 = &v53;
        else
          v41 = (__int128 *)v53;
        if (v54 >= 0)
          v42 = HIBYTE(v54);
        else
          v42 = *((_QWORD *)&v53 + 1);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)". Allowed tokens: ", 18);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"(BiasMean|BiasRange|ParamStddev|LearnRateCoef|MaxNorm|MaxGrad|InitTransformType", 79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"|GradientNormType|RandomSeed)", 29);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
      }
      break;
    }
    v24 = &v56;
LABEL_116:
    kaldi::ReadToken(a2, 0, (uint64_t)v24);
LABEL_117:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateParams(a1);
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v56);
  a1[19].i32[1] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v55);
  if (v60[0] >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v60[0]);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v49, a3);
  kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v49, inited, (uint64_t)&a1[20], v57);
  kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v49, inited, (uint64_t)&a1[26], v57);
  kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v49, inited, (uint64_t)&a1[32], v57);
  v34 = a1[40].u32[0];
  v47 = 0;
  v48 = 0;
  v46 = 0;
  kaldi::Vector<float>::Resize((void **)&v46, v34, 0);
  v35 = v47;
  if ((int)v47 >= 1)
  {
    v36 = 0;
    do
    {
      v37 = *(float *)&v59;
      v38 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v39 = v37 + (v38 + -0.5) * v58;
      v35 = (int)v47;
      v46[v36++] = v39;
    }
    while (v36 < v35);
  }
  kaldi::CuVector<float>::Resize((uint64_t)&a1[38], v35, 1);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(&a1[38], (uint64_t)&v46);
  (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 128))(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v46);
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  v46 = (float *)&v50;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_1ADDE5298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (*(char *)(v13 - 169) < 0)
    operator delete(*(void **)(v13 - 192));
  if (*(char *)(v13 - 145) < 0)
    operator delete(*(void **)(v13 - 168));
  if (*(char *)(v13 - 121) < 0)
    operator delete(*(void **)(v13 - 144));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateParams(int32x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[35];

  kaldi::CuMatrix<float>::Resize(this + 20, (3 * *(__int32 *)((char *)&this[1].i32[1] + *(_QWORD *)(*(_QWORD *)this - 24))), *(unsigned int *)((char *)this[1].u32 + *(_QWORD *)(*(_QWORD *)this - 24)), 0, 0);
  v2 = *(unsigned int *)((char *)&this[1].u32[1] + *(_QWORD *)(*(_QWORD *)this - 24));
  kaldi::CuMatrix<float>::Resize(this + 26, (2 * v2), v2, 0, 0);
  v3 = *(unsigned int *)((char *)&this[1].u32[1] + *(_QWORD *)(*(_QWORD *)this - 24));
  kaldi::CuMatrix<float>::Resize(this + 32, v3, v3, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)&this[38], (3 * *(__int32 *)((char *)&this[1].i32[1] + *(_QWORD *)(*(_QWORD *)this - 24))), 0);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, int32x2_t *))(*(_QWORD *)this + 232))(__p, this);
    if ((v8 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_1ADDE5458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t i;
  float v12;
  float v13;
  int v15[4];
  int v16;

  kaldi::Matrix<float>::Matrix((uint64_t)v15, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  v10 = 0;
LABEL_2:
  if (v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v15))
  {
    for (i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v15))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          v12 = v13 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v12 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v10 == i)
      {
        v12 = 1.0;
      }
      else
      {
        v12 = 0.0;
      }
      *(float *)(*(_QWORD *)v15 + 4 * (int)v10 * v16 + 4 * i) = v12;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, v15, 111);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v15);
}

void sub_1ADDE55C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::GatedRecurrentUnit::InitData((int32x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10;
  BOOL v11;
  float *v12;
  BOOL v13;
  __int128 *v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  double v22;
  _QWORD *v24;
  __int128 *v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v29 = 0uLL;
    v30 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v29);
    if (SHIBYTE(v30) < 0)
    {
      v10 = *((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1) == 9)
      {
        v13 = *(_QWORD *)v29 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v29 + 8) == 62;
        v12 = a1 + 153;
        if (!v13)
        {
          v10 = *((_QWORD *)&v29 + 1);
LABEL_27:
          if (v10 == 18)
          {
            if (*(_QWORD *)v29 == 0x6E6569646172473CLL
              && *(_QWORD *)(v29 + 8) == 0x7079546D726F4E74
              && *(_WORD *)(v29 + 16) == 15973)
            {
              goto LABEL_59;
            }
            v10 = *((_QWORD *)&v29 + 1);
          }
          if (v10 != 9)
            goto LABEL_62;
          v16 = (__int128 *)v29;
LABEL_49:
          v19 = *(_QWORD *)v16;
          v20 = *((unsigned __int8 *)v16 + 8);
          v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
          v12 = a1 + 38;
          if (!v21)
            goto LABEL_62;
        }
      }
      else
      {
        if (*((_QWORD *)&v29 + 1) != 15)
          goto LABEL_27;
        v11 = *(_QWORD *)v29 == 0x61526E7261654C3CLL && *(_QWORD *)(v29 + 7) == 0x3E66656F43657461;
        v12 = a1 + 152;
        if (!v11)
          goto LABEL_27;
      }
    }
    else
    {
      if (HIBYTE(v30) != 9)
      {
        if (HIBYTE(v30) == 15)
        {
          v17 = (_QWORD)v29 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v29 + 7) == 0x3E66656F43657461;
          v12 = a1 + 152;
          if (!v17)
          {
LABEL_62:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v30 >= 0)
              v25 = &v29;
            else
              v25 = (__int128 *)v29;
            if (v30 >= 0)
              v26 = HIBYTE(v30);
            else
              v26 = *((_QWORD *)&v29 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          goto LABEL_54;
        }
        if (HIBYTE(v30) != 18)
          goto LABEL_62;
        if ((_QWORD)v29 == 0x6E6569646172473CLL
          && *((_QWORD *)&v29 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v30 == 15973)
        {
LABEL_59:
          __p[0] = 0;
          __p[1] = 0;
          v28 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p);
          *((_DWORD *)a1 + 39) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v28) < 0)
            operator delete(__p[0]);
          goto LABEL_55;
        }
LABEL_47:
        if (HIBYTE(v30) != 9)
          goto LABEL_62;
        v16 = &v29;
        goto LABEL_49;
      }
      v18 = (_QWORD)v29 == 0x6D726F4E78614D3CLL && BYTE8(v29) == 62;
      v12 = a1 + 153;
      if (!v18)
        goto LABEL_47;
    }
LABEL_54:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_55:
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 40), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 64), a2, a3, a4);
  v22 = kaldi::CuVector<float>::Read((uint64_t)(a1 + 76), a2, a3);
  return (*(uint64_t (**)(float *, double))(*(_QWORD *)a1 + 128))(a1, v22);
}

void sub_1ADDE5980()
{
  JUMPOUT(0x1ADDE5988);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::ReadData((float *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::GatedRecurrentUnit::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1ADDE5A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::GatedRecurrentUnit::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::GatedRecurrentUnit::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;

  v8 = a1 + 160;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2, a3);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write(a1 + 208, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write(a1 + 256, a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 304, a2, a3);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::GatedRecurrentUnit::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return (*((_DWORD *)this + 44) * *((_DWORD *)this + 45)
                      + *((_DWORD *)this + 56) * *((_DWORD *)this + 57)
                      + *((_DWORD *)this + 68) * *((_DWORD *)this + 69)
                      + *((_DWORD *)this + 80));
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192));
  return (v1[44] * v1[45] + v1[56] * v1[57] + v1[68] * v1[69] + v1[80]);
}

const void **kaldi::nnet1::GatedRecurrentUnit::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = *(_DWORD *)(a1 + 176) * *(_DWORD *)(a1 + 180);
  v6 = *(_DWORD *)(a1 + 224) * *(_DWORD *)(a1 + 228);
  v7 = *(_DWORD *)(a1 + 272) * *(_DWORD *)(a1 + 276);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, a1 + 160);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v5;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, a1 + 208);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6 + 4 * v5;
  LODWORD(v11) = v7;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, a1 + 256);
  v8 = *(_DWORD *)(a1 + 320);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v7 + 4 * v6 + 4 * v5;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 304), (uint64_t)&v10);
}

const void **`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetParams(_QWORD *a1, void **a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 200), a2);
}

void *kaldi::nnet1::GatedRecurrentUnit::SetParams(_DWORD *a1, char **a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  v4 = a1[44] * a1[45];
  v5 = a1[56] * a1[57];
  v6 = a1[68] * a1[69];
  v10 = 0;
  v11 = 0;
  v9 = *a2;
  LODWORD(v10) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v9);
  v10 = 0;
  v11 = 0;
  v9 = &(*a2)[4 * v4];
  LODWORD(v10) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 52), &v9);
  v10 = 0;
  v11 = 0;
  v9 = &(*a2)[4 * v5 + 4 * v4];
  LODWORD(v10) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 64), &v9);
  v7 = a1[80];
  v10 = 0;
  v11 = 0;
  v9 = &(*a2)[4 * v6 + 4 * v5 + 4 * v4];
  LODWORD(v10) = v7;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v9);
}

void *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetParams(_QWORD *a1, char **a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  float v2;
  float v3;
  float v4;

  v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160);
  v3 = v2 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 208);
  v4 = v3 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 256);
  return v4 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 304);
}

float `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::SumParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 224)));
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*v9 + 296))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  v11 = a1[44] * a1[45];
  v13 = a1[56];
  v12 = a1[57];
  v14 = a1[69];
  v15 = a1[68];
  v24 = 0;
  v25 = 0;
  v23 = *a4;
  LODWORD(v24) = v11;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v20, v9[81], 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v23, (uint64_t)&v20);
  v16 = v15 * v14;
  v17 = v13 * v12;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v20);
  v21 = 0;
  v22 = 0;
  v20 = (uint64_t)*a4 + 4 * v11;
  LODWORD(v21) = v17;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v20, v9[84]);
  v21 = 0;
  v22 = 0;
  v20 = (uint64_t)*a4 + 4 * v17 + 4 * v11;
  LODWORD(v21) = v16;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v20, v9[87]);
  v18 = a1[80];
  v21 = 0;
  v22 = 0;
  v20 = (uint64_t)*a4 + 4 * v16 + 4 * v17 + 4 * v11;
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v9[90], (uint64_t)&v20);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

void sub_1ADDE5FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  uint64_t v4;
  _QWORD v6[4];
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v7, 111, a2, 1.0);
  kaldi::CuMatrix<float>::Resize(v7, *((unsigned int *)this + 57), *((unsigned int *)this + 56), 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)v7, 111, a2, 1.0);
  kaldi::CuMatrix<float>::Resize(v7, *((unsigned int *)this + 69), *((unsigned int *)this + 68), 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)v7, 111, a2, 1.0);
  v4 = *((unsigned int *)this + 80);
  v6[0] = &unk_1E5D341C8;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)v6, a2, 1.0);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADDE6134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::PerturbParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v26, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n Input weights:", 16);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v25 & 0x80u) == 0)
    v3 = v24;
  else
    v3 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v4 = v25;
  else
    v4 = (uint64_t)v24[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n Gate recurrent weights:", 25);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v23 & 0x80u) == 0)
    v7 = v22;
  else
    v7 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v8 = v23;
  else
    v8 = (uint64_t)v22[1];
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n Activation recurrent weights:", 31);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 256);
  if ((v21 & 0x80u) == 0)
    v11 = v20;
  else
    v11 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (uint64_t)v20[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n Bias:", 7);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 304);
  if ((v19 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v16 = v19;
  else
    v16 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  if ((char)v23 < 0)
    operator delete(v22[0]);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  std::stringbuf::str();
  v26[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v26[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v28);
}

void sub_1ADDE6388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Info((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type size;
  std::string *v48;
  __int128 v49;
  void *__p[2];
  unsigned __int8 v52;
  void *v53[2];
  unsigned __int8 v54;
  void *v55[2];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  void *v59[2];
  unsigned __int8 v60;
  void *v61[2];
  unsigned __int8 v62;
  void *v63[2];
  unsigned __int8 v64;
  void *v65[2];
  unsigned __int8 v66;
  void *v67[2];
  unsigned __int8 v68;
  void *v69[2];
  unsigned __int8 v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  __int128 v81;
  int64_t v82;
  int v83;
  std::string v84;

  if (*((_BYTE *)this + 640))
  {
    memset(&v84, 0, sizeof(v84));
    v83 = 0;
    if (*((int *)this + 20) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v70 & 0x80u) == 0)
          v3 = v69;
        else
          v3 = (void **)v69[0];
        if ((v70 & 0x80u) == 0)
          v4 = v70;
        else
          v4 = (std::string::size_type)v69[1];
        v5 = std::string::append(&v71, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v67, ": ");
        if ((v68 & 0x80u) == 0)
          v7 = v67;
        else
          v7 = (void **)v67[0];
        if ((v68 & 0x80u) == 0)
          v8 = v68;
        else
          v8 = (std::string::size_type)v67[1];
        v9 = std::string::append(&v72, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v73.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "\n  Input weights gradient: ");
        if ((v66 & 0x80u) == 0)
          v11 = v65;
        else
          v11 = (void **)v65[0];
        if ((v66 & 0x80u) == 0)
          v12 = v66;
        else
          v12 = (std::string::size_type)v65[1];
        v13 = std::string::append(&v73, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 81) + 48 * v83);
        if ((v64 & 0x80u) == 0)
          v15 = v63;
        else
          v15 = (void **)v63[0];
        if ((v64 & 0x80u) == 0)
          v16 = v64;
        else
          v16 = (std::string::size_type)v63[1];
        v17 = std::string::append(&v74, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v61, "\n  Gate recurrent weights gradient: ");
        if ((v62 & 0x80u) == 0)
          v19 = v61;
        else
          v19 = (void **)v61[0];
        if ((v62 & 0x80u) == 0)
          v20 = v62;
        else
          v20 = (std::string::size_type)v61[1];
        v21 = std::string::append(&v75, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 84) + 48 * v83);
        if ((v60 & 0x80u) == 0)
          v23 = v59;
        else
          v23 = (void **)v59[0];
        if ((v60 & 0x80u) == 0)
          v24 = v60;
        else
          v24 = (std::string::size_type)v59[1];
        v25 = std::string::append(&v76, (const std::string::value_type *)v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v57, "\n  Activation recurrent weights gradient: ");
        if ((v58 & 0x80u) == 0)
          v27 = v57;
        else
          v27 = (void **)v57[0];
        if ((v58 & 0x80u) == 0)
          v28 = v58;
        else
          v28 = (std::string::size_type)v57[1];
        v29 = std::string::append(&v77, (const std::string::value_type *)v27, v28);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 87) + 48 * v83);
        if ((v56 & 0x80u) == 0)
          v31 = v55;
        else
          v31 = (void **)v55[0];
        if ((v56 & 0x80u) == 0)
          v32 = v56;
        else
          v32 = (std::string::size_type)v55[1];
        v33 = std::string::append(&v78, (const std::string::value_type *)v31, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v53, "\n  Bias gradient: ");
        if ((v54 & 0x80u) == 0)
          v35 = v53;
        else
          v35 = (void **)v53[0];
        if ((v54 & 0x80u) == 0)
          v36 = v54;
        else
          v36 = (std::string::size_type)v53[1];
        v37 = std::string::append(&v79, (const std::string::value_type *)v35, v36);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 90) + 32 * v83);
        if ((v52 & 0x80u) == 0)
          v39 = __p;
        else
          v39 = (void **)__p[0];
        if ((v52 & 0x80u) == 0)
          v40 = v52;
        else
          v40 = (std::string::size_type)__p[1];
        v41 = std::string::append(&v80, (const std::string::value_type *)v39, v40);
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v82 = v41->__r_.__value_.__r.__words[2];
        v81 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        if (v82 >= 0)
          v43 = (const std::string::value_type *)&v81;
        else
          v43 = (const std::string::value_type *)v81;
        if (v82 >= 0)
          v44 = HIBYTE(v82);
        else
          v44 = *((_QWORD *)&v81 + 1);
        std::string::append(&v84, v43, v44);
        if (SHIBYTE(v82) < 0)
          operator delete((void *)v81);
        if ((char)v52 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if ((char)v54 < 0)
          operator delete(v53[0]);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if ((char)v56 < 0)
          operator delete(v55[0]);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        if ((char)v58 < 0)
          operator delete(v57[0]);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if ((char)v60 < 0)
          operator delete(v59[0]);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if ((char)v62 < 0)
          operator delete(v61[0]);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if ((char)v64 < 0)
          operator delete(v63[0]);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if ((char)v66 < 0)
          operator delete(v65[0]);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        if ((char)v68 < 0)
          operator delete(v67[0]);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if ((char)v70 < 0)
          operator delete(v69[0]);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v83;
      }
      while (v83 < *((_DWORD *)this + 20));
    }
    v45 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v81, "\n");
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v84;
    else
      v46 = (std::string *)v84.__r_.__value_.__r.__words[0];
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    else
      size = v84.__r_.__value_.__l.__size_;
    v48 = std::string::insert(v45, 0, (const std::string::value_type *)v46, size);
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v82) < 0)
      operator delete((void *)v81);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1ADDE69D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADDE6B98()
{
  JUMPOUT(0x1ADDE6AC0);
}

void sub_1ADDE6BA0()
{
  JUMPOUT(0x1ADDE6AD0);
}

void sub_1ADDE6BA8()
{
  JUMPOUT(0x1ADDE6AE0);
}

void sub_1ADDE6BB0()
{
  JUMPOUT(0x1ADDE6AF0);
}

void sub_1ADDE6BB8()
{
  JUMPOUT(0x1ADDE6B00);
}

void sub_1ADDE6BC0()
{
  JUMPOUT(0x1ADDE6B10);
}

void sub_1ADDE6BC8()
{
  JUMPOUT(0x1ADDE6B20);
}

void sub_1ADDE6BD0()
{
  JUMPOUT(0x1ADDE6B30);
}

void sub_1ADDE6BD8()
{
  JUMPOUT(0x1ADDE6B40);
}

void sub_1ADDE6BE0()
{
  JUMPOUT(0x1ADDE6B50);
}

void sub_1ADDE6BE8()
{
  JUMPOUT(0x1ADDE6B60);
}

void sub_1ADDE6BF0()
{
  JUMPOUT(0x1ADDE6B70);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::GatedRecurrentUnit::InfoGradient((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  void *__p[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  int64_t v67;
  int v68;
  std::string v69;

  memset(&v69, 0, sizeof(v69));
  v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v57 & 0x80u) == 0)
        v3 = v56;
      else
        v3 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v4 = v57;
      else
        v4 = (std::string::size_type)v56[1];
      v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0)
        v7 = v54;
      else
        v7 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v8 = v55;
      else
        v8 = (std::string::size_type)v54[1];
      v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates values: ");
      if ((v53 & 0x80u) == 0)
        v11 = v52;
      else
        v11 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v12 = v53;
      else
        v12 = (std::string::size_type)v52[1];
      v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 46) + 48 * v68);
      if ((v51 & 0x80u) == 0)
        v15 = v50;
      else
        v15 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v16 = v51;
      else
        v16 = (std::string::size_type)v50[1];
      v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activations: ");
      if ((v49 & 0x80u) == 0)
        v19 = v48;
      else
        v19 = (void **)v48[0];
      if ((v49 & 0x80u) == 0)
        v20 = v49;
      else
        v20 = (std::string::size_type)v48[1];
      v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 49) + 48 * v68);
      if ((v47 & 0x80u) == 0)
        v23 = v46;
      else
        v23 = (void **)v46[0];
      if ((v47 & 0x80u) == 0)
        v24 = v47;
      else
        v24 = (std::string::size_type)v46[1];
      v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activations: ");
      if ((v45 & 0x80u) == 0)
        v27 = v44;
      else
        v27 = (void **)v44[0];
      if ((v45 & 0x80u) == 0)
        v28 = v45;
      else
        v28 = (std::string::size_type)v44[1];
      v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 61) + 48 * v68);
      if ((v43 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v43 & 0x80u) == 0)
        v32 = v43;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67 = v33->__r_.__value_.__r.__words[2];
      v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0)
        v35 = (const std::string::value_type *)&v66;
      else
        v35 = (const std::string::value_type *)v66;
      if (v67 >= 0)
        v36 = HIBYTE(v67);
      else
        v36 = *((_QWORD *)&v66 + 1);
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      if ((char)v43 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if ((char)v47 < 0)
        operator delete(v46[0]);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if ((char)v49 < 0)
        operator delete(v48[0]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v69;
  else
    v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_1ADDE70B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADDE7238()
{
  JUMPOUT(0x1ADDE71A0);
}

void sub_1ADDE7240()
{
  JUMPOUT(0x1ADDE71B0);
}

void sub_1ADDE7248()
{
  JUMPOUT(0x1ADDE71C0);
}

void sub_1ADDE7250()
{
  JUMPOUT(0x1ADDE71D0);
}

void sub_1ADDE7258()
{
  JUMPOUT(0x1ADDE71E0);
}

void sub_1ADDE7260()
{
  JUMPOUT(0x1ADDE71F0);
}

void sub_1ADDE7268()
{
  JUMPOUT(0x1ADDE7200);
}

void sub_1ADDE7270()
{
  JUMPOUT(0x1ADDE7210);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GatedRecurrentUnit::InfoPropagate((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  void *__p[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  int64_t v67;
  int v68;
  std::string v69;

  memset(&v69, 0, sizeof(v69));
  v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v57 & 0x80u) == 0)
        v3 = v56;
      else
        v3 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v4 = v57;
      else
        v4 = (std::string::size_type)v56[1];
      v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0)
        v7 = v54;
      else
        v7 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v8 = v55;
      else
        v8 = (std::string::size_type)v54[1];
      v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates diff: ");
      if ((v53 & 0x80u) == 0)
        v11 = v52;
      else
        v11 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v12 = v53;
      else
        v12 = (std::string::size_type)v52[1];
      v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 70) + 48 * v68);
      if ((v51 & 0x80u) == 0)
        v15 = v50;
      else
        v15 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v16 = v51;
      else
        v16 = (std::string::size_type)v50[1];
      v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activation diff: ");
      if ((v49 & 0x80u) == 0)
        v19 = v48;
      else
        v19 = (void **)v48[0];
      if ((v49 & 0x80u) == 0)
        v20 = v49;
      else
        v20 = (std::string::size_type)v48[1];
      v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 67) + 48 * v68);
      if ((v47 & 0x80u) == 0)
        v23 = v46;
      else
        v23 = (void **)v46[0];
      if ((v47 & 0x80u) == 0)
        v24 = v47;
      else
        v24 = (std::string::size_type)v46[1];
      v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activation diff: ");
      if ((v45 & 0x80u) == 0)
        v27 = v44;
      else
        v27 = (void **)v44[0];
      if ((v45 & 0x80u) == 0)
        v28 = v45;
      else
        v28 = (std::string::size_type)v44[1];
      v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 64) + 48 * v68);
      if ((v43 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v43 & 0x80u) == 0)
        v32 = v43;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67 = v33->__r_.__value_.__r.__words[2];
      v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0)
        v35 = (const std::string::value_type *)&v66;
      else
        v35 = (const std::string::value_type *)v66;
      if (v67 >= 0)
        v36 = HIBYTE(v67);
      else
        v36 = *((_QWORD *)&v66 + 1);
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      if ((char)v43 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if ((char)v47 < 0)
        operator delete(v46[0]);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if ((char)v49 < 0)
        operator delete(v48[0]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v69;
  else
    v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_1ADDE7734(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADDE78B8()
{
  JUMPOUT(0x1ADDE7820);
}

void sub_1ADDE78C0()
{
  JUMPOUT(0x1ADDE7830);
}

void sub_1ADDE78C8()
{
  JUMPOUT(0x1ADDE7840);
}

void sub_1ADDE78D0()
{
  JUMPOUT(0x1ADDE7850);
}

void sub_1ADDE78D8()
{
  JUMPOUT(0x1ADDE7860);
}

void sub_1ADDE78E0()
{
  JUMPOUT(0x1ADDE7870);
}

void sub_1ADDE78E8()
{
  JUMPOUT(0x1ADDE7880);
}

void sub_1ADDE78F0()
{
  JUMPOUT(0x1ADDE7890);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2);
}

void kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  int32x2_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  void *v106;
  __int128 v107;
  __int128 v108;
  void *v109;
  __int128 v110;
  __int128 v111;
  void *v112;
  __int128 v113;
  __int128 v114;
  void *v115;
  __int128 v116;
  __int128 v117;
  void *v118;
  __int128 v119;
  __int128 v120;
  void *v121;
  __int128 v122;
  __int128 v123;
  void *v124;
  __int128 v125;
  __int128 v126;
  void *v127;
  _OWORD v128[2];

  v7 = *(unsigned int *)(a2 + 20);
  v8 = *(unsigned int *)(a1 + 96);
  v100 = ((int)v7 / (int)v8);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v127, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v127, (uint64_t)"Running forward propagation for batch size = ", 45);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which contains ", 17);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" frames each from ", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v127);
  }
  v12 = *(void **)(a3 + 32);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, a4, v7, v12);
  v13 = *(_QWORD *)(a1 + 840);
  v94 = (int *)a3;
  v95 = a4;
  if (*(_QWORD *)(a1 + 848) == v13 || *(int *)(v13 + 32 * a4 + 16) < 1)
  {
    v16 = v8;
    v96 = 0;
    v14 = (_QWORD *)a1;
  }
  else
  {
    v14 = (_QWORD *)a1;
    v15 = (int32x2_t *)(*(_QWORD *)(a1 + 864) + 48 * a4);
    v15[4] = (int32x2_t)v12;
    v96 = 1;
    v16 = v8;
    kaldi::CuMatrix<float>::Resize(v15, v8, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1, 0);
  }
  v102 = a4;
  v17 = 3 * a4;
  v18 = v14[43] + 48 * a4;
  v19 = v14[46] + 48 * a4;
  v20 = v14[49];
  v101 = v14[55];
  v21 = v14[58];
  v103 = v14[61];
  kaldi::CuMatrixBase<float>::AddMatMat(v18, a2, CblasNoTrans, (uint64_t)(v14 + 20), CblasTrans, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToRows(v18, (uint64_t)(v14 + 38), 1.0, 1.0);
  v22 = 2 * *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 12);
  v23 = *(_DWORD *)(v18 + 28);
  v24 = *(_QWORD *)(v18 + 32);
  *(_QWORD *)&v128[0] = *(_QWORD *)(v18 + 8);
  DWORD2(v128[0]) = v22;
  *(_QWORD *)((char *)v128 + 12) = *(_QWORD *)(v18 + 20);
  DWORD1(v128[1]) = v23;
  *((_QWORD *)&v128[1] + 1) = v24;
  v127 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v19, (uint64_t)&v127, 111);
  v104 = v16;
  v127 = &unk_1E5D29D40;
  memset(v128, 0, sizeof(v128));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v127);
  v25 = *(int *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 12);
  v26 = *(_DWORD *)(v18 + 28) - 2 * v25;
  v27 = *(_QWORD *)(v18 + 32);
  *(_QWORD *)&v128[0] = *(_QWORD *)(v18 + 8) + 8 * v25;
  DWORD2(v128[0]) = v25;
  *(_QWORD *)((char *)v128 + 12) = *(_QWORD *)(v18 + 20);
  DWORD1(v128[1]) = v26;
  *((_QWORD *)&v128[1] + 1) = v27;
  v127 = &unk_1E5D29D40;
  v99 = v20 + 48 * a4;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v99, (uint64_t)&v127, 111);
  v127 = &unk_1E5D29D40;
  v28 = v103 + 48 * a4;
  memset(v128, 0, sizeof(v128));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v127);
  v98 = v21 + 48 * a4;
  kaldi::CuMatrixBase<float>::Set(v98, 1.0);
  if ((int)v100 >= 1)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v97 = v101 + 16 * v17;
    v32 = a1 + 12;
    v33 = 0uLL;
    do
    {
      v128[0] = v33;
      v128[1] = v33;
      v127 = &unk_1E5D29D40;
      v125 = v33;
      v126 = v33;
      v124 = &unk_1E5D29D40;
      if (v31)
      {
        if (v96)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 864) + 48 * (int)v102);
          v34 = *(_QWORD *)(a1 + 864) + 48 * (int)v102;
          v35 = *(_QWORD *)(v34 + 8);
          v36 = *(_DWORD *)(v34 + 20);
          v37 = *(_DWORD *)(v34 + 24);
          v38 = *(_DWORD *)(v34 + 28);
          v39 = *(_QWORD *)(v34 + 32);
          DWORD2(v122) = *(_DWORD *)(v32 + *(_QWORD *)(*(_QWORD *)a1 - 24));
          *(_QWORD *)&v128[0] = v35;
          *((_QWORD *)&v128[0] + 1) = __PAIR64__(v36, DWORD2(v122));
          *(_QWORD *)&v128[1] = __PAIR64__(v38, v37);
          *((_QWORD *)&v128[1] + 1) = v39;
          v121 = &unk_1E5D29D40;
          v122 = 0u;
          v123 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v121);
          v40 = *(_DWORD *)(v28 + 24);
          v41 = v40 * (v30 - v104);
          v42 = *(_QWORD *)(v28 + 8) + 4 * v41;
          v43 = *(_DWORD *)(v28 + 28) - v41;
          v44 = *(_QWORD *)(v28 + 32);
          DWORD2(v122) = *(_DWORD *)(v28 + 16);
          v45 = v104;
          HIDWORD(v122) = v104;
          *(_QWORD *)&v123 = __PAIR64__(v43, v40);
          *((_QWORD *)&v123 + 1) = v44;
          v121 = &unk_1E5D29D40;
          *(_QWORD *)&v122 = v42;
          v46 = *(_QWORD *)(a1 + 840) + 32 * v102;
          *((_QWORD *)&v119 + 1) = 0;
          v118 = &unk_1E5D29D70;
          *(_QWORD *)&v119 = *(_QWORD *)(v46 + 8) + v29;
          DWORD2(v119) = v104;
          *(_QWORD *)&v120 = *(_QWORD *)(v46 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v127, (uint64_t)&v121, (uint64_t)&v118, 1);
          v121 = &unk_1E5D29D40;
          v122 = 0u;
          v123 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v121);
          v32 = a1 + 12;
        }
        else
        {
          v53 = *(_DWORD *)(v28 + 16);
          v54 = *(_DWORD *)(v28 + 24);
          v55 = v54 * (v30 - v104);
          v56 = *(_QWORD *)(v28 + 8) + 4 * v55;
          v57 = *(_DWORD *)(v28 + 28) - v55;
          v58 = *(_QWORD *)(v28 + 32);
          *(_QWORD *)&v128[0] = v56;
          *((_QWORD *)&v128[0] + 1) = __PAIR64__(v104, v53);
          v45 = v104;
          *(_QWORD *)&v128[1] = __PAIR64__(v57, v54);
          *((_QWORD *)&v128[1] + 1) = v58;
          v121 = &unk_1E5D29D40;
          v122 = 0u;
          v123 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v121);
        }
      }
      else
      {
        v47 = *(_QWORD *)(a1 + 8) + 48 * (int)v102;
        v48 = *(_QWORD *)(v47 + 8);
        v49 = *(_DWORD *)(v47 + 20);
        v50 = *(_DWORD *)(v47 + 24);
        v51 = *(_DWORD *)(v47 + 28);
        v52 = *(_QWORD *)(v47 + 32);
        DWORD2(v122) = *(_DWORD *)(v32 + *(_QWORD *)(*(_QWORD *)a1 - 24));
        *(_QWORD *)&v128[0] = v48;
        *((_QWORD *)&v128[0] + 1) = __PAIR64__(v49, DWORD2(v122));
        *(_QWORD *)&v128[1] = __PAIR64__(v51, v50);
        *((_QWORD *)&v128[1] + 1) = v52;
        v121 = &unk_1E5D29D40;
        v122 = v33;
        v123 = v33;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v121);
        v45 = v104;
      }
      v59 = *(_DWORD *)(v19 + 24);
      v60 = *(_QWORD *)(v19 + 8) + 4 * (int)(v59 * v30);
      v61 = *(_DWORD *)(v19 + 28) - v59 * v30;
      v62 = *(_QWORD *)(v19 + 32);
      DWORD2(v122) = *(_DWORD *)(v19 + 16);
      HIDWORD(v122) = v45;
      *(_QWORD *)&v123 = __PAIR64__(v61, v59);
      *((_QWORD *)&v123 + 1) = v62;
      v121 = &unk_1E5D29D40;
      *(_QWORD *)&v122 = v60;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v121, (uint64_t)&v127, CblasNoTrans, a1 + 208, CblasTrans, 1.0, 1.0);
      v121 = &unk_1E5D29D40;
      v122 = 0u;
      v123 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v121);
      v63 = *(_DWORD *)(v19 + 24);
      v64 = *(_QWORD *)(v19 + 8) + 4 * (int)(v63 * v30);
      v65 = *(_DWORD *)(v19 + 28) - v63 * v30;
      v66 = *(_QWORD *)(v19 + 32);
      DWORD2(v122) = *(_DWORD *)(v32 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      HIDWORD(v122) = v45;
      *(_QWORD *)&v123 = __PAIR64__(v65, v63);
      *((_QWORD *)&v123 + 1) = v66;
      v121 = &unk_1E5D29D40;
      *(_QWORD *)&v122 = v64;
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v121, (uint64_t)&v121);
      v67 = *(unsigned int *)(v32 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      v68 = *(_DWORD *)(v19 + 24);
      v69 = *(_QWORD *)(v19 + 8) + 4 * (int)(v68 * v30) + 4 * v67;
      v70 = *(_DWORD *)(v19 + 28) - v68 * v30 - v67;
      v71 = *(_QWORD *)(v19 + 32);
      DWORD2(v119) = *(_DWORD *)(v32 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      HIDWORD(v119) = v45;
      *(_QWORD *)&v120 = __PAIR64__(v70, v68);
      *((_QWORD *)&v120 + 1) = v71;
      v118 = &unk_1E5D29D40;
      *(_QWORD *)&v119 = v69;
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v118, (uint64_t)&v118);
      v72 = *(_DWORD *)(v97 + 16);
      v73 = *(_DWORD *)(v97 + 24);
      v74 = *(_DWORD *)(v97 + 28) - v73 * v30;
      v75 = *(_QWORD *)(v97 + 32);
      *(_QWORD *)&v125 = *(_QWORD *)(v97 + 8) + 4 * (int)(v73 * v30);
      *((_QWORD *)&v125 + 1) = __PAIR64__(v45, v72);
      *(_QWORD *)&v126 = __PAIR64__(v74, v73);
      *((_QWORD *)&v126 + 1) = v75;
      v115 = &unk_1E5D29D40;
      v116 = 0u;
      v117 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v115);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v124, (uint64_t)&v118, 111, (uint64_t)&v127, 111, 1.0, 0.0);
      v76 = *(_DWORD *)(v99 + 24);
      v77 = *(_QWORD *)(v99 + 8) + 4 * (int)(v76 * v30);
      v78 = *(_DWORD *)(v99 + 28) - v76 * v30;
      v79 = *(_QWORD *)(v99 + 32);
      DWORD2(v116) = *(_DWORD *)(v99 + 16);
      HIDWORD(v116) = v45;
      *(_QWORD *)&v117 = __PAIR64__(v78, v76);
      *((_QWORD *)&v117 + 1) = v79;
      v115 = &unk_1E5D29D40;
      *(_QWORD *)&v116 = v77;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v115, (uint64_t)&v124, CblasNoTrans, a1 + 256, CblasNoTrans, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v115, (uint64_t)&v115);
      v80 = *(_DWORD *)(v98 + 24);
      v81 = *(_QWORD *)(v98 + 8) + 4 * (int)(v80 * v30);
      v82 = *(_DWORD *)(v98 + 28) - v80 * v30;
      v83 = *(_QWORD *)(v98 + 32);
      DWORD2(v113) = *(_DWORD *)(v98 + 16);
      HIDWORD(v113) = v45;
      *(_QWORD *)&v114 = __PAIR64__(v82, v80);
      *((_QWORD *)&v114 + 1) = v83;
      v112 = &unk_1E5D29D40;
      *(_QWORD *)&v113 = v81;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v112, (uint64_t)&v121, 111, -1.0, 1.0);
      v84 = *(_DWORD *)(v28 + 24);
      v85 = *(_QWORD *)(v28 + 8) + 4 * (int)(v84 * v30);
      v86 = *(_DWORD *)(v28 + 28) - v84 * v30;
      v87 = *(_QWORD *)(v28 + 32);
      DWORD2(v110) = *(_DWORD *)(v28 + 16);
      HIDWORD(v110) = v45;
      *(_QWORD *)&v111 = __PAIR64__(v86, v84);
      *((_QWORD *)&v111 + 1) = v87;
      v109 = &unk_1E5D29D40;
      *(_QWORD *)&v110 = v85;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v109, (uint64_t)&v112, 111, (uint64_t)&v127, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v109, (uint64_t)&v121, 111, (uint64_t)&v115, 111, 1.0, 1.0);
      v88 = *(_QWORD *)(a1 + 416) + 48 * (int)v102;
      v89 = *(_DWORD *)(v88 + 16);
      v90 = *(_DWORD *)(v88 + 24);
      v91 = *(_QWORD *)(v88 + 8) + 4 * (int)(v90 * v30);
      v92 = *(_DWORD *)(v88 + 28) - v90 * v30;
      v93 = *(_QWORD *)(v88 + 32);
      *((_QWORD *)&v107 + 1) = __PAIR64__(v104, v89);
      *(_QWORD *)&v108 = __PAIR64__(v92, v90);
      *((_QWORD *)&v108 + 1) = v93;
      v106 = &unk_1E5D29D40;
      *(_QWORD *)&v107 = v91;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v106, (uint64_t)&v115, 111);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v106, (uint64_t)&v127, 111, -1.0, 1.0);
      v106 = &unk_1E5D29D40;
      v107 = 0u;
      v108 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v106);
      v109 = &unk_1E5D29D40;
      v110 = 0u;
      v111 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v109);
      v112 = &unk_1E5D29D40;
      v113 = 0u;
      v114 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v112);
      v115 = &unk_1E5D29D40;
      v116 = 0u;
      v117 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v115);
      v118 = &unk_1E5D29D40;
      v119 = 0u;
      v120 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v118);
      v121 = &unk_1E5D29D40;
      v122 = 0u;
      v123 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v121);
      v124 = &unk_1E5D29D40;
      v125 = 0u;
      v126 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v124);
      v127 = &unk_1E5D29D40;
      memset(v128, 0, sizeof(v128));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v127);
      v33 = 0uLL;
      ++v31;
      v30 += v104;
      v29 += 4 * (int)v104;
      v32 = a1 + 12;
    }
    while (v100 != v31);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v94, v28, 111);
  kaldi::nnet1::GatedRecurrentUnit::SaveLastState((kaldi::nnet1::GatedRecurrentUnit *)a1, v95);
}

void sub_1ADDE831C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  _OWORD *v69;

  a69 = &unk_1E5D29D40;
  *v69 = 0u;
  v69[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a69);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 43) + 48 * a2), a3, (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 46) + 48 * a2), a3, (2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 49) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 52) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 55) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 58) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 61) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  *(_QWORD *)(*((_QWORD *)this + 43) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 46) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 49) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 52) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 55) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 58) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 61) + 48 * a2 + 32) = a4;
}

void sub_1ADDE86C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::SaveLastState(kaldi::nnet1::GatedRecurrentUnit *this, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v13, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Saving last activation batch ", 29);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v13);
  }
  v4 = *((_QWORD *)this + 61) + 48 * a2;
  v5 = *((_DWORD *)this + 24);
  v6 = *(_DWORD *)(v4 + 16);
  v7 = (int *)(*((_QWORD *)this + 1) + 48 * a2);
  v8 = *(_DWORD *)(v4 + 24);
  v9 = v8 * (*(_DWORD *)(v4 + 20) - v5);
  v10 = *(_QWORD *)(v4 + 8) + 4 * v9;
  v11 = *(_DWORD *)(v4 + 28) - v9;
  v12 = *(_QWORD *)(v4 + 32);
  *((_QWORD *)&v14 + 1) = __PAIR64__(v5, v6);
  *(_QWORD *)&v15 = __PAIR64__(v11, v8);
  *((_QWORD *)&v15 + 1) = v12;
  v13 = &unk_1E5D29D40;
  *(_QWORD *)&v14 = v10;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v7, (uint64_t)&v13, 111);
  v13 = &unk_1E5D29D40;
  v14 = 0u;
  v15 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v13);
}

void sub_1ADDE87C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;

  v12 = v10;
  a10 = v12;
  *v11 = 0u;
  v11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(kaldi::nnet1::GatedRecurrentUnit *a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  _QWORD v42[4];
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = (void *)a3[3];
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(a1, 0, 1, v6);
  v7 = *((_QWORD *)a1 + 105);
  if (*((_QWORD *)a1 + 106) != v7 && *(int *)(v7 + 16) >= 1)
  {
    v8 = (int32x2_t *)*((_QWORD *)a1 + 108);
    v8[4] = (int32x2_t)v6;
    kaldi::CuMatrix<float>::Resize(v8, 1, *(unsigned int *)(*((_QWORD *)a1 + 1) + 16), 1, 0);
  }
  v9 = *((_QWORD *)a1 + 43);
  v53 = 0;
  v54 = 0;
  v51 = &unk_1E5D29D70;
  v52 = 0;
  v52 = *(_QWORD *)(v9 + 8);
  LODWORD(v53) = *(_DWORD *)(v9 + 16);
  v54 = *(_QWORD *)(v9 + 32);
  v10 = *((_QWORD *)a1 + 46);
  v49 = 0;
  v11 = *(_QWORD *)(v10 + 8);
  v47 = &unk_1E5D29D70;
  v48 = v11;
  LODWORD(v49) = *(_DWORD *)(v10 + 16);
  v50 = *(_QWORD *)(v10 + 32);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v51, (uint64_t)a1 + 160, CblasNoTrans, a2, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v51, (uint64_t)a1 + 304, 1.0, 1.0);
  v12 = 2 * *(_DWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v43 = &unk_1E5D29D70;
  v44 = v52;
  v46 = v54;
  v45 = v12;
  kaldi::CuVectorBase<float>::CopyFromVec(&v47, (uint64_t)&v43);
  v13 = *((_QWORD *)a1 + 1);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_DWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 32);
  v43 = &unk_1E5D29D70;
  v44 = v14;
  v46 = v16;
  v45 = v15;
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v47, (uint64_t)a1 + 208, CblasNoTrans, (uint64_t)&v43, 1.0, 1.0);
  v17 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v42[0] = &unk_1E5D29D70;
  v42[1] = v48;
  v42[3] = v50;
  v42[2] = v17;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v42, (uint64_t)v42);
  v18 = *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v41[0] = &unk_1E5D29D70;
  v41[1] = v48 + 4 * v18;
  v41[3] = v50;
  v41[2] = v18;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v41, (uint64_t)v41);
  v19 = *((_QWORD *)a1 + 55);
  v39 = 0;
  v20 = *(_QWORD *)(v19 + 8);
  v38[0] = &unk_1E5D29D70;
  v38[1] = v20;
  LODWORD(v39) = *(_DWORD *)(v19 + 16);
  v40 = *(_QWORD *)(v19 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v38, (uint64_t)v41, (uint64_t)&v43, 1.0, 0.0);
  v21 = *((_QWORD *)a1 + 49);
  v36 = 0;
  v22 = *(_QWORD *)(v21 + 8);
  v35[0] = &unk_1E5D29D70;
  v35[1] = v22;
  LODWORD(v36) = *(_DWORD *)(v21 + 16);
  v37 = *(_QWORD *)(v21 + 32);
  v23 = *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v31 = &unk_1E5D29D70;
  v32 = v52 + 8 * v23;
  v34 = v54;
  v33 = v23;
  kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v35, (uint64_t)a1 + 256, CblasNoTrans, (uint64_t)v38, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)v35, (uint64_t)v35);
  v24 = *((_QWORD *)a1 + 58);
  v33 = 0;
  v25 = *(_QWORD *)(v24 + 8);
  v31 = &unk_1E5D29D70;
  v32 = v25;
  LODWORD(v33) = *(_DWORD *)(v24 + 16);
  v34 = *(_QWORD *)(v24 + 32);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v31, 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v31, (uint64_t)v42, -1.0, 1.0);
  v26 = *((_QWORD *)a1 + 61);
  v29 = 0;
  v27 = *(_QWORD *)(v26 + 8);
  v28[0] = &unk_1E5D29D70;
  v28[1] = v27;
  LODWORD(v29) = *(_DWORD *)(v26 + 16);
  v30 = *(_QWORD *)(v26 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v28, (uint64_t)&v31, (uint64_t)&v43, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v28, (uint64_t)v42, (uint64_t)v35, 1.0, 1.0);
  kaldi::CuVectorBase<float>::CopyFromVec(a3, (uint64_t)v28);
  kaldi::nnet1::GatedRecurrentUnit::SaveLastState(a1, 0);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((kaldi::nnet1::GatedRecurrentUnit *)((char *)a1 + *(_QWORD *)(*a1 - 136)), a2, a3);
}

void kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  signed int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  __int128 v99;
  __int128 v100;
  void *v101;
  __int128 v102;
  __int128 v103;
  _QWORD v104[5];
  _QWORD v105[5];
  _QWORD v106[5];
  _QWORD v107[36];

  v9 = *(unsigned int *)(a2 + 20);
  v10 = *(_DWORD *)(a1 + 96);
  kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers((uint64_t *)a1);
  v84 = (int)v9 / v10;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v107, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Running backward propagation for batch size = ", 46);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v107);
  }
  v74 = a5;
  if (a5)
    v14 = a5;
  else
    v14 = a4;
  kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, a6, v9, *(void **)(v14 + 32));
  v15 = *(_QWORD *)(a1 + 368) + 48 * a6;
  v16 = *(_QWORD *)a1;
  v17 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v18 = *(_DWORD *)(v15 + 28);
  v19 = *(_QWORD *)(v15 + 32);
  v107[1] = *(_QWORD *)(v15 + 8);
  LODWORD(v107[2]) = v17;
  *(_QWORD *)((char *)&v107[2] + 4) = *(_QWORD *)(v15 + 20);
  HIDWORD(v107[3]) = v18;
  v107[4] = v19;
  v107[0] = &unk_1E5D29D40;
  v20 = *(int *)(a1 + *(_QWORD *)(v16 - 24) + 12);
  v21 = *(_DWORD *)(v15 + 28) - v20;
  v22 = *(_QWORD *)(v15 + 32);
  v106[1] = *(_QWORD *)(v15 + 8) + 4 * v20;
  LODWORD(v106[2]) = v20;
  *(_QWORD *)((char *)&v106[2] + 4) = *(_QWORD *)(v15 + 20);
  HIDWORD(v106[3]) = v21;
  v106[4] = v22;
  v106[0] = &unk_1E5D29D40;
  v83 = *(_QWORD *)(a1 + 392);
  v79 = *(_QWORD *)(a1 + 464);
  v23 = *(_QWORD *)(a1 + 488);
  v24 = *(_QWORD *)(a1 + 512) + 48 * a6;
  v25 = *(_QWORD *)(a1 + 560) + 48 * a6;
  LODWORD(v15) = *(_DWORD *)(a1 + *(_QWORD *)(v16 - 24) + 12);
  v26 = *(_DWORD *)(v25 + 28);
  v27 = *(_QWORD *)(v25 + 32);
  v105[1] = *(_QWORD *)(v25 + 8);
  LODWORD(v105[2]) = v15;
  *(_QWORD *)((char *)&v105[2] + 4) = *(_QWORD *)(v25 + 20);
  HIDWORD(v105[3]) = v26;
  v105[4] = v27;
  v105[0] = &unk_1E5D29D40;
  v28 = *(int *)(a1 + *(_QWORD *)(v16 - 24) + 12);
  LODWORD(v20) = *(_DWORD *)(v25 + 28) - v28;
  v29 = *(_QWORD *)(v25 + 32);
  v104[1] = *(_QWORD *)(v25 + 8) + 4 * v28;
  LODWORD(v104[2]) = v28;
  v78 = v25;
  *(_QWORD *)((char *)&v104[2] + 4) = *(_QWORD *)(v25 + 20);
  HIDWORD(v104[3]) = v20;
  v104[4] = v29;
  v104[0] = &unk_1E5D29D40;
  v82 = *(_QWORD *)(a1 + 536);
  v75 = *(_QWORD *)(a1 + 584);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v24, a4, 111);
  v30 = v23 + 48 * a6;
  DWORD2(v102) = v104[2];
  HIDWORD(v102) = v9 - v10;
  LODWORD(v103) = v104[3];
  DWORD1(v103) = HIDWORD(v104[3]) - LODWORD(v104[3]) * v10;
  *((_QWORD *)&v103 + 1) = v104[4];
  v101 = &unk_1E5D29D40;
  *(_QWORD *)&v102 = v104[1] + 4 * LODWORD(v104[3]) * v10;
  DWORD2(v99) = v106[2];
  HIDWORD(v99) = v9 - v10;
  LODWORD(v100) = v106[3];
  DWORD1(v100) = HIDWORD(v106[3]) - LODWORD(v106[3]) * v10;
  *((_QWORD *)&v100 + 1) = v106[4];
  v98 = &unk_1E5D29D40;
  *(_QWORD *)&v99 = v106[1] + 4 * LODWORD(v106[3]) * v10;
  v31 = *(_DWORD *)(v30 + 16);
  v32 = *(_QWORD *)(v30 + 32);
  *(_QWORD *)&v96 = *(_QWORD *)(v30 + 8);
  DWORD2(v96) = v31;
  HIDWORD(v96) = v9 - v10;
  *(_QWORD *)&v97 = *(_QWORD *)(v30 + 24);
  *((_QWORD *)&v97 + 1) = v32;
  v95 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v101, (uint64_t)&v98, (uint64_t)&v95);
  v95 = &unk_1E5D29D40;
  v96 = 0u;
  v97 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
  v98 = &unk_1E5D29D40;
  v99 = 0u;
  v100 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
  v101 = &unk_1E5D29D40;
  v102 = 0u;
  v103 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
  *((_QWORD *)&v102 + 1) = __PAIR64__(v10, v104[2]);
  v103 = *(_OWORD *)&v104[3];
  v101 = &unk_1E5D29D40;
  *(_QWORD *)&v102 = v104[1];
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v101);
  v101 = &unk_1E5D29D40;
  v102 = 0u;
  v103 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v105, (uint64_t)v107, *(_QWORD *)(a1 + 416) + 48 * a6);
  v33 = v82 + 48 * a6;
  kaldi::CuMatrixBase<float>::DiffTanh(v33, v83 + 48 * a6, (uint64_t)v107);
  v34 = 0;
  v35 = v84;
  v80 = v10 * (v84 - 1);
  v81 = v84 - 1;
  v77 = v10 * v84;
  v36 = v79 + 48 * a6;
  v37 = v75 + 48 * a6;
  do
  {
    v38 = v80 + v34;
    v39 = *(_DWORD *)(v24 + 16);
    v40 = *(_QWORD *)(v24 + 8);
    v41 = *(_DWORD *)(v24 + 24);
    v42 = *(_DWORD *)(v24 + 28);
    v43 = *(_QWORD *)(v24 + 32);
    *((_QWORD *)&v102 + 1) = __PAIR64__(v10, v39);
    LODWORD(v103) = v41;
    DWORD1(v103) = v42 - v41 * (v80 + v34);
    *((_QWORD *)&v103 + 1) = v43;
    v101 = &unk_1E5D29D40;
    *(_QWORD *)&v102 = v40 + 4 * v41 * (v80 + v34);
    v85 = v35 - 1;
    if (v35 - 1 < v81)
    {
      v44 = v41 * (v77 + v34);
      *((_QWORD *)&v99 + 1) = __PAIR64__(v10, v39);
      LODWORD(v100) = v41;
      DWORD1(v100) = v42 - v44;
      *((_QWORD *)&v100 + 1) = v43;
      v98 = &unk_1E5D29D40;
      *(_QWORD *)&v99 = v40 + 4 * v44;
      v45 = *(_DWORD *)(v36 + 24);
      v46 = v45 * (v77 + v34);
      v47 = *(_QWORD *)(v36 + 8) + 4 * v46;
      v48 = *(_DWORD *)(v36 + 28) - v46;
      v49 = *(_QWORD *)(v36 + 32);
      DWORD2(v96) = *(_DWORD *)(v36 + 16);
      HIDWORD(v96) = v10;
      *(_QWORD *)&v97 = __PAIR64__(v48, v45);
      *((_QWORD *)&v97 + 1) = v49;
      v95 = &unk_1E5D29D40;
      *(_QWORD *)&v96 = v47;
      v50 = *(_DWORD *)(v37 + 24);
      LODWORD(v49) = v50 * (v77 + v34);
      v51 = *(_QWORD *)(v37 + 8) + 4 * (int)v49;
      v52 = *(_DWORD *)(v37 + 28) - v49;
      v53 = *(_QWORD *)(v37 + 32);
      DWORD2(v93) = *(_DWORD *)(v37 + 16);
      HIDWORD(v93) = v10;
      *(_QWORD *)&v94 = __PAIR64__(v52, v50);
      *((_QWORD *)&v94 + 1) = v53;
      v92 = &unk_1E5D29D40;
      *(_QWORD *)&v93 = v51;
      v54 = LODWORD(v106[3]) * (v77 + v34);
      *((_QWORD *)&v90 + 1) = __PAIR64__(v10, v106[2]);
      LODWORD(v91) = v106[3];
      DWORD1(v91) = HIDWORD(v106[3]) - v54;
      *((_QWORD *)&v91 + 1) = v106[4];
      v89 = &unk_1E5D29D40;
      *(_QWORD *)&v90 = v106[1] + 4 * v54;
      v55 = *(_DWORD *)(v78 + 24);
      v56 = v55 * (v77 + v34);
      v57 = *(_QWORD *)(v78 + 8) + 4 * v56;
      v58 = *(_DWORD *)(v78 + 28) - v56;
      v59 = *(_QWORD *)(v78 + 32);
      DWORD2(v87) = *(_DWORD *)(v78 + 16);
      HIDWORD(v87) = v10;
      *(_QWORD *)&v88 = __PAIR64__(v58, v55);
      *((_QWORD *)&v88 + 1) = v59;
      v86 = &unk_1E5D29D40;
      *(_QWORD *)&v87 = v57;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v101, (uint64_t)&v98, 111, (uint64_t)&v95, 111, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v101, (uint64_t)&v92, 111, (uint64_t)&v89, 111, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v101, (uint64_t)&v86, CblasNoTrans, a1 + 208, CblasNoTrans, 1.0, 1.0);
      v86 = &unk_1E5D29D40;
      v87 = 0u;
      v88 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
      v89 = &unk_1E5D29D40;
      v90 = 0u;
      v91 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v89);
      v92 = &unk_1E5D29D40;
      v93 = 0u;
      v94 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v92);
      v95 = &unk_1E5D29D40;
      v96 = 0u;
      v97 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
      v98 = &unk_1E5D29D40;
      v99 = 0u;
      v100 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
    }
    *((_QWORD *)&v99 + 1) = __PAIR64__(v10, v105[2]);
    LODWORD(v100) = v105[3];
    DWORD1(v100) = HIDWORD(v105[3]) - LODWORD(v105[3]) * v38;
    *((_QWORD *)&v100 + 1) = v105[4];
    v98 = &unk_1E5D29D40;
    *(_QWORD *)&v99 = v105[1] + 4 * LODWORD(v105[3]) * v38;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v98, (uint64_t)&v101);
    v60 = *(_DWORD *)(v33 + 24);
    v61 = *(_QWORD *)(v33 + 8) + 4 * (int)(v60 * v38);
    v62 = *(_DWORD *)(v33 + 28) - v60 * v38;
    v63 = *(_QWORD *)(v33 + 32);
    DWORD2(v96) = *(_DWORD *)(v33 + 16);
    HIDWORD(v96) = v10;
    *(_QWORD *)&v97 = __PAIR64__(v62, v60);
    *((_QWORD *)&v97 + 1) = v63;
    v95 = &unk_1E5D29D40;
    *(_QWORD *)&v96 = v61;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v95, (uint64_t)&v101);
    v64 = *(_DWORD *)(v37 + 24);
    v65 = *(_QWORD *)(v37 + 8) + 4 * (int)(v64 * v38);
    v66 = *(_DWORD *)(v37 + 28) - v64 * v38;
    v67 = *(_QWORD *)(v37 + 32);
    DWORD2(v93) = *(_DWORD *)(v37 + 16);
    HIDWORD(v93) = v10;
    *(_QWORD *)&v94 = __PAIR64__(v66, v64);
    *((_QWORD *)&v94 + 1) = v67;
    v92 = &unk_1E5D29D40;
    *(_QWORD *)&v93 = v65;
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v92, (uint64_t)&v95, CblasNoTrans, a1 + 256, CblasNoTrans, 1.0, 0.0);
    *((_QWORD *)&v90 + 1) = __PAIR64__(v10, v104[2]);
    LODWORD(v91) = v104[3];
    DWORD1(v91) = HIDWORD(v104[3]) - LODWORD(v104[3]) * v38;
    *((_QWORD *)&v91 + 1) = v104[4];
    v89 = &unk_1E5D29D40;
    *(_QWORD *)&v90 = v104[1] + 4 * LODWORD(v104[3]) * v38;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v89, (uint64_t)&v92);
    v89 = &unk_1E5D29D40;
    v90 = 0u;
    v91 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v89);
    v92 = &unk_1E5D29D40;
    v93 = 0u;
    v94 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v92);
    v95 = &unk_1E5D29D40;
    v96 = 0u;
    v97 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
    v98 = &unk_1E5D29D40;
    v99 = 0u;
    v100 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
    v101 = &unk_1E5D29D40;
    v102 = 0u;
    v103 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
    v34 -= v10;
    v35 = v85;
  }
  while (v85 > 0);
  if (v74)
  {
    v68 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
    v69 = *(_QWORD *)(a1 + 168);
    v70 = *(_DWORD *)(a1 + 184);
    v71 = *(_DWORD *)(a1 + 188);
    v72 = *(_QWORD *)(a1 + 192);
    DWORD2(v102) = *(_DWORD *)(a1 + 176);
    HIDWORD(v102) = 2 * v68;
    *(_QWORD *)&v103 = __PAIR64__(v71, v70);
    *((_QWORD *)&v103 + 1) = v72;
    v101 = &unk_1E5D29D40;
    *(_QWORD *)&v102 = v69;
    v73 = 2 * v68 * v70;
    *((_QWORD *)&v99 + 1) = __PAIR64__(v68, DWORD2(v102));
    LODWORD(v100) = v70;
    DWORD1(v100) = v71 - v73;
    *((_QWORD *)&v100 + 1) = v72;
    v98 = &unk_1E5D29D40;
    *(_QWORD *)&v99 = v69 + 4 * v73;
    kaldi::CuMatrixBase<float>::AddMatMat(v74, v78, CblasNoTrans, (uint64_t)&v101, CblasNoTrans, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(v74, v33, CblasNoTrans, (uint64_t)&v98, CblasNoTrans, 1.0, 1.0);
    v98 = &unk_1E5D29D40;
    v99 = 0u;
    v100 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
    v101 = &unk_1E5D29D40;
    v102 = 0u;
    v103 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
  }
  v104[0] = &unk_1E5D29D40;
  memset(&v104[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v104);
  v105[0] = &unk_1E5D29D40;
  memset(&v105[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v105);
  v106[0] = &unk_1E5D29D40;
  memset(&v106[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v106);
  v107[0] = &unk_1E5D29D40;
  memset(&v107[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v107);
}

void sub_1ADDE9528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, _OWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a68;
  _OWORD *v68;

  *v68 = 0u;
  v68[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a53);
  a58 = &unk_1E5D29D40;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a58);
  a63 = &unk_1E5D29D40;
  *a15 = 0u;
  a15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a63);
  a68 = &unk_1E5D29D40;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a68);
  STACK[0x200] = (unint64_t)&unk_1E5D29D40;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers(uint64_t *this)
{
  uint64_t *v1;

  if (!*((_BYTE *)this + 337))
  {
    v1 = this;
    std::vector<kaldi::CuMatrix<float>>::resize(this + 64, *((int *)this + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 67, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 70, *((int *)v1 + 20));
    this = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 73, *((int *)v1 + 20));
    *((_BYTE *)v1 + 337) = 1;
  }
  return this;
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 64) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 67) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 70) + 48 * a2), a3, (2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 73) + 48 * a2), a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  *(_QWORD *)(*((_QWORD *)this + 64) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 67) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 70) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 73) + 48 * a2 + 32) = a4;
}

void sub_1ADDE996C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::GatedRecurrentUnit::AccumGradients(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;

  v9 = *((_DWORD *)this + 24);
  v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(this);
  v14 = *((float *)this + 15);
  v15 = a5;
  *(_DWORD *)(*((_QWORD *)this + 77) + 4 * a5) = v10;
  v16 = 3 * a5;
  v17 = *((_QWORD *)this + 70) + 48 * a5;
  v18 = *((_QWORD *)this + 67);
  v19 = *((_QWORD *)this + 81) + 16 * v16;
  *(_QWORD *)(v19 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 84) + 16 * v16 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 87) + 16 * v16 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 90) + 32 * v15 + 24) = a4;
  v20 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  v21 = *(_DWORD *)(v19 + 16);
  v22 = *(_QWORD *)(v19 + 8);
  v23 = *(_DWORD *)(v19 + 24);
  v24 = *(_DWORD *)(v19 + 28);
  v25 = *(_QWORD *)(v19 + 32);
  DWORD2(v56) = v21;
  HIDWORD(v56) = 2 * v20;
  *(_QWORD *)&v57 = __PAIR64__(v24, v23);
  *((_QWORD *)&v57 + 1) = v25;
  v55 = &unk_1E5D29D40;
  *(_QWORD *)&v56 = v22;
  v26 = v23 * 2 * v20;
  *((_QWORD *)&v53 + 1) = __PAIR64__(v20, v21);
  LODWORD(v54) = v23;
  DWORD1(v54) = v24 - v26;
  *((_QWORD *)&v54 + 1) = v25;
  v52 = &unk_1E5D29D40;
  *(_QWORD *)&v53 = v22 + 4 * v26;
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v55, v17, CblasTrans, a2, CblasNoTrans, 1.0, v14);
  v27 = v18 + 16 * v16;
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v52, v27, CblasTrans, a2, CblasNoTrans, 1.0, v14);
  v28 = *((_QWORD *)this + 84) + 48 * v15;
  v29 = *(_DWORD *)(v17 + 24);
  v30 = *(_QWORD *)(v17 + 8) + 4 * (int)(v29 * v9);
  v31 = *(_DWORD *)(v17 + 28) - v29 * v9;
  v32 = *(_QWORD *)(v17 + 32);
  DWORD2(v50) = *(_DWORD *)(v17 + 16);
  HIDWORD(v50) = v10 - v9;
  *(_QWORD *)&v51 = __PAIR64__(v31, v29);
  *((_QWORD *)&v51 + 1) = v32;
  v49 = &unk_1E5D29D40;
  *(_QWORD *)&v50 = v30;
  v33 = *((_QWORD *)this + 61) + 48 * v15;
  LODWORD(v30) = *(_DWORD *)(v33 + 16);
  v34 = *(_QWORD *)(v33 + 32);
  *(_QWORD *)&v47 = *(_QWORD *)(v33 + 8);
  DWORD2(v47) = v30;
  HIDWORD(v47) = v10 - v9;
  *(_QWORD *)&v48 = *(_QWORD *)(v33 + 24);
  *((_QWORD *)&v48 + 1) = v34;
  v46 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMatMat(v28, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, CblasNoTrans, 1.0, v14);
  v46 = &unk_1E5D29D40;
  v47 = 0u;
  v48 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v46);
  v49 = &unk_1E5D29D40;
  v50 = 0u;
  v51 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v49);
  v35 = *((_QWORD *)this + 87) + 48 * v15;
  v36 = *(_DWORD *)(v27 + 24);
  v37 = *(_QWORD *)(v27 + 8) + 4 * (int)(v36 * v9);
  v38 = *(_DWORD *)(v27 + 28) - v36 * v9;
  v39 = *(_QWORD *)(v27 + 32);
  DWORD2(v50) = *(_DWORD *)(v27 + 16);
  HIDWORD(v50) = v10 - v9;
  *(_QWORD *)&v51 = __PAIR64__(v38, v36);
  *((_QWORD *)&v51 + 1) = v39;
  v49 = &unk_1E5D29D40;
  *(_QWORD *)&v50 = v37;
  v40 = *((_QWORD *)this + 55) + 48 * v15;
  LODWORD(v37) = *(_DWORD *)(v40 + 16);
  v41 = *(_QWORD *)(v40 + 32);
  *(_QWORD *)&v47 = *(_QWORD *)(v40 + 8);
  DWORD2(v47) = v37;
  HIDWORD(v47) = v10 - v9;
  *(_QWORD *)&v48 = *(_QWORD *)(v40 + 24);
  *((_QWORD *)&v48 + 1) = v41;
  v46 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMatMat(v35, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, CblasNoTrans, 1.0, v14);
  v46 = &unk_1E5D29D40;
  v47 = 0u;
  v48 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v46);
  v49 = &unk_1E5D29D40;
  v50 = 0u;
  v51 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v49);
  v42 = *((_QWORD *)this + 90) + 32 * v15;
  v43 = 2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  *((_QWORD *)&v50 + 1) = 0;
  v49 = &unk_1E5D29D70;
  *(_QWORD *)&v50 = *(_QWORD *)(v42 + 8);
  DWORD2(v50) = v43;
  *(_QWORD *)&v51 = *(_QWORD *)(v42 + 24);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v49, v17, 1.0, v14);
  v44 = *((_QWORD *)this + 90) + 32 * v15;
  v45 = *(int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  *((_QWORD *)&v50 + 1) = 0;
  v49 = &unk_1E5D29D70;
  *(_QWORD *)&v50 = *(_QWORD *)(v44 + 8) + 8 * v45;
  DWORD2(v50) = v45;
  *(_QWORD *)&v51 = *(_QWORD *)(v44 + 24);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v49, v27, 1.0, v14);
  v52 = &unk_1E5D29D40;
  v53 = 0u;
  v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  v55 = &unk_1E5D29D40;
  v56 = 0u;
  v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
}

void sub_1ADDE9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  a22 = &unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a22);
  a27 = &unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a27);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[36];

  if (!*((_BYTE *)this + 640))
  {
    v2 = *((_DWORD *)this + 39);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = (v3 + 1);
    else
      v4 = 1;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 81, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 84, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 87, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 90, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 93, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 96, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 99, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 102, (int)v4);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 81) + 48 * v5), (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), 0, 0);
        v7 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 84) + 48 * v5), (2 * v7), v7, 0, 0);
        v8 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 87) + 48 * v5), v8, v8, 0, 0);
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 90) + 32 * v5, (3 * *(_DWORD *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)]), 0);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 93) + 48 * v5), (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), 1, 0);
          v9 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 96) + 48 * v5), (2 * v9), v9, 1, 0);
          v10 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 99) + 48 * v5), v10, v10, 1, 0);
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 102) + 32 * v5, (3 * *(_DWORD *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)]), 1);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 93) + 48 * v5, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 96) + 48 * v5, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 99) + 48 * v5, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 102) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    *((_BYTE *)this + 640) = 1;
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Allocated memory for the gradients: ", 36);
      (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(_QWORD *)this + 240))(__p, this);
      if ((v15 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v13 = v15;
      else
        v13 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
      if ((char)v15 < 0)
        operator delete(__p[0]);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16);
    }
  }
}

void sub_1ADDEA1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::GatedRecurrentUnit::AccumGradients((kaldi::nnet1::GatedRecurrentUnit *)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, int a3)
{
  float v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  float v21;
  uint64_t v22;
  float v23;
  _BYTE *v24;
  _BYTE *v25;

  v4 = *((float *)this + 14);
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 30) = a2;
  *((_QWORD *)this + 36) = a2;
  *((_QWORD *)this + 41) = a2;
  v5 = *(_QWORD *)this;
  if (a3 >= 0)
    v6 = a3;
  else
    v6 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  if (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = v6;
  v8 = v7;
  v9 = *((float *)this + 16);
  v10 = *((float *)this + 17);
  v11 = *((_QWORD *)this + 81) + 48 * v7;
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 84) + 48 * v7 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 87) + 48 * v7 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 90) + 32 * v7 + 24) = a2;
  *(_QWORD *)(*((_QWORD *)this + 93) + 48 * v7 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 96) + 48 * v7 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 99) + 48 * v7 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 102) + 32 * v7 + 24) = a2;
  v12 = (char *)this + 80;
  if (v7 == *((_DWORD *)this + 20))
  {
    kaldi::CuMatrixBase<float>::SetZero(v11);
    kaldi::CuMatrixBase<float>::SetZero(*((_QWORD *)this + 84) + 48 * v8);
    kaldi::CuMatrixBase<float>::SetZero(*((_QWORD *)this + 87) + 48 * v8);
    kaldi::CuVectorBase<float>::SetZero(*((_QWORD *)this + 90) + 32 * v8);
    v5 = *(_QWORD *)this;
    if (*(int *)&v12[*(_QWORD *)(*(_QWORD *)this - 24)] >= 1)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 81) + 48 * v8, *((_QWORD *)this + 81) + v14, 111, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 84) + 48 * v8, *((_QWORD *)this + 84) + v14, 111, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 87) + 48 * v8, *((_QWORD *)this + 87) + v14, 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 90) + 32 * v8, *((_QWORD *)this + 90) + v13, 1.0, 1.0);
        ++v15;
        v5 = *(_QWORD *)this;
        v14 += 48;
        v13 += 32;
      }
      while (v15 < *(int *)&v12[*(_QWORD *)(*(_QWORD *)this - 24)]);
    }
    v16 = (int *)*((_QWORD *)this + 77);
    v16[v8] = 0;
    if ((int)v8 >= 1)
    {
      v17 = 0;
      v18 = v8;
      v19 = v16;
      do
      {
        v20 = *v19++;
        v17 += v20;
        v16[v8] = v17;
        --v18;
      }
      while (v18);
    }
  }
  if (*((_BYTE *)this + 84))
    v4 = v4 / (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8);
  if (*((float *)this + 38) >= 0.0)
    (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, uint64_t))(v5 + 320))(this, v8);
  if (v9 != 0.0)
  {
    v21 = -(float)(v4 * v9);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, v21 * (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)this + 208, 111, v21 * (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)this + 256, 111, v21 * (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8), 1.0);
    kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)this + 304, v21, 1.0);
  }
  v22 = *((_QWORD *)this + 81);
  if (v10 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v22 + 48 * v8, (float)(v10 * v4) * (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8), v4);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 208, *((_QWORD *)this + 84) + 48 * v8, (float)(v10 * v4) * (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8), v4);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 256, *((_QWORD *)this + 87) + 48 * v8, (float)(v10 * v4) * (float)*(int *)(*((_QWORD *)this + 77) + 4 * v8), v4);
    v22 = *((_QWORD *)this + 81);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v22 + 48 * v8, 111, -(float)(v4 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, *((_QWORD *)this + 84) + 48 * v8, 111, -(float)(v4 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, *((_QWORD *)this + 87) + 48 * v8, 111, -(float)(v4 * *((float *)this + 152)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, *((_QWORD *)this + 90) + 32 * v8, -(float)(v4 * *((float *)this + 152)), 1.0);
  v23 = *((float *)this + 153);
  if (v23 > 0.0)
  {
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 160, 1, v23);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 208, 1, *((float *)this + 153));
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 256, 1, *((float *)this + 153));
    kaldi::CuVectorBase<float>::ApplyMaxNorm((uint64_t)this + 304, *((float *)this + 153));
  }
  v24 = (_BYTE *)*((_QWORD *)this + 77);
  if ((_DWORD)v8 == *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80))
  {
    v25 = (_BYTE *)*((_QWORD *)this + 78);
    if (v24 != v25)
      bzero(v24, ((v25 - v24 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v24[4 * v8] = 0;
  }
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, int a3)
{
  kaldi::nnet1::GatedRecurrentUnit::UpdateWeights((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void kaldi::nnet1::GatedRecurrentUnit::EnsureBuffers(kaldi::nnet1::GatedRecurrentUnit *this)
{
  unint64_t v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 336))
  {
    v2 = *((int *)this + 20);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 43, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 46, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 49, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 52, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 55, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 58, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 61, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((_QWORD *)this + 1) + v3), *((unsigned int *)this + 24), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 616), v2);
    *((_BYTE *)this + 336) = 1;
  }
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 640) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 640) = 0;
  return result;
}

void kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3)
{
  float v3;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = a2;
  v5 = *((_DWORD *)this + 39);
  if (v5 == 1)
  {
    if (a2 > 0.0)
    {
      v9 = a3;
      if (*((_BYTE *)this + 84))
        v3 = (float)*(int *)(*((_QWORD *)this + 77) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 81) + 48 * a3, v3);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 84) + 48 * v9, v3);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 87) + 48 * v9, v3);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 90) + 32 * v9, v3);
    }
  }
  else if (v5 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v7 = a3;
      v8 = 3 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 81) + 48 * a3, *((_QWORD *)this + 93) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 84) + 16 * v8, *((_QWORD *)this + 96) + 16 * v8, v3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 87) + 16 * v8, *((_QWORD *)this + 99) + 16 * v8, v3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 90) + 32 * v7, *((_QWORD *)this + 102) + 32 * v7, v3);
    }
  }
  else if (a2 > 0.0 && v5 == 2)
  {
    v11 = a3;
    if (*((_BYTE *)this + 84))
      v3 = (float)*(int *)(*((_QWORD *)this + 77) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 81) + 48 * a3, (int *)(*((_QWORD *)this + 93) + 48 * a3), v3);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 84) + 48 * v11, (int *)(*((_QWORD *)this + 96) + 48 * v11), v3);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 87) + 48 * v11, (int *)(*((_QWORD *)this + 99) + 48 * v11), v3);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 90) + 32 * v11, (_QWORD *)(*((_QWORD *)this + 102) + 32 * v11), v3);
  }
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3)
{
  kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 264)), a2, a3);
}

float kaldi::nnet1::GatedRecurrentUnit::Check(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v1;
  char *v2;
  int v3;
  float result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];

  v1 = *((_DWORD *)this + 45);
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = *((_DWORD *)v2 + 3);
  if (v1 != 3 * v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #rows = ", 22);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 44) != *((_DWORD *)v2 + 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #columns = ", 25);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " (same as input dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 57) != 2 * v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #rows = ", 31);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 56) != v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #columns = ", 34);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 69) != v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #rows = ", 37);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 68) != v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #columns = ", 40);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; expecting ", 12);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 80) != v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bias dim = ", 11);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; expecting ", 12);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 153) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  result = *((float *)this + 38);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  return result;
}

int *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111);
}

_QWORD *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v13[4];

  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 16), 1);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a4;
  v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v9;
  v13[3] = v11;
  v13[2] = v10;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

_QWORD *kaldi::nnet1::GatedRecurrentUnit::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)(a1 + 840);
  v6 = *(_QWORD *)(a1 + 840);
  if (v6 == *(_QWORD *)(a1 + 848))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 840), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 864), *(int *)(a1 + 80));
    v6 = *(_QWORD *)(a1 + 840);
  }
  kaldi::CuVector<float>::Resize(v6 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  return kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(*v5 + 32 * a3), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::HistoryStateSize(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
}

int *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1[1] + 48 * a3), a2, 111);
}

_QWORD *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = a1[1] + 48 * a4;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v11 = *(_QWORD *)(v8 + 32);
  v13[0] = &unk_1E5D29D70;
  v13[1] = v10;
  v13[3] = v11;
  v13[2] = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _QWORD v20[35];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(_QWORD *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v8 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        v9 = a1[1] + 48 * a4;
        v10 = *(_QWORD *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        v11 = *(_DWORD *)(v9 + 16);
        v12 = *(_QWORD *)(v9 + 32);
        v20[0] = &unk_1E5D29D70;
        v20[1] = v10;
        v20[3] = v12;
        v20[2] = v11;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v23);
}

void sub_1ADDEB2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t i;

  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *))(*(_QWORD *)this + 88))(this);
  for (i = *((_QWORD *)this + 1); i != *((_QWORD *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::GatedRecurrentUnit *v2;

  v2 = (kaldi::nnet1::GatedRecurrentUnit *)operator new();
  kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADDEB3FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40B7274482);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Copy((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc();
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  v6 = (void **)((char *)this + 864);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 840);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 816);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 792);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 768);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 744);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 720);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 696);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 672);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 648);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = (void *)*((_QWORD *)this + 77);
  if (v5)
  {
    *((_QWORD *)this + 78) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 584);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 560);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 536);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 512);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 488);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 464);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((_QWORD *)this + 38) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 304);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 256);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

kaldi::nnet1::GatedRecurrentUnit *kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, const kaldi::nnet1::GatedRecurrentUnit *a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;

  v4 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *((_QWORD *)this + 111) = off_1E5D32508;
  v5 = *((_QWORD *)v4 + 1);
  *((_WORD *)this + 452) = *((_WORD *)v4 + 8);
  *((_QWORD *)this + 112) = v5;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 115) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 114, *((const void **)v4 + 3), *((_QWORD *)v4 + 4), (uint64_t)(*((_QWORD *)v4 + 4) - *((_QWORD *)v4 + 3)) >> 3);
  *((_QWORD *)this + 111) = off_1E5D2E4A0;
  *((_QWORD *)this + 117) = &off_1E5D2D150;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 959) = *(_OWORD *)(v4 + 71);
  *((_OWORD *)this + 59) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1E5D14E78, (uint64_t)a2);
  *(_QWORD *)this = &off_1E5D2D9C8;
  *((_QWORD *)this + 111) = &off_1E5D2DC30;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 208, (char *)a2 + 208, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 256, (char *)a2 + 256, 111);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = &unk_1E5D341C8;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  kaldi::CuVector<float>::Resize((uint64_t)this + 304, *((unsigned int *)a2 + 80), 1);
  kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)this + 38, (uint64_t)a2 + 304);
  *((_WORD *)this + 168) = *((_WORD *)a2 + 168);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 43, *((_QWORD *)a2 + 43), *((_QWORD *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 44) - *((_QWORD *)a2 + 43)) >> 4));
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 46, *((_QWORD *)a2 + 46), *((_QWORD *)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 47) - *((_QWORD *)a2 + 46)) >> 4));
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 49, *((_QWORD *)a2 + 49), *((_QWORD *)a2 + 50), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 50) - *((_QWORD *)a2 + 49)) >> 4));
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 52, *((_QWORD *)a2 + 52), *((_QWORD *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 53) - *((_QWORD *)a2 + 52)) >> 4));
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 55, *((_QWORD *)a2 + 55), *((_QWORD *)a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 56) - *((_QWORD *)a2 + 55)) >> 4));
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 58, *((_QWORD *)a2 + 58), *((_QWORD *)a2 + 59), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 59) - *((_QWORD *)a2 + 58)) >> 4));
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 61, *((_QWORD *)a2 + 61), *((_QWORD *)a2 + 62), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 62) - *((_QWORD *)a2 + 61)) >> 4));
  *((_QWORD *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 64, *((_QWORD *)a2 + 64), *((_QWORD *)a2 + 65), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 65) - *((_QWORD *)a2 + 64)) >> 4));
  *((_QWORD *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 67, *((_QWORD *)a2 + 67), *((_QWORD *)a2 + 68), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 68) - *((_QWORD *)a2 + 67)) >> 4));
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 70, *((_QWORD *)a2 + 70), *((_QWORD *)a2 + 71), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 71) - *((_QWORD *)a2 + 70)) >> 4));
  *((_QWORD *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 73, *((_QWORD *)a2 + 73), *((_QWORD *)a2 + 74), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 74) - *((_QWORD *)a2 + 73)) >> 4));
  *((_QWORD *)this + 76) = *((_QWORD *)a2 + 76);
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 77, *((const void **)a2 + 77), *((_QWORD *)a2 + 78), (uint64_t)(*((_QWORD *)a2 + 78) - *((_QWORD *)a2 + 77)) >> 2);
  *((_BYTE *)this + 640) = *((_BYTE *)a2 + 640);
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 81, *((_QWORD *)a2 + 81), *((_QWORD *)a2 + 82), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 82) - *((_QWORD *)a2 + 81)) >> 4));
  *((_QWORD *)this + 86) = 0;
  *((_OWORD *)this + 42) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 84, *((_QWORD *)a2 + 84), *((_QWORD *)a2 + 85), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 85) - *((_QWORD *)a2 + 84)) >> 4));
  *((_QWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 87, *((_QWORD *)a2 + 87), *((_QWORD *)a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 88) - *((_QWORD *)a2 + 87)) >> 4));
  *((_QWORD *)this + 92) = 0;
  *((_OWORD *)this + 45) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 90, *((_QWORD *)a2 + 90), *((_QWORD *)a2 + 91), (uint64_t)(*((_QWORD *)a2 + 91) - *((_QWORD *)a2 + 90)) >> 5);
  *((_QWORD *)this + 95) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 93, *((_QWORD *)a2 + 93), *((_QWORD *)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 94) - *((_QWORD *)a2 + 93)) >> 4));
  *((_QWORD *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 96, *((_QWORD *)a2 + 96), *((_QWORD *)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 97) - *((_QWORD *)a2 + 96)) >> 4));
  *((_QWORD *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 99, *((_QWORD *)a2 + 99), *((_QWORD *)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 100) - *((_QWORD *)a2 + 99)) >> 4));
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 102, *((_QWORD *)a2 + 102), *((_QWORD *)a2 + 103), (uint64_t)(*((_QWORD *)a2 + 103) - *((_QWORD *)a2 + 102)) >> 5);
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 105, *((_QWORD *)a2 + 105), *((_QWORD *)a2 + 106), (uint64_t)(*((_QWORD *)a2 + 106) - *((_QWORD *)a2 + 105)) >> 5);
  *((_QWORD *)this + 110) = 0;
  *((_OWORD *)this + 54) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 108, *((_QWORD *)a2 + 108), *((_QWORD *)a2 + 109), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 109) - *((_QWORD *)a2 + 108)) >> 4));
  return this;
}

void sub_1ADDEBC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;

  *(_QWORD *)(v32 - 88) = v25;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v28;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v31;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v29;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v27;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  v34 = *a11;
  if (*a11)
  {
    v23[78] = v34;
    operator delete(v34);
  }
  *(_QWORD *)(v32 - 88) = v30;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  kaldi::CuVector<float>::~CuVector(a22);
  kaldi::CuMatrix<float>::~CuMatrix(a23);
  kaldi::CuMatrix<float>::~CuMatrix(*(_QWORD *)(v32 - 104));
  kaldi::CuMatrix<float>::~CuMatrix(*(_QWORD *)(v32 - 96));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v23, (uint64_t *)&off_1E5D14E78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v23 + 111));
  _Unwind_Resume(a1);
}

void sub_1ADDEBD98()
{
  JUMPOUT(0x1ADDEBC60);
}

void sub_1ADDEBDA0()
{
  JUMPOUT(0x1ADDEBC6CLL);
}

void sub_1ADDEBDA8()
{
  JUMPOUT(0x1ADDEBC78);
}

void sub_1ADDEBDB0()
{
  JUMPOUT(0x1ADDEBC88);
}

void sub_1ADDEBDB8()
{
  JUMPOUT(0x1ADDEBC98);
}

void sub_1ADDEBDC0()
{
  JUMPOUT(0x1ADDEBCACLL);
}

void sub_1ADDEBDC8()
{
  JUMPOUT(0x1ADDEBCB8);
}

void sub_1ADDEBDD0()
{
  JUMPOUT(0x1ADDEBCC8);
}

void sub_1ADDEBDD8()
{
  JUMPOUT(0x1ADDEBCD8);
}

void sub_1ADDEBDE0()
{
  JUMPOUT(0x1ADDEBCE8);
}

void sub_1ADDEBDE8()
{
  JUMPOUT(0x1ADDEBCF8);
}

void sub_1ADDEBDF0()
{
  JUMPOUT(0x1ADDEBD08);
}

void sub_1ADDEBDF8()
{
  JUMPOUT(0x1ADDEBD18);
}

void sub_1ADDEBE00()
{
  JUMPOUT(0x1ADDEBD28);
}

void sub_1ADDEBE08()
{
  JUMPOUT(0x1ADDEBD38);
}

void sub_1ADDEBE10()
{
  JUMPOUT(0x1ADDEBD48);
}

void sub_1ADDEBE18()
{
  JUMPOUT(0x1ADDEBD58);
}

void sub_1ADDEBE20()
{
  JUMPOUT(0x1ADDEBD68);
}

void sub_1ADDEBE28()
{
  JUMPOUT(0x1ADDEBD70);
}

void sub_1ADDEBE30()
{
  JUMPOUT(0x1ADDEBD78);
}

void sub_1ADDEBE38()
{
  JUMPOUT(0x1ADDEBD88);
}

void sub_1ADDEBE40()
{
  JUMPOUT(0x1ADDEBD60);
}

quasar::AppleFileCoordinator *quasar::AppleFileCoordinator::AppleFileCoordinator(quasar::AppleFileCoordinator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)this = &off_1E5D378F0;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  *v2 = v3;
  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3600]), "initWithFilePresenter:", 0);
  v5 = (void **)*((_QWORD *)this + 1);
  v6 = *v5;
  *v5 = (void *)v4;

  return this;
}

void sub_1ADDEBEC4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void quasar::AppleFileCoordinator::~AppleFileCoordinator(id **this)
{
  *this = (id *)&off_1E5D378F0;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  *this = (id *)&off_1E5D378F0;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

BOOL quasar::AppleFileCoordinator::coordinateReadingItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  const char *v11;
  size_t v12;
  _OWORD v14[17];
  _QWORD v15[5];
  id v16;

  v4 = **(void ***)(a1 + 8);
  v5 = (void *)MEMORY[0x1E0C99E98];
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fileURLWithPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[4] = a3;
  v16 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN6quasar20AppleFileCoordinator21coordinateReadingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke;
  v15[3] = &__block_descriptor_40_e15_v16__0__NSURL_8l;
  objc_msgSend(v4, "coordinateReadingItemAtURL:options:error:byAccessor:", v8, 1, &v16, v15);
  v9 = v16;

  if (v9 && quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    objc_msgSend(v9, "description");
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = (const char *)objc_msgSend(v10, "UTF8String");
    v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v11, v12);

    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }

  return v9 == 0;
}

void sub_1ADDEC0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);

  _Unwind_Resume(a1);
}

void ___ZN6quasar20AppleFileCoordinator21coordinateReadingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "path");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "UTF8String"));
  v6 = *(_QWORD *)(v4 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_1ADDEC1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

BOOL quasar::AppleFileCoordinator::coordinateWritingItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  const char *v11;
  size_t v12;
  _OWORD v14[17];
  _QWORD v15[5];
  id v16;

  v4 = **(void ***)(a1 + 8);
  v5 = (void *)MEMORY[0x1E0C99E98];
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fileURLWithPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[4] = a3;
  v16 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN6quasar20AppleFileCoordinator21coordinateWritingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke;
  v15[3] = &__block_descriptor_40_e15_v16__0__NSURL_8l;
  objc_msgSend(v4, "coordinateWritingItemAtURL:options:error:byAccessor:", v8, 4, &v16, v15);
  v9 = v16;

  if (v9 && quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    objc_msgSend(v9, "description");
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = (const char *)objc_msgSend(v10, "UTF8String");
    v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v11, v12);

    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }

  return v9 == 0;
}

void sub_1ADDEC354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);

  _Unwind_Resume(a1);
}

void ___ZN6quasar20AppleFileCoordinator21coordinateWritingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(v3, "path");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "UTF8String"));
  v6 = *(_QWORD *)(v4 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __p);
  if (v8 < 0)
    operator delete(__p[0]);

}

void sub_1ADDEC430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

quasar::AppleLanguageRecognizer *quasar::AppleLanguageRecognizer::AppleLanguageRecognizer(quasar::AppleLanguageRecognizer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  void **v5;
  void *v6;

  *(_QWORD *)this = &off_1E5D392D8;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  *v2 = v3;
  v4 = objc_alloc_init(MEMORY[0x1E0CCE150]);
  v5 = (void **)*((_QWORD *)this + 1);
  v6 = *v5;
  *v5 = v4;

  return this;
}

void sub_1ADDEC4D8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  id **v2;

  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](v2, 0);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void quasar::AppleLanguageRecognizer::~AppleLanguageRecognizer(id **this)
{
  *this = (id *)&off_1E5D392D8;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  *this = (id *)&off_1E5D392D8;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

void quasar::AppleLanguageRecognizer::processString(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t *v3;
  id v4;

  v2 = **(void ***)(a1 + 8);
  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "processString:");

}

void sub_1ADDEC5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void quasar::AppleLanguageRecognizer::dominantLanguage(id **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  id v5;

  objc_msgSend(*this[1], "dominantLanguage");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v3 = objc_msgSend(v5, "UTF8String");
  if (v3)
    v4 = (char *)v3;
  else
    v4 = "";
  std::string::basic_string[abi:ne180100]<0>(a2, v4);

}

void sub_1ADDEC64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t quasar::AppleLanguageRecognizer::reset(id **this)
{
  return objc_msgSend(*this[1], "reset");
}

uint64_t quasar::appleCreateDirectories(uint64_t a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  const char *v19;
  size_t v20;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  if ((a2 - 1) >= 4)
  {
    if (quasar::gLogLevel >= 1)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Unknown protection class: ", 26);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v23);
    }
    return 0;
  }
  else
  {
    v3 = **((id **)&unk_1E5D48930 + a2 - 1);
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0C99E98];
    if (*(char *)(a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "fileURLWithPath:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = *MEMORY[0x1E0CB2AD8];
    v41[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, &v40, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 0;
    v10 = objc_msgSend(v4, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v8, 1, v9, &v22);
    v11 = v22;

    if (v11 && quasar::gLogLevel >= 1)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Failed to set protection class for path: ", 41);
      v13 = *(char *)(a1 + 23);
      if (v13 >= 0)
        v14 = a1;
      else
        v14 = *(_QWORD *)a1;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a1 + 23);
      else
        v15 = *(_QWORD *)(a1 + 8);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" error: ", 8);
      objc_msgSend(v11, "description");
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v19 = (const char *)objc_msgSend(v18, "UTF8String");
      v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);

      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v23);
    }

  }
  return v10;
}

void sub_1ADDEC90C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id **std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void sub_1ADDECB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADDECBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_EAREmojiRecognition;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1ADDECE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  a10 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADDECFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1ADDED0F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADDED240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void sub_1ADDED704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1ADDED898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1ADDEDA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LoadClassifier@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  size_t v4;
  size_t v5;
  size_t v6;
  unsigned __int8 v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  const void *p_p;
  int v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BOOL4 v24;
  size_t v25;
  size_t v26;
  size_t v27;
  int v28;
  size_t v29;
  size_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t result;
  size_t v34;
  size_t v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  const void *v40;
  int v41;
  void **v43;
  int v44;
  _QWORD *v46;
  void *__p;
  size_t v48;
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;

  std::string::basic_string[abi:ne180100]<0>(&__p, ".xgb.json");
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v49;
  if ((v49 & 0x80u) == 0)
    v8 = v49;
  else
    v8 = v48;
  v10 = v6 >= v8;
  v9 = v6 - v8;
  if (!v10)
    goto LABEL_35;
  if ((v4 & 0x80) != 0)
  {
    if (v8 == -1 || v5 < v9)
LABEL_113:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v5 - v9 >= v8)
      v12 = v8;
    else
      v12 = v5 - v9;
    v13 = *(_QWORD *)a1;
  }
  else
  {
    v10 = v8 != -1 && v4 >= v9;
    if (!v10)
      goto LABEL_113;
    v11 = v4 - v9;
    if (v11 >= v8)
      v12 = v8;
    else
      v12 = v11;
    v13 = a1;
  }
  if ((v49 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  v16 = memcmp((const void *)(v13 + v9), p_p, v12);
  if (v12 != v8 || v16 != 0)
  {
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(v50, ".xgb.ubj");
    v18 = *(unsigned __int8 *)(a1 + 23);
    v19 = *(_QWORD *)(a1 + 8);
    if ((v18 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(a1 + 23);
    else
      v20 = *(_QWORD *)(a1 + 8);
    v21 = (char)v51;
    if ((v51 & 0x80u) == 0)
      v22 = v51;
    else
      v22 = (size_t)v50[1];
    v10 = v20 >= v22;
    v23 = v20 - v22;
    if (!v10)
    {
      v24 = 0;
      if (((char)v51 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_43;
    }
    if ((v18 & 0x80) != 0)
    {
      if (v22 == -1 || v19 < v23)
LABEL_115:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v19 - v23 >= v22)
        v38 = v22;
      else
        v38 = v19 - v23;
      v39 = *(_QWORD *)a1;
    }
    else
    {
      if (v22 == -1)
        goto LABEL_115;
      v10 = v18 >= v23;
      v37 = v18 - v23;
      if (!v10)
        goto LABEL_115;
      if (v37 >= v22)
        v38 = v22;
      else
        v38 = v37;
      v39 = a1;
    }
    if ((v51 & 0x80u) == 0)
      v43 = v50;
    else
      v43 = (void **)v50[0];
    v44 = memcmp((const void *)(v39 + v23), v43, v38);
    v24 = v38 == v22 && v44 == 0;
    if ((v21 & 0x80000000) == 0)
    {
LABEL_44:
      if ((v49 & 0x80) == 0)
        goto LABEL_46;
      goto LABEL_45;
    }
LABEL_43:
    operator delete(v50[0]);
    goto LABEL_44;
  }
  v24 = 1;
  if ((v7 & 0x80) != 0)
LABEL_45:
    operator delete(__p);
LABEL_46:
  if (v24)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Compile with USE_XGBOOST=ON to use XGBoost models");
    goto LABEL_112;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".mlmodelc");
  v25 = *(unsigned __int8 *)(a1 + 23);
  v26 = *(_QWORD *)(a1 + 8);
  if ((v25 & 0x80u) == 0)
    v27 = *(unsigned __int8 *)(a1 + 23);
  else
    v27 = *(_QWORD *)(a1 + 8);
  v28 = (char)v49;
  if ((v49 & 0x80u) == 0)
    v29 = v49;
  else
    v29 = v48;
  v10 = v27 >= v29;
  v30 = v27 - v29;
  if (!v10)
  {
    v31 = 0;
    if (((char)v49 & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
  if ((v25 & 0x80) != 0)
  {
    if (v29 == -1 || v26 < v30)
LABEL_114:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v26 - v30 >= v29)
      v35 = v29;
    else
      v35 = v26 - v30;
    v36 = *(_QWORD *)a1;
  }
  else
  {
    if (v29 == -1)
      goto LABEL_114;
    v10 = v25 >= v30;
    v34 = v25 - v30;
    if (!v10)
      goto LABEL_114;
    if (v34 >= v29)
      v35 = v29;
    else
      v35 = v34;
    v36 = a1;
  }
  if ((v49 & 0x80u) == 0)
    v40 = &__p;
  else
    v40 = __p;
  v41 = memcmp((const void *)(v36 + v30), v40, v35);
  v31 = v35 == v29 && v41 == 0;
  if (v28 < 0)
LABEL_55:
    operator delete(__p);
LABEL_56:
  if (!v31)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No Classifier for model file: ", 30);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v46, a1);
LABEL_112:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v32 = operator new();
  result = kaldi::quasar::CoreMLClassifier::CoreMLClassifier(v32, a1);
  *a2 = v32;
  return result;
}

void sub_1ADDEDDF8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1ADDEDE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineDecodableIdenticalMatrix::~OnlineDecodableIdenticalMatrix(kaldi::OnlineDecodableIdenticalMatrix *this)
{
  *(_QWORD *)this = &off_1E5D2ADD0;
  kaldi::Vector<float>::Destroy((uint64_t)this + 24);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::OnlineDecodableIdenticalMatrix::~OnlineDecodableIdenticalMatrix(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OnlineDecodableMatrixScaled::~OnlineDecodableMatrixScaled(kaldi::OnlineDecodableMatrixScaled *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D2ACD0;
  kaldi::Vector<float>::Destroy((uint64_t)this + 56);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::OnlineDecodableMatrixScaled::~OnlineDecodableMatrixScaled(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OnlineDecodableMatrixScaledMapped::~OnlineDecodableMatrixScaledMapped(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  *(_QWORD *)this = &off_1E5D2AF08;
  kaldi::Vector<float>::Destroy((uint64_t)this + 96);
  kaldi::Vector<float>::Destroy((uint64_t)this + 72);
  kaldi::Vector<float>::Destroy((uint64_t)this + 40);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::OnlineDecodableMatrixScaledMapped::~OnlineDecodableMatrixScaledMapped(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OnlineDecodableMatrixScaledMappedTm::~OnlineDecodableMatrixScaledMappedTm(kaldi::OnlineDecodableMatrixScaledMappedTm *this)
{
  kaldi::OnlineDecodableMatrixScaledMapped::~OnlineDecodableMatrixScaledMapped(this);
  JUMPOUT(0x1AF44D190);
}

BOOL kaldi::OnlineDecodableNnet1Lazy::ProcessBatch(kaldi::OnlineDecodableNnet1Lazy *this, int a2)
{
  int v4;
  int CurrentBatchOffset;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void **v35;
  int v36;
  unint64_t v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  _QWORD *v55;
  int v56[8];
  int32x2_t v57;
  __int128 v58;
  __int128 v59;
  char v60;

  v4 = *((_DWORD *)this + 17);
  if (v4 == -1)
  {
    v4 = 0;
    *((_DWORD *)this + 17) = 0;
  }
  *((_DWORD *)this + 17) = v4 + *((_DWORD *)this + 28);
  *((_DWORD *)this + 26) += *((_DWORD *)this + 27);
  kaldi::OnlineFeatureMatrix::GetCurrentBatch(*((_QWORD *)this + 5), (int32x2_t *)this + 18);
  CurrentBatchOffset = kaldi::OnlineFeatureMatrix::GetCurrentBatchOffset(*((kaldi::OnlineFeatureMatrix **)this + 5));
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)this + 144) + CurrentBatchOffset;
  if (*((_BYTE *)this + 184))
  {
    v7 = *((_DWORD *)this + 12);
    if (CurrentBatchOffset % v7)
      v8 = v7 + CurrentBatchOffset - CurrentBatchOffset % v7;
    else
      v8 = CurrentBatchOffset;
    v9 = v6 % v7;
    v10 = v7 + v6 - v6 % v7;
    if (v9)
      v6 = v10;
    v11 = v8 - CurrentBatchOffset;
    CurrentBatchOffset = v8;
  }
  else
  {
    v11 = 0;
  }
  v12 = (v6 - CurrentBatchOffset);
  *((_DWORD *)this + 47) = v12;
  if (CurrentBatchOffset > a2 || v6 <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Did not get correct batch [", 27);
    v54 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
    v55 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") for frame ", 12);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
  v14 = *((_DWORD *)this + 12);
  v15 = (char *)this + 192;
  v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 144);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 24, v12, v16, 1, 0);
  v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)this + 144);
  v18 = *((_QWORD *)this + 25);
  v19 = *((_QWORD *)this + 28);
  DWORD2(v58) = *((_DWORD *)this + 52);
  HIDWORD(v58) = v17 - v11;
  *(_QWORD *)&v59 = *((_QWORD *)this + 27);
  *((_QWORD *)&v59 + 1) = v19;
  v57 = (int32x2_t)&unk_1E5D29D40;
  *(_QWORD *)&v58 = v18;
  v20 = kaldi::MatrixBase<float>::NumRows((uint64_t)this + 144);
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v56, (uint64_t)this + 144, v11, v20 - v11, 0, *((_DWORD *)this + 38));
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v57, v56, 111);
  v21 = (((int)v12 - 1) / v14 + 1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v56);
  v57 = (int32x2_t)&unk_1E5D29D40;
  v58 = 0u;
  v59 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v57);
  kaldi::CuMatrixBase<float>::SetStride((uint64_t)this + 192, *((_DWORD *)this + 12) * *((_DWORD *)this + 54));
  kaldi::Matrix<float>::Resize((int32x2_t *)this + 46, *(unsigned int *)(*((_QWORD *)this + 1) + 240), *((unsigned int *)this + 47), 0, 0);
  v22 = *(int *)(*((_QWORD *)this + 1) + 240);
  v57.i8[0] = 0;
  std::vector<BOOL>::assign((uint64_t)this + 408, v22, &v57);
  v23 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3), 1);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 36, v21, v23, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)this + 336, v21, 0);
  v24 = (uint64_t *)*((_QWORD *)this + 2);
  if (v24)
  {
    kaldi::nnet1::Nnet::Feedforward(v24, (uint64_t)this + 192, (int32x2_t *)this + 30, -1, 0);
    v15 = (char *)this + 240;
  }
  (*(void (**)(_QWORD, char *, char *, uint64_t))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3), v15, (char *)this + 288, 1);
  v25 = *((_QWORD *)this + 62);
  if (v25)
  {
    v26 = *((unsigned int *)this + 77);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 176))(v25, 0);
    kaldi::CuMatrix<float>::CuMatrix(&v57, v26, v27, 0, 0, 0);
    std::deque<kaldi::CuMatrix<float>>::push_back((_QWORD *)this + 64, (uint64_t)&v57);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v57);
    if (*((_BYTE *)this + 64))
    {
      v28 = *(void (**)(void))(**((_QWORD **)this + 62) + 96);
    }
    else
    {
      if (*((_QWORD *)this + 54) && *((_BYTE *)this + 65))
      {
        v29 = *((unsigned int *)this + 77);
        v30 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 62) + 176))(*((_QWORD *)this + 62), 1);
        kaldi::CuMatrix<float>::CuMatrix(&v57, v29, v30, 0, 0, 0);
        (*(void (**)(_QWORD, char *, int32x2_t *, uint64_t))(**((_QWORD **)this + 62) + 96))(*((_QWORD *)this + 62), v15, &v57, 1);
        v31 = *((_QWORD *)this + 69) + *((_QWORD *)this + 68) - 1;
        (*(void (**)(_QWORD, int32x2_t *, unint64_t))(**((_QWORD **)this + 62) + 144))(*((_QWORD *)this + 62), &v57, *(_QWORD *)(*((_QWORD *)this + 65) + 8 * (v31 / 0x55)) + 48 * (v31 % 0x55));
        v32 = HIDWORD(v58);
        v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 40))(*((_QWORD *)this + 54));
        kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 55, v32, v33, 0, 0);
        (*(void (**)(_QWORD, int32x2_t *, char *))(**((_QWORD **)this + 54) + 16))(*((_QWORD *)this + 54), &v57, (char *)this + 440);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v57);
        goto LABEL_25;
      }
      v28 = *(void (**)(void))(**((_QWORD **)this + 62) + 96);
    }
    v28();
  }
LABEL_25:
  if (*((float *)this + 14) == 0.0)
  {
    *((_DWORD *)this + 28) = *((_DWORD *)this + 47);
  }
  else
  {
    v58 = 0u;
    v59 = 0u;
    v57 = (int32x2_t)&unk_1E5D34170;
    v60 = 0;
    (*(void (**)(_QWORD, char *, int32x2_t *))(**((_QWORD **)this + 3) + 144))(*((_QWORD *)this + 3), (char *)this + 288, &v57);
    kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((uint64_t)&v57, (uint64_t)&v57);
    LOBYTE(v56[0]) = 1;
    std::vector<BOOL>::assign((uint64_t)this + 80, SHIDWORD(v58), v56);
    v35 = (void **)((char *)this + 120);
    v34 = (char *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 16) = v34;
    v36 = HIDWORD(v58);
    if (SHIDWORD(v58) < 1)
    {
      v48 = v34;
    }
    else
    {
      v37 = 0;
      v38 = (_QWORD *)((char *)this + 136);
      do
      {
        if (*(float *)(v58 + 4 * (int)v59 * (int)v37 + 4 * *((int *)this + 15)) < *((float *)this + 14))
        {
          *(_QWORD *)(*((_QWORD *)this + 10) + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v37);
          if ((unint64_t)v34 >= *v38)
          {
            v40 = (char *)*v35;
            v41 = (v34 - (_BYTE *)*v35) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v43 = *v38 - (_QWORD)v40;
            if (v43 >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 136, v44);
              v40 = (char *)*((_QWORD *)this + 15);
              v34 = (char *)*((_QWORD *)this + 16);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[4 * v41];
            *(_DWORD *)v46 = v37;
            v39 = v46 + 4;
            while (v34 != v40)
            {
              v47 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            *((_QWORD *)this + 15) = v46;
            *((_QWORD *)this + 16) = v39;
            *((_QWORD *)this + 17) = &v45[4 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v34 = v37;
            v39 = v34 + 4;
          }
          *((_QWORD *)this + 16) = v39;
          v36 = HIDWORD(v58);
          v34 = v39;
        }
        ++v37;
      }
      while ((uint64_t)v37 < v36);
      v48 = (char *)*v35;
    }
    v49 = (unint64_t)(v34 - v48) >> 2;
    *((_DWORD *)this + 27) = *((_DWORD *)this + 47) - v49;
    *((_DWORD *)this + 28) = v49;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v57);
  }
  v50 = *((_QWORD *)this + 54);
  if (v50 && !*((_BYTE *)this + 65))
  {
    v51 = *((unsigned int *)this + 77);
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
    kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 55, v51, v52, 0, 0);
    (*(void (**)(_QWORD, char *, char *))(**((_QWORD **)this + 54) + 16))(*((_QWORD *)this + 54), (char *)this + 288, (char *)this + 440);
  }
  return *((_DWORD *)this + 28) > 0;
}

float kaldi::OnlineDecodableNnet1Lazy::LogLikelihood(kaldi::OnlineDecodableNnet1Lazy *this, uint64_t a2, int a3)
{
  int v5;
  signed int v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  kaldi::TransitionModel *v24;
  unint64_t v25;
  float v26;
  int v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[34];

  v5 = *((_DWORD *)this + 17);
  if (v5 > (int)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Request for expired frame (", 27);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"): current frame offset is ", 27);
    std::ostream::operator<<();
    goto LABEL_41;
  }
  if (v5 != -1 && *((_DWORD *)this + 28) + v5 > (int)a2)
    goto LABEL_21;
  while (1)
  {
    v7 = *((_DWORD *)this + 26) + a2 + *((_DWORD *)this + 27);
    if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 5), v7, 1))
      break;
    if (kaldi::OnlineDecodableNnet1Lazy::ProcessBatch(this, v7))
      goto LABEL_21;
  }
  if (*((float *)this + 14) == 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Request for invalid frame (", 27);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"): you need to check", 20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, " IsLastFrame, or, for frame zero, check that the input is valid.");
LABEL_41:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *((_DWORD *)this + 17) = a2;
  *((_DWORD *)this + 26) = *((_DWORD *)this + 27) + *((_DWORD *)this + 26) - 1;
  v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 144);
  kaldi::Matrix<float>::Resize((int32x2_t *)this + 18, 1, v8, 0, 0);
  v9 = *((_QWORD *)this + 17);
  *((_DWORD *)this + 47) = 1;
  *(_QWORD *)((char *)this + 108) = 0x100000000;
  v10 = (int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 16) = v10;
  v11 = *((_DWORD *)this + 77) - 1;
  if ((unint64_t)v10 >= v9)
  {
    v13 = v9 - (_QWORD)v10;
    v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1)
      v14 = 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 136, v15);
    v17 = (char *)*((_QWORD *)this + 15);
    v18 = (char *)*((_QWORD *)this + 16);
    v20 = &v16[v19];
    *v16 = v11;
    v12 = v16 + 1;
    while (v18 != v17)
    {
      v21 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--v16 = v21;
    }
    *((_QWORD *)this + 15) = v16;
    *((_QWORD *)this + 16) = v12;
    *((_QWORD *)this + 17) = v20;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v10 = v11;
    v12 = v10 + 1;
  }
  *((_QWORD *)this + 16) = v12;
LABEL_21:
  v22 = a2 - *((_DWORD *)this + 17);
  v23 = *((_QWORD *)this + 15);
  if (v23 != *((_QWORD *)this + 16))
    v22 = *(_DWORD *)(v23 + 4 * v22);
  v24 = (kaldi::TransitionModel *)*((_QWORD *)this + 1);
  v25 = *(int *)(*((_QWORD *)v24 + 12) + 4 * a3);
  if (*((_DWORD *)this + 142) == -1 && *((_QWORD *)this + 77) == *((_QWORD *)this + 78))
  {
    v26 = 0.0;
  }
  else
  {
    v26 = 0.0;
    if ((_DWORD)v25 == *((_DWORD *)this + 15))
    {
      v27 = kaldi::TransitionModel::TransitionIdToPhone(v24, a3);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::OnlineDecodableNnet1Lazy *)((char *)this + 568), v27)
        && (*(float (**)(kaldi::OnlineDecodableNnet1Lazy *, uint64_t))(*(_QWORD *)this + 64))(this, a2) > *((float *)this + 141))
      {
        v26 = *((float *)this + 140);
      }
    }
  }
  if ((*(_QWORD *)(*((_QWORD *)this + 51) + 8 * (v25 >> 6)) & (1 << v25)) != 0)
  {
    v28 = (_QWORD *)((char *)this + 368);
    v29 = (_DWORD *)((char *)this + 384);
  }
  else
  {
    (*(void (**)(_QWORD, char *, unint64_t, char *))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3), (char *)this + 288, v25, (char *)this + 336);
    v30 = *((_QWORD *)this + 4);
    if (v30)
      kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(v30, v25, (uint64_t)this + 336);
    *(_QWORD *)(*((_QWORD *)this + 51) + 8 * (v25 >> 6)) |= 1 << v25;
    v28 = (_QWORD *)((char *)this + 368);
    if ((int)kaldi::MatrixBase<float>::NumCols((uint64_t)this + 368) >= 1)
    {
      v31 = 0;
      do
      {
        *(_DWORD *)(*((_QWORD *)this + 46) + 4 * *((_DWORD *)this + 96) * (int)v25 + 4 * v31) = *(_DWORD *)(*((_QWORD *)this + 43) + 4 * ((int)v31 / *((_DWORD *)this + 12)));
        ++v31;
      }
      while (v31 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)this + 368));
    }
    v29 = (_DWORD *)((char *)this + 384);
    v32 = *((_QWORD *)this + 46) + 4 * *((_DWORD *)this + 96) * (int)v25;
    v37[2] = 0;
    v37[0] = v32;
    v37[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 368);
    kaldi::VectorBase<float>::Scale((uint64_t)v37, *((float *)this + 13));
  }
  return *(float *)(*v28 + 4 * *v29 * (int)v25 + 4 * v22) - v26;
}

BOOL kaldi::OnlineDecodableNnet1Lazy::SkipFrame(kaldi::OnlineDecodableNnet1Lazy *this, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL8 result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];

  v4 = *((_DWORD *)this + 17);
  if (v4 > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Request for expired frame (", 27);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): current frame offset is ", 27);
    std::ostream::operator<<();
    goto LABEL_16;
  }
  if (v4 == -1 || *((_DWORD *)this + 26) + v4 + *((_DWORD *)this + 47) <= a2)
  {
    if (kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 5), a2, 1))
    {
      kaldi::OnlineDecodableNnet1Lazy::ProcessBatch(this, a2);
      goto LABEL_6;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Request for invalid frame (", 27);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"): you need to check", 20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " IsLastFrame, or, for frame zero, check that the input is valid.");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
LABEL_6:
  if (*((_QWORD *)this + 11))
  {
    v5 = (1 << (a2 - (*((_BYTE *)this + 68) + *((_BYTE *)this + 104)))) & *(_QWORD *)(*((_QWORD *)this + 10)
                                                                                      + (((unint64_t)(a2 - (*((_DWORD *)this + 17) + *((_DWORD *)this + 26))) >> 3) & 0x1FFFFFFFFFFFFFF8));
    result = v5 != 0;
    if (*((_DWORD *)this + 19) >= a2)
      return result;
    *((_DWORD *)this + 19) = a2;
    if (v5)
    {
      ++*((_DWORD *)this + 18);
      return 1;
    }
  }
  else if (*((_DWORD *)this + 19) < a2)
  {
    result = 0;
    *((_DWORD *)this + 19) = a2;
    return result;
  }
  return 0;
}

float kaldi::OnlineDecodableNnet1Lazy::GetSilencePosterior(kaldi::OnlineDecodableNnet1Lazy *this, int a2)
{
  int v2;
  int v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[34];

  if (*((_QWORD *)this + 54))
  {
    v2 = *((_DWORD *)this + 17);
    if (v2 > a2 || v2 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not calculate silence posterior for frame=", 48);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", current frame offset is=", 26);
      std::ostream::operator<<();
    }
    else
    {
      v4 = (a2 - (v2 + *((_DWORD *)this + 26))) / *((_DWORD *)this + 12);
      if (v4 < *((_DWORD *)this + 115) && *((int *)this + 114) >= 1)
        return *(float *)(*((_QWORD *)this + 56) + 4 * *((_DWORD *)this + 116) * v4);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Silence posterior cache incorrectly calculated rows=", 52);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", cols=", 7);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return 0.0;
}

void kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment(uint64_t a1, int a2, int32x2_t *a3)
{
  int v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[34];

  v3 = *(_DWORD *)(a1 + 504);
  v4 = __OFSUB__(v3, a2);
  v5 = v3 - a2;
  if (!((v5 < 0) ^ v4 | (v5 == 0)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Requested posteriors for realignment do no longer exist.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  v6 = *(_QWORD *)(a1 + 520);
  if (*(_QWORD *)(a1 + 528) == v6
    || (v7 = *(_QWORD *)(a1 + 544),
        v8 = (unint64_t *)(v6 + 8 * (v7 / 0x55)),
        v9 = *v8,
        v10 = *v8 + 48 * (v7 % 0x55),
        v11 = *(_QWORD *)(v6 + 8 * ((*(_QWORD *)(a1 + 552) + v7) / 0x55)) + 48 * ((*(_QWORD *)(a1 + 552) + v7) % 0x55),
        v10 == v11))
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v10 + 48;
      if (v10 + 48 - v9 == 4080)
      {
        v14 = v8[1];
        ++v8;
        v9 = v14;
        v13 = v14;
      }
      v12 += *(_DWORD *)(v10 + 20);
      v10 = v13;
    }
    while (v13 != v11);
  }
  kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment(a1, a2, (v5 + v12), a3);
}

void kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment(uint64_t a1, int a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int32 v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  void *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  __int128 v36;

  if ((int)a3 >= 1 && !*(_QWORD *)(a1 + 552))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "Realignment model posterior cache is empty, make sure that acoustic model for realignment is configured correctly");
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 504) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "Requested posteriors for realignment do no longer exist.");
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v34);
  }
  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 496) + 176))(*(_QWORD *)(a1 + 496), 0);
  kaldi::CuMatrix<float>::Resize(a4, a3, v7, 0, 0);
  if ((_DWORD)a3)
  {
    v8 = *(_QWORD *)(a1 + 520);
    if (*(_QWORD *)(a1 + 528) != v8)
    {
      v9 = *(_QWORD *)(a1 + 544);
      v10 = *(_QWORD *)(v8 + 8 * (v9 / 0x55)) + 48 * (v9 % 0x55);
      v11 = *(_QWORD *)(v8 + 8 * ((*(_QWORD *)(a1 + 552) + v9) / 0x55)) + 48 * ((*(_QWORD *)(a1 + 552) + v9) % 0x55);
      if (v10 != v11)
      {
        v12 = 0;
        v13 = *(_DWORD *)(a1 + 504);
        v14 = (_QWORD *)(v8 + 8 * (v9 / 0x55));
        do
        {
          v15 = *(_DWORD *)(v10 + 20);
          if (v15 + v13 <= a2)
          {
            v13 += v15;
          }
          else
          {
            if (a2 <= v13)
              v16 = 0;
            else
              v16 = a2 - v13;
            v17 = v15 - v16;
            if ((int)(v17 + v12) <= (int)a3)
              v18 = v17;
            else
              v18 = a3 - v12;
            v19 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 496) + 176))(*(_QWORD *)(a1 + 496), 0);
            v20 = a4[3].i32[0];
            v21 = *(_QWORD *)&a4[1] + 4 * v20 * v12;
            v22 = a4[3].i32[1] - v20 * v12;
            v23 = a4[4];
            *((_QWORD *)&v35 + 1) = __PAIR64__(v18, v19);
            *(_QWORD *)&v36 = __PAIR64__(v22, v20);
            *((int32x2_t *)&v36 + 1) = v23;
            v34 = &unk_1E5D29D40;
            *(_QWORD *)&v35 = v21;
            v24 = *(_DWORD *)(v10 + 24);
            v25 = *(_QWORD *)(v10 + 8) + 4 * (int)(v24 * v16);
            v23.i32[0] = *(_DWORD *)(v10 + 28) - v24 * v16;
            v26 = *(_QWORD *)(v10 + 32);
            DWORD2(v32) = *(_DWORD *)(v10 + 16);
            HIDWORD(v32) = v18;
            *(_QWORD *)&v33 = __PAIR64__(v23.u32[0], v24);
            *((_QWORD *)&v33 + 1) = v26;
            v31 = &unk_1E5D29D40;
            *(_QWORD *)&v32 = v25;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v34, (uint64_t)&v31, 111);
            v31 = &unk_1E5D29D40;
            v12 += v18;
            v32 = 0u;
            v33 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v31);
            v34 = &unk_1E5D29D40;
            v35 = 0u;
            v36 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v34);
            v13 += *(_DWORD *)(v10 + 20);
          }
          if (v12 >= (int)a3)
            break;
          v10 += 48;
          if (v10 - *v14 == 4080)
          {
            v27 = v14[1];
            ++v14;
            v10 = v27;
          }
        }
        while (v10 != v11);
      }
    }
    v28 = *(_QWORD *)(a1 + 488);
    if (v28)
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(v28, (uint64_t)a4);
    while (*(_QWORD *)(a1 + 552))
    {
      v29 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * (*(_QWORD *)(a1 + 544) / 0x55uLL))
                      + 48 * (*(_QWORD *)(a1 + 544) % 0x55uLL)
                      + 20)
          + *(_DWORD *)(a1 + 504);
      if (v29 > a2)
        break;
      *(_DWORD *)(a1 + 504) = v29;
      std::deque<kaldi::CuMatrix<float>>::pop_front((int64x2_t *)(a1 + 512));
    }
  }
}

void sub_1ADDEF1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, _OWORD *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  a13 = &unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a13);
  a18 = &unk_1E5D29D40;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a18);
  _Unwind_Resume(a1);
}

float kaldi::OnlineDecodableMatrixScaled::LogLikelihood(kaldi::OnlineDecodableMatrixScaled *this, signed int a2, int a3)
{
  if (*((_DWORD *)this + 20) != a2)
    kaldi::OnlineDecodableMatrixScaled::CacheFrame(this, a2);
  return *((float *)this + 8) * *(float *)(*((_QWORD *)this + 7) + 4 * *(int *)(*((_QWORD *)this + 1) + 4 * a3));
}

BOOL kaldi::OnlineDecodableMatrixScaled::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + 1, 1);
}

BOOL kaldi::OnlineDecodableMatrixScaled::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + 1, 0);
}

uint64_t kaldi::OnlineDecodableMatrixScaled::NumIndices(kaldi::OnlineDecodableMatrixScaled *this)
{
  return (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2;
}

float kaldi::OnlineDecodableIdenticalMatrix::LogLikelihood(kaldi::OnlineDecodableIdenticalMatrix *this)
{
  return 0.0;
}

BOOL kaldi::OnlineDecodableIdenticalMatrix::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[1], a2 + 1, 1);
}

BOOL kaldi::OnlineDecodableIdenticalMatrix::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[1], a2 + 1, 0);
}

uint64_t kaldi::OnlineDecodableIdenticalMatrix::NumIndices(kaldi::OnlineDecodableIdenticalMatrix *this)
{
  return 0;
}

float kaldi::OnlineDecodableMatrixScaledMapped::LogLikelihood(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2, int a3)
{
  float v5;
  float v6;

  if (*((_DWORD *)this + 31) != a2)
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
  if (*((_BYTE *)this + 28))
    v5 = *(float *)(*((_QWORD *)this + 5) + 4 * a3);
  else
    v5 = 0.0;
  v6 = *(float *)(*((_QWORD *)this + 9) + 4 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 4 * a3)) + v5;
  if (v6 <= (float)-*((float *)this + 8))
    v6 = -INFINITY;
  return *((float *)this + 6) * v6;
}

BOOL kaldi::OnlineDecodableMatrixScaledMapped::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[2], a2 + 1, 1);
}

BOOL kaldi::OnlineDecodableMatrixScaledMapped::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[2], a2 + 1, 0);
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::NumIndices(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 1) + 152) - *(_QWORD *)(*((_QWORD *)this + 1) + 144)) >> 2)
       - 1;
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::HasSilencePosterior(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  return *((unsigned __int8 *)this + 128);
}

float kaldi::OnlineDecodableMatrixScaledMapped::GetSilencePosterior(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2)
{
  _QWORD v5[34];

  if (*((_DWORD *)this + 31) != a2)
  {
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
    if (*((_DWORD *)this + 31) != a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "LogLikelihood() must be called before this method as silence posteriors are pre-computed there");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
    }
  }
  if (*((_BYTE *)this + 128))
    return *((float *)this + 30);
  else
    return 0.0;
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::HasEndpointerScore(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  return *((unsigned __int8 *)this + 129);
}

float kaldi::OnlineDecodableMatrixScaledMapped::GetEndpointerScore(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2, int a3)
{
  _QWORD v7[34];

  if (*((_DWORD *)this + 31) != a2)
  {
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
    if (*((_DWORD *)this + 31) != a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "LogLikelihood() must be called before this method as endpointer scores are pre-computed there");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
  }
  return *(float *)(*((_QWORD *)this + 12) + 4 * a3);
}

float kaldi::OnlineDecodableMatrixScaledMappedTm::LogLikelihood(kaldi::OnlineDecodableMatrixScaledMappedTm *this, signed int a2, int a3)
{
  kaldi::TransitionModel *v5;
  float v6;
  float v7;
  float v8;
  int v9;

  if (*((_DWORD *)this + 31) != a2)
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
  v5 = (kaldi::TransitionModel *)*((_QWORD *)this + 1);
  v6 = *((float *)this + 6);
  v7 = *(float *)(*((_QWORD *)this + 9) + 4 * *(int *)(*((_QWORD *)v5 + 12) + 4 * a3));
  v8 = *((float *)this + 33);
  v9 = *((_DWORD *)this + 34);
  return v6
       * (float)(v7
               + (float)(v8
                       * *(float *)(*((_QWORD *)this + 9)
                                  + 4 * (int)(kaldi::TransitionModel::TransitionIdToTransitionIndex(v5, a3) + v9))));
}

BOOL kaldi::OnlineDecodableNnet1Lazy::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + *((_DWORD *)this + 26) + *((_DWORD *)this + 27) + 1, 1);
}

BOOL kaldi::OnlineDecodableNnet1Lazy::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + *((_DWORD *)this + 26) + *((_DWORD *)this + 27) + 1, 0);
}

uint64_t kaldi::OnlineDecodableNnet1Lazy::NumFramesSkipped(kaldi::OnlineDecodableNnet1Lazy *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t kaldi::OnlineDecodableNnet1Lazy::NumIndices(kaldi::OnlineDecodableNnet1Lazy *this)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 1) + 152) - *(_QWORD *)(*((_QWORD *)this + 1) + 144)) >> 2)
       - 1;
}

BOOL kaldi::OnlineDecodableNnet1Lazy::HasSilencePosterior(kaldi::OnlineDecodableNnet1Lazy *this)
{
  return *((_QWORD *)this + 54) != 0;
}

void kaldi::OnlineDecodableNnet1Lazy::~OnlineDecodableNnet1Lazy(kaldi::OnlineDecodableNnet1Lazy *this)
{
  kaldi::OnlineDecodableNnet1Lazy::~OnlineDecodableNnet1Lazy(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E5D2AB10;
  v2 = (void *)*((_QWORD *)this + 77);
  if (v2)
  {
    *((_QWORD *)this + 78) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 74);
  if (v3)
    operator delete(v3);
  std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100]((_QWORD *)this + 64);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  v4 = (void *)*((_QWORD *)this + 51);
  if (v4)
    operator delete(v4);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 368);
  *((_QWORD *)this + 42) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 336);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 288);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 240);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 144);
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
    operator delete(v6);
  quasar::Bitmap::~Bitmap(this);
}

void *kaldi::OnlineDecodableMatrixScaled::CacheFrame(kaldi::OnlineDecodableMatrixScaled *this, signed int a2)
{
  char *v4;
  void *result;
  _QWORD *v6;
  const void *v7[34];

  v4 = (char *)this + 56;
  kaldi::Vector<float>::Resize((void **)this + 7, *((unsigned int *)this + 12), 0);
  if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 5), a2, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Request for invalid frame (you need to check IsLastFrame,", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " or, for frame zero, check that the input is valid.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 5), a2, (uint64_t *)v7);
  result = kaldi::VectorBase<float>::CopyFromVec((uint64_t)v4, v7);
  *((_DWORD *)this + 20) = a2;
  return result;
}

void kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2)
{
  char *v4;
  _QWORD *v5;
  const void *v6;
  unsigned int v7;

  v4 = (char *)this + 72;
  kaldi::Vector<float>::Resize((void **)this + 9, *((unsigned int *)this + 16), 0);
  if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 2), a2, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Request for invalid frame (you need to check IsLastFrame,", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " or, for frame zero, check that the input is valid.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6);
  }
  kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 2), a2, (uint64_t *)&v6);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v4, &v6);
  if (*((_BYTE *)this + 129))
  {
    kaldi::OnlineFeatureMatrix::GetEndpointerScore(*((kaldi::OnlineFeatureMatrix **)this + 2), a2, (uint64_t *)&v6);
    kaldi::Vector<float>::Resize((void **)this + 12, v7, 0);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)this + 96, &v6);
  }
  *((float *)this + 30) = kaldi::OnlineFeatureMatrix::GetSilencePosterior(*((kaldi::OnlineFeatureMatrix **)this + 2), a2);
  *((_DWORD *)this + 31) = a2;
}

long double quasar::mergedAcousticCost(uint64_t a1, double **a2)
{
  uint64_t *v2;
  double *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  long double i;
  double v17;

  v2 = *(uint64_t **)a1;
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = v4 >> 3;
  if (v4)
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v4 >> 3;
    v7 = *a2;
    do
    {
      v8 = *v2++;
      *v7++ = -*(double *)(v8 + 16);
      --v6;
    }
    while (v6);
  }
  v9 = a2[1];
  v10 = v9 - v3;
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = *v3;
    }
    else
    {
      v12 = v3 + 1;
      v13 = *v3;
      while (v12 != v9)
      {
        v14 = *v12++;
        v15 = v14;
        if (v14 > v13)
          v13 = v15;
      }
      for (i = 0.0; v3 != v9; ++v3)
      {
        v17 = *v3 - v13;
        if (v17 >= -36.0436534)
          i = i + exp(v17);
      }
      v11 = v13 + log(i);
    }
  }
  else
  {
    v11 = -INFINITY;
  }
  return -(v11 - log((double)v5));
}

long double quasar::mergedAcousticCostUnpushed(uint64_t a1, double **a2)
{
  uint64_t *v2;
  double *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  long double i;
  double v17;

  v2 = *(uint64_t **)a1;
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = v4 >> 3;
  if (v4)
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v4 >> 3;
    v7 = *a2;
    do
    {
      v8 = *v2++;
      *v7++ = -*(double *)(v8 + 24);
      --v6;
    }
    while (v6);
  }
  v9 = a2[1];
  v10 = v9 - v3;
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = *v3;
    }
    else
    {
      v12 = v3 + 1;
      v13 = *v3;
      while (v12 != v9)
      {
        v14 = *v12++;
        v15 = v14;
        if (v14 > v13)
          v13 = v15;
      }
      for (i = 0.0; v3 != v9; ++v3)
      {
        v17 = *v3 - v13;
        if (v17 >= -36.0436534)
          i = i + exp(v17);
      }
      v11 = v13 + log(i);
    }
  }
  else
  {
    v11 = -INFINITY;
  }
  return -(v11 - log((double)v5));
}

long double quasar::mergedAcousticCostGeneric(uint64_t *a1, double **a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  long double i;
  double v21;

  v4 = *a1;
  if (a1[1] == *a1)
  {
    v12 = 0;
    v10 = *a2;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      v9 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, *(_QWORD *)(v4 + 8 * v7));
      v10 = *a2;
      (*a2)[v7++] = -v9;
      v4 = *a1;
      v11 = a1[1] - *a1;
    }
    while (v7 < v11 >> 3);
    v12 = v11 >> 3;
  }
  v13 = a2[1];
  v14 = v13 - v10;
  if (v14)
  {
    if (v14 == 1)
    {
      v15 = *v10;
    }
    else
    {
      v16 = v10 + 1;
      v17 = *v10;
      while (v16 != v13)
      {
        v18 = *v16++;
        v19 = v18;
        if (v18 > v17)
          v17 = v19;
      }
      for (i = 0.0; v10 != v13; ++v10)
      {
        v21 = *v10 - v17;
        if (v21 >= -36.0436534)
          i = i + exp(v21);
      }
      v15 = v17 + log(i);
    }
  }
  else
  {
    v15 = -INFINITY;
  }
  return -(v15 - log((double)(unint64_t)v12));
}

double quasar::mergedConfidence(uint64_t **a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  double result;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a1;
  if (a2)
  {
    v3 = a1[1];
    if (v2 == v3)
    {
      return 0.0;
    }
    else
    {
      v4 = 1;
      result = 0.0;
      do
      {
        if ((v4 & 1) != 0 || *(double *)(*v2 + 32) > result)
          result = *(double *)(*v2 + 32);
        v4 = 0;
        ++v2;
      }
      while (v2 != v3);
    }
  }
  else
  {
    v6 = a1[1];
    v7 = 0.0;
    if (v2 != v6)
    {
      v8 = *a1;
      do
      {
        v9 = *v8++;
        v7 = v7 + *(double *)(v9 + 32);
      }
      while (v8 != v6);
    }
    return v7 / (double)(unint64_t)(v6 - v2);
  }
  return result;
}

void quasar::mergedLogPosterior(uint64_t a1, double **a2)
{
  uint64_t *v2;
  double *v3;
  uint64_t v4;
  unint64_t v5;
  double *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  long double i;
  double v14;

  v2 = *(uint64_t **)a1;
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4)
  {
    v5 = v4 >> 3;
    if (v5 <= 1)
      v5 = 1;
    v6 = *a2;
    do
    {
      v7 = *v2++;
      *v6++ = *(double *)(v7 + 56);
      --v5;
    }
    while (v5);
  }
  v8 = a2[1];
  if ((unint64_t)(v8 - v3) > 1)
  {
    v9 = v3 + 1;
    v10 = *v3;
    while (v9 != v8)
    {
      v11 = *v9++;
      v12 = v11;
      if (v11 > v10)
        v10 = v12;
    }
    for (i = 0.0; v3 != v8; ++v3)
    {
      v14 = *v3 - v10;
      if (v14 >= -36.0436534)
        i = i + exp(v14);
    }
    log(i);
  }
}

void quasar::mergedLogPosteriorGeneric(uint64_t *a1, double **a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  long double i;
  double v17;

  v4 = *a1;
  if (a1[1] == *a1)
  {
    v10 = *a2;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        std::__throw_bad_function_call[abi:ne180100]();
      v9 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, *(_QWORD *)(v4 + 8 * v7));
      v10 = *a2;
      (*a2)[v7++] = v9;
      v4 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 3);
  }
  v11 = a2[1];
  if ((unint64_t)(v11 - v10) > 1)
  {
    v12 = v10 + 1;
    v13 = *v10;
    while (v12 != v11)
    {
      v14 = *v12++;
      v15 = v14;
      if (v14 > v13)
        v13 = v15;
    }
    for (i = 0.0; v10 != v11; ++v10)
    {
      v17 = *v10 - v13;
      if (v17 >= -36.0436534)
        i = i + exp(v17);
    }
    log(i);
  }
}

double quasar::mergedMin(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  double v10;

  v3 = (_QWORD *)*a1;
  if (a1[1] == *a1)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_10;
  v6 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  v7 = (_QWORD *)*a1;
  if (a1[1] - *a1 >= 9uLL)
  {
    v8 = 1;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 24);
      if (!v9)
        break;
      v10 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, v7[v8]);
      if (v10 < v6)
        v6 = v10;
      ++v8;
      v7 = (_QWORD *)*a1;
      if (v8 >= (uint64_t)(a1[1] - *a1) >> 3)
        return v6;
    }
LABEL_10:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return v6;
}

double quasar::mergedMax(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  double v10;

  v3 = (_QWORD *)*a1;
  if (a1[1] == *a1)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
    goto LABEL_10;
  v6 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *v3);
  v7 = (_QWORD *)*a1;
  if (a1[1] - *a1 >= 9uLL)
  {
    v8 = 1;
    while (1)
    {
      v9 = *(_QWORD *)(a2 + 24);
      if (!v9)
        break;
      v10 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, v7[v8]);
      if (v6 < v10)
        v6 = v10;
      ++v8;
      v7 = (_QWORD *)*a1;
      if (v8 >= (uint64_t)(a1[1] - *a1) >> 3)
        return v6;
    }
LABEL_10:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return v6;
}

double quasar::mergedGraphCost(uint64_t **a1, double **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t *v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  double *v18;
  double v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  long double i;
  double v29;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = v3 - *a1;
  if (v3 != *a1)
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v3 - *a1;
    v7 = *a2;
    v8 = *a1;
    do
    {
      v9 = *v8++;
      *v7++ = *(double *)(v9 + 240);
      --v6;
    }
    while (v6);
  }
  v10 = a2[1];
  v11 = v10 - v4;
  if (v11)
  {
    if (v11 == 1)
    {
      v12 = *v4;
    }
    else
    {
      v13 = v4 + 1;
      v14 = *v4;
      while (v13 != v10)
      {
        v15 = *v13++;
        v16 = v15;
        if (v15 > v14)
          v14 = v16;
      }
      v17 = 0.0;
      if (v4 != v10)
      {
        v18 = v4;
        do
        {
          v19 = *v18 - v14;
          if (v19 >= -36.0436534)
            v17 = v17 + exp(v19);
          ++v18;
        }
        while (v18 != v10);
      }
      v12 = v14 + log(v17);
    }
  }
  else
  {
    v12 = -INFINITY;
  }
  if (v3 != v2)
  {
    if (v5 <= 1)
      v20 = 1;
    else
      v20 = v5;
    v21 = v4;
    do
    {
      v22 = *v2++;
      *v21++ = *(double *)(v22 + 240) - *(double *)(v22 + 40);
      --v20;
    }
    while (v20);
  }
  if (v11)
  {
    if (v11 == 1)
    {
      v23 = *v4;
    }
    else
    {
      v24 = v4 + 1;
      v25 = *v4;
      while (v24 != v10)
      {
        v26 = *v24++;
        v27 = v26;
        if (v26 > v25)
          v25 = v27;
      }
      for (i = 0.0; v4 != v10; ++v4)
      {
        v29 = *v4 - v25;
        if (v29 >= -36.0436534)
          i = i + exp(v29);
      }
      v23 = v25 + log(i);
    }
  }
  else
  {
    v23 = -INFINITY;
  }
  return -(v23 - v12);
}

void quasar::getNormWord(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  _BYTE *v10;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v5 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    v6 = (char *)&v17;
    quasar::QsrText::decodeQsrText(v5, a1, (uint64_t)&v17);
    if (v19 >= 0)
      v7 = (char *)&v17 + HIBYTE(v19);
    else
      v7 = (char *)v17 + v18;
    if (v19 < 0)
      v6 = (char *)v17;
    while (v6 != v7)
    {
      *v6 = __tolower(*v6);
      ++v6;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::splitStringSimple((uint64_t)&v17, (uint64_t *)__p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    v8 = v15;
    for (i = v16; v8 != i; v8 += 24)
    {
      v10 = (_BYTE *)v8;
      if (*(char *)(v8 + 23) < 0)
        v10 = *(_BYTE **)v8;
      if (*v10 != 92)
      {
        std::string::basic_string[abi:ne180100]<0>(v11, "\\");
        quasar::splitStringSimple(v8, (uint64_t *)v11, (uint64_t *)__p);
        std::string::operator=((std::string *)v8, (const std::string *)__p[0]);
        v20 = __p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
        if (v12 < 0)
          operator delete(v11[0]);
      }
    }
    __p[0] = " ";
    __p[1] = (void *)1;
    quasar::join<std::vector<std::string>>(&v15, (uint64_t *)__p);
    __p[0] = &v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v19) < 0)
      operator delete(v17);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1ADDF0398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::setNormWords(quasar *this, kaldi::WordHypLattice *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *__p[2];
  char v5;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  while (v2 != v3)
  {
    quasar::getNormWord(*v2 + 264, __p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(*v2 + 464, (__int128 *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    ++v2;
  }
}

void sub_1ADDF0484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::mergeArcs(kaldi::WordHypLattice *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  const std::string *v35;
  uint64_t v36;
  uint64_t v37;
  const std::string *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  kaldi::WordHypLattice::Arc **i;
  kaldi::WordHypLattice::Arc **v43;
  void *__p[3];
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3 == 8)
    return;
  v7 = **(_QWORD **)a2;
  std::vector<double>::vector(__p, v3 >> 3);
  *(long double *)(v7 + 16) = quasar::mergedAcousticCost(a2, (double **)__p);
  *(long double *)(v7 + 24) = quasar::mergedAcousticCostUnpushed(a2, (double **)__p);
  *(double *)(v7 + 32) = quasar::mergedConfidence((uint64_t **)a2, a3);
  quasar::mergedLogPosterior(a2, (double **)__p);
  *(_QWORD *)(v7 + 56) = v8;
  v55[0] = &off_1E5D3EF30;
  v56 = v55;
  quasar::mergedLogPosteriorGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v55);
  *(_QWORD *)(v7 + 64) = v9;
  v10 = v56;
  if (v56 == v55)
  {
    v11 = 4;
    v10 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_7;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_7:
  *(double *)(v7 + 40) = quasar::mergedGraphCost((uint64_t **)a2, (double **)__p);
  v12 = *(uint64_t **)a2;
  v13 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 = (*(unsigned __int8 *)(v15 + 49) | v14) != 0;
    }
    while (v12 != v13);
  }
  *(_BYTE *)(v7 + 49) = v14;
  v53[0] = &off_1E5D3EF88;
  v54 = v53;
  *(double *)(v7 + 128) = quasar::mergedMin((_QWORD *)a2, (uint64_t)v53);
  v16 = v54;
  if (v54 == v53)
  {
    v17 = 4;
    v16 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_17;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_17:
  v51[0] = &off_1E5D3EFE0;
  v52 = v51;
  *(double *)(v7 + 136) = quasar::mergedMax((_QWORD *)a2, (uint64_t)v51);
  v18 = v52;
  if (v52 == v51)
  {
    v19 = 4;
    v18 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_22;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
  v49[0] = &off_1E5D3F038;
  v50 = v49;
  *(long double *)(v7 + 192) = quasar::mergedAcousticCostGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v49);
  v20 = v50;
  if (v50 == v49)
  {
    v21 = 4;
    v20 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_27;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_27:
  v47[0] = &off_1E5D3F090;
  v48 = v47;
  *(long double *)(v7 + 200) = quasar::mergedAcousticCostGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v47);
  v22 = v48;
  if (v48 == v47)
  {
    v23 = 4;
    v22 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  v45[0] = &off_1E5D3F0E8;
  v46 = v45;
  quasar::mergedLogPosteriorGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v45);
  *(_QWORD *)(v7 + 208) = v24;
  v25 = v46;
  if (v46 == v45)
  {
    v26 = 4;
    v25 = v45;
    goto LABEL_36;
  }
  if (v46)
  {
    v26 = 5;
LABEL_36:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = *(uint64_t **)a2;
  v28 = *(_QWORD *)(a2 + 8);
  v29 = v28 - *(_QWORD *)a2;
  if (v28 == *(_QWORD *)a2)
  {
    v34 = 0;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = v29 >> 3;
    if (v32 <= 1)
      v32 = 1;
    v33 = -INFINITY;
    do
    {
      if (*(double *)(v27[v30] + 56) > v33)
      {
        v31 = v30;
        v33 = *(double *)(v27[v30] + 56);
      }
      ++v30;
    }
    while (v32 != v30);
    v34 = v31;
  }
  v35 = (const std::string *)v27[v34];
  *(_QWORD *)(v7 + 256) = *((_QWORD *)&v35[10].__r_.__value_.__l + 2);
  std::string::operator=((std::string *)(v7 + 264), v35 + 11);
  v36 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v34);
  *(_DWORD *)(v7 + 288) = *(_DWORD *)(v36 + 288);
  if (v7 == v36)
  {
    v38 = (const std::string *)v7;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v7 + 80), *(std::string **)(v36 + 80), *(__int128 **)(v36 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 88) - *(_QWORD *)(v36 + 80)) >> 3));
    v37 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v34);
    v38 = (const std::string *)v7;
    if (v7 != v37)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 104), *(char **)(v37 + 104), *(_QWORD *)(v37 + 112), (uint64_t)(*(_QWORD *)(v37 + 112) - *(_QWORD *)(v37 + 104)) >> 2);
      v38 = *(const std::string **)(*(_QWORD *)a2 + 8 * v34);
    }
  }
  std::string::operator=((std::string *)(v7 + 216), v38 + 9);
  v39 = *(uint64_t **)a2;
  v40 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v34);
  if (v7 != v40)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v7 + 168), *(std::string **)(v40 + 168), *(__int128 **)(v40 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v40 + 176) - *(_QWORD *)(v40 + 168)) >> 3));
    v39 = *(uint64_t **)a2;
    v41 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v34);
    if (v7 != v41)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 144), *(char **)(v41 + 144), *(_QWORD *)(v41 + 152), (uint64_t)(*(_QWORD *)(v41 + 152) - *(_QWORD *)(v41 + 144)) >> 2);
      v39 = *(uint64_t **)a2;
    }
  }
  for (i = (kaldi::WordHypLattice::Arc **)(v39 + 1); i != *(kaldi::WordHypLattice::Arc ***)(a2 + 8); i = v43)
  {
    v43 = i + 1;
    kaldi::WordHypLattice::DeleteArc(a1, i);
  }
  *(_BYTE *)a1 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADDF091C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a15;
  if (a15 == v27)
  {
    v30 = 4;
    v29 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::mergeArcs(quasar *this, kaldi::WordHypLattice *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32[2];
  unint64_t *v33;

  v3 = *((_QWORD *)this + 2);
  v30 = *((_QWORD *)this + 3);
  if (v3 != v30)
  {
    v4 = (int)a2;
    do
    {
      v32[0] = 0;
      v32[1] = 0;
      v31 = (uint64_t *)v32;
      v5 = *(_QWORD *)v3 + 64;
      v6 = *(_QWORD *)(*(_QWORD *)v3 + 72);
      if (v6 != v5)
      {
        do
        {
          v33 = (unint64_t *)(*(_QWORD *)(v6 + 16) + 8);
          v7 = std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(&v31, v33, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
          v33 = (unint64_t *)(*(_QWORD *)(v6 + 16) + 464);
          v8 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v7 + 5, (const void **)v33, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
          v9 = (_QWORD *)v8[8];
          v10 = v8[9];
          if ((unint64_t)v9 >= v10)
          {
            v12 = v8[7];
            v13 = ((uint64_t)v9 - v12) >> 3;
            if ((unint64_t)(v13 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v14 = v10 - v12;
            v15 = v14 >> 2;
            if (v14 >> 2 <= (unint64_t)(v13 + 1))
              v15 = v13 + 1;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v8 + 9), v16);
            else
              v17 = 0;
            v18 = &v17[8 * v13];
            *(_QWORD *)v18 = *(_QWORD *)(v6 + 16);
            v11 = v18 + 8;
            v20 = (char *)v8[7];
            v19 = (char *)v8[8];
            if (v19 != v20)
            {
              do
              {
                v21 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *((_QWORD *)v18 - 1) = v21;
                v18 -= 8;
              }
              while (v19 != v20);
              v19 = (char *)v8[7];
            }
            v8[7] = (uint64_t)v18;
            v8[8] = (uint64_t)v11;
            v8[9] = (uint64_t)&v17[8 * v16];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v9 = *(_QWORD *)(v6 + 16);
            v11 = v9 + 1;
          }
          v8[8] = (uint64_t)v11;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6 != v5);
        v22 = v31;
        if (v31 != (uint64_t *)v32)
        {
          do
          {
            v23 = (uint64_t *)v22[5];
            if (v23 != v22 + 6)
            {
              do
              {
                if ((unint64_t)(v23[8] - v23[7]) >= 9)
                  quasar::mergeArcs(this, (uint64_t)(v23 + 7), v4);
                v24 = (uint64_t *)v23[1];
                if (v24)
                {
                  do
                  {
                    v25 = v24;
                    v24 = (uint64_t *)*v24;
                  }
                  while (v24);
                }
                else
                {
                  do
                  {
                    v25 = (uint64_t *)v23[2];
                    v26 = *v25 == (_QWORD)v23;
                    v23 = v25;
                  }
                  while (!v26);
                }
                v23 = v25;
              }
              while (v25 != v22 + 6);
            }
            v27 = (uint64_t *)v22[1];
            if (v27)
            {
              do
              {
                v28 = v27;
                v27 = (uint64_t *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v28 = (uint64_t *)v22[2];
                v26 = *v28 == (_QWORD)v22;
                v22 = v28;
              }
              while (!v26);
            }
            v22 = v28;
          }
          while (v28 != (uint64_t *)v32);
        }
      }
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy((uint64_t)&v31, v32[0]);
      v3 += 8;
    }
    while (v3 != v30);
  }
  kaldi::WordHypLattice::RecomputeTopSortedNodes(this);
  kaldi::WordHypLattice::ReassignNodeIds((uint64_t)this);
  return kaldi::WordHypLattice::ReassignArcIds((uint64_t)this);
}

void sub_1ADDF0C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3EF30;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3EF30;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 64);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3EF88;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3EF88;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 128);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3EFE0;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3EFE0;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 136);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3F038;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3F038;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 192);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3F090;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3F090;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 200);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3F0E8;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3F0E8;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 208);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_OWORD *quasar::Lexicon::Lexicon(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if ((_DWORD)a3)
  {
    quasar::Lexicon::readMappedLexicon((uint64_t)a1, a2, &v27);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a1, &v27);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"read mmaped lexicon from ", 25);
      v9 = *(char *)(a2 + 23);
      if (v9 >= 0)
        v10 = a2;
      else
        v10 = *(_QWORD *)a2;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 23);
      else
        v11 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
    }
    if (!*(_QWORD *)a1)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not read lexicon data from mmaped source ", 47);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = a2;
      else
        v14 = *(_QWORD *)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
    }
  }
  else
  {
    v26 = 0;
    if ((kaldi::Input::OpenInternal(&v26, a2, a3, 0) & 1) == 0)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not read lexicon data from text source ", 45);
      v22 = *(char *)(a2 + 23);
      if (v22 >= 0)
        v23 = a2;
      else
        v23 = *(_QWORD *)a2;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(a2 + 23);
      else
        v24 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
    }
    v16 = kaldi::Input::Stream((kaldi::Input *)&v26);
    v25 = 0;
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Lexicon,std::allocator<kaldi::quasar::Lexicon>,std::istream &,BOOL,BOOL,void>(v16, (unsigned __int8 *)&v25 + 1, (unsigned __int8 *)&v25, &v27);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a1, &v27);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    kaldi::Input::Close((kaldi::Input *)&v26);
    kaldi::Input::~Input((kaldi::Input *)&v26);
  }
  return a1;
}

void sub_1ADDF1424(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::Lexicon::readMappedLexicon@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  _QWORD *v19;
  int v20;
  fst::MappedFile *v22;
  const fst::MappedFile **v23;
  uint64_t v24;
  uint64_t v25;
  fst::MappedFile *v26;
  const fst::MappedFile **v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *__p[2];
  char v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  _QWORD v59[2];
  _BYTE v60[408];
  _QWORD v61[22];

  v61[19] = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = 0;
  v6 = MEMORY[0x1E0DE4FA8];
  v7 = MEMORY[0x1E0DE4FA8] + 64;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v61[0] = MEMORY[0x1E0DE4FA8] + 64;
  v59[0] = v9;
  *(_QWORD *)((char *)v59 + *(_QWORD *)(v9 - 24)) = v10;
  v59[1] = 0;
  v11 = (std::ios_base *)((char *)v59 + *(_QWORD *)(v59[0] - 24));
  std::ios_base::init(v11, v60);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v59[0] = v6 + 24;
  v61[0] = v7;
  MEMORY[0x1AF44CA64](v60);
  std::ifstream::open();
  v12 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Could not read magic header from ", 33);
      v14 = *(char *)(a2 + 23);
      if (v14 >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
LABEL_28:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v40);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (v57 != 0x2D58454C2D525351 || v58 != 3158102)
  {
    if (quasar::gLogLevel >= 1)
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Magic header was wrong in ", 26);
      v18 = *(char *)(a2 + 23);
      if (v18 >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      if (v18 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      goto LABEL_28;
    }
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_30;
  }
  v36 = 0;
  v19 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Could not read the number of words from the mapped file ", 56);
      v20 = *(char *)(a2 + 23);
      if (v20 >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      if (v20 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
  v35 = 2;
  v22 = fst::MappedFile::Map((uint64_t)v59, (uint64_t)__p, (4 * v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (const fst::MappedFile **)(a1 + 16);
  std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>((_QWORD *)(a1 + 16), (uint64_t)v22);
  if (*(_QWORD *)(a1 + 16))
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    v24 = v48;
    v25 = v39;
    std::istream::seekg();
    v26 = fst::MappedFile::Map((uint64_t)v59, (uint64_t)__p, v24 - v25);
    v27 = (const fst::MappedFile **)(a1 + 32);
    std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v27, (uint64_t)v26);
    if (*v27)
    {
      std::allocate_shared[abi:ne180100]<kaldi::quasar::ConstLexicon,std::allocator<kaldi::quasar::ConstLexicon>,int &,fst::MappedFile &,fst::MappedFile &,void>(&v36, *v23, *v27, &v40);
      *(_OWORD *)a3 = v40;
      goto LABEL_50;
    }
    if (quasar::gLogLevel >= 1)
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Could not read the offset region in the mapped file ", 52);
      v32 = *(char *)(a2 + 23);
      if (v32 >= 0)
        v30 = a2;
      else
        v30 = *(_QWORD *)a2;
      if (v32 >= 0)
        v31 = *(unsigned __int8 *)(a2 + 23);
      else
        v31 = *(_QWORD *)(a2 + 8);
LABEL_48:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v40);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Could not read the offset region in the mapped file ", 52);
    v29 = *(char *)(a2 + 23);
    if (v29 >= 0)
      v30 = a2;
    else
      v30 = *(_QWORD *)a2;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a2 + 23);
    else
      v31 = *(_QWORD *)(a2 + 8);
    goto LABEL_48;
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_50:
  if (v34 < 0)
    operator delete(__p[0]);
LABEL_30:
  v59[0] = *v8;
  *(_QWORD *)((char *)v59 + *(_QWORD *)(v59[0] - 24)) = v8[3];
  MEMORY[0x1AF44CA70](v60);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v61);
}

void sub_1ADDF19C0(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  if (a8 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&STACK[0x218]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *quasar::Lexicon::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _OWORD *v6;
  _OWORD *result;
  uint64_t v9;
  _OWORD v10[17];

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = (_OWORD *)operator new();
    result = quasar::Lexicon::Lexicon(v6, a1, 1);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    if (!v9)
    {
      memset(v10, 0, sizeof(v10));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Both dictMappedFile and dictFile are empty");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
    }
    v6 = (_OWORD *)operator new();
    result = quasar::Lexicon::Lexicon(v6, a2, 0);
  }
  *a3 = v6;
  return result;
}

void sub_1ADDF1BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C40A759441BLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::Lexicon::lookUpProns(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t result;
  char **v10;
  char **v11;
  unint64_t v12;
  unsigned __int8 v13;
  void *__p[2];
  char v15;
  void *v16[2];
  unsigned __int8 v17;
  char **v18;
  char **v19;

  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a3);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    return 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, a2);
  if ((_DWORD)result)
  {
    (*(void (**)(char ***__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v18, *a1, a2);
    v10 = v18;
    v11 = v19;
    if (v18 != v19)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(v16, *v10);
        v12 = v17;
        v13 = v17;
        if ((v17 & 0x80u) != 0)
          v12 = (unint64_t)v16[1];
        if (v12)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, " ");
          quasar::replaceAll((uint64_t)v16, (uint64_t)__p, a4);
          if (v15 < 0)
            operator delete(__p[0]);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)v16, (uint64_t)v16);
          v13 = v17;
        }
        if ((v13 & 0x80) != 0)
          operator delete(v16[0]);
        ++v10;
      }
      while (v10 != v11);
      v10 = v18;
    }
    if (v10)
    {
      v19 = v10;
      operator delete(v10);
    }
    return 1;
  }
  return result;
}

void sub_1ADDF1D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::Lexicon,std::allocator<kaldi::quasar::Lexicon>,std::istream &,BOOL,BOOL,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x180uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL,BOOL,std::allocator<kaldi::quasar::Lexicon>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADDF1DD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL,BOOL,std::allocator<kaldi::quasar::Lexicon>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42250;
  a1[1] = 0;
  kaldi::quasar::Lexicon::Lexicon(a1 + 3, a2, *a3, *a4, 0);
  return a1;
}

void sub_1ADDF1E30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::ConstLexicon,std::allocator<kaldi::quasar::ConstLexicon>,int &,fst::MappedFile &,fst::MappedFile &,void>@<X0>(int *a1@<X1>, const fst::MappedFile *a2@<X2>, const fst::MappedFile *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::__shared_ptr_emplace[abi:ne180100]<int &,fst::MappedFile &,fst::MappedFile &,std::allocator<kaldi::quasar::ConstLexicon>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADDF1EF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::__shared_ptr_emplace[abi:ne180100]<int &,fst::MappedFile &,fst::MappedFile &,std::allocator<kaldi::quasar::ConstLexicon>,0>(_QWORD *a1, int *a2, const fst::MappedFile *a3, const fst::MappedFile *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41DF0;
  kaldi::quasar::ConstLexicon::ConstLexicon((kaldi::quasar::ConstLexicon *)(a1 + 3), *a2, a3, a4);
  return a1;
}

void sub_1ADDF1F48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

kaldi::quasar::ConstLexicon *kaldi::quasar::ConstLexicon::ConstLexicon(kaldi::quasar::ConstLexicon *this, int a2, const fst::MappedFile *a3, const fst::MappedFile *a4)
{
  uint64_t v5;

  *(_QWORD *)this = off_1E5D32AB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_DWORD *)this + 12) = a2 - 1;
  v5 = *((_QWORD *)a4 + 1);
  *((_QWORD *)this + 7) = *((_QWORD *)a3 + 1);
  *((_QWORD *)this + 8) = v5;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  kaldi::quasar::ConstLexicon::Init(this);
  return this;
}

void sub_1ADDF2028(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;
  void **v3;

  if (v1[103] < 0)
    operator delete(*v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInOneFile,kaldi::quasar::ShortlistDataOnDisk,std::vector<std::string>>@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[16];
  void **v27;

  v6 = operator new();
  v7 = v6;
  v8 = 0;
  v9 = *a1;
  *a1 = 0;
  v26[0] = v9;
  do
  {
    v10 = &v26[v8];
    v11 = &a1[v8];
    v12 = a1[v8 + 2];
    v10[1] = a1[v8 + 1];
    v10[2] = v12;
    *((_BYTE *)v10 + 24) = a1[v8 + 3];
    v11[1] = 0;
    v11[2] = 0;
    *((_BYTE *)v11 + 24) = 0;
    v8 += 3;
  }
  while (v8 != 9);
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = 3 * v14;
    v16 = &v26[v15 + 10];
    v17 = (uint64_t)&a1[v15 + 10];
    v18 = *(_QWORD *)(v17 + 8);
    *v16 = *(_QWORD *)v17;
    v16[1] = v18;
    *((_BYTE *)v16 + 16) = *(_BYTE *)(v17 + 16);
    LOBYTE(v16) = v13;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v13 = 1;
    v14 = 1;
  }
  while ((v16 & 1) == 0);
  v24 = *a2;
  v25 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  kaldi::quasar::ShortlistDataInOneFile::ShortlistDataInOneFile(v6, v26, &v24);
  *a3 = v7;
  v27 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  for (i = 0; i != -6; i -= 3)
  {
    if (LOBYTE(v26[i + 15]))
    {
      v20 = v26[i + 13];
      if (v20)
        MEMORY[0x1AF44D160](v20, 0x1000C8077774924);
    }
  }
  for (j = 0; j != -9; j -= 3)
  {
    if (LOBYTE(v26[j + 9]))
    {
      v22 = v26[j + 7];
      if (v22)
        MEMORY[0x1AF44D160](v22, 0x1000C8077774924);
    }
  }
  result = v26[0];
  v26[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADDF21F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v6 - 40) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 40));
  kaldi::quasar::ShortlistDataOnDisk::~ShortlistDataOnDisk((kaldi::quasar::ShortlistDataOnDisk *)va);
  MEMORY[0x1AF44D190](v4, 0x10F1C408308A222);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistDataOnDisk::~ShortlistDataOnDisk(kaldi::quasar::ShortlistDataOnDisk *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;
  uint64_t v6;

  for (i = 0; i != -48; i -= 24)
  {
    if (*((_BYTE *)this + i + 120))
    {
      v3 = *(_QWORD *)((char *)this + i + 104);
      if (v3)
        MEMORY[0x1AF44D160](v3, 0x1000C8077774924);
    }
  }
  for (j = 0; j != -72; j -= 24)
  {
    if (*((_BYTE *)this + j + 72))
    {
      v5 = *(_QWORD *)((char *)this + j + 56);
      if (v5)
        MEMORY[0x1AF44D160](v5, 0x1000C8077774924);
    }
  }
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataInOneFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  kaldi::ExpectToken(a1, a2, "<ShortlistTable>");
}

void `anonymous namespace'::BuildFromModelFileWithEmbeddedShortlist(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void **v8;
  void *v9;
  void *v10;
  uint64_t i;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  std::string __p;
  uint64_t v20[16];
  unsigned __int8 v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  while (kaldi::Peek(a1, a2) == 60)
  {
    kaldi::ReadToken(a1, a2, (uint64_t)&v22);
    if (SHIBYTE(v24) < 0)
    {
      if (v23 == 16)
      {
        v8 = v22;
LABEL_8:
        v10 = *v8;
        v9 = v8[1];
        if (v10 == (void *)0x6853746F7669503CLL && v9 == (void *)0x3E7473696C74726FLL)
          kaldi::ReadBasicType<BOOL>(a1, a2, (char *)&v21);
      }
    }
    else if (SHIBYTE(v24) == 16)
    {
      v8 = (void **)&v22;
      goto LABEL_8;
    }
  }
  kaldi::quasar::ShortlistDataOnDisk::ShortlistDataOnDisk(v20, a1, a2, a3, v21);
  kaldi::ExpectToken(a1, a2, "<ShortlistLangPairs>");
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadToken(a1, a2, (uint64_t)&__p);
  kaldi::SplitStringToVector(&__p, ",", &v17);
  std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInOneFile,kaldi::quasar::ShortlistDataOnDisk,std::vector<std::string>>(v20, &v17, &v18);
  *a4 = v18;
  v18 = 0;
  v25 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  for (i = 0; i != -6; i -= 3)
  {
    if (LOBYTE(v20[i + 15]))
    {
      v13 = v20[i + 13];
      if (v13)
        MEMORY[0x1AF44D160](v13, 0x1000C8077774924);
    }
  }
  for (j = 0; j != -9; j -= 3)
  {
    if (LOBYTE(v20[j + 9]))
    {
      v15 = v20[j + 7];
      if (v15)
        MEMORY[0x1AF44D160](v15, 0x1000C8077774924);
    }
  }
  v16 = v20[0];
  v20[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
}

void sub_1ADDF253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 72) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 72));
  if (a18 < 0)
    operator delete(__p);
  kaldi::quasar::ShortlistDataOnDisk::~ShortlistDataOnDisk((kaldi::quasar::ShortlistDataOnDisk *)&a19);
  if (*(char *)(v20 - 73) < 0)
    operator delete(*(void **)(v20 - 96));
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataBasedOnTagInInput(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::__split_buffer<std::wstring>::pointer *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v27;
  const std::__fs::filesystem::directory_entry *v28;
  BOOL v29;
  std::vector<std::string>::pointer end;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::wstring *v35;
  std::wstring *v36;
  __int128 v37;
  std::string *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *cntrl;
  uint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  std::__fs::filesystem::path *p_p;
  std::string::size_type size;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  std::__fs::filesystem::path v56;
  void *v57[2];
  uint64_t v58;
  void *v59[2];
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  std::__fs::filesystem::path __p;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v65;
  std::__shared_weak_count *v66;
  std::__fs::filesystem::directory_iterator v67;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v68;
  std::__shared_weak_count *v69;
  std::vector<std::string> v70;
  uint64_t v71[4];
  int v72;
  std::__split_buffer<std::wstring> v73[7];
  std::__fs::filesystem::path v74;
  std::__fs::filesystem::path::__string_view v75;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  kaldi::ReadToken(a1, a2, (uint64_t)&v61);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
    if (HIBYTE(v63) != 16)
    {
      if (HIBYTE(v63) != 27)
        goto LABEL_111;
      v9 = (uint64_t *)&v61;
      goto LABEL_12;
    }
    if (v61 != (void *)0x696C74726F68533CLL || v62 != 0x3E656C6261547473)
    {
LABEL_111:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Unknown shortlist type: ", 24);
      if (v63 >= 0)
        v52 = &v61;
      else
        v52 = v61;
      if (v63 >= 0)
        v53 = HIBYTE(v63);
      else
        v53 = v62;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v73);
    }
LABEL_39:
    goto LABEL_107;
  }
  if (v62 == 16 && *(_QWORD *)v61 == 0x696C74726F68533CLL && *((_QWORD *)v61 + 1) == 0x3E656C6261547473)
    goto LABEL_39;
  if (v62 != 27)
    goto LABEL_111;
  v9 = (uint64_t *)v61;
LABEL_12:
  v11 = *v9;
  v12 = v9[1];
  v13 = v9[2];
  v14 = *(uint64_t *)((char *)v9 + 19);
  if (v11 != 0x696C74726F68533CLL
    || v12 != 0x49656C6261547473
    || v13 != 0x6C6946796E614D6ELL
    || v14 != 0x3E73656C6946796ELL)
  {
    goto LABEL_111;
  }
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  kaldi::ReadToken(a1, a2, (uint64_t)v59);
  *(_OWORD *)v57 = *(_OWORD *)a4;
  v58 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v56.__pn_, (char *)v59);
  std::__fs::filesystem::operator/[abi:ne180100](&v56, (uint64_t)v57, &v74);
  std::__fs::filesystem::__status(&v74, 0);
  if (LOBYTE(v73[0].__first_) != 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    v54 = std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(v73, (uint64_t *)&v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" is not a directory", 19);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v73);
  }
  memset(v71, 0, sizeof(v71));
  v72 = 1065353216;
  memset(&v70, 0, sizeof(v70));
  MEMORY[0x1AF44CE90](&v68, &v74, 0, 0);
  v18 = v68;
  v19 = v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = v69;
    v67.__imp_.__ptr_ = v18;
    v67.__imp_.__cntrl_ = v19;
    if (v69)
    {
      v23 = (unint64_t *)&v69->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v65 = 0;
      v66 = 0;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      goto LABEL_42;
    }
  }
  else
  {
    v67.__imp_.__ptr_ = v68;
    v67.__imp_.__cntrl_ = 0;
  }
  v65 = 0;
  v66 = 0;
LABEL_42:
  v27 = v65;
  while (v67.__imp_.__ptr_ != v27)
  {
    v28 = std::__fs::filesystem::directory_iterator::__dereference(&v67);
    std::__fs::filesystem::path::extension[abi:ne180100](&v28->__p_, (uint64_t)v73);
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p.__pn_, &kaldi::quasar::ShortlistConstants::SHORTLIST_EXTENSION);
    v75.__data_ = (const std::string_view::value_type *)&__p;
    v29 = std::__fs::filesystem::operator!=[abi:ne180100]((const std::__fs::filesystem::path *)v73, v75);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73[0].__end_) < 0)
    {
      operator delete(v73[0].__first_);
      if (v29)
        goto LABEL_73;
    }
    else if (v29)
    {
      goto LABEL_73;
    }
    std::__fs::filesystem::path::stem[abi:ne180100](&v28->__p_, (uint64_t)&__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v73, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v73[0].__first_ = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
      v73[0].__end_ = (std::__split_buffer<std::wstring>::pointer)__p.__pn_.__r_.__value_.__r.__words[2];
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk>((uint64_t)v71, (unsigned __int8 *)v73, (uint64_t)v73);
    if (SHIBYTE(v73[0].__end_) < 0)
      operator delete(v73[0].__first_);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p.__pn_, v28->__p_.__pn_.__r_.__value_.__l.__data_, v28->__p_.__pn_.__r_.__value_.__l.__size_);
    else
      __p.__pn_ = (std::__fs::filesystem::path::string_type)v28->__p_;
    end = v70.__end_;
    if (v70.__end_ >= v70.__end_cap_.__value_)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v33)
        v33 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555)
        v34 = 0xAAAAAAAAAAAAAAALL;
      else
        v34 = v33;
      v73[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v70.__end_cap_;
      if (v34)
        v35 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v70.__end_cap_, v34);
      else
        v35 = 0;
      v36 = v35 + v32;
      v73[0].__first_ = v35;
      v73[0].__begin_ = v36;
      v73[0].__end_cap_.__value_ = &v35[v34];
      v37 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
      v36->__r_.__value_.__r.__words[2] = __p.__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
      memset(&__p, 0, sizeof(__p));
      v73[0].__end_ = v36 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v70, (std::__split_buffer<std::string> *)v73);
      v38 = v70.__end_;
      std::__split_buffer<std::string>::~__split_buffer(v73);
      v70.__end_ = v38;
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    else
    {
      v31 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
      v70.__end_->__r_.__value_.__r.__words[2] = __p.__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v31;
      v70.__end_ = end + 1;
    }
LABEL_73:
    std::__fs::filesystem::directory_iterator::__increment(&v67, 0);
  }
  v39 = v66;
  if (v66)
  {
    v40 = (unint64_t *)&v66->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  cntrl = v67.__imp_.__cntrl_;
  if (v67.__imp_.__cntrl_)
  {
    v43 = &v67.__imp_.__cntrl_->__shared_owners_;
    do
      v44 = __ldaxr((unint64_t *)v43);
    while (__stlxr(v44 - 1, (unint64_t *)v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v45 = v69;
  if (v69)
  {
    v46 = (unint64_t *)&v69->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Available shortlist files: ", 27);
    kaldi::JoinVectorToString<std::string>((uint64_t *)&v70, ",");
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    else
      size = __p.__pn_.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v73);
  }
  std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInManyFiles,std::__fs::filesystem::path,std::__fs::filesystem::path,std::unordered_map<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>((uint64_t)v57, (uint64_t)&v56, v71, (uint64_t *)v73);
  *a5 = v73[0].__first_;
  v73[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)v71);
  if (SHIBYTE(v74.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
LABEL_107:
  if (SHIBYTE(v63) < 0)
    operator delete(v61);
}

void sub_1ADDF2CA4()
{
  JUMPOUT(0x1ADDF2D64);
}

void sub_1ADDF2CB8()
{
  JUMPOUT(0x1ADDF2D8CLL);
}

void sub_1ADDF2CC0()
{
  JUMPOUT(0x1ADDF2D9CLL);
}

void sub_1ADDF2CC8()
{
  JUMPOUT(0x1ADDF2DACLL);
}

void sub_1ADDF2CD0()
{
  JUMPOUT(0x1ADDF2DBCLL);
}

void sub_1ADDF2CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,void *__pa,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__split_buffer<std::wstring> *a36)
{
  if (SHIBYTE(a28) < 0)
    operator delete(__pa);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  JUMPOUT(0x1ADDF2D64);
}

void kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(uint64_t a1@<X0>, const void **a2@<X1>, std::string::size_type *a3@<X8>)
{
  size_t v6;
  std::__fs::filesystem::path *v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string::size_type v11;
  std::__fs::filesystem::path *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  std::mutex *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string::size_type size;
  std::__fs::filesystem::path *v23;
  fst::MappedFile *v24;
  _QWORD *v25;
  std::string::size_type v26;
  std::__fs::filesystem::path *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  fst::MappedFile *v34;
  _BYTE v35[15];
  unsigned __int8 v36;
  std::__fs::filesystem::path v37[2];
  int v38;
  std::string pn;
  std::__fs::filesystem::path v40;
  std::__fs::filesystem::path __p[5];
  unint64_t v42;
  std::__fs::filesystem::path v43[17];
  _QWORD v44[20];

  v44[19] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&pn, kaldi::quasar::ShortlistConstants::SHORTLISTS_DIRECTORY_NAME);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, a1, v43);
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = v37;
  std::string::basic_string[abi:ne180100]((uint64_t)v37, v6 + 10);
  if ((v37[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::__fs::filesystem::path *)v37[0].__pn_.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".shortlist");
  __p[0] = v37[0];
  memset(v37, 0, 24);
  std::__fs::filesystem::operator/[abi:ne180100](__p, (uint64_t)v43, &v40);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37[0].__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43[0].__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v40, 0);
  if (v43[0].__pn_.__r_.__value_.__s.__data_[0] != 255 && v43[0].__pn_.__r_.__value_.__s.__data_[0])
  {
    if ((v13 & 1) == 0
    {
      v31 = (_QWORD *)operator new();
      v31[2] = 0;
      v31[1] = 0;
      *v31 = v31 + 1;
      kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::loaded_files_with_shortlist_data = (uint64_t)v31;
    }
    if ((v14 & 1) == 0
    {
      v32 = operator new();
      *(_QWORD *)v32 = 850045863;
      *(_OWORD *)(v32 + 8) = 0u;
      *(_OWORD *)(v32 + 24) = 0u;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_QWORD *)(v32 + 56) = 0;
      kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::mutex = v32;
    }
    v15 = (std::mutex *)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::mutex;
    std::mutex::lock((std::mutex *)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::mutex);
    v43[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v16 = std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::piecewise_construct_t const&,std::tuple<std::__fs::filesystem::path const&>,std::tuple<>>((uint64_t **)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::loaded_files_with_shortlist_data, (std::basic_string_view<_CharT, _Traits>::size_type)&v40, (uint64_t)&std::piecewise_construct, (__int128 **)v43);
    *a3 = 0;
    a3[1] = 0;
    v17 = (std::__shared_weak_count *)v16[8];
    if (v17)
    {
      v18 = std::__shared_weak_count::lock(v17);
      a3[1] = (std::string::size_type)v18;
      if (v18)
      {
        v19 = v16[7];
        *a3 = v19;
        if (v19)
          goto LABEL_34;
      }
      else if (*a3)
      {
LABEL_34:
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Shortlist for path: ", 20);
          v21 = v20;
          size = HIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]);
          if ((v40.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v40;
          else
            v23 = (std::__fs::filesystem::path *)v40.__pn_.__r_.__value_.__r.__words[0];
          if ((v40.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v40.__pn_.__r_.__value_.__l.__size_;
          std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v20, v23, (_BYTE *)v23 + size, 0x22u, 0x5Cu);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" is already loaded. Returning cached object.", 44);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v43);
        }
LABEL_70:
        std::mutex::unlock(v15);
        goto LABEL_71;
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a3);
    if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
    else
      pn = v40.__pn_;
    std::ifstream::basic_ifstream(v43);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    if ((v43[1].__pn_.__r_.__value_.__s.__data_[*(_QWORD *)(v43[0].__pn_.__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&pn);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&pn, (uint64_t)"Failed to open shortlist file: ", 31);
      std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(v33, (uint64_t *)&v40);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&pn);
    }
    if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
    else
      pn = v40.__pn_;
    fst::FstReadOptions::FstReadOptions(v37, &pn, 0, 0, 0);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    v38 = 2;
    std::istream::tellg();
    std::istream::seekg();
    v24 = fst::MappedFile::Map((uint64_t)v43, (uint64_t)v37, v42);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&pn);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&pn, (uint64_t)"Loading shortlist: ", 19);
      v26 = HIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]);
      if ((v40.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v40;
      else
        v27 = (std::__fs::filesystem::path *)v40.__pn_.__r_.__value_.__r.__words[0];
      if ((v40.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = v40.__pn_.__r_.__value_.__l.__size_;
      std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v25, v27, (_BYTE *)v27 + v26, 0x22u, 0x5Cu);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&pn);
    }
    v36 = 1;
    if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
    else
      pn = v40.__pn_;
    kaldi::Input::Input(v35, &pn, &v36);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    v28 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v35);
    v29 = (_QWORD *)operator new();
    v34 = v24;
    kaldi::quasar::ShortlistDataOnDisk::ShortlistDataOnDisk(v29, v28, v36, (uint64_t *)&v34, 0);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::shared_ptr[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,void>(a3, (uint64_t)v29);
    v30 = (uint64_t)v34;
    v34 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>((uint64_t **)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::loaded_files_with_shortlist_data, (std::basic_string_view<_CharT, _Traits>::size_type)&v40, (__int128 *)&v40, a3);
    kaldi::Input::~Input((kaldi::Input *)v35);
    if (SHIBYTE(v37[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37[0].__pn_.__r_.__value_.__l.__data_);
    v43[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
    *(std::string::size_type *)((char *)v43[0].__pn_.__r_.__value_.__r.__words
                              + *(_QWORD *)(v43[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1AF44CA70](&v43[0].__pn_.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x1AF44D094](v44);
    goto LABEL_70;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Shortlist file: ", 16);
    v10 = v9;
    v11 = HIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]);
    if ((v40.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v40;
    else
      v12 = (std::__fs::filesystem::path *)v40.__pn_.__r_.__value_.__r.__words[0];
    if ((v40.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v40.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v9, v12, (_BYTE *)v12 + v11, 0x22u, 0x5Cu);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is not found", 13);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_71:
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
}

void sub_1ADDF34A8()
{
  uint64_t v0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0);
  JUMPOUT(0x1ADDF35CCLL);
}

void sub_1ADDF34C0(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  kaldi::Input::~Input((kaldi::Input *)va);
  JUMPOUT(0x1ADDF3598);
}

void sub_1ADDF34D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  JUMPOUT(0x1ADDF35B4);
}

void sub_1ADDF34EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    JUMPOUT(0x1ADDF35C0);
  JUMPOUT(0x1ADDF35C4);
}

void sub_1ADDF3500(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADDF35CCLL);
}

void sub_1ADDF3518()
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&STACK[0x218]);
  JUMPOUT(0x1ADDF3524);
}

void sub_1ADDF3530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  JUMPOUT(0x1ADDF35B4);
}

void sub_1ADDF3540()
{
  JUMPOUT(0x1ADDF35CCLL);
}

void sub_1ADDF354C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (v10)
    MEMORY[0x1AF44D190](v11, 0x1070C40E0CA08F1);
  JUMPOUT(0x1ADDF3590);
}

void sub_1ADDF35DC()
{
  char v0;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x218]);
  if (v0 < 0)
    JUMPOUT(0x1ADDF3660);
  JUMPOUT(0x1ADDF3664);
}

void sub_1ADDF35EC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADDF3664);
}

void sub_1ADDF3610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (a29 < 0)
    JUMPOUT(0x1ADDF3660);
  JUMPOUT(0x1ADDF3664);
}

void sub_1ADDF366C()
{
  JUMPOUT(0x1ADDF3664);
}

_QWORD *std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = a2[1];
  if ((v3 & 0x80u) != 0)
  {
    a2 = (uint64_t *)*a2;
    v3 = v4;
  }
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(a1, a2, (_BYTE *)a2 + v3, 0x22u, 0x5Cu);
  return a1;
}

BOOL std::__fs::filesystem::operator!=[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) != 0;
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInManyFiles,std::__fs::filesystem::path,std::__fs::filesystem::path,std::unordered_map<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9[5];
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;

  v8 = operator new();
  *(_OWORD *)v12 = *(_OWORD *)a1;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v9, a3);
  kaldi::quasar::ShortlistDataInManyFiles::ShortlistDataInManyFiles(v8, (__int128 *)v12, (__int128 *)__p, v9);
  *a4 = v8;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)v9);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
}

void sub_1ADDF388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)&a10);
  if (a20 < 0)
    operator delete(__p);
  std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>((uint64_t)&a22);
  MEMORY[0x1AF44D190](v22, 0x10B3C409C5B7BD4);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v16[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)v16 + 14) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADDF3B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::piecewise_construct_t const&,std::tuple<std::__fs::filesystem::path const&>,std::tuple<>>(uint64_t **a1, std::basic_string_view<_CharT, _Traits>::size_type a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  std::__fs::filesystem::path::__string_view v12;

  v12.__size_ = a2;
  v12.__data_ = (const std::string_view::value_type *)&v11;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__find_equal<std::__fs::filesystem::path>((uint64_t)a1, v12);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__find_equal<std::__fs::filesystem::path>(uint64_t a1, std::__fs::filesystem::path::__string_view a2)
{
  std::string_view::value_type *data;
  uint64_t v3;
  _QWORD *v4;
  const std::__fs::filesystem::path *size;
  _QWORD *v6;
  const std::__fs::filesystem::path *v7;

  data = (std::string_view::value_type *)a2.__data_;
  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    size = (const std::__fs::filesystem::path *)a2.__size_;
    do
    {
      while (1)
      {
        v6 = (_QWORD *)v3;
        v7 = (const std::__fs::filesystem::path *)(v3 + 32);
        a2.__data_ = (const std::string_view::value_type *)(v3 + 32);
        if (!std::__fs::filesystem::operator<[abi:ne180100](size, a2))
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_10;
      }
      a2.__data_ = (const std::string_view::value_type *)size;
      if (!std::__fs::filesystem::operator<[abi:ne180100](v7, a2))
        break;
      v4 = v6 + 1;
      v3 = v6[1];
    }
    while (v3);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *(_QWORD *)data = v6;
  return v4;
}

uint64_t std::__fs::filesystem::operator<[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) >> 31;
}

_QWORD *std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::shared_ptr[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5CFFF88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADDF3E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  a10 = 0;
  if (v10)
    std::default_delete<kaldi::quasar::ShortlistDataOnDisk>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::ShortlistDataOnDisk *,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_default_delete<kaldi::quasar::ShortlistDataOnDisk,kaldi::quasar::ShortlistDataOnDisk>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_pointer<kaldi::quasar::ShortlistDataOnDisk *,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_default_delete<kaldi::quasar::ShortlistDataOnDisk,kaldi::quasar::ShortlistDataOnDisk>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<kaldi::quasar::ShortlistDataOnDisk>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ShortlistDataOnDisk *,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_default_delete<kaldi::quasar::ShortlistDataOnDisk,kaldi::quasar::ShortlistDataOnDisk>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<kaldi::quasar::ShortlistDataOnDisk>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = 0;
    while (1)
    {
      if (LOBYTE(a2[v3 + 15]))
      {
        v4 = a2[v3 + 13];
        if (v4)
          MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
      }
      v3 -= 3;
      if (v3 == -6)
      {
        v5 = 0;
        while (1)
        {
          if (LOBYTE(a2[v5 + 9]))
          {
            v6 = a2[v5 + 7];
            if (v6)
              MEMORY[0x1AF44D160](v6, 0x1000C8077774924);
          }
          v5 -= 3;
          if (v5 == -9)
          {
            v7 = *a2;
            *a2 = 0;
            if (v7)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
            JUMPOUT(0x1AF44D190);
          }
        }
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>(uint64_t **a1, std::basic_string_view<_CharT, _Traits>::size_type a2, __int128 *a3, std::string::size_type *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;
  std::__fs::filesystem::path::__string_view v13;

  v13.__size_ = a2;
  v13.__data_ = (const std::string_view::value_type *)&v12;
  v7 = (uint64_t **)std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__find_equal<std::__fs::filesystem::path>((uint64_t)a1, v13);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__construct_node<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

std::string *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__construct_node<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, std::string::size_type *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::__fs::filesystem::path const,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>::pair[abi:ne180100]<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &,0>((std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADDF40C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::__fs::filesystem::path const,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>::pair[abi:ne180100]<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

uint64_t quasar::symbolicMatch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t Base;
  _BYTE v16[8];
  uint64_t v17;

  v16[0] = 0;
  v17 = 0;
  v14 = &unk_1E5D19270;
  Base = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase(a2, a1, (uint64_t)v16);
  v12 = &unk_1E5D19270;
  v13 = fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase((uint64_t)&v14, a3, (uint64_t)v16);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a5);
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v12, (uint64_t)a5, a4, 0, 0, -1, 0, INFINITY);
  v12 = &unk_1E5D268B8;
  v8 = v13;
  if (v13)
  {
    v9 = *(_DWORD *)(v13 + 56) - 1;
    *(_DWORD *)(v13 + 56) = v9;
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v14 = &unk_1E5D268B8;
  result = Base;
  if (Base)
  {
    v11 = *(_DWORD *)(Base + 56) - 1;
    *(_DWORD *)(Base + 56) = v11;
    if (!v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADDF4250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11, _DWORD *a12)
{
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;

  v13 = v12;
  *v13 = &unk_1E5D256C0;
  v15 = (_DWORD *)v13[1];
  if (v15)
  {
    v16 = v15[14] - 1;
    v15[14] = v16;
    if (!v16)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  }
  if (a10)
  {
    v17 = a10[14] - 1;
    a10[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  if (a12)
  {
    v18 = a12[14] - 1;
    a12[14] = v18;
    if (!v18)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADDF439C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADDF470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1ADDF4928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADDF4A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void sub_1ADDF4CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1ADDF4E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t _getNSDataForLastRowInMatrix(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * (kaldi::MatrixBase<float>::NumRows(a1) - 1));
  kaldi::MatrixBase<float>::NumCols(a1);
  return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v2, 4 * (int)kaldi::MatrixBase<float>::NumCols(a1));
}

void sub_1ADDF5140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a2);

  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

id _getNSDataForLastNRowsInMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  int i;

  v4 = 4 * (int)kaldi::MatrixBase<float>::NumCols(a1);
  objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithCapacity:", v4 * a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = kaldi::MatrixBase<float>::NumRows(a1) - a2; i < (int)kaldi::MatrixBase<float>::NumRows(a1); ++i)
    objc_msgSend(v5, "appendBytes:length:", *(_QWORD *)a1 + 4 * *(_DWORD *)(a1 + 16) * i, v4);
  return v5;
}

void sub_1ADDF5224(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADDF54DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SyncPSRAudioProcessor,std::allocator<quasar::SyncPSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,void>@<X0>(quasar::SystemConfig *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADDF565C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(_QWORD *a1, quasar::SystemConfig *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D43B40;
  quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor((uint64_t)(a1 + 3), a2, a3, *a4, 120);
  return a1;
}

void sub_1ADDF56B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::SyncPSRAudioProcessor>::destroy[abi:ne180100]((uint64_t)&v1, (void **)(a1 + 24));
}

void std::allocator<quasar::SyncPSRAudioProcessor>::destroy[abi:ne180100](uint64_t a1, void **a2)
{
  void **v3;

  kaldi::Matrix<float>::~Matrix((uint64_t)(a2 + 11));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 8));
  v3 = a2 + 5;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 3));
  v3 = a2;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

quasar::result_handler::VoiceEditingResultHandlerConfig *quasar::result_handler::VoiceEditingResultHandlerConfig::VoiceEditingResultHandlerConfig(quasar::result_handler::VoiceEditingResultHandlerConfig *this, const quasar::SystemConfig *a2)
{
  uint64_t PtreeOptional;
  const quasar::PTree *v5;
  void *__p[2];
  char v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)this = xmmword_1AE183230;
  *((_OWORD *)this + 1) = xmmword_1AE183240;
  *((_OWORD *)this + 2) = xmmword_1AE183250;
  *((_QWORD *)this + 6) = 0xF000000000;
  *((_DWORD *)this + 14) = 2;
  *((_BYTE *)this + 60) = 0;
  *((_QWORD *)this + 8) = 0x300000005;
  std::string::basic_string[abi:ne180100]<0>(__p, "at|did it");
  v9 = 3;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)this + 72, (unsigned __int8 *)__p, 1);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 14, "and|in|at|so|did|also|at .*");
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.result-handler");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
  v5 = (const quasar::PTree *)PtreeOptional;
  if ((v8 & 0x80000000) == 0)
  {
    if (!PtreeOptional)
      return this;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (v5)
LABEL_7:
    quasar::result_handler::VoiceEditingResultHandlerConfig::read(this, v5);
  return this;
}

void sub_1ADDF58C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;

  if (*(char *)(v15 + 135) < 0)
    operator delete(*v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandlerConfig::read(quasar::result_handler::VoiceEditingResultHandlerConfig *this, const quasar::PTree *a2)
{
  uint64_t Int;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 BoolOptional;
  uint64_t v20;
  uint64_t v21;
  uint64_t ChildOptional;
  quasar::PTree *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  int v27;
  void *v28[2];
  char v29;
  std::string __p;
  _BYTE v31[71];

  std::string::basic_string[abi:ne180100]<0>(&__p, "command-leading-pause-ms");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((Int & 0xFF00000000) != 0)
    *(_DWORD *)this = Int;
  std::string::basic_string[abi:ne180100]<0>(&__p, "command-trailing-pause-ms");
  v5 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v5 & 0xFF00000000) != 0)
    *((_DWORD *)this + 1) = v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, "command-time-since-last-partial-ms");
  v6 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v6 & 0xFF00000000) != 0)
    *((_DWORD *)this + 2) = v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, "thought-pause-total-ms");
  v7 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v7 & 0xFF00000000) != 0)
    *((_DWORD *)this + 3) = v7;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-delay-ms");
  v8 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v8 & 0xFF00000000) != 0)
    *((_DWORD *)this + 4) = v8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-delay-num-toks");
  v9 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v9 & 0xFF00000000) != 0)
    *((_DWORD *)this + 5) = v9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-total-ms");
  v10 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v10 & 0xFF00000000) != 0)
    *((_DWORD *)this + 6) = v10;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-trailing-pause-initial-ms");
  v11 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v11 & 0xFF00000000) != 0)
    *((_DWORD *)this + 7) = v11;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-trailing-pause-increment-ms");
  v12 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v12 & 0xFF00000000) != 0)
    *((_DWORD *)this + 8) = v12;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-trailing-pause-increment-progress");
  v13 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13 & 0xFF00000000) != 0)
    *((_DWORD *)this + 9) = v13;
  std::string::basic_string[abi:ne180100]<0>(&__p, "disambiguation-active-time-window-ms");
  v14 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v14 & 0xFF00000000) != 0)
    *((_DWORD *)this + 10) = v14;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-max-deleted-tokens");
  v15 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v15 & 0xFF00000000) != 0)
    *((_DWORD *)this + 11) = v15;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fake-suppression-delay-ms");
  v16 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v16 & 0xFF00000000) != 0)
    *((_DWORD *)this + 12) = v16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "client-requested-suppression-delay-ms");
  v17 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v17 & 0xFF00000000) != 0)
    *((_DWORD *)this + 13) = v17;
  std::string::basic_string[abi:ne180100]<0>(&__p, "partial-match-last-token-len");
  v18 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v18 & 0xFF00000000) != 0)
    *((_DWORD *)this + 14) = v18;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-target-matching");
  BoolOptional = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (BoolOptional >= 0x100u)
    *((_BYTE *)this + 60) = BoolOptional;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-arg-len-limit-default");
  v20 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v20 & 0xFF00000000) != 0)
    *((_DWORD *)this + 16) = v20;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-arg-len-limit-empty-verb");
  v21 = quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v21 & 0xFF00000000) != 0)
    *((_DWORD *)this + 17) = v21;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suppression-arg-len-limit-verb-patterns");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&__p);
  v23 = (quasar::PTree *)ChildOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v23)
      goto LABEL_82;
  }
  else if (!ChildOptional)
  {
    goto LABEL_82;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 72);
  v24 = (__int128 *)quasar::PTree::begin(v23);
  v25 = quasar::PTree::end(v23);
  if (v24 != (__int128 *)v25)
  {
    v26 = (__int128 *)v25;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__p, v24);
      v27 = quasar::PTree::getInt<int>((uint64_t)v31);
      v28[0] = &__p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 72, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v28)+ 10) = v27;
      quasar::PTree::~PTree((quasar::PTree *)v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v24 = (__int128 *)((char *)v24 + 88);
    }
    while (v24 != v26);
  }
LABEL_82:
  std::string::basic_string[abi:ne180100]<0>(v28, "suppression-no-delay-command-utt-pattern");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)v28, &__p);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31[0])
  {
    std::string::operator=((std::string *)((char *)this + 112), &__p);
    if (v31[0])
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1ADDF5EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::VoiceEditingResultHandler(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *i;
  std::locale *v23;
  std::locale *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _BYTE v38[64];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  std::regex_traits<char> v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char v56[9];

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E5CFF020;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v10;
  std::unordered_map<std::string,int>::unordered_map(a1 + 88, a2 + 72);
  v13 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 160) = *a4;
  *(_QWORD *)(a1 + 152) = v15;
  v16 = a4[1];
  *(_QWORD *)(a1 + 168) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 176) = *a5;
  v19 = a5[1];
  *(_QWORD *)(a1 + 184) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 320) = 30;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>>>>::unordered_map(a1 + 328, 0, (char *)&v52, v56);
  *(_QWORD *)(a1 + 376) = a1 + 376;
  *(_QWORD *)(a1 + 384) = a1 + 376;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 605) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  for (i = *(uint64_t **)(a2 + 88); i; i = (uint64_t *)*i)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v52, (uint64_t)(i + 2), 0);
    std::locale::locale((std::locale *)v38, &v52.__loc_);
    *(_OWORD *)&v38[8] = *(_OWORD *)&v52.__ct_;
    *(_OWORD *)&v38[24] = v53;
    *(_OWORD *)&v38[40] = v54;
    v54 = 0uLL;
    *(_QWORD *)&v38[56] = v55;
    LODWORD(v39) = *((_DWORD *)i + 10);
    v23 = *(std::locale **)(a1 + 200);
    if ((unint64_t)v23 >= *(_QWORD *)(a1 + 208))
    {
      v25 = std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__emplace_back_slow_path<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>((uint64_t *)(a1 + 192), (uint64_t)v38);
      v26 = *(std::__shared_weak_count **)&v38[48];
      *(_QWORD *)(a1 + 200) = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      v24 = std::locale::locale(v23, (const std::locale *)v38);
      *(_OWORD *)&v24[1].__locale_ = *(_OWORD *)&v38[8];
      *(_OWORD *)&v24[3].__locale_ = *(_OWORD *)&v38[24];
      *(_OWORD *)&v24[5].__locale_ = *(_OWORD *)&v38[40];
      *(_OWORD *)&v38[40] = 0uLL;
      v24[7].__locale_ = *(std::locale::__imp **)&v38[56];
      LODWORD(v24[8].__locale_) = v39;
      *(_QWORD *)(a1 + 200) = v24 + 9;
    }
    std::locale::~locale((std::locale *)v38);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    if (*((_QWORD *)&v54 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    std::locale::~locale(&v52.__loc_);
  }
  v32 = *(unsigned __int8 *)(a2 + 135);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a2 + 120);
  if (v32)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((std::regex_traits<char> *)v38, a2 + 112, 0);
    std::optional<std::basic_regex<char,std::regex_traits<char>>>::operator=[abi:ne180100]<std::basic_regex<char,std::regex_traits<char>>,void>((std::locale *)(a1 + 216), (std::locale *)v38);
    v33 = *(std::__shared_weak_count **)&v38[48];
    if (*(_QWORD *)&v38[48])
    {
      v34 = (unint64_t *)(*(_QWORD *)&v38[48] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    std::locale::~locale((std::locale *)v38);
  }
  if (quasar::gLogLevel >= 5)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    memset(v38, 0, sizeof(v38));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Created VoiceEditingResultHandler, parser=", 42);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v38);
  }
  return a1;
}

void sub_1ADDF63B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  quasar::Bitmap *v19;
  uint64_t v20;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

std::locale *std::optional<std::basic_regex<char,std::regex_traits<char>>>::operator=[abi:ne180100]<std::basic_regex<char,std::regex_traits<char>>,void>(std::locale *this, std::locale *a2)
{
  std::locale *v4;
  std::locale *v5;
  std::locale *v6;
  std::locale *v7;
  std::locale *v8;
  std::locale::__imp *locale;

  v4 = this + 1;
  v5 = a2 + 1;
  v6 = this + 3;
  v7 = a2 + 3;
  v8 = a2 + 5;
  if (LOBYTE(this[8].__locale_))
  {
    std::locale::operator=(this, a2);
    *(_OWORD *)&v4->__locale_ = *(_OWORD *)&v5->__locale_;
    *(_OWORD *)&v6->__locale_ = *(_OWORD *)&v7->__locale_;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&this[5], (__int128 *)v8);
    locale = a2[7].__locale_;
  }
  else
  {
    std::locale::locale(this, a2);
    *(_OWORD *)&v4->__locale_ = *(_OWORD *)&v5->__locale_;
    *(_OWORD *)&v6->__locale_ = *(_OWORD *)&v7->__locale_;
    *(_OWORD *)&this[5].__locale_ = *(_OWORD *)&a2[5].__locale_;
    v8->__locale_ = 0;
    v8[1].__locale_ = 0;
    locale = a2[7].__locale_;
    LOBYTE(this[8].__locale_) = 1;
  }
  this[7].__locale_ = locale;
  return this;
}

void quasar::PartialHistory::~PartialHistory(quasar::PartialHistory *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void quasar::result_handler::VoiceEditingResultHandler::~VoiceEditingResultHandler(quasar::result_handler::VoiceEditingResultHandler *this)
{
  _QWORD *v2;
  quasar::corrective_reranking::PhoneticMatcher **v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _OWORD v8[17];

  *(_QWORD *)this = &off_1E5CFF020;
  if (quasar::gLogLevel >= 5)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Destroying VoiceEditingResultHandler, parser=", 45);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v8);
  }
  v3 = (quasar::corrective_reranking::PhoneticMatcher **)*((_QWORD *)this + 20);
  if (v3)
    quasar::corrective_reranking::Parser::clearLongTermCache(v3);
  v4 = (void *)*((_QWORD *)this + 81);
  if (v4)
  {
    *((_QWORD *)this + 82) = v4;
    operator delete(v4);
  }
  *(_QWORD *)&v8[0] = (char *)this + 624;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  v5 = (void *)*((_QWORD *)this + 73);
  if (v5)
  {
    *((_QWORD *)this + 74) = v5;
    operator delete(v5);
  }
  *(_QWORD *)&v8[0] = (char *)this + 560;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  v6 = (void *)*((_QWORD *)this + 67);
  if (v6)
  {
    *((_QWORD *)this + 68) = v6;
    operator delete(v6);
  }
  *(_QWORD *)&v8[0] = (char *)this + 512;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 464);
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 52, 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 51, 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 50, 0);
  std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear((uint64_t *)this + 47);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 328);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 37, 0);
  std::__optional_destruct_base<std::basic_regex<char,std::regex_traits<char>>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 216);
  *(_QWORD *)&v8[0] = (char *)this + 192;
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  v7 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 88);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::result_handler::VoiceEditingResultHandler::~VoiceEditingResultHandler(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(quasar::result_handler::VoiceEditingResultHandler *this, int a2)
{
  int v4;
  _QWORD v5[4];
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5[0] = &off_1E5CFF540;
  v5[1] = this;
  v5[3] = v5;
  v6[0] = &off_1E5CFF540;
  v6[3] = v6;
  v6[1] = this;
  *((_BYTE *)this + 508) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 32))(*((_QWORD *)this + 22));
  *((_BYTE *)this + 509) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 24))(*((_QWORD *)this + 22));
  if (a2 >= 1)
    *((_BYTE *)this + 288) = 1;
  (*(void (**)(quasar::result_handler::VoiceEditingResultHandler *, int *))(*(_QWORD *)this + 72))(this, &v4);
  quasar::result_handler::VoiceEditingResultHandler::runCommandLogic(this);
  quasar::result_handler::VoiceEditingResultHandler::runSuppressionLogic(this);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v6);
}

void sub_1ADDF6944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)va);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::runCommandLogic(quasar::result_handler::VoiceEditingResultHandler *this)
{
  quasar::result_handler::Package *v1;
  quasar::result_handler::Package **v3;
  _QWORD *v4;
  char v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  quasar::result_handler::Package *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  quasar::result_handler::Package *v16;
  quasar::result_handler::Package *v17;
  quasar::result_handler::Package *v18;
  int v19;
  int v20;
  int v21;
  quasar::result_handler::Package *v22;
  int v23;
  int v24;
  quasar::result_handler::Package *v25;
  quasar::result_handler::Package *v26;
  uint64_t v27;
  uint64_t v28;
  quasar::result_handler::Package *v29;
  _QWORD *v30;
  _QWORD *v31;
  quasar::result_handler::Package *v32;
  quasar::result_handler::Package **v33;
  _QWORD *v34;
  _QWORD *v35;
  quasar::result_handler::Package *v36;
  int v37;
  int started;
  int v39;
  quasar::result_handler::Package *v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  quasar::result_handler::Package *v44;
  quasar::result_handler::Package *v45;
  quasar::result_handler::Package *v46;
  quasar::result_handler::Package *v47;
  quasar::result_handler::Package *v48;
  void *__p[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  quasar::result_handler::Package *v66;
  quasar::result_handler::Package *v67;
  char *v68;

  v1 = (quasar::result_handler::Package *)*((_QWORD *)this + 37);
  if (!v1)
    return;
  v3 = (quasar::result_handler::Package **)((char *)this + 296);
  v4 = (_QWORD *)*((_QWORD *)v1 + 6);
  if (v4 == *((_QWORD **)v1 + 7) || *v4 == v4[1])
  {
    std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v3, 0);
    return;
  }
  if (*((_QWORD *)v1 + 20) != *((_QWORD *)v1 + 21) || *((_BYTE *)v1 + 368))
    goto LABEL_6;
  v37 = *((_DWORD *)v1 + 19);
  started = quasar::result_handler::topChoiceSilStartMs((uint64_t)v1 + 48);
  v39 = *((_DWORD *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "eager non-command send");
  v40 = (quasar::result_handler::Package *)operator new(4uLL);
  v41 = started + v39 + v37;
  v66 = v40;
  *(_DWORD *)v40 = v41;
  v67 = (quasar::result_handler::Package *)((char *)v40 + 4);
  v68 = (char *)v40 + 4;
  quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v66);
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (SBYTE7(v50) < 0)
    operator delete(__p[0]);
  if (*((_DWORD *)this + 2) >= v41)
  {
    if (quasar::gLogLevel >= 5)
    {
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"(now=", 5);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") sending non-command candidate package for non-suppressed partials", 67);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v44 = (quasar::result_handler::Package *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = 0;
    v48 = v44;
    quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, &v48);
    std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&v48, 0);
    std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v3, 0);
    v1 = *v3;
    if (!*v3)
      return;
    v5 = 1;
    goto LABEL_7;
  }
  v1 = *v3;
  if (*v3)
  {
LABEL_6:
    v5 = 0;
LABEL_7:
    if (*((_BYTE *)v1 + 368))
    {
      v6 = *((_DWORD *)v1 + 19);
      v7 = quasar::result_handler::topChoiceSilStartMs((uint64_t)v1 + 48);
      v8 = *((_DWORD *)this + 113);
      if (v8 <= *((_DWORD *)this + 114))
        v9 = 0;
      else
        v9 = (*((_DWORD *)this + 6) + v8);
      v10 = *((_DWORD *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(__p, "eager command send");
      v11 = (quasar::result_handler::Package *)operator new(8uLL);
      v12 = (v7 + v10 + v6);
      v66 = v11;
      *(_QWORD *)v11 = v12 | (v9 << 32);
      v67 = (quasar::result_handler::Package *)((char *)v11 + 8);
      v68 = (char *)v11 + 8;
      quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v66);
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (SBYTE7(v50) < 0)
        operator delete(__p[0]);
      v13 = *((_DWORD *)this + 2);
      if (v13 >= (int)v12 && v13 >= (int)v9)
      {
        if (quasar::gLogLevel >= 5)
        {
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(now=", 5);
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") sending command candidate package", 35);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        v16 = (quasar::result_handler::Package *)*((_QWORD *)this + 37);
        *((_QWORD *)this + 37) = 0;
        v47 = v16;
        quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, &v47);
        v17 = v47;
        v47 = 0;
        if (v17)
        {
          quasar::result_handler::Package::~Package(v17);
          MEMORY[0x1AF44D190]();
        }
        std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v3, 0);
        v5 = 1;
      }
    }
    v18 = *v3;
    if (*v3)
    {
      v19 = *((_DWORD *)v18 + 19);
      v20 = quasar::result_handler::topChoiceSilStartMs((uint64_t)v18 + 48);
      v21 = *((_DWORD *)this + 7);
      std::string::basic_string[abi:ne180100]<0>(__p, "thought pause stop");
      v22 = (quasar::result_handler::Package *)operator new(4uLL);
      v23 = v20 + v21 + v19;
      v66 = v22;
      *(_DWORD *)v22 = v23;
      v67 = (quasar::result_handler::Package *)((char *)v22 + 4);
      v68 = (char *)v22 + 4;
      quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v66);
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (SBYTE7(v50) < 0)
        operator delete(__p[0]);
      if (*((_DWORD *)this + 2) >= v23)
      {
        if (quasar::gLogLevel >= 5)
        {
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"(now=", 5);
          v35 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") sending command candidate package after thought pause", 55);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        v36 = (quasar::result_handler::Package *)*((_QWORD *)this + 37);
        *((_QWORD *)this + 37) = 0;
        v46 = v36;
        quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, &v46);
        if (v46)
        {
          quasar::result_handler::Package::~Package(v46);
          MEMORY[0x1AF44D190]();
        }
        v33 = v3;
        goto LABEL_48;
      }
    }
    if ((v5 & 1) != 0)
      return;
  }
  if (*((_QWORD *)this + 51) && *((int *)this + 126) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "non-command send for suppressed partials");
    v24 = *((_DWORD *)this + 126);
    v25 = (quasar::result_handler::Package *)operator new(4uLL);
    v66 = v25;
    *(_DWORD *)v25 = v24;
    v67 = (quasar::result_handler::Package *)((char *)v25 + 4);
    v68 = (char *)v25 + 4;
    quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v66);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    if (SBYTE7(v50) < 0)
      operator delete(__p[0]);
    if (*((_DWORD *)this + 2) >= *((_DWORD *)this + 126))
    {
      std::make_unique[abi:ne180100]<quasar::result_handler::Package,quasar::result_handler::Package&>(*((const quasar::result_handler::Package **)this + 51), &v66);
      v26 = v66;
      v28 = *((_QWORD *)v66 + 20);
      v27 = *((_QWORD *)v66 + 21);
      v29 = v66;
      if (v27 != v28)
      {
        do
        {
          v27 -= 184;
          std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100]((uint64_t)v26 + 176, v27);
        }
        while (v27 != v28);
        v29 = v66;
      }
      *((_QWORD *)v26 + 21) = v28;
      std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100]((uint64_t)v29 + 184);
      if (quasar::gLogLevel >= 5)
      {
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(now=", 5);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") sending non-command candidate package for suppressed partials", 63);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v32 = v66;
      v66 = 0;
      v45 = v32;
      quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, &v45);
      std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&v45, 0);
      v33 = &v66;
LABEL_48:
      std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v33, 0);
    }
  }
}

void sub_1ADDF6F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v24 - 88), 0);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::runSuppressionLogic(quasar::result_handler::VoiceEditingResultHandler *this)
{
  uint64_t v1;
  unsigned int v3;
  signed int v4;
  quasar::Token **v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  std::string::size_type v45;
  std::string *v46;
  unsigned __int8 *v47;
  int v48;
  quasar::Token *v49;
  int v50;
  quasar::Token *v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  quasar::result_handler::Package *v61;
  signed int v62;
  quasar::result_handler::Package *v63;
  void *v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67[3];
  void *v68[2];
  unsigned __int8 v69;
  void *v70;
  char v71;
  std::string __p;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v1 = *((_QWORD *)this + 50);
  if (!v1)
    return;
  v3 = *((_DWORD *)this + 2);
  v4 = v3 - *((_DWORD *)this + 77);
  v5 = *(quasar::Token ***)(v1 + 48);
  if (v5 != *(quasar::Token ***)(v1 + 56) && !*((_BYTE *)this + 508) && !*((_BYTE *)this + 509))
  {
    v48 = *(_DWORD *)(v1 + 76);
    if (v3 >= quasar::result_handler::topChoiceSilStartMs(v1 + 48) + *((_DWORD *)this + 11) + v48
      && v4 <= *((_DWORD *)this + 2))
    {
      v4 = *((_DWORD *)this + 2);
    }
    v49 = v5[1];
    if (v49 != *v5)
    {
      v50 = 0;
      v51 = (quasar::Token *)((char *)v49 - 224);
      do
      {
        v52 = *((_DWORD *)v51 + 8) + *(_DWORD *)(*((_QWORD *)this + 50) + 76);
        if (v4 >= v52)
          break;
        v53 = *((_DWORD *)this + 9);
        if ((v53 & 0x80000000) == 0 && v50 >= v53)
        {
          v62 = v52 - 1;
          if (v4 <= v62)
            v4 = v62;
          break;
        }
        v50 += !quasar::Token::isAutoPunctuation(v51);
        v54 = v51 == *v5;
        v51 = (quasar::Token *)((char *)v51 - 224);
      }
      while (!v54);
    }
  }
  if (v4 < *((_DWORD *)this + 78))
    return;
  *((_DWORD *)this + 78) = v4;
  v6 = v4 - *(_DWORD *)(*((_QWORD *)this + 50) + 76);
  v7 = v6 & ~(v6 >> 31);
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 480) = 0u;
  v90 = v8;
  v9 = *((_QWORD *)this + 50);
  *(_DWORD *)(v8 + 76) = *(_DWORD *)(v9 + 76);
  quasar::result_handler::extract(v9, v7, (uint64_t *)&v73);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)v8);
  *(_OWORD *)v8 = v73;
  *(_QWORD *)(v8 + 16) = v74;
  *(_QWORD *)&v74 = 0;
  v73 = 0uLL;
  v68[0] = &v73;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  quasar::result_handler::extract(*((_QWORD *)this + 50) + 48, v7, (uint64_t *)&v73);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)(v8 + 48));
  *(_OWORD *)(v8 + 48) = v73;
  *(_QWORD *)(v8 + 64) = v74;
  *(_QWORD *)&v74 = 0;
  v73 = 0uLL;
  v68[0] = &v73;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  v10 = *(_QWORD **)(v8 + 48);
  if (v10 == *(_QWORD **)(v8 + 56) || *v10 == v10[1])
  {
    v90 = 0;
LABEL_121:
    quasar::result_handler::Package::~Package((quasar::result_handler::Package *)v8);
    MEMORY[0x1AF44D190]();
    return;
  }
  if (quasar::gLogLevel >= 5)
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(now=", 5);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") runSuppressionLogic: relevantTime=", 36);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", postItnChoices: ", 18);
    quasar::getTopChoice(v8 + 48, 1, v68);
    if ((v69 & 0x80u) == 0)
      v15 = v68;
    else
      v15 = (void **)v68[0];
    if ((v69 & 0x80u) == 0)
      v16 = v69;
    else
      v16 = (uint64_t)v68[1];
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ::::: ", 7);
    quasar::topChoiceWithTimes((uint64_t **)(v8 + 48), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v69 < 0)
      operator delete(v68[0]);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v73);
  }
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 22) + 16))(v68);
  v21 = *((_QWORD *)this + 20);
  if (v21)
  {
    quasar::result_handler::findPartialCommands(v21, (uint64_t)v68, (uint64_t)&v70, (_QWORD *)(v8 + 48), (_QWORD *)v8, *((unsigned __int8 *)this + 509), (_DWORD *)this + 4, (unint64_t *)this + 40, (uint64_t *)&v73, (quasar::result_handler::VoiceEditingResultHandler *)((char *)this + 624));
    std::vector<quasar::result_handler::CommandData>::__vdeallocate((void **)(v8 + 160));
    *(_OWORD *)(v8 + 160) = v73;
    *(_QWORD *)(v8 + 176) = v74;
    *(_QWORD *)&v74 = 0;
    v73 = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  if (quasar::gLogLevel >= 5)
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(now=", 5);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") runSuppressionLogic: partialCommands before filter: ", 54);
    v64 = " ";
    v65 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)(v8 + 160), (uint64_t *)&v64);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v26 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v73);
  }
  v27 = *(_QWORD *)(v8 + 160);
  v28 = *(_QWORD *)(v8 + 168);
  memset(v67, 0, sizeof(v67));
  std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(v67, v27, v28, 0xD37A6F4DE9BD37A7 * ((v28 - v27) >> 3));
  quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForSuppression((uint64_t)this, v67, *(_DWORD *)(v8 + 76), v4, (uint64_t *)&v73);
  std::vector<quasar::result_handler::CommandData>::__vdeallocate((void **)(v8 + 160));
  *(_OWORD *)(v8 + 160) = v73;
  *(_QWORD *)(v8 + 176) = v74;
  *(_QWORD *)&v74 = 0;
  v73 = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (quasar::gLogLevel >= 5)
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"(now=", 5);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") runSuppressionLogic: partialCommands after filter: ", 53);
    v64 = " ";
    v65 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)(v8 + 160), (uint64_t *)&v64);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &__p;
    else
      v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v33 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v73);
  }
  quasar::result_handler::VoiceEditingResultHandler::updateSuppressionState((uint64_t)this, (uint64_t *)(v8 + 160), 1);
  if (!*((_BYTE *)this + 509) && !*((_BYTE *)this + 508))
  {
    quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForWriting((uint64_t)this, (uint64_t *)(v8 + 160), (uint64_t *)&v73);
    std::vector<quasar::result_handler::CommandData>::__vdeallocate((void **)(v8 + 160));
    *(_OWORD *)(v8 + 160) = v73;
    *(_QWORD *)(v8 + 176) = v74;
    *(_QWORD *)&v74 = 0;
    v73 = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  if (quasar::gLogLevel >= 5)
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"(now=", 5);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") runSuppressionLogic: partialCommands after filter2: ", 54);
    v64 = " ";
    v65 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)(v8 + 160), (uint64_t *)&v64);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v38 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v73);
  }
  v39 = *(_QWORD *)(v8 + 160);
  if (v39 != *(_QWORD *)(v8 + 168))
  {
    v40 = *(uint64_t **)v39;
    v41 = *(uint64_t **)(v39 + 8);
    if (*(uint64_t **)v39 == v41 || *v40 == v40[1])
    {
      v42 = *(_QWORD **)(v39 + 24);
      if (v42 != *(_QWORD **)(v39 + 32) && *v42 != v42[1])
        goto LABEL_116;
    }
    if (v8 + 48 != v39)
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v8 + 48, v40, v41, 0xAAAAAAAAAAAAAAABLL * (v41 - v40));
    if (v8 != v39 + 48)
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v8, *(uint64_t **)(v39 + 48), *(uint64_t **)(v39 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v39 + 56) - *(_QWORD *)(v39 + 48)) >> 3));
  }
  quasar::getTopChoice(v8 + 48, 1, &__p);
  v43 = *((unsigned __int8 *)this + 447);
  if ((v43 & 0x80u) == 0)
    v44 = *((unsigned __int8 *)this + 447);
  else
    v44 = *((_QWORD *)this + 54);
  v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = __p.__r_.__value_.__l.__size_;
  if (v44 != v45)
    goto LABEL_98;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &__p;
  else
    v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v43 & 0x80) != 0)
  {
    if (memcmp(*((const void **)this + 53), v46, *((_QWORD *)this + 54)))
    {
LABEL_98:
      std::string::operator=((std::string *)((char *)this + 424), &__p);
      v55 = quasar::result_handler::repairAutoPunc((quasar::result_handler::VoiceEditingResultHandler *)((char *)this + 624), (uint64_t *)(v8 + 48));
      if (quasar::gLogLevel > 4)
        v56 = v55;
      else
        v56 = 0;
      if (v56 == 1)
      {
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v73);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"VoiceEditingResultHandler: ", 27);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"repaired AutoPunc: partial ", 27);
        quasar::getTopChoice(v8 + 48, 1, &v64);
        if ((v66 & 0x80u) == 0)
          v59 = &v64;
        else
          v59 = v64;
        if ((v66 & 0x80u) == 0)
          v60 = v66;
        else
          v60 = v65;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
        if ((char)v66 < 0)
          operator delete(v64);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v73);
      }
      v90 = 0;
      v63 = (quasar::result_handler::Package *)v8;
      quasar::result_handler::VoiceEditingResultHandler::sendPartial((uint64_t)this, (uint64_t ***)&v63);
      v61 = v63;
      v63 = 0;
      if (v61)
      {
        quasar::result_handler::Package::~Package(v61);
        MEMORY[0x1AF44D190]();
      }
      v8 = 0;
    }
  }
  else if (*((_BYTE *)this + 447))
  {
    v47 = (unsigned __int8 *)this + 424;
    while (*v47 == v46->__r_.__value_.__s.__data_[0])
    {
      ++v47;
      v46 = (std::string *)((char *)v46 + 1);
      if (!--v43)
        goto LABEL_114;
    }
    goto LABEL_98;
  }
LABEL_114:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_116:
  if (v71 < 0)
    operator delete(v70);
  if ((char)v69 < 0)
    operator delete(v68[0]);
  v90 = 0;
  if (v8)
    goto LABEL_121;
}

void sub_1ADDF7A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v36 - 88), 0);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::handlePartial(uint64_t a1, signed int a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  signed int v7;
  signed int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  signed int *v15;
  unint64_t v16;
  _DWORD *v17;
  signed int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  signed int *v24;
  char *v25;
  signed int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *p_p;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56[3];
  const char *v57;
  uint64_t v58;
  void *v59[2];
  unsigned __int8 v60;
  void *v61;
  char v62;
  void *__p;
  uint64_t v64;
  unsigned __int8 v65;
  void *v66[2];
  uint64_t v67;
  signed int v68;
  void *v69[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD v86[4];
  _QWORD v87[5];

  v87[4] = *MEMORY[0x1E0C80C00];
  v68 = a2;
  v86[0] = &off_1E5CFF4E8;
  v86[1] = a1;
  v86[3] = v86;
  v87[0] = &off_1E5CFF4E8;
  v87[3] = v87;
  v87[1] = a1;
  *(_BYTE *)(a1 + 508) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176));
  *(_BYTE *)(a1 + 509) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 24))(*(_QWORD *)(a1 + 176));
  (*(void (**)(uint64_t, signed int *))(*(_QWORD *)a1 + 72))(a1, &v68);
  v5 = *a3;
  quasar::result_handler::clean(*a3);
  quasar::result_handler::clean(v5 + 3);
  quasar::result_handler::clean(v5 + 6);
  v6 = *a3;
  v7 = v68;
  v8 = *((_DWORD *)*a3 + 19);
  if (v8 > v68)
  {
    *((_DWORD *)v6 + 19) = v68;
    v8 = v7;
    if (quasar::gLogLevel >= 5)
    {
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      *(_OWORD *)v69 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Utterance timestamp is too large and likely wrong. Clamping it.", 63);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
      v8 = *((_DWORD *)v6 + 19);
    }
  }
  v10 = v7 - v8;
  quasar::result_handler::clampTimestampsIfNeeded((uint64_t)v6, v10);
  quasar::result_handler::clampTimestampsIfNeeded((uint64_t)(v6 + 3), v10);
  quasar::result_handler::clampTimestampsIfNeeded((uint64_t)(v6 + 6), v10);
  v11 = (uint64_t *)**a3;
  v12 = (uint64_t *)(a1 + 512);
  if ((uint64_t *)(*a3)[1] == v11)
  {
    v69[0] = 0;
    v69[1] = 0;
    *(_QWORD *)&v70 = 0;
    std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](v12, (uint64_t)v69);
    v59[0] = v69;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 520);
    if (v13 >= *(_QWORD *)(a1 + 528))
    {
      v14 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v12, v11);
    }
    else
    {
      std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v12, v11);
      v14 = v13 + 24;
    }
    *(_QWORD *)(a1 + 520) = v14;
  }
  v15 = *(signed int **)(a1 + 544);
  v16 = *(_QWORD *)(a1 + 552);
  if ((unint64_t)v15 >= v16)
  {
    v18 = *(signed int **)(a1 + 536);
    v19 = v15 - v18;
    if ((unint64_t)(v19 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v16 - (_QWORD)v18;
    v21 = (uint64_t)(v16 - (_QWORD)v18) >> 1;
    if (v21 <= v19 + 1)
      v21 = v19 + 1;
    if (v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 552, v22);
      v15 = *(signed int **)(a1 + 544);
      v18 = *(signed int **)(a1 + 536);
    }
    else
    {
      v23 = 0;
    }
    v24 = (signed int *)&v23[4 * v19];
    v25 = &v23[4 * v22];
    *v24 = v68;
    v17 = v24 + 1;
    while (v15 != v18)
    {
      v26 = *--v15;
      *--v24 = v26;
    }
    *(_QWORD *)(a1 + 536) = v24;
    *(_QWORD *)(a1 + 544) = v17;
    *(_QWORD *)(a1 + 552) = v25;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v15 = v68;
    v17 = v15 + 1;
  }
  *(_QWORD *)(a1 + 544) = v17;
  if (quasar::gLogLevel >= 5)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(now=", 5);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") recv partial: ", 16);
    quasar::getTopChoice((uint64_t)(*a3 + 6), 1, v59);
    if ((v60 & 0x80u) == 0)
      v30 = v59;
    else
      v30 = (void **)v59[0];
    if ((v60 & 0x80u) == 0)
      v31 = v60;
    else
      v31 = (uint64_t)v59[1];
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ::::: ", 7);
    quasar::topChoiceWithTimes((uint64_t **)*a3 + 6, v66);
    if (v67 >= 0)
      v34 = v66;
    else
      v34 = (void **)v66[0];
    if (v67 >= 0)
      v35 = HIBYTE(v67);
    else
      v35 = (uint64_t)v66[1];
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" utteranceStartMs=", 18);
    v37 = (_QWORD *)std::ostream::operator<<();
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ::::: preItn=", 14);
    quasar::topChoiceWithTimes((uint64_t **)*a3, &__p);
    if ((v65 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v65 & 0x80u) == 0)
      v40 = v65;
    else
      v40 = v64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)p_p, v40);
    if ((char)v65 < 0)
      operator delete(__p);
    if (SHIBYTE(v67) < 0)
      operator delete(v66[0]);
    if ((char)v60 < 0)
      operator delete(v59[0]);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  std::string::basic_string[abi:ne180100]<0>(v69, "partial");
  quasar::result_handler::VoiceEditingResultHandler::logSnippet(a1, (uint64_t)v69, (uint64_t)*a3);
  if (SBYTE7(v70) < 0)
    operator delete(v69[0]);
  if (!*(_QWORD *)(a1 + 160) && quasar::gLogLevel >= 5)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Parser is unavailable", 21);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 176) + 16))(v59);
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v42 = *(_QWORD *)(a1 + 160);
  if (v42)
  {
    quasar::result_handler::findPartialCommands(v42, (uint64_t)v59, (uint64_t)&v61, *a3 + 6, *a3, *(unsigned __int8 *)(a1 + 509), (_DWORD *)(a1 + 16), (unint64_t *)(a1 + 320), (uint64_t *)v69, (quasar::PartialHistory *)(a1 + 624));
    std::vector<quasar::result_handler::CommandData>::__vdeallocate(v66);
    *(_OWORD *)v66 = *(_OWORD *)v69;
    v67 = v70;
    v69[1] = 0;
    *(_QWORD *)&v70 = 0;
    v69[0] = 0;
    __p = v69;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  if (quasar::gLogLevel >= 5)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(now=", 5);
    v44 = (_QWORD *)std::ostream::operator<<();
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") handlePartial: partialCommands before filter: ", 48);
    v57 = " ";
    v58 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)v66, (uint64_t *)&v57);
    if ((v65 & 0x80u) == 0)
      v46 = &__p;
    else
      v46 = __p;
    if ((v65 & 0x80u) == 0)
      v47 = v65;
    else
      v47 = v64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    if ((char)v65 < 0)
      operator delete(__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  memset(v56, 0, sizeof(v56));
  std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(v56, (uint64_t)v66[0], (uint64_t)v66[1], 0xD37A6F4DE9BD37A7 * (((char *)v66[1] - (char *)v66[0]) >> 3));
  quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForSuppression(a1, v56, *((_DWORD *)*a3 + 19), v68, (uint64_t *)v69);
  std::vector<quasar::result_handler::CommandData>::__vdeallocate(v66);
  *(_OWORD *)v66 = *(_OWORD *)v69;
  v67 = v70;
  v69[1] = 0;
  *(_QWORD *)&v70 = 0;
  v69[0] = 0;
  __p = v69;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v56;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (quasar::gLogLevel >= 5)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"(now=", 5);
    v49 = (_QWORD *)std::ostream::operator<<();
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)") handlePartial: partialCommands after filter: ", 47);
    v57 = " ";
    v58 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)v66, (uint64_t *)&v57);
    if ((v65 & 0x80u) == 0)
      v51 = &__p;
    else
      v51 = __p;
    if ((v65 & 0x80u) == 0)
      v52 = v65;
    else
      v52 = v64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    if ((char)v65 < 0)
      operator delete(__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  quasar::result_handler::VoiceEditingResultHandler::updateSuppressionState(a1, (uint64_t *)v66, 0);
  v53 = *a3;
  *a3 = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 400), (quasar::result_handler::Package *)v53);
  quasar::result_handler::VoiceEditingResultHandler::runSuppressionLogic((quasar::result_handler::VoiceEditingResultHandler *)a1);
  if (*(_BYTE *)(a1 + 304))
  {
    if (quasar::gLogLevel >= 5)
    {
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      *(_OWORD *)v69 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"(now=", 5);
      v55 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") resetting nonCommandCandidatePackageDeadline to 0 since we're starting to suppress partials", 93);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
    }
    *(_DWORD *)(a1 + 504) = 0;
  }
  *(_DWORD *)(a1 + 452) = v68;
  v69[0] = v66;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  if (v62 < 0)
    operator delete(v61);
  if ((char)v60 < 0)
    operator delete(v59[0]);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v87);
}

void sub_1ADDF8440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void **a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  a38 = &a31;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a38);
  std::pair<std::string,std::string>::~pair((uint64_t)&a16);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)(v43 - 88));
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::logSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  const quasar::Token *v11;
  std::string *v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  unint64_t v21;
  const quasar::Token *v22;
  std::string *v23;
  unint64_t v24;
  __int128 *v25;
  unsigned int v27;
  uint64_t v28;
  std::string *v29;
  int32x2_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  std::string *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *p_p;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  const quasar::Token *v70;
  std::string *v71;
  std::string *v72;
  const quasar::Token *v73;
  std::string *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  const quasar::Token *v78;
  std::string *v79;
  std::string *v80;
  const quasar::Token *v81;
  std::string *v82;
  void *__p;
  uint64_t v84;
  unsigned __int8 v85;
  void *v86;
  uint64_t v87;
  unsigned __int8 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  std::string *v107;
  unint64_t v108;
  uint64_t v109;
  std::string *v110;
  unint64_t v111;
  unint64_t v112;
  std::string *v113;
  unint64_t v114;
  uint64_t v115;
  std::string *v116;
  unint64_t v117;

  v115 = 0;
  v116 = 0;
  v117 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v5 = *(uint64_t **)a3;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8) || (v6 = *v5, v7 = v5[1], *v5 == v7))
  {
    v12 = 0;
  }
  else if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 5)) > 3)
  {
    v67 = 0;
    v68 = 0;
    v69 = -1;
    do
    {
      v70 = (const quasar::Token *)(v6 + v67);
      v71 = v116;
      if ((unint64_t)v116 >= v117)
      {
        v72 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v115, v70);
      }
      else
      {
        quasar::Token::Token(v116, v70);
        v72 = (std::string *)((char *)v71 + 224);
      }
      v116 = v72;
      v73 = (const quasar::Token *)(*v5 + 224 * (v69 + (v5[1] - *v5) / 224));
      v74 = v113;
      if ((unint64_t)v113 >= v114)
      {
        v12 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>((uint64_t *)&v112, v73);
      }
      else
      {
        quasar::Token::Token(v113, v73);
        v12 = (std::string *)((char *)v74 + 224);
      }
      v113 = v12;
      if (v68 > 1)
        break;
      ++v68;
      v6 = *v5;
      v67 += 224;
      --v69;
    }
    while ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5)) >> 1 > v68);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (const quasar::Token *)(v6 + v8);
      if ((unint64_t)v9 >= v117)
      {
        v9 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v115, v11);
      }
      else
      {
        quasar::Token::Token(v9, v11);
        v9 = (std::string *)((char *)v9 + 224);
      }
      v116 = v9;
      if (v10 > 1)
        break;
      ++v10;
      v6 = *v5;
      v8 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5) > v10);
    v12 = v113;
  }
  v13 = v112;
  v14 = (__int128 *)&v12[-10].__r_.__value_.__r.__words[2];
  if ((std::string *)v112 != v12 && (unint64_t)v14 > v112)
  {
    do
    {
      std::swap[abi:ne180100]<quasar::Token>(v13, v14);
      v13 += 224;
      v14 -= 14;
    }
    while (v13 < (unint64_t)v14);
  }
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v16 = *(uint64_t **)(a3 + 48);
  if (v16 == *(uint64_t **)(a3 + 56) || (v17 = *v16, v18 = v16[1], *v16 == v18))
  {
    v23 = 0;
  }
  else if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v18 - v17) >> 5)) > 3)
  {
    v75 = 0;
    v76 = 0;
    v77 = -1;
    do
    {
      v78 = (const quasar::Token *)(v17 + v75);
      v79 = v110;
      if ((unint64_t)v110 >= v111)
      {
        v80 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v109, v78);
      }
      else
      {
        quasar::Token::Token(v110, v78);
        v80 = (std::string *)((char *)v79 + 224);
      }
      v110 = v80;
      v81 = (const quasar::Token *)(*v16 + 224 * (v77 + (v16[1] - *v16) / 224));
      v82 = v107;
      if ((unint64_t)v107 >= v108)
      {
        v23 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>((uint64_t *)&v106, v81);
      }
      else
      {
        quasar::Token::Token(v107, v81);
        v23 = (std::string *)((char *)v82 + 224);
      }
      v107 = v23;
      if (v76 > 1)
        break;
      ++v76;
      v17 = *v16;
      v75 += 224;
      --v77;
    }
    while ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v16[1] - *v16) >> 5)) >> 1 > v76);
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = (const quasar::Token *)(v17 + v19);
      if ((unint64_t)v20 >= v111)
      {
        v20 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v109, v22);
      }
      else
      {
        quasar::Token::Token(v20, v22);
        v20 = (std::string *)((char *)v20 + 224);
      }
      v110 = v20;
      if (v21 > 1)
        break;
      ++v21;
      v17 = *v16;
      v19 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v16[1] - *v16) >> 5) > v21);
    v23 = v107;
  }
  v24 = v106;
  v25 = (__int128 *)&v23[-10].__r_.__value_.__r.__words[2];
  if ((std::string *)v106 != v23 && (unint64_t)v25 > v106)
  {
    do
    {
      std::swap[abi:ne180100]<quasar::Token>(v24, v25);
      v24 += 224;
      v25 -= 14;
    }
    while (v24 < (unint64_t)v25);
  }
  v27 = *(_DWORD *)(a3 + 76);
  v28 = v115;
  v29 = v116;
  v30 = vdup_n_s32(v27);
  while ((std::string *)v28 != v29)
  {
    *(_DWORD *)(v28 + 36) += v27;
    *(int32x2_t *)(v28 + 28) = vadd_s32(*(int32x2_t *)(v28 + 28), v30);
    v28 += 224;
  }
  v31 = v112;
  v32 = v113;
  while ((std::string *)v31 != v32)
  {
    *(_DWORD *)(v31 + 36) += v27;
    *(int32x2_t *)(v31 + 28) = vadd_s32(*(int32x2_t *)(v31 + 28), v30);
    v31 += 224;
  }
  v33 = v109;
  v34 = v110;
  while ((std::string *)v33 != v34)
  {
    *(_DWORD *)(v33 + 36) += v27;
    *(int32x2_t *)(v33 + 28) = vadd_s32(*(int32x2_t *)(v33 + 28), v30);
    v33 += 224;
  }
  v35 = v106;
  v36 = v107;
  while ((std::string *)v35 != v36)
  {
    *(_DWORD *)(v35 + 36) += v27;
    *(int32x2_t *)(v35 + 28) = vadd_s32(*(int32x2_t *)(v35 + 28), v30);
    v35 += 224;
  }
  if (quasar::gLogLevel >= 5)
  {
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v89 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(now=", 5);
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") snippet of ", 13);
    v40 = *(char *)(a2 + 23);
    if (v40 >= 0)
      v41 = a2;
    else
      v41 = *(_QWORD *)a2;
    if (v40 >= 0)
      v42 = *(unsigned __int8 *)(a2 + 23);
    else
      v42 = *(_QWORD *)(a2 + 8);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": utteranceStartMs=", 19);
    v44 = (_QWORD *)std::ostream::operator<<();
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" preItn: ", 9);
    quasar::tokensWithTimes(&v115);
    if ((v88 & 0x80u) == 0)
      v46 = &v86;
    else
      v46 = v86;
    if ((v88 & 0x80u) == 0)
      v47 = v88;
    else
      v47 = v87;
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" ... ", 5);
    quasar::tokensWithTimes((uint64_t *)&v112);
    if ((v85 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v85 & 0x80u) == 0)
      v51 = v85;
    else
      v51 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_p, v51);
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v88 < 0)
      operator delete(v86);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v89);
    if (quasar::gLogLevel >= 5)
    {
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"(now=", 5);
      v53 = (_QWORD *)std::ostream::operator<<();
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)") snippet of ", 13);
      v55 = *(char *)(a2 + 23);
      if (v55 >= 0)
        v56 = a2;
      else
        v56 = *(_QWORD *)a2;
      if (v55 >= 0)
        v57 = *(unsigned __int8 *)(a2 + 23);
      else
        v57 = *(_QWORD *)(a2 + 8);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": utteranceStartMs=", 19);
      v59 = (_QWORD *)std::ostream::operator<<();
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" postItn: ", 10);
      quasar::tokensWithTimes(&v109);
      if ((v88 & 0x80u) == 0)
        v61 = &v86;
      else
        v61 = v86;
      if ((v88 & 0x80u) == 0)
        v62 = v88;
      else
        v62 = v87;
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ... ", 5);
      quasar::tokensWithTimes((uint64_t *)&v106);
      if ((v85 & 0x80u) == 0)
        v65 = &__p;
      else
        v65 = __p;
      if ((v85 & 0x80u) == 0)
        v66 = v85;
      else
        v66 = v84;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
      if ((char)v85 < 0)
        operator delete(__p);
      if ((char)v88 < 0)
        operator delete(v86);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v89);
    }
  }
  *(_QWORD *)&v89 = &v106;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = &v109;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = &v112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(_QWORD *)&v89 = &v115;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
}

void sub_1ADDF8CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a23);
  a23 = v23 - 184;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 160;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 136;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void quasar::result_handler::findPartialCommands(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, int a6@<W5>, _DWORD *a7@<X6>, unint64_t *a8@<X7>, uint64_t *a9@<X8>, quasar::PartialHistory *a10)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  unint64_t v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  __int128 *v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t i;
  std::string::size_type v47;
  BOOL v48;
  std::string *v49;
  std::string *v50;
  unint64_t v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t j;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v64;
  unsigned int v66;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  void *v77[2];
  std::string::size_type v78;
  _BYTE v79[96];
  const std::string::value_type *v80;
  unint64_t v81;
  unsigned __int8 v82;
  __int128 v83;
  uint64_t v84;
  std::string *v85;
  std::string *v86;
  unint64_t v87;
  char v88;
  _BYTE v89[32];
  __int128 v90;
  void *__p[2];
  __int128 v92;
  _OWORD v93[2];
  _OWORD v94[10];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)*a4;
  if (*a4 == a4[1]
    || (v12 = *v11, v13 = v11[1], *v11 == v13)
    || *a5 == a5[1]
    || *(_QWORD *)*a5 == *(_QWORD *)(*a5 + 8))
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 5);
  v15 = v14 - 1;
  if ((int)v14 < 1)
    return;
  v17 = a1;
  v64 = v11;
  v18 = 0;
  v61 = a1 + 592;
  v62 = a9;
  v14 = v14;
  if (v15 >= 0x1D)
    v15 = 29;
  v66 = v15;
  do
  {
    v19 = v14 - 1;
    if (v14 < 2
      || (int)quasar::Token::trailingSilenceMilliseconds((quasar::Token *)(*v64 + 224 * (v14 - 2))) >= *a7)
    {
      quasar::result_handler::initSegmentation(a2, a3, (uint64_t)a4, (uint64_t)a5, v19, a10, v79);
      if (!v88)
      {
LABEL_99:
        std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v79);
        goto LABEL_100;
      }
      if ((v82 & 0x80u) == 0)
        v20 = v82;
      else
        v20 = v81;
      std::to_string(&v72, v20);
      v21 = std::string::append(&v72, " ");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (v84 >= 0)
        v23 = HIBYTE(v84);
      else
        v23 = *((_QWORD *)&v83 + 1);
      std::to_string(&v71, v23);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v71;
      else
        v24 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        size = v71.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v73, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::string::append(&v74, " ");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((v82 & 0x80u) == 0)
        v30 = (const std::string::value_type *)&v80;
      else
        v30 = v80;
      if ((v82 & 0x80u) == 0)
        v31 = v82;
      else
        v31 = v81;
      v32 = std::string::append(&v75, v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v76, " ");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(_QWORD *)&v89[16] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)v89 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v84 >= 0)
        v36 = (const std::string::value_type *)&v83;
      else
        v36 = (const std::string::value_type *)v83;
      if (v84 >= 0)
        v37 = HIBYTE(v84);
      else
        v37 = *((_QWORD *)&v83 + 1);
      v38 = std::string::append((std::string *)v89, v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v78 = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)v77 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if ((v89[23] & 0x80000000) != 0)
        operator delete(*(void **)v89);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (!kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get((uint64_t)a8, (uint64_t)v77, (uint64_t)&v85))
      {
        if (SHIBYTE(v84) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v89, (const std::string::value_type *)v83, *((std::string::size_type *)&v83 + 1));
        }
        else
        {
          *(_OWORD *)v89 = v83;
          *(_QWORD *)&v89[16] = v84;
        }
        *(_DWORD *)&v89[24] = 0;
        memset(&v75, 0, sizeof(v75));
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
        v74.__r_.__value_.__s.__data_[8] = 0;
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        v75.__r_.__value_.__l.__size_ = v75.__r_.__value_.__r.__words[0];
        v75.__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[0] + 32;
        v75.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>((uint64_t)&v75.__r_.__value_.__r.__words[2], (__int128 *)v89, &v90, (std::string *)v75.__r_.__value_.__l.__data_);
        quasar::corrective_reranking::Models::generateWFSTParses(v61, 0, (uint64_t *)&v75, (unsigned __int8 *)&v80, 1, a7[14] | 0x100000000, (uint64_t *)&v76);
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if ((v89[23] & 0x80000000) != 0)
          operator delete(*(void **)v89);
        quasar::corrective_reranking::CorrectiveReranker::applyOverridePhrases(*(_QWORD *)(v17 + 624), (uint64_t *)&v76, 1, (std::string::size_type)v89);
        std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v76.__r_.__value_.__l.__data_);
        v76 = *(std::string *)v89;
        memset(v89, 0, 24);
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
        if (quasar::gLogLevel >= 5)
        {
          memset(v94, 0, sizeof(v94));
          memset(v93, 0, sizeof(v93));
          *(_OWORD *)__p = 0u;
          v92 = 0u;
          v90 = 0u;
          memset(v89, 0, sizeof(v89));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"VoiceEditingResultHandler: ", 27);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Testing: WFST ", 14);
          if (v84 >= 0)
            v42 = &v83;
          else
            v42 = (__int128 *)v83;
          if (v84 >= 0)
            v43 = HIBYTE(v84);
          else
            v43 = *((_QWORD *)&v83 + 1);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" ", 1);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v89);
        }
        v45 = a7;
        v47 = v76.__r_.__value_.__l.__size_;
        for (i = v76.__r_.__value_.__r.__words[0]; i != v47; i += 232)
        {
          quasar::result_handler::parseToInterpretation(i, (uint64_t)&v80, (uint64_t)v89);
          if (HIDWORD(v92))
            v48 = 0;
          else
            v48 = BYTE1(v93[0]) == 0;
          if (!v48)
          {
            v49 = v86;
            if ((unint64_t)v86 >= v87)
            {
              v50 = (std::string *)std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation&>((uint64_t *)&v85, (const quasar::result_handler::CommandInterpretation *)v89);
            }
            else
            {
              quasar::result_handler::CommandInterpretation::CommandInterpretation(v86, (const quasar::result_handler::CommandInterpretation *)v89);
              v50 = v49 + 7;
            }
            v86 = v50;
          }
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94[1] + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v93 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v90) < 0)
            operator delete(*(void **)&v89[24]);
          if ((v89[23] & 0x80000000) != 0)
            operator delete(*(void **)v89);
        }
        v51 = 126 - 2 * __clz(0xCF3CF3CF3CF3CF3DLL * (((char *)v86 - (char *)v85) >> 3));
        if (v86 == v85)
          v52 = 0;
        else
          v52 = v51;
        std::__introsort<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,false>((uint64_t)v85, (unint64_t)v86, v52, 1);
        if (*a8)
          kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::vector<quasar::result_handler::CommandInterpretation> const&)::{lambda(std::vector<quasar::result_handler::CommandInterpretation>&)#1}>(a8, (std::string::size_type)v77, (uint64_t)&v85);
        *(_QWORD *)v89 = &v76;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
        a7 = v45;
        a9 = v62;
        v17 = a1;
      }
      v53 = v85;
      v54 = v85;
      if (v85 == v86)
      {
LABEL_92:
        if (!a6)
          goto LABEL_97;
      }
      else
      {
        while (SHIDWORD(v54[3].__r_.__value_.__r.__words[0]) <= 0)
        {
          v54 += 7;
          if (v54 == v86)
          {
            while (!v53[3].__r_.__value_.__s.__data_[9])
            {
              v53 += 7;
              if (v53 == v86)
                goto LABEL_92;
            }
            break;
          }
        }
      }
      v55 = a9[1];
      if (v55 >= a9[2])
      {
        v56 = std::vector<quasar::result_handler::CommandData>::__push_back_slow_path<quasar::result_handler::CommandData const&>(a9, (uint64_t)v79);
      }
      else
      {
        quasar::result_handler::CommandData::CommandData(a9[1], (uint64_t)v79);
        v56 = v55 + 184;
        a9[1] = v55 + 184;
      }
      a9[1] = v56;
LABEL_97:
      if (SHIBYTE(v78) < 0)
        operator delete(v77[0]);
      goto LABEL_99;
    }
LABEL_100:
    v14 = v19;
    v48 = v18++ == v66;
  }
  while (!v48);
  v58 = *a9;
  v57 = a9[1];
  if (*a9 != v57)
  {
    for (j = v57 - 184; v58 < j; j -= 184)
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandData>(v58, j);
      v58 += 184;
    }
  }
}

void sub_1ADDF955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,char a54)
{
  if (a52 < 0)
    operator delete(__p);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a54);
  STACK[0x210] = a13;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForSuppression(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v11;
  const char *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  if (v6 == *a2)
    return;
  v11 = 0;
  v12 = "VoiceEditingResultHandler: ";
  while (1)
  {
    v13 = (_QWORD *)(v7 + 184 * v11);
    v15 = (uint64_t)(v13 + 3);
    v14 = (uint64_t *)v13[3];
    if (v14 == (uint64_t *)v13[4] || (v16 = *v14, *v14 == v14[1]))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"!emptyTopChoice(partialCommand.commandUtterance)", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
    }
    v17 = *(_QWORD *)(a1 + 408);
    if (v17)
    {
      v18 = *(_QWORD **)(v17 + 48);
      v19 = v18 == *(_QWORD **)(v17 + 56) ? 0 : -1227133513 * ((v18[1] - *v18) >> 5);
      v20 = *v13 == v13[1] ? 0 : 1227133513 * ((*(_QWORD *)(*v13 + 8) - *(_QWORD *)*v13) >> 5);
      if (v20 + v19 > *(_DWORD *)(a1 + 60))
      {
        if (quasar::gLogLevel >= 5)
        {
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"FILTERING: REJECT1", 18);
LABEL_39:
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v41);
          goto LABEL_40;
        }
        goto LABEL_40;
      }
    }
    v22 = *(_DWORD *)(v16 + 36) + a3;
    if (v22 + *(_DWORD *)(a1 + 40) <= a4)
    {
      if (quasar::gLogLevel >= 5)
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"FILTERING: REJECT2", 18);
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    v23 = v7 + 184 * v11;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(_QWORD *)(v23 + 160);
    v26 = v24;
    if (v24 != v25)
      break;
LABEL_22:
    if (*(_BYTE *)(a1 + 509))
    {
      if (*(_DWORD *)(v16 + 28) + a3 + *(_DWORD *)(a1 + 56) > a4)
        goto LABEL_43;
      if (quasar::gLogLevel >= 5)
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"FILTERING: REJECT4", 18);
        goto LABEL_39;
      }
    }
    else
    {
      if (v22 > a4)
        goto LABEL_43;
      if (quasar::gLogLevel >= 5)
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"FILTERING: REJECT5", 18);
        goto LABEL_39;
      }
    }
LABEL_40:
    ++v11;
    v7 = *a2;
    v6 = a2[1];
    if (0xD37A6F4DE9BD37A7 * ((v6 - *a2) >> 3) <= v11)
      return;
  }
  while (*(int *)(v26 + 76) <= 0)
  {
    v26 += 168;
    if (v26 == v25)
    {
      v27 = v24;
      while (!*(_BYTE *)(v27 + 81))
      {
        v27 += 168;
        if (v27 == v25)
          goto LABEL_22;
      }
      break;
    }
  }
  v30 = (uint64_t)v12;
  if (*(_DWORD *)(v24 + 76) >= *(_DWORD *)(a1 + 52))
    v31 = *(_DWORD *)(a1 + 48);
  else
    v31 = 0;
  if (quasar::gLogLevel >= 5)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, v30, 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"(now=", 5);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)") LEO relevantNow=", 18);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" utteranceStartMs=", 18);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" token=", 7);
    quasar::result_handler::topChoiceSilStartMs(v15);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" constant=", 10);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" sum=", 5);
    quasar::result_handler::topChoiceSilStartMs(v15);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v41);
  }
  if (v31 + a3 + quasar::result_handler::topChoiceSilStartMs(v15) + *(_DWORD *)(a1 + 44) <= a4)
  {
    v12 = (const char *)v30;
    if (quasar::gLogLevel >= 5)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, v30, 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"FILTERING: REJECT3", 18);
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  v7 = *a2;
  v6 = a2[1];
LABEL_43:
  std::vector<quasar::result_handler::CommandData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>>(a5, a5[1], v7 + 184 * v11, v6, 0xD37A6F4DE9BD37A7 * ((uint64_t)(v6 - (v7 + 184 * v11)) >> 3));
}

void quasar::result_handler::VoiceEditingResultHandler::updateSuppressionState(uint64_t a1, uint64_t *a2, int a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t j;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  std::string::size_type size;
  __int32 *v21;
  char v22;
  uint64_t v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *__p[2];
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;

  v4 = *(unsigned __int8 *)(a1 + 304);
  v5 = *(_DWORD *)(a1 + 308);
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    *(_BYTE *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 308) = 0;
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 304);
    v7 = *(_DWORD *)(a1 + 308);
  }
  v9 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v10 = *a2;
    while (2)
    {
      for (i = *(_QWORD *)(v10 + 152); i != *(_QWORD *)(v10 + 160); i += 168)
      {
        if (*(int *)(i + 76) > 0)
        {
LABEL_22:
          *(_BYTE *)(a1 + 304) = 1;
          v17 = *(_DWORD *)(a1 + 32);
          if (v17 <= v7)
            v17 = v7;
          *(_DWORD *)(a1 + 308) = v17;
          if (*(char *)(v9 + 151) < 0)
          {
            v18 = *(char **)(v9 + 128);
            v19 = *(_QWORD *)(v9 + 136);
          }
          else
          {
            v18 = (char *)(v9 + 128);
            v19 = *(unsigned __int8 *)(v9 + 151);
          }
          quasar::utf8::convertToLowerCaseOrEmpty(v18, v19, &v44);
          size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v44.__r_.__value_.__l.__size_;
          if (size)
          {
            if (*(_BYTE *)(a1 + 280))
            {
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v21 = (__int32 *)&v44;
              else
                v21 = (__int32 *)v44.__r_.__value_.__r.__words[0];
              v30 = 0uLL;
              LOBYTE(v31) = 0;
              *((_QWORD *)&v31 + 1) = 0;
              *(_QWORD *)&v32 = 0;
              BYTE8(v32) = 0;
              LOBYTE(v33) = 0;
              *((_QWORD *)&v33 + 1) = 0;
              *(_OWORD *)__p = 0u;
              memset(v29, 0, 25);
              v22 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v21, (__int32 *)((char *)v21 + size), (uint64_t)__p, a1 + 216, 0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if ((v22 & 1) != 0)
                goto LABEL_40;
            }
            if (!quasar::result_handler::hasInterpretationWithEmptyOrShortEnoughArguments(v9, a1 + 16, (uint64_t *)(a1 + 192))|| (v23 = *(_QWORD *)(a1 + 160)) != 0&& (quasar::result_handler::hasInterpretationWithMaybeMatchingTarget(v9, v23, a1 + 16) & 1) == 0)
            {
LABEL_40:
              *(_DWORD *)(a1 + 308) = 0;
            }
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v6 = *(unsigned __int8 *)(a1 + 304);
          goto LABEL_44;
        }
      }
      v10 += 184;
      if (v10 != v8)
        continue;
      break;
    }
    v12 = *a2;
    do
    {
      for (j = *(_QWORD *)(v12 + 152); j != *(_QWORD *)(v12 + 160); j += 168)
      {
        if (*(_BYTE *)(j + 81))
          goto LABEL_22;
      }
      v12 += 184;
    }
    while (v12 != v8);
    if (*(_BYTE *)(a1 + 508))
    {
      if (v9 == v8)
        goto LABEL_44;
      if (quasar::gLogLevel >= 5)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        memset(v29, 0, sizeof(v29));
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(now=", 5);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") favorCommandSuppressionState=", 31);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        v7 = *(_DWORD *)(a1 + 308);
      }
      v6 = 1;
      *(_BYTE *)(a1 + 304) = 1;
      v16 = *(_DWORD *)(a1 + 68);
    }
    else
    {
      if (v9 == v8)
        goto LABEL_44;
      v16 = *(_DWORD *)(a1 + 64);
    }
    if (v16 > v7)
      v7 = v16;
    *(_DWORD *)(a1 + 308) = v7;
  }
LABEL_44:
  if (v4 != v6)
  {
    if (quasar::gLogLevel < 5)
      return;
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 308) != (v5 != 0) && quasar::gLogLevel > 4)
  {
LABEL_52:
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    memset(v29, 0, sizeof(v29));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(now=", 5);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") isSuppressing=", 16);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" partialDelay=", 14);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
}

void sub_1ADDFA024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(uint64_t a1, int a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  clockid_t v20;
  uint64_t *v21;
  _QWORD *v22;
  clockid_t v23;
  clockid_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  clockid_t v32;
  _QWORD *v33;
  clockid_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void **v38;
  char v39;
  char v40;
  char v41;
  int v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  std::vector<std::string>::pointer end;
  std::string *value;
  char *v50;
  __int128 v51;
  std::string::size_type v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t i;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::string *v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  std::string::size_type v72;
  _BOOL8 v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  uint8x8_t v77;
  int16x8_t v78;
  uint8x8_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  std::vector<std::string>::pointer begin;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  std::string *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t **v121;
  _QWORD *v122;
  uint64_t v123;
  quasar::corrective_reranking::Parser *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  int v130;
  int v131;
  std::string v132[2];
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  void *v143;
  int v144;
  char v145;
  char v146;
  int v147;
  char v148;
  void *__p[2];
  unsigned __int8 v150;
  char v151;
  __int32 v152;
  char v153;
  uint64_t v154[3];
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  int v159;
  std::vector<std::string> __val;
  char v161;
  char v162;
  int v163;
  char v164;
  std::string v165[2];
  void *v166[2];
  void *v167[2];
  __int128 v168;
  uint64_t v169;
  int v170;
  __int16 v171;
  char v172;
  int v173;
  __int16 v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  void *v181[2];
  unsigned __int8 v182;
  void *v183[2];
  void *v184;
  std::string v185;
  char v186;
  void *v187;
  char v188;
  uint64_t v189;
  std::string v190;
  uint64_t v191;
  std::string __s;
  __int128 v193;
  void *v194;
  void *v195;
  char v196;
  char v197;
  _QWORD v198[4];
  _QWORD v199[4];
  std::string v200[2];
  void *v201[2];
  _OWORD v202[3];
  __int128 v203;
  void *v204[6];
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;

  v4 = a1;
  v211 = *MEMORY[0x1E0C80C00];
  v159 = a2;
  v198[0] = &off_1E5CFF598;
  v198[1] = a1;
  v198[3] = v198;
  v199[3] = v199;
  v199[0] = &off_1E5CFF598;
  v199[1] = a1;
  *(_BYTE *)(a1 + 508) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176));
  *(_BYTE *)(v4 + 509) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 176) + 24))(*(_QWORD *)(v4 + 176));
  if (!*(_BYTE *)(v4 + 288))
    goto LABEL_149;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 72))(v4, &v159);
  v5 = *a3;
  quasar::result_handler::clean(*a3);
  quasar::result_handler::clean(v5 + 3);
  quasar::result_handler::clean(v5 + 6);
  if (quasar::gLogLevel >= 5)
  {
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v207 = 0u;
    v206 = 0u;
    v205 = 0u;
    memset(v204, 0, sizeof(v204));
    v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(now=", 5);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") recv commandCandidate: ", 25);
    quasar::getTopChoice((uint64_t)(*a3 + 6), 1, &v185);
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v185;
    else
      v9 = (std::string *)v185.__r_.__value_.__r.__words[0];
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v185.__r_.__value_.__r.__words[2]);
    else
      size = v185.__r_.__value_.__l.__size_;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, size);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ::::: ", 7);
    quasar::topChoiceWithTimes((uint64_t **)*a3 + 6, __p);
    if ((v150 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v150 & 0x80u) == 0)
      v14 = v150;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utteranceStartMs=", 18);
    std::ostream::operator<<();
    if ((char)v150 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v185.__r_.__value_.__l.__data_);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
  }
  std::string::basic_string[abi:ne180100]<0>(v200, "commandCandidate");
  quasar::result_handler::VoiceEditingResultHandler::logSnippet(v4, (uint64_t)v200, (uint64_t)*a3);
  if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200[0].__r_.__value_.__l.__data_);
  if (!*(_QWORD *)(v4 + 160) && quasar::gLogLevel >= 5)
  {
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v207 = 0u;
    v206 = 0u;
    v205 = 0u;
    memset(v204, 0, sizeof(v204));
    v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Parser is unavailable", 21);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v4 + 176) + 16))(v155);
  v17 = *(_QWORD *)(v4 + 160);
  if (v17)
  {
    quasar::result_handler::findPartialCommands(v17, (uint64_t)v155, (uint64_t)v157, *a3 + 6, *a3, *(unsigned __int8 *)(v4 + 509), (_DWORD *)(v4 + 16), (unint64_t *)(v4 + 320), v154, (quasar::PartialHistory *)(v4 + 624));
    quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForThoughtPause(v154, (uint64_t *)v200);
    v18 = *a3;
    std::vector<quasar::result_handler::CommandData>::__vdeallocate((void **)*a3 + 20);
    *(std::string *)(v18 + 20) = v200[0];
    memset(v200, 0, 24);
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
  }
  (*a3)[58] = mach_continuous_time();
  v19 = mach_absolute_time();
  v21 = *a3;
  (*a3)[60] = v19;
  LOBYTE(__p[0]) = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v124 = *(quasar::corrective_reranking::Parser **)(v4 + 160);
  if (v124)
  {
    v22 = (_QWORD *)v21[6];
    if (v22 == (_QWORD *)v21[7] || *v22 == v22[1])
    {
      v132[0].__r_.__value_.__s.__data_[0] = 0;
      v146 = 0;
      v148 = 0;
      v147 = 0;
LABEL_138:
      std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::result_handler::CommandData,false>>((uint64_t)__p, (uint64_t)v132);
      v152 = v147;
      v153 = v148;
      std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v132);
      v21 = *a3;
      goto LABEL_139;
    }
    v125 = *(_BYTE *)(v4 + 509);
    v179 = 0;
    v178 = 0;
    v180 = 0;
    v176 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v175, v20);
    v177 = 0;
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v23);
    v121 = a3;
    v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22[1] - *v22) >> 5);
    v26 = v25 - 1;
    v123 = v4;
    if ((int)v25 < 1)
    {
      v127 = 0;
      v128 = 0;
      v126 = 0;
    }
    else
    {
      v130 = 0;
      v27 = 0;
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v122 = v22;
      v28 = -1227133513 * ((uint64_t)(v22[1] - *v22) >> 5);
      if (v26 >= 0x1D)
        v26 = 29;
      v129 = v26;
      do
      {
        v29 = (v25 - 1);
        if (v28 < 2
          || (v30 = (v25 - 1),
              v31 = quasar::Token::trailingSilenceMilliseconds((quasar::Token *)(*v122 + 224 * (v25 - 2))),
              v29 = v30,
              v31 >= *(_DWORD *)(v4 + 16)))
        {
          v131 = v29;
          quasar::result_handler::initSegmentation((uint64_t)v155, (uint64_t)v157, (uint64_t)(v21 + 6), (uint64_t)v21, v29, (quasar::PartialHistory *)(v4 + 624), &v185);
          if (v196)
          {
            *(_OWORD *)v167 = 0u;
            v168 = 0u;
            *(_OWORD *)v166 = 0u;
            memset(v165, 0, sizeof(v165));
            v169 = 0x101010101010101;
            v170 = 0;
            v171 = 257;
            v172 = 0;
            v173 = 10;
            v174 = 256;
            std::string::operator=(v165, &v190);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(v200, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v200[0] = __s;
            LODWORD(v200[1].__r_.__value_.__l.__data_) = 0;
            std::vector<quasar::corrective_reranking::ASRCandidate>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*>((uint64_t)&v165[1], v200, (__int128 *)&v200[1].__r_.__value_.__r.__words[1], 1uLL);
            if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v200[0].__r_.__value_.__l.__data_);
            v174 = 1;
            v172 = v125;
            if (quasar::gLogLevel >= 5)
            {
              v210 = 0u;
              v209 = 0u;
              v208 = 0u;
              v207 = 0u;
              v206 = 0u;
              v205 = 0u;
              memset(v204, 0, sizeof(v204));
              v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"disambiguationActive ", 21);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
            }
            kaldi::Timer::GetSeconds((kaldi::Timer *)5, v32);
            quasar::corrective_reranking::Parser::run(v124, (const quasar::corrective_reranking::Parser::RunArgs *)v165, (uint64_t)&__val);
            kaldi::Timer::GetSeconds((kaldi::Timer *)5, v34);
            if (quasar::gLogLevel >= 5)
            {
              v210 = 0u;
              v209 = 0u;
              v208 = 0u;
              v207 = 0u;
              v206 = 0u;
              v205 = 0u;
              memset(v204, 0, sizeof(v204));
              v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"findMaybeCompleteCommand: parserRunIter=", 40);
              v36 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" parserRunTime=", 15);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
            }
            v183[1] = 0;
            v183[0] = 0;
            v184 = 0;
            if (BYTE4(__val.__begin_))
            {
              v37 = std::vector<quasar::result_handler::CommandInterpretation>::emplace_back<>((uint64_t *)v183);
              MEMORY[0x1AF44C914](v37, "disambiguation");
              if (!BYTE4(__val.__begin_))
                std::__throw_bad_optional_access[abi:ne180100]();
              std::to_string(v200, (int)__val.__begin_);
              v38 = (void **)(v37 + 24);
              if (*(char *)(v37 + 47) < 0)
                operator delete(*v38);
              *(_OWORD *)v38 = *(_OWORD *)&v200[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v37 + 40) = *((_QWORD *)&v200[0].__r_.__value_.__l + 2);
              *(_DWORD *)(v37 + 76) = 1;
              *(_BYTE *)(v37 + 80) = 1;
            }
            else if (v162 && v161)
            {
              end = __val.__end_;
              value = __val.__end_cap_.__value_;
              while (end != value)
              {
                quasar::result_handler::parseToInterpretation((uint64_t)end, (uint64_t)v165, (uint64_t)v200);
                v50 = (char *)v183[1];
                if (v183[1] >= v184)
                {
                  v55 = (void *)std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation>((uint64_t *)v183, (__int128 *)v200);
                }
                else
                {
                  v51 = *(_OWORD *)&v200[0].__r_.__value_.__l.__data_;
                  *((_QWORD *)v183[1] + 2) = *((_QWORD *)&v200[0].__r_.__value_.__l + 2);
                  *(_OWORD *)v50 = v51;
                  memset(v200, 0, 24);
                  v52 = v200[1].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v50 + 24) = *(_OWORD *)&v200[1].__r_.__value_.__l.__data_;
                  *((_QWORD *)v50 + 5) = v52;
                  memset(&v200[1], 0, sizeof(std::string));
                  v53 = *(_OWORD *)v201;
                  *((_QWORD *)v50 + 8) = *(_QWORD *)&v202[0];
                  *((_OWORD *)v50 + 3) = v53;
                  v201[1] = 0;
                  *(_QWORD *)&v202[0] = 0;
                  v201[0] = 0;
                  v54 = *((_QWORD *)&v202[0] + 1);
                  *((_WORD *)v50 + 40) = v202[1];
                  *((_QWORD *)v50 + 9) = v54;
                  *((_QWORD *)v50 + 11) = 0;
                  *((_QWORD *)v50 + 12) = 0;
                  *((_QWORD *)v50 + 13) = 0;
                  *((_QWORD *)v50 + 14) = 0;
                  *(_OWORD *)(v50 + 88) = *(_OWORD *)((char *)&v202[1] + 8);
                  *((_QWORD *)v50 + 13) = *((_QWORD *)&v202[2] + 1);
                  memset((char *)&v202[1] + 8, 0, 24);
                  *((_QWORD *)v50 + 15) = 0;
                  *((_QWORD *)v50 + 16) = 0;
                  *((_OWORD *)v50 + 7) = v203;
                  v203 = 0uLL;
                  *((void **)v50 + 16) = v204[0];
                  *((_QWORD *)v50 + 17) = 0;
                  v204[0] = 0;
                  *((_QWORD *)v50 + 18) = 0;
                  *((_QWORD *)v50 + 19) = 0;
                  *(_OWORD *)(v50 + 136) = *(_OWORD *)&v204[1];
                  *((void **)v50 + 19) = v204[3];
                  memset(&v204[1], 0, 24);
                  *((void **)v50 + 20) = v204[4];
                  v55 = v50 + 168;
                }
                v183[1] = v55;
                v181[0] = &v204[1];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
                v181[0] = &v203;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
                v181[0] = (char *)&v202[1] + 8;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
                if (SBYTE7(v202[0]) < 0)
                  operator delete(v201[0]);
                if (SHIBYTE(v200[1].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v200[1].__r_.__value_.__l.__data_);
                if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v200[0].__r_.__value_.__l.__data_);
                end = (std::vector<std::string>::pointer)((char *)end + 232);
              }
            }
            std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate((void **)&v193);
            v193 = *(_OWORD *)v183;
            v194 = v184;
            v184 = 0;
            v183[1] = 0;
            v183[0] = 0;
            v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
            std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
            LODWORD(v195) = v163;
            BYTE4(v195) = v164;
            v39 = v163;
            v40 = BYTE1(v163);
            v41 = BYTE2(v163);
            v42 = HIBYTE(v163);
            v43 = v164;
            if (quasar::gLogLevel >= 6)
            {
              v210 = 0u;
              v209 = 0u;
              v208 = 0u;
              v207 = 0u;
              v206 = 0u;
              v205 = 0u;
              memset(v204, 0, sizeof(v204));
              v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"LEO MAYBE: segmentation->asrCandidate ", 38);
              quasar::result_handler::operator<<(v45, (uint64_t)&v185);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v200);
            }
            if ((_QWORD)v193 != *((_QWORD *)&v193 + 1))
            {
              v46 = v179;
              if (v179 >= v180)
              {
                v47 = std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData>(&v178, (uint64_t)&v185);
              }
              else
              {
                std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>((uint64_t)&v180, v179, (uint64_t)&v185);
                v47 = v46 + 184;
              }
              v179 = v47;
            }
            v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__val.__end_;
            std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
            if (v167[1])
            {
              *(void **)&v168 = v167[1];
              operator delete(v167[1]);
            }
            if (v166[0])
            {
              v166[1] = v166[0];
              operator delete(v166[0]);
            }
            v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v165[1];
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
            if (SHIBYTE(v165[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v165[0].__r_.__value_.__l.__data_);
            ++v130;
            BYTE4(v127) |= v39;
            LOBYTE(v127) = v40 | v127;
            LOBYTE(v126) = v41 | v126;
            HIDWORD(v126) |= v42;
            v128 |= v43;
          }
          std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v185);
          LODWORD(v29) = v131;
        }
        --v28;
        LODWORD(v25) = v29;
      }
      while (v27++ != v129);
    }
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v24);
    a3 = v121;
    if (quasar::gLogLevel >= 5)
    {
      v210 = 0u;
      v209 = 0u;
      v208 = 0u;
      v207 = 0u;
      v206 = 0u;
      v205 = 0u;
      memset(v204, 0, sizeof(v204));
      v203 = 0u;
      memset(v202, 0, sizeof(v202));
      *(_OWORD *)v201 = 0u;
      memset(v200, 0, sizeof(v200));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"findMaybeCompleteCommand: parserRunIters=", 41);
      v58 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" parserLoopTime=", 16);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
    }
    v59 = v178;
    v60 = v179;
    if (v178 == v179)
      goto LABEL_103;
    for (i = v178 + 184; i != v60; i += 184)
    {
      v62 = quasar::result_handler::maybeCompleteCommandSegmentationScore(v59);
      v63 = quasar::result_handler::maybeCompleteCommandSegmentationScore(i);
      if ((int)v62 < (int)v63 || (int)v63 >= (int)v62 && *((float *)&v62 + 1) < *((float *)&v63 + 1))
        v59 = i;
    }
    v64 = *(_QWORD *)(v59 + 152);
    if (v64 == *(_QWORD *)(v59 + 160) || !*(_BYTE *)(v64 + 80))
    {
LABEL_103:
      v132[0].__r_.__value_.__s.__data_[0] = 0;
      v146 = 0;
      v148 = v128;
      v147 = (v126 << 16) | (HIDWORD(v126) << 24) | (v127 << 8) | BYTE4(v127);
LABEL_137:
      v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
      std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
      goto LABEL_138;
    }
    std::vector<quasar::result_handler::CommandInterpretation>::resize((uint64_t *)(v59 + 152), 1uLL);
    v65 = *(_QWORD **)v59;
    if (*(_QWORD *)v59 == *(_QWORD *)(v59 + 8) || (v66 = v65[1], *v65 == v66))
    {
      if (quasar::gLogLevel >= 5)
      {
        v210 = 0u;
        v209 = 0u;
        v208 = 0u;
        v207 = 0u;
        v206 = 0u;
        v205 = 0u;
        memset(v204, 0, sizeof(v204));
        v203 = 0u;
        memset(v202, 0, sizeof(v202));
        *(_OWORD *)v201 = 0u;
        memset(v200, 0, sizeof(v200));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"dropUnwantedAutoPunc: input is empty", 36);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
      }
      goto LABEL_132;
    }
    quasar::Token::Token(&v185, (const quasar::Token *)(v66 - 224));
    if (!quasar::Token::isAutoPunctuation((quasar::Token *)&v185))
    {
      if (quasar::gLogLevel < 5)
        goto LABEL_122;
      v210 = 0u;
      v209 = 0u;
      v208 = 0u;
      v207 = 0u;
      v206 = 0u;
      v205 = 0u;
      memset(v204, 0, sizeof(v204));
      v203 = 0u;
      memset(v202, 0, sizeof(v202));
      *(_OWORD *)v201 = 0u;
      memset(v200, 0, sizeof(v200));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"dropUnwantedAutoPunc: input does not end with AutoPunc", 54);
LABEL_121:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
      goto LABEL_122;
    }
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v185.__r_.__value_.__l.__size_ == 1)
      {
        v67 = (std::string *)v185.__r_.__value_.__r.__words[0];
LABEL_110:
        if (v67->__r_.__value_.__s.__data_[0] == 46)
        {
          v70 = *(unsigned __int8 *)(v59 + 119);
          if ((v70 & 0x80u) != 0)
            v70 = *(_QWORD *)(v59 + 104);
          if (!v70)
          {
            if (quasar::gLogLevel < 5)
              goto LABEL_122;
            v210 = 0u;
            v209 = 0u;
            v208 = 0u;
            v207 = 0u;
            v206 = 0u;
            v205 = 0u;
            memset(v204, 0, sizeof(v204));
            v203 = 0u;
            memset(v202, 0, sizeof(v202));
            *(_OWORD *)v201 = 0u;
            memset(v200, 0, sizeof(v200));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"dropUnwantedAutoPunc: displayedText is empty", 44);
            goto LABEL_121;
          }
          v71 = *(unsigned int *)(v59 + 120);
          v72 = (v71 - 1);
          if ((int)v71 >= 1 && v70 >= v71)
          {
            std::string::basic_string(v165, (const std::string *)(v59 + 96), (v71 - 1), 1uLL, (std::allocator<char> *)v200);
            v73 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)v165, (unsigned __int8 *)&v185);
            if (v73)
            {
              if (quasar::gLogLevel >= 5)
              {
                v210 = 0u;
                v209 = 0u;
                v208 = 0u;
                v207 = 0u;
                v206 = 0u;
                v205 = 0u;
                memset(v204, 0, sizeof(v204));
                v203 = 0u;
                memset(v202, 0, sizeof(v202));
                *(_OWORD *)v201 = 0u;
                memset(v200, 0, sizeof(v200));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"dropUnwantedAutoPunc: unexpected character before cursor", 56);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
              }
              goto LABEL_226;
            }
            v89 = *(_QWORD *)(v59 + 152);
            if (v89 == *(_QWORD *)(v59 + 160))
            {
              if (quasar::gLogLevel < 5)
                goto LABEL_226;
              v210 = 0u;
              v209 = 0u;
              v208 = 0u;
              v207 = 0u;
              v206 = 0u;
              v205 = 0u;
              memset(v204, 0, sizeof(v204));
              v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"dropUnwantedAutoPunc: no interpretatoin", 39);
            }
            else
            {
              if (*(char *)(v89 + 23) < 0)
                v90 = *(_QWORD *)(v89 + 8);
              else
                v90 = *(unsigned __int8 *)(v89 + 23);
              if (v90)
              {
                v92 = (_QWORD *)quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange((quasar::corrective_reranking::Parse *)v73);
                if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v92, (unsigned __int8 *)v89))
                {
                  a3 = v121;
                  if (quasar::gLogLevel < 5)
                    goto LABEL_226;
                  v210 = 0u;
                  v209 = 0u;
                  v208 = 0u;
                  v207 = 0u;
                  v206 = 0u;
                  v205 = 0u;
                  memset(v204, 0, sizeof(v204));
                  v203 = 0u;
                  memset(v202, 0, sizeof(v202));
                  *(_OWORD *)v201 = 0u;
                  memset(v200, 0, sizeof(v200));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"dropUnwantedAutoPunc: command without visible change", 52);
LABEL_164:
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
LABEL_224:
                  v4 = v123;
                  goto LABEL_225;
                }
                if (*(char *)(v89 + 47) < 0)
                  v95 = *(_QWORD *)(v89 + 32);
                else
                  v95 = *(unsigned __int8 *)(v89 + 47);
                if (!v95)
                {
                  a3 = v121;
                  if (quasar::gLogLevel < 5)
                    goto LABEL_226;
                  v210 = 0u;
                  v209 = 0u;
                  v208 = 0u;
                  v207 = 0u;
                  v206 = 0u;
                  v205 = 0u;
                  memset(v204, 0, sizeof(v204));
                  v203 = 0u;
                  memset(v202, 0, sizeof(v202));
                  *(_OWORD *)v201 = 0u;
                  memset(v200, 0, sizeof(v200));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                  v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"dropUnwantedAutoPunc: no target", 31);
                  goto LABEL_164;
                }
                std::string::basic_string[abi:ne180100]<0>(v200, "en_US");
                quasar::getSentenceBoundarySeparatedString((char *)(v59 + 96), &__val);
                if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v200[0].__r_.__value_.__l.__data_);
                begin = __val.__begin_;
                if (__val.__begin_ == __val.__end_)
                {
                  if (quasar::gLogLevel >= 5)
                  {
                    v210 = 0u;
                    v209 = 0u;
                    v208 = 0u;
                    v207 = 0u;
                    v206 = 0u;
                    v205 = 0u;
                    memset(v204, 0, sizeof(v204));
                    v203 = 0u;
                    memset(v202, 0, sizeof(v202));
                    *(_OWORD *)v201 = 0u;
                    memset(v200, 0, sizeof(v200));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"dropUnwantedAutoPunc: unable to obtain sentences", 48);
LABEL_215:
                    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                  }
                }
                else
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = v89 + 24;
                  while (1)
                  {
                    v100 = v98;
                    v101 = SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0
                         ? LODWORD(begin->__r_.__value_.__r.__words[1])
                         : HIBYTE(begin->__r_.__value_.__r.__words[2]);
                    if (v98 > *(_DWORD *)(v59 + 120))
                      break;
                    v98 += v101;
                    ++begin;
                    v97 = v100;
                    if (begin == __val.__end_)
                      goto LABEL_187;
                  }
                  v100 = v97;
LABEL_187:
                  if (v98)
                  {
                    std::string::basic_string[abi:ne180100]<0>(v200, "en_US");
                    quasar::getRangesForSearchStringWithWordBoundariesValidation(v99, v59 + 96, (uint64_t)v200, v183);
                    if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v200[0].__r_.__value_.__l.__data_);
                    v104 = (unint64_t *)v183[0];
                    v105 = (unint64_t *)v183[1];
                    if (v183[0] == v183[1])
                    {
LABEL_194:
                      if (quasar::gLogLevel >= 5)
                      {
                        v210 = 0u;
                        v209 = 0u;
                        v208 = 0u;
                        v207 = 0u;
                        v206 = 0u;
                        v205 = 0u;
                        memset(v204, 0, sizeof(v204));
                        v203 = 0u;
                        memset(v202, 0, sizeof(v202));
                        *(_OWORD *)v201 = 0u;
                        memset(v200, 0, sizeof(v200));
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                        v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"dropUnwantedAutoPunc: dropping AutoPunc from precedingUtterance: ", 65);
                        v110 = (v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? &v185
                             : (std::string *)v185.__r_.__value_.__r.__words[0];
                        v111 = (v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? HIBYTE(v185.__r_.__value_.__r.__words[2])
                             : v185.__r_.__value_.__l.__size_;
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v110, v111);
                        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                        if (quasar::gLogLevel >= 5)
                        {
                          v210 = 0u;
                          v209 = 0u;
                          v208 = 0u;
                          v207 = 0u;
                          v206 = 0u;
                          v205 = 0u;
                          memset(v204, 0, sizeof(v204));
                          v203 = 0u;
                          memset(v202, 0, sizeof(v202));
                          *(_OWORD *)v201 = 0u;
                          memset(v200, 0, sizeof(v200));
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                          v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                          v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"dropUnwantedAutoPunc: precedingUtterance ", 41);
                          quasar::getTopChoice(v59, 1, v181);
                          if ((v182 & 0x80u) == 0)
                            v114 = v181;
                          else
                            v114 = (void **)v181[0];
                          if ((v182 & 0x80u) == 0)
                            v115 = v182;
                          else
                            v115 = (uint64_t)v181[1];
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
                          if ((char)v182 < 0)
                            operator delete(v181[0]);
                          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                        }
                      }
                      v116 = v65[1];
                      quasar::Token::~Token((void **)(v116 - 224));
                      v65[1] = v117;
                      if (*v65 != v117)
                        *(_BYTE *)(v116 - 404) = v186;
                    }
                    else
                    {
                      while (1)
                      {
                        v200[0].__r_.__value_.__r.__words[0] = v72;
                        v200[0].__r_.__value_.__l.__size_ = 1;
                        quasar::intersectionRange(v104, (unint64_t *)v200);
                        if (v106)
                        {
                          if (quasar::gLogLevel < 5)
                            goto LABEL_221;
                          v210 = 0u;
                          v209 = 0u;
                          v208 = 0u;
                          v207 = 0u;
                          v206 = 0u;
                          v205 = 0u;
                          memset(v204, 0, sizeof(v204));
                          v203 = 0u;
                          memset(v202, 0, sizeof(v202));
                          *(_OWORD *)v201 = 0u;
                          memset(v200, 0, sizeof(v200));
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                          v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"dropUnwantedAutoPunc: target might include AutoPunc", 51);
                          goto LABEL_220;
                        }
                        v200[0].__r_.__value_.__r.__words[0] = v100;
                        v200[0].__r_.__value_.__l.__size_ = v98;
                        quasar::intersectionRange(v104, (unint64_t *)v200);
                        if (!v107)
                          break;
                        v104 += 2;
                        if (v104 == v105)
                          goto LABEL_194;
                      }
                      if (quasar::gLogLevel < 5)
                        goto LABEL_221;
                      v210 = 0u;
                      v209 = 0u;
                      v208 = 0u;
                      v207 = 0u;
                      v206 = 0u;
                      v205 = 0u;
                      memset(v204, 0, sizeof(v204));
                      v203 = 0u;
                      memset(v202, 0, sizeof(v202));
                      *(_OWORD *)v201 = 0u;
                      memset(v200, 0, sizeof(v200));
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                      v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"dropUnwantedAutoPunc: target might include another sentence", 59);
LABEL_220:
                      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                    }
LABEL_221:
                    if (v183[0])
                    {
                      v183[1] = v183[0];
                      operator delete(v183[0]);
                    }
                    goto LABEL_223;
                  }
                  if (quasar::gLogLevel >= 5)
                  {
                    v210 = 0u;
                    v209 = 0u;
                    v208 = 0u;
                    v207 = 0u;
                    v206 = 0u;
                    v205 = 0u;
                    memset(v204, 0, sizeof(v204));
                    v203 = 0u;
                    memset(v202, 0, sizeof(v202));
                    *(_OWORD *)v201 = 0u;
                    memset(v200, 0, sizeof(v200));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                    v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"dropUnwantedAutoPunc: unable to find last sentence that ends with cursor or includes cursor", 91);
                    goto LABEL_215;
                  }
                }
LABEL_223:
                v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__val;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
                goto LABEL_224;
              }
              if (quasar::gLogLevel < 5)
                goto LABEL_226;
              v210 = 0u;
              v209 = 0u;
              v208 = 0u;
              v207 = 0u;
              v206 = 0u;
              v205 = 0u;
              memset(v204, 0, sizeof(v204));
              v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"dropUnwantedAutoPunc: no command", 32);
            }
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
LABEL_225:
            a3 = v121;
LABEL_226:
            if (SHIBYTE(v165[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v165[0].__r_.__value_.__l.__data_);
            goto LABEL_122;
          }
          if (quasar::gLogLevel >= 5)
          {
            v210 = 0u;
            v209 = 0u;
            v208 = 0u;
            v207 = 0u;
            v206 = 0u;
            v205 = 0u;
            memset(v204, 0, sizeof(v204));
            v203 = 0u;
            memset(v202, 0, sizeof(v202));
            *(_OWORD *)v201 = 0u;
            memset(v200, 0, sizeof(v200));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
            v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"dropUnwantedAutoPunc: cursor position is invalid", 48);
            goto LABEL_121;
          }
LABEL_122:
          if (v197 < 0)
            operator delete(v195);
          if (SHIBYTE(v193) < 0)
            operator delete((void *)__s.__r_.__value_.__r.__words[2]);
          v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v190.__r_.__value_.__l.__data_);
          v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
          if (v188 < 0)
            operator delete(v187);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v185.__r_.__value_.__l.__data_);
LABEL_132:
          quasar::result_handler::CommandData::CommandData((uint64_t)v200, v59);
          v76 = *(_DWORD *)(v59 + 176);
          BYTE12(v205) = *(_BYTE *)(v59 + 180);
          DWORD2(v205) = v76;
          v132[0] = v200[0];
          memset(v200, 0, sizeof(v200));
          v132[1] = v200[1];
          v133 = *(_OWORD *)v201;
          v134 = *(_QWORD *)&v202[0];
          v201[1] = 0;
          v201[0] = 0;
          v136 = *((_QWORD *)&v202[1] + 1);
          v138 = v203;
          v139 = DWORD2(v203);
          v141 = v204[2];
          v135 = *(_OWORD *)((char *)v202 + 8);
          memset(v202, 0, sizeof(v202));
          v137 = v202[2];
          v140 = *(_OWORD *)v204;
          *(_QWORD *)&v203 = 0;
          memset(v204, 0, sizeof(v204));
          v142 = *(_OWORD *)&v204[3];
          v143 = v204[5];
          v145 = BYTE4(v205);
          v144 = v205;
          v146 = 1;
          v148 = BYTE12(v205);
          v147 = v76;
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204[3];
          std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          if (SHIBYTE(v204[2]) < 0)
            operator delete(v204[0]);
          if (SBYTE7(v203) < 0)
            operator delete(*(void **)&v202[2]);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v202 + 8;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200[1];
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          goto LABEL_137;
        }
      }
    }
    else if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) == 1)
    {
      v67 = &v185;
      goto LABEL_110;
    }
    if (quasar::gLogLevel < 5)
      goto LABEL_122;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v207 = 0u;
    v206 = 0u;
    v205 = 0u;
    memset(v204, 0, sizeof(v204));
    v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"dropUnwantedAutoPunc: input does not end with AutoPunc period", 61);
    goto LABEL_121;
  }
LABEL_139:
  std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::result_handler::CommandData,false> const&>((uint64_t)(v21 + 23), (uint64_t)__p);
  v77.i32[0] = v152;
  v78 = (int16x8_t)vmovl_u8(v77);
  v79.i32[0] = *(_DWORD *)(v4 + 616);
  *(int8x8_t *)v78.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(v79), *(int8x8_t *)v78.i8);
  *(_DWORD *)(v4 + 616) = vmovn_s16(v78).u32[0];
  *(_BYTE *)(v4 + 620) |= v153;
  (*a3)[59] = mach_continuous_time();
  (*a3)[61] = mach_absolute_time();
  if (quasar::gLogLevel >= 5)
  {
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v207 = 0u;
    v206 = 0u;
    v205 = 0u;
    memset(v204, 0, sizeof(v204));
    v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"(now=", 5);
    v81 = (_QWORD *)std::ostream::operator<<();
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") handleCommandCandidate: maybeCompleteCommand ", 47);
    if (*((_BYTE *)*a3 + 368))
      quasar::result_handler::operator<<(v82, (uint64_t)(*a3 + 23));
    else
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"null", 4);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
    if (quasar::gLogLevel >= 5)
    {
      v210 = 0u;
      v209 = 0u;
      v208 = 0u;
      v207 = 0u;
      v206 = 0u;
      v205 = 0u;
      memset(v204, 0, sizeof(v204));
      v203 = 0u;
      memset(v202, 0, sizeof(v202));
      *(_OWORD *)v201 = 0u;
      memset(v200, 0, sizeof(v200));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"(now=", 5);
      v84 = (_QWORD *)std::ostream::operator<<();
      v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)") handleCommandCandidate: debugInfo", 35);
      quasar::result_handler::operator<<(v85);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
    }
  }
  v86 = *a3;
  *a3 = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v4 + 296), (quasar::result_handler::Package *)v86);
  *(_DWORD *)(v4 + 456) = v159;
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v158 < 0)
    operator delete(v157[0]);
  if (v156 < 0)
    operator delete(v155[0]);
LABEL_149:
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v199);
}

void sub_1ADDFBE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v64;

  v64 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v64;
    operator delete(v64);
  }
  STACK[0x510] = (unint64_t)&STACK[0x2C8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x510]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  quasar::Token::~Token((void **)&STACK[0x3F0]);
  STACK[0x300] = (unint64_t)&STACK[0x3A0];
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a63);
  std::pair<std::string,std::string>::~pair((uint64_t)&STACK[0x290]);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForThoughtPause(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = v4 + 184 * v7;
      v9 = *(_QWORD *)(v8 + 152);
      v10 = *(_QWORD *)(v8 + 160);
      v11 = v9;
      if (v9 != v10)
      {
        while (*(int *)(v11 + 76) <= 0)
        {
          v11 += 168;
          if (v11 == v10)
          {
            while (!*(_BYTE *)(v9 + 81))
            {
              v9 += 168;
              if (v9 == v10)
                goto LABEL_13;
            }
            break;
          }
        }
        if (v6 >= a2[2])
        {
          v6 = std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData const&>(a2, v8);
        }
        else
        {
          quasar::result_handler::CommandData::CommandData(v6, v8);
          v6 += 184;
          a2[1] = v6;
        }
        a2[1] = v6;
        v4 = *a1;
        v3 = a1[1];
      }
LABEL_13:
      ++v7;
    }
    while (0xD37A6F4DE9BD37A7 * ((v3 - v4) >> 3) > v7);
  }
}

void sub_1ADDFC2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingResultHandler::handleFinalCandidate(_QWORD *a1, unsigned int a2, quasar::result_handler::Package **a3)
{
  uint64_t v5;
  uint64_t v6;
  quasar::result_handler::Package *v7;
  quasar::result_handler::Package *result;
  uint64_t v9;
  quasar::result_handler::Package *v10;
  unsigned int v11;

  v11 = a2;
  (*(void (**)(_QWORD *, unsigned int *))(*a1 + 72))(a1, &v11);
  v5 = a1[19];
  v6 = v11;
  v7 = *a3;
  *a3 = 0;
  v10 = v7;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v5 + 40))(v5, v6, &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1AF44D190](v9);
  }
  return result;
}

void sub_1ADDFC35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, quasar::result_handler::Package *a9)
{
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::handleFinal(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  int v70;
  void *v71;
  uint64_t *v72;
  _DWORD *v73;
  _DWORD *i;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  std::string::size_type size;
  std::string::size_type v84;
  _QWORD *v85;
  _QWORD *v86;
  std::string *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  std::string *v91;
  std::string::size_type v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  uint64_t v98;
  unsigned __int8 *v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  quasar::result_handler::Package *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  _QWORD *v141;
  void *v142;
  quasar::result_handler::Package *v143;
  std::string v144;
  unsigned __int8 **v145;
  _QWORD *v146;
  unint64_t v147;
  void *v148;
  char *v149;
  unint64_t v150;
  void **v151;
  _QWORD *v152;
  unint64_t v153;
  void *__p;
  char *v155;
  unint64_t v156;
  unsigned int v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  char *v176;
  std::string v177;
  void **v178;
  _QWORD v179[4];
  _QWORD v180[7];

  v180[4] = *MEMORY[0x1E0C80C00];
  v157 = a2;
  v179[0] = &off_1E5CFF490;
  v179[1] = a1;
  v179[3] = v179;
  v180[0] = &off_1E5CFF490;
  v180[3] = v180;
  v180[1] = a1;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 72))(a1, &v157);
  v5 = *a3;
  quasar::result_handler::clean(*a3);
  quasar::result_handler::clean(v5 + 3);
  quasar::result_handler::clean(v5 + 6);
  v6 = *a3;
  v7 = *(_DWORD *)(a1 + 616);
  *((_BYTE *)v6 + 460) = *(_BYTE *)(a1 + 620);
  *((_DWORD *)v6 + 114) = v7;
  *(_BYTE *)(a1 + 620) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  quasar::getTopChoice((uint64_t)*a3, 1, &v158);
  if (SBYTE7(v159) < 0)
  {
    v8 = *((_QWORD *)&v158 + 1);
    operator delete((void *)v158);
    if (!v8)
      goto LABEL_189;
  }
  else if (!BYTE7(v159))
  {
    goto LABEL_189;
  }
  v9 = (uint64_t *)**a3;
  quasar::strictAlignTokensToFirstSeenPartialResults((uint64_t *)(a1 + 560), v9, *(_DWORD *)(a1 + 612), (std::vector<int> *)&v158);
  v10 = *a3;
  v12 = (uint64_t)(*a3 + 11);
  v11 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    v10[12] = (uint64_t)v11;
    operator delete(v11);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  *(_OWORD *)(v10 + 11) = v158;
  v10[13] = v159;
  std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::pair[abi:ne180100](&v151, a1 + 512);
  v13 = v152;
  if ((unint64_t)v152 >= v153)
  {
    v14 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v151, v9);
  }
  else
  {
    *v152 = 0;
    v13[1] = 0;
    v13[2] = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v13, *v9, v9[1], 0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5));
    v14 = (uint64_t)(v13 + 3);
  }
  v152 = (_QWORD *)v14;
  v15 = v155;
  if ((unint64_t)v155 >= v156)
  {
    v17 = (char *)__p;
    v18 = (v155 - (_BYTE *)__p) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v156 - (_QWORD)__p;
    if ((uint64_t)(v156 - (_QWORD)__p) >> 1 > v19)
      v19 = v20 >> 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
      v21 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, v21);
      v17 = (char *)__p;
      v15 = v155;
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[4 * v18];
    v24 = &v22[4 * v21];
    *(_DWORD *)v23 = v157;
    v16 = v23 + 4;
    while (v15 != v17)
    {
      v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v23 - 1) = v25;
      v23 -= 4;
    }
    __p = v23;
    v155 = v16;
    v156 = (unint64_t)v24;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_DWORD *)v155 = v157;
    v16 = v15 + 4;
  }
  v155 = v16;
  std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::pair[abi:ne180100](&v145, a1 + 560);
  v26 = v146;
  if ((unint64_t)v146 >= v147)
  {
    v27 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v145, v9);
  }
  else
  {
    *v146 = 0;
    v26[1] = 0;
    v26[2] = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v26, *v9, v9[1], 0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5));
    v27 = (uint64_t)(v26 + 3);
  }
  v146 = (_QWORD *)v27;
  v28 = v149;
  if ((unint64_t)v149 >= v150)
  {
    v30 = (char *)v148;
    v31 = (v149 - (_BYTE *)v148) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v33 = v150 - (_QWORD)v148;
    if ((uint64_t)(v150 - (_QWORD)v148) >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v150, v34);
      v30 = (char *)v148;
      v28 = v149;
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[4 * v31];
    v37 = &v35[4 * v34];
    *(_DWORD *)v36 = v157;
    v29 = v36 + 4;
    while (v28 != v30)
    {
      v38 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *((_DWORD *)v36 - 1) = v38;
      v36 -= 4;
    }
    v148 = v36;
    v149 = v29;
    v150 = (unint64_t)v37;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_DWORD *)v149 = v157;
    v29 = v28 + 4;
  }
  v149 = v29;
  quasar::alignTokensToFirstSeenPartialResultsV3(&v145, (unsigned __int8 **)v9, *(_DWORD *)(a1 + 612), (std::vector<int> *)&v158);
  v39 = *a3;
  v41 = (uint64_t)(*a3 + 14);
  v40 = *(void **)v41;
  if (*(_QWORD *)v41)
  {
    v39[15] = (uint64_t)v40;
    operator delete(v40);
    *(_QWORD *)v41 = 0;
    *(_QWORD *)(v41 + 8) = 0;
    *(_QWORD *)(v41 + 16) = 0;
  }
  *((_OWORD *)v39 + 7) = v158;
  v39[16] = v159;
  v42 = *a3;
  v43 = *(_DWORD *)(a1 + 608);
  v44 = *(_DWORD *)(a1 + 612);
  v176 = 0;
  v175 = 0uLL;
  if (*v9 != v9[1])
  {
    quasar::alignTokensToFirstSeenPartialResultsV3((unsigned __int8 ***)&v151, (unsigned __int8 **)v9, v43, (std::vector<int> *)&v177);
    v45 = (void *)v177.__r_.__value_.__r.__words[0];
    v46 = (uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 2;
    v47 = v9[1];
    if (v46 != 0x6DB6DB6DB6DB6DB7 * ((v47 - *v9) >> 5))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"correctAlignedReceivedPartialResultIndexList.size() == tokens.size()", 68);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
    }
    if (v46 != (v42[15] - v42[14]) >> 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"correctAlignedSentPartialResultIndexList.size() == tokens.size()", 64);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
    }
    if (v47 != *v9)
    {
      v48 = 0;
      while (1)
      {
        if (v48 >= (uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 2)
LABEL_211:
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v49 = *(_DWORD *)(v177.__r_.__value_.__r.__words[0] + 4 * v48);
        if (v49 == -1)
          goto LABEL_60;
        v50 = v42[14];
        if (v48 >= (v42[15] - v50) >> 2)
          goto LABEL_211;
        v51 = *(_DWORD *)(v50 + 4 * v48);
        if (v51 == -1)
        {
LABEL_60:
          v57 = (char *)*((_QWORD *)&v175 + 1);
          if (*((_QWORD *)&v175 + 1) >= (unint64_t)v176)
          {
            v59 = (char *)v175;
            v60 = (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 2;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v62 = (uint64_t)&v176[-v175];
            if ((uint64_t)&v176[-v175] >> 1 > v61)
              v61 = v62 >> 1;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
              v63 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v176, v63);
              v57 = (char *)*((_QWORD *)&v175 + 1);
              v59 = (char *)v175;
            }
            else
            {
              v64 = 0;
            }
            v68 = (int *)&v64[4 * v60];
            *v68 = 0;
            v58 = v68 + 1;
            while (v57 != v59)
            {
              v69 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *--v68 = v69;
            }
            goto LABEL_83;
          }
          **((_DWORD **)&v175 + 1) = 0;
          v56 = v57 + 4;
        }
        else
        {
          v52 = (v51 - v44);
          if (v52 >= (v149 - (_BYTE *)v148) >> 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"indexInSentEmissionPair < sentPartialResultsEmissionPair.second.size()", 70);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
          }
          v53 = (v49 - v43);
          if (v53 >= (v155 - (_BYTE *)__p) >> 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"indexInReceivedEmissionPair < receivedPartialResultsEmissionPair.second.size()", 78);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
          }
          v54 = *((_DWORD *)v148 + v52) - *((_DWORD *)__p + v53);
          v55 = (char *)*((_QWORD *)&v175 + 1);
          if (*((_QWORD *)&v175 + 1) >= (unint64_t)v176)
          {
            v59 = (char *)v175;
            v65 = (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v67 = (uint64_t)&v176[-v175];
            if ((uint64_t)&v176[-v175] >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v63 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v63 = v66;
            if (v63)
            {
              v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v176, v63);
              v55 = (char *)*((_QWORD *)&v175 + 1);
              v59 = (char *)v175;
            }
            else
            {
              v64 = 0;
            }
            v68 = (int *)&v64[4 * v65];
            *v68 = v54 & ~(v54 >> 31);
            v58 = v68 + 1;
            while (v55 != v59)
            {
              v70 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *--v68 = v70;
            }
LABEL_83:
            *(_QWORD *)&v175 = v68;
            *((_QWORD *)&v175 + 1) = v58;
            v176 = &v64[4 * v63];
            if (v59)
              operator delete(v59);
            goto LABEL_85;
          }
          **((_DWORD **)&v175 + 1) = v54 & ~(v54 >> 31);
          v56 = v55 + 4;
        }
        v58 = v56;
LABEL_85:
        *((_QWORD *)&v175 + 1) = v58;
        if (0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5) <= ++v48)
        {
          v45 = (void *)v177.__r_.__value_.__r.__words[0];
          break;
        }
      }
    }
    if (v45)
    {
      v177.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      operator delete(v45);
    }
    v42 = *a3;
  }
  v71 = (void *)v42[17];
  if (v71)
  {
    v42[18] = (uint64_t)v71;
    operator delete(v71);
    v42[17] = 0;
    v42[18] = 0;
    v42[19] = 0;
  }
  *(_OWORD *)(v42 + 17) = v175;
  v42[19] = (uint64_t)v176;
  v72 = *a3;
  v73 = (_DWORD *)(*a3)[14];
  for (i = (_DWORD *)(*a3)[15]; v73 != i; ++v73)
  {
    if (*v73 != -1)
    {
      v75 = (*v73 - *(_DWORD *)(a1 + 612));
      if ((int)v75 < 0
        || (v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3),
            v76 < v75))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"0 <= partialResultIndexWithoutOffset && partialResultIndexWithoutOffset <= sentPartialResultsEmissionPair.first.size()", 118);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
      }
      if (v76 == v75)
        *v73 = -2;
    }
  }
  v77 = *(_QWORD *)(a1 + 416);
  if (v77 && *(_BYTE *)(v77 + 368) && *((_BYTE *)v72 + 80))
  {
    v78 = *(char ***)(v77 + 232);
    if (v78 == *(char ***)(v77 + 240))
      std::string::basic_string[abi:ne180100]<0>(&v144, "");
    else
      quasar::result_handler::toksToNormString(v78, &v144);
    v79 = (uint64_t *)a3;
    v80 = *(_QWORD *)(a1 + 560);
    if (*(_QWORD *)(a1 + 568) != v80)
    {
      v81 = 0;
      v82 = 0;
      do
      {
        if ((uint64_t)v82 >= *(int *)(a1 + 448))
          break;
        quasar::result_handler::toksToNormString((char **)(v80 + v81), &v177);
        if (quasar::startsWith((unsigned __int8 *)&v177, (unsigned __int8 *)&v144))
        {
          size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v144.__r_.__value_.__l.__size_;
          v84 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v84 = v177.__r_.__value_.__l.__size_;
          if (size < v84 && quasar::gLogLevel >= 5)
          {
            v173 = 0u;
            v174 = 0u;
            v171 = 0u;
            v172 = 0u;
            v169 = 0u;
            v170 = 0u;
            v167 = 0u;
            v168 = 0u;
            v165 = 0u;
            v166 = 0u;
            v163 = 0u;
            v164 = 0u;
            v161 = 0u;
            v162 = 0u;
            v159 = 0u;
            v160 = 0u;
            v158 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
            v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"preItnPrecedingUtteranceTopChoice: ", 35);
            v87 = (v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v144
                : (std::string *)v144.__r_.__value_.__r.__words[0];
            v88 = (v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v144.__r_.__value_.__r.__words[2])
                : v144.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v87, v88);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
            if (quasar::gLogLevel >= 5)
            {
              v173 = 0u;
              v174 = 0u;
              v171 = 0u;
              v172 = 0u;
              v169 = 0u;
              v170 = 0u;
              v167 = 0u;
              v168 = 0u;
              v165 = 0u;
              v166 = 0u;
              v163 = 0u;
              v164 = 0u;
              v161 = 0u;
              v162 = 0u;
              v159 = 0u;
              v160 = 0u;
              v158 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
              v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
              v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"voiceCommandDefiniteLeak: ", 26);
              if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v91 = &v177;
              else
                v91 = (std::string *)v177.__r_.__value_.__r.__words[0];
              if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v92 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
              else
                v92 = v177.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
            }
          }
        }
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v177.__r_.__value_.__l.__data_);
        ++v82;
        v80 = *(_QWORD *)(a1 + 560);
        v81 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 568) - v80) >> 3) > v82);
    }
    a3 = (uint64_t **)v79;
    if (quasar::gLogLevel > 4)
    {
      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      v167 = 0u;
      v168 = 0u;
      v165 = 0u;
      v166 = 0u;
      v163 = 0u;
      v164 = 0u;
      v161 = 0u;
      v162 = 0u;
      v159 = 0u;
      v160 = 0u;
      v158 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"hasVoiceCommandDefiniteLeak: ", 29);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
    }
    v94 = *v79;
    v95 = *(_QWORD *)(a1 + 416);
    quasar::getTopChoice(v95, 1, &v177);
    quasar::getTopChoice(v94, 1, &v175);
    v96 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v97 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    else
      v97 = v177.__r_.__value_.__l.__size_;
    if (!v97)
      goto LABEL_178;
    v98 = HIBYTE(v176);
    if (SHIBYTE(v176) < 0)
      v98 = *((_QWORD *)&v175 + 1);
    if (!v98 || v97 != v98)
      goto LABEL_178;
    if (SHIBYTE(v176) >= 0)
      v100 = (unsigned __int8 *)&v175;
    else
      v100 = (unsigned __int8 *)v175;
    if ((*((_BYTE *)&v177.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v177.__r_.__value_.__l.__data_, v100, v177.__r_.__value_.__l.__size_))
      {
LABEL_178:
        if (SHIBYTE(v176) < 0)
          operator delete((void *)v175);
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v177.__r_.__value_.__l.__data_);
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v144.__r_.__value_.__l.__data_);
        goto LABEL_184;
      }
    }
    else if (*((_BYTE *)&v177.__r_.__value_.__s + 23))
    {
      v101 = &v177;
      while (v101->__r_.__value_.__s.__data_[0] == *v100)
      {
        v101 = (std::string *)((char *)v101 + 1);
        ++v100;
        if (!--v96)
          goto LABEL_159;
      }
      goto LABEL_178;
    }
LABEL_159:
    v103 = **(_QWORD **)v94;
    v102 = *(_QWORD *)(*(_QWORD *)v94 + 8);
    v104 = 0x6DB6DB6DB6DB6DB7 * ((v102 - v103) >> 5);
    v105 = **(_QWORD **)v95;
    if (v104 != 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*(_QWORD *)v95 + 8) - v105) >> 5))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"topChoicePackage.size() == topChoiceLastSentCommandCandidate.size()", 67);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
    }
    if (v102 != v103)
    {
      if (v104 <= 1)
        v106 = 1;
      else
        v106 = 0x6DB6DB6DB6DB6DB7 * ((v102 - v103) >> 5);
      v107 = (_DWORD *)(v103 + 36);
      v108 = (_DWORD *)(v105 + 36);
      do
      {
        *v107 = *v108;
        *((_QWORD *)v107 - 1) = *((_QWORD *)v108 - 1);
        v107 += 56;
        v108 += 56;
        --v106;
      }
      while (v106);
    }
    if (!*(_BYTE *)(v95 + 368))
      std::__throw_bad_optional_access[abi:ne180100]();
    quasar::getTopChoice((__int128 ***)(v95 + 232), (uint64_t *)&v158);
    v109 = *(_QWORD *)(v94 + 88);
    v110 = (*(_QWORD *)(v94 + 96) - v109) >> 2;
    v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v158 + 1) - v158) >> 3);
    if (v110 > v111 && v110 > (int)v111)
    {
      v112 = 0;
      v113 = (int)v111;
      v115 = *(_QWORD *)(v94 + 112);
      v114 = *(_QWORD *)(v94 + 120);
      v116 = v94 + 112;
      v117 = (v114 - v115) >> 2;
      v118 = *(_QWORD *)(v116 + 24);
      v119 = (*(_QWORD *)(v116 + 32) - v118) >> 2;
      v120 = v110 - v113;
      v121 = v118 + 4 * v113;
      v122 = v119 >= v113;
      v123 = v119 - v113;
      if (!v122)
        v123 = 0;
      v124 = v115 + 4 * v113;
      v122 = v117 >= v113;
      v125 = v117 - v113;
      if (!v122)
        v125 = 0;
      v126 = v109 + 4 * v113;
      do
      {
        *(_DWORD *)(v126 + 4 * v112) = -1;
        if (v125 == v112 || (*(_DWORD *)(v124 + 4 * v112) = -1, v123 == v112))
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        *(_DWORD *)(v121 + 4 * v112++) = 0;
      }
      while (v120 != v112);
    }
    v178 = (void **)&v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v178);
    goto LABEL_178;
  }
LABEL_184:
  if (v148)
  {
    v149 = (char *)v148;
    operator delete(v148);
  }
  *(_QWORD *)&v158 = &v145;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  if (__p)
  {
    v155 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)&v158 = &v151;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
LABEL_189:
  if (quasar::gLogLevel >= 5)
  {
    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    v169 = 0u;
    v170 = 0u;
    v167 = 0u;
    v168 = 0u;
    v165 = 0u;
    v166 = 0u;
    v163 = 0u;
    v164 = 0u;
    v161 = 0u;
    v162 = 0u;
    v159 = 0u;
    v160 = 0u;
    v158 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
    v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"(now=", 5);
    v128 = (_QWORD *)std::ostream::operator<<();
    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)") handleFinal: debugInfo", 24);
    quasar::result_handler::operator<<(v129);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
  }
  v130 = *(_QWORD *)(a1 + 152);
  v131 = v157;
  v132 = *a3;
  *a3 = 0;
  v143 = (quasar::result_handler::Package *)v132;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v130 + 48))(v130, v131, &v143);
  v133 = v143;
  v143 = 0;
  if (v133)
  {
    quasar::result_handler::Package::~Package(v133);
    MEMORY[0x1AF44D190]();
  }
  *(_BYTE *)(a1 + 288) = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 296), 0);
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 400), 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 408), 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 416), 0);
  if (*(char *)(a1 + 447) < 0)
  {
    **(_BYTE **)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 424) = 0;
    *(_BYTE *)(a1 + 447) = 0;
  }
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::clear(a1 + 464);
  v134 = *(_QWORD *)(a1 + 520);
  v135 = *(_QWORD *)(a1 + 512);
  v136 = *(_QWORD *)(a1 + 568);
  v137 = *(_QWORD *)(a1 + 560);
  v138.i64[0] = v134;
  v138.i64[1] = v136;
  v139.i64[0] = v135;
  v139.i64[1] = v137;
  v140 = (int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(v138, v139), 3uLL);
  v140.i64[0] = (-1431655765 * v140.i32[0]);
  v140.i64[1] = (-1431655765 * v140.i32[2]);
  *(_BYTE *)(a1 + 508) = 0;
  *(int32x2_t *)(a1 + 608) = vadd_s32(*(int32x2_t *)(a1 + 608), vmovn_s64(v140));
  if (v134 != v135)
  {
    do
    {
      v134 -= 24;
      *(_QWORD *)&v158 = v134;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    }
    while (v134 != v135);
    v136 = *(_QWORD *)(a1 + 568);
    v137 = *(_QWORD *)(a1 + 560);
  }
  *(_QWORD *)(a1 + 520) = v135;
  while (v136 != v137)
  {
    v136 -= 24;
    *(_QWORD *)&v158 = v136;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  }
  *(_QWORD *)(a1 + 568) = v137;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 584);
  *(_QWORD *)&v161 = 0;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__vdeallocate((void ***)(a1 + 624));
  *(_QWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)&v159 = 0;
  v158 = 0uLL;
  v141 = (_QWORD *)(a1 + 648);
  v142 = *(void **)(a1 + 648);
  if (v142)
  {
    *(_QWORD *)(a1 + 656) = v142;
    operator delete(v142);
    *v141 = 0;
    *(_QWORD *)(a1 + 656) = 0;
    *(_QWORD *)(a1 + 664) = 0;
  }
  *v141 = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  v160 = 0uLL;
  *((_QWORD *)&v159 + 1) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  v151 = (void **)&v158;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100](&v151);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v180);
}

void quasar::result_handler::toksToNormString(char **a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  char *v4;
  std::string *v5;
  uint64_t v6;
  std::string::size_type size;
  std::string::size_type v8;
  char v9;
  const void **p_data;
  std::string *p_p;
  __int128 v12;
  uint64_t v13;
  uint64_t v14[2];
  std::string __p;
  std::string *v16;
  std::string *v17;
  unint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      quasar::getNormString(v3, &__p);
      v5 = v17;
      if (v16 == v17)
        goto LABEL_18;
      v6 = HIBYTE(v17[-1].__r_.__value_.__r.__words[2]);
      if ((v6 & 0x80u) == 0)
        size = HIBYTE(v17[-1].__r_.__value_.__r.__words[2]);
      else
        size = v17[-1].__r_.__value_.__l.__size_;
      v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v8 = __p.__r_.__value_.__l.__size_;
      if (size != v8)
        goto LABEL_18;
      p_data = (const void **)&v17[-1].__r_.__value_.__l.__data_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*p_data, p_p, v17[-1].__r_.__value_.__l.__size_))
          goto LABEL_18;
      }
      else if (*((_BYTE *)&v17[-1].__r_.__value_.__s + 23))
      {
        while (*(unsigned __int8 *)p_data == p_p->__r_.__value_.__s.__data_[0])
        {
          p_data = (const void **)((char *)p_data + 1);
          p_p = (std::string *)((char *)p_p + 1);
          if (!--v6)
            goto LABEL_25;
        }
LABEL_18:
        if ((unint64_t)v5 >= v18)
        {
          v13 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v16, (__int128 *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v5->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v12;
          }
          v13 = (uint64_t)&v5[1];
        }
        v17 = (std::string *)v13;
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
LABEL_25:
      if (v9 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v3 += 224;
    }
    while (v3 != v4);
  }
  v14[0] = (uint64_t)" ";
  v14[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v16, v14);
  quasar::copyAndTrim((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADDFD678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18)
{
  if (a16 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::handlePause(quasar::result_handler::VoiceEditingResultHandler *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 56))(*((_QWORD *)this + 19));
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::handleResume(quasar::result_handler::VoiceEditingResultHandler *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 64))(*((_QWORD *)this + 19));
}

_QWORD *quasar::result_handler::VoiceEditingResultHandler::setParser(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _OWORD v6[17];

  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Setting parser, parser=", 23);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), a2);
}

void sub_1ADDFD79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::topChoiceSilStartMs(uint64_t a1)
{
  unsigned int **v1;
  unsigned int *v2;

  v1 = *(unsigned int ***)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    v2 = v1[1];
    if (*v1 != v2)
    {
      while (v2 != *v1)
      {
        v2 -= 56;
        if (!quasar::Token::isAutoPunctuation((quasar::Token *)v2))
          return v2[9];
      }
    }
  }
  return 0;
}

void quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForWriting(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v7 = a1 + 16;
    v8 = (uint64_t *)(a1 + 192);
    do
    {
      if (quasar::gLogLevel >= 5)
      {
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"filter2 ", 8);
        quasar::result_handler::operator<<(v10, v3);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
      }
      v11 = *(_QWORD *)(v3 + 152);
      v12 = *(_QWORD *)(v3 + 160);
      v13 = v11;
      if (v11 == v12)
      {
LABEL_10:
        if (quasar::gLogLevel >= 5)
        {
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"filter2 reject1", 15);
LABEL_25:
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
        }
      }
      else
      {
        while (*(int *)(v13 + 76) <= 0)
        {
          v13 += 168;
          if (v13 == v12)
          {
            while (!*(_BYTE *)(v11 + 81))
            {
              v11 += 168;
              if (v11 == v12)
                goto LABEL_10;
            }
            break;
          }
        }
        if ((quasar::result_handler::hasInterpretationWithEmptyOrShortEnoughArguments(v3, v7, v8) & 1) != 0)
        {
          v15 = *(_QWORD *)(a1 + 160);
          if (!v15 || (quasar::result_handler::hasInterpretationWithMaybeMatchingTarget(v3, v15, v7) & 1) != 0)
          {
            if (quasar::gLogLevel >= 5)
            {
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              v32 = 0u;
              v33 = 0u;
              v30 = 0u;
              v31 = 0u;
              v28 = 0u;
              v29 = 0u;
              v26 = 0u;
              v27 = 0u;
              v24 = 0u;
              v25 = 0u;
              v22 = 0u;
              v23 = 0u;
              v21 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
              v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"filter2 pass", 12);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
            }
            v17 = a3[1];
            if (v17 >= a3[2])
            {
              v18 = std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData const&>(a3, v3);
            }
            else
            {
              quasar::result_handler::CommandData::CommandData(a3[1], v3);
              v18 = v17 + 184;
              a3[1] = v17 + 184;
            }
            a3[1] = v18;
            goto LABEL_26;
          }
          if (quasar::gLogLevel >= 5)
          {
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            v22 = 0u;
            v23 = 0u;
            v21 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"filter2 reject3", 15);
            goto LABEL_25;
          }
        }
        else if (quasar::gLogLevel >= 5)
        {
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"filter2 reject2", 15);
          goto LABEL_25;
        }
      }
LABEL_26:
      v3 += 184;
    }
    while (v3 != v4);
  }
}

void sub_1ADDFDB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::hasInterpretationWithEmptyOrShortEnoughArguments(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  __int32 *v11;
  int v12;
  unint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v23;
  uint64_t v24[2];
  std::string v25;
  void *__p[2];
  _BYTE v27[25];
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;

  v3 = *(uint64_t **)(a1 + 152);
  v23 = *(uint64_t **)(a1 + 160);
  if (v3 != v23)
  {
    while (1)
    {
      v24[0] = (uint64_t)" ";
      v24[1] = 1;
      quasar::join<std::vector<std::string>>(v3 + 11, v24);
      if (v27[7] >= 0)
        v5 = (char *)__p;
      else
        v5 = (char *)__p[0];
      if (v27[7] >= 0)
        v6 = v27[7];
      else
        v6 = (uint64_t)__p[1];
      quasar::utf8::convertToLowerCaseOrEmpty(v5, v6, &v25);
      if ((v27[7] & 0x80000000) != 0)
        operator delete(__p[0]);
      v7 = *a3;
      v8 = a3[1];
      if (*a3 != v8)
      {
        LOBYTE(v9) = 0;
        do
        {
          size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = (__int32 *)&v25;
          else
            v11 = (__int32 *)v25.__r_.__value_.__r.__words[0];
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v25.__r_.__value_.__l.__size_;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_OWORD *)__p = 0u;
          memset(v27, 0, sizeof(v27));
          v12 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v11, (__int32 *)((char *)v11 + size), (uint64_t)__p, v7, 0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v12)
          {
            v13 = *(int *)(v7 + 64);
            if (0xAAAAAAAAAAAAAAABLL * ((v3[15] - v3[14]) >> 3) <= v13)
            {
              v9 = 1;
              if (0xAAAAAAAAAAAAAAABLL * ((v3[18] - v3[17]) >> 3) <= v13)
                goto LABEL_35;
            }
            else
            {
              LOBYTE(v9) = 1;
            }
          }
          v7 += 72;
        }
        while (v7 != v8);
        if ((v9 & 1) != 0)
          goto LABEL_34;
      }
      v14 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = v25.__r_.__value_.__l.__size_;
      if (v14)
      {
        v15 = v3[14];
        v16 = v3[15];
      }
      else
      {
        v15 = v3[14];
        v19 = v3[15];
        if (v15 != v19)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v15) >> 3);
          v18 = *(int *)(a2 + 68);
          goto LABEL_32;
        }
        v16 = v3[14];
      }
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
      v18 = *(int *)(a2 + 64);
LABEL_32:
      if (v17 <= v18 && 0xAAAAAAAAAAAAAAABLL * ((v3[18] - v3[17]) >> 3) <= v18)
      {
        v9 = 1;
        goto LABEL_35;
      }
LABEL_34:
      v9 = 0;
LABEL_35:
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v3 += 21;
      if (v3 == v23)
        v20 = 1;
      else
        v20 = v9;
      if ((v20 & 1) != 0)
        return v9;
    }
  }
  return 0;
}

void sub_1ADDFDDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::result_handler::hasInterpretationWithMaybeMatchingTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v14;
  _QWORD *v15;
  void *__p[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36[2];
  unsigned __int8 v37;

  if (!*(_BYTE *)(a3 + 60))
    return 1;
  v4 = *(_QWORD *)(a1 + 152);
  if (v4 == *(_QWORD *)(a1 + 160))
    return 0;
  if (!*(_BYTE *)(v4 + 160))
    return 1;
  v6 = (_QWORD *)(v4 + 112);
  quasar::corrective_reranking::detokenize(v36, v4 + 112);
  v7 = v37;
  if ((v37 & 0x80u) != 0)
    v7 = (unint64_t)v36[1];
  if (!v7)
  {
    if (quasar::gLogLevel >= 5)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"target matching 1", 17);
      goto LABEL_24;
    }
LABEL_25:
    v9 = 1;
    goto LABEL_26;
  }
  if (quasar::corrective_reranking::OverridesDictionary::slotOverrideStartsWith(*(_QWORD *)(a2 + 648), (uint64_t)v36))
  {
    if (quasar::gLogLevel >= 5)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"target matching 2", 17);
LABEL_24:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v19);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "en_US");
  v11 = a1 + 96;
  quasar::getRangesForSearchStringWithWordBoundariesValidation((uint64_t)v36, v11, (uint64_t)__p, (void **)&v19);
  v12 = v19;
  if ((_QWORD)v19)
  {
    *((_QWORD *)&v19 + 1) = v19;
    operator delete((void *)v12);
  }
  if (v18 < 0)
    operator delete(__p[0]);
  if ((_QWORD)v12 != *((_QWORD *)&v12 + 1))
  {
    if (quasar::gLogLevel >= 5)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"target matching 3", 17);
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(*(_QWORD *)(a2 + 624), v11, v6, (uint64_t *)&v19);
  v14 = v19;
  __p[0] = &v19;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((_QWORD)v14 != *((_QWORD *)&v14 + 1))
  {
    if (quasar::gLogLevel >= 5)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"target matching 4", 17);
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  v9 = 0;
LABEL_26:
  if ((char)v37 < 0)
    operator delete(v36[0]);
  return v9;
}

void sub_1ADDFE0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  _Unwind_Resume(exception_object);
}

void quasar::result_handler::VoiceEditingResultHandler::logDeadlines(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20[2];
  void *__p[2];
  unsigned __int8 v22;
  _OWORD v23[17];

  *(_QWORD *)&v23[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 464, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v23);
  v6 = a3[1] - *a3;
  v7 = (const void *)*((_QWORD *)v5 + 5);
  v8 = *((_QWORD *)v5 + 6);
  v9 = (char *)(v5 + 40);
  if (v6 != v8 - (_QWORD)v7 || memcmp((const void *)*a3, v7, v6))
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v23, 0, sizeof(v23));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(now=", 5);
      v11 = (_QWORD *)std::ostream::operator<<();
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") Deadlines for ", 16);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = a2;
      else
        v14 = *(_QWORD *)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      v20[0] = (uint64_t)" ";
      v20[1] = 1;
      quasar::join<std::vector<int>>(a3, v20);
      if ((v22 & 0x80u) == 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if ((v22 & 0x80u) == 0)
        v19 = v22;
      else
        v19 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if ((char)v22 < 0)
        operator delete(__p[0]);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v23);
    }
    if (v9 != (char *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, (char *)*a3, a3[1], (a3[1] - *a3) >> 2);
  }
}

void sub_1ADDFE308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a18);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate(uint64_t a1, const quasar::result_handler::Package **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const quasar::result_handler::Package *v13;
  quasar::result_handler::Package *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  int32x2_t v25;
  const quasar::Token *v26;
  uint64_t v27;
  const quasar::Token *v28;
  uint64_t v29;
  const quasar::Token *v30;
  const quasar::Token *v31;
  const quasar::Token *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  quasar::result_handler::Package *v39;
  quasar::result_handler::Package *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  const quasar::result_handler::Package **v47;
  quasar::result_handler::Package *v48;
  const quasar::Token *v49;
  const quasar::Token *v50;
  uint64_t v51;
  const quasar::Token *v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  __int128 *v56;
  int64_t v57;
  __int128 v58;
  _DWORD v59[8];
  void *v60[2];
  __int128 v61;
  __int128 v62;
  void *v63[2];
  __int128 v64;
  __int128 v65;
  void *v66[2];
  __int128 v67;
  void *v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void **v74[2];

  if (quasar::gLogLevel >= 5)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v68 = 0u;
    v69 = 0u;
    *(_OWORD *)v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)v60 = 0u;
    v61 = 0u;
    memset(v59, 0, sizeof(v59));
    v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(now=", 5);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") send commandCandidate: ", 25);
    quasar::getTopChoice((uint64_t)*a2 + 48, 1, &__p);
    if (v57 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v57 >= 0)
      v8 = HIBYTE(v57);
    else
      v8 = (uint64_t)v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v8);
    if (SHIBYTE(v57) < 0)
      operator delete(__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v58);
  }
  if (*((_BYTE *)*a2 + 368))
  {
    if (quasar::gLogLevel < 5)
      goto LABEL_17;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v68 = 0u;
    v69 = 0u;
    *(_OWORD *)v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)v60 = 0u;
    v61 = 0u;
    memset(v59, 0, sizeof(v59));
    v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(now=", 5);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") Sending eager for command execution", 37);
  }
  else
  {
    if (quasar::gLogLevel < 5)
      goto LABEL_17;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v68 = 0u;
    v69 = 0u;
    *(_OWORD *)v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)v60 = 0u;
    v61 = 0u;
    memset(v59, 0, sizeof(v59));
    v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(now=", 5);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") Sending eager for non-command utterance", 41);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v58);
LABEL_17:
  v13 = *a2;
  v14 = (quasar::result_handler::Package *)operator new();
  quasar::result_handler::Package::Package(v14, v13);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 416), v14);
  *(_DWORD *)(a1 + 448) = -1431655765 * ((*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3);
  v15 = (uint64_t)*a2;
  v16 = (uint64_t *)((char *)*a2 + 48);
  if (*((_BYTE *)*a2 + 368))
  {
    v17 = *(_QWORD *)(v15 + 48);
    v18 = *(_QWORD *)(v15 + 56);
    while (v18 != v17)
    {
      v18 -= 24;
      *(_QWORD *)&v58 = v18;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    }
    v19 = *(_QWORD *)(v15 + 208);
    *(_QWORD *)(v15 + 56) = v17;
    v20 = *(_QWORD *)(v15 + 184);
    v21 = *(_QWORD *)(v15 + 192);
    v22 = *(_QWORD *)(v15 + 216) - v19;
    if (v22)
      v23 = v21 - v20 == v22;
    else
      v23 = 1;
    if (!v23)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v58, "(package.maybeCompleteCommand->precedingUtterance.size() == package.maybeCompleteCommand->commandUtterance.size()) || package.maybeCompleteCommand->commandUtterance.empty()");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
    }
    v47 = a2;
    if (v21 != v20)
    {
      v24 = 0;
      v25 = vdup_n_s32(0xF4240u);
      do
      {
        __p = 0;
        v56 = 0;
        v57 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v52, *(_QWORD *)(v20 + 24 * v24), *(_QWORD *)(v20 + 24 * v24 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v20 + 24 * v24 + 8) - *(_QWORD *)(v20 + 24 * v24)) >> 5));
        v26 = v52;
        v27 = v53;
        if (v52 != (const quasar::Token *)v53)
        {
          v28 = v52;
          do
          {
            *((_DWORD *)v28 + 9) = *((_DWORD *)v28 + 8);
            *((_WORD *)v28 + 86) = 0;
            v28 = (const quasar::Token *)((char *)v28 + 224);
          }
          while (v28 != (const quasar::Token *)v27);
          *(_DWORD *)(v27 - 192) += 1000000;
        }
        std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>((uint64_t *)&__p, v56, v26, v27, 0x6DB6DB6DB6DB6DB7 * ((v27 - (uint64_t)v26) >> 5));
        v29 = *(_QWORD *)(v15 + 208);
        if (v29 != *(_QWORD *)(v15 + 216))
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v49, *(_QWORD *)(v29 + 24 * v24), *(_QWORD *)(v29 + 24 * v24 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v29 + 24 * v24 + 8) - *(_QWORD *)(v29 + 24 * v24)) >> 5));
          v31 = v49;
          v30 = v50;
          if (v49 != v50)
          {
            v32 = v49;
            do
            {
              *((_DWORD *)v32 + 9) = *((_DWORD *)v32 + 8);
              *((_WORD *)v32 + 86) = 0;
              v32 = (const quasar::Token *)((char *)v32 + 224);
            }
            while (v32 != v30);
            do
            {
              quasar::Token::Token((std::string *)&v58, v31);
              v59[5] += 1000000;
              *(int32x2_t *)&v59[3] = vadd_s32(*(int32x2_t *)&v59[3], v25);
              v33 = v56;
              if ((unint64_t)v56 >= v57)
              {
                v34 = (__int128 *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>((uint64_t *)&__p, (const quasar::Token *)&v58);
              }
              else
              {
                quasar::Token::Token((std::string *)v56, (const quasar::Token *)&v58);
                v34 = v33 + 14;
              }
              v56 = v34;
              if (SBYTE7(v69) < 0)
                operator delete(v68[0]);
              if (SBYTE7(v67) < 0)
                operator delete(v66[0]);
              v74[0] = (void **)&v64 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v74);
              if (SBYTE7(v64) < 0)
                operator delete(v63[0]);
              v74[0] = (void **)&v61 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v74);
              if (SBYTE7(v61) < 0)
                operator delete(v60[0]);
              if (SHIBYTE(v59[1]) < 0)
                operator delete((void *)v58);
              v31 = (const quasar::Token *)((char *)v31 + 224);
            }
            while (v31 != v30);
          }
          *(_QWORD *)&v58 = &v49;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        }
        v35 = *(_QWORD *)(v15 + 56);
        if (v35 >= *(_QWORD *)(v15 + 64))
        {
          v36 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token>&>(v16, (uint64_t *)&__p);
        }
        else
        {
          std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token>&>((uint64_t)v16, (uint64_t *)&__p);
          v36 = v35 + 24;
        }
        *(_QWORD *)(v15 + 56) = v36;
        *(_QWORD *)&v58 = &v52;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        *(_QWORD *)&v58 = &__p;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        ++v24;
        v20 = *(_QWORD *)(v15 + 184);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v15 + 192) - v20) >> 3) > v24);
    }
    quasar::result_handler::clean((uint64_t *)(v15 + 184));
    quasar::result_handler::clean((uint64_t *)(v15 + 208));
    a2 = v47;
  }
  else
  {
    v43 = *(uint64_t **)(v15 + 48);
    v44 = *(uint64_t **)(v15 + 56);
    while (v43 != v44)
    {
      v45 = *v43;
      v46 = v43[1];
      while (v45 != v46)
      {
        *(_DWORD *)(v45 + 36) = *(_DWORD *)(v45 + 32);
        *(_WORD *)(v45 + 172) = 0;
        v45 += 224;
      }
      v43 += 3;
    }
  }
  quasar::result_handler::clean(v16);
  std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v15, *(uint64_t **)(v15 + 48), *(uint64_t **)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
  std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v15 + 24, *(uint64_t **)(v15 + 48), *(uint64_t **)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
  v37 = *(_QWORD *)(a1 + 152);
  v38 = *(unsigned int *)(a1 + 8);
  v39 = *a2;
  *a2 = 0;
  v48 = v39;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v37 + 32))(v37, v38, &v48);
  v40 = v48;
  v48 = 0;
  if (v40)
  {
    quasar::result_handler::Package::~Package(v40);
    MEMORY[0x1AF44D190]();
  }
  *(_WORD *)(a1 + 508) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  if (quasar::gLogLevel >= 5)
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v68 = 0u;
    v69 = 0u;
    *(_OWORD *)v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)v60 = 0u;
    v61 = 0u;
    memset(v59, 0, sizeof(v59));
    v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"(now=", 5);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)") nonCommandCandidatePackageDeadline: 0", 39);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v58);
  }
}

quasar::result_handler::Package *std::make_unique[abi:ne180100]<quasar::result_handler::Package,quasar::result_handler::Package&>@<X0>(const quasar::result_handler::Package *a1@<X0>, quasar::result_handler::Package **a2@<X8>)
{
  quasar::result_handler::Package *v4;
  quasar::result_handler::Package *result;

  v4 = (quasar::result_handler::Package *)operator new();
  result = quasar::result_handler::Package::Package(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADDFEB1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40821F4C15);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::extract@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const quasar::Token *v20;
  unint64_t v22;
  std::string *v23;
  unint64_t v24;
  const quasar::Token *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  void *v31;
  uint64_t *v32;
  uint64_t *v34;
  void *v35[6];

  v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(uint64_t **)result;
  v32 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v32)
  {
    v31 = a3 + 2;
    do
    {
      v7 = (_QWORD *)v3[1];
      v6 = v3[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = *v3;
        v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *v3) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
        if (2 * v12 > v11)
          v11 = 2 * v12;
        if (v12 >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v11;
        v35[4] = v31;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v31, v13);
        else
          v14 = 0;
        v15 = &v14[24 * v10];
        v35[0] = v14;
        v35[1] = v15;
        v35[3] = &v14[24 * v13];
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        v35[2] = v15 + 24;
        v3 = a3;
        std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a3, v35);
        v8 = (_QWORD *)a3[1];
        result = (uint64_t)std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v35);
      }
      else
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v8 = v7 + 3;
        v3[1] = (uint64_t)(v7 + 3);
      }
      v3[1] = (uint64_t)v8;
      v17 = *v4;
      v16 = v4[1];
      if (v16 != *v4)
      {
        v18 = 0;
        v19 = 0;
        v34 = v8 - 3;
        do
        {
          v20 = (const quasar::Token *)(v17 + 224 * v18);
          if (*((_DWORD *)v20 + 7) <= a2 && *((_DWORD *)v20 + 9) >= -1)
          {
            v22 = *(v8 - 2);
            if (v22 >= *(v8 - 1))
            {
              result = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(v34, v20);
              v23 = (std::string *)result;
            }
            else
            {
              result = (uint64_t)quasar::Token::Token((std::string *)*(v8 - 2), v20);
              v23 = (std::string *)(v22 + 224);
              *(v8 - 2) = v23;
            }
            *(v8 - 2) = v23;
            v24 = v19 + 1;
            v17 = *v4;
            v16 = v4[1];
            if (0x6DB6DB6DB6DB6DB7 * ((v16 - *v4) >> 5) > v24
              && *(_DWORD *)(v17 + 224 * v24 + 32) == *(_DWORD *)(v17 + 224 * v19 + 32))
            {
              v25 = (const quasar::Token *)(v17 + 224 * v24);
              v26 = v24 << 32;
              v27 = 224 * v24 + 256;
              v28 = v19 + 2;
              do
              {
                if ((unint64_t)v23 >= *(v8 - 1))
                {
                  result = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(v34, v25);
                  v23 = (std::string *)result;
                }
                else
                {
                  result = (uint64_t)quasar::Token::Token(v23, v25);
                  v23 = (std::string *)((char *)v23 + 224);
                  *(v8 - 2) = v23;
                }
                v19 = v24;
                *(v8 - 2) = v23;
                v17 = *v4;
                v16 = v4[1];
                if (0x6DB6DB6DB6DB6DB7 * ((v16 - *v4) >> 5) <= v28)
                  break;
                ++v24;
                v25 = (const quasar::Token *)(v17 + 224 * v24);
                v29 = *(_DWORD *)(v17 + v27);
                v30 = *(_DWORD *)(v17 + 224 * SHIDWORD(v26) + 32);
                v26 += 0x100000000;
                v27 += 224;
                ++v28;
              }
              while (v29 == v30);
            }
          }
          v18 = ++v19;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((v16 - v17) >> 5) > (unint64_t)v19);
      }
      v4 += 3;
      v3 = a3;
    }
    while (v4 != v32);
  }
  return result;
}

void sub_1ADDFEE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::repairAutoPunc(quasar::PartialHistory *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  quasar::Token *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type size;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;
  std::string v23;
  int v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v2 = *a2;
  if (*a2 == a2[1] || (v3 = *(_QWORD *)(v2 + 8), *(_QWORD *)v2 == v3))
  {
    if (quasar::gLogLevel >= 5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"repairAutoPunc: input is empty", 30);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    return 0;
  }
  if (quasar::Token::isAutoPunctuation((quasar::Token *)(v3 - 224)))
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = (_BYTE *)(v5 - 224);
    v7 = *(char *)(v5 - 201);
    if ((v7 & 0x80000000) == 0)
    {
      if (v7 != 1)
        goto LABEL_16;
LABEL_12:
      if (*v6 == 44)
      {
        if (quasar::gLogLevel >= 5)
        {
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v32 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"repairAutoPunc: removed trailing AutoPunc comma", 47);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
          v5 = *(_QWORD *)(v2 + 8);
        }
        quasar::Token::~Token((void **)(v5 - 224));
        *(_QWORD *)(v2 + 8) = v11;
      }
      goto LABEL_16;
    }
    if (*(_QWORD *)(v5 - 216) == 1)
    {
      v6 = *(_BYTE **)v6;
      goto LABEL_12;
    }
  }
LABEL_16:
  quasar::PartialHistory::annotatePartial((uint64_t)a1, (__int128 **)v2, v31);
  v12 = (quasar::Token *)v31[1];
  do
  {
    if (v12 == (quasar::Token *)v31[0])
      goto LABEL_33;
    v12 = (quasar::Token *)((char *)v12 - 232);
  }
  while (quasar::Token::isAutoPunctuation(v12));
  v13 = *((_DWORD *)v12 + 57);
  if (v13 < 0)
  {
LABEL_33:
    if (quasar::gLogLevel >= 5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"repairAutoPunc: input lacks non-AutoPunc token", 46);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    goto LABEL_35;
  }
  quasar::PartialHistory::findLastMatchingPartial(a1, v13, (uint64_t)&v28);
  if (!v30)
  {
    if (quasar::gLogLevel >= 5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"repairAutoPunc: cannot find matching previous result", 52);
      goto LABEL_42;
    }
LABEL_35:
    v9 = 0;
    goto LABEL_36;
  }
  if (v28 == v29)
  {
    if (quasar::gLogLevel < 5)
    {
LABEL_43:
      v9 = 0;
      goto LABEL_44;
    }
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"repairAutoPunc: matching previous result is empty", 49);
LABEL_42:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    goto LABEL_43;
  }
  if (!quasar::Token::isAutoPunctuation((quasar::Token *)(v29 - 232))
    || quasar::Token::isAutoPunctuation((quasar::Token *)(*(_QWORD *)(v2 + 8) - 224)))
  {
    goto LABEL_43;
  }
  v14 = *(_QWORD *)(v2 + 8);
  quasar::Token::Token(&v23, (const quasar::Token *)(v29 - 232));
  v25 = *(_DWORD *)(v14 - 192);
  v26 = v25;
  v24 = v25;
  v27 = *(_BYTE *)(v14 - 180);
  *(_BYTE *)(v14 - 180) = 0;
  std::vector<quasar::Token>::emplace_back<quasar::Token&>((uint64_t *)v2, (const quasar::Token *)&v23);
  if (quasar::gLogLevel >= 5)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"repairAutoPunc: added trailing AutoPunc: ", 41);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v23;
    else
      v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  quasar::Token::~Token((void **)&v23.__r_.__value_.__l.__data_);
  v9 = 1;
LABEL_44:
  if (v30)
  {
    *(_QWORD *)&v32 = &v28;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
LABEL_36:
  *(_QWORD *)&v32 = v31;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  return v9;
}

void sub_1ADDFF2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,__int16 *a48)
{
  quasar::Token::~Token((void **)&a9);
  if (a41)
  {
    a48 = (__int16 *)&a37;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  }
  a48 = &a43;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::sendPartial(uint64_t a1, uint64_t ***a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  const quasar::result_handler::Package *v17;
  quasar::result_handler::Package *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  quasar::result_handler::Package *v47;
  uint64_t v48;
  quasar::result_handler::Package *v49;
  void *__p[2];
  unsigned __int8 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v4 = *(_QWORD *)(a1 + 408);
  if (v4)
  {
    quasar::getTopChoice(v4 + 48, 1, &v52);
  }
  else
  {
    v52 = 0uLL;
    *(_QWORD *)&v53 = 0;
  }
  v5 = *a2;
  v72 = v52;
  *(_QWORD *)&v73 = v53;
  quasar::getTopChoice((uint64_t)(v5 + 6), 1, &v52);
  if (SBYTE7(v70) < 0)
    operator delete((void *)v69);
  *(_QWORD *)&v70 = v53;
  v69 = v52;
  v6 = BYTE7(v73);
  if ((SBYTE7(v73) & 0x80u) == 0)
    v7 = BYTE7(v73);
  else
    v7 = *((_QWORD *)&v72 + 1);
  v8 = BYTE7(v70);
  if (SBYTE7(v70) < 0)
    v8 = *((_QWORD *)&v69 + 1);
  if (v7 != v8)
    goto LABEL_38;
  if ((SBYTE7(v70) & 0x80u) == 0)
    v9 = (unsigned __int8 *)&v69;
  else
    v9 = (unsigned __int8 *)v69;
  if ((BYTE7(v73) & 0x80) != 0)
  {
    if (memcmp((const void *)v72, v9, *((size_t *)&v72 + 1)))
      goto LABEL_38;
  }
  else if (BYTE7(v73))
  {
    v10 = (unsigned __int8 *)&v72;
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v6)
        goto LABEL_22;
    }
    goto LABEL_38;
  }
LABEL_22:
  v11 = HIBYTE(v74);
  if (v74 >= 0)
    v12 = HIBYTE(v74);
  else
    v12 = v74;
  v13 = HIBYTE(v71);
  v14 = HIBYTE(v71);
  if (v71 < 0)
    v13 = v71;
  if (v12 == v13)
  {
    if (v71 >= 0)
      v15 = (unsigned __int8 *)&v70 + 8;
    else
      v15 = (unsigned __int8 *)*((_QWORD *)&v70 + 1);
    if ((HIBYTE(v74) & 0x80) != 0)
    {
      if (!memcmp(*((const void **)&v73 + 1), v15, v74))
        goto LABEL_76;
    }
    else
    {
      if (!HIBYTE(v74))
        goto LABEL_76;
      v16 = (unsigned __int8 *)&v73 + 8;
      while (*v16 == *v15)
      {
        ++v16;
        ++v15;
        if (!--v11)
          goto LABEL_76;
      }
    }
  }
LABEL_38:
  v17 = (const quasar::result_handler::Package *)*a2;
  v18 = (quasar::result_handler::Package *)operator new();
  quasar::result_handler::Package::Package(v18, v17);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 408), v18);
  v19 = **a2;
  v20 = (uint64_t *)(a1 + 560);
  if ((*a2)[1] == v19)
  {
    v52 = 0uLL;
    *(_QWORD *)&v53 = 0;
    std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](v20, (uint64_t)&v52);
    __p[0] = &v52;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 568);
    if (v21 >= *(_QWORD *)(a1 + 576))
    {
      v22 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v20, v19);
    }
    else
    {
      std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v20, v19);
      v22 = v21 + 24;
    }
    *(_QWORD *)(a1 + 568) = v22;
  }
  v23 = *(char **)(a1 + 592);
  v24 = *(_QWORD *)(a1 + 600);
  if ((unint64_t)v23 >= v24)
  {
    v26 = *(char **)(a1 + 584);
    v27 = (v23 - v26) >> 2;
    if ((unint64_t)(v27 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v28 = v24 - (_QWORD)v26;
    v29 = (uint64_t)(v24 - (_QWORD)v26) >> 1;
    if (v29 <= v27 + 1)
      v29 = v27 + 1;
    if (v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 600, v30);
      v23 = *(char **)(a1 + 592);
      v26 = *(char **)(a1 + 584);
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[4 * v27];
    v33 = &v31[4 * v30];
    *(_DWORD *)v32 = *(_DWORD *)(a1 + 8);
    v25 = v32 + 4;
    while (v23 != v26)
    {
      v34 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v32 - 1) = v34;
      v32 -= 4;
    }
    *(_QWORD *)(a1 + 584) = v32;
    *(_QWORD *)(a1 + 592) = v25;
    *(_QWORD *)(a1 + 600) = v33;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_DWORD *)v23 = *(_DWORD *)(a1 + 8);
    v25 = v23 + 4;
  }
  *(_QWORD *)(a1 + 592) = v25;
  v35 = (*a2)[6];
  v36 = (*a2)[7];
  *(_QWORD *)&v53 = 0;
  v52 = 0uLL;
  if (v35 != v36)
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v52, *v35, v35[1], 0x6DB6DB6DB6DB6DB7 * ((v35[1] - *v35) >> 5));
  quasar::PartialHistory::addPartial((uint64_t *)(a1 + 624), (__int128 **)&v52, *(_DWORD *)(a1 + 8));
  __p[0] = &v52;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 8);
  if (quasar::gLogLevel >= 5)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(now=", 5);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") nonCommandCandidatePackageDeadline: ", 38);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v52);
    if (quasar::gLogLevel >= 5)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(now=", 5);
      v40 = (_QWORD *)std::ostream::operator<<();
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") send partial: ", 16);
      quasar::getTopChoice((uint64_t)(*a2 + 6), 1, __p);
      if ((v51 & 0x80u) == 0)
        v42 = __p;
      else
        v42 = (void **)__p[0];
      if ((v51 & 0x80u) == 0)
        v43 = v51;
      else
        v43 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      if ((char)v51 < 0)
        operator delete(__p[0]);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v52);
    }
  }
  v44 = *(_QWORD *)(a1 + 152);
  v45 = *(unsigned int *)(a1 + 8);
  v46 = *a2;
  *a2 = 0;
  v49 = (quasar::result_handler::Package *)v46;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(_QWORD *)v44 + 24))(v44, v45, &v49);
  v47 = v49;
  v49 = 0;
  if (v47)
  {
    quasar::result_handler::Package::~Package(v47);
    MEMORY[0x1AF44D190](v48);
  }
  *(_BYTE *)(a1 + 508) = 0;
  v14 = HIBYTE(v71);
LABEL_76:
  if (v14 < 0)
    operator delete(*((void **)&v70 + 1));
  if (SBYTE7(v70) < 0)
    operator delete((void *)v69);
  if (SHIBYTE(v74) < 0)
    operator delete(*((void **)&v73 + 1));
  if (SBYTE7(v73) < 0)
    operator delete((void *)v72);
}

void sub_1ADDFF8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  std::pair<std::string,std::string>::~pair(v16 - 144);
  std::pair<std::string,std::string>::~pair(v16 - 96);
  _Unwind_Resume(a1);
}

void quasar::PartialHistory::addPartial(uint64_t *a1, __int128 **a2, int a3)
{
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17[3];
  void **v18;

  quasar::PartialHistory::annotatePartial((uint64_t)a1, a2, v17);
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::emplace_back<std::vector<quasar::PartialHistory::AnnotatedToken>>(a1, (uint64_t)v17);
  v18 = (void **)v17;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v18);
  v5 = a1[5];
  v6 = (char *)a1[4];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)a1[3];
    v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 5), v12);
      v8 = (char *)a1[3];
      v6 = (char *)a1[4];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = a3;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    a1[3] = (uint64_t)v14;
    a1[4] = (uint64_t)v7;
    a1[5] = (uint64_t)v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = a3;
    v7 = v6 + 4;
  }
  a1[4] = (uint64_t)v7;
}

void sub_1ADDFFAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1ADDFFB1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1ADDFFD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADDFFE3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::Token::~Token(v4 - 29);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void quasar::result_handler::CommandInterpretation::~CommandInterpretation(void **this)
{
  void **v2;

  v2 = this + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::__optional_destruct_base<std::basic_regex<char,std::regex_traits<char>>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
    std::locale::~locale((std::locale *)a1);
  }
  return a1;
}

void quasar::ScopeGuard::~ScopeGuard(quasar::ScopeGuard *this)
{
  uint64_t v2;
  quasar::ScopeGuard *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v3 = (quasar::ScopeGuard *)*((_QWORD *)this + 3);
    if (v3 == this)
    {
      v4 = 4;
      v3 = this;
    }
    else
    {
      if (!v3)
        return;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
}

uint64_t *quasar::result_handler::clean(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t *result;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  __int16 v11;
  void **v12;

  v2 = *a1;
  v3 = (void **)a1[1];
  if ((void **)*a1 != v3)
  {
    if (*(_QWORD *)v2 == *(_QWORD *)(v2 + 8))
    {
      do
      {
        v3 -= 3;
        v12 = v3;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v12);
      }
      while (v3 != (void **)v2);
      a1[1] = v2;
    }
    else
    {
      while (*(_QWORD *)v2 != *(_QWORD *)(v2 + 8))
      {
        v2 += 24;
        if ((void **)v2 == v3)
        {
          v2 = a1[1];
          goto LABEL_14;
        }
      }
      if ((void **)v2 != v3)
      {
        v4 = v2 + 24;
        if ((void **)(v2 + 24) != v3)
        {
          do
          {
            if (*(_QWORD *)v4 != *(_QWORD *)(v4 + 8))
            {
              std::vector<quasar::Token>::__vdeallocate((void **)v2);
              *(_OWORD *)v2 = *(_OWORD *)v4;
              *(_QWORD *)(v2 + 16) = *(_QWORD *)(v4 + 16);
              *(_QWORD *)v4 = 0;
              *(_QWORD *)(v4 + 8) = 0;
              *(_QWORD *)(v4 + 16) = 0;
              v2 += 24;
            }
            v4 += 24;
          }
          while ((void **)v4 != v3);
          v3 = (void **)a1[1];
        }
      }
LABEL_14:
      std::vector<std::vector<quasar::Token>>::erase((uint64_t)a1, v2, (uint64_t)v3);
    }
  }
  v11 = 0;
  result = quasar::Align::MakeMonotonic(a1, (_BYTE *)&v11 + 1, &v11);
  v6 = (_QWORD *)*a1;
  v7 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v7)
  {
    do
    {
      v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[1] - *v6) >> 5);
      if (v8 >= 2)
      {
        v9 = v8 - 1;
        v10 = (_DWORD *)(*v6 + 252);
        do
        {
          if (*(v10 - 55) != *v10)
            *(v10 - 55) = *v10;
          v10 += 56;
          --v9;
        }
        while (v9);
      }
      v6 += 3;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t std::vector<std::vector<quasar::Token>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void **v7;
  char v9;
  void **v10;

  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        v10 = v7;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void quasar::result_handler::clampTimestampsIfNeeded(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  _DWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  _OWORD v8[17];

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v3)
  {
    v4 = 0;
    do
    {
      v5 = (_DWORD *)*v2;
      v6 = (_DWORD *)v2[1];
      while (v5 != v6)
      {
        if (v5[7] > a2)
        {
          v5[7] = a2;
          v4 = 1;
        }
        if (v5[9] > a2)
        {
          v5[9] = a2;
          v4 = 1;
        }
        if (v5[8] > a2)
        {
          v5[8] = a2;
          v4 = 1;
        }
        v5 += 56;
      }
      v2 += 3;
    }
    while (v2 != v3);
    if ((v4 & (quasar::gLogLevel > 4)) != 0)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Token timestamp is too large and likely wrong. Clamping it.", 59);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v8);
    }
  }
}

void sub_1ADE003F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *quasar::result_handler::initSegmentation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, quasar::PartialHistory *a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int *v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  void *p_p;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t i;
  uint64_t j;
  quasar::Token *v43;
  std::string::size_type size;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  _BYTE *v48;
  __int128 *k;
  unint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  void *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  std::string v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__p;
  uint64_t v66;
  uint64_t v67;
  int SplitEnd;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75[2];
  __int128 v76;
  void *v77[2];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  int v82;
  std::string *v83;
  char v84;
  __int128 v85;
  _OWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  result = *(uint64_t **)a3;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    goto LABEL_64;
  v10 = *result;
  v11 = result[1];
  if (*result == v11)
    goto LABEL_64;
  v13 = *(uint64_t **)a4;
  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8) || *v13 == v13[1])
    goto LABEL_64;
  v17 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 5);
  if ((int)a5 >= 1)
  {
    v18 = a5;
    v19 = v17 > a5;
    a5 = v17 <= a5 ? a5 : v17;
    if (v19)
    {
      v20 = (int *)(v10 + 224 * v18 + 32);
      while (1)
      {
        v21 = *v20;
        v20 += 56;
        if (*(_DWORD *)(v10 + 224 * (v18 - 1) + 32) != v21)
          break;
        if (a5 == ++v18)
          goto LABEL_16;
      }
      LODWORD(a5) = v18;
    }
  }
LABEL_16:
  v82 = a5;
  if (v17 <= (int)a5)
  {
LABEL_64:
    *a7 = 0;
    a7[184] = 0;
  }
  else
  {
    v80 = 0;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    *(_OWORD *)v77 = 0u;
    v74 = 0u;
    *(_OWORD *)v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v81 = 1;
    v22 = *(_DWORD *)(v10 + 224 * (int)a5 + 28);
    quasar::result_handler::splitChoice(result, &v82, (uint64_t *)&v69, 0);
    if (*((_QWORD *)&v70 + 1) == (_QWORD)v71 || **((_QWORD **)&v70 + 1) == *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8))
    {
      *a7 = 0;
      a7[184] = 0;
    }
    else
    {
      v54 = a7;
      v55 = a2;
      SplitEnd = quasar::result_handler::findSplitEnd(v13, v22);
      if ((SplitEnd & 0x80000000) == 0)
        quasar::result_handler::splitChoice(v13, &SplitEnd, (uint64_t *)&v69, 1);
      v56 = a1;
      v23 = *(uint64_t **)a3;
      v24 = *(_QWORD *)(a3 + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((v24 - *(_QWORD *)a3) >> 3) >= 2)
      {
        v25 = 1;
        v26 = 3;
        do
        {
          LODWORD(v85) = 0;
          LODWORD(v85) = quasar::result_handler::findSplitEnd(&v23[v26], v22);
          if ((v85 & 0x80000000) == 0)
          {
            quasar::result_handler::splitChoice(&v23[v26], (int *)&v85, (uint64_t *)&v69, 0);
            v23 = *(uint64_t **)a3;
            v24 = *(_QWORD *)(a3 + 8);
          }
          ++v25;
          v26 += 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3) > v25);
      }
      v27 = *(uint64_t **)a4;
      v28 = *(_QWORD *)(a4 + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((v28 - *(_QWORD *)a4) >> 3) >= 2)
      {
        v29 = 1;
        v30 = 3;
        do
        {
          LODWORD(v85) = 0;
          LODWORD(v85) = quasar::result_handler::findSplitEnd(&v27[v30], v22);
          if ((v85 & 0x80000000) == 0)
          {
            quasar::result_handler::splitChoice(&v27[v30], (int *)&v85, (uint64_t *)&v69, 1);
            v27 = *(uint64_t **)a4;
            v28 = *(_QWORD *)(a4 + 8);
          }
          ++v29;
          v30 += 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3) > v29);
      }
      v31 = quasar::result_handler::repairAutoPunc(a6, (uint64_t *)&v69);
      if (quasar::gLogLevel > 4)
        v32 = v31;
      else
        v32 = 0;
      if (v32 == 1)
      {
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        memset(v86, 0, sizeof(v86));
        v85 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"VoiceEditingResultHandler: ", 27);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"repaired AutoPunc: precedingUtterance ", 38);
        quasar::getTopChoice((uint64_t)&v69, 1, &__p);
        if (v67 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v67 >= 0)
          v36 = HIBYTE(v67);
        else
          v36 = v66;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)p_p, v36);
        if (SHIBYTE(v67) < 0)
          operator delete(__p);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v85);
        if (quasar::gLogLevel >= 5)
        {
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          memset(v86, 0, sizeof(v86));
          v85 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"VoiceEditingResultHandler: ", 27);
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"repaired AutoPunc: commandUtterance ", 36);
          quasar::getTopChoice((uint64_t)&v70 + 8, 1, &__p);
          if (v67 >= 0)
            v39 = &__p;
          else
            v39 = __p;
          if (v67 >= 0)
            v40 = HIBYTE(v67);
          else
            v40 = v66;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
          if (SHIBYTE(v67) < 0)
            operator delete(__p);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v85);
        }
      }
      __p = 0;
      v66 = 0;
      v67 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      if (&__p != (void **)v69 && (_QWORD)v69 != *((_QWORD *)&v69 + 1))
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&__p, *(_QWORD *)v69, *(_QWORD *)(v69 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v69 + 8) - *(_QWORD *)v69) >> 5));
      if (&v62 != *((uint64_t **)&v70 + 1) && *((_QWORD *)&v70 + 1) != (_QWORD)v71)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v62, **((_QWORD **)&v70 + 1), *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*((_QWORD *)&v70 + 1) + 8) - **((_QWORD **)&v70 + 1)) >> 5));
      v59 = 0;
      v60 = 0;
      v61 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v59, (uint64_t)__p, v66, 0x6DB6DB6DB6DB6DB7 * ((v66 - (uint64_t)__p) >> 5));
      if (v59 != v60 && *(_BYTE *)(v60 - 180))
        *(_BYTE *)(v60 - 180) = 0;
      if (*(char *)(v56 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v85, *(const std::string::value_type **)v56, *(_QWORD *)(v56 + 8));
      }
      else
      {
        v85 = *(_OWORD *)v56;
        *(_QWORD *)&v86[0] = *(_QWORD *)(v56 + 16);
      }
      quasar::tokens2Str(&v59, (std::string *)((char *)v86 + 8));
      memset(&v57, 0, sizeof(v57));
      v83 = &v57;
      v84 = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
      v57.__r_.__value_.__r.__words[2] = v57.__r_.__value_.__r.__words[0] + 48;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57.__r_.__value_.__r.__words[2], &v85, &v87, (std::string *)v57.__r_.__value_.__l.__data_);
      quasar::joinAndAutoSpace(&v57, &v58);
      if (SBYTE7(v76) < 0)
        operator delete(v75[0]);
      *(_OWORD *)v75 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(_QWORD *)&v76 = *((_QWORD *)&v58.__r_.__value_.__l + 2);
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = 0;
      v58.__r_.__value_.__s.__data_[0] = 0;
      v83 = &v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      for (i = 0; i != -48; i -= 24)
      {
        if (*((char *)&v86[1] + i + 15) < 0)
          operator delete(*(void **)((char *)v86 + i + 8));
      }
      if ((BYTE7(v76) & 0x80) != 0)
      {
        DWORD2(v76) = v75[1];
        std::string::__init_copy_ctor_external((std::string *)&v85, (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
      }
      else
      {
        DWORD2(v76) = BYTE7(v76);
        v85 = *(_OWORD *)v75;
        *(_QWORD *)&v86[0] = v76;
      }
      if (*(char *)(v55 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v86 + 8), *(const std::string::value_type **)v55, *(_QWORD *)(v55 + 8));
      }
      else
      {
        *(_OWORD *)((char *)v86 + 8) = *(_OWORD *)v55;
        *((_QWORD *)&v86[1] + 1) = *(_QWORD *)(v55 + 16);
      }
      memset(&v57, 0, sizeof(v57));
      v83 = &v57;
      v84 = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
      v57.__r_.__value_.__r.__words[2] = v57.__r_.__value_.__r.__words[0] + 48;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57.__r_.__value_.__r.__words[2], &v85, &v87, (std::string *)v57.__r_.__value_.__l.__data_);
      quasar::joinAndAutoSpace(&v57, &v58);
      if (SBYTE7(v76) < 0)
        operator delete(v75[0]);
      *(_OWORD *)v75 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(_QWORD *)&v76 = *((_QWORD *)&v58.__r_.__value_.__l + 2);
      *((_BYTE *)&v58.__r_.__value_.__s + 23) = 0;
      v58.__r_.__value_.__s.__data_[0] = 0;
      v83 = &v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      for (j = 0; j != -48; j -= 24)
      {
        if (*((char *)&v86[1] + j + 15) < 0)
          operator delete(*(void **)((char *)v86 + j + 8));
      }
      memset(&v58, 0, sizeof(v58));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v58, v62, v63, 0x6DB6DB6DB6DB6DB7 * ((v63 - v62) >> 5));
      size = v58.__r_.__value_.__l.__size_;
      v43 = (quasar::Token *)v58.__r_.__value_.__r.__words[0];
      if (v58.__r_.__value_.__l.__size_ == v58.__r_.__value_.__r.__words[0])
      {
LABEL_106:
        v43 = (quasar::Token *)size;
      }
      else
      {
        v45 = 0;
        v46 = (int64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) / 224;
        if (v46 <= 1)
          v47 = 1;
        else
          v47 = (int64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) / 224;
        v48 = (_BYTE *)(v58.__r_.__value_.__r.__words[0] + 172);
        do
        {
          if (v45 && *v48)
            *((_BYTE *)v43 + 224 * (v45 - 1) + 44) = *(v48 - 128);
          if (v46 > ++v45 && v48[1])
            v48[97] = *(v48 - 127);
          v48 += 224;
        }
        while (v47 != v45);
        while (!quasar::Token::isAutoPunctuation(v43))
        {
          v43 = (quasar::Token *)((char *)v43 + 224);
          if (v43 == (quasar::Token *)size)
            goto LABEL_106;
        }
        if (v43 != (quasar::Token *)size)
        {
          for (k = (__int128 *)((char *)v43 + 224); k != (__int128 *)size; k += 14)
          {
            if (!quasar::Token::isAutoPunctuation((quasar::Token *)k))
            {
              quasar::Token::operator=((uint64_t)v43, k);
              v43 = (quasar::Token *)((char *)v43 + 224);
            }
          }
        }
      }
      std::vector<quasar::Token>::erase((uint64_t)&v58, (uint64_t)v43, (__int128 *)v58.__r_.__value_.__l.__size_);
      v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 5);
      if (v50 >= 2)
      {
        v51 = v50 - 1;
        v52 = (_DWORD *)(v58.__r_.__value_.__r.__words[0] + 252);
        do
        {
          *(v52 - 55) = *v52;
          v52 += 56;
          --v51;
        }
        while (v51);
      }
      quasar::tokens2Str((uint64_t *)&v58, (std::string *)&v85);
      if (SBYTE7(v78) < 0)
        operator delete(v77[0]);
      *(_OWORD *)v77 = v85;
      *(_QWORD *)&v78 = *(_QWORD *)&v86[0];
      BYTE7(v86[0]) = 0;
      LOBYTE(v85) = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      v53 = (void *)BYTE7(v78);
      if (SBYTE7(v78) < 0)
        v53 = v77[1];
      *v54 = 0;
      v54[184] = 0;
      if (v53 && v81)
      {
        std::__construct_at[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData,quasar::result_handler::CommandData*>((uint64_t)v54, (uint64_t)&v69);
        v54[184] = 1;
      }
      *(_QWORD *)&v85 = &v59;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      *(_QWORD *)&v85 = &v62;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      *(_QWORD *)&v85 = &__p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    }
    return (uint64_t *)std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v69);
  }
  return result;
}

void sub_1ADE00D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (a30 < 0)
    operator delete(__p);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a60);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v4;
  uint64_t v6;

  v6 = 0;
  v4 = kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get(a1, a2, &v6);
  if (v4 && v6 != a3)
    std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(a3, *(std::string **)v6, *(quasar::result_handler::CommandInterpretation **)(v6 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
  return v4;
}

void quasar::result_handler::parseToInterpretation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *Intent;
  uint64_t v7;
  void **v8;
  int v9;
  int v10;
  quasar::corrective_reranking::Parse *v12;
  _QWORD *CommandsWithMetaTarget;
  void **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *CommandTokens;
  char *v31;
  __int128 *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  char *v40;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void *v47;
  char *v48;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  BOOL v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70[2];
  void *v71[2];
  __int128 v72;
  void *__p[2];
  __int128 v74;
  _OWORD v75[12];
  std::string v76;
  void **v77;
  uint64_t v78;
  char v79;

  v5 = a3;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 3212836864;
  *(_OWORD *)(a3 + 88) = 0u;
  v68 = (uint64_t *)(a3 + 88);
  *(_WORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 164) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 145) = 0u;
  Intent = (char *)quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)a1, (uint64_t)&v77);
  LOBYTE(v7) = v79;
  if (v79 < 0)
  {
    if (v78 != 7)
      goto LABEL_13;
    v8 = v77;
  }
  else
  {
    if (v79 != 7)
    {
LABEL_11:
      v7 = v7;
      goto LABEL_14;
    }
    v8 = (void **)&v77;
  }
  v9 = *(_DWORD *)v8;
  v10 = *(_DWORD *)((char *)v8 + 3);
  if (v9 == 1952672100 && v10 == 1702125940)
  {
    Intent = (char *)MEMORY[0x1AF44C914](&v77, "");
    LOBYTE(v7) = v79;
    if ((v79 & 0x80) == 0)
      goto LABEL_11;
  }
  else if ((v79 & 0x80) == 0)
  {
    goto LABEL_11;
  }
LABEL_13:
  v7 = v78;
LABEL_14:
  v69 = v5;
  if (!v7)
    goto LABEL_48;
  quasar::corrective_reranking::intentToCommandIdentifier((uint64_t *)&v77, (std::string *)v70);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = *(_OWORD *)v70;
  *(void **)(v5 + 16) = v71[0];
  v12 = (quasar::corrective_reranking::Parse *)quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)v70, (const quasar::corrective_reranking::Parse *)a1);
  CommandsWithMetaTarget = (_QWORD *)quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(v12);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandsWithMetaTarget, (unsigned __int8 *)&v77))
  {
    quasar::corrective_reranking::TextEdit::targetIn((uint64_t)v70, a2, &v76);
    v14 = (void **)(v5 + 24);
    if (*(char *)(v5 + 47) < 0)
      operator delete(*v14);
    *(_OWORD *)v14 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 40) = *((_QWORD *)&v76.__r_.__value_.__l + 2);
  }
  std::string::operator=((std::string *)(v5 + 48), (const std::string *)&__p[1]);
  *(_DWORD *)(v5 + 76) = 1;
  v15 = *(unsigned __int8 *)(v5 + 47);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(v5 + 32);
  if (v15)
  {
    v16 = 2;
    *(_DWORD *)(v5 + 76) = 2;
    v17 = *(unsigned __int8 *)(v5 + 71);
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(v5 + 56);
    if (v17)
    {
      v16 = 3;
      goto LABEL_28;
    }
  }
  else
  {
    v18 = *(unsigned __int8 *)(v5 + 71);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(v5 + 56);
    if (v18)
    {
      v16 = 2;
      *(_DWORD *)(v5 + 76) = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  v19 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 56) == v19)
    goto LABEL_41;
  v20 = (_QWORD *)(v19 - 24);
  v21 = *(char *)(v19 - 1);
  if (v21 < 0)
  {
    if (*(_QWORD *)(v19 - 16) != 4)
      goto LABEL_41;
    v20 = (_QWORD *)*v20;
  }
  else if (v21 != 4)
  {
    goto LABEL_41;
  }
  if (*(_DWORD *)v20 != 1701736270)
    goto LABEL_41;
LABEL_28:
  *(_DWORD *)(v5 + 76) = v16 + 1;
LABEL_41:
  *(_BYTE *)(v5 + 80) = !quasar::corrective_reranking::Parse::isIncomplete((quasar::corrective_reranking::Parse *)a1);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  if (SHIBYTE(v74) < 0)
    operator delete(__p[1]);
  if (LOBYTE(__p[0]))
  {
    Intent = (char *)v71[1];
    if (v71[1])
    {
      *(void **)&v72 = v71[1];
      operator delete(v71[1]);
    }
  }
  if (SHIBYTE(v71[0]) < 0)
    operator delete(v70[0]);
LABEL_48:
  *(_DWORD *)(v5 + 72) = *(_DWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  if (v23 != v22)
  {
    v24 = *(char *)(v23 + 23);
    if ((v24 & 0x80000000) == 0)
    {
      v25 = *(_DWORD **)(a1 + 56);
      if (v24 != 4)
        goto LABEL_55;
LABEL_54:
      v26 = *v25 == 1701736270;
      goto LABEL_56;
    }
    if (*(_QWORD *)(v23 + 8) == 4)
    {
      v25 = *(_DWORD **)v23;
      goto LABEL_54;
    }
  }
LABEL_55:
  v26 = 0;
LABEL_56:
  *(_BYTE *)(v5 + 81) = v26;
  if (0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"parse.outputs.size() == parse.utterance.size()", 46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v70);
  }
  if (v23 != v22)
  {
    v27 = 0;
    v28 = 0;
    v66 = (uint64_t *)(v5 + 136);
    v67 = (uint64_t *)(v5 + 112);
    do
    {
      v29 = *(_QWORD *)(a1 + 32);
      CommandTokens = (_QWORD *)quasar::corrective_reranking::Parse::getCommandTokens((quasar::corrective_reranking::Parse *)Intent);
      v31 = (char *)(v23 + 24 * v27);
      v32 = (__int128 *)(v29 + 32 * v27);
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandTokens, (unsigned __int8 *)v31))
      {
        v33 = *(_QWORD *)(v5 + 96);
        if (v33 >= *(_QWORD *)(v5 + 104))
        {
          v34 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v68, v32);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v68, v32);
          v34 = v33 + 24;
        }
        *(_QWORD *)(v5 + 96) = v34;
      }
      else
      {
        v35 = v31[23];
        if (v31[23] < 0)
        {
          v36 = *(char **)v31;
          v37 = *((_QWORD *)v31 + 1);
        }
        else
        {
          v36 = v31;
          v37 = v31[23];
        }
        if (v37 >= 6)
        {
          v38 = &v36[v37];
          v39 = v36;
          do
          {
            v40 = (char *)memchr(v39, 84, v37 - 5);
            if (!v40)
              break;
            if (*(_DWORD *)v40 == 1196573012 && *((_WORD *)v40 + 2) == 21573)
            {
              if (v40 == v38 || v40 - v36 == -1)
                break;
              v42 = *(_QWORD *)(v69 + 120);
              if (v42 >= *(_QWORD *)(v69 + 128))
              {
                v43 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v67, v32);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v67, v32);
                v43 = v42 + 24;
              }
              *(_QWORD *)(v69 + 120) = v43;
              goto LABEL_112;
            }
            v39 = v40 + 1;
            v37 = v38 - (_BYTE *)v39;
          }
          while (v38 - (_BYTE *)v39 >= 6);
        }
        if ((v35 & 0x80) != 0)
        {
          v44 = *(char **)v31;
          v45 = *((_QWORD *)v31 + 1);
        }
        else
        {
          v44 = v31;
          v45 = v35;
        }
        if (v45 >= 7)
        {
          v46 = &v44[v45];
          v47 = v44;
          do
          {
            v48 = (char *)memchr(v47, 80, v45 - 6);
            if (!v48)
              break;
            if (*(_DWORD *)v48 == 1280917840 && *(_DWORD *)(v48 + 3) == 1145130828)
            {
              if (v48 == v46 || v48 - v44 == -1)
                break;
              v50 = *(_QWORD *)(v69 + 144);
              if (v50 >= *(_QWORD *)(v69 + 152))
              {
                v51 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v66, v32);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v66, v32);
                v51 = v50 + 24;
              }
              *(_QWORD *)(v69 + 144) = v51;
              goto LABEL_112;
            }
            v47 = v48 + 1;
            v45 = v46 - (_BYTE *)v47;
          }
          while (v46 - (_BYTE *)v47 >= 7);
        }
        if ((v35 & 0x80) != 0)
        {
          v52 = *(char **)v31;
          v35 = *((_QWORD *)v31 + 1);
        }
        else
        {
          v52 = v31;
        }
        if (v35 >= 4)
        {
          v53 = &v52[v35];
          v54 = v52;
          do
          {
            v55 = (char *)memchr(v54, 78, v35 - 3);
            if (!v55)
              break;
            if (*(_DWORD *)v55 == 1701736270)
            {
              if (v55 != v53 && v55 - v52 != -1)
                ++*(_DWORD *)(v69 + 164);
              break;
            }
            v54 = v55 + 1;
            v35 = v53 - (_BYTE *)v54;
          }
          while (v53 - (_BYTE *)v54 >= 4);
        }
      }
LABEL_112:
      if (v31[23] < 0)
      {
        v57 = v31;
        v31 = *(char **)v31;
        v56 = *((_QWORD *)v57 + 1);
      }
      else
      {
        v56 = v31[23];
      }
      v58 = &v31[v56];
      if (v56 >= 6)
      {
        v59 = v31;
        v5 = v69;
        do
        {
          Intent = (char *)memchr(v59, 84, v56 - 5);
          if (!Intent)
            break;
          if (*(_DWORD *)Intent == 1196573012 && *((_WORD *)Intent + 2) == 21573)
            goto LABEL_125;
          v59 = Intent + 1;
          v56 = v58 - (_BYTE *)v59;
        }
        while (v58 - (_BYTE *)v59 > 5);
        Intent = v58;
      }
      else
      {
        Intent = &v31[v56];
        v5 = v69;
      }
LABEL_125:
      v61 = Intent == v58 || Intent - v31 == -1;
      v62 = !v61;
      v63 = v62 | v28;
      if (v61 && ((v28 ^ 1) & 1) == 0)
      {
        *(_BYTE *)(v5 + 160) = 1;
        v63 = v28;
      }
      ++v27;
      v23 = *(_QWORD *)(a1 + 56);
      v28 = v63;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v23) >> 3) > v27);
  }
  if (quasar::gLogLevel > 4)
  {
    memset(v75, 0, sizeof(v75));
    *(_OWORD *)__p = 0u;
    v74 = 0u;
    *(_OWORD *)v71 = 0u;
    v72 = 0u;
    *(_OWORD *)v70 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"VoiceEditingResultHandler: ", 27);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"created interpretation ", 23);
    quasar::result_handler::operator<<(v65, v5);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v70);
  }
  if (v79 < 0)
    operator delete(v77);
}

uint64_t quasar::result_handler::splitChoice(uint64_t *a1, int *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a4)
  {
    v7 = *a1;
    v8 = *a2;
    v9 = *a1 + 224 * (int)v8;
    v24 = v9;
    v25 = v7;
    v10 = (_QWORD *)a3[7];
    if ((unint64_t)v10 >= a3[8])
    {
      v11 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3 + 6, &v25, &v24);
    }
    else
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v10, v7, v9, v8);
      v11 = (uint64_t)(v10 + 3);
      a3[7] = (uint64_t)(v10 + 3);
    }
    a3[7] = v11;
    v17 = a1[1];
    v18 = *a1 + 224 * *a2;
    v24 = v17;
    v25 = v18;
    v19 = (_QWORD *)a3[10];
    if ((unint64_t)v19 >= a3[11])
    {
      result = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3 + 9, &v25, &v24);
    }
    else
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v19, v18, v17, 0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 5));
      result = (uint64_t)(v19 + 3);
      a3[10] = (uint64_t)(v19 + 3);
    }
    a3[10] = result;
  }
  else
  {
    v12 = *a1;
    v13 = *a2;
    v14 = *a1 + 224 * (int)v13;
    v24 = v14;
    v25 = v12;
    v15 = (_QWORD *)a3[1];
    if ((unint64_t)v15 >= a3[2])
    {
      v16 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3, &v25, &v24);
    }
    else
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v15, v12, v14, v13);
      v16 = (uint64_t)(v15 + 3);
      a3[1] = (uint64_t)(v15 + 3);
    }
    a3[1] = v16;
    v21 = a1[1];
    v22 = *a1 + 224 * *a2;
    v24 = v21;
    v25 = v22;
    v23 = (_QWORD *)a3[4];
    if ((unint64_t)v23 >= a3[5])
    {
      result = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3 + 3, &v25, &v24);
    }
    else
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v23, v22, v21, 0x6DB6DB6DB6DB6DB7 * ((v21 - v22) >> 5));
      result = (uint64_t)(v23 + 3);
      a3[4] = (uint64_t)(v23 + 3);
    }
    a3[4] = result;
  }
  return result;
}

void sub_1ADE018B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE018B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE018C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE018C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::findSplitEnd(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *i;
  int v10;
  unint64_t v11;
  int v12;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2 || *(_DWORD *)(v3 + 28) > a2)
    return 0;
  v5 = *(_DWORD *)(v2 - 192);
  v6 = (unsigned __int128)((v2 - v3) * (__int128)0x4924924924924925) >> 64;
  v7 = (v6 >> 6) + ((unint64_t)v6 >> 63);
  if (v5 <= a2)
    return v7;
  result = 0;
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  for (i = (int *)(v3 + 256); ; i += 56)
  {
    if (*(i - 55) <= a2)
    {
      v10 = *(i - 56);
      if (v10 >= a2)
        break;
    }
    if (v8 == ++result)
      return 0xFFFFFFFFLL;
  }
  if (v7 <= result + 1)
    v11 = result + 1;
  else
    v11 = v7;
  while (v7 > ++result)
  {
    v12 = *i;
    i += 56;
    if (v12 != v10)
      return result;
  }
  return v11;
}

uint64_t std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v22 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[24 * v5];
  v19[0] = v12;
  v19[1] = v13;
  v20 = v13;
  v21 = &v12[24 * v11];
  v14 = *a2;
  v15 = *a3;
  v16 = 0x6DB6DB6DB6DB6DB7 * ((*a3 - *a2) >> 5);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v13, v14, v15, v16);
  v20 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v19);
  return v17;
}

void sub_1ADE01AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((__int128 *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
        quasar::Token::~Token((void **)(v7 - 224));
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__n128 std::__construct_at[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  int v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v2 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v2;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v3 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  result = *(__n128 *)(a2 + 152);
  *(__n128 *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v5 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v5;
  return result;
}

BOOL kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADE01D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation&>(uint64_t *a1, const quasar::result_handler::CommandInterpretation *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xC30C30C30C30C3)
    v9 = 0x186186186186186;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[168 * v4];
  v16 = &v10[168 * v9];
  quasar::result_handler::CommandInterpretation::CommandInterpretation(v14, a2);
  v15 = v14 + 7;
  std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADE01ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 168);
      std::allocator<quasar::result_handler::CommandInterpretation>::construct[abi:ne180100]<quasar::result_handler::CommandInterpretation,quasar::result_handler::CommandInterpretation>(a1, v7 - 168, v9);
      v7 = *((_QWORD *)&v16 + 1) - 168;
      *((_QWORD *)&v16 + 1) -= 168;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::result_handler::CommandInterpretation>::construct[abi:ne180100]<quasar::result_handler::CommandInterpretation,quasar::result_handler::CommandInterpretation>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v6 = *((_QWORD *)a3 + 9);
  *(_WORD *)(a2 + 80) = *((_WORD *)a3 + 40);
  *(_QWORD *)(a2 + 72) = v6;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 88) = *(__int128 *)((char *)a3 + 88);
  *(_QWORD *)(a2 + 104) = *((_QWORD *)a3 + 13);
  *((_QWORD *)a3 + 11) = 0;
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = a3[7];
  *(_QWORD *)(a2 + 128) = *((_QWORD *)a3 + 16);
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  result = *(__n128 *)((char *)a3 + 136);
  *(__n128 *)(a2 + 136) = result;
  *(_QWORD *)(a2 + 152) = *((_QWORD *)a3 + 19);
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a3 + 20);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v3, v1);
      v1 += 168;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::result_handler::CommandInterpretation>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 168;
    std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v4, i - 168);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  int v38;
  unint64_t v40;
  int v41;
  int v42;
  void **v44;
  __int128 v45;
  void **v46;
  __int128 v47;
  void **v48;
  __int128 v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v65;
  unint64_t v66;
  _DWORD *i;
  unint64_t v68;
  int v69;
  int v70;
  int v72;
  void **v74;
  __int128 v75;
  void **v76;
  __int128 v77;
  void **v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  int v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  BOOL v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int128 v105;
  void **v106;
  __int128 v107;
  void **v108;
  __int128 v109;
  __int16 v110;
  int64_t v111;
  int64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  BOOL v118;
  int v119;
  int v120;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  BOOL v133;
  int v134;
  BOOL v135;
  __int128 v136;
  void **v137;
  __int128 v138;
  void **v139;
  __int128 v140;
  __int16 v141;
  int64_t v142;
  uint64_t v143;
  __int128 v144;
  unint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int64_t v160;
  int v161;
  int v162;
  int v163;
  BOOL v164;
  void **v165;
  __int128 v166;
  void **v167;
  __int128 v168;
  void **v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  BOOL v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  __int128 v184;
  void **v185;
  __int128 v186;
  void **v187;
  __int128 v188;
  __int16 v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  int v193;
  __int128 v195;
  void **v196;
  __int128 v197;
  void **v198;
  __int128 v199;
  __int16 v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  BOOL v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  void **v212;
  int v213;
  __int128 v215;
  void **v216;
  __int128 v217;
  void **v218;
  __int128 v219;
  uint64_t v220;
  __int128 *v221;
  __int128 *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v234;
  unint64_t v235;
  void *v236[2];
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  __int16 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  void **v251;
  void *v252[2];
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  __int128 __p;
  uint64_t v257;
  uint64_t v258;
  __int16 v259;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  unint64_t v266;

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a2, a3, a4);
  v10 = *(_DWORD *)(a5 + 76);
  v11 = *(_DWORD *)(a4 + 76);
  if (v11 < v10 || (v10 >= v11 ? (v12 = *(_DWORD *)(a4 + 164) < *(_DWORD *)(a5 + 164)) : (v12 = 0), v12))
  {
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a4, a5);
    v13 = *(_DWORD *)(a4 + 76);
    v14 = *(_DWORD *)(a3 + 76);
    if (v14 < v13 || (v13 >= v14 ? (v15 = *(_DWORD *)(a3 + 164) < *(_DWORD *)(a4 + 164)) : (v15 = 0), v15))
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a3, a4);
      v16 = *(_DWORD *)(a3 + 76);
      v17 = *(_DWORD *)(a2 + 76);
      if (v17 < v16 || v16 >= v17 && *(_DWORD *)(a2 + 164) < *(_DWORD *)(a3 + 164))
      {
        std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a2, a3);
        v18 = *(_DWORD *)(a2 + 76);
        v19 = *(_DWORD *)(a1 + 76);
        if (v19 < v18 || v18 >= v19 && *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 + 164))
          std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2);
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v16;
  int v17;

  v5 = a1;
  v6 = *(_DWORD *)(a2 + 76);
  v7 = *(_DWORD *)(a1 + 76);
  if (v7 < v6 || ((v8 = *(_DWORD *)(a2 + 164), v6 >= v7) ? (v9 = *(_DWORD *)(a1 + 164) < v8) : (v9 = 0), v9))
  {
    v14 = *(_DWORD *)(a3 + 76);
    if (v6 >= v14 && (v14 < v6 || *(_DWORD *)(a2 + 164) >= *(_DWORD *)(a3 + 164)))
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2);
      v16 = *(_DWORD *)(a3 + 76);
      v17 = *(_DWORD *)(a2 + 76);
      if (v17 >= v16 && (v16 < v17 || *(_DWORD *)(a2 + 164) >= *(_DWORD *)(a3 + 164)))
        return;
      a1 = a2;
    }
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a3);
    return;
  }
  v10 = *(_DWORD *)(a3 + 76);
  if (v6 < v10 || (v10 >= v6 ? (v11 = v8 < *(_DWORD *)(a3 + 164)) : (v11 = 0), v11))
  {
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a2, a3);
    v12 = *(_DWORD *)(a2 + 76);
    v13 = *(_DWORD *)(v5 + 76);
    if (v13 < v12 || v12 >= v13 && *(_DWORD *)(v5 + 164) < *(_DWORD *)(a2 + 164))
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(v5, a2);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 __p;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  void **v45[3];

  v2 = a2;
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 92);
      v7 = *(_DWORD *)(a1 + 76);
      if (v7 < v6 || v6 >= v7 && *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 - 4))
      {
        std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2 - 168);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a2 - 168);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a1 + 336, a2 - 168);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,0>(a1, a1 + 168, a1 + 336, a1 + 504, a2 - 168);
      return 1;
    default:
      v8 = a1 + 336;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a1 + 336);
      v9 = a1 + 504;
      if (a1 + 504 == v2)
        return 1;
      v10 = 0;
      v11 = 0;
      v29 = v2;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD *)(v9 + 76);
    v13 = *(_DWORD *)(v8 + 76);
    if (v13 < v12 || (v12 >= v13 ? (v14 = *(_DWORD *)(v8 + 164) < *(_DWORD *)(v9 + 164)) : (v14 = 0), v14))
    {
      *(_OWORD *)v30 = *(_OWORD *)v9;
      v31 = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v15 = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v32 = v15;
      v33 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v16 = *(_QWORD *)(v9 + 72);
      v35 = *(_QWORD *)(v9 + 64);
      __p = *(_OWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      v37 = *(_WORD *)(v9 + 80);
      v36 = v16;
      v38 = *(_OWORD *)(v9 + 88);
      v39 = *(_QWORD *)(v9 + 104);
      *(_QWORD *)(v9 + 88) = 0;
      *(_QWORD *)(v9 + 96) = 0;
      v40 = *(_OWORD *)(v9 + 112);
      v17 = *(_QWORD *)(v9 + 128);
      *(_QWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)(v9 + 120) = 0;
      *(_QWORD *)(v9 + 128) = 0;
      v42 = *(_OWORD *)(v9 + 136);
      v18 = *(_QWORD *)(v9 + 152);
      v19 = *(_QWORD *)(v9 + 160);
      v41 = v17;
      v43 = v18;
      v44 = v19;
      *(_QWORD *)(v9 + 136) = 0;
      *(_QWORD *)(v9 + 144) = 0;
      *(_QWORD *)(v9 + 152) = 0;
      quasar::result_handler::CommandInterpretation::operator=(v9, (__int128 *)v8);
      v20 = a1;
      if (v8 != a1)
      {
        v21 = v10;
        do
        {
          v22 = a1 + v21;
          v23 = *(_DWORD *)(a1 + v21 + 244);
          if (v23 >= SHIDWORD(v36) && (SHIDWORD(v36) < v23 || *(_DWORD *)(v22 + 332) >= SHIDWORD(v44)))
          {
            v20 = a1 + v21 + 336;
            goto LABEL_24;
          }
          quasar::result_handler::CommandInterpretation::operator=(v22 + 336, (__int128 *)(v22 + 168));
          v21 -= 168;
        }
        while (v21 != -336);
        v20 = a1;
      }
LABEL_24:
      if (*(char *)(v20 + 23) < 0)
        operator delete(*(void **)v20);
      *(_OWORD *)v20 = *(_OWORD *)v30;
      *(_QWORD *)(v20 + 16) = v31;
      v25 = (void **)(v20 + 24);
      if (*(char *)(v20 + 47) < 0)
        operator delete(*v25);
      *(_OWORD *)v25 = v32;
      *(_QWORD *)(v20 + 40) = v33;
      v26 = (void **)(v20 + 48);
      if (*(char *)(v20 + 71) < 0)
        operator delete(*v26);
      *(_OWORD *)v26 = __p;
      *(_QWORD *)(v20 + 64) = v35;
      *(_QWORD *)(v20 + 72) = v36;
      *(_WORD *)(v20 + 80) = v37;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v20 + 88));
      *(_OWORD *)(v20 + 88) = v38;
      *(_QWORD *)(v20 + 104) = v39;
      v39 = 0;
      v38 = 0uLL;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v20 + 112));
      *(_OWORD *)(v20 + 112) = v40;
      *(_QWORD *)(v20 + 128) = v41;
      v41 = 0;
      v40 = 0uLL;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v20 + 136));
      *(_OWORD *)(v20 + 136) = v42;
      v27 = v43;
      v28 = v44;
      v43 = 0;
      v42 = 0uLL;
      *(_QWORD *)(v20 + 152) = v27;
      *(_QWORD *)(v20 + 160) = v28;
      v45[0] = (void **)&v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
      v45[0] = (void **)&v40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
      v45[0] = (void **)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v45);
      v2 = v29;
      if (++v11 == 8)
        return v9 + 168 == v29;
    }
    v8 = v9;
    v10 += 168;
    v9 += 168;
    if (v9 == v2)
      return 1;
  }
}

void std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40[2];

  *(_OWORD *)v22 = *(_OWORD *)a1;
  v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)v24 = v3;
  v25 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  v29 = *(_WORD *)(a1 + 80);
  v27 = v4;
  v28 = v5;
  v6 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 88);
  v30 = v14;
  v31 = v6;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v8 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v32 = v8;
  v33 = v7;
  v19 = v7;
  v9 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 120);
  v34 = v17;
  v35 = v9;
  v15 = v9;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 136);
  v36 = v21;
  v37 = v20;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v10 = *(_QWORD *)(a1 + 152);
  v11 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = 0;
  v18 = v10;
  v38 = v10;
  v39 = v11;
  v16 = v11;
  quasar::result_handler::CommandInterpretation::operator=(a1, (__int128 *)a2);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)v22;
  *(_QWORD *)(a2 + 16) = v23;
  v12 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)v24;
  *(_QWORD *)(a2 + 40) = v25;
  v13 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 64) = v27;
  *(_QWORD *)(a2 + 72) = v28;
  *(_WORD *)(a2 + 80) = v29;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 88));
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v6;
  *(_QWORD *)(a2 + 104) = v8;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 112));
  *(_QWORD *)(a2 + 112) = v19;
  *(_QWORD *)(a2 + 120) = v17;
  *(_QWORD *)(a2 + 128) = v15;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 136));
  *(_QWORD *)(a2 + 136) = v21;
  *(_QWORD *)(a2 + 144) = v20;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  *(_QWORD *)(a2 + 152) = v18;
  *(_QWORD *)(a2 + 160) = v16;
  v40[0] = (void **)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v40[0] = (void **)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v40[0] = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
}

uint64_t quasar::result_handler::CommandInterpretation::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  uint64_t v9;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = *((_QWORD *)a2 + 9);
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(_QWORD *)(a1 + 72) = v9;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  return a1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a2, a3);
  v8 = *(_DWORD *)(a4 + 76);
  v9 = *(_DWORD *)(a3 + 76);
  if (v9 < v8 || (v8 >= v9 ? (v10 = *(_DWORD *)(a3 + 164) < *(_DWORD *)(a4 + 164)) : (v10 = 0), v10))
  {
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a3, a4);
    v11 = *(_DWORD *)(a3 + 76);
    v12 = *(_DWORD *)(a2 + 76);
    if (v12 < v11 || (v11 >= v12 ? (v13 = *(_DWORD *)(a2 + 164) < *(_DWORD *)(a3 + 164)) : (v13 = 0), v13))
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a2, a3);
      v14 = *(_DWORD *)(a2 + 76);
      v15 = *(_DWORD *)(a1 + 76);
      if (v15 < v14 || v14 >= v15 && *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 + 164))
        std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2);
    }
  }
}

uint64_t *kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::vector<quasar::result_handler::CommandInterpretation> const&)::{lambda(std::vector<quasar::result_handler::CommandInterpretation>&)#1}>(unint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::string::size_type size;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::string v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;

  v28 = (uint64_t *)&v28;
  v29 = (uint64_t *)&v28;
  v30 = 0;
  v6 = a1 + 1;
  v27.__r_.__value_.__r.__words[0] = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1 + 1, (uint64_t *)&v27);
  if (v7)
  {
    v8 = (uint64_t *)v7[3];
    if (&v28 != (uint64_t **)v8)
    {
      v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v28)
      {
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)v8[1] = v10;
        v11 = (uint64_t)v28;
        v28[1] = (uint64_t)v8;
        *v8 = v11;
        v8[1] = (uint64_t)&v28;
        --a1[9];
        v28 = v8;
        ++v30;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    v12 = a1[9];
    if (v12 >= *a1)
    {
      v13 = (uint64_t *)a1[7];
      if (&v28 != (uint64_t **)v13)
      {
        v14 = (uint64_t *)v13[1];
        if (v14 != (uint64_t *)&v28)
        {
          v15 = *v13;
          *(_QWORD *)(v15 + 8) = v14;
          *(_QWORD *)v13[1] = v15;
          v16 = (uint64_t)v28;
          v28[1] = (uint64_t)v13;
          *v13 = v16;
          v13[1] = (uint64_t)&v28;
          a1[9] = v12 - 1;
          v28 = v13;
          ++v30;
        }
      }
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v29 + 2);
      std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(v6, (uint64_t *)&v27);
      std::string::operator=((std::string *)(v29 + 2), (const std::string *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v27 = *(std::string *)a2;
      v17 = (uint64_t *)operator new(0x40uLL);
      size = v27.__r_.__value_.__l.__size_;
      v17[2] = v27.__r_.__value_.__r.__words[0];
      v17[3] = size;
      *(uint64_t *)((char *)v17 + 31) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
      LOBYTE(size) = *((_BYTE *)&v27.__r_.__value_.__s + 23);
      memset(&v27, 0, sizeof(v27));
      *((_BYTE *)v17 + 39) = size;
      v17[6] = 0;
      v17[7] = 0;
      v17[5] = 0;
      v19 = (uint64_t)v28;
      *v17 = (uint64_t)v28;
      v17[1] = (uint64_t)&v28;
      *(_QWORD *)(v19 + 8) = v17;
      v28 = v17;
      ++v30;
    }
  }
  v20 = v29;
  v21 = v29 + 5;
  if (v29 + 5 != (uint64_t *)a3)
    std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>((uint64_t)(v29 + 5), *(std::string **)a3, *(quasar::result_handler::CommandInterpretation **)(a3 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 2);
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>((uint64_t)v6, (uint64_t *)&v27, &v27);
  v22 = (uint64_t *)a1[8];
  if (v22 != v20)
  {
    v23 = (uint64_t *)v20[1];
    if (v23 != v22)
    {
      v24 = *v20;
      *(_QWORD *)(v24 + 8) = v23;
      *(_QWORD *)v20[1] = v24;
      v25 = *v22;
      *(_QWORD *)(v25 + 8) = v20;
      *v20 = v25;
      *v22 = (uint64_t)v20;
      v20[1] = (uint64_t)v22;
      --v30;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear((uint64_t *)&v28);
  return v21;
}

void sub_1ADE04884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear(&a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__push_back_slow_path<quasar::result_handler::CommandData const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[184 * v4];
  v16 = &v10[184 * v9];
  quasar::result_handler::CommandData::CommandData((uint64_t)v14, a2);
  v15 = v14 + 184;
  std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADE049D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(a1, v7 - 184, v9);
      v7 = *((_QWORD *)&v16 + 1) - 184;
      *((_QWORD *)&v16 + 1) -= 184;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  int v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v3 = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = v3;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(a3 + 120);
  v4 = *(_OWORD *)(a3 + 128);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 128) = v4;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  result = *(__n128 *)(a3 + 152);
  *(__n128 *)(a2 + 152) = result;
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a3 + 168);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  v6 = *(_DWORD *)(a3 + 176);
  *(_BYTE *)(a2 + 180) = *(_BYTE *)(a3 + 180);
  *(_DWORD *)(a2 + 176) = v6;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v3, v1);
      v1 += 184;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::result_handler::CommandData>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::result_handler::CommandData>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 184;
    std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v4, i - 184);
  }
}

void std::swap[abi:ne180100]<quasar::result_handler::CommandData>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  void **v23;

  v6 = *(_OWORD *)a1;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v12 = *(_OWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v3 = *(_OWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)v14 = v3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v16 = *(_DWORD *)(a1 + 120);
  v4 = *(_OWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)__p = v4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v19 = *(_OWORD *)(a1 + 152);
  v20 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v5 = *(_DWORD *)(a1 + 176);
  v22 = *(_BYTE *)(a1 + 180);
  v21 = v5;
  quasar::result_handler::CommandData::operator=(a1, a2);
  quasar::result_handler::CommandData::operator=(a2, (uint64_t)&v6);
  v23 = (void **)&v19;
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  v23 = (void **)&v12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)&v10;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)&v8;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)&v6;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void std::vector<quasar::result_handler::CommandInterpretation>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::result_handler::CommandInterpretation>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 168 * a2;
    while (v3 != v7)
    {
      v3 -= 168;
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<quasar::corrective_reranking::ASRCandidate>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1ADE051AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE051B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::emplace_back<>(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v15[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = *(v2 - 1);
  if (v5 >= v4)
  {
    v7 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0x186186186186186)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xC30C30C30C30C3)
      v10 = 0x186186186186186;
    else
      v10 = v8;
    v15[4] = v2;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)v2, v10);
    v12 = &v11[168 * v7];
    v15[0] = v11;
    v15[1] = v12;
    v15[3] = &v11[168 * v13];
    *((_QWORD *)v12 + 20) = 0;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 9) = 0u;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_DWORD *)v12 + 18) = -1082130432;
    *((_DWORD *)v12 + 41) = 0;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 145) = 0u;
    v15[2] = v12 + 168;
    std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, v15);
    v6 = a1[1];
    std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(v15);
  }
  else
  {
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_QWORD *)(v5 + 160) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 72) = -1082130432;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 145) = 0u;
    v6 = v5 + 168;
    a1[1] = v5 + 168;
  }
  a1[1] = v6;
  return v6 - 168;
}

void sub_1ADE05390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[168 * v3];
  v13 = &v7[168 * v6];
  std::allocator<quasar::result_handler::CommandInterpretation>::construct[abi:ne180100]<quasar::result_handler::CommandInterpretation,quasar::result_handler::CommandInterpretation>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 168;
  std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADE054B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21)
    v6 = 0x1642C8590B21642;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[184 * v3];
  v13 = &v7[184 * v6];
  std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 184;
  std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADE055D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t quasar::result_handler::maybeCompleteCommandSegmentationScore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 152);
  if (v1 == *(_QWORD *)(a1 + 160))
  {
    v3 = 0;
    v4 = 0.0;
  }
  else
  {
    if (*(char *)(v1 + 23) < 0)
    {
      v5 = *(_QWORD *)(v1 + 8);
      if (!v5)
        goto LABEL_15;
      if (v5 != 14)
      {
LABEL_14:
        v4 = *(float *)(v1 + 72);
        v3 = 3;
        return v3 | ((unint64_t)LODWORD(v4) << 32);
      }
      v2 = *(uint64_t **)v1;
    }
    else
    {
      v2 = *(uint64_t **)(a1 + 152);
      if (*(_BYTE *)(v1 + 23) != 14)
      {
        if (*(_BYTE *)(v1 + 23))
          goto LABEL_14;
LABEL_15:
        v4 = *(float *)(v1 + 72);
        v3 = 1;
        return v3 | ((unint64_t)LODWORD(v4) << 32);
      }
    }
    v6 = *v2;
    v7 = *(uint64_t *)((char *)v2 + 6);
    if (v6 != 0x6769626D61736964 || v7 != 0x6E6F697461756769)
      goto LABEL_14;
    v9 = *(unsigned __int8 *)(a1 + 151);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 136);
    v4 = (float)v9;
    v3 = 2;
  }
  return v3 | ((unint64_t)LODWORD(v4) << 32);
}

void **std::vector<quasar::result_handler::CommandInterpretation>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 168 * a2;
      do
      {
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(_QWORD *)(v7 + 160) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 72) = -1082130432;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 120) = 0uLL;
        *(_OWORD *)(v7 + 136) = 0uLL;
        *(_OWORD *)(v7 + 145) = 0uLL;
        v7 += 168;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCF3CF3CF3CF3CF3DLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x186186186186186)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xC30C30C30C30C3)
      v11 = 0x186186186186186;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)result, v11);
    else
      v12 = 0;
    v14 = &v12[168 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[168 * v11];
    v15 = &v14[168 * a2];
    do
    {
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_QWORD *)v14 + 20) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 18) = -1082130432;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *(_OWORD *)(v14 + 104) = 0uLL;
      *(_OWORD *)(v14 + 120) = 0uLL;
      *(_OWORD *)(v14 + 136) = 0uLL;
      *(_OWORD *)(v14 + 145) = 0uLL;
      v14 += 168;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(v16);
  }
  return result;
}

void sub_1ADE05848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  return a1;
}

void sub_1ADE058CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void quasar::PartialHistory::annotatePartial(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  __int128 *i;
  __int128 *v5;
  uint64_t v6;
  std::string::size_type v7;
  uint64_t v8;
  std::string::size_type size;
  std::string *v10;
  uint64_t v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::vector<std::string>::pointer end;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string *v29;
  uint64_t v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::vector<std::string>::pointer v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  const quasar::Token *v42;
  const quasar::Token *v43;
  unint64_t v44;
  int v45;
  int v46;
  __int128 **v47;
  std::string::size_type v48;
  int v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  int v53;
  std::string::size_type v54;
  std::string *v55;
  uint64_t v56;
  const void **v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  uint64_t v61;
  unint64_t v62;
  const quasar::Token *v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  const quasar::Token *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  const quasar::Token *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  std::string::size_type v83;
  std::__split_buffer<std::string> __v;
  std::string v86;
  std::string v87;
  std::vector<std::string> v88;
  std::vector<std::string> v89;
  std::string v90;
  int v91[3];

  v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v80 = *(_QWORD *)(a1 + 8);
  v91[0] = -1431655765 * ((unint64_t)(v80 - *(_QWORD *)a1) >> 3);
  if (v91[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v90, "<eps>");
    memset(&v89, 0, sizeof(v89));
    memset(&v88, 0, sizeof(v88));
    v5 = *(__int128 **)(v80 - 24);
    for (i = *(__int128 **)(v80 - 16); v5 != i; v5 = (__int128 *)((char *)v5 + 232))
    {
      v6 = *((unsigned __int8 *)v5 + 23);
      v7 = *((_QWORD *)v5 + 1);
      if ((v6 & 0x80u) == 0)
        v8 = *((unsigned __int8 *)v5 + 23);
      else
        v8 = *((_QWORD *)v5 + 1);
      size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v90.__r_.__value_.__l.__size_;
      if (v8 == size)
      {
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v90;
        else
          v10 = (std::string *)v90.__r_.__value_.__r.__words[0];
        if ((v6 & 0x80) != 0)
        {
          v13 = *(const std::string::value_type **)v5;
          if (!memcmp(*(const void **)v5, v10, *((_QWORD *)v5 + 1)))
          {
LABEL_23:
            std::string::basic_string[abi:ne180100]<0>(&v87, "");
            goto LABEL_24;
          }
          goto LABEL_22;
        }
        if (!*((_BYTE *)v5 + 23))
          goto LABEL_23;
        v11 = 0;
        while (*((unsigned __int8 *)v5 + v11) == v10->__r_.__value_.__s.__data_[v11])
        {
          if (v6 == ++v11)
            goto LABEL_23;
        }
      }
      if ((v6 & 0x80) != 0)
      {
        v13 = *(const std::string::value_type **)v5;
LABEL_22:
        std::string::__init_copy_ctor_external(&v87, v13, v7);
        goto LABEL_24;
      }
      v12 = *v5;
      v87.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v12;
LABEL_24:
      end = v89.__end_;
      if (v89.__end_ >= v89.__end_cap_.__value_)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_ - (char *)v89.__begin_) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 3) > v17)
          v17 = 0x5555555555555556 * (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v89.__end_cap_;
        if (v18)
          v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v89.__end_cap_, v18);
        else
          v19 = 0;
        v20 = v19 + v16;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        v21 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        memset(&v87, 0, sizeof(v87));
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v89, &__v);
        v22 = v89.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v89.__end_ = v22;
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
      }
      else
      {
        v15 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v89.__end_->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
        v89.__end_ = end + 1;
      }
    }
    v24 = *a2;
    v23 = a2[1];
    if (*a2 != v23)
    {
      do
      {
        v25 = *((unsigned __int8 *)v24 + 23);
        v26 = *((_QWORD *)v24 + 1);
        if ((v25 & 0x80u) == 0)
          v27 = *((unsigned __int8 *)v24 + 23);
        else
          v27 = *((_QWORD *)v24 + 1);
        v28 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = v90.__r_.__value_.__l.__size_;
        if (v27 == v28)
        {
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v90;
          else
            v29 = (std::string *)v90.__r_.__value_.__r.__words[0];
          if ((v25 & 0x80) != 0)
          {
            v32 = *(const std::string::value_type **)v24;
            if (!memcmp(*(const void **)v24, v29, *((_QWORD *)v24 + 1)))
            {
LABEL_59:
              std::string::basic_string[abi:ne180100]<0>(&v87, "");
              goto LABEL_60;
            }
            goto LABEL_58;
          }
          if (!*((_BYTE *)v24 + 23))
            goto LABEL_59;
          v30 = 0;
          while (*((unsigned __int8 *)v24 + v30) == v29->__r_.__value_.__s.__data_[v30])
          {
            if (v25 == ++v30)
              goto LABEL_59;
          }
        }
        if ((v25 & 0x80) != 0)
        {
          v32 = *(const std::string::value_type **)v24;
LABEL_58:
          std::string::__init_copy_ctor_external(&v87, v32, v26);
          goto LABEL_60;
        }
        v31 = *v24;
        v87.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v31;
LABEL_60:
        v33 = v88.__end_;
        if (v88.__end_ >= v88.__end_cap_.__value_)
        {
          v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88.__end_ - (char *)v88.__begin_) >> 3);
          v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3) > v36)
            v36 = 0x5555555555555556 * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3) >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v36;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v88.__end_cap_;
          if (v37)
            v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v88.__end_cap_, v37);
          else
            v38 = 0;
          v39 = v38 + v35;
          __v.__first_ = v38;
          __v.__begin_ = v39;
          __v.__end_cap_.__value_ = &v38[v37];
          v40 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
          v39->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          memset(&v87, 0, sizeof(v87));
          __v.__end_ = v39 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v88, &__v);
          v41 = v88.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v88.__end_ = v41;
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
        }
        else
        {
          v34 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
          v88.__end_->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          v88.__end_ = v33 + 1;
        }
        v24 += 14;
      }
      while (v24 != v23);
    }
    memset(&v87, 0, sizeof(v87));
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v86, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    else
      v86 = v90;
    kaldi::LevenshteinAlignmentWithPrefixOptimization<std::string>(&v89, &v88, (uint64_t)&v86, (std::vector<std::pair<std::string, std::string>> *)&v87, 0);
    v47 = a2;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    v83 = v87.__r_.__value_.__l.__size_;
    v48 = v87.__r_.__value_.__r.__words[0];
    if (v87.__r_.__value_.__r.__words[0] != v87.__r_.__value_.__l.__size_)
    {
      v49 = 0;
      do
      {
        v50 = *(unsigned __int8 *)(v48 + 23);
        v51 = *(_QWORD *)(v48 + 8);
        if ((v50 & 0x80u) == 0)
          v52 = *(unsigned __int8 *)(v48 + 23);
        else
          v52 = *(_QWORD *)(v48 + 8);
        v53 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        else
          v54 = v90.__r_.__value_.__l.__size_;
        if (v52 == v54)
        {
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &v90;
          else
            v55 = (std::string *)v90.__r_.__value_.__r.__words[0];
          if ((v50 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v48, v55, *(_QWORD *)(v48 + 8)))
            {
LABEL_118:
              v62 = v3[1];
              if (0x6DB6DB6DB6DB6DB7 * (((char *)v47[1] - (char *)*v47) >> 5) <= (unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v62 - *v3) >> 3)))
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              v63 = (const quasar::Token *)&(*v47)[0x58469EE58469EE6 * ((uint64_t)(v62 - *v3) >> 3)];
              v64 = *(_DWORD *)(a1 + 48);
              *(_DWORD *)(a1 + 48) = v64 + 1;
              LODWORD(__v.__first_) = v64;
              if (v62 >= v3[2])
              {
                v66 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(v3, v63, v91, (int *)&__v);
              }
              else
              {
                v65 = v91[0];
                quasar::Token::Token((std::string *)v62, v63);
                *(_DWORD *)(v62 + 224) = v65;
                *(_DWORD *)(v62 + 228) = v64;
                v66 = v62 + 232;
                v3[1] = v62 + 232;
              }
              v3[1] = v66;
              goto LABEL_153;
            }
          }
          else
          {
            if (!*(_BYTE *)(v48 + 23))
              goto LABEL_118;
            v56 = 0;
            while (*(unsigned __int8 *)(v48 + v56) == v55->__r_.__value_.__s.__data_[v56])
            {
              if (v50 == ++v56)
                goto LABEL_118;
            }
          }
        }
        v57 = (const void **)(v48 + 24);
        v58 = *(unsigned __int8 *)(v48 + 47);
        if ((v58 & 0x80u) == 0)
          v59 = *(unsigned __int8 *)(v48 + 47);
        else
          v59 = *(_QWORD *)(v48 + 32);
        if (v59 != v54)
          goto LABEL_124;
        if (v53 >= 0)
          v60 = &v90;
        else
          v60 = (std::string *)v90.__r_.__value_.__r.__words[0];
        if ((v58 & 0x80) != 0)
        {
          if (memcmp(*v57, v60, *(_QWORD *)(v48 + 32)))
            goto LABEL_124;
        }
        else if (*(_BYTE *)(v48 + 47))
        {
          v61 = 0;
          while (*(unsigned __int8 *)(v48 + v61 + 24) == v60->__r_.__value_.__s.__data_[v61])
          {
            if (v58 == ++v61)
              goto LABEL_140;
          }
LABEL_124:
          if (v52 == v59)
          {
            if ((v58 & 0x80u) == 0)
              v67 = (unsigned __int8 *)(v48 + 24);
            else
              v67 = (unsigned __int8 *)*v57;
            if ((v50 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v48, v67, v51))
                goto LABEL_142;
            }
            else if ((_DWORD)v50)
            {
              v68 = 0;
              while (*(unsigned __int8 *)(v48 + v68) == v67[v68])
              {
                if (v50 == ++v68)
                {
                  v69 = 0;
                  do
                  {
                    v70 = *(unsigned __int8 *)(v48 + v69) != v67[v69] || v50 - 1 == v69;
                    ++v69;
                  }
                  while (!v70);
                  goto LABEL_146;
                }
              }
              goto LABEL_142;
            }
LABEL_146:
            v76 = *(_QWORD *)(v80 - 24);
            if (0x34F72C234F72C235 * ((*(_QWORD *)(v80 - 16) - v76) >> 3) <= (unint64_t)v49)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v3 = a3;
            v47 = a2;
            v71 = a3[1];
            if (0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 5) <= (unint64_t)(0x34F72C234F72C235
                                                                                                 * ((uint64_t)(v71 - *a3) >> 3)))
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v77 = (const quasar::Token *)&(*a2)[0x58469EE58469EE6 * ((uint64_t)(v71 - *a3) >> 3)];
            v78 = (int *)(v76 + 232 * v49 + 224);
            if (v71 >= a3[2])
            {
              v75 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int const&,int const&>(a3, v77, v78, (int *)(v76 + 232 * v49 + 228));
            }
            else
            {
              v79 = *(_QWORD *)v78;
              quasar::Token::Token((std::string *)a3[1], v77);
              *(_QWORD *)(v71 + 224) = v79;
LABEL_150:
              v75 = v71 + 232;
              v3[1] = v71 + 232;
            }
          }
          else
          {
LABEL_142:
            v3 = a3;
            v47 = a2;
            v71 = a3[1];
            if (0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 5) <= (unint64_t)(0x34F72C234F72C235
                                                                                                 * ((uint64_t)(v71 - *a3) >> 3)))
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v72 = (const quasar::Token *)&(*a2)[0x58469EE58469EE6 * ((uint64_t)(v71 - *a3) >> 3)];
            v73 = *(_DWORD *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v73 + 1;
            LODWORD(__v.__first_) = v73;
            if (v71 < a3[2])
            {
              v74 = v91[0];
              quasar::Token::Token((std::string *)v71, v72);
              *(_DWORD *)(v71 + 224) = v74;
              *(_DWORD *)(v71 + 228) = v73;
              goto LABEL_150;
            }
            v75 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(a3, v72, v91, (int *)&__v);
          }
          v3[1] = v75;
          ++v49;
          goto LABEL_153;
        }
LABEL_140:
        ++v49;
        v3 = a3;
        v47 = a2;
LABEL_153:
        v48 += 48;
      }
      while (v48 != v83);
    }
    if (0x34F72C234F72C235 * ((v3[1] - *v3) >> 3) != 0x6DB6DB6DB6DB6DB7 * (((char *)v47[1] - (char *)*v47) >> 5))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"annotatedPartial.size() == partial.size()", 41);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    __v.__first_ = &v87;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v88;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
  }
  else
  {
    v42 = (const quasar::Token *)*a2;
    v43 = (const quasar::Token *)a2[1];
    if (*a2 != (__int128 *)v43)
    {
      v44 = 0;
      do
      {
        v45 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = v45 + 1;
        LODWORD(__v.__first_) = v45;
        if (v44 >= v3[2])
        {
          v44 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(v3, v42, v91, (int *)&__v);
        }
        else
        {
          v46 = v91[0];
          quasar::Token::Token((std::string *)v44, v42);
          *(_DWORD *)(v44 + 224) = v46;
          *(_DWORD *)(v44 + 228) = v45;
          v44 += 232;
          v3[1] = v44;
        }
        v3[1] = v44;
        v42 = (const quasar::Token *)((char *)v42 + 224);
      }
      while (v42 != v43);
    }
  }
}

void quasar::PartialHistory::findLastMatchingPartial(quasar::PartialHistory *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  quasar::Token *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  void **v14;

  if ((int)(-1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)) >= 1)
  {
    v6 = -1431655765 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
    while (2)
    {
      v7 = v6--;
      v8 = (uint64_t *)(*(_QWORD *)this + 24 * v6);
      v9 = *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v6);
      v10 = (quasar::Token *)v8[1];
      while (v10 != (quasar::Token *)*v8)
      {
        v10 = (quasar::Token *)((char *)v10 - 232);
        if (!quasar::Token::isAutoPunctuation(v10))
        {
          if (*((_DWORD *)v10 + 57) == a2)
          {
            v11 = 0uLL;
            v12 = 0;
            std::vector<quasar::PartialHistory::AnnotatedToken>::__init_with_size[abi:ne180100]<quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>(&v11, *v8, v8[1], 0x34F72C234F72C235 * ((v8[1] - *v8) >> 3));
            v13 = v9;
            *(_OWORD *)a3 = v11;
            *(_QWORD *)(a3 + 16) = v12;
            v11 = 0uLL;
            v12 = 0;
            *(_DWORD *)(a3 + 24) = v9;
            *(_BYTE *)(a3 + 32) = 1;
            v14 = (void **)&v11;
            std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v14);
            return;
          }
          break;
        }
      }
      if (v7 > 1)
        continue;
      break;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
}

uint64_t std::vector<quasar::Token>::emplace_back<quasar::Token&>(uint64_t *a1, const quasar::Token *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>(a1, a2);
  }
  else
  {
    quasar::Token::Token((std::string *)a1[1], a2);
    v4 = v3 + 224;
    a1[1] = v3 + 224;
  }
  a1[1] = v4;
  return v4 - 224;
}

void sub_1ADE065BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinAlignmentWithPrefixOptimization<std::string>(_QWORD *a1, _QWORD *a2, uint64_t a3, std::vector<std::pair<std::string, std::string>> *a4, int a5)
{
  std::vector<std::pair<std::string, std::string>> *v5;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  int v26;
  void *__p;
  void *v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  void *v33;
  _BYTE *v34;
  uint64_t v35;
  std::string *v36;
  __int128 *v37;
  unint64_t v38;
  std::string *v39;
  std::string __src;
  uint64_t v41;

  v5 = a4;
  v41 = *MEMORY[0x1E0C80C00];
  if ((a2[1] - *a2) / 24 >= (unint64_t)((a1[1] - *a1) / 24))
    v9 = (a1[1] - *a1) / 24;
  else
    v9 = (a2[1] - *a2) / 24;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  if ((int)v9 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v26 = a5;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= v11
        || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v11)
      {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      v12 = *a1 + 24 * v11;
      v13 = *a2 + 24 * v11;
      v14 = *(unsigned __int8 *)(v12 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = *(unsigned __int8 *)(v12 + 23);
      else
        v15 = *(_QWORD *)(v12 + 8);
      v16 = *(unsigned __int8 *)(v13 + 23);
      v17 = (char)v16;
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(v13 + 8);
      if (v15 != v16)
        break;
      if (v17 >= 0)
        v18 = (unsigned __int8 *)(*a2 + 24 * v11);
      else
        v18 = *(unsigned __int8 **)v13;
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v12, v18, *(_QWORD *)(v12 + 8)))
          break;
      }
      else if (*(_BYTE *)(v12 + 23))
      {
        v19 = (unsigned __int8 *)(*a1 + 24 * v11);
        while (*v19 == *v18)
        {
          ++v19;
          ++v18;
          if (!--v14)
            goto LABEL_24;
        }
        break;
      }
LABEL_24:
      if ((unint64_t)v10 >= v38)
      {
        v10 = (std::string *)std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&>((uint64_t *)&v36, (__int128 *)v12, (__int128 *)v12);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(v10, (__int128 *)v12, (__int128 *)v12);
        v10 += 2;
      }
      v37 = (__int128 *)v10;
      if (++v11 == v9)
      {
        LODWORD(v11) = v9;
        break;
      }
    }
    v5 = a4;
    a5 = v26;
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (a5)
    __src.__r_.__value_.__r.__words[0] = 0x200000001;
  else
    __src.__r_.__value_.__r.__words[0] = 0x100000002;
  LODWORD(__src.__r_.__value_.__r.__words[1]) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v33, (char *)&__src, (uint64_t)&__src.__r_.__value_.__r.__words[1] + 4, 3uLL);
  v20 = (__int128 *)a1[1];
  v21 = (__int128 *)(*a1 + 24 * v11);
  memset(&__src, 0, sizeof(__src));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&__src, v21, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v21) >> 3));
  v22 = (__int128 *)a2[1];
  v23 = (__int128 *)(*a2 + 24 * v11);
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v32, v23, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v23) >> 3));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v31 = *(std::string *)a3;
  __p = 0;
  v29 = 0;
  v30 = 0;
  std::vector<kaldi::LevenshteinOp::Value>::__init_with_size[abi:ne180100]<kaldi::LevenshteinOp::Value*,kaldi::LevenshteinOp::Value*>(&__p, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
  v24 = kaldi::LevenshteinAlignment<std::string>((uint64_t *)&__src, &v32, &v31, v5, (char *)&__p);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v39 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::vector<std::pair<std::string,std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string>*>,std::__wrap_iter<std::pair<std::string,std::string>*>>(v5, v5->__begin_, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 4));
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v33 = &v36;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  return v24;
}

void sub_1ADE0696C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,char *a25,uint64_t a26,char a27,uint64_t a28)
{
  uint64_t v28;

  *(_QWORD *)(v28 - 128) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 128));
  a21 = v28 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (__p)
  {
    a25 = __p;
    operator delete(__p);
  }
  __p = &a27;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(uint64_t *a1, const quasar::Token *a2, int *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int v15;
  int v16;
  std::string *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string *v22;
  char *v23;
  uint64_t *v24;

  v5 = *a1;
  v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x34F72C234F72C235 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x8D3DCB08D3DCB0)
    v13 = 0x11A7B9611A7B961;
  else
    v13 = v7;
  v24 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v11, v13);
  else
    v14 = 0;
  v20 = v14;
  v21 = (std::string *)&v14[232 * v6];
  v22 = v21;
  v23 = &v14[232 * v13];
  v15 = *a3;
  v16 = *a4;
  quasar::Token::Token(v21, a2);
  v17 = v21;
  LODWORD(v21[9].__r_.__value_.__r.__words[1]) = v15;
  HIDWORD(v17[9].__r_.__value_.__r.__words[1]) = v16;
  v22 = (std::string *)((char *)v22 + 232);
  std::vector<quasar::PartialHistory::AnnotatedToken>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1ADE06B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::PartialHistory::AnnotatedToken>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 232;
      v4 = (__int128 *)((char *)v4 - 232);
      std::allocator<quasar::PartialHistory::AnnotatedToken>::construct[abi:ne180100]<quasar::PartialHistory::AnnotatedToken,quasar::PartialHistory::AnnotatedToken>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<quasar::PartialHistory::AnnotatedToken>::construct[abi:ne180100]<quasar::PartialHistory::AnnotatedToken,quasar::PartialHistory::AnnotatedToken>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 38) = *(_QWORD *)((char *)a3 + 38);
  *(_OWORD *)(a2 + 24) = v4;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  v6 = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v6;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 12) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  v7 = a3[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a3 + 20);
  *(_OWORD *)(a2 + 144) = v7;
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 18) = 0;
  v8 = *((_DWORD *)a3 + 42);
  *(_WORD *)(a2 + 172) = *((_WORD *)a3 + 86);
  *(_DWORD *)(a2 + 168) = v8;
  v9 = a3[11];
  *(_QWORD *)(a2 + 192) = *((_QWORD *)a3 + 24);
  *(_OWORD *)(a2 + 176) = v9;
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 22) = 0;
  result = *(__n128 *)((char *)a3 + 200);
  *(_DWORD *)(a2 + 216) = *((_DWORD *)a3 + 54);
  *(__n128 *)(a2 + 200) = result;
  *(_QWORD *)(a2 + 224) = *((_QWORD *)a3 + 28);
  return result;
}

uint64_t std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 232;
    quasar::Token::~Token((void **)(i - 232));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::LevenshteinAlignment<std::string>(uint64_t *a1, _QWORD *a2, const std::string *a3, std::vector<std::pair<std::string, std::string>> *a4, char *a5)
{
  int *v9;
  unsigned int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  std::pair<std::string, std::string> *begin;
  uint64_t end;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int **v22;
  const std::string *v23;
  uint64_t v24;
  unint64_t v25;
  std::vector<unsigned int>::size_type v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  int *v34;
  int v35;
  uint64_t j;
  int v37;
  unsigned __int8 **v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  char v51;
  BOOL v52;
  _BOOL4 v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  std::vector<std::pair<std::string, std::string>> *v59;
  const std::string *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  _BOOL4 v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  const std::string *v89;
  const std::string *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::pair<std::string, std::string> *v95;
  char *v96;
  std::string::size_type v97;
  __int128 v98;
  std::string::size_type v99;
  std::string::size_type v100;
  __int128 v101;
  std::string::size_type v102;
  uint64_t v103;
  unint64_t v105;
  uint64_t v106;
  const std::string *v107;
  unint64_t v108;
  std::vector<std::pair<std::string, std::string>> *v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int **v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  std::string v120;
  std::string v121;
  _QWORD v122[11];
  std::string __src;
  void *__p;
  char v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v9 = *(int **)a5;
  v10 = (unsigned int *)*((_QWORD *)a5 + 1);
  if (*(unsigned int **)a5 == v10)
  {
    __src.__r_.__value_.__r.__words[0] = 0x100000000;
    LODWORD(__src.__r_.__value_.__r.__words[1]) = 2;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)&__src, (uint64_t)&__src.__r_.__value_.__r.__words[1] + 4, 3uLL);
    v9 = *(int **)a5;
    v10 = (unsigned int *)*((_QWORD *)a5 + 1);
  }
  if (v9 == (int *)v10)
    goto LABEL_124;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = *v9;
    if (*v9 == 2)
    {
      ++v13;
    }
    else if (v14 == 1)
    {
      ++v12;
    }
    else
    {
      if (v14)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "Unexpected op in backtrace_precedence");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v11;
    }
    ++v9;
  }
  while (v9 != (int *)v10);
  if (v11 != 1 || v12 != 1 || v13 != 1)
  {
LABEL_124:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "numSubOrOk == 1 && numDel == 1 && numIns == 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  begin = a4->__begin_;
  end = (uint64_t)a4->__end_;
  if ((std::vector<std::pair<std::string, std::string>>::pointer)end != a4->__begin_)
  {
    do
    {
      end -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&a4->__end_cap_, end);
    }
    while ((std::pair<std::string, std::string> *)end != begin);
  }
  a4->__end_ = begin;
  v18 = *a1;
  v17 = a1[1];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a1) >> 3);
  v20 = *a2;
  v21 = a2[1];
  v118 = v19 + 1;
  std::vector<std::vector<int>>::vector(v122, v19 + 1);
  v108 = v19;
  v109 = a4;
  v22 = (unsigned int **)a5;
  v23 = a3;
  v24 = 0;
  v25 = 0;
  v117 = v21;
  v111 = (v21 - v20) / 24;
  v26 = v111 + 1;
  do
  {
    std::vector<int>::resize((std::vector<unsigned int> *)(v122[0] + v24), v26);
    ++v25;
    v24 += 24;
  }
  while (v25 <= v19);
  v105 = v19;
  v110 = a2;
  v107 = v23;
  v112 = v22;
  v27 = 0;
  v116 = v122[0];
  v28 = *(int **)v122[0];
  if (v26 <= 1)
    v29 = 1;
  else
    v29 = v111 + 1;
  do
  {
    v28[v27] = v27;
    ++v27;
  }
  while (v29 != v27);
  v106 = v18;
  v30 = v20;
  if (v17 != v18)
  {
    v113 = *a1;
    v31 = *a2;
    v32 = 2;
    if (v26 <= 2)
      v26 = 2;
    if (v118 > 2)
      v32 = v118;
    v115 = v32;
    v119 = *v28;
    for (i = 1; i != v115; ++i)
    {
      v34 = *(int **)(v116 + 24 * i);
      *v34 = ++v119;
      if (v117 != v30)
      {
        v35 = v119;
        for (j = 1; j != v26; ++j)
        {
          v37 = v28[j - 1];
          v38 = (unsigned __int8 **)(v31 + 24 * (j - 1));
          v39 = *(unsigned __int8 *)(v113 + 24 * i - 1);
          if ((v39 & 0x80u) == 0)
            v40 = (unsigned __int8 *)*(unsigned __int8 *)(v113 + 24 * i - 1);
          else
            v40 = *(unsigned __int8 **)(v113 + 24 * i - 16);
          v41 = (unsigned __int8 *)*((unsigned __int8 *)v38 + 23);
          v42 = (char)v41;
          if ((char)v41 < 0)
            v41 = v38[1];
          if (v40 == v41)
          {
            if (v42 >= 0)
              v43 = (unsigned __int8 *)(v31 + 24 * (j - 1));
            else
              v43 = *v38;
            if ((v39 & 0x80) != 0)
            {
              v53 = memcmp(*(const void **)(v113 + 24 * i - 24), v43, *(_QWORD *)(v113 + 24 * i - 16)) == 0;
            }
            else if (*(_BYTE *)(v113 + 24 * i - 1))
            {
              v44 = v39 - 1;
              v45 = (unsigned __int8 *)(v113 + 24 * i - 24);
              do
              {
                v47 = *v45++;
                v46 = v47;
                v49 = *v43++;
                v48 = v49;
                v50 = v44-- != 0;
                v51 = v50;
                v52 = v46 == v48;
                v53 = v46 == v48;
              }
              while (v52 && (v51 & 1) != 0);
            }
            else
            {
              v53 = 1;
            }
          }
          else
          {
            v53 = 0;
          }
          v54 = v37 + !v53;
          v55 = v28[j];
          if (v35 < v55)
            v55 = v35;
          if (v55 + 1 < v54)
            v35 = v55 + 1;
          else
            v35 = v54;
          v34[j] = v35;
        }
      }
      v28 = v34;
      v30 = v20;
    }
  }
  if (v17 != v106)
  {
    v57 = v110;
    v56 = v111;
    v58 = v108;
    v59 = v109;
    v60 = v107;
    if (!v108)
      goto LABEL_83;
    goto LABEL_63;
  }
  v57 = v110;
  v56 = v111;
  v58 = v108;
  v59 = v109;
  v60 = v107;
  if (v117 != v30)
  {
    do
    {
      if (!v58)
      {
LABEL_83:
        v62 = 0;
        v81 = v56 - 1;
        goto LABEL_101;
      }
LABEL_63:
      if (!v56)
      {
        v81 = 0;
        v62 = v58 - 1;
        memset(&v121, 0, sizeof(v121));
        memset(&v120, 0, sizeof(v120));
LABEL_102:
        v89 = (const std::string *)(*a1 + 24 * v62);
        v58 = v62;
        goto LABEL_103;
      }
      v61 = v58;
      v62 = v58 - 1;
      v63 = v122[0];
      v64 = 3 * (v58 - 1);
      v65 = *(_QWORD *)(v122[0] + 24 * (v58 - 1));
      v66 = *(_DWORD *)(v65 + 4 * (v56 - 1));
      v67 = (unsigned __int8 *)(*a1 + 8 * v64);
      v68 = *v57 + 24 * (v56 - 1);
      v69 = v67[23];
      if ((v69 & 0x80u) == 0)
        v70 = v67[23];
      else
        v70 = *((_QWORD *)v67 + 1);
      v71 = *(unsigned __int8 *)(v68 + 23);
      v72 = (char)v71;
      if ((v71 & 0x80u) != 0)
        v71 = *(_QWORD *)(v68 + 8);
      if (v70 == v71)
      {
        if (v72 >= 0)
          v73 = (unsigned __int8 *)(*v57 + 24 * (v56 - 1));
        else
          v73 = *(unsigned __int8 **)v68;
        if ((v69 & 0x80) != 0)
        {
          v80 = memcmp(*(const void **)v67, v73, *((_QWORD *)v67 + 1)) == 0;
        }
        else if (v67[23])
        {
          v74 = v69 - 1;
          do
          {
            v76 = *v67++;
            v75 = v76;
            v78 = *v73++;
            v77 = v78;
            v50 = v74-- != 0;
            v79 = v50;
            v52 = v75 == v77;
            v80 = v75 == v77;
          }
          while (v52 && (v79 & 1) != 0);
        }
        else
        {
          v80 = 1;
        }
      }
      else
      {
        v80 = 0;
      }
      v82 = v66 + !v80;
      LODWORD(__src.__r_.__value_.__l.__data_) = v82;
      v83 = *(_DWORD *)(v65 + 4 * v56);
      HIDWORD(__src.__r_.__value_.__r.__words[0]) = v83 + 1;
      v58 = v61;
      v84 = *(_DWORD *)(*(_QWORD *)(v63 + 24 * v61) + 4 * (v56 - 1));
      LODWORD(__src.__r_.__value_.__r.__words[1]) = v84 + 1;
      if (v84 >= v83)
        v85 = v83 + 1;
      else
        v85 = v84 + 1;
      if (v85 < v82)
        v82 = v85;
      v86 = *v112;
      v87 = v112[1];
      if (*v112 == v87)
      {
LABEL_96:
        v62 = 0;
        v81 = 0;
        goto LABEL_101;
      }
      while (1)
      {
        v88 = *v86;
        if (*((_DWORD *)&__src.__r_.__value_.__l.__data_ + v88) == v82)
          break;
        if (++v86 == v87)
          goto LABEL_96;
      }
      if ((_DWORD)v88)
      {
        v81 = v56;
        if ((_DWORD)v88 == 1)
          goto LABEL_101;
        v62 = v61;
      }
      v81 = v56 - 1;
LABEL_101:
      memset(&v121, 0, sizeof(v121));
      memset(&v120, 0, sizeof(v120));
      v89 = v60;
      if (v62 != v58)
        goto LABEL_102;
LABEL_103:
      std::string::operator=(&v121, v89);
      if (v81 == v56)
        v90 = v60;
      else
        v90 = (const std::string *)(*v57 + 24 * v81);
      std::string::operator=(&v120, v90);
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&__src, (__int128 *)&v121, (__int128 *)&v120);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v59, (__int128 *)&__src);
      if (v125 < 0)
        operator delete(__p);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__src.__r_.__value_.__l.__data_);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      v56 = v81;
    }
    while (v58 | v81);
  }
  v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59->__end_ - (char *)v59->__begin_) >> 4);
  if (v91 >= 2)
  {
    v92 = 0;
    v93 = v91 >> 1;
    if (v91 >> 1 <= 1)
      v93 = 1;
    v94 = 16 * (((char *)v59->__end_ - (char *)v59->__begin_) >> 4);
    do
    {
      v95 = &v59->__begin_[v92];
      v96 = (char *)v59->__begin_ + v94;
      v97 = v95->first.__r_.__value_.__r.__words[2];
      v98 = *(_OWORD *)&v95->first.__r_.__value_.__l.__data_;
      v99 = *((_QWORD *)v96 - 4);
      *(_OWORD *)&v95->first.__r_.__value_.__l.__data_ = *((_OWORD *)v96 - 3);
      v95->first.__r_.__value_.__r.__words[2] = v99;
      *((_OWORD *)v96 - 3) = v98;
      *((_QWORD *)v96 - 4) = v97;
      v100 = v95->second.__r_.__value_.__r.__words[2];
      v101 = *(_OWORD *)&v95->second.__r_.__value_.__l.__data_;
      v102 = *((_QWORD *)v96 - 1);
      *(_OWORD *)&v95->second.__r_.__value_.__l.__data_ = *(_OWORD *)(v96 - 24);
      v95->second.__r_.__value_.__r.__words[2] = v102;
      *(_OWORD *)(v96 - 24) = v101;
      *((_QWORD *)v96 - 1) = v100;
      ++v92;
      v94 -= 48;
      --v93;
    }
    while (v93);
  }
  v103 = *(unsigned int *)(*(_QWORD *)(v122[0] + 24 * v105) + 4 * v111);
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  return v103;
}

void sub_1ADE07450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  uint64_t v13;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v6;
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v11)
    v12 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  else
    v12 = 0;
  __v.__first_ = v12;
  __v.__begin_ = v12 + v5;
  __v.__end_cap_.__value_ = &v12[v11];
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&__v.__begin_->first, a2, a3);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  return v13;
}

void sub_1ADE075B8(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

std::pair<std::string, std::string> *std::vector<std::pair<std::string,std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string>*>,std::__wrap_iter<std::pair<std::string,std::string>*>>(std::vector<std::pair<std::string, std::string>> *a1, std::pair<std::string, std::string> *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::pair<std::string, std::string> *v5;
  std::string *v7;
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v10;
  std::pair<std::string, std::string> *value;
  std::pair<std::string, std::string> *v12;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::pair<std::string, std::string> *v19;
  uint64_t v20;
  __int128 *v21;
  std::pair<std::string, std::string> *v22;
  uint64_t v23;
  std::pair<std::string, std::string> *v24;
  uint64_t v25;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::pair<std::string, std::string> *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 4)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 4)) >= a5)
      {
        v21 = (__int128 *)&a3[2 * a5];
      }
      else
      {
        v21 = (__int128 *)((char *)a3 + 16 * (((char *)v12 - (char *)a2) >> 4));
        a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::pair<std::string,std::string>>::__move_range(a1, v5, v12, &v5[a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>((int)&__v, v7, (std::string *)v21, &v5->first);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 4);
      if (v14 > 0x555555555555555)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      v22 = v19 + v15;
      __v.__first_ = v19;
      __v.__begin_ = v22;
      __v.__end_ = v22;
      __v.__end_cap_.__value_ = &v19[v18];
      v23 = 3 * a5;
      v24 = &v22[a5];
      v25 = 16 * v23;
      do
      {
        std::pair<std::string,std::string>::pair[abi:ne180100](&v22->first, (__int128 *)v7);
        ++v22;
        v7 += 2;
        v25 -= 48;
      }
      while (v25);
      __v.__end_ = v24;
      v5 = std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
    }
  }
  return v5;
}

void sub_1ADE0778C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__move_range(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>>::pointer __from_s, std::vector<std::pair<std::string, std::string>>::pointer __from_e, std::vector<std::pair<std::string, std::string>>::pointer __to)
{
  std::vector<std::pair<std::string, std::string>>::pointer end;
  __int128 *v7;
  std::vector<std::pair<std::string, std::string>>::pointer v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  end = this->__end_;
  v7 = (__int128 *)((char *)__from_s + (char *)end - (char *)__to);
  v8 = end;
  if (v7 < (__int128 *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->first.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->first.__r_.__value_.__l.__data_ = v10;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v11 = *(_OWORD *)(v9 + 24);
      v8->second.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 40);
      *(_OWORD *)&v8->second.__r_.__value_.__l.__data_ = v11;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      ++v8;
      v9 += 48;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,0>((__int128 *)__from_s, v7, (uint64_t)end);
}

std::vector<std::pair<std::string, std::string>>::pointer std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v, std::vector<std::pair<std::string, std::string>>::pointer __p)
{
  std::pair<std::string, std::string> *begin;
  std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>>> *p_end_cap;
  std::pair<std::string, std::string> *v8;
  std::pair<std::string, std::string> *v9;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 48;
      std::pair<std::string,std::string>::operator=[abi:ne180100](a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int const&,int const&>(uint64_t *a1, const quasar::Token *a2, int *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int v15;
  int v16;
  std::string *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string *v22;
  char *v23;
  uint64_t *v24;

  v5 = *a1;
  v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x34F72C234F72C235 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x8D3DCB08D3DCB0)
    v13 = 0x11A7B9611A7B961;
  else
    v13 = v7;
  v24 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v11, v13);
  else
    v14 = 0;
  v20 = v14;
  v21 = (std::string *)&v14[232 * v6];
  v22 = v21;
  v23 = &v14[232 * v13];
  v15 = *a3;
  v16 = *a4;
  quasar::Token::Token(v21, a2);
  v17 = v21;
  LODWORD(v21[9].__r_.__value_.__r.__words[1]) = v15;
  HIDWORD(v17[9].__r_.__value_.__r.__words[1]) = v16;
  v22 = (std::string *)((char *)v22 + 232);
  std::vector<quasar::PartialHistory::AnnotatedToken>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1ADE07B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::PartialHistory::AnnotatedToken>::__init_with_size[abi:ne180100]<quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PartialHistory::AnnotatedToken>,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADE07B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PartialHistory::AnnotatedToken>,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::Token::Token((std::string *)(a4 + v7), (const quasar::Token *)(a2 + v7))[9].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + v7 + 224);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADE07C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 232;
    do
    {
      quasar::Token::~Token((void **)(v4 + v2));
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::emplace_back<std::vector<quasar::PartialHistory::AnnotatedToken>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADE07D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

__int128 *std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(uint64_t *a1, __int128 *a2, const quasar::Token *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  const quasar::Token *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  _QWORD v26[2];
  std::string *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 5) >= a5)
      {
        v21 = (uint64_t)a3 + 224 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 32 * ((uint64_t)(v12 - (_QWORD)a2) >> 5);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<quasar::Token>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x92492492492492)
        v18 = 0x124924924924924;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v9, v18);
      else
        v19 = 0;
      v22 = (std::string *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[224 * v18];
      v23 = 224 * a5;
      v24 = (std::string *)((char *)v22 + 224 * a5);
      do
      {
        quasar::Token::Token(v22, v7);
        v22 = (std::string *)((char *)v22 + 224);
        v7 = (const quasar::Token *)((char *)v7 + 224);
        v23 -= 224;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1ADE08158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token>&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADE081E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token>&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v15 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADE082FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(uint64_t *a1, const quasar::Token *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[224 * v4];
  v16 = &v10[224 * v9];
  quasar::Token::Token(v14, a2);
  v15 = &v14[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADE08418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADE0848C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADE084E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (std::locale *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, std::locale *a2)
{
  std::locale *v4;
  std::locale *v5;

  v4 = *(std::locale **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 9;
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v4[-4]);
      std::locale::~locale(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__emplace_back_slow_path<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[72 * v9];
  std::locale::locale((std::locale *)v11, (const std::locale *)a2);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *((_DWORD *)v11 + 16) = *(_DWORD *)(a2 + 64);
  v14[2] = v11 + 72;
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADE086C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 72), (const std::locale *)(v9 - 72));
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(v9 - 48);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(v9 - 32);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(v9 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      v9 -= 72;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  std::locale *v1;
  std::locale *v2;

  v1 = *(std::locale **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(std::locale **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
    std::locale::~locale(v1);
    v1 += 9;
  }
}

uint64_t std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  std::locale *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (std::locale *)(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 32);
    std::locale::~locale(v5);
  }
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF540;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF540;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 176);
  if (*(_BYTE *)(v1 + 304))
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 296);
    if (v4)
      v3 = *(_QWORD *)(v4 + 160) == *(_QWORD *)(v4 + 168);
    else
      v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v2 + 48))(v2, v3);
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF4E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF4E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 176);
  if (*(_BYTE *)(v1 + 304))
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 296);
    if (v4)
      v3 = *(_QWORD *)(v4 + 160) == *(_QWORD *)(v4 + 168);
    else
      v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v2 + 48))(v2, v3);
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<quasar::result_handler::CommandData>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 184;
        std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::result_handler::CommandData>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADE08BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::result_handler::CommandData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1642C8590B21643)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::result_handler::CommandData::CommandData(v4, v6);
      v6 += 184;
      v4 = v11 + 184;
      v11 += 184;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE08CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 184;
      std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF598;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF598;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 176);
  if (*(_BYTE *)(v1 + 304))
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 296);
    if (v4)
      v3 = *(_QWORD *)(v4 + 160) == *(_QWORD *)(v4 + 168);
    else
      v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v2 + 48))(v2, v3);
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target_type()
{
}

void std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::result_handler::CommandData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
      quasar::result_handler::CommandData::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__construct_at[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData,quasar::result_handler::CommandData*>(a1, a2);
    *(_BYTE *)(a1 + 184) = 1;
  }
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF490;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF490;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 176);
  if (*(_BYTE *)(v1 + 304))
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 296);
    if (v4)
      v3 = *(_QWORD *)(v4 + 160) == *(_QWORD *)(v4 + 168);
    else
      v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v2 + 48))(v2, v3);
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[184 * v4];
  v16 = &v10[184 * v9];
  quasar::result_handler::CommandData::CommandData((uint64_t)v14, a2);
  v15 = v14 + 184;
  std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADE090B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        v21 = a3 + 184 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<quasar::result_handler::CommandData>::__move_range((uint64_t)a1, v5, v12, v5 + 184 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>,quasar::result_handler::CommandData*,0>(v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x2C8590B21642C859 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x1642C8590B21642)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xD37A6F4DE9BD37A7 * ((a2 - v13) >> 3);
      v16 = 0xD37A6F4DE9BD37A7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0xB21642C8590B21)
        v18 = 0x1642C8590B21642;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(v9, v18);
      else
        v19 = 0;
      v22 = &v19[184 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[184 * v18];
      v23 = 184 * a5;
      v24 = &v22[184 * a5];
      do
      {
        quasar::result_handler::CommandData::CommandData((uint64_t)v22, v7);
        v22 += 184;
        v7 += 184;
        v23 -= 184;
      }
      while (v23);
      v27 = v24;
      v5 = std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1ADE092A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(a1 + 16, v8, v10);
      v10 += 184;
      v8 += 184;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::result_handler::CommandData::CommandData(v4, v6);
      v6 += 184;
      v4 = v11 + 184;
      v11 += 184;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE09498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 184;
      a3 -= 184;
      quasar::result_handler::CommandData::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>,quasar::result_handler::CommandData*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::result_handler::CommandData::operator=(a3, v4);
      v4 += 184;
      a3 += 184;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(a1, v4, v6);
      v6 += 184;
      v4 = v12 + 184;
      v12 += 184;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

quasar::result_handler::Package *quasar::result_handler::Package::Package(quasar::result_handler::Package *this, const quasar::result_handler::Package *a2)
{
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(this, *(uint64_t **)a2, *((uint64_t **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)this + 3, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((_QWORD *)this + 6, *((uint64_t **)a2 + 6), *((uint64_t **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  v4 = *((_QWORD *)a2 + 9);
  v5 = *((_WORD *)a2 + 40);
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 40) = v5;
  *((_QWORD *)this + 9) = v4;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 14, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 17, *((const void **)a2 + 17), *((_QWORD *)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>((_QWORD *)this + 20, *((_QWORD *)a2 + 20), *((_QWORD *)a2 + 21), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3));
  std::__optional_copy_base<quasar::result_handler::CommandData,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 184, (uint64_t)a2 + 184);
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)this + 47, *((_QWORD *)a2 + 47), *((_QWORD *)a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 48) - *((_QWORD *)a2 + 47)) >> 5));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)this + 50, *((_QWORD *)a2 + 50), *((_QWORD *)a2 + 51), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 51) - *((_QWORD *)a2 + 50)) >> 5));
  *((_BYTE *)this + 424) = *((_BYTE *)a2 + 424);
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 54) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((_QWORD *)this + 54, *((_QWORD *)a2 + 54), *((_QWORD *)a2 + 55), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 55) - *((_QWORD *)a2 + 54)) >> 5));
  v6 = *(_OWORD *)((char *)a2 + 456);
  v7 = *(_OWORD *)((char *)a2 + 472);
  *((_QWORD *)this + 61) = *((_QWORD *)a2 + 61);
  *(_OWORD *)((char *)this + 456) = v6;
  *(_OWORD *)((char *)this + 472) = v7;
  return this;
}

void sub_1ADE09810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  uint64_t v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  void *v19;

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100](a10);
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a12);
  v17 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 144) = v17;
    operator delete(v17);
  }
  v18 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 120) = v18;
    operator delete(v18);
  }
  v19 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 96) = v19;
    operator delete(v19);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)v12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1ADE098D8()
{
  JUMPOUT(0x1ADE098B4);
}

void sub_1ADE098E0()
{
  JUMPOUT(0x1ADE098C4);
}

_BYTE *std::__optional_copy_base<quasar::result_handler::CommandData,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[184] = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    quasar::result_handler::CommandData::CommandData((uint64_t)a1, a2);
    a1[184] = 1;
  }
  return a1;
}

void sub_1ADE09928(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::utf8Length(uint64_t **a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  void **v4;
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  char v8;
  void *__p[2];
  uint64_t v10;
  _OWORD v11[17];

  v1 = (unint64_t)a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v2 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (uint64_t **)*a1;
    v2 = v1;
  }
  quasar::utf8::codepointsCtr(a1, v2, 0, v2, (unint64_t)v6);
  if (v8)
    return LODWORD(v6[0]);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v10 = v7;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  if (quasar::gLogLevel >= 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if (v10 >= 0)
      v5 = HIBYTE(v10);
    else
      v5 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  result = 0;
  if (!v8 && SHIBYTE(v7) < 0)
  {
    operator delete(v6[0]);
    return 0;
  }
  return result;
}

void sub_1ADE09A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a23);
  if (a21 < 0)
    operator delete(__p);
  if (!a15 && a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void quasar::removeUtf8Suffix(std::string *a1, int a2)
{
  unint64_t v2;
  int v3;
  int v4;
  unint64_t size;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type v10;

  v2 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (a2 > 0)
  {
    v3 = 0;
    v4 = 0;
    size = a1->__r_.__value_.__l.__size_;
    if ((v2 & 0x80u) == 0)
      v6 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v6 = a1->__r_.__value_.__l.__size_;
    while (1)
    {
      if (v6 <= v4)
        goto LABEL_16;
      v7 = v4++;
      v8 = ~v7;
      if ((v2 & 0x80) == 0)
        break;
      while (1)
      {
        v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
        v10 = a1->__r_.__value_.__l.__size_;
        if (size <= v7)
          break;
LABEL_10:
        if ((v9->__r_.__value_.__s.__data_[v10 + v8] & 0xC0) != 0x80)
          break;
        ++v7;
        ++v4;
        --v8;
        if ((v2 & 0x80) == 0)
          goto LABEL_7;
      }
LABEL_13:
      if (++v3 == a2)
        goto LABEL_16;
    }
LABEL_7:
    v9 = a1;
    v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v7 >= v2)
      goto LABEL_13;
    goto LABEL_10;
  }
  v4 = 0;
  size = a1->__r_.__value_.__l.__size_;
LABEL_16:
  if ((v2 & 0x80u) != 0)
    v2 = size;
  std::string::resize(a1, v2 - v4, 0);
}

std::string *quasar::removeUtf8Prefix(std::string *a1, int a2)
{
  int v2;
  int v3;
  unint64_t size;
  BOOL v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  if (a2 < 1)
  {
    v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v5 = (size & 0x80u) != 0;
    if ((size & 0x80u) != 0)
      size = a1->__r_.__value_.__l.__size_;
    if (v5)
      v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
    else
      v6 = a1;
    v7 = (uint64_t)v6->__r_.__value_.__r.__words + 1;
    do
    {
      if (size <= v3)
        break;
      v8 = v3;
      ++v2;
      v9 = v3 + 1;
      if (size > v9)
        LODWORD(v9) = size;
      while (1)
      {
        v3 = v8 + 1;
        if (size <= v8 + 1)
          break;
        v10 = *(_BYTE *)(v7 + v8++) & 0xC0;
        if (v10 != 128)
          goto LABEL_15;
      }
      v3 = v9;
LABEL_15:
      ;
    }
    while (v2 != a2);
  }
  return std::string::erase(a1, 0, v3);
}

void quasar::utf8toAscii(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  std::string::value_type *v4;
  uint64_t v5;
  int v6;
  std::string::value_type v7;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (std::string::value_type *)a1;
  else
    v4 = *(std::string::value_type **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  for (; v5; --v5)
  {
    v6 = *v4;
    if ((v6 & 0xFFFFFFC0) != 0xFFFFFF80)
    {
      if (v6 < 0)
        v7 = 63;
      else
        v7 = *v4;
      std::string::push_back(a2, v7);
    }
    ++v4;
  }
}

void sub_1ADE09C58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::DoNotTranslateBlock::performReplacements(uint64_t a1, _QWORD *a2, std::string *a3, uint64_t a4, uint64_t **a5)
{
  _QWORD *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t size;
  _BOOL4 v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int i;
  uint64_t v23;
  int v24;
  const std::string *v25;
  const std::string *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  const quasar::TranslationTokenInternal *v67;
  std::string *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  char *v84;
  _QWORD *v85;
  _QWORD *v86;
  BOOL v87;
  unint64_t v88;
  uint64_t j;
  _QWORD *v90;
  std::string *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  std::string v97;
  __int16 v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  void *v104;
  char v105;
  void *v106;
  void *v107;
  const std::string *v108;
  const std::string *v109;
  uint64_t v110;
  std::string v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _QWORD v116[4];
  _QWORD v117[4];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int *v127[4];
  uint64_t v128;
  _QWORD *v129;

  v128 = 0;
  v127[0] = (int *)&v128 + 1;
  v127[1] = (int *)a4;
  v127[2] = (int *)a1;
  v127[3] = (int *)&v128;
  v6 = (_QWORD *)*a2;
  v90 = a2 + 1;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v88 = 0;
    goto LABEL_132;
  }
  v91 = a3;
  do
  {
    v8 = *(_QWORD *)((char *)v6 + 36);
    v9 = HIDWORD(v8);
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    {
      size = a3->__r_.__value_.__l.__size_;
      v11 = size < (int)v8;
      if (size < (int)v8)
        LODWORD(v8) = a3->__r_.__value_.__l.__size_;
      v93 = v8;
      if (size < (int)v8 + (int)v9)
      {
LABEL_8:
        v92 = size - v93;
        v11 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      v11 = (int)v8 > size;
      v12 = (int)size + HIDWORD(v8);
      if ((int)v8 > size)
        LODWORD(v8) = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v12 = HIDWORD(v8) + (int)v8;
      v93 = v8;
      if (v12 > size)
        goto LABEL_8;
    }
    v92 = v9;
LABEL_13:
    if (v11 && quasar::gLogLevel >= 2)
    {
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v118 = 0u;
      memset(v117, 0, sizeof(v117));
      v115 = 0u;
      memset(v116, 0, sizeof(v116));
      v113 = 0u;
      v114 = 0u;
      v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Source span [", 13);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] for out of bounds.", 20);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v112);
    }
    v94 = *((_DWORD *)v6 + 8);
    v95 = *((_DWORD *)v6 + 7);
    *(_QWORD *)&v112 = (char *)v6 + 36;
    *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, (_QWORD **)&v112)+ 9) = 0;
    if (quasar::gLogLevel >= 6)
    {
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v118 = 0u;
      memset(v117, 0, sizeof(v117));
      v115 = 0u;
      memset(v116, 0, sizeof(v116));
      v113 = 0u;
      v114 = 0u;
      v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"mapping [", 9);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] -> [", 6);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
      if (quasar::gLogLevel >= 6)
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v118 = 0u;
        memset(v117, 0, sizeof(v117));
        v115 = 0u;
        memset(v116, 0, sizeof(v116));
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Tokens:", 7);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
      }
    }
    for (i = v128;
          0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3) > SHIDWORD(v128)
       && (int)v128 < v95;
          i = v128)
    {
      quasar::DoNotTranslateBlock::performReplacements(quasar::TranslationPhraseInternal const&,std::map<std::pair<int,int>,std::pair<int,int>> const&,std::string const&,std::vector<quasar::TranslationTokenInternal> &,std::map<std::pair<int,int>,int> &)::$_0::operator()(v127);
    }
    if (i != v95)
    {
      v23 = *(_QWORD *)(a4 + 8);
      if (*(_QWORD *)a4 == v23)
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v118 = 0u;
        memset(v117, 0, sizeof(v117));
        v115 = 0u;
        memset(v116, 0, sizeof(v116));
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v112, "Logic error! newTokens should not be empty here.");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v112);
      }
      v24 = *(unsigned __int8 *)(v23 - 112);
      if (quasar::gLogLevel >= 6)
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v118 = 0u;
        memset(v117, 0, sizeof(v117));
        v115 = 0u;
        memset(v116, 0, sizeof(v116));
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       shrinking token before replacement", 41);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        v23 = *(_QWORD *)(a4 + 8);
      }
      quasar::removeUtf8Suffix((std::string *)(v23 - 136), i - v95 - v24);
      *(_BYTE *)(*(_QWORD *)(a4 + 8) - 112) = 0;
    }
    quasar::utf8::substr(v91, v93, v92, &v111);
    v108 = 0;
    v109 = 0;
    v110 = 0;
    kaldi::SplitStringToVector(&v111, " ", 1, (uint64_t)&v108);
    v26 = v108;
    v25 = v109;
    if (v108 != v109)
    {
      do
      {
        v99 = 0;
        v100 = 0;
        v101 = 0;
        memset(&v97, 0, sizeof(v97));
        v98 = 0;
        v102 = 3212836864;
        v103 = -1;
        std::string::operator=(&v97, v26);
        LODWORD(v102) = 1148846080;
        LOBYTE(v98) = 1;
        quasar::TranslationTokenInternal::TranslationTokenInternal((std::string *)&v112, (const quasar::TranslationToken *)&v97);
        v27 = *(_QWORD *)(a4 + 8);
        if (v27 >= *(_QWORD *)(a4 + 16))
        {
          v31 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal>((uint64_t *)a4, &v112);
          v32 = (void *)v117[1];
          *(_QWORD *)(a4 + 8) = v31;
          if (v32)
          {
            v117[2] = v32;
            operator delete(v32);
          }
        }
        else
        {
          v28 = v112;
          *(_QWORD *)(v27 + 16) = v113;
          *(_OWORD *)v27 = v28;
          *(_QWORD *)&v113 = 0;
          v112 = 0uLL;
          *(_WORD *)(v27 + 24) = WORD4(v113);
          *(_QWORD *)(v27 + 40) = 0;
          *(_QWORD *)(v27 + 48) = 0;
          *(_QWORD *)(v27 + 32) = 0;
          *(_OWORD *)(v27 + 32) = v114;
          *(_QWORD *)(v27 + 48) = v115;
          v114 = 0uLL;
          *(_QWORD *)&v115 = 0;
          v29 = *((_QWORD *)&v115 + 1);
          *(_DWORD *)(v27 + 64) = v116[0];
          *(_QWORD *)(v27 + 56) = v29;
          v30 = *(_OWORD *)&v116[1];
          *(_QWORD *)(v27 + 88) = v116[3];
          *(_OWORD *)(v27 + 72) = v30;
          memset(&v116[1], 0, 24);
          *(_QWORD *)(v27 + 96) = v117[0];
          *(_QWORD *)(v27 + 104) = 0;
          *(_QWORD *)(v27 + 112) = 0;
          *(_QWORD *)(v27 + 120) = 0;
          *(_OWORD *)(v27 + 104) = *(_OWORD *)&v117[1];
          *(_QWORD *)(v27 + 120) = v117[3];
          memset(&v117[1], 0, 24);
          *(_QWORD *)(v27 + 128) = v118;
          *(_QWORD *)(a4 + 8) = v27 + 136;
        }
        if (SHIBYTE(v116[3]) < 0)
          operator delete((void *)v116[1]);
        if ((_QWORD)v114)
        {
          *((_QWORD *)&v114 + 1) = v114;
          operator delete((void *)v114);
        }
        if (SBYTE7(v113) < 0)
          operator delete((void *)v112);
        if (quasar::gLogLevel >= 6)
        {
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v118 = 0u;
          memset(v117, 0, sizeof(v117));
          v115 = 0u;
          memset(v116, 0, sizeof(v116));
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   DNT copy: '", 14);
          v34 = *(_QWORD *)(a4 + 8);
          v37 = *(_QWORD *)(v34 - 136);
          v35 = v34 - 136;
          v36 = v37;
          v38 = *(char *)(v35 + 23);
          if (v38 >= 0)
            v39 = v35;
          else
            v39 = v36;
          if (v38 >= 0)
            v40 = *(unsigned __int8 *)(v35 + 23);
          else
            v40 = *(_QWORD *)(v35 + 8);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v39, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"'", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        }
        v42 = quasar::utf8Length((uint64_t **)&v97);
        v129 = (_QWORD *)((char *)v6 + 36);
        v43 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v129);
        *((_DWORD *)v43 + 9) += v42 + 1;
        if (v99)
        {
          v100 = v99;
          operator delete(v99);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        ++v26;
      }
      while (v26 != v25);
      if (v108 != v109)
      {
        *(_BYTE *)(*(_QWORD *)(a4 + 8) - 112) = 0;
        v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + 36;
        v44 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v97);
        --*((_DWORD *)v44 + 9);
      }
    }
    v45 = HIDWORD(v128);
    v46 = *(_QWORD *)(a1 + 136);
    if (HIDWORD(v128))
    {
      --HIDWORD(v128);
      v47 = quasar::utf8Length((uint64_t **)(v46 + 136 * (v45 - 1)));
      v48 = HIDWORD(v128);
      v46 = *(_QWORD *)(a1 + 136);
      LODWORD(v128) = v128 - v47 - *(unsigned __int8 *)(v46 + 136 * SHIDWORD(v128) + 24);
      if (quasar::gLogLevel >= 6)
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v118 = 0u;
        memset(v117, 0, sizeof(v117));
        v115 = 0u;
        memset(v116, 0, sizeof(v116));
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   step backward to: '", 22);
        v50 = *(_QWORD *)(a1 + 136) + 136 * SHIDWORD(v128);
        v51 = *(char *)(v50 + 23);
        if (v51 >= 0)
          v52 = *(_QWORD *)(a1 + 136) + 136 * SHIDWORD(v128);
        else
          v52 = *(_QWORD *)v50;
        if (v51 >= 0)
          v53 = *(unsigned __int8 *)(v50 + 23);
        else
          v53 = *(_QWORD *)(v50 + 8);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' / ", 4);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        v48 = HIDWORD(v128);
        v46 = *(_QWORD *)(a1 + 136);
      }
    }
    else
    {
      v48 = 0;
    }
    v55 = v48;
    v56 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 144) - v46) >> 3);
    if (v56 > v48)
    {
      while (1)
      {
        v57 = v128;
        v58 = quasar::utf8Length((uint64_t **)(v46 + 136 * v55));
        v55 = SHIDWORD(v128);
        v46 = *(_QWORD *)(a1 + 136);
        v59 = v46 + 136 * SHIDWORD(v128);
        if (v94 + v95 < v58 + v57 + *(unsigned __int8 *)(v59 + 24))
          break;
        v60 = quasar::utf8Length((uint64_t **)(v46 + 136 * SHIDWORD(v128)));
        LODWORD(v128) = v60 + v128 + *(unsigned __int8 *)(v59 + 24);
        if (quasar::gLogLevel >= 6)
        {
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v118 = 0u;
          memset(v117, 0, sizeof(v117));
          v115 = 0u;
          memset(v116, 0, sizeof(v116));
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   discarding: '", 16);
          v62 = *(char *)(v59 + 23);
          if (v62 >= 0)
            v63 = v59;
          else
            v63 = *(_QWORD *)v59;
          if (v62 >= 0)
            v64 = *(unsigned __int8 *)(v59 + 23);
          else
            v64 = *(_QWORD *)(v59 + 8);
          v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"' / ", 4);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        }
        v55 = SHIDWORD(v128) + 1;
        ++HIDWORD(v128);
        v46 = *(_QWORD *)(a1 + 136);
        v56 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 144) - v46) >> 3);
        if (v56 <= v55)
          goto LABEL_84;
      }
      v56 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 144) - v46) >> 3);
    }
LABEL_84:
    if (v56 > v55)
    {
      v66 = v94 + v95 - v128;
      if (v94 + v95 > (int)v128)
      {
        v67 = (const quasar::TranslationTokenInternal *)(v46 + 136 * v55);
        if (*((_BYTE *)v67 + 24) && v66 == quasar::utf8Length((uint64_t **)v67))
        {
          if (*(_BYTE *)(*(_QWORD *)(a4 + 8) - 112))
          {
            if (quasar::gLogLevel >= 6)
            {
              v125 = 0u;
              v126 = 0u;
              v123 = 0u;
              v124 = 0u;
              v121 = 0u;
              v122 = 0u;
              v119 = 0u;
              v120 = 0u;
              v118 = 0u;
              memset(v117, 0, sizeof(v117));
              v115 = 0u;
              memset(v116, 0, sizeof(v116));
              v113 = 0u;
              v114 = 0u;
              v112 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       already hasSpaceAfter of DNT token", 41);
              goto LABEL_115;
            }
          }
          else if (quasar::gLogLevel >= 6)
          {
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v118 = 0u;
            memset(v117, 0, sizeof(v117));
            v115 = 0u;
            memset(v116, 0, sizeof(v116));
            v113 = 0u;
            v114 = 0u;
            v112 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       setting hasSpaceAfter of DNT token", 41);
LABEL_115:
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
          }
          *(_BYTE *)(*(_QWORD *)(a4 + 8) - 112) = 1;
        }
        else
        {
          quasar::TranslationTokenInternal::TranslationTokenInternal(&v97, v67);
          quasar::removeUtf8Prefix(&v97, v66);
          v68 = *(std::string **)(a4 + 8);
          if (v68[-5].__r_.__value_.__s.__data_[8] && quasar::gLogLevel >= 6)
          {
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v118 = 0u;
            memset(v117, 0, sizeof(v117));
            v115 = 0u;
            memset(v116, 0, sizeof(v116));
            v113 = 0u;
            v114 = 0u;
            v112 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       removing hasSpaceAfter of DNT token", 42);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
            v68 = *(std::string **)(a4 + 8);
          }
          v68[-5].__r_.__value_.__s.__data_[8] = 0;
          if ((unint64_t)v68 >= *(_QWORD *)(a4 + 16))
          {
            v69 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)a4, (const quasar::TranslationTokenInternal *)&v97);
          }
          else
          {
            quasar::TranslationTokenInternal::TranslationTokenInternal(v68, (const quasar::TranslationTokenInternal *)&v97);
            v69 = (uint64_t)&v68[5].__r_.__value_.__r.__words[2];
            *(_QWORD *)(a4 + 8) = (char *)v68 + 136;
          }
          *(_QWORD *)(a4 + 8) = v69;
          if (quasar::gLogLevel >= 6)
          {
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v118 = 0u;
            memset(v117, 0, sizeof(v117));
            v115 = 0u;
            memset(v116, 0, sizeof(v116));
            v113 = 0u;
            v114 = 0u;
            v112 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   partial:  '", 14);
            v71 = *(_QWORD *)(a4 + 8);
            v74 = *(_QWORD *)(v71 - 136);
            v72 = v71 - 136;
            v73 = v74;
            v75 = *(char *)(v72 + 23);
            if (v75 >= 0)
              v76 = v72;
            else
              v76 = v73;
            if (v75 >= 0)
              v77 = *(unsigned __int8 *)(v72 + 23);
            else
              v77 = *(_QWORD *)(v72 + 8);
            v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v76, v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"'", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
          }
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          if (v105 < 0)
            operator delete(v104);
          if (v99)
          {
            v100 = v99;
            operator delete(v99);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
        v79 = quasar::utf8Length((uint64_t **)v67);
        LODWORD(v128) = v79 + v128 + *((unsigned __int8 *)v67 + 24);
        if (quasar::gLogLevel >= 6)
        {
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v118 = 0u;
          memset(v117, 0, sizeof(v117));
          v115 = 0u;
          memset(v116, 0, sizeof(v116));
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       tokenStartPos: '", 23);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        }
        ++HIDWORD(v128);
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v118 = 0u;
      memset(v117, 0, sizeof(v117));
      v115 = 0u;
      memset(v116, 0, sizeof(v116));
      v113 = 0u;
      v114 = 0u;
      v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"finished mapping [", 18);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
      v81 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"] -> [", 6);
      v82 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)", ", 2);
      v83 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"], actual source length: ", 25);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + 36;
      std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v97);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
    }
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + 36;
    v84 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v97);
    *((_DWORD *)v84 + 9) -= v94;
    *(_QWORD *)&v112 = &v108;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v85 = (_QWORD *)v6[1];
    if (v85)
    {
      do
      {
        v86 = v85;
        v85 = (_QWORD *)*v85;
      }
      while (v85);
    }
    else
    {
      do
      {
        v86 = (_QWORD *)v6[2];
        v87 = *v86 == (_QWORD)v6;
        v6 = v86;
      }
      while (!v87);
    }
    v6 = v86;
    a3 = v91;
  }
  while (v86 != v90);
  v88 = SHIDWORD(v128);
LABEL_132:
  for (j = (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3;
        0xF0F0F0F0F0F0F0F1 * j > v88;
        j = (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3)
  {
    quasar::DoNotTranslateBlock::performReplacements(quasar::TranslationPhraseInternal const&,std::map<std::pair<int,int>,std::pair<int,int>> const&,std::string const&,std::vector<quasar::TranslationTokenInternal> &,std::map<std::pair<int,int>,int> &)::$_0::operator()(v127);
    v88 = SHIDWORD(v128);
  }
}

void quasar::DoNotTranslateBlock::performReplacements(quasar::TranslationPhraseInternal const&,std::map<std::pair<int,int>,std::pair<int,int>> const&,std::string const&,std::vector<quasar::TranslationTokenInternal> &,std::map<std::pair<int,int>,int> &)::$_0::operator()(int **a1)
{
  uint64_t *v2;
  int v3;
  std::string *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v16[17];

  v2 = (uint64_t *)a1[1];
  v3 = **a1;
  v4 = (std::string *)v2[1];
  if (v3 && v4 != (std::string *)*v2 && *(_BYTE *)(*((_QWORD *)a1[2] + 17) + 136 * v3 - 112))
    v4[-5].__r_.__value_.__s.__data_[8] = 1;
  v5 = (unsigned __int8 *)(*((_QWORD *)a1[2] + 17) + 136 * v3);
  if ((unint64_t)v4 >= v2[2])
  {
    v6 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>(v2, (const quasar::TranslationTokenInternal *)v5);
  }
  else
  {
    quasar::TranslationTokenInternal::TranslationTokenInternal(v4, (const quasar::TranslationTokenInternal *)v5);
    v6 = (uint64_t)&v4[5].__r_.__value_.__r.__words[2];
    v2[1] = (uint64_t)&v4[5].__r_.__value_.__r.__words[2];
  }
  v2[1] = v6;
  *a1[3] += quasar::utf8Length((uint64_t **)v5) + v5[24];
  if (quasar::gLogLevel >= 6)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"    original: '", 15);
    v8 = *((_QWORD *)a1[1] + 1);
    v11 = *(_QWORD *)(v8 - 136);
    v9 = v8 - 136;
    v10 = v11;
    v12 = *(char *)(v9 + 23);
    if (v12 >= 0)
      v13 = v9;
    else
      v13 = v10;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v9 + 23);
    else
      v14 = *(_QWORD *)(v9 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' / ", 4);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v16);
  }
  ++**a1;
}

void sub_1ADE0AD74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void quasar::DoNotTranslateBlock::adjustAlignmentProjections(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  quasar::PTree *Child;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  quasar::PTree *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  quasar *v44;
  quasar *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v49;
  uint64_t v50;
  uint64_t v52;
  void *v53[2];
  char v54;
  unint64_t v55;
  void *__p[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t *v73;
  _QWORD *v74[3];

  v74[0] = 0;
  v74[1] = 0;
  v73 = (uint64_t *)v74;
  if (quasar::gLogLevel >= 6)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusting projections", 21);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
  }
  v46 = a3;
  v6 = (_QWORD *)*a1;
  v47 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v7 = 0;
    v49 = a4 - 1;
    do
    {
      v9 = *((_DWORD *)v6 + 7);
      v8 = *((_DWORD *)v6 + 8);
      __p[0] = (void *)(*((unsigned int *)v6 + 9) | ((unint64_t)(*((_DWORD *)v6 + 10)
                                                                                    - *((_DWORD *)v6 + 9)
                                                                                    + 1) << 32));
      v10 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::find<std::pair<int,int>>(a2, (int *)__p);
      if ((uint64_t *)(a2 + 8) == v10)
        v11 = 0;
      else
        v11 = *((_DWORD *)v10 + 9);
      if (v7 + v9 < 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range start is out of bounds: ", 39);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        v12 = 0;
      }
      else if (v7 + v9 >= a4)
      {
        v12 = a4 - 1;
        if (quasar::gLogLevel >= 2)
        {
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range start is out of bounds: ", 39);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          v12 = a4 - 1;
        }
      }
      else
      {
        v12 = v7 + v9;
      }
      v13 = v7 + v8 + v11;
      if (v13 >= a4)
      {
        v14 = v49;
        if (quasar::gLogLevel >= 2)
        {
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range end is out of bounds: ", 37);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          v14 = v49;
        }
      }
      else if (v13 < 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range end is out of bounds: ", 37);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        v14 = 0;
      }
      else
      {
        v14 = (v7 + v8 + v11);
      }
      __p[0] = (char *)v6 + 36;
      v15 = std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(&v73, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      v16 = (unint64_t *)v15[6];
      v17 = v15[7];
      if ((unint64_t)v16 >= v17)
      {
        v19 = v15[5];
        v20 = ((uint64_t)v16 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = v17 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v15 + 7), v23);
        else
          v24 = 0;
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v12 | (unint64_t)(v14 << 32);
        v18 = v25 + 8;
        v27 = (char *)v15[5];
        v26 = (char *)v15[6];
        if (v26 != v27)
        {
          do
          {
            v28 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *((_QWORD *)v25 - 1) = v28;
            v25 -= 8;
          }
          while (v26 != v27);
          v26 = (char *)v15[5];
        }
        v15[5] = (uint64_t)v25;
        v15[6] = (uint64_t)v18;
        v15[7] = (uint64_t)&v24[8 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v16 = v12 | (unint64_t)(v14 << 32);
        v18 = v16 + 1;
      }
      v15[6] = (uint64_t)v18;
      if (quasar::gLogLevel >= 6)
      {
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"    Changing target ", 20);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" to ", 4);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      v32 = (_QWORD *)v6[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v6[2];
          v34 = *v33 == (_QWORD)v6;
          v6 = v33;
        }
        while (!v34);
      }
      v7 += v11;
      v6 = v33;
    }
    while (v33 != v47);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment-queries");
  Child = (quasar::PTree *)quasar::PTree::getChild(v46, (__int128 *)__p);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  v36 = quasar::PTree::begin(Child);
  v50 = quasar::PTree::end(Child);
  if (v36 != v50)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      v37 = quasar::PTree::getInt<int>(v36 + 24, (__int128 *)__p);
      if (SBYTE7(v57) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "end");
      v38 = quasar::PTree::getInt<int>(v36 + 24, (__int128 *)__p);
      if (SBYTE7(v57) < 0)
        operator delete(__p[0]);
      v55 = v37 | (unint64_t)(v38 << 32);
      std::string::basic_string[abi:ne180100]<0>(__p, "projections");
      v39 = (quasar::PTree *)quasar::PTree::getChild(v36 + 24, (__int128 *)__p);
      if (SBYTE7(v57) < 0)
        operator delete(__p[0]);
      v52 = v36;
      v40 = quasar::PTree::begin(v39);
      v41 = quasar::PTree::end(v39);
      if (v40 != v41)
      {
        v42 = 0;
        do
        {
          __p[0] = &v55;
          v43 = (unsigned int *)(std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(&v73, (int *)&v55, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5]+ v42);
          v44 = (quasar *)*v43;
          v45 = (quasar *)v43[1];
          std::string::basic_string[abi:ne180100]<0>(v53, "start");
          LODWORD(__p[0]) = quasar::getType(v44);
          std::to_string((std::string *)&__p[1], (int)v44);
          v58 = 0uLL;
          *(_QWORD *)&v59 = 0;
          BYTE8(v59) = 1;
          quasar::PTree::replaceChild(v40 + 24, (__int128 *)v53, (uint64_t)__p);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          if (v54 < 0)
            operator delete(v53[0]);
          std::string::basic_string[abi:ne180100]<0>(v53, "end");
          LODWORD(__p[0]) = quasar::getType(v45);
          std::to_string((std::string *)&__p[1], (int)v45);
          v58 = 0uLL;
          *(_QWORD *)&v59 = 0;
          BYTE8(v59) = 1;
          quasar::PTree::replaceChild(v40 + 24, (__int128 *)v53, (uint64_t)__p);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          if (v54 < 0)
            operator delete(v53[0]);
          v40 += 88;
          v42 += 8;
        }
        while (v40 != v41);
      }
      v36 = v52 + 88;
    }
    while (v52 + 88 != v50);
  }
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy((uint64_t)&v73, v74[0]);
}

void sub_1ADE0B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(v27 - 112, *(_QWORD **)(v27 - 104));
  _Unwind_Resume(a1);
}

void quasar::DoNotTranslateBlock::processBody(quasar::DoNotTranslateBlock *this)
{
  quasar::ProcessingInput *v2;
  _QWORD *Value;
  quasar::TranslationPhraseInternal **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ChildOptional;
  uint64_t v8;
  quasar::PTree *Child;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  quasar::DoNotTranslateBlock *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  quasar::PTree *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  quasar::PTree *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  std::string *v55;
  unsigned int v56;
  int v57;
  std::string *v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _DWORD *v78;
  _DWORD *v79;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  quasar::TranslationPhraseInternal *v90;
  quasar::TranslationPhraseInternal *v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  quasar::TranslationPhraseInternal *v95;
  quasar::TranslationPhraseInternal *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  quasar::DoNotTranslateBlock *v104;
  void *v105;
  void *v106[2];
  char v107;
  _QWORD v108[3];
  __int128 v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  void *v114;
  char *v115;
  char *v116;
  int v117;
  std::string v118;
  std::string v119;
  char v120;
  uint64_t *v121;
  _QWORD *v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::string v126;
  std::string v127[5];
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  unint64_t v136;
  std::string v137;
  uint64_t v138;
  quasar::TranslationPhraseInternal *v139;
  unint64_t v140;
  void *__p[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;

  v2 = (quasar::DoNotTranslateBlock *)((char *)this + 8);
  Value = (_QWORD *)quasar::ProcessingInput::getValue((quasar::DoNotTranslateBlock *)((char *)this + 8));
  if (*Value == Value[1])
  {
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v139 = 0;
  v138 = 0;
  v140 = 0;
  v4 = (quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue(v2);
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v137, *v4);
  v135 = 0;
  v134 = 0;
  v136 = 0;
  v132 = 0;
  v131 = 0;
  v133 = 0;
  v5 = quasar::ProcessingInput::getValue(v2);
  v6 = quasar::MetaInfo::get((quasar::MetaInfo *)(*(_QWORD *)v5 + 192));
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment-span-info");
  ChildOptional = quasar::PTree::getChildOptional(v6, (uint64_t)__p);
  v8 = ChildOptional;
  if (SBYTE7(v142) < 0)
  {
    operator delete(__p[0]);
    if (v8)
      goto LABEL_4;
LABEL_160:
    v99 = *(_QWORD *)(*(_QWORD *)this - 24);
    v100 = quasar::ProcessingInput::getValue((quasar::DoNotTranslateBlock *)((char *)this + 64));
    quasar::ProcessingBlock::send((uint64_t)this + v99, v100, 0);
    goto LABEL_161;
  }
  if (!ChildOptional)
    goto LABEL_160;
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment-span-info");
  Child = (quasar::PTree *)quasar::PTree::getChild(v6, (__int128 *)__p);
  if (SBYTE7(v142) < 0)
    operator delete(__p[0]);
  v104 = this;
  v10 = quasar::PTree::begin(Child);
  v11 = quasar::PTree::end(Child);
  if (v10 == v11)
    goto LABEL_157;
  LOBYTE(v12) = 0;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "do-not-translate");
    v127[0].__r_.__value_.__s.__data_[0] = quasar::PTree::getBool(v10 + 24, (__int128 *)__p);
    std::vector<BOOL>::push_back((uint64_t)&v131, v127);
    if (SBYTE7(v142) < 0)
    {
      operator delete(__p[0]);
      if ((v12 & 1) != 0)
      {
LABEL_10:
        LOBYTE(v12) = 1;
        goto LABEL_13;
      }
    }
    else if ((v12 & 1) != 0)
    {
      goto LABEL_10;
    }
    v12 = (*(_QWORD *)((char *)v131 + (((unint64_t)(v132 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v132 - 1)) & 1;
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(__p, "start");
    v13 = quasar::PTree::getInt<int>(v10 + 24, (__int128 *)__p);
    if (SBYTE7(v142) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "end");
    v14 = quasar::PTree::getInt<int>(v10 + 24, (__int128 *)__p);
    if (SBYTE7(v142) < 0)
      operator delete(__p[0]);
    v15 = v14 - v13 + 1;
    v16 = (char *)v135;
    if ((unint64_t)v135 >= v136)
    {
      v18 = ((_BYTE *)v135 - (_BYTE *)v134) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19 = (uint64_t)(v136 - (_QWORD)v134) >> 2;
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v136, v20);
      else
        v21 = 0;
      v22 = &v21[8 * v18];
      *(_QWORD *)v22 = v13 | (unint64_t)(v15 << 32);
      v17 = v22 + 8;
      v23 = (char *)v135;
      v24 = (char *)v134;
      if (v135 != v134)
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v22 - 1) = v25;
          v22 -= 8;
        }
        while (v23 != v24);
        v23 = (char *)v134;
      }
      v134 = v22;
      v135 = v17;
      v136 = (unint64_t)&v21[8 * v20];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v135 = v13 | (unint64_t)(v15 << 32);
      v17 = v16 + 8;
    }
    v135 = v17;
    v10 += 88;
  }
  while (v10 != v11);
  if ((v12 & 1) == 0)
  {
LABEL_157:
    v26 = this;
    v97 = *(_QWORD *)(*(_QWORD *)this - 24);
    v98 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::DoNotTranslateBlock *)((char *)this + 64));
    goto LABEL_158;
  }
  v26 = this;
  v27 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::DoNotTranslateBlock *)((char *)this + 64));
  v28 = *v27;
  v101 = v27[1];
  if (*v27 != v101)
  {
    v29 = MEMORY[0x1E0C80978];
    do
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v127, (const quasar::TranslationPhraseInternal *)v28);
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)__p, (quasar::TranslationPhraseInternal *)v28);
      quasar::utf8toAscii((uint64_t)__p, &v126);
      if (SBYTE7(v142) < 0)
        operator delete(__p[0]);
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v122[0] = 0;
      v122[1] = 0;
      v102 = v28;
      v121 = (uint64_t *)v122;
      v30 = quasar::MetaInfo::get((quasar::MetaInfo *)(v28 + 192));
      v31 = v30;
      v117 = *(_DWORD *)v30;
      if (*(char *)(v30 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
      }
      else
      {
        v32 = *(_OWORD *)(v30 + 8);
        v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 24);
        *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v32;
      }
      memset(&v119, 0, sizeof(v119));
      std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v119, *(_QWORD *)(v31 + 32), *(_QWORD *)(v31 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v31 + 40) - *(_QWORD *)(v31 + 32)) >> 3));
      v120 = *(_BYTE *)(v31 + 56);
      v114 = 0;
      v115 = 0;
      v116 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "alignment-queries");
      v33 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)&v117, (__int128 *)__p);
      if (SBYTE7(v142) < 0)
        operator delete(__p[0]);
      v103 = quasar::PTree::begin(v33);
      v34 = quasar::PTree::end(v33);
      v35 = v103;
      while (v35 != v34)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "start");
        v36 = v103 + 24;
        v37 = quasar::PTree::getInt<int>(v103 + 24, (__int128 *)__p);
        if (SBYTE7(v142) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "end");
        v38 = quasar::PTree::getInt<int>(v36, (__int128 *)__p);
        if (SBYTE7(v142) < 0)
          operator delete(__p[0]);
        v39 = v38 - v37 + 1;
        v40 = v115;
        if (v115 >= v116)
        {
          v42 = (v115 - (_BYTE *)v114) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v43 = (v116 - (_BYTE *)v114) >> 2;
          if (v43 <= v42 + 1)
            v43 = v42 + 1;
          if ((unint64_t)(v116 - (_BYTE *)v114) >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v116, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v42];
          *(_QWORD *)v46 = v37 | (unint64_t)(v39 << 32);
          v41 = v46 + 8;
          v48 = (char *)v114;
          v47 = v115;
          if (v115 != v114)
          {
            do
            {
              v49 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *((_QWORD *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            v47 = (char *)v114;
          }
          v114 = v46;
          v115 = v41;
          v116 = &v45[8 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_QWORD *)v115 = v37 | (unint64_t)(v39 << 32);
          v41 = v40 + 8;
        }
        v115 = v41;
        __p[1] = 0;
        __p[0] = 0;
        *(_QWORD *)&v142 = 0;
        std::vector<std::vector<std::pair<int,int>>>::push_back[abi:ne180100](&v123, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "projections");
        v50 = (quasar::PTree *)quasar::PTree::getChild(v36, (__int128 *)__p);
        if (SBYTE7(v142) < 0)
          operator delete(__p[0]);
        v51 = quasar::PTree::begin(v50);
        v52 = quasar::PTree::end(v50);
        if (v51 != v52)
        {
          v105 = (void *)(v37 | (unint64_t)(v38 << 32));
          do
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "start");
            v53 = quasar::PTree::getInt<int>(v51 + 24, (__int128 *)__p);
            if (SBYTE7(v142) < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "end");
            v54 = quasar::PTree::getInt<int>(v51 + 24, (__int128 *)__p);
            if (SBYTE7(v142) < 0)
              operator delete(__p[0]);
            LODWORD(__p[0]) = v53;
            HIDWORD(__p[0]) = v54;
            __p[1] = v105;
            std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>>>(&v121, (int *)__p, __p);
            while ((int)v53 <= v54)
            {
              if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v55 = &v126;
              else
                v55 = (std::string *)v126.__r_.__value_.__r.__words[0];
              v56 = v55->__r_.__value_.__s.__data_[v53];
              if ((v56 & 0x80000000) != 0)
                v57 = __maskrune(v56, 0x4000uLL);
              else
                v57 = *(_DWORD *)(v29 + 4 * v56 + 60) & 0x4000;
              if (v57)
              {
                ++v53;
              }
              else
              {
                if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v58 = &v126;
                else
                  v58 = (std::string *)v126.__r_.__value_.__r.__words[0];
                v59 = v58->__r_.__value_.__s.__data_[v54];
                if ((v59 & 0x80000000) != 0)
                  v60 = __maskrune(v59, 0x4000uLL);
                else
                  v60 = *(_DWORD *)(v29 + 4 * v59 + 60) & 0x4000;
                if (!v60)
                  break;
                --v54;
              }
            }
            v61 = v34;
            v62 = v124;
            v63 = v54 - v53 + 1;
            v64 = *(unint64_t **)(v124 - 16);
            v65 = *(_QWORD *)(v124 - 8);
            if ((unint64_t)v64 >= v65)
            {
              v67 = (void **)(v124 - 24);
              v68 = *(_QWORD *)(v124 - 24);
              v69 = ((uint64_t)v64 - v68) >> 3;
              if ((unint64_t)(v69 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v70 = v65 - v68;
              v71 = v70 >> 2;
              if (v70 >> 2 <= (unint64_t)(v69 + 1))
                v71 = v69 + 1;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
                v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v124 - 8, v72);
              else
                v73 = 0;
              v74 = &v73[8 * v69];
              *(_QWORD *)v74 = v53 | (unint64_t)(v63 << 32);
              v66 = v74 + 8;
              v76 = *(char **)(v62 - 24);
              v75 = *(char **)(v62 - 16);
              v34 = v61;
              if (v75 != v76)
              {
                do
                {
                  v77 = *((_QWORD *)v75 - 1);
                  v75 -= 8;
                  *((_QWORD *)v74 - 1) = v77;
                  v74 -= 8;
                }
                while (v75 != v76);
                v75 = (char *)*v67;
              }
              *(_QWORD *)(v62 - 24) = v74;
              *(_QWORD *)(v62 - 16) = v66;
              *(_QWORD *)(v62 - 8) = &v73[8 * v72];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *v64 = v53 | (unint64_t)(v63 << 32);
              v66 = v64 + 1;
              v34 = v61;
            }
            *(_QWORD *)(v62 - 16) = v66;
            v51 += 88;
            v26 = v104;
          }
          while (v51 != v52);
        }
        v35 = v103 + 88;
        v103 += 88;
      }
      v78 = v114;
      if ((_BYTE *)v135 - (_BYTE *)v134 == v115 - (_BYTE *)v114)
      {
        if (v134 == v135)
        {
          v112 = 0;
          v113 = 0;
          v111 = (uint64_t *)&v112;
LABEL_145:
          __p[1] = 0;
          *(_QWORD *)&v142 = 0;
          __p[0] = &__p[1];
          v109 = 0uLL;
          v110 = 0;
          quasar::DoNotTranslateBlock::performReplacements((uint64_t)v127, &v111, &v137, (uint64_t)&v109, (uint64_t **)__p);
          v89 = v102;
          v92 = v128;
          v128 = v109;
          v109 = v92;
          v93 = v129;
          v129 = v110;
          v110 = v93;
          std::map<std::pair<int,int>,std::pair<int,int>>::map[abi:ne180100]((uint64_t)v108, (uint64_t)&v121);
          quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v106, (quasar::TranslationPhraseInternal *)v127);
          v94 = quasar::utf8Length((uint64_t **)v106);
          quasar::DoNotTranslateBlock::adjustAlignmentProjections(v108, (uint64_t)__p, (uint64_t)&v117, v94);
          if (v107 < 0)
            operator delete(v106[0]);
          std::__tree<int>::destroy((uint64_t)v108, (_QWORD *)v108[1]);
          quasar::MetaInfo::replace(&v130, (uint64_t)&v117);
          v95 = v139;
          if ((unint64_t)v139 >= v140)
          {
            v96 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v138, (const quasar::TranslationPhraseInternal *)v127);
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v139, (const quasar::TranslationPhraseInternal *)v127);
            v96 = (quasar::TranslationPhraseInternal *)((char *)v95 + 200);
          }
          v139 = v96;
          v106[0] = &v109;
          std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
          std::__tree<int>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
          std::__tree<int>::destroy((uint64_t)&v111, v112);
          goto LABEL_151;
        }
        v79 = v134;
        while (*v79 == *v78 && v79[1] == v78[1])
        {
          v79 += 2;
          v78 += 2;
          if (v79 == v135)
          {
            v112 = 0;
            v113 = 0;
            v111 = (uint64_t *)&v112;
            if (v134 != v135)
            {
              v81 = 0;
              do
              {
                v82 = *(_QWORD *)(v123 + 24 * v81 + 8) - *(_QWORD *)(v123 + 24 * v81);
                if (v82 != 8
                  && ((*(_QWORD *)((char *)v131 + ((v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v81) & 1) != 0
                  && quasar::gLogLevel >= 5)
                {
                  v156 = 0u;
                  v157 = 0u;
                  v154 = 0u;
                  v155 = 0u;
                  v152 = 0u;
                  v153 = 0u;
                  v150 = 0u;
                  v151 = 0u;
                  v148 = 0u;
                  v149 = 0u;
                  v146 = 0u;
                  v147 = 0u;
                  v144 = 0u;
                  v145 = 0u;
                  v142 = 0u;
                  v143 = 0u;
                  *(_OWORD *)__p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"do-not-translate only support one-to-one span alignments", 56);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
                  if (quasar::gLogLevel >= 6)
                  {
                    v156 = 0u;
                    v157 = 0u;
                    v154 = 0u;
                    v155 = 0u;
                    v152 = 0u;
                    v153 = 0u;
                    v150 = 0u;
                    v151 = 0u;
                    v148 = 0u;
                    v149 = 0u;
                    v146 = 0u;
                    v147 = 0u;
                    v144 = 0u;
                    v145 = 0u;
                    v142 = 0u;
                    v143 = 0u;
                    *(_OWORD *)__p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"    not mapping [", 17);
                    v87 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)", ", 2);
                    v88 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"]", 1);
                    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
                  }
                }
                v83 = (uint64_t *)(v123 + 24 * v81);
                v84 = *v83;
                v85 = v83[1];
                if (*v83 != v85)
                {
                  do
                  {
                    if (v82 == 8 && (*((_QWORD *)v131 + (v81 >> 6)) & (1 << v81)) != 0 && *(_DWORD *)(v84 + 4) != 0)
                    {
                      __p[0] = *(void **)v84;
                      __p[1] = *((void **)v134 + v81);
                      std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>>>(&v111, (int *)__p, __p);
                    }
                    v84 += 8;
                  }
                  while (v84 != v85);
                }
                ++v81;
              }
              while (v81 < ((_BYTE *)v135 - (_BYTE *)v134) >> 3);
            }
            goto LABEL_145;
          }
        }
      }
      v89 = v102;
      if (quasar::gLogLevel >= 1)
      {
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v142 = 0u;
        v143 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Span information differs between source and target - skipping!", 62);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
      v90 = v139;
      if ((unint64_t)v139 >= v140)
      {
        v91 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v138, (const quasar::TranslationPhraseInternal *)v127);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v139, (const quasar::TranslationPhraseInternal *)v127);
        v91 = (quasar::TranslationPhraseInternal *)((char *)v90 + 200);
      }
      v139 = v91;
LABEL_151:
      if (v114)
      {
        v115 = (char *)v114;
        operator delete(v114);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v117);
      std::__tree<int>::destroy((uint64_t)&v121, v122[0]);
      __p[0] = &v123;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v127);
      v28 = v89 + 200;
    }
    while (v28 != v101);
  }
  v97 = *(_QWORD *)(*(_QWORD *)v26 - 24);
  v98 = &v138;
LABEL_158:
  quasar::ProcessingBlock::send((uint64_t)v26 + v97, (uint64_t)v98, 0);
LABEL_161:
  if (v131)
    operator delete(v131);
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  __p[0] = &v138;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

uint64_t std::vector<std::vector<std::pair<int,int>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADE0C6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::DoNotTranslateBlock::minConfigVersion(quasar::DoNotTranslateBlock *this)
{
  return 222;
}

uint64_t `virtual thunk to'quasar::DoNotTranslateBlock::minConfigVersion(quasar::DoNotTranslateBlock *this)
{
  return 222;
}

_QWORD *quasar::DoNotTranslateBlock::inputs@<X0>(quasar::DoNotTranslateBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void quasar::DoNotTranslateBlock::~DoNotTranslateBlock(quasar::DoNotTranslateBlock *this)
{
  char **v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D36EB0;
  *((_QWORD *)this + 15) = off_1E5D36F60;
  v2 = (char **)((char *)this + 120);
  v3 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v3 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D36EB0;
  *((_QWORD *)this + 15) = off_1E5D36F60;
  v2 = (char **)((char *)this + 120);
  v3 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v3 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1AF44D190](this, 0x10B3C408B4D3B57);
}

const char *quasar::DoNotTranslateBlock::blockType(quasar::DoNotTranslateBlock *this)
{
  return "DoNotTranslateBlock";
}

void `virtual thunk to'quasar::DoNotTranslateBlock::~DoNotTranslateBlock(quasar::DoNotTranslateBlock *this)
{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E5D36EB0;
  *((_QWORD *)v1 + 15) = off_1E5D36F60;
  v2 = (void **)(v1 + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[87] < 0)
    operator delete(*((void **)v1 + 8));
  v2 = (void **)(v1 + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[31] < 0)
    operator delete(*((void **)v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 15);
}

{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E5D36EB0;
  *((_QWORD *)v1 + 15) = off_1E5D36F60;
  v2 = (void **)(v1 + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[87] < 0)
    operator delete(*((void **)v1 + 8));
  v2 = (void **)(v1 + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[31] < 0)
    operator delete(*((void **)v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 15);
  MEMORY[0x1AF44D190](v1, 0x10B3C408B4D3B57);
}

const char *`virtual thunk to'quasar::DoNotTranslateBlock::blockType(quasar::DoNotTranslateBlock *this)
{
  return "DoNotTranslateBlock";
}

void std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, &v11, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = **a4;
    v7[6] = 0;
    v7[7] = 0;
    v7[4] = v9;
    v7[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__find_equal<std::pair<int,int>>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 8);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

char *std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::map<std::pair<int,int>,std::pair<int,int>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<std::pair<int,int>,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__tree_node<std::__value_type<std::pair<int,int>,std::pair<int,int>>,void *> *,long>>>((char *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADE0CBCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *std::map<std::pair<int,int>,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__tree_node<std::__value_type<std::pair<int,int>,std::pair<int,int>>,void *> *,long>>>(char *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 8);
    do
    {
      result = std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_hint_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>> const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_hint_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__find_equal<std::pair<int,int>>(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__find_equal<std::pair<int,int>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  int v18;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_3;
  v5 = *a5;
  v6 = *((_DWORD *)a2 + 7);
  if (*a5 < v6)
    goto LABEL_3;
  if (v6 < v5)
  {
LABEL_9:
    v10 = a2[1];
    if (v10)
    {
      v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        v13 = *a4 == v17;
        v17 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v18 = *((_DWORD *)a4 + 7);
      if (v5 >= v18 && (v18 < v5 || a5[1] >= *((_DWORD *)a4 + 8)))
        return std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, a3, a5);
    }
    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return (uint64_t *)a4;
  }
  v15 = a5[1];
  v16 = *((_DWORD *)a2 + 8);
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    v14 = *((_DWORD *)v9 + 7);
    if (v14 >= *a5 && (*a5 < v14 || *((_DWORD *)v9 + 8) >= a5[1]))
      return std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, a3, a5);
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

double quasar::ResultStreamStabilizer::ResultStreamStabilizer(_QWORD *a1, _QWORD *a2, int a3, int a4, int a5, char a6, char a7, _QWORD *a8)
{
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  double result;

  v15 = quasar::RecogResultStreamBase::RecogResultStreamBase(a1);
  *v15 = &off_1E5D38DD8;
  v16 = a2[1];
  v15[3] = *a2;
  v15[4] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_DWORD *)v15 + 10) = a5;
  *((_BYTE *)v15 + 44) = a7;
  v19 = a8[1];
  v15[6] = *a8;
  v15[7] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_BYTE *)v15 + 64) = a6 ^ 1 | a7;
  *((_DWORD *)v15 + 18) = a3;
  *((_DWORD *)v15 + 19) = a4;
  result = 0.0;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((_OWORD *)v15 + 9) = 0u;
  *((_OWORD *)v15 + 10) = 0u;
  *((_OWORD *)v15 + 11) = 0u;
  *((_OWORD *)v15 + 12) = 0u;
  *((_OWORD *)v15 + 13) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((_OWORD *)v15 + 16) = 0u;
  *((_OWORD *)v15 + 17) = 0u;
  *((_OWORD *)v15 + 18) = 0u;
  *((_OWORD *)v15 + 19) = 0u;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  *((_OWORD *)v15 + 23) = 0u;
  *((_OWORD *)v15 + 24) = 0u;
  *((_OWORD *)v15 + 25) = 0u;
  *((_OWORD *)v15 + 26) = 0u;
  *((_OWORD *)v15 + 27) = 0u;
  *((_WORD *)v15 + 224) = 0;
  *((_WORD *)v15 + 252) = 0;
  *(_OWORD *)(v15 + 59) = 0u;
  *(_OWORD *)(v15 + 61) = 0u;
  *(_OWORD *)(v15 + 57) = 0u;
  return result;
}

void quasar::ResultStreamStabilizer::setUpLogging(quasar::ResultStreamStabilizer *this)
{
  _OWORD v1[17];

  memset(v1, 0, sizeof(v1));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "This class is internal to Quasar, and this function is never called");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
}

void quasar::ResultStreamStabilizer::prepareForNextUtterance(quasar::ResultStreamStabilizer *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void **v18;

  quasar::ResultStabilityHelper::reset((quasar::ResultStreamStabilizer *)((char *)this + 72));
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 22);
  if (*((_BYTE *)this + 44))
  {
    v2 = *((_QWORD *)this + 41);
    v3 = *((_QWORD *)this + 42);
    if (v2 != v3)
    {
      v4 = *((_OWORD *)this + 14);
      v5 = *(_OWORD *)((char *)this + 344);
      v6 = *(_OWORD *)((char *)this + 360);
      v7 = *((_OWORD *)this + 15);
      *(_OWORD *)((char *)this + 328) = *((_OWORD *)this + 13);
      *(_OWORD *)((char *)this + 344) = v4;
      *((_OWORD *)this + 14) = v5;
      *((_OWORD *)this + 15) = v6;
      v8 = *((_OWORD *)this + 16);
      *((_OWORD *)this + 16) = *(_OWORD *)((char *)this + 376);
      *((_QWORD *)this + 26) = v2;
      *((_QWORD *)this + 27) = v3;
      *(_OWORD *)((char *)this + 360) = v7;
      *(_OWORD *)((char *)this + 376) = v8;
      v9 = *((_QWORD *)this + 34);
      *((_QWORD *)this + 34) = *((_QWORD *)this + 49);
      *((_QWORD *)this + 49) = v9;
      quasar::getTopChoice((__int128 ***)this + 26, (uint64_t *)&v16);
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 280));
      *(_OWORD *)((char *)this + 280) = v16;
      *((_QWORD *)this + 37) = v17;
      v17 = 0;
      v16 = 0uLL;
      v18 = (void **)&v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
      quasar::formatResultTokensSimple(*((std::string **)this + 26), 0);
      v10 = (void **)((char *)this + 304);
      if (*((char *)this + 327) < 0)
        operator delete(*v10);
      *(_OWORD *)v10 = v16;
      *((_QWORD *)this + 40) = v17;
    }
  }
  v11 = *((_QWORD *)this + 41);
  v12 = *((_QWORD *)this + 42);
  while (v12 != v11)
  {
    v12 -= 24;
    *(_QWORD *)&v16 = v12;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  *((_QWORD *)this + 42) = v11;
  *((_QWORD *)this + 45) = *((_QWORD *)this + 44);
  v14 = *((_QWORD *)this + 47);
  v13 = *((_QWORD *)this + 48);
  if (v13 != v14)
  {
    do
    {
      v15 = v13 - 24;
      std::__tree<std::string>::destroy(v13 - 24, *(char **)(v13 - 16));
      v13 = v15;
    }
    while (v15 != v14);
  }
  *((_QWORD *)this + 48) = v14;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 50);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 53);
  if (!*((_BYTE *)this + 449) && *((_BYTE *)this + 448))
    *((_BYTE *)this + 449) = 1;
  *((_BYTE *)this + 448) = 0;
}

void quasar::ResultStabilityHelper::reset(quasar::ResultStabilityHelper *this)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void **v15;

  v2 = (void **)*((_QWORD *)this + 2);
  v3 = (void **)*((_QWORD *)this + 3);
  if (v3 == v2)
  {
    v4 = (_QWORD *)((char *)this + 48);
    v3 = (void **)*((_QWORD *)this + 2);
  }
  else
  {
    v4 = (_QWORD *)((char *)this + 48);
    v5 = *((_QWORD *)this + 5);
    v6 = &v2[v5 / 0xAA];
    v7 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    v8 = (unint64_t)v2[(*((_QWORD *)this + 6) + v5) / 0xAA] + 24 * ((*((_QWORD *)this + 6) + v5) % 0xAA);
    if (v7 != (void **)v8)
    {
      do
      {
        v15 = v7;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 3;
        if ((char *)v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (void **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (void **)v8);
      v2 = (void **)*((_QWORD *)this + 2);
      v3 = (void **)*((_QWORD *)this + 3);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v11 = *((_QWORD *)this + 3);
      v2 = (void **)(*((_QWORD *)this + 2) + 8);
      *((_QWORD *)this + 2) = v2;
      v10 = v11 - (_QWORD)v2;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    v12 = 85;
    goto LABEL_14;
  }
  if (v10 >> 3 == 2)
  {
    v12 = 170;
LABEL_14:
    *((_QWORD *)this + 5) = v12;
  }
  v14 = *((_QWORD *)this + 7);
  for (i = *((_QWORD *)this + 8);
        i != v14;
  *((_QWORD *)this + 8) = v14;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 10);
}

void quasar::ResultStreamStabilizer::writePartial(uint64_t a1, __int128 **a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  int v17;
  _BOOL4 v18;
  char v19;
  void *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  void *v34;
  unsigned __int8 *v35;
  __int128 *v36;
  __int128 *v37;
  int v38;
  _BOOL4 v39;
  void *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  void **v52;
  uint64_t v53;
  void *v54;
  int v55;
  __int16 v56;
  const char *v59;
  uint64_t v60;
  void *__p;
  __int128 v62;
  std::vector<std::string> v63;
  std::string v64;
  std::string *v65;
  __int128 *v66;
  char v67;
  std::vector<std::string> *v68;
  void **v69;
  void **v70;
  void **v71;
  uint64_t v72;
  _QWORD v73[4];

  v13 = a6;
  v14 = a5;
  v73[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
  {
    if ((_DWORD)a6)
      goto LABEL_8;
  }
  else
  {
    v14 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)a6)
      goto LABEL_8;
  }
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 200))
    v13 = *(unsigned int *)(a1 + 204);
  else
    v13 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 200) = v14;
  *(_DWORD *)(a1 + 204) = v13;
  v67 = 0;
  quasar::ResultStabilityHelper::computedBestResults((unsigned int *)(a1 + 72), a2, &v67, (uint64_t *)&v65);
  v17 = quasar::ResultStabilityHelper::stabilityChanged(a1 + 72, &v65);
  v18 = a10
     && ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24)) & a11) == 1
     && v65 != (std::string *)v66
     && *(_BYTE *)(a1 + 504) == 0;
  if ((v17 | v18) == 1)
  {
    memset(&v64, 0, sizeof(v64));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, *(__int128 **)(a1 + 280), *(__int128 **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3));
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v64, (std::string *)v64.__r_.__value_.__l.__size_, v65, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
    quasar::Token::tokenNamesWithCleanedMetadata((const std::string **)&v64, &v63);
    v19 = v17 ^ 1;
    HIBYTE(v56) = v17 ^ 1;
    LOBYTE(v56) = a10;
    (*(void (**)(_QWORD, std::vector<std::string> *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), &v63, a3, 1, v14, v13, a7, a8, a9, v56, a12);
    if (*(_BYTE *)(a1 + 64) && v64.__r_.__value_.__r.__words[0] != v64.__r_.__value_.__l.__size_ && (int)v14 >= 1)
    {
      v59 = " ";
      v60 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v64, (uint64_t *)&v59);
      v20 = __p;
      v73[0] = v62;
      *(_QWORD *)((char *)v73 + 7) = *(_QWORD *)((char *)&v62 + 7);
      v21 = HIBYTE(v62);
      v62 = 0uLL;
      __p = 0;
      v22 = *(_QWORD *)(a1 + 464);
      v23 = *(_QWORD *)(a1 + 472);
      if (v22 >= v23)
      {
        v26 = *(_QWORD *)(a1 + 456);
        v27 = (uint64_t)(v22 - v26) >> 5;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = v23 - v26;
        if (v29 >> 4 > v28)
          v28 = v29 >> 4;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
          v30 = 0x7FFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        v72 = a1 + 472;
        v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 472, v30);
        v32 = &v31[4 * v27];
        v68 = (std::vector<std::string> *)v31;
        v69 = v32;
        v71 = &v31[4 * v33];
        v34 = (void *)v73[0];
        *v32 = v20;
        v32[1] = v34;
        *(void **)((char *)v32 + 15) = *(void **)((char *)v73 + 7);
        *((_BYTE *)v32 + 23) = v21;
        *((_DWORD *)v32 + 6) = v14;
        v70 = v32 + 4;
        std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer((uint64_t *)(a1 + 456), &v68);
        v25 = *(_QWORD *)(a1 + 464);
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        v24 = v73[0];
        *(_QWORD *)v22 = v20;
        *(_QWORD *)(v22 + 8) = v24;
        *(_QWORD *)(v22 + 15) = *(_QWORD *)((char *)v73 + 7);
        *(_BYTE *)(v22 + 23) = v21;
        *(_DWORD *)(v22 + 24) = v14;
        v25 = v22 + 32;
        *(_QWORD *)(a1 + 464) = v22 + 32;
      }
      *(_QWORD *)(a1 + 464) = v25;
      if (SHIBYTE(v62) < 0)
        operator delete(__p);
    }
    *(_BYTE *)(a1 + 504) = v19;
    v68 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68 = (std::vector<std::string> *)&v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  v35 = *(unsigned __int8 **)(a1 + 176);
  v36 = *a2;
  v37 = a2[1];
  if ((char *)v37 - (char *)*a2 == *(_QWORD *)(a1 + 184) - (_QWORD)v35)
  {
    if (v36 == v37)
    {
      v38 = 1;
    }
    else
    {
      do
      {
        v38 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v68, (unsigned __int8 *)v36, v35);
        if (!v38)
          break;
        v36 = (__int128 *)((char *)v36 + 24);
        v35 += 24;
      }
      while (v36 != v37);
    }
  }
  else
  {
    v38 = 0;
  }
  v39 = a10
     && ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24)) & a11) == 1
     && v65 != (std::string *)v66
     && *(_BYTE *)(a1 + 505) == 0;
  if ((v39 | v38 ^ 1) == 1)
  {
    memset(&v64, 0, sizeof(v64));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, *(__int128 **)(a1 + 280), *(__int128 **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3));
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v64, (std::string *)v64.__r_.__value_.__l.__size_, (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    quasar::Token::tokenNamesWithCleanedMetadata((const std::string **)&v64, &v63);
    BYTE1(v55) = v38;
    LOBYTE(v55) = a10;
    (*(void (**)(_QWORD, std::vector<std::string> *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), &v63, a3, 0, v14, v13, a7, a8, a9, v55, a12);
    if ((__int128 **)(a1 + 176) != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 176), (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    if (*(_BYTE *)(a1 + 64) && v64.__r_.__value_.__r.__words[0] != v64.__r_.__value_.__l.__size_ && (int)v14 >= 1)
    {
      v59 = " ";
      v60 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v64, (uint64_t *)&v59);
      v40 = __p;
      v73[0] = v62;
      *(_QWORD *)((char *)v73 + 7) = *(_QWORD *)((char *)&v62 + 7);
      v41 = HIBYTE(v62);
      v62 = 0uLL;
      __p = 0;
      v42 = *(_QWORD *)(a1 + 488);
      v43 = *(_QWORD *)(a1 + 496);
      if (v42 >= v43)
      {
        v46 = *(_QWORD *)(a1 + 480);
        v47 = (uint64_t)(v42 - v46) >> 5;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v43 - v46;
        if (v49 >> 4 > v48)
          v48 = v49 >> 4;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        v72 = a1 + 496;
        v51 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 496, v50);
        v52 = &v51[4 * v47];
        v68 = (std::vector<std::string> *)v51;
        v69 = v52;
        v71 = &v51[4 * v53];
        v54 = (void *)v73[0];
        *v52 = v40;
        v52[1] = v54;
        *(void **)((char *)v52 + 15) = *(void **)((char *)v73 + 7);
        *((_BYTE *)v52 + 23) = v41;
        *((_DWORD *)v52 + 6) = v14;
        v70 = v52 + 4;
        std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer((uint64_t *)(a1 + 480), &v68);
        v45 = *(_QWORD *)(a1 + 488);
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        v44 = v73[0];
        *(_QWORD *)v42 = v40;
        *(_QWORD *)(v42 + 8) = v44;
        *(_QWORD *)(v42 + 15) = *(_QWORD *)((char *)v73 + 7);
        *(_BYTE *)(v42 + 23) = v41;
        *(_DWORD *)(v42 + 24) = v14;
        v45 = v42 + 32;
        *(_QWORD *)(a1 + 488) = v42 + 32;
      }
      *(_QWORD *)(a1 + 488) = v45;
      if (SHIBYTE(v62) < 0)
        operator delete(__p);
    }
    *(_BYTE *)(a1 + 505) = v38;
    v68 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68 = (std::vector<std::string> *)&v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  v68 = (std::vector<std::string> *)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
}

void sub_1ADE0D8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char ***__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char **a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer(v33 - 152);
  if (a26 < 0)
    operator delete(__p);
  __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a30 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void sub_1ADE0D960()
{
  JUMPOUT(0x1ADE0D958);
}

void quasar::ResultStabilityHelper::computedBestResults(unsigned int *a1@<X0>, __int128 **a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  int64x2_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  int v14;
  BOOL v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  std::string::size_type size;
  char v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  int v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 *v50;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 **v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  std::string v63;
  int v64;

  v6 = (int64x2_t *)(a1 + 2);
  if (*((_QWORD *)a1 + 6) > (unint64_t)*a1)
  {
    v7 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * (*((_QWORD *)a1 + 5) / 0xAAuLL))
                   + 24 * (*((_QWORD *)a1 + 5) % 0xAAuLL));
    v8 = *v7;
    if (v7[1] != *v7)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (_QWORD *)(*((_QWORD *)a1 + 7) + v9);
        v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)(v8 + v10));
        if (v13)
        {
          v14 = *((_DWORD *)v13 + 10);
          v15 = v14 != 0;
          v16 = v14 - 1;
          if (v16 != 0 && v15)
            *((_DWORD *)v13 + 10) = v16;
          else
            std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase(v12, (uint64_t *)v13);
        }
        ++v11;
        v8 = *v7;
        v10 += 24;
        v9 += 40;
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3));
    }
    std::deque<std::vector<std::string>>::pop_front(v6);
  }
  std::deque<std::vector<std::string>>::push_back(v6, a2);
  v18 = *a2;
  v17 = a2[1];
  v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)*a2) >> 3);
  if (v19 > 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 3))
  {
    std::vector<std::unordered_map<std::string,unsigned int>>::resize((uint64_t *)a1 + 7, v19);
    v18 = *a2;
    v17 = a2[1];
  }
  if (v17 != v18)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = (char *)v18 + v21;
      v24 = (_QWORD *)(*((_QWORD *)a1 + 7) + v20);
      v25 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v24, (unsigned __int8 *)v18 + v21);
      if (v25)
      {
        ++*((_DWORD *)v25 + 10);
      }
      else
      {
        if (v23[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)((char *)v18 + v21), *(_QWORD *)((char *)v18 + v21 + 8));
        }
        else
        {
          v26 = *(_OWORD *)v23;
          v63.__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v26;
        }
        v64 = 1;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t)v24, (unsigned __int8 *)&v63, (uint64_t)&v63);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
      }
      ++v22;
      v18 = *a2;
      v21 += 24;
      v20 += 40;
    }
    while (v22 < 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v28 = *((_QWORD *)a1 + 7);
  v27 = *((_QWORD *)a1 + 8);
  if (v27 == v28)
    goto LABEL_87;
  v29 = 0;
  do
  {
    v30 = v28 + 40 * v29;
    if (!*(_QWORD *)(v30 + 24))
      goto LABEL_61;
    memset(&v63, 0, sizeof(v63));
    v31 = *(uint64_t **)(v30 + 16);
    if (v31)
    {
      v32 = 0;
      do
      {
        v33 = *((unsigned int *)v31 + 10);
        if (v32 < v33)
        {
          std::string::operator=(&v63, (const std::string *)(v31 + 2));
          v32 = v33;
        }
        v31 = (uint64_t *)*v31;
      }
      while (v31);
    }
    else
    {
      v32 = 0;
    }
    if (v32 < a1[1])
    {
      v34 = *((_QWORD *)a1 + 10);
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      v36 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 11) - v34) >> 3))
        goto LABEL_54;
      v37 = (unsigned __int8 *)(v34 + 24 * v29);
      v38 = v37[23];
      v39 = *((_QWORD *)v37 + 1);
      if ((v38 & 0x80u) == 0)
        v40 = v37[23];
      else
        v40 = *((_QWORD *)v37 + 1);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v63.__r_.__value_.__l.__size_;
      if (v40 == size)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v63;
        else
          v41 = (std::string *)v63.__r_.__value_.__r.__words[0];
        if ((v38 & 0x80) != 0)
        {
          v42 = memcmp(*(const void **)v37, v41, *((_QWORD *)v37 + 1));
          v40 = v39;
          if (!v42)
            goto LABEL_50;
        }
        else
        {
          if (!v37[23])
            goto LABEL_50;
          while (*v37 == v41->__r_.__value_.__s.__data_[0])
          {
            ++v37;
            v41 = (std::string *)((char *)v41 + 1);
            if (!--v38)
              goto LABEL_50;
          }
        }
      }
      if (!v40)
      {
LABEL_54:
        v46 = 0;
        if ((v36 & 0x80) == 0)
          goto LABEL_60;
LABEL_59:
        operator delete(v63.__r_.__value_.__l.__data_);
        goto LABEL_60;
      }
    }
LABEL_50:
    v43 = a4[1];
    if (v43 >= a4[2])
    {
      v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)&v63);
    }
    else
    {
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a4[1], v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      }
      else
      {
        v44 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        *(_QWORD *)(v43 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
        *(_OWORD *)v43 = v44;
      }
      v45 = v43 + 24;
      a4[1] = v43 + 24;
    }
    a4[1] = v45;
    v46 = 1;
    if ((*((_BYTE *)&v63.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_59;
LABEL_60:
    v28 = *((_QWORD *)a1 + 7);
    v27 = *((_QWORD *)a1 + 8);
    if (!v46)
      break;
LABEL_61:
    ++v29;
  }
  while (v29 < 0xCCCCCCCCCCCCCCCDLL * ((v27 - v28) >> 3));
  *a3 = 0;
  if (v27 != v28)
  {
    v48 = *a4;
    v47 = a4[1];
    v49 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a4) >> 3);
    v50 = *a2;
    if (v49 == 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) && v47 != v48)
    {
      v52 = 0;
      if (v49 <= 1)
        v53 = 1;
      else
        v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a4) >> 3);
      while (1)
      {
        v54 = (unsigned __int8 *)(v48 + 24 * v52);
        v55 = (unsigned __int8 **)v50 + 3 * v52;
        v56 = v54[23];
        if ((v56 & 0x80u) == 0)
          v57 = (unsigned __int8 *)v54[23];
        else
          v57 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
        v58 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
        v59 = (char)v58;
        if ((char)v58 < 0)
          v58 = v55[1];
        if (v57 != v58)
          break;
        if (v59 >= 0)
          v60 = (unsigned __int8 *)v50 + 24 * v52;
        else
          v60 = *v55;
        if ((v56 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v54, v60, *((_QWORD *)v54 + 1)))
            break;
        }
        else if (v54[23])
        {
          while (*v54 == *v60)
          {
            ++v54;
            ++v60;
            if (!--v56)
              goto LABEL_85;
          }
          break;
        }
LABEL_85:
        *a3 = 1;
        if (++v52 == v53)
          return;
      }
LABEL_87:
      *a3 = 0;
    }
  }
}

void sub_1ADE0DE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v16 + 8) = v17;
  if (a16 < 0)
    operator delete(__p);
  __p = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::ResultStabilityHelper::stabilityChanged(uint64_t a1, std::string **a2)
{
  std::vector<std::wstring> *v3;
  unsigned __int8 *v4;
  std::string *v5;
  std::string *v6;
  char v8;

  v4 = *(unsigned __int8 **)(a1 + 80);
  v3 = (std::vector<std::wstring> *)(a1 + 80);
  v5 = *a2;
  v6 = a2[1];
  if ((char *)v6 - (char *)*a2 == *(_QWORD *)(a1 + 88) - (_QWORD)v4)
  {
    while (v5 != v6)
    {
      if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v8, (unsigned __int8 *)v5, v4))
        goto LABEL_5;
      ++v5;
      v4 += 24;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if (v3 != (std::vector<std::wstring> *)a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, (__int128 *)a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    return 1;
  }
}

void quasar::ResultStreamStabilizer::writePartialFormatted()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This class is internal to Quasar, and this function is never called");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::ResultStreamStabilizer::writeFinalChoices(uint64_t a1, quasar::RecogResult *this, uint64_t a3)
{
  BOOL v6;
  __int128 ***ResultChoices;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  char v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t *ResultCosts;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  const void ****ResultMuxIds;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  uint64_t i;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void **v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  void *__p[2];
  unsigned __int8 v59;
  std::string v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t *v78[3];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  if (*((_QWORD *)this + 12))
    v6 = 1;
  else
    v6 = quasar::gLogLevel < 2;
  if (!v6)
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v79 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"recogResult.params is null. Should NEVER happen", 47);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v79);
  }
  *(_BYTE *)(a1 + 448) = (_DWORD)a3 == 1;
  ResultChoices = (__int128 ***)quasar::RecogResult::getResultChoices(this);
  quasar::getTopChoice(ResultChoices, (uint64_t *)&v96);
  v8 = (unsigned __int8 *)*((_QWORD *)&v96 + 1);
  v9 = (unsigned __int8 *)v96;
  v10 = *(unsigned __int8 **)(a1 + 400);
  if (*((_QWORD *)&v96 + 1) - (_QWORD)v96 == *(_QWORD *)(a1 + 408) - (_QWORD)v10)
  {
    if ((_QWORD)v96 == *((_QWORD *)&v96 + 1))
    {
      LOBYTE(v11) = 1;
    }
    else
    {
      do
      {
        v11 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v79, v9, v10);
        if (!v11)
          break;
        v9 += 24;
        v10 += 24;
      }
      while (v9 != v8);
    }
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  if (*((_BYTE *)this + 304) && (__int128 *)(a1 + 424) != &v96)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 424), (std::string *)v96, *((__int128 **)&v96 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v96 + 1) - v96) >> 3));
  if (*(_BYTE *)(*((_QWORD *)this + 12) + 625))
  {
    v12 = (unsigned __int8 *)*((_QWORD *)&v96 + 1);
    v13 = (unsigned __int8 *)v96;
    v14 = *(unsigned __int8 **)(a1 + 424);
    if (*((_QWORD *)&v96 + 1) - (_QWORD)v96 == *(_QWORD *)(a1 + 432) - (_QWORD)v14)
    {
      while (v13 != v12)
      {
        if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v79, v13, v14))
          goto LABEL_21;
        v13 += 24;
        v14 += 24;
      }
      v15 = (char *)this + 132;
LABEL_30:
      v18 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 400) = v96;
      v96 = v18;
      v19 = *(_QWORD *)(a1 + 416);
      *(_QWORD *)(a1 + 416) = v97;
      v97 = v19;
      v17 = (_BYTE *)(a1 + 64);
      goto LABEL_31;
    }
  }
LABEL_21:
  v15 = (char *)this + 132;
  if (*((_BYTE *)this + 132))
    v16 = 0;
  else
    v16 = v11;
  if ((v16 & 1) != 0)
    goto LABEL_92;
  if ((v11 & 1) == 0)
    goto LABEL_30;
  v17 = (_BYTE *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 64))
  {
LABEL_31:
    v20 = (uint64_t **)quasar::RecogResult::getResultChoices(this);
    v61 = 0uLL;
    *(_QWORD *)&v62 = 0;
    v21 = std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v61, *v20, v20[1], 0xAAAAAAAAAAAAAAABLL * (v20[1] - *v20));
    quasar::ResultStreamStabilizer::limitTokenTimestamp((uint64_t)v21, (uint64_t *)&v61, *((_DWORD *)this + 32));
    if (*(_BYTE *)(a1 + 44))
    {
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 328, *(uint64_t **)(a1 + 208), *(uint64_t **)(a1 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3));
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 352), *(char **)(a1 + 232), *(_QWORD *)(a1 + 240), (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
      ResultCosts = (uint64_t *)quasar::RecogResult::getResultCosts(this);
      quasar::concatNbest((uint64_t *)(a1 + 328), a1 + 352, &v61, ResultCosts, *((_DWORD *)this + 31), *(_DWORD *)(a1 + 40), v23);
      v24 = *((_QWORD *)this + 12);
      if (!v24)
      {
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v79 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"recogResult.params is null. Should NEVER happen", 47);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v79);
      }
      quasar::MuxHelper::finalizeResult(*(uint64_t **)(a1 + 48), (uint64_t **)(v24 + 344), (uint64_t *)(a1 + 328), a1 + 352, (uint64_t *)(a1 + 376));
    }
    else
    {
      if ((__int128 *)(a1 + 328) != &v61)
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 328, (uint64_t *)v61, *((uint64_t **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v61 + 1) - v61) >> 3));
      v25 = quasar::RecogResult::getResultCosts(this);
      if (a1 + 352 != v25)
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 352), *(char **)v25, *(_QWORD *)(v25 + 8), (uint64_t)(*(_QWORD *)(v25 + 8) - *(_QWORD *)v25) >> 3);
      ResultMuxIds = (const void ****)quasar::RecogResult::getResultMuxIds(this);
      if ((const void ****)(a1 + 376) != ResultMuxIds)
        std::vector<std::set<std::string>>::__assign_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(a1 + 376, *ResultMuxIds, ResultMuxIds[1], 0xAAAAAAAAAAAAAAABLL * (ResultMuxIds[1] - *ResultMuxIds));
    }
    *(_QWORD *)&v79 = &v61;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    goto LABEL_41;
  }
  if (*(_QWORD *)(a1 + 328) == *(_QWORD *)(a1 + 336))
  {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 328, *(uint64_t **)(a1 + 208), *(uint64_t **)(a1 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3));
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 352), *(char **)(a1 + 232), *(_QWORD *)(a1 + 240), (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3);
    std::vector<std::set<std::string>>::__assign_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(a1 + 376, *(const void ****)(a1 + 256), *(const void ****)(a1 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 3));
  }
LABEL_41:
  if (*v15
    || (v54 = (_QWORD *)quasar::RecogResult::getResultChoices(this), *v54 != v54[1])
    && (v55 = quasar::RecogResult::getResultChoices(this), **(_QWORD **)v55 != *(_QWORD *)(*(_QWORD *)v55 + 8)))
  {
    if (*v17)
      quasar::extendEndTime(a1 + 328, *((_DWORD *)this + 32) + *((_DWORD *)this + 31));
    if (*(_BYTE *)(*((_QWORD *)this + 12) + 738))
    {
      if (*((_BYTE *)this + 304))
      {
        v27 = *(uint64_t **)(a1 + 328);
        v29 = *v27;
        v28 = v27[1];
        if (v29 != v28)
        {
          do
          {
            *(_DWORD *)(v29 + 36) = *(_DWORD *)(v29 + 32);
            v29 += 224;
          }
          while (v29 != v28);
          *(_DWORD *)(v28 - 192) += 1000;
        }
      }
    }
    if (*v15 && !(_DWORD)a3 && *(_BYTE *)(a1 + 449))
    {
      if (quasar::gLogLevel >= 3)
      {
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v79 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Decoding for only the last utterance failed. Updating recogStatus to success", 76);
        quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)&v79);
      }
      a3 = 1;
    }
    quasar::RecogResult::RecogResult((quasar::RecogResult *)&v79, this);
    v30 = quasar::Token::resetSpacing((uint64_t **)(a1 + 328));
    quasar::Token::tokensWithCleanedMetadata(v30, v78);
    v31 = quasar::RecogResult::setResultChoices((uint64_t)&v79, (uint64_t)v78);
    v32 = quasar::RecogResult::setResultCosts(v31, a1 + 352);
    quasar::RecogResult::setResultMuxIds(v32, a1 + 376);
    if (quasar::gLogLevel >= 5)
    {
      v33 = quasar::RecogResult::getResultChoices((quasar::RecogResult *)&v79);
      v57 = (uint64_t *)quasar::RecogResult::getResultMuxIds((quasar::RecogResult *)&v79);
      if (quasar::gLogLevel >= 5)
      {
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v61 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Quasar PreITN Result. isFinal=", 30);
        v34 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" utteranceStartMillis=", 22);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
      }
      v35 = -1431655765 * ((uint64_t)(*(_QWORD *)(v33 + 8) - *(_QWORD *)v33) >> 3);
      if (v35)
      {
        quasar::tokens2Str(*(uint64_t **)v33, &v60);
        if (quasar::gLogLevel >= 5)
        {
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v61 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"PreITN 1-Best: ", 15);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v60;
          else
            v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            size = v60.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
        }
        v56 = a1;
        if (v35 >= 1)
        {
          for (i = 0; i != v35; ++i)
          {
            v40 = *v57;
            if (*(_QWORD *)(v33 + 8) - *(_QWORD *)v33 == v57[1] - *v57)
            {
              *(_QWORD *)&v61 = ",";
              *((_QWORD *)&v61 + 1) = 1;
              quasar::join<std::set<std::string>>((_QWORD *)(v40 + 24 * i), (uint64_t *)&v61);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "");
            }
            if (quasar::gLogLevel >= 5)
            {
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              v70 = 0u;
              v71 = 0u;
              v68 = 0u;
              v69 = 0u;
              v66 = 0u;
              v67 = 0u;
              v64 = 0u;
              v65 = 0u;
              v62 = 0u;
              v63 = 0u;
              v61 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"PreITN Choice: ", 15);
              v41 = (_QWORD *)std::ostream::operator<<();
              v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" muxIds: ", 9);
              if ((v59 & 0x80u) == 0)
                v43 = __p;
              else
                v43 = (void **)__p[0];
              if ((v59 & 0x80u) == 0)
                v44 = v59;
              else
                v44 = (uint64_t)__p[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
            }
            v45 = (uint64_t *)(*(_QWORD *)v33 + 24 * i);
            v46 = v45[1];
            v47 = *v45;
            if (v46 != *v45)
            {
              v48 = 0;
              v49 = 0;
              v50 = quasar::gLogLevel;
              do
              {
                if (v50 >= 5)
                {
                  v76 = 0u;
                  v77 = 0u;
                  v74 = 0u;
                  v75 = 0u;
                  v72 = 0u;
                  v73 = 0u;
                  v70 = 0u;
                  v71 = 0u;
                  v68 = 0u;
                  v69 = 0u;
                  v66 = 0u;
                  v67 = 0u;
                  v64 = 0u;
                  v65 = 0u;
                  v62 = 0u;
                  v63 = 0u;
                  v61 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"PreITN Token[", 13);
                  v51 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"][", 2);
                  v52 = (_QWORD *)std::ostream::operator<<();
                  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"]: ", 3);
                  quasar::operator<<(v53, *v45 + v48);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
                  v50 = quasar::gLogLevel;
                  v46 = v45[1];
                  v47 = *v45;
                }
                ++v49;
                v48 += 224;
              }
              while (0x6DB6DB6DB6DB6DB7 * ((v46 - v47) >> 5) > v49);
            }
            if ((char)v59 < 0)
              operator delete(__p[0]);
          }
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        a1 = v56;
        a3 = a3;
      }
    }
    (*(void (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), &v79, a3);
    *(_QWORD *)&v61 = v78;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)&v79);
  }
LABEL_92:
  *(_QWORD *)&v79 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
}

void sub_1ADE0E90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t v60;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a22);
  if (a21 < 0)
    operator delete(a16);
  a22 = (void **)&a57;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a22);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a60);
  a60 = (void **)(v60 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a60);
  _Unwind_Resume(a1);
}

void sub_1ADE0E92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1ADE0E9CCLL);
}

void sub_1ADE0E940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a57);
  JUMPOUT(0x1ADE0E9F4);
}

void sub_1ADE0E954()
{
  JUMPOUT(0x1ADE0E9DCLL);
}

void sub_1ADE0E960()
{
  JUMPOUT(0x1ADE0E9E4);
}

void sub_1ADE0E96C()
{
  JUMPOUT(0x1ADE0E9CCLL);
}

void sub_1ADE0E974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  a57 = (void **)&a19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a57);
  JUMPOUT(0x1ADE0E9E4);
}

void sub_1ADE0E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  uint64_t v60;

  if (a18 < 0)
    operator delete(__p);
  if (SHIBYTE(a21) < 0)
    operator delete(a19);
  a22 = (void **)&a57;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a22);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a60);
  a60 = (void **)(v60 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a60);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ResultStreamStabilizer::limitTokenTimestamp(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t *result;
  uint64_t *v6;
  uint64_t *v7;
  uint32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;

  if (a3)
  {
    v12 = 0;
    result = quasar::Align::MakeMonotonic(a2, (_BYTE *)&v12 + 1, &v12);
    v6 = (uint64_t *)*a2;
    v7 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 != v7)
    {
      v8 = (uint32x2_t)vdup_n_s32(a3);
      do
      {
        v9 = *v6;
        v10 = v6[1];
        while (v9 != v10)
        {
          *(uint32x2_t *)(v9 + 28) = vmin_u32(*(uint32x2_t *)(v9 + 28), v8);
          v11 = *(_DWORD *)(v9 + 36);
          if (v11 >= a3)
            v11 = a3;
          *(_DWORD *)(v9 + 36) = v11;
          v9 += 224;
        }
        v6 += 3;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t quasar::join<std::set<std::string>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::set<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADE0EB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ResultStreamStabilizer::writeFinalWithFormattedResultChoices()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This class is internal to Quasar, and this function is never called");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

uint64_t quasar::ResultStreamStabilizer::reportEndPointStatus(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3));
}

uint64_t quasar::ResultStreamStabilizer::reportHighResolutionRecognitionProgress(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3));
}

uint64_t quasar::ResultStreamStabilizer::reportRecognitionProgress(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3));
}

uint64_t quasar::ResultStreamStabilizer::reportRecognizerProgressStatus(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

uint64_t quasar::ResultStreamStabilizer::reportPause(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
}

uint64_t quasar::ResultStreamStabilizer::reportResume(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3));
}

uint64_t quasar::ResultStreamStabilizer::writeEndPointData(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
}

uint64_t quasar::ResultStreamStabilizer::endpoint(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
}

std::string *quasar::ResultStreamStabilizer::getPartialResultsInfo@<X0>(quasar::ResultStreamStabilizer *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v3 = (__int128 *)*((_QWORD *)this + 57);
    v4 = (__int128 *)*((_QWORD *)this + 58);
  }
  else
  {
    v3 = (__int128 *)*((_QWORD *)this + 60);
    v4 = (__int128 *)*((_QWORD *)this + 61);
  }
  return std::vector<std::pair<std::string,int>>::__init_with_size[abi:ne180100]<std::pair<std::string,int>*,std::pair<std::string,int>*>(a3, v3, v4, ((char *)v4 - (char *)v3) >> 5);
}

uint64_t std::deque<std::vector<std::string>>::pop_front(int64x2_t *a1)
{
  void **v3;

  v3 = (void **)(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

std::string *std::deque<std::vector<std::string>>::push_back(_QWORD *a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<std::string>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (std::string *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v8, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++a1[5];
  return result;
}

uint64_t std::vector<std::unordered_map<std::string,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::unordered_map<std::string,unsigned int>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (result != v7)
      result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

void quasar::ResultStreamStabilizer::~ResultStreamStabilizer(quasar::ResultStreamStabilizer *this)
{
  quasar::ResultStreamStabilizer::~ResultStreamStabilizer(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E5D38DD8;
  v4 = (void **)((char *)this + 480);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 456);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 424);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 400);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 376);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 328);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 327) < 0)
    operator delete(*((void **)this + 38));
  v4 = (void **)((char *)this + 280);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 256);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 208);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 128);
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::deque<std::vector<std::string>>::~deque[abi:ne180100]((_QWORD *)this + 10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  quasar::RecogResultStreamBase::~RecogResultStreamBase(this);
}

quasar::RecogResult *quasar::RecogResult::RecogResult(quasar::RecogResult *this, const quasar::RecogResult *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)this = &off_1E5D34928;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  v4 = *(_OWORD *)((char *)a2 + 24);
  v5 = *(_OWORD *)((char *)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 56);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  v7 = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)this + 11) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 13) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_OWORD *)a2 + 7);
  v14 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v14;
  *((_OWORD *)this + 7) = v13;
  v15 = *((_QWORD *)a2 + 21);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)this + 21) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
  if (*((char *)a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), *((const std::string::value_type **)a2 + 23), *((_QWORD *)a2 + 24));
  }
  else
  {
    v18 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
    *(_OWORD *)((char *)this + 184) = v18;
  }
  v19 = *((_OWORD *)a2 + 13);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_OWORD *)this + 13) = v19;
  *((_BYTE *)this + 232) = *((_BYTE *)a2 + 232);
  if (*((char *)a2 + 263) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 10, *((const std::string::value_type **)a2 + 30), *((_QWORD *)a2 + 31));
  }
  else
  {
    v20 = *((_OWORD *)a2 + 15);
    *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
    *((_OWORD *)this + 15) = v20;
  }
  v21 = *(_OWORD *)((char *)a2 + 264);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *(_OWORD *)((char *)this + 264) = v21;
  v22 = *((_OWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 300) = *(_OWORD *)((char *)a2 + 300);
  *((_OWORD *)this + 18) = v22;
  *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
  if (*((char *)a2 + 351) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), *((const std::string::value_type **)a2 + 41), *((_QWORD *)a2 + 42));
  }
  else
  {
    v23 = *(_OWORD *)((char *)a2 + 328);
    *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
    *(_OWORD *)((char *)this + 328) = v23;
  }
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  std::vector<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>>::__init_with_size[abi:ne180100]<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*,std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*>((char *)this + 352, *((uint64_t **)a2 + 44), *((uint64_t **)a2 + 45), (uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 3);
  return this;
}

void sub_1ADE0F05C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;

  if (*(char *)(v2 + 263) < 0)
    operator delete(*v6);
  if (*(char *)(v2 + 207) < 0)
    operator delete(*v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>>::__init_with_size[abi:ne180100]<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*,std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADE0F11C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::vector<std::string>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void **v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != (void **)v8)
    {
      do
      {
        v15 = v7;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 3;
        if ((char *)v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (void **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (void **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::set<std::string>>::__assign_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(uint64_t a1, const void ***a2, const void ***a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 + 16;
  v9 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::set<std::string>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (uint64_t **)&a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<std::string> *,std::set<std::string> *,std::set<std::string> *,0>((uint64_t)a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>(v8, (const void ***)v13, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<std::string> *,std::set<std::string> *,std::set<std::string> *,0>((uint64_t)a2, (uint64_t **)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 24;
      std::__tree<std::string>::destroy(v16 - 24, *(char **)(v16 - 16));
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADE0F524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE0F52C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<std::string> *,std::set<std::string> *,std::set<std::string> *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v4;
  _QWORD *v6;

  v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    v6 = (_QWORD *)(a1 + 8);
    do
    {
      if (v4 != a3)
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a3, *v4, v6);
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *std::vector<std::pair<std::string,int>>::__init_with_size[abi:ne180100]<std::pair<std::string,int>*,std::pair<std::string,int>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*,std::pair<std::string,int>*,std::pair<std::string,int>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADE0F608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*,std::pair<std::string,int>*,std::pair<std::string,int>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADE0F6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::deque<std::vector<std::string>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADE0F9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::string,unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1ADE0FB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::getPronunciationsFromOrthography(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  const void ***v6;
  const void ***v7;
  const void **v8;
  const void **v9;
  const void ***v10;
  BOOL v11;
  char v12[8];
  char *v13;

  quasar::getPronunciationsFromOrthography(a1, a2, a3, a4, 0, (quasar::LmeDataFactoryBase::PronSet *)v12);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v12);
  v7 = v6 + 1;
  v8 = *v6;
  if (*v6 != (const void **)(v6 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a5, v8 + 5, (uint64_t)(v8 + 5));
      v9 = (const void **)v8[1];
      if (v9)
      {
        do
        {
          v10 = (const void ***)v9;
          v9 = (const void **)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (const void ***)v8[2];
          v11 = *v10 == v8;
          v8 = (const void **)v10;
        }
        while (!v11);
      }
      v8 = (const void **)v10;
    }
    while (v10 != v7);
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v12, v13);
}

void sub_1ADE0FC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;

  std::__tree<std::string>::destroy(v11, *(char **)(v11 + 8));
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void quasar::getPronunciationsFromOrthography(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, quasar::LmeDataFactoryBase::PronSet *a6@<X8>)
{
  uint64_t v11;
  BOOL v12;
  quasar::QsrText *v13;
  __int128 **v14;
  __int128 **v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];
  _DWORD v27[12];
  char *v28[3];
  __int128 **v29;
  __int128 **v30;
  uint64_t v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  quasar::TextSanitizer::sanitize(a2, a1, (uint64_t)&v48);
  v11 = HIBYTE(v50);
  if (v50 < 0)
    v11 = v49;
  if (v11)
    v12 = 1;
  else
    v12 = quasar::gLogLevel < 4;
  if (!v12)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    memset(v32, 0, sizeof(v32));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Sanitization returned empty string", 34);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v32);
  }
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v13 = (quasar::QsrText *)(*(uint64_t (**)(uint64_t, void **, __int128 ***))(*(_QWORD *)a3 + 16))(a3, &v48, &v29);
  v14 = v29;
  v15 = v30;
  if (v29 == v30)
  {
    if (quasar::gLogLevel >= 4)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      memset(v32, 0, sizeof(v32));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Tokenizer returned empty tokens", 31);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v32);
    }
    quasar::LmeDataFactoryBase::PronSet::PronSet(a6);
  }
  else
  {
    do
    {
      v16 = *v14;
      v17 = v14[1];
      while (v16 != v17)
      {
        if (*((char *)v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v32, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
        }
        else
        {
          v18 = *v16;
          *(_QWORD *)&v32[16] = *((_QWORD *)v16 + 2);
          *(_OWORD *)v32 = v18;
        }
        v19 = quasar::QsrText::SingletonInstance(v13);
        v13 = (quasar::QsrText *)quasar::QsrText::encodeTokenQsrTextWithMetadata(v19, (std::string *)v32, (std::string *)v16);
        if ((v32[23] & 0x80000000) != 0)
          operator delete(*(void **)v32);
        v16 += 2;
      }
      v14 += 4;
    }
    while (v14 != v15);
    quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)v27);
    quasar::G2P::getProns(a4, &v29, v27, a5, v26);
    quasar::LmeDataFactoryBase::PronSet::PronSet(a6);
    quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)a6, v26);
    v20 = quasar::LmeDataFactoryBase::PronSet::empty(a6);
    if (quasar::gLogLevel > 3 && v20)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      memset(v32, 0, sizeof(v32));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Pronguesser returned empty prons for orthography ", 49);
      v23 = *(char *)(a1 + 23);
      if (v23 >= 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(a1 + 23);
      else
        v25 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v32);
    }
    *(_QWORD *)v32 = v26;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
    std::__tree<std::string>::destroy((uint64_t)v28, v28[1]);
  }
  *(_QWORD *)v32 = &v29;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (SHIBYTE(v50) < 0)
    operator delete(v48);
}

void sub_1ADE0FF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  __p = &a22;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v30 - 97) < 0)
    operator delete(*(void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void quasar::writeUserDataToJsonFile(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  void *__p[2];
  char v5;
  _BYTE v6[64];
  _BYTE v7[64];

  quasar::userDataToPtree(a2, a1, 0, (quasar::PTree *)v7);
  quasar::PTree::PTree((quasar::PTree *)v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "profile");
  quasar::PTree::putChild((uint64_t)v6, (uint64_t)__p, (uint64_t)v7, 1);
  if (v5 < 0)
    operator delete(__p[0]);
  quasar::PTree::writeJsonToFile((quasar::PTreeHelper *)v6, a3);
  quasar::PTree::~PTree((quasar::PTree *)v6);
  quasar::PTree::~PTree((quasar::PTree *)v7);
}

void sub_1ADE100A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  quasar::PTree::~PTree((quasar::PTree *)&a16);
  quasar::PTree::~PTree((quasar::PTree *)(v16 - 80));
  _Unwind_Resume(a1);
}

quasar::LmeConfig *quasar::LmeConfig::LmeConfig(quasar::LmeConfig *this, const quasar::SystemConfig *a2)
{
  uint64_t PtreeOptional;
  uint64_t v5;
  uint64_t Int;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  *(_QWORD *)this = 0x1400000032;
  *((_DWORD *)this + 2) = 2;
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a2);
  quasar::SystemConfig::Version::Version(&v27, 218, 0);
  if (quasar::SystemConfig::Version::operator>=(__p, &v27))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
    PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
    v5 = PtreeOptional;
    if (SBYTE7(v11) < 0)
    {
      operator delete(__p[0]);
      if (!v5)
        return this;
    }
    else if (!PtreeOptional)
    {
      return this;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "people-suggester-contacts-count");
    Int = quasar::PTree::getIntOptional<unsigned int>(v5, (uint64_t)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
    if ((Int & 0xFF00000000) != 0)
      *(_DWORD *)this = Int;
    std::string::basic_string[abi:ne180100]<0>(__p, "best-people-suggester-contacts-count");
    v7 = quasar::PTree::getIntOptional<unsigned int>(v5, (uint64_t)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
    if ((v7 & 0xFF00000000) != 0)
      *((_DWORD *)this + 1) = v7;
    std::string::basic_string[abi:ne180100]<0>(__p, "best-people-suggester-contacts-bonus");
    v8 = quasar::PTree::getIntOptional<unsigned int>(v5, (uint64_t)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
    if ((v8 & 0xFF00000000) != 0)
    {
      if ((_DWORD)v8)
      {
        *((_DWORD *)this + 2) = v8;
      }
      else if (quasar::gLogLevel >= 2)
      {
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"best-people-suggester-contacts-bonus is 0, ignoring.", 52);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
    }
  }
  return this;
}

void sub_1ADE102B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::LmeDataFactory(uint64_t a1, __int128 *a2, char a3, char a4, __int128 **a5)
{
  _QWORD *v10;
  char *v11;
  __int128 v12;
  uint64_t i;
  char v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v10 = quasar::LmeDataFactoryBase::LmeDataFactoryBase((_QWORD *)a1);
  *v10 = &off_1E5D35230;
  *((_DWORD *)v10 + 2) = 0;
  v10[2] = 0;
  v10[3] = 0;
  v11 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &unk_1E5D43328;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 34) = 3;
  *((_QWORD *)v11 + 19) = 0;
  *((_QWORD *)v11 + 20) = 0;
  *((_QWORD *)v11 + 18) = 0;
  *(_QWORD *)(a1 + 32) = v11 + 24;
  *(_QWORD *)(a1 + 40) = v11;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 48));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = -1;
  *(_QWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 96) = v12;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 120), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  v15 = a4;
  *(_BYTE *)(a1 + 184) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 192));
  *(_BYTE *)(a1 + 1736) = 0;
  *(_QWORD *)(a1 + 1744) = 0;
  *(_DWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 2216) = 0;
  *(_QWORD *)(a1 + 2208) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_QWORD *)(a1 + 2176) = 0;
  *(_QWORD *)(a1 + 2200) = a1 + 2208;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_DWORD *)(a1 + 2256) = 1065353216;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_DWORD *)(a1 + 2296) = 1065353216;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_DWORD *)(a1 + 2336) = 1065353216;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_DWORD *)(a1 + 2376) = 1065353216;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_DWORD *)(a1 + 2416) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v16, "\\NT-artist");
  v17 = 1500;
  std::string::basic_string[abi:ne180100]<0>(v18, "\\NT-playlist");
  v19 = 1500;
  std::unordered_map<std::string,int>::unordered_map(a1 + 2424, (unsigned __int8 *)v16, 2);
  for (i = 0; i != -8; i -= 4)
  {
    if (SHIBYTE(v18[i + 2]) < 0)
      operator delete((void *)v18[i]);
  }
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_DWORD *)(a1 + 2496) = 1065353216;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_DWORD *)(a1 + 2536) = 1065353216;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_QWORD *)(a1 + 2640) = 0;
  *(_DWORD *)(a1 + 2648) = 1065353216;
  *(_BYTE *)(a1 + 2656) = a3;
  *(_BYTE *)(a1 + 2657) = v15;
  *(_BYTE *)(a1 + 2658) = 0;
  *(_QWORD *)(a1 + 2660) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 2672), "");
  *(_QWORD *)(a1 + 2720) = 0;
  *(_QWORD *)(a1 + 2712) = 0;
  *(_QWORD *)(a1 + 2704) = a1 + 2712;
  *(_QWORD *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 2736) = 0;
  *(_QWORD *)(a1 + 2728) = a1 + 2736;
  *(_QWORD *)(a1 + 2768) = 0;
  *(_QWORD *)(a1 + 2760) = 0;
  *(_QWORD *)(a1 + 2752) = a1 + 2760;
  *(_OWORD *)(a1 + 144) = xmmword_1AE183990;
  *(_OWORD *)(a1 + 160) = xmmword_1AE1839A0;
  return a1;
}

void sub_1ADE1066C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, quasar::SystemConfig *a12, fst::SymbolTable *a13, uint64_t a14, _Unwind_Exception *exception_object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::Bitmap *v21;
  uint64_t v22;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22);
  fst::SymbolTable::~SymbolTable(a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v21 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  quasar::Bitmap::~Bitmap(v21);
  _Unwind_Resume(a1);
}

void sub_1ADE108C8()
{
  JUMPOUT(0x1ADE10878);
}

void sub_1ADE108D0()
{
  JUMPOUT(0x1ADE10884);
}

void sub_1ADE108D8()
{
  JUMPOUT(0x1ADE108A8);
}

void sub_1ADE108E0()
{
  JUMPOUT(0x1ADE108B0);
}

void quasar::LmeDataFactory::~LmeDataFactory(quasar::LmeDataFactory *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E5D35230;
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)this + 2752, *((_QWORD **)this + 345));
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)this + 2728, *((_QWORD **)this + 342));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2704, *((_QWORD **)this + 339));
  if (*((char *)this + 2695) < 0)
    operator delete(*((void **)this + 334));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 2616);
  v2 = (void **)((char *)this + 2592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 2568);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 2544);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2504);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2464);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2424);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2384);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2344);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2304);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2264);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2224);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 2200, *((_QWORD **)this + 276));
  if (*((char *)this + 2183) < 0)
    operator delete(*((void **)this + 270));
  if (*((char *)this + 2159) < 0)
    operator delete(*((void **)this + 267));
  if (*((char *)this + 2135) < 0)
    operator delete(*((void **)this + 264));
  if (*((char *)this + 2111) < 0)
    operator delete(*((void **)this + 261));
  if (*((char *)this + 2087) < 0)
    operator delete(*((void **)this + 258));
  if (*((char *)this + 2063) < 0)
    operator delete(*((void **)this + 255));
  if (*((char *)this + 2039) < 0)
    operator delete(*((void **)this + 252));
  if (*((char *)this + 2015) < 0)
    operator delete(*((void **)this + 249));
  if (*((char *)this + 1991) < 0)
    operator delete(*((void **)this + 246));
  if (*((char *)this + 1967) < 0)
    operator delete(*((void **)this + 243));
  if (*((char *)this + 1943) < 0)
    operator delete(*((void **)this + 240));
  if (*((char *)this + 1919) < 0)
    operator delete(*((void **)this + 237));
  if (*((char *)this + 1895) < 0)
    operator delete(*((void **)this + 234));
  if (*((char *)this + 1871) < 0)
    operator delete(*((void **)this + 231));
  if (*((char *)this + 1847) < 0)
    operator delete(*((void **)this + 228));
  if (*((char *)this + 1807) < 0)
    operator delete(*((void **)this + 223));
  if (*((char *)this + 1783) < 0)
    operator delete(*((void **)this + 220));
  quasar::SystemConfig::~SystemConfig((quasar::LmeDataFactory *)((char *)this + 192));
  v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  fst::SymbolTable::~SymbolTable((quasar::LmeDataFactory *)((char *)this + 48));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::LmeDataFactory::~LmeDataFactory(this);
  JUMPOUT(0x1AF44D190);
}

std::string *quasar::LmeDataFactory::AddConfigOverride(uint64_t a1, unsigned __int8 *a2, const std::string *a3)
{
  BOOL v6;
  unsigned __int8 *v7;
  _OWORD v9[17];

  if (*(_DWORD *)(a1 + 8))
    v6 = quasar::gLogLevel < 4;
  else
    v6 = 1;
  if (!v6)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"AddConfigOverride() can only be called before init()", 52);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v9);
  }
  *(_QWORD *)&v9[0] = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2616, a2, (uint64_t)&std::piecewise_construct, (__int128 **)v9);
  return std::string::operator=((std::string *)(v7 + 40), a3);
}

void sub_1ADE10C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::init(quasar::LmeDataFactory *this)
{
  uint64_t result;
  const quasar::SystemConfig *v3;
  _BOOL8 isPronGuesserWordpiece;
  _BOOL4 v5;
  char *v6;
  BOOL v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t Instance;
  char *v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t Ptree;
  __int128 v27;
  uint64_t SpeechModelInfo;
  __int128 *v29;
  __int128 *v30;
  uint64_t Child;
  std::string *v32;
  __int128 v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  quasar::PTree *ChildOptional;
  unsigned __int8 *v42;
  uint64_t j;
  double Double;
  uint64_t v45;
  quasar::PTree *v46;
  unsigned __int8 *v47;
  uint64_t k;
  double v49;
  uint64_t v50;
  quasar::PTree *v51;
  unsigned __int8 *v52;
  uint64_t m;
  double v54;
  uint64_t v55;
  quasar::PTree *v56;
  unsigned __int8 *v57;
  uint64_t n;
  double v59;
  uint64_t v60;
  quasar::PTree *v61;
  unsigned __int8 *v62;
  uint64_t ii;
  double v64;
  uint64_t v65;
  quasar::PTree *v66;
  unsigned __int8 *v67;
  uint64_t jj;
  int v69;
  uint64_t v70;
  quasar::PTree *v71;
  unsigned __int8 *v72;
  uint64_t kk;
  int v74;
  uint64_t v75;
  quasar::PTree *v76;
  unsigned __int8 *v77;
  uint64_t mm;
  int v79;
  const void **v80;
  const void **nn;
  std::string *v82;
  std::string *v83;
  const std::string *v84;
  void *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  std::locale::id *v94;
  const std::locale::facet *v95;
  unsigned __int8 v96;
  _QWORD *v97;
  unint64_t v98;
  _BOOL8 hasWhitespace;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  std::string::size_type v103;
  _QWORD *v104;
  std::string *v105;
  std::string::size_type v106;
  _QWORD *v107;
  _QWORD *v108;
  std::string *p_str;
  std::string::size_type v110;
  uint64_t *v111;
  _QWORD *v112;
  std::string *v113;
  std::string::size_type v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  int v125;
  _QWORD *v126;
  _QWORD *v127;
  std::string *v128;
  std::string::size_type v129;
  _QWORD *v130;
  std::string *v131;
  std::string::size_type size;
  _QWORD *v133;
  int v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  int v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  char *v143;
  uint64_t v144;
  std::string *v145;
  std::string __str;
  std::string v147;
  std::string v148;
  std::string v149;
  std::vector<std::wstring> v150;
  uint64_t v151;
  std::string v152;
  std::string v153;
  uint64_t v154;
  std::string v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void *__p[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  std::string *v176;

  if (*((_DWORD *)this + 2))
  {
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "LmeDataFactory already initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v145 = (std::string *)((char *)this + 192);
  result = quasar::SystemConfig::readJsonFile((uint64_t)this + 192, (uint64_t)this + 96, (uint64_t *)this + 15, (uint64_t)this + 2616, 0, 0);
  if ((_DWORD)result == 2)
    return result;
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create.");
  quasar::SystemConfig::setPrefix(v145, (const std::string *)__p);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  quasar::LmeDataFactory::registerParams((quasar::QsrTextSymbolTable **)this);
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  quasar::SystemConfig::readPtree((uint64_t)v145, (uint64_t)__p, 0, 0);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  isPronGuesserWordpiece = quasar::QuasarG2PFactory::isPronGuesserWordpiece((quasar::QuasarG2PFactory *)v145, v3);
  *((_BYTE *)this + 1736) = isPronGuesserWordpiece;
  if (quasar::LmeDataFactory::isWordpieceAllowed)
    v5 = 0;
  else
    v5 = isPronGuesserWordpiece;
  if (v5)
  {
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Wordpiece LME is disallowed", 27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (isPronGuesserWordpiece && *((_DWORD *)this + 455) == 2000000000)
    *((_DWORD *)this + 455) = 15000;
  v6 = (char *)this + 2160;
  if (*((char *)this + 2183) < 0)
  {
    v9 = *((_QWORD *)this + 271);
    if (v9 == 11)
    {
      v10 = *(uint64_t **)v6;
      if (**(_QWORD **)v6 == 0x6365697064726F57 && *(_QWORD *)(*(_QWORD *)v6 + 3) == 0x3256656365697064)
        goto LABEL_43;
      v12 = *v10;
      v13 = *(uint64_t *)((char *)v10 + 3);
      if (v12 == 0x6365697064726F57 && v13 == 0x3156656365697064)
        goto LABEL_44;
      v9 = *((_QWORD *)this + 271);
    }
    if (v9 != 2)
    {
LABEL_41:
      if (!v9)
      {
        Instance = kaldi::quasar::BIESLmeSymbolFormat::getInstance((kaldi::quasar::BIESLmeSymbolFormat *)isPronGuesserWordpiece);
        goto LABEL_45;
      }
LABEL_282:
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid symbolFormatName ", 25);
      v134 = *((char *)this + 2183);
      if (v134 >= 0)
        v135 = (char *)this + 2160;
      else
        v135 = (char *)*((_QWORD *)this + 270);
      if (v134 >= 0)
        v136 = *((unsigned __int8 *)this + 2183);
      else
        v136 = *((_QWORD *)this + 271);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v135, v136);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (**(_WORD **)v6 != 18754)
      goto LABEL_282;
  }
  else
  {
    if (*((_BYTE *)this + 2183) != 2)
    {
      if (*((_BYTE *)this + 2183) == 11)
      {
        v7 = *(_QWORD *)v6 == 0x6365697064726F57 && *(_QWORD *)((char *)this + 2163) == 0x3256656365697064;
        if (!v7)
        {
          if (*(_QWORD *)v6 != 0x6365697064726F57 || *(_QWORD *)((char *)this + 2163) != 0x3156656365697064)
            goto LABEL_27;
LABEL_44:
          Instance = kaldi::quasar::WordpieceV1LmeSymbolFormat::getInstance((kaldi::quasar::WordpieceV1LmeSymbolFormat *)isPronGuesserWordpiece);
          goto LABEL_45;
        }
LABEL_43:
        Instance = kaldi::quasar::WordpieceV2LmeSymbolFormat::getInstance((kaldi::quasar::WordpieceV2LmeSymbolFormat *)isPronGuesserWordpiece);
        goto LABEL_45;
      }
LABEL_27:
      v9 = *((unsigned __int8 *)this + 2183);
      goto LABEL_41;
    }
    if (*(_WORD *)v6 != 18754)
      goto LABEL_27;
  }
  Instance = kaldi::quasar::BILmeSymbolFormat::getInstance((kaldi::quasar::BILmeSymbolFormat *)isPronGuesserWordpiece);
LABEL_45:
  *((_QWORD *)this + 218) = Instance;
  v16 = getenv("QSR_LME_ALGO");
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v16);
    *((_DWORD *)this + 438) = std::stoi((const std::string *)__p, 0, 10);
    if (SBYTE7(v160) < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitStringSimple((uint64_t)this + 1824, (uint64_t *)__p, &v157);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  v18 = v157;
  for (i = v158; v18 != i; v18 += 24)
  {
    quasar::SystemConfig::quasarTemplateToAceCats((uint64_t)v145, (const void **)v18, &v153);
    if (v153.__r_.__value_.__r.__words[0] == v153.__r_.__value_.__l.__size_)
    {
      if (quasar::gLogLevel >= 1)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to find ", 15);
        v22 = *(char *)(v18 + 23);
        if (v22 >= 0)
          v23 = v18;
        else
          v23 = *(_QWORD *)v18;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v18 + 23);
        else
          v24 = *(_QWORD *)(v18 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" in template-map, skipped.", 26);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
    }
    else
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)this + 107, *((std::string **)this + 322), (std::string *)v153.__r_.__value_.__l.__data_, (__int128 *)v153.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153.__r_.__value_.__l.__size_ - v153.__r_.__value_.__r.__words[0]) >> 3));
      v19 = *((_QWORD *)this + 319);
      if (v19 >= *((_QWORD *)this + 320))
      {
        v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 318, (__int128 *)v18);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this + 2544, (__int128 *)v18);
        v20 = v19 + 24;
      }
      *((_QWORD *)this + 319) = v20;
    }
    __p[0] = &v153;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create.name-enumerator-map");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  LODWORD(v153.__r_.__value_.__l.__data_) = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v153.__r_.__value_.__r.__words[1], *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v27 = *(_OWORD *)(Ptree + 8);
    v154 = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v153.__r_.__value_.__r.__words[1] = v27;
  }
  memset(&v155, 0, sizeof(v155));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v155, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v156 = *(_BYTE *)(Ptree + 56);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)v145);
  v29 = *(__int128 **)(SpeechModelInfo + 240);
  v30 = (__int128 *)(SpeechModelInfo + 248);
  if (v29 != (__int128 *)(SpeechModelInfo + 248))
  {
    do
    {
      Child = quasar::PTree::getChild((uint64_t)&v153, v29 + 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "params");
      quasar::PTree::getChildOptional(Child, (uint64_t)__p);
      if (SBYTE7(v160) < 0)
        operator delete(__p[0]);
      std::operator+<char>();
      v32 = std::string::append(&v152, ".params.");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      *(_QWORD *)&v160 = *((_QWORD *)&v32->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      quasar::SystemConfig::setPrefix(v145, (const std::string *)__p);
      if (SBYTE7(v160) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      quasar::createNameEnumerator((uint64_t)v29 + 56, (quasar::SystemConfig *)v145, __p);
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)(v29 + 2);
      v34 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 275, (const void **)v29 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v152);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v34 + 7), (__int128 *)__p);
      v35 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v36 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = (__int128 *)*((_QWORD *)v29 + 1);
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = *(__int128 **)v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (__int128 *)*((_QWORD *)v29 + 2);
          v7 = *(_QWORD *)v39 == (_QWORD)v29;
          v29 = v39;
        }
        while (!v7);
      }
      v29 = v39;
    }
    while (v39 != v30);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v40 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "name-scale-map");
  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional(v40, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!ChildOptional)
      goto LABEL_96;
  }
  else if (!ChildOptional)
  {
    goto LABEL_96;
  }
  v42 = (unsigned __int8 *)quasar::PTree::begin(ChildOptional);
  for (j = quasar::PTree::end(ChildOptional); v42 != (unsigned __int8 *)j; v42 += 88)
  {
    Double = quasar::PTree::getDouble((quasar::PTree *)(v42 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2224, v42, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 5) = Double;
  }
LABEL_96:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v45 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "name-average-cost-map");
  v46 = (quasar::PTree *)quasar::PTree::getChildOptional(v45, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v46)
      goto LABEL_104;
  }
  else if (!v46)
  {
    goto LABEL_104;
  }
  v47 = (unsigned __int8 *)quasar::PTree::begin(v46);
  for (k = quasar::PTree::end(v46); v47 != (unsigned __int8 *)k; v47 += 88)
  {
    v49 = quasar::PTree::getDouble((quasar::PTree *)(v47 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2264, v47, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 5) = v49;
  }
LABEL_104:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v50 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "name-length-penalty-map");
  v51 = (quasar::PTree *)quasar::PTree::getChildOptional(v50, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v51)
      goto LABEL_112;
  }
  else if (!v51)
  {
    goto LABEL_112;
  }
  v52 = (unsigned __int8 *)quasar::PTree::begin(v51);
  for (m = quasar::PTree::end(v51); v52 != (unsigned __int8 *)m; v52 += 88)
  {
    v54 = quasar::PTree::getDouble((quasar::PTree *)(v52 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2304, v52, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 5) = v54;
  }
LABEL_112:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v55 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "name-length-penalty-cutoff-map");
  v56 = (quasar::PTree *)quasar::PTree::getChildOptional(v55, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v56)
      goto LABEL_120;
  }
  else if (!v56)
  {
    goto LABEL_120;
  }
  v57 = (unsigned __int8 *)quasar::PTree::begin(v56);
  for (n = quasar::PTree::end(v56); v57 != (unsigned __int8 *)n; v57 += 88)
  {
    v59 = quasar::PTree::getDouble((quasar::PTree *)(v57 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2344, v57, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 5) = v59;
  }
LABEL_120:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v60 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "name-deviation-cost-map");
  v61 = (quasar::PTree *)quasar::PTree::getChildOptional(v60, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v61)
      goto LABEL_128;
  }
  else if (!v61)
  {
    goto LABEL_128;
  }
  v62 = (unsigned __int8 *)quasar::PTree::begin(v61);
  for (ii = quasar::PTree::end(v61); v62 != (unsigned __int8 *)ii; v62 += 88)
  {
    v64 = quasar::PTree::getDouble((quasar::PTree *)(v62 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    *((double *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2384, v62, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 5) = v64;
  }
LABEL_128:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v65 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "max-entity-count-map-v2");
  v66 = (quasar::PTree *)quasar::PTree::getChildOptional(v65, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v66)
      goto LABEL_136;
  }
  else if (!v66)
  {
    goto LABEL_136;
  }
  v67 = (unsigned __int8 *)quasar::PTree::begin(v66);
  for (jj = quasar::PTree::end(v66); v67 != (unsigned __int8 *)jj; v67 += 88)
  {
    v69 = quasar::PTree::getInt<int>((uint64_t)(v67 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2424, v67, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 10) = v69;
  }
LABEL_136:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v70 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "max-orthography-length-map");
  v71 = (quasar::PTree *)quasar::PTree::getChildOptional(v70, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v71)
      goto LABEL_144;
  }
  else if (!v71)
  {
    goto LABEL_144;
  }
  v72 = (unsigned __int8 *)quasar::PTree::begin(v71);
  for (kk = quasar::PTree::end(v71); v72 != (unsigned __int8 *)kk; v72 += 88)
  {
    v74 = quasar::PTree::getInt<int>((uint64_t)(v72 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2464, v72, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 10) = v74;
  }
LABEL_144:
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 1872;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2504, (unsigned __int8 *)this + 1872, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 10) = 50;
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
  v75 = quasar::SystemConfig::getPtree((uint64_t)v145, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(&v152, "max-pronunciation-length-map");
  v76 = (quasar::PTree *)quasar::PTree::getChildOptional(v75, (uint64_t)&v152);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SBYTE7(v160) < 0)
  {
    operator delete(__p[0]);
    if (!v76)
      goto LABEL_152;
  }
  else if (!v76)
  {
    goto LABEL_152;
  }
  v77 = (unsigned __int8 *)quasar::PTree::begin(v76);
  for (mm = quasar::PTree::end(v76); v77 != (unsigned __int8 *)mm; v77 += 88)
  {
    v79 = quasar::PTree::getInt<int>((uint64_t)(v77 + 24));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 2504, v77, (uint64_t)&std::piecewise_construct, (__int128 **)&v152)+ 10) = v79;
  }
LABEL_152:
  v80 = (const void **)*((_QWORD *)this + 318);
  for (nn = (const void **)*((_QWORD *)this + 319); v80 != nn; v80 += 3)
  {
    quasar::SystemConfig::quasarTemplateToAceCats((uint64_t)v145, v80, (std::string *)__p);
    v82 = (std::string *)*((_QWORD *)this + 325);
    if ((unint64_t)v82 >= *((_QWORD *)this + 326))
    {
      v83 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 324, (__int128 *)v80);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this + 2592, (__int128 *)v80);
      v83 = v82 + 1;
    }
    *((_QWORD *)this + 325) = v83;
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)this + 108, v83, (std::string *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  }
  v84 = (const std::string *)*((_QWORD *)this + 4);
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)v145);
  quasar::QsrTextSymbolTable::init(v84, (const quasar::SystemConfig::Version *)__p, 0, 0, 1);
  quasar::Lexicon::create((uint64_t)this + 1784, (uint64_t)this + 1760, __p);
  std::shared_ptr<quasar::Lexicon>::operator=[abi:ne180100]<quasar::Lexicon,std::default_delete<quasar::Lexicon>,void>((_QWORD *)this + 2, (uint64_t *)__p);
  v85 = __p[0];
  __p[0] = 0;
  if (v85)
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)__p, (uint64_t)v85);
  if (*((char *)this + 2695) < 0)
  {
    if (*((_QWORD *)this + 335))
      goto LABEL_161;
  }
  else if (*((_BYTE *)this + 2695))
  {
LABEL_161:
    v152.__r_.__value_.__r.__words[0] = 0;
    if ((kaldi::Input::OpenInternal(&v152, (uint64_t)this + 2672, 0, 0) & 1) == 0)
    {
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"can not open ", 13);
      v138 = *((char *)this + 2695);
      if (v138 >= 0)
        v139 = (char *)this + 2672;
      else
        v139 = (char *)*((_QWORD *)this + 334);
      if (v138 >= 0)
        v140 = *((unsigned __int8 *)this + 2695);
      else
        v140 = *((_QWORD *)this + 335);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v139, v140);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v86 = kaldi::Input::Stream((kaldi::Input *)&v152);
    v149.__r_.__value_.__s.__data_[0] = 0;
    v148.__r_.__value_.__s.__data_[0] = 0;
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Lexicon,std::allocator<kaldi::quasar::Lexicon>,std::istream &,BOOL,BOOL,void>(v86, (unsigned __int8 *)&v149, (unsigned __int8 *)&v148, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 80, (__int128 *)__p);
    v87 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v88 = (unint64_t *)((char *)__p[1] + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    kaldi::Input::Close((kaldi::Input *)&v152);
    kaldi::Input::~Input((kaldi::Input *)&v152);
    goto LABEL_168;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar7LexiconENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 80, (__int128 *)__p);
  v90 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v91 = (unint64_t *)((char *)__p[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_168:
  if ((*((char *)this + 2135) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 2135))
      goto LABEL_179;
    goto LABEL_178;
  }
  if (*((_QWORD *)this + 265))
LABEL_178:
    std::string::operator=((std::string *)this + 89, (const std::string *)this + 88);
LABEL_179:
  if (*((char *)this + 2159) < 0)
  {
    if (!*((_QWORD *)this + 268))
      goto LABEL_244;
  }
  else if (!*((_BYTE *)this + 2159))
  {
    goto LABEL_244;
  }
  v151 = 0;
  if ((kaldi::Input::OpenInternal(&v151, (uint64_t)this + 2136, 0, 0) & 1) == 0)
  {
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cannot open g2p rewrite file ", 29);
    v142 = *((char *)this + 2159);
    if (v142 >= 0)
      v143 = (char *)this + 2136;
    else
      v143 = (char *)*((_QWORD *)this + 267);
    if (v142 >= 0)
      v144 = *((unsigned __int8 *)this + 2159);
    else
      v144 = *((_QWORD *)this + 268);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v143, v144);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v93 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)&v151);
  memset(&v152, 0, sizeof(v152));
  memset(&v150, 0, sizeof(v150));
  memset(&v149, 0, sizeof(v149));
  memset(&v148, 0, sizeof(v148));
  v94 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(_QWORD *)(*v93 - 24)));
    v95 = std::locale::use_facet((const std::locale *)&v147, v94);
    v96 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
    std::locale::~locale((std::locale *)&v147);
    v97 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, (uint64_t)&v152, v96);
    if ((*((_BYTE *)v97 + *(_QWORD *)(*v97 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&v152);
    std::string::basic_string[abi:ne180100]<0>(&v147, "->");
    quasar::splitAndTrim(&v152, (char *)&v147, (uint64_t *)__p);
    std::vector<std::string>::__vdeallocate(&v150);
    *(_OWORD *)&v150.__begin_ = *(_OWORD *)__p;
    v150.__end_cap_.__value_ = (std::wstring *)v160;
    __p[1] = 0;
    *(_QWORD *)&v160 = 0;
    __p[0] = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)v150.__end_ - (char *)v150.__begin_) >> 3);
    if (v98 == 2)
    {
      if (*((char *)this + 2135) < 0)
      {
        if (*((_QWORD *)this + 265))
        {
LABEL_272:
          v174 = 0u;
          v175 = 0u;
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          v160 = 0u;
          v161 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"G2P blacklist does not support rewrite rules", 44);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
      }
      else if (*((_BYTE *)this + 2135))
      {
        goto LABEL_272;
      }
      std::string::operator=(&v149, (const std::string *)v150.__begin_);
      std::string::operator=(&v148, (const std::string *)&v150.__begin_[1]);
    }
    else
    {
      if (v98 != 1)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed g2p rewrite file line=", 32);
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v131 = &v152;
        else
          v131 = (std::string *)v152.__r_.__value_.__r.__words[0];
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        else
          size = v152.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)v131, size);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      std::string::operator=(&v149, (const std::string *)v150.__begin_);
      MEMORY[0x1AF44C914](&v148, "");
    }
    if (quasar::hasWhitespace((char *)&v149) || (hasWhitespace = quasar::hasWhitespace((char *)&v148)))
    {
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"g2p rewrite file contains whitespace line=", 42);
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = &v152;
      else
        v128 = (std::string *)v152.__r_.__value_.__r.__words[0];
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
      else
        v129 = v152.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)v128, v129);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    memset(&v147, 0, sizeof(v147));
    memset(&__str, 0, sizeof(__str));
    v100 = quasar::QsrText::SingletonInstance((quasar::QsrText *)hasWhitespace);
    v101 = quasar::QsrText::encodeTokenQsrTextWithMetadata(v100, &v149, &v147);
    if (!v101)
    {
      if (quasar::gLogLevel < 2)
        goto LABEL_233;
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to encode g2p rewrite entry in QsrText: ", 47);
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = &v149;
      else
        v113 = (std::string *)v149.__r_.__value_.__r.__words[0];
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
      else
        v114 = v149.__r_.__value_.__l.__size_;
LABEL_232:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)v113, v114);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      goto LABEL_233;
    }
    v102 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v101);
    if (!quasar::QsrText::encodeTokenQsrTextWithMetadata(v102, &v148, &__str))
    {
      if (quasar::gLogLevel < 2)
        goto LABEL_233;
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to encode g2p rewrite entry in QsrText: ", 47);
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = &v148;
      else
        v113 = (std::string *)v148.__r_.__value_.__r.__words[0];
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
      else
        v114 = v148.__r_.__value_.__l.__size_;
      goto LABEL_232;
    }
    v103 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
    if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v103 = v147.__r_.__value_.__l.__size_;
    if (v103)
    {
      if (quasar::gLogLevel >= 4)
      {
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"G2P rewrite rule ", 17);
        if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = &v147;
        else
          v105 = (std::string *)v147.__r_.__value_.__r.__words[0];
        if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
        else
          v106 = v147.__r_.__value_.__l.__size_;
        v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v105, v106);
        v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" -> ", 4);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v110 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v110 = __str.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)p_str, v110);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v176 = &v147;
      v111 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 338, (const void **)&v147.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v176);
      std::string::operator=((std::string *)(v111 + 7), &__str);
    }
LABEL_233:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
  }
  kaldi::Input::Close((kaldi::Input *)&v151);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  __p[0] = &v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)&v151);
LABEL_244:
  if (quasar::gLogLevel >= 4)
  {
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"G2P rewrite size=", 17);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::LmeConfig::LmeConfig((quasar::LmeConfig *)__p, (const quasar::SystemConfig *)v145);
  *((void **)this + 273) = __p[0];
  *((_DWORD *)this + 548) = __p[1];
  quasar::PTree::~PTree((quasar::PTree *)&v153);
  __p[0] = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v115 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "/sil_B/");
  quasar::QsrTextSymbolTable::AddSymbol(v115);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  v116 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "/sil_S/");
  quasar::QsrTextSymbolTable::AddSymbol(v116);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  v117 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "/sil_E/");
  quasar::QsrTextSymbolTable::AddSymbol(v117);
  if (SBYTE7(v160) < 0)
    operator delete(__p[0]);
  v118 = *((_QWORD *)this + 4);
  v119 = *(void **)(v118 + 96);
  v120 = *(std::__shared_weak_count **)(v118 + 104);
  __p[0] = v119;
  __p[1] = v120;
  if (v120)
  {
    p_shared_owners = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldxr(p_shared_owners);
    while (__stxr(v122 + 1, p_shared_owners));
  }
  kaldi::quasar::LmeFst::ExtractMinimumBaseSymbols((uint64_t)v119, (uint64_t)this + 48, *((_QWORD *)this + 218), (uint64_t *)this + 8, (uint64_t *)this + 9);
  if (v120)
  {
    v123 = (unint64_t *)&v120->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v125 = quasar::gLogLevel;
  if (quasar::gLogLevel >= 5)
  {
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME disambig sym range: ", 24);
    v126 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)" ", 1);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    v125 = quasar::gLogLevel;
  }
  result = 0;
  *((_OWORD *)this + 9) = xmmword_1AE183990;
  *((_OWORD *)this + 10) = xmmword_1AE1839A0;
  *((_BYTE *)this + 184) = 0;
  *((_DWORD *)this + 2) = 1;
  if (v125 >= 5)
  {
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LmeDataFactory initialized.", 27);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    return 0;
  }
  return result;
}

void sub_1ADE12860()
{
  JUMPOUT(0x1ADE1296CLL);
}

void sub_1ADE12874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  a27 = (void **)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a27);
  JUMPOUT(0x1ADE129D0);
}

void sub_1ADE128B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a32 < 0)
    JUMPOUT(0x1ADE128E8);
  JUMPOUT(0x1ADE129D0);
}

void sub_1ADE128F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  JUMPOUT(0x1ADE129D0);
}

void sub_1ADE12934()
{
  JUMPOUT(0x1ADE129D0);
}

void sub_1ADE12940(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  JUMPOUT(0x1ADE12988);
}

void sub_1ADE12980(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char *a50)
{
  fst *v52;
  _QWORD *v53;
  _QWORD *v54;
  const char *v55;
  size_t v56;
  _QWORD *v57;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  a50 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (a38 < 0)
    operator delete(a33);
  kaldi::Input::~Input((kaldi::Input *)&a32);
  quasar::PTree::~PTree((quasar::PTree *)&a39);
  a50 = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (a2 == 2 || a2 == 1)
  {
    v52 = (fst *)__cxa_begin_catch(a1);
    v53 = (_QWORD *)fst::cout(v52);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Error reading JSON config file: ", 32);
    v55 = (const char *)(*(uint64_t (**)(fst *))(*(_QWORD *)v52 + 16))(v52);
    v56 = strlen(v55);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v57);
    __cxa_end_catch();
    JUMPOUT(0x1ADE12248);
  }
  JUMPOUT(0x1ADE127B0);
}

void sub_1ADE12AA8()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADE127B0);
}

void sub_1ADE12AB4()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADE127B0);
}

uint64_t quasar::LmeDataFactory::registerParams(quasar::QsrTextSymbolTable **this)
{
  char *v3;
  void *__p[2];
  char v5;
  const void *v6[2];
  char v7;

  quasar::QsrTextSymbolTable::Register(this[4], (quasar::SystemConfig *)(this + 24), 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "base-dict-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 220), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "base-dict-mapped-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base lexicon file, mmap-able (overrides text lexicon file)");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 223), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for the LME FST");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)(this + 226), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-average-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of entering an LME FST");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)this + 1812, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-deviation-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of deviating from an average size LME class");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)(this + 227), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-lme-template-plist");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-delimited LME template names, ordered by enrollment priority");
  v3 = (char *)(this + 228);
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 228), (uint64_t)__p, 1, 18, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-lme-template-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-delimited LME template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)v3, (uint64_t)__p, 1, 0, 0, 17, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "contacts-template-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "Quasar template name for user's contact names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 234), (uint64_t)__p, 1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "appcontacts-template-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "Quasar template name for 3rd-party app contact names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 237), (uint64_t)__p, 1, 18, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-num-enumerated-contacts");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of contacts (e.g. in NT-contact and NT-appcontact) to allow in a user's profile");
  quasar::SystemConfig::Register<int>((uint64_t)(this + 24), v6, (uint64_t)this + 1820, (uint64_t)__p, 0, 18, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "just-in-time-template-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "Just in time LME template name");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 231), (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "tropical-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "When it is set to true, we will use tropical weight in the LME FST.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)(this + 24), v6, (uint64_t)this + 2658, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-phones-to-p2wp");
  std::string::basic_string[abi:ne180100]<0>(__p, "When pronunciations of an entity have fewer phones than this value, P2WP will be not used.");
  quasar::SystemConfig::Register<int>((uint64_t)(this + 24), v6, (uint64_t)this + 2660, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "p2wp-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extra cost applied to P2WP wordpiece representations.");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)(this + 333), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "template-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Mapping from ACE category names to Quasar template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 240), (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "name-enumerator-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Mapping from Quasar template names to enumerator names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 243), (uint64_t)__p, 1, 3, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-prons-compound-word");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of pronunciations for compound words");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)(this + 24), v6, (uint64_t)(this + 337), (uint64_t)__p, 0, 14, 3, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "g2p-blacklist");
  std::string::basic_string[abi:ne180100]<0>(__p, "During G2P, empty prons will be returned for tokens listed in this file. File format: same as a lexicon text file (not hat encoded) with the prons removed so that only one column remains per line. Order does not matter.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 264), (uint64_t)__p, 0, 21, 0, 94, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "g2p-rewrite-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File format: If a rule is in the form of 'A -> B' (whitespace optional), then rewrite token A to token B before doing G2P. If a rule is in the form of 'A', then rewrite A to an empty string. This 2nd rule has the same format and effect as g2p-blacklist entries and therefore makes g2p-rewrite-file a superset of g2p-blacklist.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 267), (uint64_t)__p, 0, 95, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "name-scale-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "LME scale for specific Quasar template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 246), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "name-average-cost-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of entering an LME FST for a specific template");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 249), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "name-deviation-cost-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of deviating from an average size LME class for a specific template");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 252), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-entity-count-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Per-template map: If >= 0, maximum number of entities allowed. Additional entities are rejected.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 255), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-orthography-length-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Per-template map: If >= 0, maximum orthography length. Entries with any words that have longer orthography lengths are rejected.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 258), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-pronunciation-length-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Per-template map: If >= 0, maximum pronunciation length (# phonemes). Entries with longer pronunciations are rejected.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 261), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "symbol-format");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 270), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete((void *)v6[0]);
  MEMORY[0x1AF44C914](this + 220, "");
  MEMORY[0x1AF44C914](this + 223, "");
  this[226] = (quasar::QsrTextSymbolTable *)1065353216;
  *((_DWORD *)this + 454) = 0;
  MEMORY[0x1AF44C914](v3, "");
  MEMORY[0x1AF44C914](this + 231, "\\NT-inline");
  MEMORY[0x1AF44C914](this + 234, "\\NT-contact");
  MEMORY[0x1AF44C914](this + 237, "\\NT-appcontact");
  MEMORY[0x1AF44C914](this + 240, "");
  MEMORY[0x1AF44C914](this + 246, "");
  MEMORY[0x1AF44C914](this + 249, "");
  MEMORY[0x1AF44C914](this + 252, "");
  MEMORY[0x1AF44C914](this + 255, "");
  MEMORY[0x1AF44C914](this + 258, "");
  MEMORY[0x1AF44C914](this + 261, "");
  *((_DWORD *)this + 674) = 32;
  *((_DWORD *)this + 455) = 2000000000;
  return MEMORY[0x1AF44C914](this + 264, "");
}

void sub_1ADE1374C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::WordpieceV2LmeSymbolFormat::getInstance(kaldi::quasar::WordpieceV2LmeSymbolFormat *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = &unk_1E5D33E60;
    kaldi::quasar::WordpieceV2LmeSymbolFormat::getInstance(void)::singleton = (uint64_t)v3;
  }
  return kaldi::quasar::WordpieceV2LmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1ADE138C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordpieceV1LmeSymbolFormat::getInstance(kaldi::quasar::WordpieceV1LmeSymbolFormat *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = &unk_1E5D33E28;
    kaldi::quasar::WordpieceV1LmeSymbolFormat::getInstance(void)::singleton = (uint64_t)v3;
  }
  return kaldi::quasar::WordpieceV1LmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1ADE13958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BILmeSymbolFormat::getInstance(kaldi::quasar::BILmeSymbolFormat *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = &unk_1E5D33538;
    kaldi::quasar::BILmeSymbolFormat::getInstance(void)::singleton = (uint64_t)v3;
  }
  return kaldi::quasar::BILmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1ADE139EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BIESLmeSymbolFormat::getInstance(kaldi::quasar::BIESLmeSymbolFormat *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = &unk_1E5D33700;
    kaldi::quasar::BIESLmeSymbolFormat::getInstance(void)::singleton = (uint64_t)v3;
  }
  return kaldi::quasar::BIESLmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1ADE13A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::Lexicon>::operator=[abi:ne180100]<quasar::Lexicon,std::default_delete<quasar::Lexicon>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D46428;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void quasar::LmeDataFactory::getNameEnumeratorFromAceCategory(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string __p;

  quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, a2, &__p);
  quasar::LmeDataFactory::getNameEnumerator(a1, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE13B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::LmeDataFactory::getNameEnumerator(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  int v13;
  const void *v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *a4 = 0;
  a4[1] = 0;
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 2200, (const void **)a2);
  if (a1 + 2208 == v8)
  {
    if (a3 && quasar::gLogLevel >= 4)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Could not find enumerator for quasar template ", 46);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = (const void *)a2;
      else
        v14 = *(const void **)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      goto LABEL_24;
    }
  }
  else
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a4, (uint64_t *)(v8 + 56));
    if (a3 && quasar::gLogLevel >= 4)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Enumeration type:", 17);
      v10 = *a4;
      if (*(char *)(*a4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
      }
      else
      {
        v11 = *(_OWORD *)(v10 + 8);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v19);
    }
  }
}

void sub_1ADE13D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getMaxEntityCountFromQuasarTemplate(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2424), a2);
  if (v2)
    return *((unsigned int *)v2 + 10);
  else
    return 0xFFFFFFFFLL;
}

uint64_t quasar::LmeDataFactory::getMaxOrthographyLengthFromQuasarTemplate(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2464), a2);
  if (v2)
    return *((unsigned int *)v2 + 10);
  else
    return 0xFFFFFFFFLL;
}

uint64_t quasar::LmeDataFactory::getMaxNumEnumeratedContacts(quasar::LmeDataFactory *this)
{
  return *((unsigned int *)this + 455);
}

BOOL quasar::LmeDataFactory::isSupportedCategory(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::string __p;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (*(_DWORD *)(a1 + 8) != 1)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v22);
  }
  quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, a2, &__p);
  v6 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 2544), *(_QWORD *)(a1 + 2552), (unsigned __int8 **)&__p);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 2552);
  if (quasar::gLogLevel < 4)
    v9 = 1;
  else
    v9 = a3;
  if (v6 == v8)
  {
    if ((v9 & 1) != 0)
      goto LABEL_23;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Checking category \"", 19);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\": Not supported", 16);
  }
  else
  {
    if ((v9 & 1) != 0)
      goto LABEL_23;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Checking category \"", 19);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\": Supported", 12);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
LABEL_23:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7 != v8;
}

uint64_t quasar::LmeDataFactory::startNewSpeaker(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*(_DWORD *)(a1 + 8) != 1)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
  }
  *(_OWORD *)(a1 + 144) = xmmword_1AE183990;
  *(_OWORD *)(a1 + 160) = xmmword_1AE1839A0;
  *(_BYTE *)(a1 + 184) = 0;
  if (quasar::gLogLevel >= 4)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Starting LME for new speaker.", 29);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v13);
  }
  v4 = *a2;
  v5 = a2[1];
  v12[0] = v4;
  v12[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = quasar::LmeDataFactory::setAotLmeData(a1, v12);
  if (v5)
  {
    v9 = (unint64_t *)(v5 + 1);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(uint64_t *))(*v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  return v8;
}

uint64_t quasar::LmeDataFactory::setAotLmeData(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t SpeechModelInfo;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  __int128 *p_s1;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v33[2];
  unsigned __int8 v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 __s1;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  if (*(_DWORD *)(a1 + 8) != 1)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    __s1 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v52, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v52);
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    quasar::LmeData::LmeData((quasar::LmeData *)&v52, 0);
    v5 = *a2;
    if (!v5)
    {
      v3 = 2;
LABEL_26:
      if (quasar::gLogLevel >= 4)
      {
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding AOT LME for speaker. lmeDataStatus=", 42);
        quasar::lmeDataStatusString(v3, v33);
        if ((v34 & 0x80u) == 0)
          v17 = v33;
        else
          v17 = (void **)v33[0];
        if ((v34 & 0x80u) == 0)
          v18 = v34;
        else
          v18 = (uint64_t)v33[1];
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", nextLmeStartSymbolKey[AotLme]=", 32);
        std::ostream::operator<<();
        if ((char)v34 < 0)
          operator delete(v33[0]);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
LABEL_52:
      quasar::LmeData::~LmeData((quasar::LmeData *)&v52);
      return v3;
    }
    *(_BYTE *)(a1 + 184) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v3 = quasar::LmeData::fromStream((uint64_t)&v52, v5, 0, (unsigned __int8 *)__p);
    if (SBYTE7(v36) < 0)
      operator delete(__p[0]);
    if ((v3 & 0xFFFFFFFD) != 1)
      goto LABEL_26;
    SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)(a1 + 192));
    v7 = BYTE7(v64);
    if ((SBYTE7(v64) & 0x80u) == 0)
      v8 = BYTE7(v64);
    else
      v8 = *((_QWORD *)&__s1 + 1);
    v9 = *(unsigned __int8 *)(SpeechModelInfo + 167);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(SpeechModelInfo + 152);
    if (v8 == v9)
    {
      v13 = *(unsigned __int8 **)(SpeechModelInfo + 144);
      v11 = (unsigned __int8 *)(SpeechModelInfo + 144);
      v12 = v13;
      if (v10 >= 0)
        v14 = v11;
      else
        v14 = v12;
      if ((BYTE7(v64) & 0x80) == 0)
      {
        if (BYTE7(v64))
        {
          p_s1 = &__s1;
          while (*(unsigned __int8 *)p_s1 == *v14)
          {
            p_s1 = (__int128 *)((char *)p_s1 + 1);
            ++v14;
            if (!--v7)
              goto LABEL_54;
          }
          goto LABEL_37;
        }
        goto LABEL_54;
      }
      if (!memcmp((const void *)__s1, v14, *((size_t *)&__s1 + 1)))
      {
LABEL_54:
        if ((*((_QWORD *)&v62 + 1) & 0x8000000000000000) == 0)
          *(_QWORD *)(a1 + 144) = *((_QWORD *)&v62 + 1) + 1;
        goto LABEL_26;
      }
    }
LABEL_37:
    if (quasar::gLogLevel >= 4)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME data has phone set version ", 31);
      if ((SBYTE7(v64) & 0x80u) == 0)
        v21 = &__s1;
      else
        v21 = (__int128 *)__s1;
      if ((SBYTE7(v64) & 0x80u) == 0)
        v22 = BYTE7(v64);
      else
        v22 = *((_QWORD *)&__s1 + 1);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" which is different from model phone set version ", 49);
      v25 = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)(a1 + 192));
      v28 = *(_QWORD *)(v25 + 144);
      v26 = v25 + 144;
      v27 = v28;
      v29 = *(char *)(v26 + 23);
      if (v29 >= 0)
        v30 = v26;
      else
        v30 = v27;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v26 + 23);
      else
        v31 = *(_QWORD *)(v26 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v30, v31);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v3 = 5;
    goto LABEL_52;
  }
  if (quasar::gLogLevel >= 4)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    __s1 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"AOT LME data has already been provided.", 39);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v52);
  }
  return 6;
}

void sub_1ADE145D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a47);
}

uint64_t quasar::LmeDataFactory::getLmeTypeFromUserData(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  unsigned __int8 **v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  size_t *v12;
  uint64_t v13;
  size_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  size_t __n[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  _DWORD *v42[2];

  v40 = 0;
  v41 = 0;
  v39 = (uint64_t *)&v40;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
LABEL_39:
    v19 = 5;
    goto LABEL_40;
  }
  v5 = a1 + 192;
  v6 = (unsigned __int8 **)(a1 + 1848);
  do
  {
    quasar::SystemConfig::aceCatToQuasarTemplate(v5, (uint64_t)(v3 + 4), (std::string *)__n);
    v7 = __n[1];
    if ((SBYTE7(v22) & 0x80u) == 0)
      v8 = BYTE7(v22);
    else
      v8 = __n[1];
    v9 = *(unsigned __int8 *)(a1 + 1871);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 1856);
    if (v8 == v9)
    {
      if (v10 >= 0)
        v11 = (unsigned __int8 *)v6;
      else
        v11 = *v6;
      if ((BYTE7(v22) & 0x80) != 0)
      {
        if (!memcmp((const void *)__n[0], v11, __n[1]))
        {
LABEL_26:
          v38 = 1;
          v42[0] = &v38;
          v15 = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(&v39, &v38, (uint64_t)&std::piecewise_construct, v42);
          goto LABEL_28;
        }
        goto LABEL_22;
      }
      if (!BYTE7(v22))
        goto LABEL_26;
      v12 = __n;
      v13 = BYTE7(v22);
      while (*(unsigned __int8 *)v12 == *v11)
      {
        v12 = (size_t *)((char *)v12 + 1);
        ++v11;
        if (!--v13)
          goto LABEL_26;
      }
    }
    if ((BYTE7(v22) & 0x80) == 0)
    {
      if (BYTE7(v22) != 8)
        goto LABEL_25;
      v14 = __n;
      goto LABEL_24;
    }
LABEL_22:
    if (v7 != 8)
      goto LABEL_25;
    v14 = (size_t *)__n[0];
LABEL_24:
    if (*v14 != 0x7A7A75622D544E5CLL)
    {
LABEL_25:
      v38 = 0;
      v42[0] = &v38;
      v15 = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(&v39, &v38, (uint64_t)&std::piecewise_construct, v42);
      goto LABEL_28;
    }
    v38 = 2;
    v42[0] = &v38;
    v15 = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(&v39, &v38, (uint64_t)&std::piecewise_construct, v42);
LABEL_28:
    *((_BYTE *)v15 + 32) = 1;
    if (SBYTE7(v22) < 0)
      operator delete((void *)__n[0]);
    v16 = (_QWORD *)v3[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (_QWORD *)v3[2];
        v18 = *v17 == (_QWORD)v3;
        v3 = v17;
      }
      while (!v18);
    }
    v3 = v17;
  }
  while (v17 != v2);
  if (v41 > 1)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)__n = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__n);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__n, (uint64_t)"Multipe LmeType in single user data is not supported.", 53);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__n);
  }
  if (!v41)
    goto LABEL_39;
  v19 = *((unsigned int *)v39 + 7);
LABEL_40:
  std::__tree<int>::destroy((uint64_t)&v39, v40);
  return v19;
}

void sub_1ADE14870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__tree<int>::destroy(v14 - 128, *(_QWORD **)(v14 - 120));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getLmeData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t *a12)
{
  unsigned int LmeTypeFromUserData;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_DWORD *, uint64_t *, uint64_t, unsigned int *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *);
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  if (a1[2] != 1)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    memset(v42, 0, sizeof(v42));
    v40 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v40);
  }
  quasar::getUserDataTemplateNames(a2, a11, (uint64_t)v39);
  LmeTypeFromUserData = quasar::LmeDataFactory::getLmeTypeFromUserData((uint64_t)a1, v39);
  *a8 = LmeTypeFromUserData;
  if (LmeTypeFromUserData == 5)
  {
    if (quasar::gLogLevel >= 4)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      memset(v42, 0, sizeof(v42));
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"is UserData empty? not able to tell which lmeType from userData which has size: ", 80);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v40);
    }
    v21 = 5;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      memset(v42, 0, sizeof(v42));
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"generate Lme Data for lmeType: ", 31);
      quasar::operator<<(v22, *a8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v40);
    }
    v40 = 0u;
    v41 = 0u;
    LODWORD(v42[0]) = 1065353216;
    memset((char *)v42 + 8, 0, 32);
    DWORD2(v42[2]) = 1065353216;
    v23 = *a9;
    *a9 = 0;
    v24 = (std::__shared_weak_count *)a10[1];
    v36 = *a10;
    v37 = v24;
    v38 = v23;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    v27 = *a12;
    *a12 = 0;
    v28 = *(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, unsigned int *, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56);
    v35 = v27;
    v21 = v28(a1, a2, a3, a8, &v40, a4, a5, a6, a7, &v38, &v36, a11, &v35);
    v29 = v35;
    v35 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v37;
    if (v37)
    {
      v31 = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v38;
    v38 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v42 + 8);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v40);
  }
  std::__tree<std::string>::destroy((uint64_t)v39, (char *)v39[1]);
  return v21;
}

uint64_t *quasar::getUserDataTemplateNames@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void **v4;
  const void ***v5;
  const void **v6;
  const void ***v7;
  BOOL v8;
  uint64_t *v9;
  const void **v10;
  uint64_t *v11;
  uint64_t *v12;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  if (a2)
  {
    v4 = *(const void ***)(a2 + 16);
    v5 = (const void ***)(a2 + 24);
    if (v4 != (const void **)(a2 + 24))
    {
      do
      {
        result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, v4 + 4, (uint64_t)(v4 + 4));
        v6 = (const void **)v4[1];
        if (v6)
        {
          do
          {
            v7 = (const void ***)v6;
            v6 = (const void **)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (const void ***)v4[2];
            v8 = *v7 == v4;
            v4 = (const void **)v7;
          }
          while (!v8);
        }
        v4 = (const void **)v7;
      }
      while (v7 != v5);
    }
  }
  else
  {
    v9 = result + 1;
    v10 = (const void **)*result;
    if ((uint64_t *)*result != result + 1)
    {
      do
      {
        result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, v10 + 4, (uint64_t)(v10 + 4));
        v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v10[2];
            v8 = *v12 == (_QWORD)v10;
            v10 = (const void **)v12;
          }
          while (!v8);
        }
        v10 = (const void **)v12;
      }
      while (v12 != v9);
    }
  }
  return result;
}

void sub_1ADE14CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getLmeData(uint64_t a1, uint64_t *a2, int a3, unsigned int *a4, _QWORD *a5, _QWORD *a6, uint64_t **a7, uint64_t **a8, _QWORD *a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t *a13)
{
  unsigned int *v20;
  const std::string *SpeechModelInfo;
  char **v22;
  __int128 v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  char *v30;
  char **v31;
  BOOL v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t LmeDataImplV2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v55;
  uint64_t **v56;
  _BYTE v58[32];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 __str;
  __int128 __str_16;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void *__p[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  char **v96;
  char *v97[2];
  __int128 *v98;

  if (*(_DWORD *)(a1 + 8) != 1)
  {
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)__p = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    __str_16 = 0u;
    v76 = 0u;
    __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__str, "LmeDataFactory not initialized.");
    goto LABEL_84;
  }
  if (!quasar::LmeDataFactory::isWordpieceAllowed && *(_BYTE *)(a1 + 1736))
  {
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)__p = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    __str_16 = 0u;
    v76 = 0u;
    __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__str, "Wordpiece LME is disallowed");
LABEL_84:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  if (!*a4)
    *(_BYTE *)(a1 + 184) = 1;
  if (!*a11)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__str);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a11, &__str);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
    if (*((_QWORD *)&__str + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  quasar::getUserDataTemplateNames(a2, a12, (uint64_t)&v96);
  if (v97[1])
  {
    v56 = a8;
    v55 = a6;
    v20 = a4;
    *(_DWORD *)(*a11 + 264) = a3;
    SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)(a1 + 192));
    std::string::operator=((std::string *)(*a11 + 176), SpeechModelInfo + 6);
    *(_BYTE *)(*a11 + 392) = *(_BYTE *)(a1 + 1736);
    quasar::SystemConfig::getLmeAssetPath((quasar::SystemConfig *)(a1 + 192), (std::string *)&__str);
    std::string::operator=((std::string *)(*a11 + 296), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    v22 = v96;
    if (v96 != v97)
    {
      do
      {
        quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, (uint64_t)(v22 + 4), (std::string *)&__str);
        quasar::LmeDataFactory::getNameEnumerator(a1, (uint64_t)&__str, 0, &v94);
        if (v94)
        {
          if (*(char *)(v94 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v58, *(const std::string::value_type **)(v94 + 8), *(_QWORD *)(v94 + 16));
          }
          else
          {
            v23 = *(_OWORD *)(v94 + 8);
            *(_QWORD *)&v58[16] = *(_QWORD *)(v94 + 24);
            *(_OWORD *)v58 = v23;
          }
          v24 = (uint64_t **)(*a11 + 240);
          v98 = (__int128 *)(v22 + 4);
          v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (const void **)v22 + 4, (uint64_t)&std::piecewise_construct, &v98);
          v26 = v25 + 7;
          if (*((char *)v25 + 79) < 0)
            operator delete((void *)*v26);
          *(_OWORD *)v26 = *(_OWORD *)v58;
          v26[2] = *(_QWORD *)&v58[16];
        }
        v27 = v95;
        if (v95)
        {
          p_shared_owners = (unint64_t *)&v95->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SBYTE7(__str_16) < 0)
          operator delete((void *)__str);
        v30 = v22[1];
        if (v30)
        {
          do
          {
            v31 = (char **)v30;
            v30 = *(char **)v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (char **)v22[2];
            v32 = *v31 == (char *)v22;
            v22 = v31;
          }
          while (!v32);
        }
        v22 = v31;
      }
      while (v31 != v97);
    }
    if (*(_BYTE *)(a1 + 1736) || *(_DWORD *)(a1 + 1752))
    {
      if (a12)
      {
        v33 = *(_QWORD *)(a12 + 8);
        *(_QWORD *)&__str = &off_1E5D1AD68;
        *((_QWORD *)&__str + 1) = v33;
        ++*(_DWORD *)(v33 + 168);
        std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::map[abi:ne180100]((uint64_t *)&__str_16, (const void ***)(a12 + 16));
      }
      else
      {
        quasar::LmePackedUserData::LmePackedUserData(&__str, a2);
      }
      v38 = *a11;
      v39 = *(_QWORD *)(a1 + 8 * *a4 + 144);
      v40 = *a10;
      *a10 = 0;
      v41 = *a13;
      *a13 = 0;
      v91 = v41;
      v92 = v40;
      LmeDataImplV2 = quasar::LmeDataFactory::getLmeDataImplV2(a1, &__str, v38, v39, a5, a7, v56, (uint64_t)a9, &v92, &v91);
      v42 = v91;
      v91 = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v92;
      v92 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy((uint64_t)&__str_16, *((_QWORD **)&__str_16 + 1));
      fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&__str);
      if ((_DWORD)LmeDataImplV2)
        goto LABEL_81;
    }
    else
    {
      if (a12)
        quasar::LmePackedUserData::unpacked((quasar::LmePackedUserData *)a12, (uint64_t)&__str);
      else
        std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::map[abi:ne180100]((uint64_t *)&__str, (const void ***)a2);
      v49 = *a11;
      v50 = *(_QWORD *)(a1 + 8 * *a4 + 144);
      v51 = *a10;
      *a10 = 0;
      v93 = v51;
      LmeDataImplV2 = quasar::LmeDataFactory::getLmeDataImplV1(a1, (const void ***)&__str, v49, v50, a5, (uint64_t)a7, v56, a9, &v93);
      v52 = v93;
      v93 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&__str, *((_QWORD **)&__str + 1));
      if ((_DWORD)LmeDataImplV2)
        goto LABEL_81;
    }
    if (quasar::gLogLevel < 4)
      goto LABEL_64;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)__p = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    __str_16 = 0u;
    v76 = 0u;
    __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Serializing.", 12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
    if (quasar::gLogLevel < 5)
    {
LABEL_64:
      quasar::LmeData::toStream(*a11, v55, quasar::LmeDataFactory::lmeDataWriteVersion);
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      quasar::LmeData::toStream(*a11, &__str_16, quasar::LmeDataFactory::lmeDataWriteVersion);
      v44 = *a11;
      std::string::basic_string[abi:ne180100]<0>(v58, "");
      v45 = quasar::LmeData::fromStream(v44, (uint64_t *)&__str, 0, v58);
      if ((v58[23] & 0x80000000) != 0)
        operator delete(*(void **)v58);
      if (v45 == 1)
      {
        if (quasar::gLogLevel >= 4)
        {
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v59 = 0u;
          memset(v58, 0, sizeof(v58));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Deserialization test passed.", 28);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v58);
        }
        std::stringbuf::str();
        if (v58[23] >= 0)
          v46 = v58;
        else
          v46 = *(_BYTE **)v58;
        if (v58[23] >= 0)
          v47 = v58[23];
        else
          v47 = *(_QWORD *)&v58[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v46, v47);
        if ((v58[23] & 0x80000000) != 0)
          operator delete(*(void **)v58);
      }
      else if (quasar::gLogLevel >= 1)
      {
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v59 = 0u;
        memset(v58, 0, sizeof(v58));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Deserialization test failed. Cannot properly serialize this data.", 65);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v58);
      }
      *(_QWORD *)&__str = *MEMORY[0x1E0DE4F50];
      v53 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)((char *)&__str + *(_QWORD *)(__str - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      *(_QWORD *)&__str_16 = v53;
      *((_QWORD *)&__str_16 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v80) < 0)
        operator delete(__p[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](&v82);
      if (v45 != 1)
      {
        LmeDataImplV2 = 1;
        goto LABEL_81;
      }
    }
    v48 = *(_QWORD *)(*a11 + 168);
    LmeDataImplV2 = 0;
    if ((v48 & 0x8000000000000000) == 0)
      *(_QWORD *)(a1 + 8 * *v20 + 144) = v48 + 1;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      *(_OWORD *)__p = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      __str_16 = 0u;
      v76 = 0u;
      __str = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"User data is empty", 18);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
    }
    LmeDataImplV2 = 5;
  }
LABEL_81:
  std::__tree<std::string>::destroy((uint64_t)&v96, v97[0]);
  return LmeDataImplV2;
}

uint64_t quasar::LmeDataFactory::getLmeDataImplV1(uint64_t a1, const void ***a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t **a7, _QWORD *a8, uint64_t *a9)
{
  kaldi::quasar::LmeFst *v15;
  clockid_t v16;
  uint64_t v17;
  uint64_t v18;
  quasar::WordPronCache *v19;
  uint64_t v20;
  clockid_t v21;
  double Seconds;
  double v23;
  double v24;
  uint64_t v25;
  clockid_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  float ClassSizeCost;
  int v44;
  int v45;
  float *v46;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  const void **v67;
  size_t v68;
  size_t v69;
  void **v70;
  const void *v71;
  const void **v72;
  size_t v73;
  void **v74;
  const void *v75;
  double v76;
  double v77;
  _QWORD *v78;
  clockid_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  void **v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  clockid_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t Fst;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t LmeSymbols;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v105;
  void *v107[2];
  uint64_t v108;
  void *v109;
  _BYTE *v110;
  uint64_t v111;
  void *v112[2];
  __int128 v113;
  int v114;
  _BYTE v115[16];
  _QWORD v116[11];
  char v117;
  uint64_t v118;
  void *v119[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  void (**v137)(quasar::WordPronCache *__hidden);
  uint64_t v138;
  uint64_t v139;
  const void **v140;
  _QWORD v141[2];
  const void **v142;
  _QWORD v143[2];
  std::string __p[15];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151[3];
  char v152;
  uint64_t v153;
  kaldi::quasar::LmeFst *v154;
  std::__shared_weak_count *v155;
  uint64_t v156;

  v156 = a4;
  __p[0].__r_.__value_.__r.__words[0] = **(_QWORD **)(a1 + 16);
  v119[0] = (void *)(a1 + 48);
  LOBYTE(v137) = 0;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,void>((uint64_t *)__p, (_QWORD **)v119, &v156, (unsigned __int8 *)&v137, (unsigned __int8 *)(a1 + 2656), &v154);
  kaldi::quasar::LmeFst::SetMaxAllowedProns((uint64_t)v154, *(unsigned int *)(a1 + 2696));
  v15 = v154;
  std::string::basic_string[abi:ne180100]<0>(__p, "~w00");
  kaldi::quasar::LmeFst::SetWordBoundary((uint64_t)v15, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  kaldi::quasar::LmeFst::SetClassSizeCost((uint64_t)v154, *(float *)(a1 + 1812), *(float *)(a1 + 1816));
  v152 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v151, v16);
  v153 = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  *(_OWORD *)v119 = 0u;
  v120 = 0u;
  LODWORD(v121) = 1065353216;
  kaldi::quasar::Lexicon::Lexicon(__p, v119, 1, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v119);
  kaldi::quasar::Lexicon::SetPronView((uint64_t)__p, 0, 0);
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 56))(**(_QWORD **)(a1 + 16));
  kaldi::quasar::Lexicon::MergePhoneSet((uint64_t)__p, v17);
  v137 = &off_1E5D35090;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v138);
  v141[0] = 0;
  v140 = (const void **)v141;
  v143[1] = 0;
  v143[0] = 0;
  v141[1] = 0;
  v142 = (const void **)v143;
  v136 = 0;
  v18 = *a9;
  if (!*a9)
  {
    quasar::WordPronCache::setPronCache((uint64_t)&v137, (_QWORD *)(a1 + 2728));
    v18 = *a9;
  }
  if (v18)
    v19 = 0;
  else
    v19 = (quasar::WordPronCache *)&v137;
  v20 = quasar::LmeDataFactory::processUserData(a1, a2, &v148, &v145, (const quasar::LmeDataFactoryBase::Word *)__p, v19, (uint64_t **)(a3 + 240), a6, &v136);
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v21);
  if ((_DWORD)v20)
  {
    if ((_DWORD)v20 == 5)
    {
      if (quasar::gLogLevel >= 4)
      {
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        *(_OWORD *)v119 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Lme enumerating return NothingToDo, errorCode=", 46);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v119);
      }
      v20 = 5;
    }
    else if (quasar::gLogLevel >= 1)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_OWORD *)v119 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Lme enumerating failed, errorCode=", 34);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v119);
    }
    goto LABEL_125;
  }
  v23 = Seconds;
  v24 = v151[0];
  v25 = *a9;
  v119[0] = &off_1E5D35090;
  v119[1] = &off_1E5D1AD68;
  if (v25)
  {
    *(_QWORD *)&v120 = *(_QWORD *)(v25 + 16);
    ++*(_DWORD *)(v120 + 168);
    std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::set[abi:ne180100]((uint64_t *)&v120 + 1, (const void ***)(v25 + 24));
    std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t *)&v122, (const void ***)(v25 + 48));
  }
  else
  {
    *(_QWORD *)&v120 = v139;
    ++*(_DWORD *)(v139 + 168);
    std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::set[abi:ne180100]((uint64_t *)&v120 + 1, &v140);
    std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t *)&v122, &v142);
  }
  fst::SymbolTable::operator=(a3 + 24, (uint64_t)&v119[1]);
  if ((void **)(a3 + 16) != v119)
  {
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>((uint64_t **)(a3 + 40), *((__int128 **)&v120 + 1), &v121);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>((uint64_t **)(a3 + 64), (__int128 *)v122, (__int128 *)((char *)&v122 + 8));
  }
  v105 = a3;
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)v119);
  v27 = *a9;
  *a9 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v145;
  if (v146 != v145)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v149 - v148) >> 3) <= v30)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v31 = *(_QWORD *)(v148 + v29);
      v32 = *(_QWORD *)(v148 + v29 + 8);
      v119[0] = (void *)(v28 + v29);
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (const void **)(v28 + v29), (uint64_t)&std::piecewise_construct, (__int128 **)v119)+ 14) = -1431655765 * ((unint64_t)(v32 - v31) >> 3);
      ++v30;
      v28 = v145;
      v29 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3) > v30);
  }
  kaldi::Timer::Reset((kaldi::Timer *)v151, v26);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v116);
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v115);
  if (*(uint64_t *)(v105 + 168) >= 1)
  {
    v33 = *(_QWORD *)(v105 + 224);
    if (!v33)
    {
      if (quasar::gLogLevel >= 2)
      {
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        *(_OWORD *)v119 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Expected symbol table from previous LME data but none was found. ", 65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"lmeData.symTableFirstKey = ", 27);
        v86 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", lmeData.symTableLastKey = ", 28);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v119);
      }
      goto LABEL_111;
    }
    v34 = *(void **)(v33 + 96);
    v35 = *(std::__shared_weak_count **)(v33 + 104);
    v119[0] = v34;
    v119[1] = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    fst::SymbolTable::operator=((uint64_t)v115, (uint64_t)v34);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  if (*(_BYTE *)(a1 + 2657))
  {
    *(_OWORD *)v112 = 0u;
    v113 = 0u;
    v114 = 1065353216;
    v40 = v145;
    if (v146 != v145)
    {
      v41 = 0;
      v42 = 1;
      do
      {
        ClassSizeCost = quasar::LmeDataFactory::getClassSizeCost(a1, (unsigned __int8 *)(v40 + 24 * v41), a5);
        v45 = v44;
        v109 = (void *)v41;
        v119[0] = &v109;
        v46 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v112, (unint64_t *)&v109, (uint64_t)&std::piecewise_construct, (_QWORD **)v119);
        v46[6] = ClassSizeCost;
        *((_DWORD *)v46 + 7) = v45;
        v41 = v42;
        v40 = v145;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3) > v42++);
    }
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v48 = kaldi::quasar::LmeFst::CreateFstDirect((uint64_t)v154, &v148, (uint64_t)__p, *(_QWORD *)(a1 + 80), &v109, v112, (uint64_t)v115, 0);
    if ((v48 & 1) != 0)
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3);
      if ((v110 - (_BYTE *)v109) >> 3 < v49)
        v49 = (v110 - (_BYTE *)v109) >> 3;
      if ((int)v49 >= 1)
      {
        v50 = 0;
        v51 = 0;
        v52 = 24 * v49;
        do
        {
          v53 = v145;
          if (quasar::gLogLevel >= 4)
          {
            v54 = v145 + v51;
            v55 = *(char *)(v145 + v51 + 23);
            if (v55 >= 0)
              v56 = v145 + v51;
            else
              v56 = *(_QWORD *)v54;
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v54 + 23);
            else
              v57 = *(_QWORD *)(v54 + 8);
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, v56, v57);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"_num_word_homophones=", 21);
            v59 = (_QWORD *)std::ostream::operator<<();
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" ", 1);
            v61 = v145 + v51;
            v62 = *(char *)(v145 + v51 + 23);
            if (v62 >= 0)
              v63 = v145 + v51;
            else
              v63 = *(_QWORD *)v61;
            if (v62 >= 0)
              v64 = *(unsigned __int8 *)(v61 + 23);
            else
              v64 = *(_QWORD *)(v61 + 8);
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v63, v64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"_num_fst_paths=", 15);
            v66 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" ", 1);
            v53 = v145;
          }
          v67 = (const void **)(v53 + v51);
          v68 = *(unsigned __int8 *)(v53 + v51 + 23);
          if ((v68 & 0x80u) == 0)
            v69 = v68;
          else
            v69 = (size_t)v67[1];
          std::string::basic_string[abi:ne180100]((uint64_t)v107, v69 + 20);
          if (v108 >= 0)
            v70 = v107;
          else
            v70 = (void **)v107[0];
          if (v69)
          {
            if (*((char *)v67 + 23) >= 0)
              v71 = v67;
            else
              v71 = *v67;
            memmove(v70, v71, v69);
          }
          strcpy((char *)v70 + v69, "_num_word_homophones");
          *(_QWORD *)&v120 = v108;
          *(_OWORD *)v119 = *(_OWORD *)v107;
          v107[1] = 0;
          v108 = 0;
          v107[0] = 0;
          DWORD2(v120) = *(_DWORD *)((char *)v109 + v50);
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>((uint64_t)a8, (unsigned __int8 *)v119, (uint64_t)v119);
          if (SBYTE7(v120) < 0)
            operator delete(v119[0]);
          if (SHIBYTE(v108) < 0)
            operator delete(v107[0]);
          v72 = (const void **)(v145 + v51);
          if (*(char *)(v145 + v51 + 23) >= 0)
            v73 = *((unsigned __int8 *)v72 + 23);
          else
            v73 = (size_t)v72[1];
          std::string::basic_string[abi:ne180100]((uint64_t)v107, v73 + 14);
          if (v108 >= 0)
            v74 = v107;
          else
            v74 = (void **)v107[0];
          if (v73)
          {
            if (*((char *)v72 + 23) >= 0)
              v75 = v72;
            else
              v75 = *v72;
            memmove(v74, v75, v73);
          }
          strcpy((char *)v74 + v73, "_num_fst_paths");
          *(_OWORD *)v119 = *(_OWORD *)v107;
          *(_QWORD *)&v120 = v108;
          v107[0] = 0;
          v107[1] = 0;
          v108 = 0;
          DWORD2(v120) = *(_DWORD *)((char *)v109 + v50 + 4);
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>((uint64_t)a8, (unsigned __int8 *)v119, (uint64_t)v119);
          if (SBYTE7(v120) < 0)
            operator delete(v119[0]);
          if (SHIBYTE(v108) < 0)
            operator delete(v107[0]);
          v51 += 24;
          v50 += 8;
        }
        while (v52 != v51);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_OWORD *)v119 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Failed to build the LME fst using the direct method", 51);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v119);
    }
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v112);
    if ((v48 & 1) != 0)
      goto LABEL_99;
  }
  else
  {
    if ((kaldi::quasar::LmeFst::CreateFst((uint64_t)v154, &v148, (uint64_t)__p, *(_QWORD *)(a1 + 80), (uint64_t)v115) & 1) != 0)
    {
LABEL_99:
      v76 = v23 - v24;
      if (quasar::gLogLevel <= 3)
      {
        v77 = v76 * 1000.0;
      }
      else
      {
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        *(_OWORD *)v119 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"LmeEnumeratingTimeMs=", 21);
        v77 = v76 * 1000.0;
        v78 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", lmeFstCreatingTimeMs=", 23);
        kaldi::Timer::GetSeconds((kaldi::Timer *)5, v79);
        v80 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)", maxPronsPerWordSeen=", 22);
        v81 = (_QWORD *)std::ostream::operator<<();
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" ", 1);
        std::stringbuf::str();
        if ((SBYTE7(v113) & 0x80u) == 0)
          v83 = v112;
        else
          v83 = (void **)v112[0];
        if ((SBYTE7(v113) & 0x80u) == 0)
          v84 = BYTE7(v113);
        else
          v84 = (uint64_t)v112[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
        if (SBYTE7(v113) < 0)
          operator delete(v112[0]);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v119);
      }
      v119[0] = "LmeEnumeratingTimeMs";
      v119[1] = (void *)(int)v77;
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,int>>(a8, (uint64_t)v119);
      v88 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v87);
      v119[0] = "LmeFstCreatingTimeMs";
      v119[1] = (void *)(int)((v88 - v151[0]) * 1000.0);
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,int>>(a8, (uint64_t)v119);
      v119[1] = 0;
      *(_QWORD *)&v120 = 0;
      v119[0] = &v119[1];
      v89 = v145;
      if (v146 != v145)
      {
        v90 = 0;
        v91 = 0;
        do
        {
          Fst = kaldi::quasar::LmeFst::GetFst(v154, v90);
          v93 = operator new(0x28uLL);
          v93[1] = 0;
          v93[2] = 0;
          *v93 = &unk_1E5D413A8;
          v94 = *(_QWORD *)(Fst + 8);
          v93[4] = v94;
          ++*(_DWORD *)(v94 + 56);
          v93[3] = &unk_1E5D28970;
          v112[0] = v93 + 3;
          v112[1] = v93;
          v109 = (void *)(v89 + 24 * v90);
          v95 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v119, (const void **)v109, (uint64_t)&std::piecewise_construct, (__int128 **)&v109);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v95 + 7), (__int128 *)v112);
          v96 = (std::__shared_weak_count *)v112[1];
          if (v112[1])
          {
            v97 = (unint64_t *)((char *)v112[1] + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v89 = v145;
          v90 = ++v91;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3) > v91);
      }
      v99 = v156;
      LmeSymbols = kaldi::quasar::LmeFst::GetLmeSymbols(v154);
      quasar::LmeDataFactory::finishGetLmeDataImpl(a1, v105, v99, LmeSymbols, v119);
      std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v119, (_QWORD *)v119[1]);
      v20 = 0;
      goto LABEL_122;
    }
    if (quasar::gLogLevel >= 1)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      *(_OWORD *)v119 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v119);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"Failed to build the LME fst", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v119);
    }
  }
LABEL_111:
  v20 = 1;
LABEL_122:
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v115);
  v116[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v116 + *(_QWORD *)(v116[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v116[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v117 < 0)
    operator delete((void *)v116[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v118);
LABEL_125:
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)&v137);
  kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v101 = v155;
  if (v155)
  {
    v102 = (unint64_t *)&v155->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  return v20;
}

void sub_1ADE163E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  uint64_t v59;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a59);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a24);
  std::ostringstream::~ostringstream((uint64_t)&a26);
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)&STACK[0x2B0]);
  kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)&STACK[0x2F8]);
  STACK[0x2F8] = v59 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F8]);
  STACK[0x2F8] = v59 - 216;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v59 - 152);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getLmeDataImplV2(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t **a6, uint64_t **a7, uint64_t a8, uint64_t *a9, uint64_t *a10)
{
  clockid_t v13;
  uint64_t v14;
  std::wstring *v15;
  std::wstring *v16;
  unint64_t *p_size;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  double v33;
  double v34;
  clockid_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  float ClassSizeCost;
  int v45;
  int v46;
  char v47;
  double LengthPenalty;
  double LengthPenaltyCutoff;
  int v50;
  float v51;
  int v52;
  unint64_t *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  const void **v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  quasar::LmePackedWord **v65;
  char *v66;
  quasar::LmeDataFactoryBase::PronSet *v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::vector<std::string>::pointer end;
  __int128 v82;
  std::vector<std::string>::pointer v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  std::wstring *v87;
  std::wstring *v88;
  __int128 v89;
  __int128 v90;
  std::string *v91;
  uint64_t *v92;
  const std::string *v93;
  const std::string *v94;
  uint64_t v95;
  __int128 *v96;
  __int128 *v97;
  std::string *v98;
  uint64_t v99;
  char *v100;
  char **v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char v107;
  clockid_t v108;
  double Seconds;
  double v110;
  clockid_t v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  size_t v129;
  std::__split_buffer<std::wstring>::pointer first;
  unsigned __int8 *v131;
  int v132;
  size_t v133;
  std::__split_buffer<std::wstring>::pointer v134;
  unsigned __int8 *v135;
  clockid_t v136;
  int v137;
  uint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  double v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  __int128 *v157;
  const quasar::LmePackedWord **v158;
  const quasar::LmePackedWord **v159;
  const quasar::LmePackedWord *v160;
  const quasar::LmePackedWord *v161;
  __int128 *v162;
  __int128 *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v168;
  unsigned __int8 *v173;
  __int128 *v175;
  unsigned __int8 *v176;
  __int128 **v177;
  const void **v178;
  uint64_t v179;
  const void **v180;
  uint64_t v181;
  char v182;
  _BOOL4 isContactTemplate;
  __int128 v184;
  unsigned int v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  quasar::LmePackedWord **v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::string *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  char **v199;
  char *v200[4];
  __int128 v201;
  char v202;
  unsigned __int8 v203;
  uint64_t v204;
  __int128 v205;
  char *v206;
  std::__shared_weak_count *v207;
  int v208;
  uint64_t v209;
  float v210;
  int v211;
  char *v212;
  char v213;
  float v214;
  float v215;
  int v216;
  int v217;
  __int128 *v218[11];
  char v219;
  uint64_t v220;
  double v221[3];
  char v222;
  uint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD v227[4];
  int v228;
  char v229[8];
  uint64_t v230;
  std::__split_buffer<std::wstring> __p[2];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  std::string v244;
  std::vector<std::string> v245;
  char **v246;
  char *v247;
  unint64_t v248;

  if (quasar::gLogLevel >= 5)
  {
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    v238 = 0u;
    v239 = 0u;
    v236 = 0u;
    v237 = 0u;
    v234 = 0u;
    v235 = 0u;
    v232 = 0u;
    v233 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Build start", 11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v229);
  if (*(uint64_t *)(a3 + 168) >= 1)
  {
    v14 = *(_QWORD *)(a3 + 224);
    if (!v14)
    {
      if (quasar::gLogLevel >= 2)
      {
        v242 = 0u;
        v243 = 0u;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected symbol table from previous LME data but none was found. ", 65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"lmeData.symTableFirstKey = ", 27);
        v155 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)", lmeData.symTableLastKey = ", 28);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
      v156 = 1;
      goto LABEL_262;
    }
    v15 = *(std::wstring **)(v14 + 96);
    v16 = *(std::wstring **)(v14 + 104);
    __p[0].__first_ = v15;
    __p[0].__begin_ = v16;
    if (v16)
    {
      p_size = &v16->__r_.__value_.__l.__size_;
      do
        v18 = __ldxr(p_size);
      while (__stxr(v18 + 1, p_size));
    }
    fst::SymbolTable::operator=((uint64_t)v229, (uint64_t)v15);
    if (v16)
    {
      v19 = &v16->__r_.__value_.__l.__size_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(std::wstring *))(v16->__r_.__value_.__r.__words[0] + 16))(v16);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
      }
    }
  }
  v181 = a1;
  v168 = a3;
  memset(v227, 0, sizeof(v227));
  v228 = 1065353216;
  v21 = (__int128 *)a2[2];
  v177 = (__int128 **)(a2 + 2);
  v175 = (__int128 *)(a2 + 3);
  if (v21 != (__int128 *)(a2 + 3))
  {
    do
    {
      quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, (uint64_t)(v21 + 2), (std::string *)__p);
      if (quasar::LmeDataFactory::isSupportedCategory(a1, (uint64_t)__p, 1))
      {
        v218[0] = (__int128 *)__p;
        v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v227, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, v218);
        v23 = (uint64_t *)(v22 + 40);
        v24 = *((_QWORD *)v22 + 6);
        if (v24 >= *((_QWORD *)v22 + 7))
        {
          v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v23, v21 + 2);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v23, v21 + 2);
          v25 = v24 + 24;
        }
        *((_QWORD *)v22 + 6) = v25;
      }
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      v26 = (__int128 *)*((_QWORD *)v21 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(__int128 **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (__int128 *)*((_QWORD *)v21 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v21;
          v21 = v27;
        }
        while (!v28);
      }
      v21 = v27;
    }
    while (v27 != v175);
  }
  v226 = 0;
  v225 = 0;
  v224 = (uint64_t *)&v225;
  v222 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v221, v13);
  v29 = (_QWORD *)a8;
  v223 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v218);
  v30 = v181;
  v173 = *(unsigned __int8 **)(v181 + 2552);
  if (*(unsigned __int8 **)(v181 + 2544) == v173)
  {
    v33 = 0.0;
    v34 = 0.0;
    goto LABEL_209;
  }
  v31 = *(unsigned __int8 **)(v181 + 2544);
  v32 = 0;
  v190 = 0;
  v33 = 0.0;
  v34 = 0.0;
  v186 = a2;
  do
  {
    v176 = v31;
    v36 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v227, v31);
    if (!v36)
      goto LABEL_205;
    kaldi::Timer::Reset((kaldi::Timer *)v221, v35);
    v179 = **(_QWORD **)(v30 + 16);
    v182 = *(_BYTE *)(v30 + 1736);
    v187 = *(_QWORD *)(v30 + 1744);
    v184 = *(_OWORD *)(v30 + 64);
    v37 = v30;
    v38 = *(char **)(v30 + 80);
    v39 = *(char **)(v37 + 88);
    v200[2] = v38;
    v200[3] = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *(_DWORD *)(v181 + 2696);
    if (*(_QWORD *)(v230 + 24) <= a4)
      v43 = a4;
    else
      v43 = *(_QWORD *)(v230 + 24);
    ClassSizeCost = quasar::LmeDataFactory::getClassSizeCost(v181, v176, a5);
    v46 = v45;
    v47 = *(_BYTE *)(v181 + 2658);
    LengthPenalty = quasar::LmeDataFactory::getLengthPenalty(v181, v176);
    LengthPenaltyCutoff = quasar::LmeDataFactory::getLengthPenaltyCutoff(v181, v176);
    v50 = *(_DWORD *)(v181 + 2660);
    v51 = LengthPenaltyCutoff;
    v52 = *(_DWORD *)(v181 + 2664);
    *(_QWORD *)&v201 = v179;
    *((_QWORD *)&v201 + 1) = v181 + 48;
    v202 = v182;
    v205 = v184;
    v204 = v187;
    v206 = v38;
    v207 = (std::__shared_weak_count *)v39;
    if (v39)
    {
      v53 = (unint64_t *)(v39 + 8);
      a2 = v186;
      v54 = v176;
      do
        v55 = __ldxr(v53);
      while (__stxr(v55 + 1, v53));
      v208 = v42;
      v209 = v43;
      v210 = ClassSizeCost;
      v211 = v46;
      v212 = v229;
      v213 = v47;
      v214 = LengthPenalty;
      v215 = v51;
      v216 = v50;
      v217 = v52;
      v56 = v181;
      do
        v57 = __ldaxr(v53);
      while (__stlxr(v57 - 1, v53));
      if (!v57)
      {
        (*(void (**)(char *))(*(_QWORD *)v39 + 16))(v39);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v39);
      }
    }
    else
    {
      v208 = v42;
      v209 = v43;
      v210 = ClassSizeCost;
      v211 = v46;
      v212 = v229;
      v213 = v47;
      v214 = LengthPenalty;
      v215 = v51;
      v216 = v50;
      v217 = v52;
      v56 = v181;
      a2 = v186;
      v54 = v176;
    }
    if (*(_BYTE *)(v56 + 1736) || (v60 = *(_DWORD *)(v56 + 1752), v60 == 3))
    {
      v188 = operator new();
      quasar::CompactSimpleLmeEnumerationsProcessor::CompactSimpleLmeEnumerationsProcessor(v188, &v201);
    }
    else if (v60 == 2)
    {
      v188 = operator new();
      quasar::OriginalSimpleLmeEnumerationsProcessor::OriginalSimpleLmeEnumerationsProcessor(v188, &v201);
    }
    else
    {
      if (v60 != 1)
      {
        v242 = 0u;
        v243 = 0u;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported enumerations algorithm ", 35);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v188 = operator new();
      quasar::CompoundLmeEnumerationsProcessor::CompoundLmeEnumerationsProcessor(v188, &v201);
    }
    v200[0] = 0;
    v200[1] = 0;
    v199 = v200;
    quasar::LmeDataFactory::getNameEnumerator(v56, (uint64_t)v54, 0, &v197);
    v58 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v181 + 2504), v54);
    if (v58)
      v59 = *((_DWORD *)v58 + 10);
    else
      v59 = -1;
    v185 = v59;
    isContactTemplate = quasar::LmeDataFactory::isContactTemplate(v56, (uint64_t)v54);
    v61 = (const void **)*((_QWORD *)v36 + 5);
    v178 = (const void **)*((_QWORD *)v36 + 6);
    if (v61 == v178)
    {
      LODWORD(v63) = 0;
      v62 = 0;
      goto LABEL_138;
    }
    v62 = 0;
    v63 = 0;
    do
    {
      v180 = v61;
      v64 = std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)v177, v61);
      v65 = *(quasar::LmePackedWord ***)v64;
      v189 = *(quasar::LmePackedWord ***)(v64 + 8);
      if (*(quasar::LmePackedWord ***)v64 == v189)
        goto LABEL_135;
      while (1)
      {
        quasar::LmePackedUserData::unpackedEntity((fst::SymbolTable *)a2, v65, (uint64_t *)__p);
        quasar::LmeDataFactory::encodeAndFilterEntity((std::string **)__p, (const quasar::LmeDataFactoryBase::Word *)v185, &v195);
        v246 = (char **)__p;
        std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v246);
        v66 = (char *)v196;
        if (v195 != v196)
        {
          v67 = (quasar::LmeDataFactoryBase::PronSet *)(v195 + 56);
          do
          {
            v68 = *((char *)v67 - 9);
            if (v68 >= 0)
              v69 = (char *)v67 - 32;
            else
              v69 = (const std::string::value_type *)*((_QWORD *)v67 - 4);
            if (v68 >= 0)
              v70 = *((unsigned __int8 *)v67 - 9);
            else
              v70 = *((_QWORD *)v67 - 3);
            std::string::append((std::string *)((char *)v67 - 56), v69, v70);
            v71 = quasar::LmeDataFactoryBase::PronSet::size(v67);
            if (v71 > v32)
              v32 = v71;
            v72 = (char *)v67 + 24;
            v67 = (quasar::LmeDataFactoryBase::PronSet *)((char *)v67 + 80);
          }
          while (v72 != v66);
        }
        v73 = v197;
        v74 = v198;
        v191 = v198;
        if (v198)
        {
          p_shared_owners = (unint64_t *)&v198->__shared_owners_;
          do
            v76 = __ldxr(p_shared_owners);
          while (__stxr(v76 + 1, p_shared_owners));
        }
        v247 = 0;
        v248 = 0;
        v246 = &v247;
        if (v73 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
        {
          (*(void (**)(uint64_t, uint64_t *, char ***))(*(_QWORD *)v73 + 16))(v73, &v195, &v246);
          v77 = 1;
        }
        else
        {
          v78 = v195;
          v79 = v196;
          v80 = v195;
          if (v195 != v196)
          {
            do
            {
              memset(&v245, 0, sizeof(v245));
              std::to_string(&v244, *(_DWORD *)(v78 + 48));
              end = v245.__end_;
              if (v245.__end_ >= v245.__end_cap_.__value_)
              {
                v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v245.__end_ - (char *)v245.__begin_) >> 3);
                v85 = v84 + 1;
                if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v245.__end_cap_.__value_ - (char *)v245.__begin_) >> 3) > v85)
                  v85 = 0x5555555555555556 * (((char *)v245.__end_cap_.__value_ - (char *)v245.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v245.__end_cap_.__value_ - (char *)v245.__begin_) >> 3) >= 0x555555555555555)
                  v86 = 0xAAAAAAAAAAAAAAALL;
                else
                  v86 = v85;
                __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v245.__end_cap_;
                if (v86)
                  v87 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v245.__end_cap_, v86);
                else
                  v87 = 0;
                v88 = v87 + v84;
                __p[0].__first_ = v87;
                __p[0].__begin_ = v88;
                __p[0].__end_cap_.__value_ = &v87[v86];
                v89 = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
                v88->__r_.__value_.__r.__words[2] = v244.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v89;
                memset(&v244, 0, sizeof(v244));
                __p[0].__end_ = v88 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v245, (std::__split_buffer<std::string> *)__p);
                v83 = v245.__end_;
                std::__split_buffer<std::string>::~__split_buffer(__p);
                v245.__end_ = v83;
                if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v244.__r_.__value_.__l.__data_);
                  v83 = v245.__end_;
                }
              }
              else
              {
                v82 = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
                v245.__end_->__r_.__value_.__r.__words[2] = v244.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v82;
                v83 = end + 1;
                v245.__end_ = end + 1;
              }
              if (v83 >= v245.__end_cap_.__value_)
              {
                v91 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v245, (__int128 *)v78);
              }
              else
              {
                if (*(char *)(v78 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)v78, *(_QWORD *)(v78 + 8));
                }
                else
                {
                  v90 = *(_OWORD *)v78;
                  v83->__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 + 16);
                  *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v90;
                }
                v91 = v83 + 1;
              }
              v245.__end_ = v91;
              std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)&v246, &v245, (__int128 **)&v245);
              __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v245;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              v78 += 80;
            }
            while (v78 != v79);
            v78 = v195;
            v80 = v196;
          }
          v77 = v63;
          v63 = 0xCCCCCCCCCCCCCCCDLL * ((v80 - v78) >> 4);
        }
        v192 = 0;
        v193 = 0;
        v194 = 0;
        std::vector<std::vector<std::string>>::reserve(&v192, v248);
        v92 = (uint64_t *)v246;
        if (v246 != &v247)
        {
          do
          {
            v93 = (const std::string *)v92[4];
            v94 = (const std::string *)v92[5];
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (char *)v93) >> 3) >= 2)
            {
              v95 = v92[4];
              if (v93 != v94)
              {
                do
                {
                  if (*(char *)(v95 + 23) < 0)
                  {
                    if (!*(_QWORD *)(v95 + 8))
                      goto LABEL_113;
                  }
                  else if (!*(_BYTE *)(v95 + 23))
                  {
                    goto LABEL_113;
                  }
                  v95 += 24;
                }
                while ((const std::string *)v95 != v94);
              }
              if (std::stof(v93, 0) > 0.0)
              {
                v96 = (__int128 *)v92[5];
                v97 = (__int128 *)(v92[4] + 24);
                memset(__p, 0, 24);
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)__p, v97, v96, 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v97) >> 3));
                v244.__r_.__value_.__r.__words[0] = (std::string::size_type)"~w00";
                v244.__r_.__value_.__l.__size_ = 4;
                quasar::join<std::vector<std::string>>((uint64_t *)__p, (uint64_t *)&v244);
                if (v200 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v199, (const void **)&v245.__begin_))
                {
                  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v199, (const void **)&v245.__begin_, (uint64_t)&v245);
                  v98 = v193;
                  if ((unint64_t)v193 >= v194)
                  {
                    v99 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(&v192, (__int128 **)v92 + 4);
                  }
                  else
                  {
                    v193->__r_.__value_.__r.__words[0] = 0;
                    v98->__r_.__value_.__l.__size_ = 0;
                    v98->__r_.__value_.__r.__words[2] = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v98, (__int128 *)v92[4], (__int128 *)v92[5], 0xAAAAAAAAAAAAAAABLL * ((v92[5] - v92[4]) >> 3));
                    v99 = (uint64_t)&v98[1];
                  }
                  v193 = (std::string *)v99;
                }
                if (SHIBYTE(v245.__end_cap_.__value_) < 0)
                  operator delete(v245.__begin_);
                v245.__begin_ = (std::vector<std::string>::pointer)__p;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
              }
            }
LABEL_113:
            v100 = (char *)v92[1];
            if (v100)
            {
              do
              {
                v101 = (char **)v100;
                v100 = *(char **)v100;
              }
              while (v100);
            }
            else
            {
              do
              {
                v101 = (char **)v92[2];
                v28 = *v101 == (char *)v92;
                v92 = (uint64_t *)v101;
              }
              while (!v28);
            }
            v92 = (uint64_t *)v101;
          }
          while (v101 != &v247);
          v74 = v191;
        }
        std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v246, v247);
        if (v74)
        {
          v102 = (unint64_t *)&v74->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v188 + 16))(v188, &v195, &v192);
        v104 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v193 - v192) >> 3);
        if (isContactTemplate)
        {
          v105 = v104 + v190;
          v106 = *(unsigned int *)(v181 + 1820);
          if ((v106 & 0x80000000) == 0 && v105 > v106)
          {
            v190 += v104;
            v107 = 1;
            goto LABEL_131;
          }
        }
        else
        {
          v105 = v190;
        }
        v190 = v105;
        v107 = 0;
LABEL_131:
        v63 += v77;
        v62 += v104;
        __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v192;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v195;
        std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if ((v107 & 1) != 0)
          break;
        v65 += 3;
        a2 = v186;
        if (v65 == v189)
          goto LABEL_135;
      }
      a2 = v186;
LABEL_135:
      v61 = v180 + 3;
    }
    while (v180 + 3 != v178);
LABEL_138:
    __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)v176;
    *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (const void **)v176, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 14) = v63;
    __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)v176;
    *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a7, (const void **)v176, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 14) = v62;
    Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v108);
    v110 = v221[0];
    kaldi::Timer::Reset((kaldi::Timer *)v221, v111);
    (*(void (**)(char ***__return_ptr))(*(_QWORD *)v188 + 24))(&v246);
    v30 = v181;
    if (v246)
    {
      if (quasar::gLogLevel >= 5)
      {
        v242 = 0u;
        v243 = 0u;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Successfully created LME FST for template ", 42);
        v113 = (char)v176[23];
        if (v113 >= 0)
          v114 = (uint64_t)v176;
        else
          v114 = *(_QWORD *)v176;
        if (v113 >= 0)
          v115 = v176[23];
        else
          v115 = *((_QWORD *)v176 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, v114, v115);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)v176;
      v116 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v224, (const void **)v176, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      std::shared_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void>(v116 + 7, (uint64_t *)&v246);
      if (quasar::gLogLevel >= 4)
      {
        v117 = (char)v176[23];
        if (v117 >= 0)
          v118 = (uint64_t)v176;
        else
          v118 = *(_QWORD *)v176;
        if (v117 >= 0)
          v119 = v176[23];
        else
          v119 = *((_QWORD *)v176 + 1);
        v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, v118, v119);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"_num_word_homophones=", 21);
        v121 = (_QWORD *)std::ostream::operator<<();
        v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)" ", 1);
        v123 = (char)v176[23];
        if (v123 >= 0)
          v124 = (uint64_t)v176;
        else
          v124 = *(_QWORD *)v176;
        if (v123 >= 0)
          v125 = v176[23];
        else
          v125 = *((_QWORD *)v176 + 1);
        v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, v124, v125);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"_num_fst_paths=", 15);
        v127 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" ", 1);
      }
      v128 = (int)v247;
      if ((v176[23] & 0x80u) == 0)
        v129 = v176[23];
      else
        v129 = *((_QWORD *)v176 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v129 + 20);
      if (SHIBYTE(__p[0].__end_) >= 0)
        first = (std::__split_buffer<std::wstring>::pointer)__p;
      else
        first = __p[0].__first_;
      if (v129)
      {
        if ((v176[23] & 0x80u) == 0)
          v131 = v176;
        else
          v131 = *(unsigned __int8 **)v176;
        memmove(first, v131, v129);
      }
      strcpy((char *)first + v129, "_num_word_homophones");
      v245.__begin_ = (std::vector<std::string>::pointer)__p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v245)+ 10) = v128;
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      v132 = HIDWORD(v247);
      if ((v176[23] & 0x80u) == 0)
        v133 = v176[23];
      else
        v133 = *((_QWORD *)v176 + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v133 + 14);
      if (SHIBYTE(__p[0].__end_) >= 0)
        v134 = (std::__split_buffer<std::wstring>::pointer)__p;
      else
        v134 = __p[0].__first_;
      if (v133)
      {
        if ((v176[23] & 0x80u) == 0)
          v135 = v176;
        else
          v135 = *(unsigned __int8 **)v176;
        memmove(v134, v135, v133);
      }
      strcpy((char *)v134 + v133, "_num_fst_paths");
      v245.__begin_ = (std::vector<std::string>::pointer)__p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v245)+ 10) = v132;
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
      v137 = 0;
      v34 = v34 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v136) - v221[0];
LABEL_190:
      v138 = (uint64_t *)v246;
      v246 = 0;
      if (v138)
        (*(void (**)(uint64_t *))(*v138 + 8))(v138);
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        v242 = 0u;
        v243 = 0u;
        v240 = 0u;
        v241 = 0u;
        v238 = 0u;
        v239 = 0u;
        v236 = 0u;
        v237 = 0u;
        v234 = 0u;
        v235 = 0u;
        v232 = 0u;
        v233 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to build the LME fst using the direct method", 51);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
        v137 = 1;
        goto LABEL_190;
      }
      v137 = 1;
    }
    v139 = v198;
    if (v198)
    {
      v140 = (unint64_t *)&v198->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    std::__tree<std::string>::destroy((uint64_t)&v199, v200[0]);
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
    v142 = v207;
    if (v207)
    {
      v143 = (unint64_t *)&v207->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    if (v137)
    {
      v156 = 1;
      goto LABEL_259;
    }
    v33 = v33 + Seconds - v110;
    v29 = (_QWORD *)a8;
LABEL_205:
    v31 = v176 + 24;
  }
  while (v176 + 24 != v173);
LABEL_209:
  if (quasar::gLogLevel <= 3)
  {
    v145 = v33 * 1000.0;
  }
  else
  {
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    v238 = 0u;
    v239 = 0u;
    v236 = 0u;
    v237 = 0u;
    v234 = 0u;
    v235 = 0u;
    v232 = 0u;
    v233 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LmeEnumeratingTimeMs=", 21);
    v145 = v33 * 1000.0;
    v146 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)", lmeFstCreatingTimeMs=", 23);
    v147 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)", maxPronsPerWordSeen=", 22);
    v148 = (_QWORD *)std::ostream::operator<<();
    v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)" ", 1);
    std::stringbuf::str();
    if ((v203 & 0x80u) == 0)
      v150 = (uint64_t)&v201;
    else
      v150 = v201;
    if ((v203 & 0x80u) == 0)
      v151 = v203;
    else
      v151 = *((_QWORD *)&v201 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, v150, v151);
    v29 = (_QWORD *)a8;
    if ((char)v203 < 0)
      operator delete((void *)v201);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)"LmeEnumeratingTimeMs";
  *(double *)&__p[0].__begin_ = v145;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,double>>(v29, (uint64_t)__p);
  __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)"LmeFstCreatingTimeMs";
  *(double *)&__p[0].__begin_ = v34 * 1000.0;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,double>>(v29, (uint64_t)__p);
  v152 = *a9;
  if (*a9)
  {
    fst::SymbolTable::operator=(v168 + 24, v152 + 8);
    if (v168 + 16 != v152)
    {
      std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>((uint64_t **)(v168 + 40), *(__int128 **)(v152 + 24), (__int128 *)(v152 + 32));
      std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>((uint64_t **)(v168 + 64), *(__int128 **)(v152 + 48), (__int128 *)(v152 + 56));
    }
    v153 = *a9;
    *a9 = 0;
    if (v153)
      (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  }
  else
  {
    memset(&__p[0].__begin_, 0, 64);
    __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&off_1E5D35090;
    fst::SymbolTable::SymbolTable((fst::SymbolTable *)&__p[0].__begin_);
    __p[0].__end_cap_.__value_ = 0;
    __p[0].__end_cap_.__value_ = (std::wstring *)&__p[0].__end_cap_.std::__compressed_pair_elem<std::allocator<std::wstring> &, 1, false>;
    __p[1].__end_cap_.__value_ = 0;
    __p[1].__end_ = 0;
    __p[1].__first_ = 0;
    __p[1].__begin_ = (std::__split_buffer<std::wstring>::pointer)&__p[1].__end_;
    fst::SymbolTable::operator=(v168 + 24, (uint64_t)&__p[0].__begin_);
    if ((std::__split_buffer<std::wstring> *)(v168 + 16) != __p)
    {
      std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>((uint64_t **)(v168 + 40), (__int128 *)__p[0].__end_cap_.__value_, (__int128 *)&__p[0].__end_cap_.std::__compressed_pair_elem<std::allocator<std::wstring> &, 1, false>);
      std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>((uint64_t **)(v168 + 64), (__int128 *)__p[1].__begin_, (__int128 *)&__p[1].__end_);
    }
    quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)__p);
    quasar::WordPronCache::setPronCache(v168 + 16, (_QWORD *)(v181 + 2728));
    v157 = *v177;
    if (*v177 != v175)
    {
      do
      {
        v158 = (const quasar::LmePackedWord **)*((_QWORD *)v157 + 7);
        v159 = (const quasar::LmePackedWord **)*((_QWORD *)v157 + 8);
        while (v158 != v159)
        {
          v160 = *v158;
          v161 = v158[1];
          while (v160 != v161)
          {
            quasar::LmePackedUserData::unpackedWord((quasar::LmePackedUserData *)a2, v160, (uint64_t)__p);
            quasar::WordPronCache::addWord((quasar::WordPronCache *)(v168 + 16), (std::string *)__p, 1);
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&__p[1].__end_, (char *)__p[1].__end_cap_.__value_);
            if (SHIBYTE(__p[1].__first_) < 0)
              operator delete(__p[0].__end_cap_.__value_);
            if (SHIBYTE(__p[0].__end_) < 0)
              operator delete(__p[0].__first_);
            v160 = (const quasar::LmePackedWord *)((char *)v160 + 80);
          }
          v158 += 3;
        }
        v162 = (__int128 *)*((_QWORD *)v157 + 1);
        if (v162)
        {
          do
          {
            v163 = v162;
            v162 = *(__int128 **)v162;
          }
          while (v162);
        }
        else
        {
          do
          {
            v163 = (__int128 *)*((_QWORD *)v157 + 2);
            v28 = *(_QWORD *)v163 == (_QWORD)v157;
            v157 = v163;
          }
          while (!v28);
        }
        v157 = v163;
      }
      while (v163 != v175);
    }
  }
  v164 = *a10;
  if (*a10)
  {
    fst::SymbolTable::operator=(v168 + 96, v164 + 8);
    if (v168 + 88 != v164)
    {
      std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__assign_multi<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>((uint64_t **)(v168 + 112), *(__int128 **)(v164 + 24), (__int128 *)(v164 + 32));
      std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>((uint64_t **)(v168 + 136), *(__int128 **)(v164 + 48), (__int128 *)(v164 + 56));
    }
    v165 = *a10;
    *a10 = 0;
    if (v165)
      (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  }
  else
  {
    quasar::WordPronCache::setPronCache(v168 + 88, (_QWORD *)(v181 + 2752));
  }
  if (v226)
  {
    quasar::LmeDataFactory::finishGetLmeDataImpl(v181, v168, a4, (uint64_t)v229, &v224);
    v156 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v242 = 0u;
      v243 = 0u;
      v240 = 0u;
      v241 = 0u;
      v238 = 0u;
      v239 = 0u;
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      v232 = 0u;
      v233 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No supported quasarTemplates were found in userData. Only the quasarTemplates specified under ", 94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"\"supported-lme-quasarTemplate-list\" in the json config file are supported.", 74);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v156 = 5;
  }
LABEL_259:
  v218[0] = *(__int128 **)MEMORY[0x1E0DE4F60];
  *(__int128 **)((char *)v218 + *((_QWORD *)v218[0] - 3)) = *(__int128 **)(MEMORY[0x1E0DE4F60] + 24);
  v218[1] = (__int128 *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v219 < 0)
    operator delete(v218[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v220);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v224, v225);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v227);
LABEL_262:
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v229);
  return v156;
}

void sub_1ADE17BB8()
{
  JUMPOUT(0x1ADE17F94);
}

void sub_1ADE17BC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADE17C8CLL);
}

void sub_1ADE17BE4()
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x340]);
  JUMPOUT(0x1ADE17F94);
}

void sub_1ADE17BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t v66;

  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)&STACK[0x340]);
  v66 = MEMORY[0x1E0DE4F60];
  a64 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a64 + *(_QWORD *)(a64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a65 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::streambuf::~streambuf(&a65);
  std::ostream::~ostream(&a64, v66 + 8);
  MEMORY[0x1AF44D094](&STACK[0x228]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(&STACK[0x2E8], STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(&STACK[0x300]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1ADE17C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  unint64_t *p_shared_owners;
  unint64_t v57;

  MEMORY[0x1AF44D190](a29, 0x10E1C407A581DE7);
  if (a56)
  {
    p_shared_owners = (unint64_t *)&a56->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  JUMPOUT(0x1ADE17F20);
}

void sub_1ADE17C44()
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x340]);
  JUMPOUT(0x1ADE17F9CLL);
}

void sub_1ADE17C54()
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x340]);
  JUMPOUT(0x1ADE17F94);
}

void sub_1ADE17C64()
{
  JUMPOUT(0x1ADE17F80);
}

void sub_1ADE17C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,char a44,char *a45)
{
  uint64_t v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&STACK[0x340]);
  v46 = *(_QWORD *)(v45 - 168);
  *(_QWORD *)(v45 - 168) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a43->__on_zero_shared)(a43);
      std::__shared_weak_count::__release_weak(a43);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&a44, a45);
  (*(void (**)(uint64_t))(*(_QWORD *)a29 + 8))(a29);
  JUMPOUT(0x1ADE17EE8);
}

void sub_1ADE17C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x340]);
  a64 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a64 + *(_QWORD *)(a64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a65 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&STACK[0x228]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2E8], (_QWORD *)STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x300]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1ADE17CA0()
{
  uint64_t v0;
  uint64_t v1;

  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  v1 = *(_QWORD *)(v0 - 168);
  *(_QWORD *)(v0 - 168) = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1ADE17E94);
}

void sub_1ADE17CD4()
{
  JUMPOUT(0x1ADE17CECLL);
}

void sub_1ADE17CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  unint64_t *p_shared_owners;
  unint64_t v67;

  if (a56)
  {
    p_shared_owners = (unint64_t *)&a56->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))a56->__on_zero_shared)(a56);
      std::__shared_weak_count::__release_weak(a56);
    }
  }
  a64 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a64 + *(_QWORD *)(a64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a65 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&STACK[0x228]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2E8], (_QWORD *)STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x300]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1ADE17D00()
{
  JUMPOUT(0x1ADE17ECCLL);
}

void sub_1ADE17D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  a64 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a64 + *(_QWORD *)(a64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a65 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&STACK[0x228]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2E8], (_QWORD *)STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x300]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1ADE17D24()
{
  JUMPOUT(0x1ADE17F8CLL);
}

void sub_1ADE17D4C()
{
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  JUMPOUT(0x1ADE17F8CLL);
}

void sub_1ADE17D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 169) < 0)
    operator delete(*(void **)(v39 - 192));
  *(_QWORD *)(v39 - 192) = &STACK[0x340];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 192));
  STACK[0x340] = (unint64_t)&a36;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(v39 - 168, *(char **)(v39 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  *(_QWORD *)(v39 - 168) = &a39;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  JUMPOUT(0x1ADE17E94);
}

void sub_1ADE17D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(v39 - 168, *(_QWORD *)(v39 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&a34);
  *(_QWORD *)(v39 - 168) = &a39;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](v39 - 168);
  JUMPOUT(0x1ADE17E94);
}

void sub_1ADE17D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t v66;

  v66 = MEMORY[0x1E0DE4F60];
  a64 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a64 + *(_QWORD *)(a64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a65 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::streambuf::~streambuf(&a65);
  std::ostream::~ostream(&a64, v66 + 8);
  MEMORY[0x1AF44D094](&STACK[0x228]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(&STACK[0x2E8], STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(&STACK[0x300]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1ADE17D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;

  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&STACK[0x340]);
  a64 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&a64 + *(_QWORD *)(a64 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  a65 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&STACK[0x228]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2E8], (_QWORD *)STACK[0x2F0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x300]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1ADE17D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  STACK[0x340] = (unint64_t)&a36;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x340]);
  JUMPOUT(0x1ADE17E84);
}

void sub_1ADE17DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45)
{
  unint64_t *p_shared_owners;
  unint64_t v46;

  if (a43)
  {
    p_shared_owners = (unint64_t *)&a43->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))a43->__on_zero_shared)(a43);
      std::__shared_weak_count::__release_weak(a43);
    }
  }
  std::__tree<std::string>::destroy(&a44, a45);
  (*(void (**)(uint64_t))(*(_QWORD *)a29 + 8))(a29);
  JUMPOUT(0x1ADE17EE8);
}

void sub_1ADE17DB8()
{
  JUMPOUT(0x1ADE17E88);
}

void sub_1ADE17DC4()
{
  JUMPOUT(0x1ADE17DD8);
}

void sub_1ADE17E24()
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&STACK[0x340]);
  JUMPOUT(0x1ADE17E38);
}

void sub_1ADE17E34()
{
  uint64_t v0;

  if (*(char *)(v0 - 193) < 0)
    operator delete(*(void **)(v0 - 216));
  *(_QWORD *)(v0 - 216) = v0 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 216));
  JUMPOUT(0x1ADE17E70);
}

void sub_1ADE17E4C()
{
  JUMPOUT(0x1ADE17E60);
}

void quasar::LmePackedUserData::~LmePackedUserData(quasar::LmePackedUserData *this)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  fst::SymbolTable::~SymbolTable(this);
}

void quasar::WordPronCache::setPronCache(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  fst::SymbolTable *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _BYTE v12[16];

  v3 = (_QWORD *)(a1 + 32);
  v4 = (uint64_t **)(a1 + 24);
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v12);
  v5 = (fst::SymbolTable *)(v3 - 3);
  fst::SymbolTable::operator=((uint64_t)v5, (uint64_t)v12);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v12);
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>(v4, (const quasar::LmeDataFactoryBase::Word *)(v7 + 4), v5);
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != v6);
  }
}

void sub_1ADE1808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::processUserData(uint64_t a1, const void ***a2, uint64_t *a3, uint64_t *a4, const quasar::LmeDataFactoryBase::Word *a5, quasar::WordPronCache *a6, uint64_t **a7, uint64_t a8, unint64_t *a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const void **v18;
  const void **v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type size;
  uint64_t *v29;
  uint64_t *v30;
  __int128 ***v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  int v37;
  __int128 ***v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL8 isContactTemplate;
  int v43;
  int Enumerations;
  unint64_t *v45;
  unint64_t v46;
  int appended;
  __int128 v48;
  _BOOL4 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;
  uint64_t *v54;
  __int128 *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  int v64;
  uint64_t *v65;
  uint64_t **v66;
  _QWORD *v67;
  uint64_t **v68;
  const void **v72;
  std::string v73;
  std::string v74;
  _QWORD v75[2];
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  std::string v95;
  const void **v96;
  const void **v97;
  uint64_t v98;
  uint64_t *v99;
  _QWORD *v100[2];

  v14 = (_QWORD *)(a8 + 8);
  std::__tree<std::string>::destroy(a8, *(char **)(a8 + 8));
  *(_QWORD *)a8 = v14;
  v68 = (uint64_t **)a8;
  *(_QWORD *)(a8 + 16) = 0;
  *v14 = 0;
  v15 = *a3;
  v16 = a3[1];
  while (v16 != v15)
  {
    v16 -= 24;
    *(_QWORD *)&v78 = v16;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  }
  a3[1] = v15;
  std::vector<std::string>::__clear[abi:ne180100](a4);
  v100[0] = 0;
  v100[1] = 0;
  v17 = (uint64_t *)v100;
  v98 = 0;
  v99 = (uint64_t *)v100;
  v96 = 0;
  v97 = 0;
  quasar::LmeDataFactory::getPrioritizedUserDataKeys(a1, a2, (uint64_t *)&v96);
  v18 = v96;
  v19 = v97;
  if (v96 == v97)
    goto LABEL_65;
  do
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(a7, v18);
    v18 += 3;
  }
  while (v18 != v19);
  v20 = (uint64_t)v96;
  v72 = v97;
  if (v96 == v97)
  {
LABEL_65:
    v53 = 1;
LABEL_66:
    v54 = v99;
    if (v99 != v17)
    {
      do
      {
        std::vector<std::vector<std::string>>::vector<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,0>((std::string *)&v78, (_QWORD *)v54[7], v54 + 8);
        v55 = (__int128 *)(v54 + 4);
        v56 = a4[1];
        if (v56 >= a4[2])
        {
          v57 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, v55);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v55);
          v57 = v56 + 24;
        }
        a4[1] = v57;
        std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100](a3, (uint64_t)&v78);
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
        v58 = (uint64_t *)v54[1];
        if (v58)
        {
          do
          {
            v59 = v58;
            v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            v59 = (uint64_t *)v54[2];
            v60 = *v59 == (_QWORD)v54;
            v54 = v59;
          }
          while (!v60);
        }
        v54 = v59;
      }
      while (v59 != v17);
    }
    if ((v53 & 1) != 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"No supported templates were found in userData. Only the templates specified under ", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"\"supported-lme-template-list\" in the json config file are supported.", 68);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
      }
      v62 = 5;
    }
    else
    {
      v62 = 0;
    }
  }
  else
  {
    v64 = 0;
    v66 = a7;
    v67 = (_QWORD *)(a1 + 2504);
    v65 = a3;
    while (1)
    {
      quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, v20, &v95);
      if (quasar::gLogLevel >= 4)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Getting LME data for userDataKey = ", 35);
        v22 = *(char *)(v20 + 23);
        if (v22 >= 0)
          v23 = v20;
        else
          v23 = *(_QWORD *)v20;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v20 + 23);
        else
          v24 = *(_QWORD *)(v20 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" quasarTemplateName = ", 22);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v95;
        else
          v27 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          size = v95.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, size);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
      }
      quasar::LmeDataFactory::getNameEnumerator(a1, (uint64_t)&v95, 1, &v76);
      if (v76)
      {
        v29 = v17;
        v78 = 0u;
        v79 = 0u;
        LODWORD(v80) = 1065353216;
        v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
        v30 = std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v99, (const void **)&v95.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76))
        {
          v31 = (__int128 ***)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)a2, (const void **)v20);
          v32 = v77;
          v75[0] = v76;
          v75[1] = v77;
          if (v77)
          {
            p_shared_owners = (unint64_t *)&v77->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }
          v35 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v67, (unsigned __int8 *)&v95);
          if (v35)
            v36 = *((_DWORD *)v35 + 10);
          else
            v36 = -1;
          isContactTemplate = quasar::LmeDataFactory::isContactTemplate(a1, (uint64_t)&v95);
          if (isContactTemplate)
            v43 = (*(_DWORD *)(a1 + 1820) - v64) & ~((*(_DWORD *)(a1 + 1820) - v64) >> 31);
          else
            v43 = -1;
          Enumerations = quasar::LmeDataFactory::getEnumerations(isContactTemplate, v31, a6, a5, (uint64_t)&v78, (uint64_t)(v30 + 7), v75, v36, v43, a9);
          v73.__r_.__value_.__r.__words[0] = v20;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, (const void **)v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v73)+ 14) = Enumerations;
          if (v32)
          {
            v45 = (unint64_t *)&v32->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        else
        {
          v38 = (__int128 ***)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)a2, (const void **)v20);
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v74, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
          else
            v74 = v95;
          v39 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v67, (unsigned __int8 *)&v95);
          if (v39)
            v41 = *((_DWORD *)v39 + 10);
          else
            v41 = -1;
          appended = quasar::LmeDataFactory::appendNames((uint64_t)v39, v38, v40, a6, a5, (uint64_t)&v78, (uint64_t **)v30 + 7, v41, a9);
          v73.__r_.__value_.__r.__words[0] = v20;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, (const void **)v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v73)+ 14) = appended;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (quasar::LmeDataFactory::isContactTemplate(a1, (uint64_t)&v95))
          v64 = *((_DWORD *)v30 + 18);
        if (*(char *)(v76 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(v76 + 8), *(_QWORD *)(v76 + 16));
        }
        else
        {
          v48 = *(_OWORD *)(v76 + 8);
          v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(v76 + 24);
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v48;
        }
        v17 = v29;
        a3 = v65;
        v49 = quasar::EnumerationTypes::insert(v66, v20, (__int128 *)&v73);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        v37 = !v49;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v78);
      }
      else
      {
        v37 = 1;
      }
      v50 = v77;
      if (v77)
      {
        v51 = (unint64_t *)&v77->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      if (v37)
        break;
      v20 += 24;
      if ((const void **)v20 == v72)
      {
        v53 = 0;
        goto LABEL_66;
      }
    }
    v62 = 1;
  }
  *(_QWORD *)&v78 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy((uint64_t)&v99, v100[0]);
  return v62;
}

void sub_1ADE186DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  a41 = v41 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(v41 - 120, *(_QWORD **)(v41 - 112));
  _Unwind_Resume(a1);
}

float quasar::LmeDataFactory::getClassSizeCost(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  float v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;

  v6 = *(float *)(a1 + 1812);
  v7 = a3 + 5;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3 + 5, a2))
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v7, a2);
  }
  else
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2264), a2))goto LABEL_6;
    v10 = a2;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2264, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
  }
  v6 = *((double *)v8 + 5);
LABEL_6:
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, a2))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, a2);
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2384), a2))
  {
    v10 = a2;
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2384, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
  }
  return v6;
}

void quasar::LmeDataFactory::finishGetLmeDataImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t *v11;
  float v12;
  unsigned __int8 *v13;
  float v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  const quasar::QsrTextSymbolTable *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;

  v8 = a5 + 1;
  v7 = (_QWORD *)*a5;
  if ((_QWORD *)*a5 != a5 + 1)
  {
    v10 = (_QWORD *)(a1 + 2224);
    do
    {
      v11 = v7 + 7;
      v12 = *(float *)(a1 + 1808);
      if (v12 != 1.0)
        fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*v11, v12);
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v10, (unsigned __int8 *)v7 + 32);
      if (v13)
      {
        v14 = *((double *)v13 + 5);
        fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*v11, v14);
      }
      *(_QWORD *)&v34 = v7 + 4;
      v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 200), (const void **)v7 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v15 + 7, v7 + 7);
      v16 = (_QWORD *)v7[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v7[2];
          v18 = *v17 == (_QWORD)v7;
          v7 = v17;
        }
        while (!v18);
      }
      v7 = v17;
    }
    while (v17 != v8);
  }
  if (*(uint64_t *)(a2 + 168) <= 0)
  {
    LODWORD(v52) = 3;
    std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,fst::SymbolTable const&,quasar::TextEncoding,void>(a4, (int *)&v52, &v34);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a2 + 224, &v34);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    v19 = a3;
    if (!*((_QWORD *)&v34 + 1))
      goto LABEL_28;
    v27 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v27);
    while (__stlxr(v26 - 1, v27));
    goto LABEL_26;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v34);
  v19 = a3;
  kaldi::quasar::LmeFst::DefragLmeFst(a2 + 200, a4, v34, a3);
  v51 = 3;
  std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,void>((uint64_t *)&v34, &v51, &v52);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a2 + 224, &v52);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v34 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
LABEL_26:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_28:
  if (quasar::gLogLevel >= 6)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Created lmeData.symTable", 24);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v34);
  }
  quasar::printSymTableToTraceLog(*(quasar **)(a2 + 224), v20);
  if (*(uint64_t *)(a2 + 168) >= 1 && quasar::gLogLevel >= 4)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Original lmeData.symTableFirstKey = ", 36);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", Original lmeData.symTableLastKey = ", 37);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
  }
  if (quasar::QsrTextSymbolTable::NumSymbols(*(quasar::QsrTextSymbolTable **)(a2 + 224)))
  {
    *(_QWORD *)(a2 + 160) = v19;
    v29 = *(_QWORD *)(a2 + 224);
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 96) + 112))(*(_QWORD *)(v29 + 96));
    if ((v30 & 0x8000000000000000) == 0)
      v30 += *(_QWORD *)(v29 + 120);
    v31 = v30 - 1;
  }
  else
  {
    v31 = -1;
    *(_QWORD *)(a2 + 160) = -1;
  }
  *(_QWORD *)(a2 + 168) = v31;
  if (quasar::gLogLevel >= 4)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"New lmeData.symTableFirstKey = ", 31);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", New lmeData.symTableLastKey = ", 32);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
  }
}

void sub_1ADE18C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::LmeDataFactory::encodeAndFilterEntity(std::string **a1@<X0>, const quasar::LmeDataFactoryBase::Word *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v3;
  __int128 *v4;
  __int128 v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::string::size_type v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  const std::string::value_type *v19;
  uint64_t size;
  _QWORD *v21;
  uint64_t v22;
  _OWORD v23[17];
  std::string v24;
  std::string v25;
  int data;
  char **v27;
  char *v28;
  uint64_t v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = (__int128 *)a1[1];
  if (*a1 != (std::string *)v4)
  {
    do
    {
      if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
      }
      else
      {
        v7 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
      }
      if (SHIBYTE(v3[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, v3[1].__r_.__value_.__l.__data_, v3[1].__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&v3[1].__r_.__value_.__l.__data_;
        v25.__r_.__value_.__r.__words[2] = v3[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v8;
      }
      data = (int)v3[2].__r_.__value_.__l.__data_;
      v9 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&v27, (uint64_t)&v3[2].__r_.__value_.__l.__size_);
      v10 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v9);
      if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v10, v3, &v24))
      {
        if (quasar::LmeDataFactory::wordIsLegal((quasar::LmeDataFactory *)&v24, a2))
        {
          v11 = a3[1];
          if (v11 >= a3[2])
          {
            v22 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word>(a3, (uint64_t)&v24);
          }
          else
          {
            v12 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
            *(_QWORD *)(v11 + 16) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
            *(_OWORD *)v11 = v12;
            memset(&v24, 0, sizeof(v24));
            v13 = v25.__r_.__value_.__r.__words[2];
            *(_OWORD *)(v11 + 24) = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
            *(_QWORD *)(v11 + 40) = v13;
            memset(&v25, 0, sizeof(v25));
            *(_DWORD *)(v11 + 48) = data;
            *(_QWORD *)(v11 + 56) = v27;
            v14 = v28;
            *(_QWORD *)(v11 + 64) = v28;
            v15 = v11 + 64;
            v16 = v29;
            *(_QWORD *)(v11 + 72) = v29;
            if (v16)
            {
              *((_QWORD *)v14 + 2) = v15;
              v27 = &v28;
              v28 = 0;
              v29 = 0;
            }
            else
            {
              *(_QWORD *)(v11 + 56) = v15;
            }
            v22 = v11 + 80;
            a3[1] = v11 + 80;
          }
          a3[1] = v22;
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        memset(v23, 0, sizeof(v23));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Skipping illegal word: \"", 24);
        v18 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)v3;
        else
          v19 = (const std::string::value_type *)v3->__r_.__value_.__r.__words[0];
        if (v18 >= 0)
          size = HIBYTE(v3->__r_.__value_.__r.__words[2]);
        else
          size = v3->__r_.__value_.__l.__size_;
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v23);
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v27, v28);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v3 = (std::string *)((char *)v3 + 80);
    }
    while (v3 != (std::string *)v4);
  }
}

void sub_1ADE18F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)(v9 - 176));
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::wordIsLegal(quasar::LmeDataFactory *this, const quasar::LmeDataFactoryBase::Word *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v5;
  quasar::LmeDataFactory *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  quasar::LmeDataFactory *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *p_p;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  quasar::LmeDataFactory *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  uint64_t v35;
  unsigned __int8 v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[8];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[176];

  v2 = *((unsigned __int8 *)this + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = a2;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
    v5 = *((char *)this + 23);
    if (v5 >= 0)
      v6 = this;
    else
      v6 = *(quasar::LmeDataFactory **)this;
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)this + 23);
    else
      v7 = *((_QWORD *)this + 1);
    for (; v7; --v7)
    {
      LOBYTE(v37[0]) = 48;
      v8 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, (char *)v37);
      v9 = *v8;
      *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
      *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFFB5 | 8;
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      v6 = (quasar::LmeDataFactory *)((char *)v6 + 1);
    }
    if ((*((_DWORD *)this + 12) & 0x80000000) != 0)
    {
      if (quasar::gLogLevel >= 2)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        *(_OWORD *)v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Word with hex sequence ", 23);
        std::stringbuf::str();
        if ((v36 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v36 & 0x80u) == 0)
          v18 = v36;
        else
          v18 = v35;
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"has frequency ", 14);
        std::ostream::operator<<();
        if ((char)v36 < 0)
          operator delete(__p);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v37);
      }
    }
    else if (quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactory *)((char *)this + 56)))
    {
      if (quasar::gLogLevel >= 5)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        *(_OWORD *)v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Word has no prons, orthography=", 31);
        v12 = *((char *)this + 23);
        if (v12 >= 0)
          v13 = this;
        else
          v13 = *(quasar::LmeDataFactory **)this;
        if (v12 >= 0)
          v14 = *((unsigned __int8 *)this + 23);
        else
          v14 = *((_QWORD *)this + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v37);
      }
    }
    else
    {
      if ((v3 & 0x80000000) != 0
        || (quasar::Bitmap::~Bitmap((quasar::LmeDataFactory *)((char *)this + 56)),
            v21 = v20 + 1,
            v22 = (_QWORD *)*v20,
            (_QWORD *)*v20 == v20 + 1))
      {
LABEL_46:
        v15 = 1;
LABEL_57:
        *(_QWORD *)&v54 = *MEMORY[0x1E0DE4F50];
        v32 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(_QWORD *)((char *)&v55[-2] + *(_QWORD *)(v54 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
        v55[0] = v32;
        v55[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v57) < 0)
          operator delete(*((void **)&v56 + 1));
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1AF44D094](v59);
        return v15;
      }
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(v37, ".");
        quasar::splitStringSimple((uint64_t)(v22 + 5), (uint64_t *)v37, (uint64_t *)&__p);
        if (SBYTE7(v38) < 0)
          operator delete(v37[0]);
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - (uint64_t)__p) >> 3) > v3)
          break;
        v37[0] = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
        v23 = (_QWORD *)v22[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v22[2];
            v25 = *v24 == (_QWORD)v22;
            v22 = v24;
          }
          while (!v25);
        }
        v22 = v24;
        if (v24 == v21)
          goto LABEL_46;
      }
      if (quasar::gLogLevel >= 5)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        *(_OWORD *)v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Word has pron with ", 19);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" phones, exceeds maxPronLen=", 28);
        v27 = (_QWORD *)std::ostream::operator<<();
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", orthography=", 14);
        v29 = *((char *)this + 23);
        if (v29 >= 0)
          v30 = this;
        else
          v30 = *(quasar::LmeDataFactory **)this;
        if (v29 >= 0)
          v31 = *((unsigned __int8 *)this + 23);
        else
          v31 = *((_QWORD *)this + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v37);
      }
      v37[0] = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
    }
    v15 = 0;
    goto LABEL_57;
  }
  if (quasar::gLogLevel >= 2)
  {
    v58 = 0u;
    memset(v59, 0, 144);
    v56 = 0u;
    v57 = 0u;
    memset(v55, 0, sizeof(v55));
    v54 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Word has empty orthography", 26);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v54);
  }
  return 0;
}

void sub_1ADE19458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **p_p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a53);
  _Unwind_Resume(a1);
}

double quasar::LmeDataFactory::getLengthPenalty(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  v2 = (_QWORD *)(a1 + 2304);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2304), a2);
  if (v3)
    return *((double *)v3 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  v3 = v4;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v3)
      return *((double *)v3 + 5);
    return 0.0;
  }
  if (!v4)
    return 0.0;
  return *((double *)v3 + 5);
}

void sub_1ADE1958C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double quasar::LmeDataFactory::getLengthPenaltyCutoff(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  v2 = (_QWORD *)(a1 + 2344);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2344), a2);
  if (v3)
    return *((double *)v3 + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  v3 = v4;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v3)
      return *((double *)v3 + 5);
    return 0.0;
  }
  if (!v4)
    return 0.0;
  return *((double *)v3 + 5);
}

void sub_1ADE19620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmeDataFactory::getMaxPronLen(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 2504), a2);
  if (v2)
    return *((unsigned int *)v2 + 10);
  else
    return 0xFFFFFFFFLL;
}

_QWORD *std::shared_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45C48;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void quasar::LmeDataFactory::getPrioritizedUserDataKeys(uint64_t a1, const void ***a2, uint64_t *a3)
{
  const void ***v5;
  const void **v6;
  const void **v7;
  const void ***v8;
  BOOL v9;
  const void **v10;
  const void **v11;
  char **v12;
  uint64_t v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char **v24;
  _OWORD v25[17];
  char **v26;
  char *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v26 = &v27;
  v5 = a2 + 1;
  v6 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v26, v6 + 4, (uint64_t)(v6 + 4));
      v7 = (const void **)v6[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v6[2];
          v9 = *v8 == v6;
          v6 = (const void **)v8;
        }
        while (!v9);
      }
      v6 = (const void **)v8;
    }
    while (v8 != v5);
  }
  std::vector<std::string>::__clear[abi:ne180100](a3);
  v10 = *(const void ***)(a1 + 2592);
  v11 = *(const void ***)(a1 + 2600);
  while (v10 != v11)
  {
    v12 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v26, v10);
    v13 = (uint64_t)v12;
    if (&v27 != v12)
    {
      v14 = (__int128 *)(v12 + 4);
      v15 = a3[1];
      if (v15 >= a3[2])
      {
        v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v14);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v14);
        v16 = v15 + 24;
      }
      a3[1] = v16;
      std::__tree<std::string>::erase((uint64_t **)&v26, v13);
    }
    v10 += 3;
  }
  if (v28)
  {
    v17 = (uint64_t *)v26;
    if (v26 != &v27)
    {
      v18 = quasar::gLogLevel;
      do
      {
        if (v18 >= 5)
        {
          memset(v25, 0, sizeof(v25));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Ignoring user data key ", 23);
          v20 = *((char *)v17 + 55);
          if (v20 >= 0)
            v21 = (uint64_t)(v17 + 4);
          else
            v21 = v17[4];
          if (v20 >= 0)
            v22 = *((unsigned __int8 *)v17 + 55);
          else
            v22 = v17[5];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v25);
          v18 = quasar::gLogLevel;
        }
        v23 = (char *)v17[1];
        if (v23)
        {
          do
          {
            v24 = (char **)v23;
            v23 = *(char **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (char **)v17[2];
            v9 = *v24 == (char *)v17;
            v17 = (uint64_t *)v24;
          }
          while (!v9);
        }
        v17 = (uint64_t *)v24;
      }
      while (v24 != &v27);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v26, v27);
}

void sub_1ADE19908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1 - 88, *(char **)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getEnumerations(uint64_t a1, __int128 ***a2, quasar::WordPronCache *a3, const quasar::LmeDataFactoryBase::Word *a4, uint64_t a5, uint64_t a6, _QWORD *a7, unsigned int a8, int a9, unint64_t *a10)
{
  uint64_t v10;
  _QWORD *v11;
  __int128 **v12;
  __int128 **v13;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v23[17];
  std::string v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a6 + 16);
  v25[0] = &unk_1E5D3CF90;
  v25[1] = quasar::LmeDataFactory::wordIsNotLegal;
  v11 = v25;
  v25[2] = a8;
  v26 = v25;
  v12 = *a2;
  v13 = a2[1];
  if (*a2 == v13)
  {
    v18 = 0;
    v20 = 4;
LABEL_19:
    (*(void (**)(void))(*v11 + 8 * v20))();
    return v18;
  }
  v18 = 0;
  if (a9 < 0)
    LODWORD(v10) = 0;
  v19 = (v10 + a9);
  while (1)
  {
    memset(&v24, 0, sizeof(v24));
    std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(&v24, *v12, v12[1], 0xCCCCCCCCCCCCCCCDLL * (v12[1] - *v12));
    if (quasar::LmeDataFactory::processName((uint64_t)&v24, a3, a4, a5, (uint64_t)v25, a10))
    {
      (*(void (**)(_QWORD, std::string *, uint64_t))(*(_QWORD *)*a7 + 16))(*a7, &v24, a6);
      v18 = (v18 + 1);
    }
    if ((v19 & 0x80000000) == 0 && *(_QWORD *)(a6 + 16) > v19)
      break;
    *(_QWORD *)&v23[0] = &v24;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
    v12 += 3;
    if (v12 == v13)
      goto LABEL_15;
  }
  if (quasar::gLogLevel >= 4)
  {
    memset(v23, 0, sizeof(v23));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Exceeded enumeration limit. Stopped enumerating.", 48);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v23);
  }
  *(_QWORD *)&v23[0] = &v24;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
LABEL_15:
  v11 = v26;
  if (v26 == v25)
  {
    v20 = 4;
    v11 = v25;
    goto LABEL_19;
  }
  if (v26)
  {
    v20 = 5;
    goto LABEL_19;
  }
  return v18;
}

void sub_1ADE19B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a11);
  a11 = (void **)(v11 - 152);
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&a11);
  v13 = *(_QWORD **)(v11 - 104);
  if (v13 == (_QWORD *)(v11 - 128))
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 128);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::appendNames(uint64_t a1, __int128 ***a2, uint64_t a3, quasar::WordPronCache *a4, const quasar::LmeDataFactoryBase::Word *a5, uint64_t a6, uint64_t **a7, unsigned int a8, unint64_t *a9)
{
  _QWORD *v9;
  __int128 **v10;
  uint64_t v12;
  std::string::size_type size;
  std::string::size_type i;
  std::vector<std::string>::pointer end;
  __int128 v16;
  std::vector<std::string>::pointer v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  std::string *v25;
  uint64_t v26;
  __int128 **v28;
  std::string v32;
  std::vector<std::string> v33;
  std::string v34;
  std::__split_buffer<std::string> __v;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36[0] = &unk_1E5D3CF90;
  v36[1] = quasar::LmeDataFactory::wordIsNotLegal;
  v9 = v36;
  v36[2] = a8;
  v37 = v36;
  v10 = *a2;
  v28 = a2[1];
  if (*a2 == v28)
  {
    v12 = 0;
    v26 = 4;
    goto LABEL_32;
  }
  v12 = 0;
  do
  {
    memset(&v34, 0, sizeof(v34));
    std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(&v34, *v10, v10[1], 0xCCCCCCCCCCCCCCCDLL * (v10[1] - *v10));
    if (quasar::LmeDataFactory::processName((uint64_t)&v34, a4, a5, a6, (uint64_t)v36, a9))
    {
      size = v34.__r_.__value_.__l.__size_;
      for (i = v34.__r_.__value_.__r.__words[0]; i != size; i += 80)
      {
        memset(&v33, 0, sizeof(v33));
        std::to_string(&v32, *(_DWORD *)(i + 48));
        end = v33.__end_;
        if (v33.__end_ >= v33.__end_cap_.__value_)
        {
          v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33.__end_ - (char *)v33.__begin_) >> 3);
          v19 = v18 + 1;
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) > v19)
            v19 = 0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) >= 0x555555555555555)
            v20 = 0xAAAAAAAAAAAAAAALL;
          else
            v20 = v19;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v33.__end_cap_;
          if (v20)
            v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v33.__end_cap_, v20);
          else
            v21 = 0;
          v22 = v21 + v18;
          __v.__first_ = v21;
          __v.__begin_ = v22;
          __v.__end_cap_.__value_ = &v21[v20];
          v23 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
          v22->__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          memset(&v32, 0, sizeof(v32));
          __v.__end_ = v22 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v33, &__v);
          v17 = v33.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v33.__end_ = v17;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v32.__r_.__value_.__l.__data_);
            v17 = v33.__end_;
          }
        }
        else
        {
          v16 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
          v33.__end_->__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v16;
          v17 = end + 1;
          v33.__end_ = end + 1;
        }
        if (v17 >= v33.__end_cap_.__value_)
        {
          v25 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v33, (__int128 *)i);
        }
        else
        {
          if (*(char *)(i + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
          }
          else
          {
            v24 = *(_OWORD *)i;
            v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v24;
          }
          v25 = v17 + 1;
        }
        v33.__end_ = v25;
        std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a7, &v33, (__int128 **)&v33);
        v12 = (v12 + 1);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      }
    }
    __v.__first_ = &v34;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    v10 += 3;
  }
  while (v10 != v28);
  v9 = v37;
  if (v37 == v36)
  {
    v26 = 4;
    v9 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v26 = 5;
LABEL_32:
    (*(void (**)(void))(*v9 + 8 * v26))();
  }
  return v12;
}

void sub_1ADE19EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__split_buffer<std::wstring> *a27)
{
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 104);
  if (v29 == (_QWORD *)(v27 - 128))
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 128);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADE1A07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::processName(uint64_t a1, quasar::WordPronCache *a2, const quasar::LmeDataFactoryBase::Word *a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  const std::string::value_type *data;
  std::string::size_type size;
  kaldi::quasar::Lexicon *v24;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  std::string __str;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v11 = *(std::string **)a1;
  v12 = *(_QWORD **)(a1 + 8);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v48, a5);
  v13 = std::remove_if[abi:ne180100]<std::__wrap_iter<quasar::LmeDataFactoryBase::Word *>,std::function<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>>(v11, v12, (uint64_t)v48);
  std::vector<quasar::LmeDataFactoryBase::Word>::erase(a1, (uint64_t)v13, *(__int128 **)(a1 + 8));
  v14 = (uint64_t)v49;
  if (v49 == v48)
  {
    v15 = 4;
    v14 = (uint64_t)v48;
  }
  else
  {
    if (!v49)
      goto LABEL_6;
    v15 = 5;
  }
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  v16 = *(std::string **)a1;
  v17 = *(std::string **)(a1 + 8);
  if (*(std::string **)a1 != v17)
  {
    while (1)
    {
      memset(&__str, 0, sizeof(__str));
      v18 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v14);
      if (!quasar::QsrText::encodeTokenQsrTextWithMetadata(v18, v16, &__str))
        break;
      std::string::operator=(v16, &__str);
      v19 = quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)&v16[2].__r_.__value_.__r.__words[1]);
      v20 = *a6;
      if (*a6 <= v19)
        v20 = v19;
      *a6 = v20;
      if (a2)
        quasar::WordPronCache::addWord(a2, v16, 3);
      v21 = SHIBYTE(v16[1].__r_.__value_.__r.__words[2]);
      if (v21 >= 0)
        data = (const std::string::value_type *)&v16[1];
      else
        data = v16[1].__r_.__value_.__l.__data_;
      if (v21 >= 0)
        size = HIBYTE(v16[1].__r_.__value_.__r.__words[2]);
      else
        size = v16[1].__r_.__value_.__l.__size_;
      std::string::append(v16, data, size);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)&v16[1], (uint64_t)&v16[1]);
      v14 = quasar::LmeDataFactory::addWordToPronLexicon((quasar::LmeDataFactory *)v16, a3, v24);
      if ((v14 & 1) == 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v30 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Skipping name containing bad word", 33);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v30);
        }
        goto LABEL_33;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v16 = (std::string *)((char *)v16 + 80);
      if (v16 == v17)
        return 1;
    }
    if (quasar::gLogLevel >= 4)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Skipping name containing bad word:", 34);
      v27 = SHIBYTE(v16->__r_.__value_.__r.__words[2]);
      if (v27 >= 0)
        v28 = (uint64_t)v16;
      else
        v28 = v16->__r_.__value_.__r.__words[0];
      if (v27 >= 0)
        v29 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      else
        v29 = v16->__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v30);
    }
LABEL_33:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1ADE1A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  if (*(char *)(v9 - 105) < 0)
    operator delete(*(void **)(v9 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 80;
        std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

_QWORD *std::remove_if[abi:ne180100]<std::__wrap_iter<quasar::LmeDataFactoryBase::Word *>,std::function<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  _QWORD *v12;

  if (a1 == a2)
    return a2;
  v5 = a1;
  while (1)
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
      goto LABEL_21;
    if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v5) & 1) != 0)
      break;
    v5 += 10;
    if (v5 == a2)
      return a2;
  }
  if (v5 == a2)
    return a2;
  if (v5 + 10 != a2)
  {
    for (i = v5 + 17; ; i += 10)
    {
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        break;
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, i - 7) & 1) == 0)
      {
        if (*((char *)v5 + 23) < 0)
          operator delete((void *)*v5);
        v9 = *(_OWORD *)(i - 7);
        v5[2] = *(i - 5);
        *(_OWORD *)v5 = v9;
        *((_BYTE *)i - 33) = 0;
        *((_BYTE *)i - 56) = 0;
        v10 = (void **)(v5 + 3);
        if (*((char *)v5 + 47) < 0)
          operator delete(*v10);
        v11 = *((_OWORD *)i - 2);
        v5[5] = *(i - 2);
        *(_OWORD *)v10 = v11;
        *((_BYTE *)i - 9) = 0;
        *((_BYTE *)i - 32) = 0;
        *((_DWORD *)v5 + 12) = *((_DWORD *)i - 2);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__move_assign((uint64_t)(v5 + 7), i);
        v5 += 10;
      }
      v12 = i + 3;
      if (v12 == a2)
        return v5;
    }
LABEL_21:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return v5;
}

uint64_t quasar::LmeDataFactory::addWordToPronLexicon(quasar::LmeDataFactory *this, const quasar::LmeDataFactoryBase::Word *a2, kaldi::quasar::Lexicon *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[2];
  char v14;
  __int128 *v15[3];

  quasar::Bitmap::~Bitmap((quasar::LmeDataFactory *)((char *)this + 56));
  v6 = v5 + 1;
  v7 = (_QWORD *)*v5;
  if ((_QWORD *)*v5 == v5 + 1)
    return 1;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".");
    quasar::splitStringSimple((uint64_t)(v7 + 5), (uint64_t *)__p, (uint64_t *)v15);
    if (v14 < 0)
      operator delete(__p[0]);
    v8 = kaldi::quasar::Lexicon::AddPron((uint64_t)a2, (uint64_t)this, v15, 1, 0);
    __p[0] = v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((v8 & 1) == 0)
      break;
    v9 = (_QWORD *)v7[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v7[2];
        v11 = *v10 == (_QWORD)v7;
        v7 = v10;
      }
      while (!v11);
    }
    v7 = v10;
    if (v10 == v6)
      return v8;
  }
  return 0;
}

uint64_t quasar::LmeDataFactory::lookUpProns(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  v5 = *(_QWORD **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  v6 = quasar::Lexicon::lookUpProns(v5, a2, a3, (char *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1ADE1A754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactory::applyG2PRewrite(std::string *a1, uint64_t a2)
{
  std::string *result;
  std::string *v5;
  _QWORD *v6;
  int v7;
  const void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t p_size;
  uint64_t v14;
  _OWORD v15[17];

  result = (std::string *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&a1[112].__r_.__value_.__r.__words[2], (const void **)a2);
  if (&a1[113] != result)
  {
    v5 = result;
    if (quasar::gLogLevel >= 5)
    {
      memset(v15, 0, sizeof(v15));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Rewriting from=", 15);
      v7 = *(char *)(a2 + 23);
      if (v7 >= 0)
        v8 = (const void *)a2;
      else
        v8 = *(const void **)a2;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a2 + 23);
      else
        v9 = *(_QWORD *)(a2 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" to=", 4);
      v12 = v5[3].__r_.__value_.__s.__data_[7];
      if (v12 >= 0)
        p_size = (uint64_t)&v5[2].__r_.__value_.__l.__size_;
      else
        p_size = v5[2].__r_.__value_.__l.__size_;
      if (v12 >= 0)
        v14 = v5[3].__r_.__value_.__s.__data_[7];
      else
        v14 = v5[2].__r_.__value_.__r.__words[2];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, p_size, v14);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v15);
    }
    return std::string::operator=((std::string *)a2, (std::string *)((char *)v5 + 56));
  }
  return result;
}

void sub_1ADE1A874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::wordIsNotLegal(quasar::LmeDataFactory *this, const quasar::LmeDataFactoryBase::Word *a2)
{
  return quasar::LmeDataFactory::wordIsLegal(this, a2) ^ 1;
}

uint64_t **quasar::LmeDataFactory::setPronCache(uint64_t a1, uint64_t a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 2728);
  if (result != (uint64_t **)a2)
    return std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__assign_multi<std::__tree_const_iterator<quasar::LmeDataFactoryBase::Word,std::__tree_node<quasar::LmeDataFactoryBase::Word,void *> *,long>>(result, *(__int128 **)a2, (__int128 *)(a2 + 8));
  return result;
}

uint64_t **quasar::LmeDataFactory::setEmbeddingCache(uint64_t a1, uint64_t a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 2752);
  if (result != (uint64_t **)a2)
    return std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__assign_multi<std::__tree_const_iterator<quasar::LmeDataFactoryBase::Word,std::__tree_node<quasar::LmeDataFactoryBase::Word,void *> *,long>>(result, *(__int128 **)a2, (__int128 *)(a2 + 8));
  return result;
}

void kaldi::quasar::WordpieceV2LmeSymbolFormat::~WordpieceV2LmeSymbolFormat(kaldi::quasar::WordpieceV2LmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

BOOL kaldi::quasar::WordpieceV2LmeSymbolFormat::IsWordPhoneOrDisambigSym(uint64_t a1, const void **a2)
{
  size_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  size_t v6;
  _BOOL8 v7;
  size_t v8;
  const void **v9;
  const void *p_p;
  int v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  size_t v21;
  size_t v22;
  void **v23;
  int v24;
  void *v26[2];
  unsigned __int8 v27;
  void *__p;
  unint64_t v29;
  unsigned __int8 v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "/bpe-");
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (unint64_t)a2[1];
  v5 = v30;
  if ((char)v30 < 0)
  {
    v6 = v29;
    if (v4 < v29)
    {
      v7 = 0;
      goto LABEL_28;
    }
LABEL_9:
    if ((v3 & 0x80) != 0)
    {
      if (v6 != -1)
      {
        if ((unint64_t)a2[1] >= v6)
          v8 = v6;
        else
          v8 = (size_t)a2[1];
        v9 = (const void **)*a2;
LABEL_20:
        if ((v30 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        v11 = memcmp(v9, p_p, v8);
        if (v8 != v6 || v11 != 0)
        {
          v7 = 0;
          if ((v5 & 0x80) == 0)
            return v7;
LABEL_28:
          operator delete(__p);
          return v7;
        }
        std::string::basic_string[abi:ne180100]<0>(v26, "_S/");
        v14 = *((unsigned __int8 *)a2 + 23);
        v15 = (unint64_t)a2[1];
        if ((v14 & 0x80u) == 0)
          v16 = *((unsigned __int8 *)a2 + 23);
        else
          v16 = (unint64_t)a2[1];
        v17 = (char)v27;
        if ((v27 & 0x80u) == 0)
          v18 = v27;
        else
          v18 = (size_t)v26[1];
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (!v19)
        {
          v7 = 0;
          if (((char)v27 & 0x80000000) == 0)
            goto LABEL_39;
          goto LABEL_38;
        }
        if ((v14 & 0x80) != 0)
        {
          if (v18 == -1 || v15 < v20)
LABEL_66:
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v15 - v20 >= v18)
            v22 = v18;
          else
            v22 = v15 - v20;
          a2 = (const void **)*a2;
        }
        else
        {
          if (v18 == -1)
            goto LABEL_66;
          v19 = v14 >= v20;
          v21 = v14 - v20;
          if (!v19)
            goto LABEL_66;
          if (v21 >= v18)
            v22 = v18;
          else
            v22 = v21;
        }
        if ((v27 & 0x80u) == 0)
          v23 = v26;
        else
          v23 = (void **)v26[0];
        v24 = memcmp((char *)a2 + v20, v23, v22);
        v7 = v22 == v18 && v24 == 0;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v30 & 0x80) == 0)
            return v7;
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v26[0]);
        goto LABEL_39;
      }
    }
    else if (v6 != -1)
    {
      if (v3 >= v6)
        v8 = v6;
      else
        v8 = *((unsigned __int8 *)a2 + 23);
      v9 = a2;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v6 = v30;
  if (v4 >= v30)
    goto LABEL_9;
  return 0;
}

void sub_1ADE1AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::WordpieceV2LmeSymbolFormat::IsDisambigSym(uint64_t a1, const void **a2)
{
  size_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  size_t v6;
  _BOOL8 v7;
  size_t v8;
  const void **v9;
  const void *p_p;
  int v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  size_t v21;
  size_t v22;
  void **v23;
  int v24;
  void *v26[2];
  unsigned __int8 v27;
  void *__p;
  unint64_t v29;
  unsigned __int8 v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "/bpe-disambig-");
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (unint64_t)a2[1];
  v5 = v30;
  if ((char)v30 < 0)
  {
    v6 = v29;
    if (v4 < v29)
    {
      v7 = 0;
      goto LABEL_28;
    }
LABEL_9:
    if ((v3 & 0x80) != 0)
    {
      if (v6 != -1)
      {
        if ((unint64_t)a2[1] >= v6)
          v8 = v6;
        else
          v8 = (size_t)a2[1];
        v9 = (const void **)*a2;
LABEL_20:
        if ((v30 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        v11 = memcmp(v9, p_p, v8);
        if (v8 != v6 || v11 != 0)
        {
          v7 = 0;
          if ((v5 & 0x80) == 0)
            return v7;
LABEL_28:
          operator delete(__p);
          return v7;
        }
        std::string::basic_string[abi:ne180100]<0>(v26, "_S/");
        v14 = *((unsigned __int8 *)a2 + 23);
        v15 = (unint64_t)a2[1];
        if ((v14 & 0x80u) == 0)
          v16 = *((unsigned __int8 *)a2 + 23);
        else
          v16 = (unint64_t)a2[1];
        v17 = (char)v27;
        if ((v27 & 0x80u) == 0)
          v18 = v27;
        else
          v18 = (size_t)v26[1];
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (!v19)
        {
          v7 = 0;
          if (((char)v27 & 0x80000000) == 0)
            goto LABEL_39;
          goto LABEL_38;
        }
        if ((v14 & 0x80) != 0)
        {
          if (v18 == -1 || v15 < v20)
LABEL_66:
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v15 - v20 >= v18)
            v22 = v18;
          else
            v22 = v15 - v20;
          a2 = (const void **)*a2;
        }
        else
        {
          if (v18 == -1)
            goto LABEL_66;
          v19 = v14 >= v20;
          v21 = v14 - v20;
          if (!v19)
            goto LABEL_66;
          if (v21 >= v18)
            v22 = v18;
          else
            v22 = v21;
        }
        if ((v27 & 0x80u) == 0)
          v23 = v26;
        else
          v23 = (void **)v26[0];
        v24 = memcmp((char *)a2 + v20, v23, v22);
        v7 = v22 == v18 && v24 == 0;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v30 & 0x80) == 0)
            return v7;
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v26[0]);
        goto LABEL_39;
      }
    }
    else if (v6 != -1)
    {
      if (v3 >= v6)
        v8 = v6;
      else
        v8 = *((unsigned __int8 *)a2 + 23);
      v9 = a2;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v6 = v30;
  if (v4 >= v30)
    goto LABEL_9;
  return 0;
}

void sub_1ADE1ACA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::WordpieceV2LmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  std::string::size_type v5;
  char v6;
  uint64_t v7;
  std::string __p;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      std::operator+<char>();
      v4 = std::string::append(&__p, "_S/");
      v5 = v4->__r_.__value_.__r.__words[0];
      v9[0] = v4->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v9 + 7) = *(std::string::size_type *)((char *)&v4->__r_.__value_.__r.__words[1] + 7);
      v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      v7 = v9[0];
      *(_QWORD *)v2 = v5;
      *(_QWORD *)(v2 + 8) = v7;
      *(_QWORD *)(v2 + 15) = *(_QWORD *)((char *)v9 + 7);
      *(_BYTE *)(v2 + 23) = v6;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_1ADE1ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::WordpieceV1LmeSymbolFormat::~WordpieceV1LmeSymbolFormat(kaldi::quasar::WordpieceV1LmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

BOOL kaldi::quasar::WordpieceV1LmeSymbolFormat::IsWordPhoneOrDisambigSym(uint64_t a1, uint64_t **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  size_t v7;
  unint64_t v8;
  _BOOL8 v9;
  BOOL v11;
  size_t v12;
  size_t v13;
  void **v15;
  int v16;
  void *__p[2];
  unsigned __int8 v19;

  std::string::basic_string[abi:ne180100]<0>(__p, "\\bpe");
  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (unint64_t)a2[1];
  if ((v3 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (unint64_t)a2[1];
  v6 = (char)v19;
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (size_t)__p[1];
  v11 = v5 >= v7;
  v8 = v5 - v7;
  if (v11)
  {
    if ((v3 & 0x80) != 0)
    {
      if (v7 == -1 || v4 < v8)
LABEL_40:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v4 - v8 >= v7)
        v13 = v7;
      else
        v13 = v4 - v8;
      a2 = (uint64_t **)*a2;
    }
    else
    {
      v11 = v7 != -1 && v3 >= v8;
      if (!v11)
        goto LABEL_40;
      v12 = v3 - v8;
      if (v12 >= v7)
        v13 = v7;
      else
        v13 = v12;
    }
    if ((v19 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v16 = memcmp((char *)a2 + v8, v15, v13);
    v9 = v13 == v7 && v16 == 0;
    if (v6 < 0)
      goto LABEL_9;
    return v9;
  }
  v9 = 0;
  if ((char)v19 < 0)
LABEL_9:
    operator delete(__p[0]);
  return v9;
}

BOOL kaldi::quasar::WordpieceV1LmeSymbolFormat::IsDisambigSym(uint64_t a1, const void **a2)
{
  size_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  size_t v6;
  _BOOL8 v7;
  size_t v8;
  const void **v9;
  const void *p_p;
  int v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  size_t v21;
  size_t v22;
  void **v23;
  int v24;
  void *v26[2];
  unsigned __int8 v27;
  void *__p;
  unint64_t v29;
  unsigned __int8 v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "disambig-");
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (unint64_t)a2[1];
  v5 = v30;
  if ((char)v30 < 0)
  {
    v6 = v29;
    if (v4 < v29)
    {
      v7 = 0;
      goto LABEL_28;
    }
LABEL_9:
    if ((v3 & 0x80) != 0)
    {
      if (v6 != -1)
      {
        if ((unint64_t)a2[1] >= v6)
          v8 = v6;
        else
          v8 = (size_t)a2[1];
        v9 = (const void **)*a2;
LABEL_20:
        if ((v30 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        v11 = memcmp(v9, p_p, v8);
        if (v8 != v6 || v11 != 0)
        {
          v7 = 0;
          if ((v5 & 0x80) == 0)
            return v7;
LABEL_28:
          operator delete(__p);
          return v7;
        }
        std::string::basic_string[abi:ne180100]<0>(v26, "\\bpe");
        v14 = *((unsigned __int8 *)a2 + 23);
        v15 = (unint64_t)a2[1];
        if ((v14 & 0x80u) == 0)
          v16 = *((unsigned __int8 *)a2 + 23);
        else
          v16 = (unint64_t)a2[1];
        v17 = (char)v27;
        if ((v27 & 0x80u) == 0)
          v18 = v27;
        else
          v18 = (size_t)v26[1];
        v19 = v16 >= v18;
        v20 = v16 - v18;
        if (!v19)
        {
          v7 = 0;
          if (((char)v27 & 0x80000000) == 0)
            goto LABEL_39;
          goto LABEL_38;
        }
        if ((v14 & 0x80) != 0)
        {
          if (v18 == -1 || v15 < v20)
LABEL_66:
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v15 - v20 >= v18)
            v22 = v18;
          else
            v22 = v15 - v20;
          a2 = (const void **)*a2;
        }
        else
        {
          if (v18 == -1)
            goto LABEL_66;
          v19 = v14 >= v20;
          v21 = v14 - v20;
          if (!v19)
            goto LABEL_66;
          if (v21 >= v18)
            v22 = v18;
          else
            v22 = v21;
        }
        if ((v27 & 0x80u) == 0)
          v23 = v26;
        else
          v23 = (void **)v26[0];
        v24 = memcmp((char *)a2 + v20, v23, v22);
        v7 = v22 == v18 && v24 == 0;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v30 & 0x80) == 0)
            return v7;
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v26[0]);
        goto LABEL_39;
      }
    }
    else if (v6 != -1)
    {
      if (v3 >= v6)
        v8 = v6;
      else
        v8 = *((unsigned __int8 *)a2 + 23);
      v9 = a2;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v6 = v30;
  if (v4 >= v30)
    goto LABEL_9;
  return 0;
}

void sub_1ADE1B0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *kaldi::quasar::WordpieceV1LmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, std::string **a2)
{
  std::string *v2;
  std::string *v3;
  std::string *result;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
      result = std::string::append(v2++, "\\bpe");
    while (v2 != v3);
  }
  return result;
}

void kaldi::quasar::BILmeSymbolFormat::~BILmeSymbolFormat(kaldi::quasar::BILmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

BOOL kaldi::quasar::OriginalLmeSymbolFormatBase::IsWordPhoneOrDisambigSym(int a1, std::string *this)
{
  std::string::size_type size;
  std::string::size_type v4;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size < 3 || *std::string::at(this, 0) != 47)
    return 0;
  v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80u) != 0)
    v4 = this->__r_.__value_.__l.__size_;
  return *std::string::at(this, v4 - 1) == 47;
}

BOOL kaldi::quasar::OriginalLmeSymbolFormatBase::IsDisambigSym(uint64_t a1, const void **a2)
{
  size_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  size_t v6;
  _BOOL8 v7;
  void *v8;
  size_t v9;
  const void *v10;
  const void *p_p;
  int v12;
  char *v14;
  void *__p;
  unint64_t v17;
  unsigned __int8 v18;

  std::string::basic_string[abi:ne180100]<0>(&__p, "/WORD-DIS-");
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (unint64_t)a2[1];
  v5 = v18;
  if ((char)v18 < 0)
  {
    v6 = v17;
    if (v4 < v17)
    {
      v7 = 0;
      v8 = __p;
      goto LABEL_33;
    }
  }
  else
  {
    v6 = v18;
    if (v4 < v18)
      return 0;
  }
  v8 = __p;
  if ((v3 & 0x80) == 0)
  {
    if (v6 != -1)
    {
      if (v3 >= v6)
        v9 = v6;
      else
        v9 = *((unsigned __int8 *)a2 + 23);
      v10 = a2;
      goto LABEL_20;
    }
LABEL_35:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v6 == -1)
    goto LABEL_35;
  if ((unint64_t)a2[1] >= v6)
    v9 = v6;
  else
    v9 = (size_t)a2[1];
  v10 = *a2;
LABEL_20:
  if ((v18 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  v12 = memcmp(v10, p_p, v9);
  if (v9 != v6 || v12 != 0)
  {
    v7 = 0;
    if ((v5 & 0x80) == 0)
      return v7;
LABEL_33:
    operator delete(v8);
    return v7;
  }
  if ((v3 & 0x80u) == 0)
    v14 = (char *)a2;
  else
    v14 = (char *)*a2;
  v7 = v14[v4 - 1] == 47;
  if ((v5 & 0x80) != 0)
    goto LABEL_33;
  return v7;
}

void kaldi::quasar::BILmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string __p;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if (v4)
      {
        std::operator+<char>();
        v5 = std::string::append(&__p, "_I/");
        v6 = v5->__r_.__value_.__r.__words[0];
        v12[0] = v5->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
        v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v4)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v8 = *a2 + v3;
      }
      else
      {
        std::operator+<char>();
        v9 = std::string::append(&__p, "_B/");
        v6 = v9->__r_.__value_.__r.__words[0];
        v12[0] = v9->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
        v7 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        v8 = *a2;
        if (a2[1] == *a2)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(char *)(v8 + 23) < 0)
        operator delete(*(void **)v8);
      v10 = v12[0];
      *(_QWORD *)v8 = v6;
      *(_QWORD *)(v8 + 8) = v10;
      *(_QWORD *)(v8 + 15) = *(_QWORD *)((char *)v12 + 7);
      *(_BYTE *)(v8 + 23) = v7;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v4;
      v3 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v4);
  }
}

void sub_1ADE1B4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (v15 < 0)
    operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BIESLmeSymbolFormat::~BIESLmeSymbolFormat(kaldi::quasar::BIESLmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::BIESLmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  std::string __p;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  if (v4 - v3 == 24)
  {
    std::operator+<char>();
    v6 = std::string::append(&__p, "_S/");
    v7 = v6->__r_.__value_.__r.__words[0];
    v27[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v9 = *a2;
    if (a2[1] == *a2)
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    v10 = v27[0];
    *(_QWORD *)v9 = v7;
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 15) = *(_QWORD *)((char *)v27 + 7);
    *(_BYTE *)(v9 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v4 != v3)
  {
    v11 = 0;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
    do
    {
      if (v11)
      {
        v13 = v11 + 1;
        if (v12 == v11 + 1)
        {
          std::operator+<char>();
          v14 = std::string::append(&__p, "_E/");
          v15 = v14->__r_.__value_.__r.__words[0];
          v27[0] = v14->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
          v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          v17 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v11)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          std::operator+<char>();
          v23 = std::string::append(&__p, "_I/");
          v15 = v23->__r_.__value_.__r.__words[0];
          v27[0] = v23->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
          v16 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          v17 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v11)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        v24 = v17 + 24 * v11;
        if (*(char *)(v24 + 23) < 0)
          operator delete(*(void **)v24);
        v25 = v27[0];
        *(_QWORD *)v24 = v15;
        *(_QWORD *)(v24 + 8) = v25;
        *(_QWORD *)(v24 + 15) = *(_QWORD *)((char *)v27 + 7);
        *(_BYTE *)(v24 + 23) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        std::operator+<char>();
        v18 = std::string::append(&__p, "_B/");
        v19 = v18->__r_.__value_.__r.__words[0];
        v27[0] = v18->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v21 = *a2;
        if (a2[1] == *a2)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        if (*(char *)(v21 + 23) < 0)
          operator delete(*(void **)v21);
        v22 = v27[0];
        *(_QWORD *)v21 = v19;
        *(_QWORD *)(v21 + 8) = v22;
        *(_QWORD *)(v21 + 15) = *(_QWORD *)((char *)v27 + 7);
        *(_BYTE *)(v21 + 23) = v20;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v13 = 1;
      }
      v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      v11 = v13;
    }
    while (v12 > v13);
  }
}

void sub_1ADE1B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (v15 < 0)
    operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADE1B8A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADE1BA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<quasar::LmePackedWord>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>(this + 1, *((__int128 ***)a2 + 3), *((__int128 ***)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1ADE1BAB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::vector<quasar::LmePackedWord>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADE1BB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::LmePackedWord>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * (v6[1] - *v6));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE1BBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*,quasar::LmePackedWord*,quasar::LmePackedWord*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADE1BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*,quasar::LmePackedWord*,quasar::LmePackedWord*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::LmePackedWord>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(v7, v4, v6);
      v6 += 5;
      v4 = (std::string *)((char *)v12 + 80);
      v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADE1BD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::LmePackedWord>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  int v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_DWORD *)a3 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((_QWORD *)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 1);
}

void sub_1ADE1BDE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>(uint64_t **a1, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_1ADE1BF88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADE1BFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_hint_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_hint_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::vector<std::vector<std::string>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<std::string>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADE1C1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::Lexicon  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_pointer<quasar::Lexicon  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<quasar::Lexicon>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<quasar::Lexicon  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar7LexiconENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x180uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar7LexiconENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADE1C260(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar7LexiconENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42250;
  a1[1] = 0;
  kaldi::quasar::Lexicon::Lexicon((kaldi::quasar::Lexicon *)(a1 + 3));
  return a1;
}

void sub_1ADE1C2AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::Lexicon *kaldi::quasar::Lexicon::Lexicon(kaldi::quasar::Lexicon *this)
{
  _QWORD *v2;
  uint64_t v3;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = off_1E5D340C8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_DWORD *)this + 12) = 0;
  *(_DWORD *)((char *)this + 51) = 0;
  v2 = (_QWORD *)operator new();
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_DWORD *)(v3 + 72) = 1065353216;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 88) = -1;
  *v2 = v3;
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 1065353216;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_DWORD *)this + 86) = 1065353216;
  *((_BYTE *)this + 352) = 1;
  return this;
}

void sub_1ADE1C3D0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,void>@<X0>(uint64_t *a1@<X1>, _QWORD **a2@<X2>, uint64_t *a3@<X3>, unsigned __int8 *a4@<X4>, unsigned __int8 *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADE1C540(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(_QWORD *a1, uint64_t *a2, _QWORD **a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  char v8;

  a1[2] = 0;
  *a1 = &unk_1E5D42218;
  a1[1] = 0;
  std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &>((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1ADE1C5B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<kaldi::quasar::LmeFst>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD **a4, uint64_t *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  std::string::basic_string[abi:ne180100]<0>(v15, "sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "^20");
  kaldi::quasar::LmeFst::LmeFst(a2, v8, v9, v10, v11 != 0, v12 != 0, (__int128 *)v15, 32, (__int128 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_1ADE1C6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::LmeFst::LmeFst(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5, char a6, __int128 *a7, uint64_t a8, __int128 *a9)
{
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  int v19;
  const std::string::value_type *v20;
  uint64_t v21;
  _QWORD *v22;
  void *__p;
  char v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = &off_1E5D1AD68;
  v15 = a3[1];
  *(_QWORD *)(a1 + 48) = v15;
  ++*(_DWORD *)(v15 + 168);
  *(_BYTE *)(a1 + 56) = a6;
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v16 = *a7;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a7 + 2);
    *(_OWORD *)(a1 + 64) = v16;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 88) = a8;
  *(_QWORD *)(a1 + 104) = 0x100000000;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = a5;
  *(_QWORD *)(a1 + 184) = a4;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 192));
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 208), *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v17 = *a9;
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a9 + 2);
    *(_OWORD *)(a1 + 208) = v17;
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/", 1);
  v19 = *((char *)a7 + 23);
  if (v19 >= 0)
    v20 = (const std::string::value_type *)a7;
  else
    v20 = *(const std::string::value_type **)a7;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)a7 + 23);
  else
    v21 = *((_QWORD *)a7 + 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"_I/", 3);
  std::stringbuf::str();
  *(_QWORD *)(a1 + 96) = (*(uint64_t (**)(_QWORD *, void **))(*a3 + 96))(a3, &__p);
  if (v25 < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 256) = 0;
  v26[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v26[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v28);
  return a1;
}

void sub_1ADE1C964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;
  fst::SymbolTable *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  fst::SymbolTable *v21;

  fst::SymbolTable::~SymbolTable(v21);
  std::__tree<std::string>::destroy(v20, *(char **)(v16 + 160));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v19);
  if (*(char *)(v16 + 87) < 0)
    operator delete(*v18);
  fst::SymbolTable::~SymbolTable(v17);
  a16 = v16;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::LmeFst>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  std::__tree<std::string>::destroy(a2 + 232, *(char **)(a2 + 240));
  if (*(char *)(a2 + 231) < 0)
    operator delete(*(void **)(a2 + 208));
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)(a2 + 192));
  std::__tree<std::string>::destroy(a2 + 152, *(char **)(a2 + 160));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 112);
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)(a2 + 40));
  v3 = (void **)a2;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,int>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,int>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_1ADE1CAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  *((_DWORD *)v7 + 10) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1ADE1CBA0(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,fst::SymbolTable const&,quasar::TextEncoding,void>@<X0>(uint64_t a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable const&,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1ADE1CC08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable const&,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D43328;
  v5 = *a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = operator new(0x28uLL);
  v6[2] = 0;
  *v6 = &unk_1E5D40EA0;
  v6[1] = 0;
  v6[3] = &off_1E5D1AD68;
  v7 = *(_QWORD *)(a2 + 8);
  v6[4] = v7;
  ++*(_DWORD *)(v7 + 168);
  *(_QWORD *)(a1 + 120) = v6 + 3;
  *(_QWORD *)(a1 + 128) = v6;
  *(_DWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_1ADE1CCD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v21[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(v7, v9);
  v11 = &v10[80 * v4];
  v21[0] = v10;
  v21[1] = v11;
  v21[3] = &v10[80 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  v15 = (_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 64);
  *((_QWORD *)v11 + 8) = v16;
  v17 = v11 + 64;
  v18 = *(_QWORD *)(a2 + 72);
  *((_QWORD *)v11 + 9) = v18;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)(a2 + 56) = v15;
    *v15 = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  else
  {
    *((_QWORD *)v11 + 7) = v17;
  }
  v21[2] = v11 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, v21);
  v19 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(v21);
  return v19;
}

void sub_1ADE1CE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::CompoundLmeEnumerationsProcessor::CompoundLmeEnumerationsProcessor(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[2];
  int v18;

  *(_QWORD *)a1 = &unk_1E5D3AE48;
  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 40) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 56) = a2[6];
  v6 = a2[7];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *((_OWORD *)a2 + 4);
  v10 = *((_OWORD *)a2 + 5);
  v11 = *((_OWORD *)a2 + 6);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 128) = 0;
  std::vector<std::vector<std::vector<std::string>>>::vector((_QWORD *)(a1 + 136), 1uLL);
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  v12 = operator new();
  kaldi::quasar::Lexicon::Lexicon(v12, v17, 1, 0);
  v13 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v17);
  kaldi::quasar::Lexicon::SetPronView(*(_QWORD *)(a1 + 128), 0, 0);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  kaldi::quasar::Lexicon::MergePhoneSet(v14, v15);
  return a1;
}

void sub_1ADE1CF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  quasar::Bitmap *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x1AF44D190](v11, 0x10A1C40C81CB56BLL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  v13 = *((_QWORD *)v9 + 16);
  *((_QWORD *)v9 + 16) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10);
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

void quasar::CompoundLmeEnumerationsProcessor::~CompoundLmeEnumerationsProcessor(quasar::CompoundLmeEnumerationsProcessor *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D3AE48;
  v3 = (void **)((char *)this + 136);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D3AE48;
  v3 = (void **)((char *)this + 136);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  quasar::Bitmap::~Bitmap(this);
  MEMORY[0x1AF44D190]();
}

std::vector<std::wstring> *quasar::CompoundLmeEnumerationsProcessor::add(uint64_t a1, quasar::LmeDataFactory **a2, __int128 ***a3)
{
  quasar::LmeDataFactory *v5;
  quasar::LmeDataFactory *v6;

  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    quasar::LmeDataFactory::addWordToPronLexicon(v5, *(const quasar::LmeDataFactoryBase::Word **)(a1 + 128), (kaldi::quasar::Lexicon *)a3);
    v5 = (quasar::LmeDataFactory *)((char *)v5 + 80);
  }
  return std::vector<std::vector<std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::string> const*>,std::__wrap_iter<std::vector<std::string> const*>>(*(uint64_t **)(a1 + 136), *(std::vector<std::wstring> **)(*(_QWORD *)(a1 + 136) + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
}

void quasar::CompoundLmeEnumerationsProcessor::buildFst(quasar::CompoundLmeEnumerationsProcessor *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  kaldi::quasar::LmeFst *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t NumberOfFsts;
  _BYTE *v10;
  uint64_t Fst;
  _QWORD *v12;
  uint64_t v13;
  uint64_t LmeSymbols;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  int v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned __int8 v30;
  kaldi::quasar::LmeFst *v31;
  std::__shared_weak_count *v32;
  unsigned __int8 v33;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = -1;
  v33 = 1;
  v4 = (void *)*((_QWORD *)this + 2);
  __p[0] = *((void **)this + 1);
  v27 = v4;
  v30 = 0;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,void>((uint64_t *)__p, (_QWORD **)&v27, (uint64_t *)this + 10, &v30, &v33, &v31);
  kaldi::quasar::LmeFst::SetMaxAllowedProns((uint64_t)v31, *((unsigned int *)this + 18));
  v5 = v31;
  std::string::basic_string[abi:ne180100]<0>(__p, "~w00");
  kaldi::quasar::LmeFst::SetWordBoundary((uint64_t)v5, (const std::string *)__p);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  kaldi::quasar::LmeFst::SetClassSizeCost((uint64_t)v31, *((float *)this + 22), *((float *)this + 23));
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v6 = *((_QWORD *)this + 16);
  v7 = *((_QWORD *)this + 7);
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v26 = 1065353216;
  v8 = kaldi::quasar::LmeFst::CreateFstDirect((uint64_t)v31, (uint64_t *)this + 17, v6, v7, &v27, __p, *((_QWORD *)this + 12), 1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__p);
  if ((v8 & 1) == 0)
  {
    v10 = v27;
    goto LABEL_15;
  }
  NumberOfFsts = kaldi::quasar::LmeFst::GetNumberOfFsts(v31);
  v10 = v27;
  if (NumberOfFsts != 1 || v28 - (_BYTE *)v27 != 8)
  {
LABEL_15:
    if (!v10)
      goto LABEL_17;
    goto LABEL_16;
  }
  Fst = kaldi::quasar::LmeFst::GetFst(v31, 0);
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(Fst + 8);
  v12[1] = v13;
  ++*(_DWORD *)(v13 + 56);
  *v12 = &unk_1E5D28970;
  *(_QWORD *)a2 = v12;
  LmeSymbols = kaldi::quasar::LmeFst::GetLmeSymbols(v31);
  fst::SymbolTable::operator=(*((_QWORD *)this + 12), LmeSymbols);
  v15 = v32;
  v31 = 0;
  v32 = 0;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (char *)*((_QWORD *)this + 17);
  v19 = (char *)*((_QWORD *)this + 18);
  while (v19 != v18)
  {
    v19 -= 24;
    __p[0] = v19;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  *((_QWORD *)this + 18) = v18;
  v23 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
  kaldi::quasar::LmeFst::CompleteFstDirect(*(_QWORD **)a2);
  v10 = v27;
  if (v28 == v27)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v27;
LABEL_16:
  v28 = v10;
  operator delete(v10);
LABEL_17:
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1ADE1D3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  _QWORD *v19;
  uint64_t v20;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20 - 64);
  *v19 = 0;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<std::string>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADE1D4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::vector<std::wstring> *std::vector<std::vector<std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::string> const*>,std::__wrap_iter<std::vector<std::string> const*>>(uint64_t *a1, std::vector<std::wstring> *a2, __int128 **a3, __int128 **a4, uint64_t a5)
{
  std::vector<std::wstring> *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 **v21;
  std::string v23;
  char *v24;
  uint64_t v25;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = &a3[3 * a5];
      }
      else
      {
        v21 = &a3[(uint64_t)(v12 - (_QWORD)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>(v9, v21, a4, *(std::string **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<std::string>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v23, (uint64_t)a3, (uint64_t)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v25 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      else
        v19 = 0;
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)&v19[24 * v15];
      v23.__r_.__value_.__r.__words[2] = v23.__r_.__value_.__l.__size_;
      v24 = &v19[24 * v18];
      std::__split_buffer<std::vector<std::string>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::string> const*>>(&v23, a3, a5);
      v5 = (std::vector<std::wstring> *)std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)&v23.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_1ADE1D6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<std::string>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((uint64_t)&v11, a2, v7, v6);
}

std::string *std::__split_buffer<std::vector<std::string>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::string> const*>>(std::string *result, __int128 **a2, uint64_t a3)
{
  std::string *v3;
  std::string *v4;
  std::string *v6;
  uint64_t v7;

  v3 = result;
  v4 = (std::string *)result->__r_.__value_.__r.__words[2];
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4++, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
      a2 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  return result;
}

void sub_1ADE1D7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE1D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  std::vector<std::wstring> *v6;
  _QWORD *v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = (std::vector<std::wstring> *)(a4 - 24);
    v7 = a3;
    do
    {
      std::vector<std::string>::__vdeallocate(v6);
      v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)&v6->__begin_ = v8;
      v6->__end_cap_.__value_ = (std::wstring *)v7[2];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      --v6;
    }
    while (v7 != a2);
  }
  return a3;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,void>@<X0>(uint64_t *a1@<X1>, _QWORD **a2@<X2>, uint64_t *a3@<X3>, unsigned __int8 *a4@<X4>, unsigned __int8 *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADE1DABC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(_QWORD *a1, uint64_t *a2, _QWORD **a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  char v8;

  a1[2] = 0;
  *a1 = &unk_1E5D42218;
  a1[1] = 0;
  std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &>((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1ADE1DB2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD **a4, uint64_t *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  std::string::basic_string[abi:ne180100]<0>(v15, "sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "^20");
  kaldi::quasar::LmeFst::LmeFst(a2, v8, v9, v10, v11 != 0, v12 != 0, (__int128 *)v15, 32, (__int128 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_1ADE1DC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OriginalSimpleLmeEnumerationsProcessor::OriginalSimpleLmeEnumerationsProcessor(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = off_1E5D3B210;
  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  v5 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 104) = v10;
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  *(_DWORD *)(a1 + 128) = *((unsigned __int8 *)a2 + 16);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)a1 = &unk_1E5D3B5E8;
  quasar::CompoundLmeEnumerationsProcessor::CompoundLmeEnumerationsProcessor(a1 + 176, a2);
  return a1;
}

void sub_1ADE1DCF4(_Unwind_Exception *a1)
{
  quasar::SimpleLmeEnumerationsProcessorBase *v1;

  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(v1);
  _Unwind_Resume(a1);
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::~OriginalSimpleLmeEnumerationsProcessor(quasar::OriginalSimpleLmeEnumerationsProcessor *this)
{
  quasar::Bitmap *v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &unk_1E5D3B5E8;
  *((_QWORD *)this + 22) = &unk_1E5D3AE48;
  v2 = (quasar::OriginalSimpleLmeEnumerationsProcessor *)((char *)this + 176);
  v4 = (void **)((char *)this + 312);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  quasar::Bitmap::~Bitmap(v2);
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(this);
}

{
  quasar::Bitmap *v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &unk_1E5D3B5E8;
  *((_QWORD *)this + 22) = &unk_1E5D3AE48;
  v2 = (quasar::OriginalSimpleLmeEnumerationsProcessor *)((char *)this + 176);
  v4 = (void **)((char *)this + 312);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  quasar::Bitmap::~Bitmap(v2);
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(this);
  MEMORY[0x1AF44D190]();
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::buildFst(quasar::OriginalSimpleLmeEnumerationsProcessor *this@<X0>, uint64_t a2@<X8>)
{
  quasar::CompoundLmeEnumerationsProcessor::buildFst((quasar::OriginalSimpleLmeEnumerationsProcessor *)((char *)this + 176), a2);
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::add(quasar::OriginalSimpleLmeEnumerationsProcessor *this, float a2, const quasar::LmeDataFactoryBase::Word *a3)
{
  uint64_t i;
  std::string *v7;
  std::string *v8;
  __int128 **v9;
  std::string *v10;
  std::string *v11;
  std::string::value_type *v12;
  std::string **v13;
  char v14;
  std::string v15;
  std::string v16;
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::string __p;
  int v21;
  uint64_t v22[3];
  __int128 v23;

  *((_QWORD *)&v23 + 1) = *MEMORY[0x1E0C80C00];
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v19 = *(std::string *)a3;
  if (*((char *)a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  else
    __p = *(std::string *)((_BYTE *)a3 + 1);
  v21 = *((_DWORD *)a3 + 12);
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v22, (uint64_t)a3 + 56);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  v15.__r_.__value_.__s.__data_[8] = 0;
  v10 = (std::string *)operator new(0x50uLL);
  v11 = v10;
  v12 = &v10[3].__r_.__value_.__s.__data_[8];
  v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v12, (__int128 *)&v19, &v23, v10);
  std::to_string(&v15, a2);
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v16 = *(std::string *)a3;
  v17 = 0uLL;
  v18 = 0;
  v13 = (std::string **)&v17;
  v14 = 0;
  *(_QWORD *)&v17 = operator new(0x30uLL);
  *((_QWORD *)&v17 + 1) = v17;
  v18 = v17 + 48;
  *((_QWORD *)&v17 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)&v15, &v17, (std::string *)v17);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v13 = &v7;
  v14 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = (__int128 **)&v7[1];
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>((uint64_t)&v9, (__int128 **)&v17, (__int128 **)&v19, v7);
  quasar::CompoundLmeEnumerationsProcessor::add((uint64_t)this + 176, (quasar::LmeDataFactory **)&v10, (__int128 ***)&v7);
  v13 = &v7;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v13 = (std::string **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v15 + i * 8 + 24));
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v22, (char *)v22[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1ADE1E0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0)
    operator delete(__p);
  __p = &a13;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a30);
  _Unwind_Resume(a1);
}

void sub_1ADE1E178()
{
  JUMPOUT(0x1ADE1E158);
}

void sub_1ADE1E180()
{
  JUMPOUT(0x1ADE1E160);
}

void sub_1ADE1E18C()
{
  JUMPOUT(0x1ADE1E160);
}

void sub_1ADE1E194(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (SHIBYTE(a29) < 0)
    operator delete(a27);
  JUMPOUT(0x1ADE1E170);
}

uint64_t quasar::CompactSimpleLmeEnumerationsProcessor::CompactSimpleLmeEnumerationsProcessor(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[34];

  *(_QWORD *)a1 = off_1E5D3B210;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 6);
  v6 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 128) = *((unsigned __int8 *)a2 + 16);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)a1 = &unk_1E5D3B420;
  if (*((_BYTE *)a2 + 16))
    v12 = " ";
  else
    v12 = ".";
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 176), v12);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v13 = *((_QWORD *)a2 + 4);
  if (v13 < 1 || (v14 = *((_QWORD *)a2 + 5), v14 < 1) || v13 > v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(params.disambigSymStart > 0) && (params.disambigSymEnd > 0) && (params.disambigSymStart <= params.disambigSymEnd)", 114);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  return a1;
}

void sub_1ADE1E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v12 = *(void **)(v9 + 344);
  if (v12)
  {
    *(_QWORD *)(v9 + 352) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(v9 + 320);
  if (v13)
  {
    *(_QWORD *)(v9 + 328) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v9 + 296);
  if (v14)
  {
    *(_QWORD *)(v9 + 304) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v9 + 272);
  if (v15)
  {
    *(_QWORD *)(v9 + 280) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(v9 + 248);
  if (v16)
  {
    *(_QWORD *)(v9 + 256) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(v9 + 224);
  if (v17)
  {
    *(_QWORD *)(v9 + 232) = v17;
    operator delete(v17);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 199) < 0)
    operator delete(*v10);
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase((quasar::SimpleLmeEnumerationsProcessorBase *)v9);
  _Unwind_Resume(a1);
}

void quasar::CompactSimpleLmeEnumerationsProcessor::~CompactSimpleLmeEnumerationsProcessor(quasar::CompactSimpleLmeEnumerationsProcessor *this)
{
  quasar::CompactSimpleLmeEnumerationsProcessor::~CompactSimpleLmeEnumerationsProcessor(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(_QWORD *)this = &unk_1E5D3B420;
  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
  {
    *((_QWORD *)this + 44) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 40);
  if (v3)
  {
    *((_QWORD *)this + 41) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 37);
  if (v4)
  {
    *((_QWORD *)this + 38) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 34);
  if (v5)
  {
    *((_QWORD *)this + 35) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 31);
  if (v6)
  {
    *((_QWORD *)this + 32) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 28);
  if (v7)
  {
    *((_QWORD *)this + 29) = v7;
    operator delete(v7);
  }
  v8 = (void **)((char *)this + 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(this);
}

void quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(quasar::CompactSimpleLmeEnumerationsProcessor *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int *v12;
  int *v13;
  float v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  _BYTE *v26;
  char *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  float v41;
  float v42;
  float v43;
  _QWORD *v44;
  _QWORD *v45;
  void *__p;
  char *v47;
  char *v48;
  kaldi::quasar::LmeTrie *v49;

  *a2 = 0;
  a2[1] = -1;
  kaldi::quasar::LmeFstBuilderCompact::LmeFstBuilderCompact((kaldi::quasar::LmeFstBuilderCompact *)&v49, *((_DWORD *)this + 10), *((_DWORD *)this + 12), *((_BYTE *)this + 104));
  v4 = *((_QWORD *)this + 31);
  v5 = (int *)*((_QWORD *)this + 32);
  v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 2);
  __p = this;
  if (v5 == (int *)v4)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,false>(v4, v5, (uint64_t *)&__p, v7, 1);
  v45 = a2;
  v8 = *((float *)this + 42);
  if (v8 == 0.0)
  {
    *((_DWORD *)this + 42) = 1065353216;
    v8 = 1.0;
  }
  v9 = *((float *)this + 22);
  v10 = *((float *)this + 23);
  v11 = logf(v8);
  v12 = (int *)*((_QWORD *)this + 31);
  v13 = (int *)*((_QWORD *)this + 32);
  if (v12 != v13)
  {
    v14 = v9 + (1.0 - v10) * v11;
    do
    {
      v15 = *v12;
      v16 = *((_QWORD *)this + 12);
      v17 = *(_DWORD *)(*((_QWORD *)this + 28) + 4 * v15);
      v18 = *((_QWORD *)this + 25);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 112))(v16);
      if (*((_QWORD *)this + 10) <= v19)
        v20 = v19;
      else
        v20 = *((_QWORD *)this + 10);
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v18 + 24 * v17, v20);
      v22 = *((_QWORD *)this + 34);
      if (v15 >= (*((_QWORD *)this + 35) - v22) >> 2
        || (v23 = *((_QWORD *)this + 37), v15 >= (*((_QWORD *)this + 38) - v23) >> 2))
      {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      v24 = v21;
      v25 = logf(*(float *)(v22 + 4 * v15));
      v26 = 0;
      v27 = 0;
      v28 = *(float *)(v23 + 4 * v15);
      v29 = *(int *)(*((_QWORD *)this + 43) + 4 * v15);
      __p = 0;
      v47 = 0;
      v48 = 0;
      v30 = *((_QWORD *)this + 40);
      if (v29 < (*((_QWORD *)this + 41) - v30) >> 2)
      {
        v31 = 0;
        while (1)
        {
          v32 = *(_DWORD *)(v30 + 4 * v29);
          if (!v32)
            break;
          if (v31 >= v48)
          {
            v33 = (char *)__p;
            v34 = (v31 - (_BYTE *)__p) >> 2;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v36 = v48 - (_BYTE *)__p;
            if ((v48 - (_BYTE *)__p) >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v48, v37);
              v33 = (char *)__p;
              v31 = v47;
              v32 = *(_DWORD *)(v30 + 4 * v29);
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * v34];
            *(_DWORD *)v39 = v32;
            v27 = v39 + 4;
            while (v31 != v33)
            {
              v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            __p = v39;
            v47 = v27;
            v48 = &v38[4 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v31 = v32;
            v27 = v31 + 4;
          }
          v47 = v27;
          ++v29;
          v30 = *((_QWORD *)this + 40);
          v31 = v27;
          if (v29 >= (*((_QWORD *)this + 41) - v30) >> 2)
            goto LABEL_35;
        }
        v27 = v31;
LABEL_35:
        v26 = __p;
      }
      v41 = v28 + (float)(v14 - v25);
      v42 = (float)(unint64_t)((v27 - v26) >> 2);
      v43 = *((float *)this + 28);
      if (v43 < v42)
        v41 = v41 + (float)((float)(v42 - v43) * *((float *)this + 27));
      kaldi::quasar::LmeFstBuilderCompact::AddPath((uint64_t *)&v49, (uint64_t)&__p, v24, v41);
      if (__p)
      {
        v47 = (char *)__p;
        operator delete(__p);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  *((_QWORD *)this + 41) = *((_QWORD *)this + 40);
  std::vector<int>::shrink_to_fit((std::vector<int> *)((char *)this + 320));
  v44 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v44);
  *v45 = v44;
  LODWORD(__p) = 0;
  kaldi::quasar::LmeFstBuilderCompact::GetFinalLmeFst(&v49, v44, &__p);
  *((_DWORD *)v45 + 3) = (_DWORD)__p;
  kaldi::quasar::LmeFstBuilderCompact::~LmeFstBuilderCompact(&v49);
}

void sub_1ADE1E750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  kaldi::quasar::LmeFstBuilderCompact::~LmeFstBuilderCompact((kaldi::quasar::LmeTrie **)va);
  *v8 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void quasar::CompactSimpleLmeEnumerationsProcessor::add(quasar::CompactSimpleLmeEnumerationsProcessor *this, float a2, const quasar::LmeDataFactoryBase::Word *a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  float *v54;
  float *v55;
  float *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  float *v62;
  int v63;
  unint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  std::vector<int>::pointer begin;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  int v86;
  unint64_t v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  const quasar::LmeDataFactoryBase::Word *v103;
  _QWORD *v104;
  _QWORD *v105;
  BOOL v106;
  void **v107;
  void **v108;
  void **v109;
  void **v110;
  unint64_t v111;
  std::vector<int> *v112;
  _QWORD *v113;
  _OWORD v114[17];
  char *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v7 = *((_QWORD *)this + 25);
  v8 = *((_QWORD *)this + 26);
  v6 = (uint64_t *)((char *)this + 200);
  if (v8 >= v6[2])
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, (__int128 *)a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, (__int128 *)a3);
    v9 = v8 + 24;
  }
  *((_QWORD *)this + 26) = v9;
  quasar::Bitmap::~Bitmap((const quasar::LmeDataFactoryBase::Word *)((char *)a3 + 56));
  v11 = (_QWORD *)*v10;
  v113 = v10 + 1;
  if ((_QWORD *)*v10 != v10 + 1)
  {
    v110 = (void **)((char *)this + 224);
    v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v7) >> 3);
    v112 = (std::vector<int> *)((char *)this + 320);
    v108 = (void **)((char *)this + 272);
    v109 = (void **)((char *)this + 344);
    v107 = (void **)((char *)this + 296);
    do
    {
      quasar::splitAndTrimNoEmpty((const std::string *)(v11 + 5), (char *)this + 176, &v118);
      v115 = 0;
      v116 = 0;
      v117 = 0;
      (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4), &v118);
      v13 = v118;
      v12 = v119;
      while (v13 != v12)
      {
        v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2), v13);
        v15 = v14;
        if (v14 < 1 || *((_QWORD *)this + 5) <= v14 && *((_QWORD *)this + 6) >= v14)
        {
          if (quasar::gLogLevel >= 5)
          {
            memset(v114, 0, sizeof(v114));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v114);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Skipping bad unit ", 18);
            v27 = *(char *)(v13 + 23);
            if (v27 >= 0)
              v28 = v13;
            else
              v28 = *(_QWORD *)v13;
            if (v27 >= 0)
              v29 = *(unsigned __int8 *)(v13 + 23);
            else
              v29 = *(_QWORD *)(v13 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v114);
          }
          break;
        }
        v16 = v116;
        if ((unint64_t)v116 >= v117)
        {
          v18 = v115;
          v19 = (v116 - v115) >> 2;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v21 = v117 - (_QWORD)v115;
          if ((uint64_t)(v117 - (_QWORD)v115) >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v22);
            v18 = v115;
            v16 = v116;
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[4 * v19];
          *(_DWORD *)v24 = v15;
          v17 = v24 + 4;
          while (v16 != v18)
          {
            v25 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          v115 = v24;
          v116 = v17;
          v117 = (unint64_t)&v23[4 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_DWORD *)v116 = v14;
          v17 = v16 + 4;
        }
        v116 = v17;
        v13 += 24;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v119 - v118) >> 3) == (v116 - v115) >> 2)
      {
        v31 = (char *)*((_QWORD *)this + 29);
        v30 = *((_QWORD *)this + 30);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v110;
          v34 = (v31 - (_BYTE *)*v110) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 240, v37);
            v33 = (char *)*((_QWORD *)this + 28);
            v31 = (char *)*((_QWORD *)this + 29);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v111;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *((_QWORD *)this + 28) = v39;
          *((_QWORD *)this + 29) = v32;
          *((_QWORD *)this + 30) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = v111;
          v32 = v31 + 4;
        }
        *((_QWORD *)this + 29) = v32;
        v41 = (*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 2;
        v43 = (char *)*((_QWORD *)this + 44);
        v42 = *((_QWORD *)this + 45);
        if ((unint64_t)v43 >= v42)
        {
          v45 = (char *)*v109;
          v46 = (v43 - (_BYTE *)*v109) >> 2;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v48 = v42 - (_QWORD)v45;
          if (v48 >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 360, v49);
            v45 = (char *)*((_QWORD *)this + 43);
            v43 = (char *)*((_QWORD *)this + 44);
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[4 * v46];
          *(_DWORD *)v51 = v41;
          v44 = v51 + 4;
          while (v43 != v45)
          {
            v52 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          *((_QWORD *)this + 43) = v51;
          *((_QWORD *)this + 44) = v44;
          *((_QWORD *)this + 45) = &v50[4 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_DWORD *)v43 = v41;
          v44 = v43 + 4;
        }
        *((_QWORD *)this + 44) = v44;
        v54 = (float *)*((_QWORD *)this + 35);
        v53 = *((_QWORD *)this + 36);
        if ((unint64_t)v54 >= v53)
        {
          v56 = (float *)*v108;
          v57 = ((char *)v54 - (_BYTE *)*v108) >> 2;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v59 = v53 - (_QWORD)v56;
          if (v59 >> 1 > v58)
            v58 = v59 >> 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
            v60 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 288, v60);
            v56 = (float *)*((_QWORD *)this + 34);
            v54 = (float *)*((_QWORD *)this + 35);
          }
          else
          {
            v61 = 0;
          }
          v62 = (float *)&v61[4 * v57];
          *v62 = a2;
          v55 = v62 + 1;
          while (v54 != v56)
          {
            v63 = *((_DWORD *)v54-- - 1);
            *((_DWORD *)v62-- - 1) = v63;
          }
          *((_QWORD *)this + 34) = v62;
          *((_QWORD *)this + 35) = v55;
          *((_QWORD *)this + 36) = &v61[4 * v60];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v54 = a2;
          v55 = v54 + 1;
        }
        *((_QWORD *)this + 35) = v55;
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v112, *((_QWORD *)this + 41), v115, v116, (v116 - v115) >> 2);
        v65 = (_DWORD *)*((_QWORD *)this + 41);
        v64 = *((_QWORD *)this + 42);
        if ((unint64_t)v65 >= v64)
        {
          begin = v112->__begin_;
          v68 = v65 - v112->__begin_;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v70 = v64 - (_QWORD)begin;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 336, v71);
            begin = (std::vector<int>::pointer)*((_QWORD *)this + 40);
            v65 = (_DWORD *)*((_QWORD *)this + 41);
          }
          else
          {
            v72 = 0;
          }
          v73 = &v72[4 * v68];
          *(_DWORD *)v73 = 0;
          v66 = v73 + 4;
          while (v65 != begin)
          {
            v74 = *--v65;
            *((_DWORD *)v73 - 1) = v74;
            v73 -= 4;
          }
          *((_QWORD *)this + 40) = v73;
          *((_QWORD *)this + 41) = v66;
          *((_QWORD *)this + 42) = &v72[4 * v71];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v65 = 0;
          v66 = v65 + 1;
        }
        *((_QWORD *)this + 41) = v66;
        v75 = (char *)*((_QWORD *)this + 31);
        v76 = (char *)*((_QWORD *)this + 32);
        v77 = (v76 - v75) >> 2;
        v78 = *((_QWORD *)this + 33);
        if ((unint64_t)v76 >= v78)
        {
          v80 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v81 = v78 - (_QWORD)v75;
          if (v81 >> 1 > v80)
            v80 = v81 >> 1;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
            v82 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v82 = v80;
          if (v82)
          {
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 264, v82);
            v75 = (char *)*((_QWORD *)this + 31);
            v76 = (char *)*((_QWORD *)this + 32);
          }
          else
          {
            v83 = 0;
          }
          v84 = &v83[4 * v77];
          *(_DWORD *)v84 = v77;
          v79 = v84 + 4;
          while (v76 != v75)
          {
            v85 = *((_DWORD *)v76 - 1);
            v76 -= 4;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
          *((_QWORD *)this + 31) = v84;
          *((_QWORD *)this + 32) = v79;
          *((_QWORD *)this + 33) = &v83[4 * v82];
          if (v75)
            operator delete(v75);
        }
        else
        {
          *(_DWORD *)v76 = v77;
          v79 = v76 + 4;
        }
        *((_QWORD *)this + 32) = v79;
        v86 = 0;
        if (*((_DWORD *)v11 + 8) == 2)
          v86 = *((_DWORD *)this + 30);
        v88 = (char *)*((_QWORD *)this + 38);
        v87 = *((_QWORD *)this + 39);
        if ((unint64_t)v88 >= v87)
        {
          v90 = (char *)*v107;
          v91 = (v88 - (_BYTE *)*v107) >> 2;
          v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v93 = v87 - (_QWORD)v90;
          if (v93 >> 1 > v92)
            v92 = v93 >> 1;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
            v94 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v94 = v92;
          if (v94)
          {
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 312, v94);
            v90 = (char *)*((_QWORD *)this + 37);
            v88 = (char *)*((_QWORD *)this + 38);
          }
          else
          {
            v95 = 0;
          }
          v96 = &v95[4 * v91];
          *(_DWORD *)v96 = v86;
          v89 = v96 + 4;
          while (v88 != v90)
          {
            v97 = *((_DWORD *)v88 - 1);
            v88 -= 4;
            *((_DWORD *)v96 - 1) = v97;
            v96 -= 4;
          }
          *((_QWORD *)this + 37) = v96;
          *((_QWORD *)this + 38) = v89;
          *((_QWORD *)this + 39) = &v95[4 * v94];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *(_DWORD *)v88 = v86;
          v89 = v88 + 4;
        }
        *((_QWORD *)this + 38) = v89;
        v98 = (unsigned __int8 *)(*((_QWORD *)this + 25) + 24 * *(int *)(*((_QWORD *)this + 28) + 4 * v77));
        v99 = v98[23];
        if ((v99 & 0x80u) == 0)
          v100 = v98[23];
        else
          v100 = *((_QWORD *)v98 + 1);
        v101 = *((unsigned __int8 *)a3 + 23);
        v102 = (char)v101;
        if ((v101 & 0x80u) != 0)
          v101 = *((_QWORD *)a3 + 1);
        if (v100 != v101)
          goto LABEL_159;
        if (v102 >= 0)
          v103 = a3;
        else
          v103 = *(const quasar::LmeDataFactoryBase::Word **)a3;
        if ((v99 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v98, v103, *((_QWORD *)v98 + 1)))
            goto LABEL_159;
        }
        else if (v98[23])
        {
          while (*v98 == *(unsigned __int8 *)v103)
          {
            ++v98;
            v103 = (const quasar::LmeDataFactoryBase::Word *)((char *)v103 + 1);
            if (!--v99)
              goto LABEL_150;
          }
LABEL_159:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"syms[symsOffsets[order]] == word.orthography", 44);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v114);
        }
      }
LABEL_150:
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      *(_QWORD *)&v114[0] = &v118;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
      v104 = (_QWORD *)v11[1];
      if (v104)
      {
        do
        {
          v105 = v104;
          v104 = (_QWORD *)*v104;
        }
        while (v104);
      }
      else
      {
        do
        {
          v105 = (_QWORD *)v11[2];
          v106 = *v105 == (_QWORD)v11;
          v11 = v105;
        }
        while (!v106);
      }
      v11 = v105;
    }
    while (v105 != v113);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  const void **v20;
  int v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  BOOL v29;
  int *v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  const void **v38;
  int v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  const void *v44;
  size_t v45;
  _BOOL4 v46;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v33 = *(a2 - 1);
        v34 = *v9;
        v35 = *(_QWORD *)(*a3 + 224);
        v36 = *(_QWORD *)(*a3 + 200);
        v37 = (const void **)(v36 + 24 * *(int *)(v35 + 4 * v33));
        v38 = (const void **)(v36 + 24 * *(int *)(v35 + 4 * v34));
        v39 = *((char *)v38 + 23);
        v40 = *((char *)v37 + 23);
        if (v40 >= 0)
          v41 = *((unsigned __int8 *)v37 + 23);
        else
          v41 = (size_t)v37[1];
        if (v40 >= 0)
          v42 = v37;
        else
          v42 = *v37;
        if (v39 >= 0)
          v43 = *((unsigned __int8 *)v38 + 23);
        else
          v43 = (size_t)v38[1];
        if (v39 >= 0)
          v44 = v38;
        else
          v44 = *v38;
        if (v43 >= v41)
          v45 = v41;
        else
          v45 = v43;
        result = memcmp(v42, v44, v45);
        v46 = v41 < v43;
        if ((_DWORD)result)
          v46 = (int)result < 0;
        if (v46)
        {
          *v9 = v33;
          *(a2 - 1) = v34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, v9 + 1, a2 - 1, (uint64_t)a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, v9 + 1, v9 + 2, a2 - 1, (uint64_t)a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (uint64_t)a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, a2, (uint64_t)a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, a2, (uint64_t)a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(&v9[v13 >> 1], v9, a2 - 1, (uint64_t)a3);
            if ((a5 & 1) != 0)
              goto LABEL_29;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, &v9[v13 >> 1], a2 - 1, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9 + 1, v15 - 1, a2 - 2, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v15 - 1, v15, &v9[v14 + 1], (uint64_t)a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_29;
          }
          v17 = *(_QWORD *)(*a3 + 224);
          v18 = *(_QWORD *)(*a3 + 200);
          v19 = (const void **)(v18 + 24 * *(int *)(v17 + 4 * *(v9 - 1)));
          v20 = (const void **)(v18 + 24 * *(int *)(v17 + 4 * *v9));
          v21 = *((char *)v20 + 23);
          v22 = *((char *)v19 + 23);
          if (v22 >= 0)
            v23 = *((unsigned __int8 *)v19 + 23);
          else
            v23 = (size_t)v19[1];
          if (v22 >= 0)
            v24 = v19;
          else
            v24 = *v19;
          if (v21 >= 0)
            v25 = *((unsigned __int8 *)v20 + 23);
          else
            v25 = (size_t)v20[1];
          if (v21 >= 0)
            v26 = v20;
          else
            v26 = *v20;
          if (v25 >= v23)
            v27 = v23;
          else
            v27 = v25;
          v28 = memcmp(v24, v26, v27);
          v29 = v23 < v25;
          if (v28)
            v29 = v28 < 0;
          if (!v29)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(v9, a2, (uint64_t)a3);
            v9 = (int *)result;
            goto LABEL_34;
          }
LABEL_29:
          v30 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(v9, a2, (uint64_t)a3);
          if ((v31 & 1) == 0)
            goto LABEL_32;
          v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v9, v30, (uint64_t)a3);
          v9 = v30 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v30 + 1, a2, (uint64_t)a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v32)
              continue;
LABEL_32:
            result = std::__introsort<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,false>(v8, v30, a3, -v11, a5 & 1);
            v9 = v30 + 1;
LABEL_34:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v30;
          if (v32)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *result, int *a2, uint64_t a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  size_t v25;
  const void *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  BOOL v30;
  int *v31;
  uint64_t v33;
  int *v34;

  v34 = result;
  if (result != a2)
  {
    v3 = a2;
    v4 = result + 1;
    if (result + 1 != a2)
    {
      v33 = 0;
      v5 = *(_QWORD *)(*(_QWORD *)a3 + 224);
      v6 = *(_QWORD *)(*(_QWORD *)a3 + 200);
      v7 = result;
      do
      {
        v8 = v7[1];
        v9 = *v7;
        v7 = v4;
        v10 = v6 + 24 * *(int *)(v5 + 4 * v8);
        v11 = v6 + 24 * *(int *)(v5 + 4 * v9);
        v12 = *(char *)(v11 + 23);
        v13 = *(char *)(v10 + 23);
        if (v13 >= 0)
          v14 = *(unsigned __int8 *)(v10 + 23);
        else
          v14 = *(_QWORD *)(v10 + 8);
        if (v13 >= 0)
          v15 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v8));
        else
          v15 = *(const void **)v10;
        if (v12 >= 0)
          v16 = *(unsigned __int8 *)(v11 + 23);
        else
          v16 = *(_QWORD *)(v11 + 8);
        if (v12 >= 0)
          v17 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v9));
        else
          v17 = *(const void **)v11;
        if (v16 >= v14)
          v18 = v14;
        else
          v18 = v16;
        result = (int *)memcmp(v15, v17, v18);
        v19 = v14 < v16;
        if ((_DWORD)result)
          v19 = (int)result < 0;
        if (v19)
        {
          v20 = v33;
          while (1)
          {
            *(int *)((char *)v34 + v20 + 4) = v9;
            if (!v20)
              break;
            v9 = *(int *)((char *)v34 + v20 - 4);
            v21 = v6 + 24 * *(int *)(v5 + 4 * v8);
            v22 = v6 + 24 * *(int *)(v5 + 4 * v9);
            v23 = *(char *)(v22 + 23);
            v24 = *(char *)(v21 + 23);
            if (v24 >= 0)
              v25 = *(unsigned __int8 *)(v21 + 23);
            else
              v25 = *(_QWORD *)(v21 + 8);
            if (v24 >= 0)
              v26 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v8));
            else
              v26 = *(const void **)v21;
            if (v23 >= 0)
              v27 = *(unsigned __int8 *)(v22 + 23);
            else
              v27 = *(_QWORD *)(v22 + 8);
            if (v23 >= 0)
              v28 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v9));
            else
              v28 = *(const void **)v22;
            if (v27 >= v25)
              v29 = v25;
            else
              v29 = v27;
            result = (int *)memcmp(v26, v28, v29);
            v30 = v25 < v27;
            if ((_DWORD)result)
              v30 = (int)result < 0;
            v20 -= 4;
            if (!v30)
            {
              v31 = (int *)((char *)v34 + v20 + 4);
              goto LABEL_44;
            }
          }
          v31 = v34;
LABEL_44:
          v3 = a2;
          *v31 = v8;
        }
        v4 = v7 + 1;
        v33 += 4;
      }
      while (v7 + 1 != v3);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *result, int *a2, uint64_t a3)
{
  int *v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  _BOOL4 v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  size_t v25;
  const void *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  BOOL v30;

  if (result != a2)
  {
    v3 = a2;
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v6 = *(_QWORD *)(*(_QWORD *)a3 + 224);
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 200);
      do
      {
        v8 = v4[1];
        v9 = *v4;
        v4 = v5;
        v10 = v7 + 24 * *(int *)(v6 + 4 * v8);
        v11 = v7 + 24 * *(int *)(v6 + 4 * v9);
        v12 = *(char *)(v11 + 23);
        v13 = *(char *)(v10 + 23);
        if (v13 >= 0)
          v14 = *(unsigned __int8 *)(v10 + 23);
        else
          v14 = *(_QWORD *)(v10 + 8);
        if (v13 >= 0)
          v15 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v8));
        else
          v15 = *(const void **)v10;
        if (v12 >= 0)
          v16 = *(unsigned __int8 *)(v11 + 23);
        else
          v16 = *(_QWORD *)(v11 + 8);
        if (v12 >= 0)
          v17 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v9));
        else
          v17 = *(const void **)v11;
        if (v16 >= v14)
          v18 = v14;
        else
          v18 = v16;
        result = (int *)memcmp(v15, v17, v18);
        v19 = v14 < v16;
        if ((_DWORD)result)
          v19 = (int)result < 0;
        if (v19)
        {
          v20 = v4;
          do
          {
            *v20 = v9;
            v9 = *(v20 - 2);
            v21 = v7 + 24 * *(int *)(v6 + 4 * v8);
            v22 = v7 + 24 * *(int *)(v6 + 4 * v9);
            v23 = *(char *)(v22 + 23);
            v24 = *(char *)(v21 + 23);
            if (v24 >= 0)
              v25 = *(unsigned __int8 *)(v21 + 23);
            else
              v25 = *(_QWORD *)(v21 + 8);
            if (v24 >= 0)
              v26 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v8));
            else
              v26 = *(const void **)v21;
            if (v23 >= 0)
              v27 = *(unsigned __int8 *)(v22 + 23);
            else
              v27 = *(_QWORD *)(v22 + 8);
            if (v23 >= 0)
              v28 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v9));
            else
              v28 = *(const void **)v22;
            if (v27 >= v25)
              v29 = v25;
            else
              v29 = v27;
            result = (int *)memcmp(v26, v28, v29);
            v30 = v25 < v27;
            if ((_DWORD)result)
              v30 = (int)result < 0;
            --v20;
          }
          while (v30);
          *v20 = v8;
          v3 = a2;
        }
        v5 = v4 + 1;
      }
      while (v4 + 1 != v3);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  size_t v46;
  const void *v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  _BOOL4 v52;
  uint64_t v54;

  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 224);
  v54 = *a2;
  v7 = *(_QWORD *)(*(_QWORD *)a4 + 200);
  v8 = v7 + 24 * *(int *)(v6 + 4 * v54);
  v9 = v7 + 24 * *(int *)(v6 + 4 * *a1);
  v10 = *(char *)(v9 + 23);
  v11 = *(char *)(v8 + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  if (v11 >= 0)
    v13 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v54));
  else
    v13 = *(const void **)v8;
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(v9 + 23);
  else
    v14 = *(_QWORD *)(v9 + 8);
  if (v10 >= 0)
    v15 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
  else
    v15 = *(const void **)v9;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  if (v17)
    v18 = v17 < 0;
  else
    v18 = v12 < v14;
  v19 = a3;
  v20 = *a3;
  v21 = v7 + 24 * *(int *)(v6 + 4 * v20);
  v22 = *(char *)(v21 + 23);
  if (v22 >= 0)
    v23 = *(unsigned __int8 *)(v21 + 23);
  else
    v23 = *(_QWORD *)(v21 + 8);
  if (v22 >= 0)
    v24 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v20));
  else
    v24 = *(const void **)v21;
  if (v12 >= v23)
    v25 = v23;
  else
    v25 = v12;
  v26 = memcmp(v24, v13, v25);
  v27 = v23 < v12;
  if (v26)
    v27 = v26 < 0;
  if (v18)
  {
    if (v27)
    {
      *a1 = v20;
      *a3 = v5;
      return 1;
    }
    *a1 = v54;
    *a2 = v5;
    v41 = *a3;
    v42 = v7 + 24 * *(int *)(v6 + 4 * v41);
    v43 = v7 + 24 * *(int *)(v6 + 4 * v5);
    v44 = *(char *)(v43 + 23);
    v45 = *(char *)(v42 + 23);
    if (v45 >= 0)
      v46 = *(unsigned __int8 *)(v42 + 23);
    else
      v46 = *(_QWORD *)(v42 + 8);
    if (v45 >= 0)
      v47 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v41));
    else
      v47 = *(const void **)v42;
    if (v44 >= 0)
      v48 = *(unsigned __int8 *)(v43 + 23);
    else
      v48 = *(_QWORD *)(v43 + 8);
    if (v44 >= 0)
      v49 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
    else
      v49 = *(const void **)v43;
    if (v48 >= v46)
      v50 = v46;
    else
      v50 = v48;
    v51 = memcmp(v47, v49, v50);
    v52 = v46 < v48;
    if (v51)
      v52 = v51 < 0;
    if (!v52)
      return 1;
    *a2 = v41;
    *v19 = v5;
    return 2;
  }
  if (v27)
  {
    *a2 = v20;
    *a3 = v54;
    v28 = *a2;
    v29 = *a1;
    v30 = v7 + 24 * *(int *)(v6 + 4 * v28);
    v31 = v7 + 24 * *(int *)(v6 + 4 * v29);
    v32 = *(char *)(v31 + 23);
    v33 = *(char *)(v30 + 23);
    if (v33 >= 0)
      v34 = *(unsigned __int8 *)(v30 + 23);
    else
      v34 = *(_QWORD *)(v30 + 8);
    if (v33 >= 0)
      v35 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v28));
    else
      v35 = *(const void **)v30;
    if (v32 >= 0)
      v36 = *(unsigned __int8 *)(v31 + 23);
    else
      v36 = *(_QWORD *)(v31 + 8);
    if (v32 >= 0)
      v37 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v29));
    else
      v37 = *(const void **)v31;
    if (v36 >= v34)
      v38 = v34;
    else
      v38 = v36;
    v39 = memcmp(v35, v37, v38);
    v40 = v34 < v36;
    if (v39)
      v40 = v39 < 0;
    if (!v40)
      return 1;
    *a1 = v28;
    *a2 = v29;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(int *a1, int *a2, uint64_t a3)
{
  int *v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  const void **v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  int *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  const void **v36;
  int v37;
  size_t v38;
  const void *v39;
  size_t v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  size_t v47;
  const void *v48;
  uint64_t v49;
  const void **v50;
  int v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t v57;
  const void **v58;
  int v59;
  size_t v60;
  const void *v61;
  size_t v62;
  int v63;
  BOOL v64;
  int *v66;
  int v67;
  uint64_t v68;

  v3 = a2;
  v4 = a1;
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 224);
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 200);
  v8 = v7 + 24 * *(int *)(v6 + 4 * *a1);
  v9 = v7 + 24 * *(int *)(v6 + 4 * *(a2 - 1));
  v10 = *(char *)(v9 + 23);
  v11 = *(char *)(v8 + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  if (v11 >= 0)
    v13 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
  else
    v13 = *(const void **)v8;
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(v9 + 23);
  else
    v14 = *(_QWORD *)(v9 + 8);
  if (v10 >= 0)
    v15 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * *(a2 - 1)));
  else
    v15 = *(const void **)v9;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  v66 = v4;
  if (v18)
  {
    do
    {
      v19 = v4[1];
      ++v4;
      v20 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v19));
      v21 = *((char *)v20 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v20 + 23);
      else
        v22 = (size_t)v20[1];
      if (v21 >= 0)
        v23 = v20;
      else
        v23 = *v20;
      if (v22 >= v12)
        v24 = v12;
      else
        v24 = v22;
      v25 = memcmp(v13, v23, v24);
      v26 = v12 < v22;
      if (v25)
        v26 = v25 < 0;
    }
    while (!v26);
  }
  else
  {
    v27 = v4 + 1;
    do
    {
      v4 = v27;
      if (v27 >= v3)
        break;
      ++v27;
      v28 = v7 + 24 * *(int *)(v6 + 4 * *v4);
      v29 = *(char *)(v28 + 23);
      if (v29 >= 0)
        v30 = *(unsigned __int8 *)(v28 + 23);
      else
        v30 = *(_QWORD *)(v28 + 8);
      if (v29 >= 0)
        v31 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * *v4));
      else
        v31 = *(const void **)v28;
      if (v30 >= v12)
        v32 = v12;
      else
        v32 = v30;
      v33 = memcmp(v13, v31, v32);
      v34 = v12 < v30;
      if (v33)
        v34 = v33 < 0;
    }
    while (!v34);
  }
  if (v4 < v3)
  {
    do
    {
      v35 = *--v3;
      v36 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v35));
      v37 = *((char *)v36 + 23);
      if (v37 >= 0)
        v38 = *((unsigned __int8 *)v36 + 23);
      else
        v38 = (size_t)v36[1];
      if (v37 >= 0)
        v39 = v36;
      else
        v39 = *v36;
      if (v38 >= v12)
        v40 = v12;
      else
        v40 = v38;
      v41 = memcmp(v13, v39, v40);
      v42 = v12 < v38;
      if (v41)
        v42 = v41 < 0;
    }
    while (v42);
  }
  v67 = v5;
  if (v4 < v3)
  {
    v68 = v5;
    v43 = *v4;
    v44 = *v3;
    do
    {
      *v4 = v44;
      *v3 = v43;
      v45 = v7 + 24 * *(int *)(v6 + 4 * v68);
      v46 = *(char *)(v45 + 23);
      if (v46 >= 0)
        v47 = *(unsigned __int8 *)(v45 + 23);
      else
        v47 = *(_QWORD *)(v45 + 8);
      if (v46 >= 0)
        v48 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v68));
      else
        v48 = *(const void **)v45;
      do
      {
        v49 = v4[1];
        ++v4;
        v43 = v49;
        v50 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v49));
        v51 = *((char *)v50 + 23);
        if (v51 >= 0)
          v52 = *((unsigned __int8 *)v50 + 23);
        else
          v52 = (size_t)v50[1];
        if (v51 >= 0)
          v53 = v50;
        else
          v53 = *v50;
        if (v52 >= v47)
          v54 = v47;
        else
          v54 = v52;
        v55 = memcmp(v48, v53, v54);
        v56 = v47 < v52;
        if (v55)
          v56 = v55 < 0;
      }
      while (!v56);
      do
      {
        v57 = *--v3;
        v44 = v57;
        v58 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v57));
        v59 = *((char *)v58 + 23);
        if (v59 >= 0)
          v60 = *((unsigned __int8 *)v58 + 23);
        else
          v60 = (size_t)v58[1];
        if (v59 >= 0)
          v61 = v58;
        else
          v61 = *v58;
        if (v60 >= v47)
          v62 = v47;
        else
          v62 = v60;
        v63 = memcmp(v48, v61, v62);
        v64 = v47 < v60;
        if (v63)
          v64 = v63 < 0;
      }
      while (v64);
    }
    while (v4 < v3);
  }
  if (v4 - 1 != v66)
    *v66 = *(v4 - 1);
  *(v4 - 1) = v67;
  return v4;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  char v22;
  int *v23;
  uint64_t v24;
  const void **v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  const void **v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  BOOL v39;
  int v40;
  int *v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  int v46;
  size_t v47;
  const void *v48;
  uint64_t v49;
  const void **v50;
  int v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  const void **v58;
  int v59;
  size_t v60;
  const void *v61;
  size_t v62;
  int v63;
  _BOOL4 v64;
  int v66;
  int *v67;
  uint64_t v68;
  int *v69;

  v4 = 0;
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 224);
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 200);
  v68 = *a1;
  v69 = a1;
  v8 = v7 + 24 * *(int *)(v6 + 4 * v68);
  v9 = *(_BYTE *)(v8 + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(v8 + 23);
  else
    v10 = *(_QWORD *)(v8 + 8);
  if (v9 >= 0)
    v11 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
  else
    v11 = *(const void **)v8;
  do
  {
    v12 = a1[v4 + 1];
    v13 = v7 + 24 * *(int *)(v6 + 4 * v12);
    v14 = *(char *)(v13 + 23);
    if (v14 >= 0)
      v15 = *(unsigned __int8 *)(v13 + 23);
    else
      v15 = *(_QWORD *)(v13 + 8);
    if (v14 >= 0)
      v16 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v12));
    else
      v16 = *(const void **)v13;
    if (v10 >= v15)
      v17 = v15;
    else
      v17 = v10;
    v18 = memcmp(v16, v11, v17);
    v19 = v15 < v10;
    v20 = v18 == 0;
    v21 = v18 < 0;
    a1 = v69;
    v22 = v21;
    if (!v20)
      v19 = v22;
    ++v4;
  }
  while (v19);
  v67 = &v69[v4];
  v23 = &v69[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v67 >= a2)
        break;
      v32 = *--a2;
      v33 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v32));
      v34 = *((char *)v33 + 23);
      if (v34 >= 0)
        v35 = *((unsigned __int8 *)v33 + 23);
      else
        v35 = (size_t)v33[1];
      if (v34 >= 0)
        v36 = v33;
      else
        v36 = *v33;
      if (v10 >= v35)
        v37 = v35;
      else
        v37 = v10;
      v38 = memcmp(v36, v11, v37);
      v39 = v35 < v10;
      if (v38)
        v39 = v38 < 0;
    }
    while (!v39);
  }
  else
  {
    do
    {
      v24 = *--a2;
      v25 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v24));
      v26 = *((char *)v25 + 23);
      if (v26 >= 0)
        v27 = *((unsigned __int8 *)v25 + 23);
      else
        v27 = (size_t)v25[1];
      if (v26 >= 0)
        v28 = v25;
      else
        v28 = *v25;
      if (v10 >= v27)
        v29 = v27;
      else
        v29 = v10;
      v30 = memcmp(v28, v11, v29);
      v31 = v27 < v10;
      if (v30)
        v31 = v30 < 0;
    }
    while (!v31);
  }
  if (v67 < a2)
  {
    v40 = *a2;
    v41 = a2;
    v42 = v12;
    v43 = v67;
    v66 = v5;
    v44 = v41;
    do
    {
      *v43 = v40;
      *v44 = v42;
      v45 = v7 + 24 * *(int *)(v6 + 4 * v68);
      v46 = *(char *)(v45 + 23);
      if (v46 >= 0)
        v47 = *(unsigned __int8 *)(v45 + 23);
      else
        v47 = *(_QWORD *)(v45 + 8);
      if (v46 >= 0)
        v48 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v68));
      else
        v48 = *(const void **)v45;
      do
      {
        v49 = v43[1];
        ++v43;
        v42 = v49;
        v50 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v49));
        v51 = *((char *)v50 + 23);
        if (v51 >= 0)
          v52 = *((unsigned __int8 *)v50 + 23);
        else
          v52 = (size_t)v50[1];
        if (v51 >= 0)
          v53 = v50;
        else
          v53 = *v50;
        if (v47 >= v52)
          v54 = v52;
        else
          v54 = v47;
        v55 = memcmp(v53, v48, v54);
        v56 = v52 < v47;
        if (v55)
          v56 = v55 < 0;
      }
      while (v56);
      do
      {
        v57 = *--v44;
        v40 = v57;
        v58 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v57));
        v59 = *((char *)v58 + 23);
        if (v59 >= 0)
          v60 = *((unsigned __int8 *)v58 + 23);
        else
          v60 = (size_t)v58[1];
        if (v59 >= 0)
          v61 = v58;
        else
          v61 = *v58;
        if (v47 >= v60)
          v62 = v60;
        else
          v62 = v47;
        v63 = memcmp(v61, v48, v62);
        v64 = v60 < v47;
        if (v63)
          v64 = v63 < 0;
      }
      while (!v64);
    }
    while (v43 < v44);
    v23 = v43 - 1;
    v5 = v66;
  }
  if (v23 != v69)
    *v69 = *v23;
  *v23 = v5;
  return v23;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  const void **v13;
  int v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  _BOOL4 v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  const void *v52;
  size_t v53;
  int v54;
  BOOL v55;
  int *v56;
  int *v57;
  int v58;
  int v59;
  int *v60;
  int v61;
  int *v62;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 224);
      v11 = *(_QWORD *)(*(_QWORD *)a3 + 200);
      v12 = (const void **)(v11 + 24 * *(int *)(v10 + 4 * v8));
      v13 = (const void **)(v11 + 24 * *(int *)(v10 + 4 * v9));
      v14 = *((char *)v13 + 23);
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = *((unsigned __int8 *)v12 + 23);
      else
        v16 = (size_t)v12[1];
      if (v15 >= 0)
        v17 = v12;
      else
        v17 = *v12;
      if (v14 >= 0)
        v18 = *((unsigned __int8 *)v13 + 23);
      else
        v18 = (size_t)v13[1];
      if (v14 >= 0)
        v19 = v13;
      else
        v19 = *v13;
      if (v18 >= v16)
        v20 = v16;
      else
        v20 = v18;
      v21 = memcmp(v17, v19, v20);
      v22 = v16 < v18;
      if (v21)
        v22 = v21 < 0;
      if (v22)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v23 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a3);
      v24 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v61 = 0;
      v25 = *(_QWORD *)a3;
      v26 = *(_QWORD *)(*(_QWORD *)a3 + 224);
      v27 = *(_QWORD *)(v25 + 200);
      v28 = 12;
      v62 = a2;
      break;
  }
  while (1)
  {
    v29 = *v24;
    v30 = *v23;
    v31 = v27 + 24 * *(int *)(v26 + 4 * *v24);
    v32 = v27 + 24 * *(int *)(v26 + 4 * v30);
    v33 = *(char *)(v32 + 23);
    v34 = *(char *)(v31 + 23);
    if (v34 >= 0)
      v35 = *(unsigned __int8 *)(v31 + 23);
    else
      v35 = *(_QWORD *)(v31 + 8);
    if (v34 >= 0)
      v36 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v29));
    else
      v36 = *(const void **)v31;
    if (v33 >= 0)
      v37 = *(unsigned __int8 *)(v32 + 23);
    else
      v37 = *(_QWORD *)(v32 + 8);
    if (v33 >= 0)
      v38 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v30));
    else
      v38 = *(const void **)v32;
    if (v37 >= v35)
      v39 = v35;
    else
      v39 = v37;
    v40 = memcmp(v36, v38, v39);
    v41 = v35 < v37;
    if (v40)
      v41 = v40 < 0;
    if (v41)
      break;
    v57 = v62;
LABEL_65:
    v23 = v24;
    v28 += 4;
    if (++v24 == v57)
      return 1;
  }
  v59 = v29;
  v60 = v24;
  v42 = v29;
  v43 = v28;
  while (1)
  {
    *(int *)((char *)a1 + v43) = v30;
    v44 = v43 - 4;
    if (v43 == 4)
      break;
    v30 = *(int *)((char *)a1 + v43 - 8);
    v45 = v27 + 24 * *(int *)(v26 + 4 * v42);
    v46 = v27 + 24 * *(int *)(v26 + 4 * v30);
    v47 = *(char *)(v46 + 23);
    v48 = *(char *)(v45 + 23);
    if (v48 >= 0)
      v49 = *(unsigned __int8 *)(v45 + 23);
    else
      v49 = *(_QWORD *)(v45 + 8);
    if (v48 >= 0)
      v50 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v42));
    else
      v50 = *(const void **)v45;
    if (v47 >= 0)
      v51 = *(unsigned __int8 *)(v46 + 23);
    else
      v51 = *(_QWORD *)(v46 + 8);
    if (v47 >= 0)
      v52 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v30));
    else
      v52 = *(const void **)v46;
    if (v51 >= v49)
      v53 = v49;
    else
      v53 = v51;
    v54 = memcmp(v50, v52, v53);
    v55 = v54 < 0;
    if (!v54)
      v55 = v49 < v51;
    v43 = v44;
    if (!v55)
    {
      v56 = (int *)((char *)a1 + v44);
      goto LABEL_64;
    }
  }
  v56 = a1;
LABEL_64:
  v57 = v62;
  v24 = v60;
  v58 = v61;
  *v56 = v59;
  ++v61;
  if (v58 != 7)
    goto LABEL_65;
  return v60 + 1 == v62;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  uint64_t result;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  const void *v35;
  size_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  const void **v40;
  const void **v41;
  int v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  _BOOL4 v49;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *(_QWORD *)a5;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 224);
  v14 = *(_QWORD *)(v12 + 200);
  v15 = v14 + 24 * *(int *)(v13 + 4 * v10);
  v16 = v14 + 24 * *(int *)(v13 + 4 * v11);
  v17 = *(char *)(v16 + 23);
  v18 = *(char *)(v15 + 23);
  if (v18 >= 0)
    v19 = *(unsigned __int8 *)(v15 + 23);
  else
    v19 = *(_QWORD *)(v15 + 8);
  if (v18 >= 0)
    v20 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v10));
  else
    v20 = *(const void **)v15;
  if (v17 >= 0)
    v21 = *(unsigned __int8 *)(v16 + 23);
  else
    v21 = *(_QWORD *)(v16 + 8);
  if (v17 >= 0)
    v22 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v11));
  else
    v22 = *(const void **)v16;
  if (v21 >= v19)
    v23 = v19;
  else
    v23 = v21;
  result = memcmp(v20, v22, v23);
  v25 = v19 < v21;
  if ((_DWORD)result)
    v25 = (int)result < 0;
  if (v25)
  {
    *a3 = v10;
    *a4 = v11;
    v26 = *a3;
    v27 = *a2;
    v28 = v14 + 24 * *(int *)(v13 + 4 * v26);
    v29 = v14 + 24 * *(int *)(v13 + 4 * v27);
    v30 = *(char *)(v29 + 23);
    v31 = *(char *)(v28 + 23);
    if (v31 >= 0)
      v32 = *(unsigned __int8 *)(v28 + 23);
    else
      v32 = *(_QWORD *)(v28 + 8);
    if (v31 >= 0)
      v33 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v26));
    else
      v33 = *(const void **)v28;
    if (v30 >= 0)
      v34 = *(unsigned __int8 *)(v29 + 23);
    else
      v34 = *(_QWORD *)(v29 + 8);
    if (v30 >= 0)
      v35 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v27));
    else
      v35 = *(const void **)v29;
    if (v34 >= v32)
      v36 = v32;
    else
      v36 = v34;
    result = memcmp(v33, v35, v36);
    v37 = v32 < v34;
    if ((_DWORD)result)
      v37 = (int)result < 0;
    if (v37)
    {
      *a2 = v26;
      *a3 = v27;
      v38 = *a2;
      v39 = *a1;
      v40 = (const void **)(v14 + 24 * *(int *)(v13 + 4 * v38));
      v41 = (const void **)(v14 + 24 * *(int *)(v13 + 4 * v39));
      v42 = *((char *)v41 + 23);
      v43 = *((char *)v40 + 23);
      if (v43 >= 0)
        v44 = *((unsigned __int8 *)v40 + 23);
      else
        v44 = (size_t)v40[1];
      if (v43 >= 0)
        v45 = v40;
      else
        v45 = *v40;
      if (v42 >= 0)
        v46 = *((unsigned __int8 *)v41 + 23);
      else
        v46 = (size_t)v41[1];
      if (v42 >= 0)
        v47 = v41;
      else
        v47 = *v41;
      if (v46 >= v44)
        v48 = v44;
      else
        v48 = v46;
      result = memcmp(v45, v47, v48);
      v49 = v44 < v46;
      if ((_DWORD)result)
        v49 = (int)result < 0;
      if (v49)
      {
        *a1 = v38;
        *a2 = v39;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  uint64_t result;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  size_t v57;
  const void *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  _BOOL4 v62;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a2, a3, a4, a6);
  v11 = *a5;
  v12 = *a4;
  v13 = *(_QWORD *)a6;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 224);
  v15 = *(_QWORD *)(v13 + 200);
  v16 = v15 + 24 * *(int *)(v14 + 4 * v11);
  v17 = v15 + 24 * *(int *)(v14 + 4 * v12);
  v18 = *(char *)(v17 + 23);
  v19 = *(char *)(v16 + 23);
  if (v19 >= 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = *(_QWORD *)(v16 + 8);
  if (v19 >= 0)
    v21 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v11));
  else
    v21 = *(const void **)v16;
  if (v18 >= 0)
    v22 = *(unsigned __int8 *)(v17 + 23);
  else
    v22 = *(_QWORD *)(v17 + 8);
  if (v18 >= 0)
    v23 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v12));
  else
    v23 = *(const void **)v17;
  if (v22 >= v20)
    v24 = v20;
  else
    v24 = v22;
  result = memcmp(v21, v23, v24);
  v26 = v20 < v22;
  if ((_DWORD)result)
    v26 = (int)result < 0;
  if (v26)
  {
    *a4 = v11;
    *a5 = v12;
    v27 = *a4;
    v28 = *a3;
    v29 = v15 + 24 * *(int *)(v14 + 4 * v27);
    v30 = v15 + 24 * *(int *)(v14 + 4 * v28);
    v31 = *(char *)(v30 + 23);
    v32 = *(char *)(v29 + 23);
    if (v32 >= 0)
      v33 = *(unsigned __int8 *)(v29 + 23);
    else
      v33 = *(_QWORD *)(v29 + 8);
    if (v32 >= 0)
      v34 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v27));
    else
      v34 = *(const void **)v29;
    if (v31 >= 0)
      v35 = *(unsigned __int8 *)(v30 + 23);
    else
      v35 = *(_QWORD *)(v30 + 8);
    if (v31 >= 0)
      v36 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v28));
    else
      v36 = *(const void **)v30;
    if (v35 >= v33)
      v37 = v33;
    else
      v37 = v35;
    result = memcmp(v34, v36, v37);
    v38 = v33 < v35;
    if ((_DWORD)result)
      v38 = (int)result < 0;
    if (v38)
    {
      *a3 = v27;
      *a4 = v28;
      v39 = *a3;
      v40 = *a2;
      v41 = v15 + 24 * *(int *)(v14 + 4 * v39);
      v42 = v15 + 24 * *(int *)(v14 + 4 * v40);
      v43 = *(char *)(v42 + 23);
      v44 = *(char *)(v41 + 23);
      if (v44 >= 0)
        v45 = *(unsigned __int8 *)(v41 + 23);
      else
        v45 = *(_QWORD *)(v41 + 8);
      if (v44 >= 0)
        v46 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v39));
      else
        v46 = *(const void **)v41;
      if (v43 >= 0)
        v47 = *(unsigned __int8 *)(v42 + 23);
      else
        v47 = *(_QWORD *)(v42 + 8);
      if (v43 >= 0)
        v48 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v40));
      else
        v48 = *(const void **)v42;
      if (v47 >= v45)
        v49 = v45;
      else
        v49 = v47;
      result = memcmp(v46, v48, v49);
      v50 = v45 < v47;
      if ((_DWORD)result)
        v50 = (int)result < 0;
      if (v50)
      {
        *a2 = v39;
        *a3 = v40;
        v51 = *a2;
        v52 = *a1;
        v53 = v15 + 24 * *(int *)(v14 + 4 * v51);
        v54 = v15 + 24 * *(int *)(v14 + 4 * v52);
        v55 = *(char *)(v54 + 23);
        v56 = *(char *)(v53 + 23);
        if (v56 >= 0)
          v57 = *(unsigned __int8 *)(v53 + 23);
        else
          v57 = *(_QWORD *)(v53 + 8);
        if (v56 >= 0)
          v58 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v51));
        else
          v58 = *(const void **)v53;
        if (v55 >= 0)
          v59 = *(unsigned __int8 *)(v54 + 23);
        else
          v59 = *(_QWORD *)(v54 + 8);
        if (v55 >= 0)
          v60 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v52));
        else
          v60 = *(const void **)v54;
        if (v59 >= v57)
          v61 = v57;
        else
          v61 = v59;
        result = memcmp(v58, v60, v61);
        v62 = v57 < v59;
        if ((_DWORD)result)
          v62 = (int)result < 0;
        if (v62)
        {
          *a1 = v51;
          *a2 = v52;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  const void **v20;
  int v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  const void *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  int *v31;
  int v32;
  int *v33;
  uint64_t v36;
  int *v37;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>((uint64_t)a1, (uint64_t)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v36 = v8;
      v37 = v6;
      v14 = v6;
      do
      {
        v15 = *v14;
        v16 = *a1;
        v17 = *(_QWORD *)(*a4 + 224);
        v18 = *(_QWORD *)(*a4 + 200);
        v19 = (const void **)(v18 + 24 * *(int *)(v17 + 4 * v15));
        v20 = (const void **)(v18 + 24 * *(int *)(v17 + 4 * v16));
        v21 = *((char *)v20 + 23);
        v22 = *((char *)v19 + 23);
        if (v22 >= 0)
          v23 = *((unsigned __int8 *)v19 + 23);
        else
          v23 = (size_t)v19[1];
        if (v22 >= 0)
          v24 = v19;
        else
          v24 = *v19;
        if (v21 >= 0)
          v25 = *((unsigned __int8 *)v20 + 23);
        else
          v25 = (size_t)v20[1];
        if (v21 >= 0)
          v26 = v20;
        else
          v26 = *v20;
        if (v25 >= v23)
          v27 = v23;
        else
          v27 = v25;
        v28 = memcmp(v24, v26, v27);
        v29 = v23 < v25;
        if (v28)
          v29 = v28 < 0;
        if (v29)
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>((uint64_t)a1, (uint64_t)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
      v8 = v36;
      v6 = v37;
    }
    if (v8 >= 5)
    {
      v30 = (unint64_t)v8 >> 2;
      v31 = v6 - 1;
      do
      {
        v32 = *a1;
        v33 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a4, v30);
        if (v31 == v33)
        {
          *v33 = v32;
        }
        else
        {
          *v33 = *v31;
          *v31 = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>((uint64_t)a1, (uint64_t)(v33 + 1), (uint64_t)a4, v33 + 1 - a1);
        }
        --v31;
      }
      while (v30-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  const void **v32;
  uint64_t v33;
  int v34;
  int v35;
  size_t v36;
  const void *v37;
  size_t v38;
  const void *v39;
  size_t v40;
  BOOL v41;
  int *v42;
  int v43;
  int *v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  const void **v48;
  const void **v49;
  int v50;
  int v51;
  int *v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  const void *v67;
  unint64_t v68;
  const void *v69;
  size_t v70;
  _BOOL4 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  int v81;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v79 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v7 = a3;
      v8 = ((uint64_t)a4 - result) >> 1;
      v9 = v8 + 1;
      v10 = (int *)(result + 4 * (v8 + 1));
      v11 = v8 + 2;
      v12 = *v10;
      if (v11 >= a3)
      {
        v80 = v10;
        v13 = *(_QWORD *)(*(_QWORD *)a2 + 224);
        v26 = *(_QWORD *)(*(_QWORD *)a2 + 200);
        v29 = *v10;
      }
      else
      {
        v77 = v11;
        v75 = v10[1];
        v13 = *(_QWORD *)(*(_QWORD *)a2 + 224);
        v14 = *(_QWORD *)(*(_QWORD *)a2 + 200);
        v15 = v14 + 24 * *(int *)(v13 + 4 * v12);
        v16 = v14 + 24 * *(int *)(v13 + 4 * v75);
        v17 = *(char *)(v16 + 23);
        v18 = *(char *)(v15 + 23);
        if (v18 >= 0)
          v19 = *(unsigned __int8 *)(v15 + 23);
        else
          v19 = *(_QWORD *)(v15 + 8);
        if (v18 >= 0)
          v20 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v12));
        else
          v20 = *(const void **)v15;
        if (v17 >= 0)
          v21 = *(unsigned __int8 *)(v16 + 23);
        else
          v21 = *(_QWORD *)(v16 + 8);
        if (v17 >= 0)
          v22 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v75));
        else
          v22 = *(const void **)v16;
        if (v21 >= v19)
          v23 = v19;
        else
          v23 = v21;
        v24 = memcmp(v20, v22, v23);
        v25 = v19 >= v21;
        v26 = v14;
        v27 = !v25;
        if (v24)
          v27 = v24 < 0;
        v28 = !v27;
        if (v27)
          v29 = v75;
        else
          v29 = v12;
        if (!v28)
          ++v10;
        v80 = v10;
        if (!v28)
          v9 = v77;
      }
      v30 = *v5;
      v31 = v29;
      v32 = (const void **)(v26 + 24 * *(int *)(v13 + 4 * v29));
      v33 = v26 + 24 * *(int *)(v13 + 4 * *v5);
      v34 = *(char *)(v33 + 23);
      v35 = *((char *)v32 + 23);
      if (v35 >= 0)
        v36 = *((unsigned __int8 *)v32 + 23);
      else
        v36 = (size_t)v32[1];
      if (v35 >= 0)
        v37 = v32;
      else
        v37 = *v32;
      if (v34 >= 0)
        v38 = *(unsigned __int8 *)(v33 + 23);
      else
        v38 = *(_QWORD *)(v33 + 8);
      if (v34 >= 0)
        v39 = (const void *)(v26 + 24 * *(int *)(v13 + 4 * v30));
      else
        v39 = *(const void **)v33;
      if (v38 >= v36)
        v40 = v36;
      else
        v40 = v38;
      result = memcmp(v37, v39, v40);
      v41 = v36 < v38;
      if ((_DWORD)result)
        v41 = (int)result < 0;
      if (!v41)
      {
        v72 = v30;
        v73 = v13;
        v76 = v26;
        v78 = v30;
        v42 = v80;
        v43 = v31;
        do
        {
          v44 = v42;
          *v5 = v43;
          if (v79 < v9)
            break;
          v45 = (2 * v9) | 1;
          v42 = (int *)(v6 + 4 * v45);
          v9 = 2 * v9 + 2;
          v43 = *v42;
          if (v9 >= v7)
          {
            v9 = v45;
            v47 = v76;
          }
          else
          {
            v81 = *v42;
            v46 = v42 + 1;
            v74 = v42[1];
            v47 = v76;
            v48 = (const void **)(v76 + 24 * *(int *)(v13 + 4 * v43));
            v49 = (const void **)(v76 + 24 * *(int *)(v13 + 4 * v74));
            v50 = *((char *)v49 + 23);
            v51 = *((char *)v48 + 23);
            v52 = (int *)(v6 + 4 * v45);
            if (v51 >= 0)
              v53 = *((unsigned __int8 *)v48 + 23);
            else
              v53 = (size_t)v48[1];
            if (v51 >= 0)
              v54 = v48;
            else
              v54 = *v48;
            v55 = v6;
            v56 = v7;
            if (v50 >= 0)
              v57 = *((unsigned __int8 *)v49 + 23);
            else
              v57 = (size_t)v49[1];
            if (v50 >= 0)
              v58 = v49;
            else
              v58 = *v49;
            if (v57 >= v53)
              v59 = v53;
            else
              v59 = v57;
            v60 = memcmp(v54, v58, v59);
            v25 = v53 >= v57;
            v42 = v52;
            v7 = v56;
            v6 = v55;
            v61 = !v25;
            if (v60)
              v61 = v60 < 0;
            v13 = v73;
            v43 = v61 ? v74 : v81;
            if (v61)
              v42 = v46;
            else
              v9 = v45;
          }
          v62 = v47 + 24 * *(int *)(v13 + 4 * v43);
          v63 = v47 + 24 * *(int *)(v13 + 4 * v78);
          v64 = *(char *)(v63 + 23);
          v65 = *(char *)(v62 + 23);
          v66 = v65 >= 0 ? *(unsigned __int8 *)(v62 + 23) : *(_QWORD *)(v62 + 8);
          v67 = v65 >= 0 ? (const void *)v62 : *(const void **)v62;
          v68 = v64 >= 0 ? *(unsigned __int8 *)(v63 + 23) : *(_QWORD *)(v63 + 8);
          v69 = v64 >= 0 ? (const void *)v63 : *(const void **)v63;
          v70 = v68 >= v66 ? v66 : v68;
          result = memcmp(v67, v69, v70);
          v71 = v66 < v68;
          if ((_DWORD)result)
            v71 = (int)result < 0;
          v5 = v44;
        }
        while (!v71);
        *v44 = v72;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  const void **v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v29;
  uint64_t v30;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  v29 = *a2;
  v30 = v6 >> 1;
  do
  {
    v8 = &a1[v5];
    v11 = v8[1];
    v9 = v8 + 1;
    v10 = v11;
    v12 = (2 * v5) | 1;
    v13 = 2 * v5 + 2;
    if (v13 >= a3)
    {
      v5 = (2 * v5) | 1;
    }
    else
    {
      v14 = (int)v9[1];
      v15 = *(_QWORD *)(v29 + 224);
      v16 = *(_QWORD *)(v29 + 200);
      v17 = (const void **)(v16 + 24 * *(int *)(v15 + 4 * v10));
      v18 = (const void **)(v16 + 24 * *(int *)(v15 + 4 * v14));
      v19 = *((char *)v18 + 23);
      v20 = *((char *)v17 + 23);
      if (v20 >= 0)
        v21 = *((unsigned __int8 *)v17 + 23);
      else
        v21 = (size_t)v17[1];
      if (v20 >= 0)
        v22 = v17;
      else
        v22 = *v17;
      if (v19 >= 0)
        v23 = *((unsigned __int8 *)v18 + 23);
      else
        v23 = (size_t)v18[1];
      if (v19 >= 0)
        v24 = v18;
      else
        v24 = *v18;
      if (v23 >= v21)
        v25 = v21;
      else
        v25 = v23;
      v26 = memcmp(v22, v24, v25);
      v7 = v30;
      v27 = v21 < v23;
      if (v26)
        v27 = v26 < 0;
      if (v27)
      {
        v10 = v14;
        ++v9;
        v5 = v13;
      }
      else
      {
        v5 = v12;
      }
    }
    *a1 = v10;
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  const void *v20;
  size_t v21;
  _BOOL4 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  unint64_t v32;
  const void *v33;
  size_t v34;
  BOOL v35;
  BOOL v36;
  int v37;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (int *)(result + 4 * (v4 >> 1));
    v8 = *v7;
    v9 = (_DWORD *)(a2 - 4);
    v10 = *(_DWORD *)(a2 - 4);
    v11 = *(_QWORD *)(*(_QWORD *)a3 + 224);
    v12 = *(_QWORD *)(*(_QWORD *)a3 + 200);
    v13 = v12 + 24 * *(int *)(v11 + 4 * v8);
    v14 = v12 + 24 * *(int *)(v11 + 4 * v10);
    v15 = *(char *)(v14 + 23);
    v16 = *(char *)(v13 + 23);
    if (v16 >= 0)
      v17 = *(unsigned __int8 *)(v13 + 23);
    else
      v17 = *(_QWORD *)(v13 + 8);
    if (v16 >= 0)
      v18 = (const void *)(v12 + 24 * *(int *)(v11 + 4 * v8));
    else
      v18 = *(const void **)v13;
    if (v15 >= 0)
      v19 = *(unsigned __int8 *)(v14 + 23);
    else
      v19 = *(_QWORD *)(v14 + 8);
    if (v15 >= 0)
      v20 = (const void *)(v12 + 24 * *(int *)(v11 + 4 * v10));
    else
      v20 = *(const void **)v14;
    if (v19 >= v17)
      v21 = v17;
    else
      v21 = v19;
    result = memcmp(v18, v20, v21);
    v22 = v17 < v19;
    if ((_DWORD)result)
      v22 = (int)result < 0;
    if (v22)
    {
      v37 = v10;
      v23 = v10;
      do
      {
        v24 = v7;
        *v9 = v8;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (int *)(v5 + 4 * v6);
        v8 = *v7;
        v25 = v12 + 24 * *(int *)(v11 + 4 * v8);
        v26 = v12 + 24 * *(int *)(v11 + 4 * v23);
        v27 = *(char *)(v26 + 23);
        v28 = *(char *)(v25 + 23);
        v29 = v28 >= 0 ? *(unsigned __int8 *)(v25 + 23) : *(_QWORD *)(v25 + 8);
        v30 = v28 >= 0 ? (const void *)(v12 + 24 * *(int *)(v11 + 4 * v8)) : *(const void **)v25;
        v31 = v5;
        v32 = v27 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(_QWORD *)(v26 + 8);
        v33 = v27 >= 0 ? (const void *)(v12 + 24 * *(int *)(v11 + 4 * v23)) : *(const void **)v26;
        v34 = v32 >= v29 ? v29 : v32;
        result = memcmp(v30, v33, v34);
        v35 = v29 >= v32;
        v5 = v31;
        v36 = !v35;
        if ((_DWORD)result)
          v36 = (int)result < 0;
        v9 = v24;
      }
      while (v36);
      *v24 = v37;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,double>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,double>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_1ADE21050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,double>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  *((_DWORD *)v7 + 10) = (int)*(double *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1ADE21100(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,0>(uint64_t a1)
{
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADE212C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::string *std::vector<std::vector<std::string>>::vector<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,0>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>>(std::string *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADE2140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::vector<std::string>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, std::string *a4)
{
  std::string *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD v11[3];
  char v12;
  std::string *v13;
  std::string *v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, (__int128 *)v6[4], (__int128 *)v6[5], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[5] - v6[4]) >> 3));
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v4 = ++v14;
      v6 = v8;
    }
    while (v8 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1ADE21500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  void **v8;
  __int128 v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0)
        operator delete(*v8);
      v9 = *(__int128 *)((char *)v5 + 24);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      *(_DWORD *)(a4 + 48) = *((_DWORD *)v5 + 12);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__move_assign(a4 + 56, (_QWORD *)v5 + 7);
      a4 += 80;
      v5 += 5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E5D3CF90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3CF90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(unsigned int *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::target_type()
{
}

uint64_t **std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__assign_multi<std::__tree_const_iterator<quasar::LmeDataFactoryBase::Word,std::__tree_node<quasar::LmeDataFactoryBase::Word,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          *((_DWORD *)v8 + 20) = *((_DWORD *)v9 + 20);
          if (v8 != (uint64_t *)v9)
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>((uint64_t **)v8 + 11, *((_QWORD **)v9 + 11), (_QWORD *)v9 + 12);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_multi<quasar::LmeDataFactoryBase::Word const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1ADE218A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_multi<quasar::LmeDataFactoryBase::Word const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1ADE21970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v5, (std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADE219DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1ADE21A88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::PopulateFeatureList(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _QWORD *v34;
  BOOL v35;
  char v36;
  std::string v37;
  std::string v38;
  std::__split_buffer<std::string> __v;
  std::string v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    v4 = *(_DWORD *)a1;
    if (*(int *)a1 >= 1)
    {
      v5 = 0;
      v6 = (_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 16);
      do
      {
        v8 = *(_QWORD *)(a1 + 8);
        ++v5;
        if (v8 != v7)
        {
          do
          {
            std::to_string(&v37, v5);
            v9 = std::string::insert(&v37, 0, "hyp");
            v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
            v9->__r_.__value_.__l.__size_ = 0;
            v9->__r_.__value_.__r.__words[2] = 0;
            v9->__r_.__value_.__r.__words[0] = 0;
            v11 = std::string::append(&v38, "_");
            v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
            v11->__r_.__value_.__l.__size_ = 0;
            v11->__r_.__value_.__r.__words[2] = 0;
            v11->__r_.__value_.__r.__words[0] = 0;
            v13 = *(char *)(v8 + 23);
            if (v13 >= 0)
              v14 = (const std::string::value_type *)v8;
            else
              v14 = *(const std::string::value_type **)v8;
            if (v13 >= 0)
              v15 = *(unsigned __int8 *)(v8 + 23);
            else
              v15 = *(_QWORD *)(v8 + 8);
            v16 = std::string::append(&v40, v14, v15);
            v17 = v16->__r_.__value_.__r.__words[0];
            v41[0] = v16->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
            v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            v19 = *(_QWORD *)(a1 + 40);
            v20 = *(_QWORD *)(a1 + 48);
            if (v19 >= v20)
            {
              v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v6) >> 3);
              v24 = v23 + 1;
              if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v6) >> 3);
              if (2 * v25 > v24)
                v24 = 2 * v25;
              if (v25 >= 0x555555555555555)
                v26 = 0xAAAAAAAAAAAAAAALL;
              else
                v26 = v24;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 48);
              if (v26)
                v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 48, v26);
              else
                v27 = 0;
              v28 = v27 + v23;
              __v.__first_ = v27;
              __v.__begin_ = v28;
              __v.__end_cap_.__value_ = &v27[v26];
              v29 = v41[0];
              v28->__r_.__value_.__r.__words[0] = v17;
              v28->__r_.__value_.__l.__size_ = v29;
              *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v41 + 7);
              *((_BYTE *)&v28->__r_.__value_.__s + 23) = v18;
              v41[0] = 0;
              *(_QWORD *)((char *)v41 + 7) = 0;
              __v.__end_ = v28 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 32), &__v);
              v22 = *(_QWORD *)(a1 + 40);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            }
            else
            {
              v21 = v41[0];
              *(_QWORD *)v19 = v17;
              *(_QWORD *)(v19 + 8) = v21;
              *(_QWORD *)(v19 + 15) = *(_QWORD *)((char *)v41 + 7);
              *(_BYTE *)(v19 + 23) = v18;
              v22 = v19 + 24;
              *(_QWORD *)(a1 + 40) = v19 + 24;
            }
            *(_QWORD *)(a1 + 40) = v22;
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v38.__r_.__value_.__l.__data_);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v37.__r_.__value_.__l.__data_);
            v8 += 24;
          }
          while (v8 != *(_QWORD *)(a1 + 16));
          v4 = *(_DWORD *)a1;
          v7 = v8;
        }
      }
      while (v5 < v4);
    }
  }
  else
  {
    kaldi::quasar::SystemSelectionFeatureExtractor::ValidateFeatureList(a1, (const std::string **)a2);
    if (a1 + 32 != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 32), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 40);
  if (v30 == v31)
  {
    v35 = 0;
  }
  else
  {
    v32 = v30 + 24;
    do
    {
      if (*(char *)(v32 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v32 - 24), *(_QWORD *)(v32 - 16));
      }
      else
      {
        v33 = *(_OWORD *)(v32 - 24);
        v40.__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 - 8);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v33;
      }
      v34 = std::string::basic_string[abi:ne180100]<0>(&__v, "pct");
      v35 = kaldi::quasar::SystemSelectionFeatureExtractor::CheckIfStringEndsWith((uint64_t)v34, (uint64_t **)&v40, (const void **)&__v.__first_);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      v36 = v32 == v31 || v35;
      v32 += 24;
    }
    while ((v36 & 1) == 0);
  }
  *(_BYTE *)(a1 + 60) = v35;
}

void sub_1ADE21E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::wstring> *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__pa,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__pa);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ValidateFeatureList(uint64_t a1, const std::string **a2)
{
  const std::string *i;
  std::string *v5;
  int data_low;
  int v7;
  int64_t size;
  const std::string *v10;
  char *v11;
  std::string *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  std::string::size_type v18;
  std::string __p;
  std::string __str;
  _QWORD v21[34];
  std::string v22;

  for (i = *a2; i != a2[1]; ++i)
  {
    std::string::basic_string(&v22, i, 0, 3uLL, (std::allocator<char> *)v21);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v22.__r_.__value_.__l.__size_ != 3)
        goto LABEL_43;
      v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) != 3)
        goto LABEL_43;
      v5 = &v22;
    }
    data_low = LOWORD(v5->__r_.__value_.__l.__data_);
    v7 = v5->__r_.__value_.__s.__data_[2];
    if (data_low != 31080 || v7 != 112)
    {
LABEL_43:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"should_be_hyp == \"hyp\"", 22);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (const std::string *)i->__r_.__value_.__r.__words[0];
      size = i->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(i->__r_.__value_.__r.__words[2]);
      v10 = i;
    }
    v11 = (char *)v10 + size;
    if (size >= 1)
    {
      v12 = (std::string *)v10;
      do
      {
        v13 = (char *)memchr(v12, 95, size);
        if (!v13)
          break;
        if (*v13 == 95)
          goto LABEL_21;
        v12 = (std::string *)(v13 + 1);
        size = v11 - (char *)v12;
      }
      while (v11 - (char *)v12 > 0);
    }
    v13 = v11;
LABEL_21:
    if (v13 == v11)
      v14 = -1;
    else
      v14 = v13 - (char *)v10;
    v15 = v14 << 32;
    if (v14 << 32 == 0xFFFFFFFF00000000 || (int)v14 <= 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(first_underscore_index != std::string::npos) && (first_underscore_index > 3)", 77);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    std::string::basic_string(&__str, i, 3uLL, (v15 - 0x300000000) >> 32, (std::allocator<char> *)v21);
    v17 = std::stoi(&__str, 0, 10);
    if (v17 <= 0 || v17 > *(_DWORD *)a1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(hyp_id >= 1) && (hyp_id <= num_hyps_)", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
      v18 = i->__r_.__value_.__l.__size_;
    else
      v18 = HIBYTE(i->__r_.__value_.__r.__words[2]);
    std::string::basic_string(&__p, i, (v15 + 0x100000000) >> 32, v18 - (int)v14, (std::allocator<char> *)v21);
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), (unsigned __int8 **)&__p) == *(_QWORD *)(a1 + 16))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"std::find(feature_list_without_hyp_ids_.begin(), feature_list_without_hyp_ids_.end(), should_be_in_feature_list_without_hyp_ids) != feature_list_without_hyp_ids_.end()", 167);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_1ADE221C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADE221F4);
}

void sub_1ADE221E0()
{
  JUMPOUT(0x1ADE22204);
}

BOOL kaldi::quasar::SystemSelectionFeatureExtractor::CheckIfStringEndsWith(uint64_t a1, uint64_t **a2, const void **a3)
{
  size_t v3;
  size_t v4;
  size_t v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v11;
  BOOL v12;
  size_t v13;
  const void *v14;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (size_t)a2[1];
  if ((v3 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v12 = v5 >= v7;
  v8 = v5 - v7;
  if (!v12)
    return 0;
  if ((v3 & 0x80) != 0)
  {
    v12 = v7 != -1 && v4 >= v8;
    if (v12)
    {
      v13 = v4 - v8;
      if (v13 >= v7)
        v11 = v7;
      else
        v11 = v13;
      a2 = (uint64_t **)*a2;
      goto LABEL_26;
    }
LABEL_35:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v3 < v8 || v7 == -1)
    goto LABEL_35;
  if (v3 - v8 >= v7)
    v11 = v7;
  else
    v11 = v3 - v8;
LABEL_26:
  if (v6 >= 0)
    v14 = a3;
  else
    v14 = *a3;
  return !memcmp((char *)a2 + v8, v14, v11) && v11 == v7;
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(int *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  void *__p[2];
  char v25;
  _QWORD v26[3];
  uint64_t (**v27)();
  uint64_t *v28;
  uint64_t *v29;
  void ***v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != *a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v27, "hyp_confidence_values.size() == num_hyps_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
  }
  std::vector<float>::resize((uint64_t)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v26, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  if (*((_BYTE *)a1 + 60) && *a1 >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      std::__sort<std::__less<float,float> &,float *>();
      ++v7;
      v6 += 24;
    }
    while (v7 < *a1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "count");
  v27 = &off_1E5D3D9E0;
  v28 = a2;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v8 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v9 = 4;
    v8 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_11:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  v27 = &off_1E5D3DA38;
  v28 = (uint64_t *)a1;
  v29 = a2;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v10 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v11 = 4;
    v10 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_18;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_18:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "std");
  v27 = &off_1E5D3DA90;
  v28 = (uint64_t *)a1;
  v29 = a2;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v12 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v13 = 4;
    v12 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_25;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_25:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min");
  v27 = &off_1E5D3DAE8;
  v28 = (uint64_t *)a1;
  v29 = a2;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v14 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v15 = 4;
    v14 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_32;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_32:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max");
  v27 = &off_1E5D3DB40;
  v28 = (uint64_t *)a1;
  v29 = a2;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v16 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v17 = 4;
    v16 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_39;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_39:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "25pct");
  v27 = &off_1E5D3DB98;
  v28 = (uint64_t *)a1;
  v29 = v26;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v18 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v19 = 4;
    v18 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_46;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_46:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "50pct");
  v27 = &off_1E5D3DBF0;
  v28 = (uint64_t *)a1;
  v29 = v26;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v20 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v21 = 4;
    v20 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_53;
    v21 = 5;
  }
  (*v20)[v21]();
LABEL_53:
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "75pct");
  v27 = &off_1E5D3DC48;
  v28 = (uint64_t *)a1;
  v29 = v26;
  v30 = (void ***)&v27;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v27, a3);
  v22 = (uint64_t (***)())v30;
  if (v30 == (void ***)&v27)
  {
    v23 = 4;
    v22 = &v27;
  }
  else
  {
    if (!v30)
      goto LABEL_60;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_60:
  if (v25 < 0)
    operator delete(__p[0]);
  v27 = (uint64_t (**)())v26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_1ADE2286C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  int v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string v22;
  std::string v23;
  std::string v24;
  void *__p[2];
  std::string::size_type v26;

  if (*(int *)a1 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      std::to_string(&v22, v8 + 1);
      v10 = std::string::insert(&v22, 0, "hyp");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v23, "_");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = *(char *)(a2 + 23);
      if (v14 >= 0)
        v15 = (const std::string::value_type *)a2;
      else
        v15 = *(const std::string::value_type **)a2;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      v17 = std::string::append(&v24, v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v26 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      v19 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (unsigned __int8 **)__p);
      if (v19 != *(_QWORD *)(a1 + 40))
      {
        v20 = v19;
        LODWORD(v24.__r_.__value_.__l.__data_) = v8;
        v21 = *(_QWORD *)(a3 + 24);
        if (!v21)
          std::__throw_bad_function_call[abi:ne180100]();
        *(float *)(*a4 - 0x5555555555555554 * ((v20 - *(_QWORD *)(a1 + 32)) >> 3)) = (*(float (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 48))(v21, &v24);
      }
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      ++v8;
    }
    while (v9 < *(_DWORD *)a1);
  }
}

void sub_1ADE22A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ExtractStd(uint64_t a1, float **a2, float a3)
{
  float *v3;
  float *v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  double v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float v16;
  double v17;
  float *v18;
  float v19;
  void *__p;
  float *v21;

  v4 = *a2;
  v3 = a2[1];
  v5 = (char *)v3 - (char *)*a2;
  v6 = v5 >> 2;
  if ((int)(v5 >> 2) > 1)
  {
    v7 = a3;
    if (a3 < 0.0)
    {
      if ((_DWORD)v6)
      {
        if (v4 == v3)
        {
          v11 = 0.0;
        }
        else
        {
          v9 = 0.0;
          do
          {
            v10 = *v4++;
            v9 = v9 + v10;
          }
          while (v4 != v3);
          v11 = v9;
        }
        v7 = v11 / (float)(int)v6;
      }
      else
      {
        v7 = *(float *)(a1 + 56);
      }
    }
    std::vector<float>::vector(&__p, (v5 >> 2));
    v12 = *a2;
    v13 = a2[1];
    v14 = (float *)__p;
    if (*a2 != v13)
    {
      v15 = (float *)__p;
      do
      {
        v16 = *v12++;
        *v15++ = v16 - v7;
      }
      while (v12 != v13);
    }
    if (v14 != v21)
    {
      v17 = 0.0;
      v18 = v14;
      do
      {
        v19 = *v18++;
        v17 = v17 + (float)(v19 * v19);
      }
      while (v18 != v21);
    }
    if (v14)
    {
      v21 = v14;
      operator delete(v14);
    }
  }
}

float kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMin(uint64_t a1, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v6;
  float *v7;
  float v8;
  float v9;

  v2 = *a2;
  v3 = a2[1];
  if ((((char *)v3 - (char *)*a2) & 0x3FFFFFFFCLL) != 0)
  {
    v4 = v2 + 1;
    if (v2 != v3 && v4 != v3)
    {
      v6 = *v2;
      v7 = v2 + 1;
      do
      {
        v8 = *v7++;
        v9 = v8;
        if (v8 < v6)
        {
          v6 = v9;
          v2 = v4;
        }
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
  else
  {
    v2 = (float *)(a1 + 56);
  }
  return *v2;
}

float kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMax(uint64_t a1, float **a2)
{
  float *v2;
  float *v3;
  float *v4;
  float v6;
  float *v7;
  float v8;
  float v9;

  v2 = *a2;
  v3 = a2[1];
  if ((((char *)v3 - (char *)*a2) & 0x3FFFFFFFCLL) != 0)
  {
    v4 = v2 + 1;
    if (v2 != v3 && v4 != v3)
    {
      v6 = *v2;
      v7 = v2 + 1;
      do
      {
        v8 = *v7++;
        v9 = v8;
        if (v6 < v8)
        {
          v6 = v9;
          v2 = v4;
        }
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
  else
  {
    v2 = (float *)(a1 + 56);
  }
  return *v2;
}

float kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  float v5;
  int v6;
  signed int v7;
  float v8;

  v3 = *a2;
  v4 = (unint64_t)(a2[1] - *a2) >> 2;
  if (!(_DWORD)v4)
    return *(float *)(a1 + 56);
  v5 = (float)((int)v4 - 1);
  v6 = vcvtms_s32_f32(v5 * a3);
  v7 = vcvtps_s32_f32(v5 * a3);
  v8 = *(float *)(v3 + 4 * v6);
  if (v7 != v6)
    return v8 + (float)((float)-(float)((float)v6 - (float)(a3 * v5)) * (float)(*(float *)(v3 + 4 * v7) - v8));
  return v8;
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3D9E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3D9E0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return (float)(unint64_t)((uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2 + 8)
                                           - *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2)) >> 2);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DA38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DA38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  double v6;
  float v7;
  float v8;

  v2 = **(_QWORD **)(a1 + 16) + 24 * *a2;
  v4 = *(float **)v2;
  v3 = *(float **)(v2 + 8);
  v5 = ((unint64_t)v3 - *(_QWORD *)v2) >> 2;
  if (!(_DWORD)v5)
    return *(float *)(*(_QWORD *)(a1 + 8) + 56);
  if (v4 == v3)
  {
    v8 = 0.0;
  }
  else
  {
    v6 = 0.0;
    do
    {
      v7 = *v4++;
      v6 = v6 + v7;
    }
    while (v4 != v3);
    v8 = v6;
  }
  return v8 / (float)(int)v5;
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DA90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DA90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractStd(*(_QWORD *)(a1 + 8), (float **)(**(_QWORD **)(a1 + 16) + 24 * *a2), -1.0);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DAE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DAE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMin(*(_QWORD *)(a1 + 8), (float **)(**(_QWORD **)(a1 + 16) + 24 * *a2));
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DB40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DB40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMax(*(_QWORD *)(a1 + 8), (float **)(**(_QWORD **)(a1 + 16) + 24 * *a2));
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DB98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DB98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(*(_QWORD *)(a1 + 8), (uint64_t *)(**(_QWORD **)(a1 + 16) + 24 * *a2), 0.25);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DBF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DBF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(*(_QWORD *)(a1 + 8), (uint64_t *)(**(_QWORD **)(a1 + 16) + 24 * *a2), 0.5);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3DC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(*(_QWORD *)(a1 + 8), (uint64_t *)(**(_QWORD **)(a1 + 16) + 24 * *a2), 0.75);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::target_type()
{
}

_QWORD *quasar::LinkAlternativesOptions::options@<X0>(quasar::LinkAlternativesOptions *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  _QWORD *result;

  v3 = (char *)this + 160;
  v4 = *(_QWORD *)(*((_QWORD *)this + 20) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = v3 - 144;
  result[1] = &v3[v4];
  *a2 = result;
  return result;
}

const char *quasar::LinkAlternativesBlock::blockType(quasar::LinkAlternativesBlock *this)
{
  return "LinkAlternativesBlock";
}

const char *`virtual thunk to'quasar::LinkAlternativesBlock::blockType(quasar::LinkAlternativesBlock *this)
{
  return "LinkAlternativesBlock";
}

void quasar::LinkAlternativesBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  quasar::MetaInfo *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _BOOL8 v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  __int128 v56;
  int64x2_t v57;
  void *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::string::size_type size;
  std::string::size_type v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  void *v73;
  uint64_t *Senses;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::string::size_type v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int8 *v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  void **v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __int128 v98;
  int64x2_t v99;
  void *v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::string::__raw *v114;
  std::string::size_type v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  BOOL v122;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  std::string *v129;
  std::string *v130;
  char *v131;
  _DWORD *v132;
  int v133;
  BOOL v134;
  _DWORD *v135;
  _DWORD *v136;
  int v137;
  BOOL v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  quasar::TranslationPhraseInternal *v146;
  quasar::TranslationPhraseInternal *v147;
  char *v148;
  unint64_t v149;
  uint64_t *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *SpanForSourceRange;
  uint64_t v156;
  _DWORD *v157;
  uint64_t **v158;
  unint64_t v159;
  BOOL v160;
  uint64_t v161;
  int64_t v162;
  std::string::size_type v163;
  unint64_t v164;
  uint64_t **v165;
  uint64_t *v166;
  std::string::size_type v167;
  uint64_t *v168;
  uint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  char *v174;
  _QWORD *v175;
  _DWORD *v176;
  _DWORD *v177;
  _DWORD *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  char *v185;
  _DWORD *v186;
  char *v187;
  int v188;
  int v189;
  BOOL v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  int v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  void *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  uint64_t *v251;
  uint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  char *v261;
  __int128 v262;
  int64x2_t v263;
  void *v264;
  _QWORD *v265;
  uint64_t **i;
  void *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  int v273;
  int v274;
  _BOOL4 v275;
  _BOOL4 v276;
  char *v277;
  char *v278;
  uint64_t *v279;
  uint64_t *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  _BYTE *v291;
  int v292;
  uint64_t j;
  _QWORD *k;
  int *v295;
  uint64_t *v296;
  int v297;
  int v298;
  std::string::size_type v299;
  std::string::size_type v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int *v305;
  std::string::size_type v306;
  uint64_t *v307;
  std::string::size_type v308;
  int *v309;
  int *v310;
  uint64_t *v311;
  uint64_t *v312;
  void **v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  void **v319;
  void **v320;
  void **v321;
  void **v322;
  int v323;
  void **v324;
  void **v325;
  void **v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  void **v330;
  void **v331;
  std::string::size_type *v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  uint64_t v337;
  char v338;
  char *v339;
  quasar::TranslationPhraseInternal *v340;
  quasar::TranslationPhraseInternal **v341;
  quasar::MetaInfo *v342;
  unint64_t v343;
  quasar::TranslationPhraseInternal *v344;
  quasar::TranslationPhraseInternal *v345;
  int64_t v346;
  unint64_t v347;
  uint64_t **v348;
  int v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  std::string::size_type v353;
  std::string::size_type v354;
  std::string::size_type v355;
  __int128 v356;
  uint64_t v357;
  _QWORD v358[3];
  std::string v359;
  __int128 v360;
  uint64_t v361;
  char *v362;
  char *v363;
  unint64_t v364;
  void *__p[2];
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  _QWORD *v369;
  unint64_t v370;
  uint64_t *v371[3];
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void *v375[2];
  uint64_t v376;
  int v377;
  unsigned int v378;
  __int128 v379;
  unint64_t v380;
  char v381;
  int64x2_t v382;
  _QWORD v383[4];
  std::string v384;
  std::string *v385;
  void *v386[4];
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  unint64_t v403[4];

  v403[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)((char *)a1 + *(_QWORD *)(a1[21] - 24) + 168)))
  {
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
    return;
  }
  v335 = a1;
  v402 = 0uLL;
  v403[0] = 0;
  v363 = 0;
  v364 = 0;
  v362 = 0;
  v5 = a3[1] - *a3;
  if (v5)
  {
    v6 = 0x8F5C28F5C28F5C29 * (v5 >> 3);
    if (v6 > 0x333333333333333)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v386[3] = 0;
    *(_QWORD *)&v387 = &v364;
    v386[0] = operator new(0xCCCCCCCCCCCCCCD0 * (v5 >> 3));
    v386[1] = v386[0];
    v386[2] = v386[0];
    v386[3] = (char *)v386[0] + 80 * v6;
    v340 = (quasar::TranslationPhraseInternal *)a3[1];
    if ((quasar::TranslationPhraseInternal *)*a3 != v340)
    {
      v7 = (char *)*a3;
      while (1)
      {
        v344 = (quasar::TranslationPhraseInternal *)v7;
        v8 = (quasar::MetaInfo *)(v7 + 192);
        LOBYTE(v368) = 0;
        BYTE4(v368) = 0;
        memset(&v384, 0, sizeof(v384));
        v9 = quasar::MetaInfo::structuredPrediction((uint64_t *)v7 + 24, (uint64_t)"gender", 6);
        if (v9)
        {
          v342 = v8;
          LODWORD(v368) = *(_DWORD *)(v9 + 24);
          BYTE4(v368) = 1;
          memset(&v359, 0, sizeof(v359));
          v11 = *(_QWORD *)(v9 + 32);
          v10 = *(_QWORD *)(v9 + 40);
          while (v11 != v10)
          {
            v12 = *(_QWORD *)(v11 + 56);
            v13 = *(_QWORD *)(v11 + 64);
            if (v12 == v13)
            {
              if (quasar::gLogLevel >= 2)
              {
                v400 = 0u;
                v401 = 0u;
                v398 = 0u;
                v399 = 0u;
                v396 = 0u;
                v397 = 0u;
                v394 = 0u;
                v395 = 0u;
                v392 = 0u;
                v393 = 0u;
                v390 = 0u;
                v391 = 0u;
                v388 = 0u;
                v389 = 0u;
                v387 = 0u;
                memset(v386, 0, sizeof(v386));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v386);
                v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"[LinkAlternatives validation failure]: Structured prediction information is incomplete for source span ", 103);
                v32 = quasar::operator<<(v31);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": projections are missing. Skipping span.", 41);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v386);
              }
            }
            else
            {
              v14 = v13 - v12;
              if ((unint64_t)v14 >= 9 && quasar::gLogLevel >= 2)
              {
                v400 = 0u;
                v401 = 0u;
                v398 = 0u;
                v399 = 0u;
                v396 = 0u;
                v397 = 0u;
                v394 = 0u;
                v395 = 0u;
                v392 = 0u;
                v393 = 0u;
                v390 = 0u;
                v391 = 0u;
                v388 = 0u;
                v389 = 0u;
                v387 = 0u;
                memset(v386, 0, sizeof(v386));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v386);
                v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"[LinkAlternatives validation failure]: Structured prediction generated more than one projection for gender alternative for source span: ", 136);
                quasar::operator<<(v16);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v386);
                v14 = *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56);
              }
              __p[0] = 0;
              __p[1] = 0;
              *(_QWORD *)&v366 = 0;
              std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(__p, v14 >> 3);
              v17 = *(unsigned int **)(v11 + 56);
              v18 = *(unsigned int **)(v11 + 64);
              if (v17 != v18)
              {
                v19 = (unint64_t *)__p[1];
                do
                {
                  v20 = *v17 | ((unint64_t)(v17[1] - *v17 + 1) << 32);
                  if ((unint64_t)v19 >= (unint64_t)v366)
                  {
                    v21 = ((char *)v19 - (char *)__p[0]) >> 3;
                    if ((unint64_t)(v21 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v22 = (uint64_t)(v366 - (unint64_t)__p[0]) >> 2;
                    if (v22 <= v21 + 1)
                      v22 = v21 + 1;
                    if ((unint64_t)v366 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
                      v23 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v23 = v22;
                    if (v23)
                      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v366, v23);
                    else
                      v24 = 0;
                    v25 = (unint64_t *)&v24[8 * v21];
                    *v25 = v20;
                    v19 = v25 + 1;
                    v27 = (char *)__p[0];
                    v26 = (char *)__p[1];
                    if (__p[1] != __p[0])
                    {
                      do
                      {
                        v28 = *((_QWORD *)v26 - 1);
                        v26 -= 8;
                        *--v25 = v28;
                      }
                      while (v26 != v27);
                      v26 = (char *)__p[0];
                    }
                    __p[0] = v25;
                    __p[1] = v19;
                    *(_QWORD *)&v366 = &v24[8 * v23];
                    if (v26)
                      operator delete(v26);
                  }
                  else
                  {
                    *v19++ = v20;
                  }
                  __p[1] = v19;
                  v17 += 2;
                }
                while (v17 != v18);
              }
              if (*(char *)(v11 + 23) < 0)
              {
                v30 = *(_DWORD **)v11;
                v29 = *(_QWORD *)(v11 + 8);
              }
              else
              {
                v29 = *(unsigned __int8 *)(v11 + 23);
                v30 = (_DWORD *)v11;
              }
              v33 = v29 != 4 || *v30 != 1162625357;
              if (*(char *)(v11 + 47) < 0)
              {
                v34 = *(_DWORD **)(v11 + 24);
                v35 = *(_QWORD *)(v11 + 32);
              }
              else
              {
                v34 = (_DWORD *)(v11 + 24);
                v35 = *(unsigned __int8 *)(v11 + 47);
              }
              v36 = v35 != 4 || *v34 != 1162625357;
              v372 = *(unsigned int *)(v11 + 48) | ((unint64_t)(*(_DWORD *)(v11 + 52)
                                                                                   - *(_DWORD *)(v11 + 48)
                                                                                   + 1) << 32);
              v375[0] = (void *)(v33 | (v36 << 32));
              v38 = *((_QWORD *)&v402 + 1);
              v37 = v402;
              if ((_QWORD)v402 == *((_QWORD *)&v402 + 1))
                goto LABEL_59;
              while (1)
              {
                v39 = *(_DWORD **)v37;
                if (*(_QWORD *)v37)
                {
                  if (!v39[6] && quasar::operator==(v39, v375))
                    break;
                }
                v37 += 16;
                if (v37 == v38)
                {
                  v37 = v38;
                  break;
                }
              }
              if (v37 == *((_QWORD *)&v402 + 1))
              {
LABEL_59:
                v43 = operator new(0x38uLL);
                v44 = v43;
                v43[2] = 0;
                v43[3] = v375[0];
                v45 = (char *)(v43 + 3);
                *v43 = &unk_1E5D45938;
                v43[1] = 0;
                *((_DWORD *)v43 + 12) = 0;
                *(_QWORD *)&v379 = v43 + 3;
                *((_QWORD *)&v379 + 1) = v43;
                if (v37 >= v403[0])
                {
                  v47 = (uint64_t)(v37 - v402) >> 4;
                  if ((unint64_t)(v47 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v48 = (uint64_t)(v403[0] - v402) >> 3;
                  if (v48 <= v47 + 1)
                    v48 = v47 + 1;
                  if (v403[0] - (unint64_t)v402 >= 0x7FFFFFFFFFFFFFF0)
                    v49 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v49 = v48;
                  *(_QWORD *)&v387 = v403;
                  v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v403, v49);
                  v52 = &v50[16 * v47];
                  *(_QWORD *)v52 = v45;
                  *((_QWORD *)v52 + 1) = v44;
                  v379 = 0uLL;
                  v53 = (_QWORD *)*((_QWORD *)&v402 + 1);
                  v54 = (_QWORD *)v402;
                  if (*((_QWORD *)&v402 + 1) == (_QWORD)v402)
                  {
                    v57 = vdupq_n_s64(*((unint64_t *)&v402 + 1));
                    v55 = &v50[16 * v47];
                  }
                  else
                  {
                    v55 = &v50[16 * v47];
                    do
                    {
                      v56 = *((_OWORD *)v53 - 1);
                      v53 -= 2;
                      *((_OWORD *)v55 - 1) = v56;
                      v55 -= 16;
                      *v53 = 0;
                      v53[1] = 0;
                    }
                    while (v53 != v54);
                    v57 = (int64x2_t)v402;
                  }
                  v46 = v52 + 16;
                  *(_QWORD *)&v402 = v55;
                  *((_QWORD *)&v402 + 1) = v52 + 16;
                  *(int64x2_t *)&v386[1] = v57;
                  v58 = (void *)v403[0];
                  v403[0] = (unint64_t)&v50[16 * v51];
                  v386[3] = v58;
                  v386[0] = (void *)v57.i64[0];
                  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v386);
                }
                else
                {
                  *(_QWORD *)v37 = v45;
                  *(_QWORD *)(v37 + 8) = v43;
                  v46 = (_QWORD *)(v37 + 16);
                  v379 = 0uLL;
                }
                *((_QWORD *)&v402 + 1) = v46;
                v382.i64[0] = *(v46 - 2);
                v59 = *(v46 - 1);
                v382.i64[1] = v59;
                if (v59)
                {
                  v60 = (unint64_t *)(v59 + 8);
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                }
              }
              else
              {
                v40 = *(_QWORD *)(v37 + 8);
                v382.i64[0] = *(_QWORD *)v37;
                v382.i64[1] = v40;
                if (v40)
                {
                  v41 = (unint64_t *)(v40 + 8);
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
              }
              size = v359.__r_.__value_.__l.__size_;
              if (v359.__r_.__value_.__l.__size_ >= v359.__r_.__value_.__r.__words[2])
              {
                v64 = 0x6DB6DB6DB6DB6DB7
                    * ((uint64_t)(v359.__r_.__value_.__l.__size_ - v359.__r_.__value_.__r.__words[0]) >> 3);
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) > 0x492492492492492)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0xDB6DB6DB6DB6DB6ELL
                   * ((uint64_t)(v359.__r_.__value_.__r.__words[2] - v359.__r_.__value_.__r.__words[0]) >> 3) > v65)
                  v65 = 0xDB6DB6DB6DB6DB6ELL
                      * ((uint64_t)(v359.__r_.__value_.__r.__words[2] - v359.__r_.__value_.__r.__words[0]) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                      * ((uint64_t)(v359.__r_.__value_.__r.__words[2] - v359.__r_.__value_.__r.__words[0]) >> 3)) >= 0x249249249249249)
                  v66 = 0x492492492492492;
                else
                  v66 = v65;
                *(_QWORD *)&v387 = (char *)&v359.__r_.__value_.__l + 16;
                if (v66)
                else
                  v67 = 0;
                v386[0] = (void *)v66;
                v386[1] = (void *)(v66 + 56 * v64);
                v386[2] = v386[1];
                v386[3] = (void *)(v66 + 56 * v67);
                v386[2] = (char *)v386[2] + 56;
                v63 = v359.__r_.__value_.__l.__size_;
              }
              else
              {
                v63 = size + 56;
              }
              v359.__r_.__value_.__l.__size_ = v63;
              v68 = (std::__shared_weak_count *)v382.i64[1];
              if (v382.i64[1])
              {
                v69 = (unint64_t *)(v382.i64[1] + 8);
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            v11 += 80;
          }
          v71 = v384.__r_.__value_.__r.__words[0];
          v8 = v342;
          if (v384.__r_.__value_.__r.__words[0])
          {
            v72 = v384.__r_.__value_.__l.__size_;
            v73 = (void *)v384.__r_.__value_.__r.__words[0];
            if (v384.__r_.__value_.__l.__size_ != v384.__r_.__value_.__r.__words[0])
            {
              do
              {
                v72 -= 56;
              }
              while (v72 != v71);
              v73 = (void *)v384.__r_.__value_.__r.__words[0];
            }
            v384.__r_.__value_.__l.__size_ = v71;
            operator delete(v73);
          }
          v384 = v359;
          memset(&v359, 0, sizeof(v359));
          v386[0] = &v359;
        }
        if (quasar::MetaInfo::hasSenses(v8))
          break;
        v382 = 0uLL;
        v383[0] = 0;
LABEL_163:
        quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v375, v344);
        *(_OWORD *)&v359.__r_.__value_.__r.__words[1] = 0uLL;
        v359.__r_.__value_.__r.__words[0] = (std::string::size_type)&v359.__r_.__value_.__l.__size_;
        v371[0] = (uint64_t *)&v359;
        v379 = 0uLL;
        v380 = 0;
        v114 = (std::string::__raw *)v359.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v359.__r_.__value_.__l.__data_ == &v359.__r_.__value_.__r.__words[1])
          goto LABEL_201;
        do
        {
          v115 = v114[1].__words[2];
          __p[0] = *(void **)v115;
          v366 = 0uLL;
          __p[1] = 0;
          std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(&__p[1], *(const void **)(v115 + 8), *(_QWORD *)(v115 + 16), (uint64_t)(*(_QWORD *)(v115 + 16) - *(_QWORD *)(v115 + 8)) >> 3);
          std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100]((uint64_t *)&v367, v115 + 32);
          v116 = (_QWORD *)v114[1].__words[2];
          v117 = v116 + 7;
          if (v116 + 7 == (_QWORD *)v114[2].__words[0])
          {
LABEL_180:
          }
          else
          {
            while (1)
            {
              v118 = v117;
              v120 = __p[1];
              v119 = (_DWORD *)v366;
              v121 = (_DWORD *)v116[8];
              if ((_QWORD)v366 - (unint64_t)__p[1] != v116[9] - (_QWORD)v121)
                break;
              if (__p[1] != (void *)v366)
              {
                do
                {
                  v122 = quasar::operator==(v120, v121);
                  v120 += 2;
                  v121 += 2;
                }
                while (v120 != v119 && v122);
                if (!v122)
                  break;
              }
              v124 = (_QWORD *)v116[11];
              if (v124 != v116 + 12)
              {
                do
                {
                  std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>((uint64_t **)&v367, v124 + 4, v124 + 4);
                  v125 = (_QWORD *)v124[1];
                  if (v125)
                  {
                    do
                    {
                      v126 = v125;
                      v125 = (_QWORD *)*v125;
                    }
                    while (v125);
                  }
                  else
                  {
                    do
                    {
                      v126 = (_QWORD *)v124[2];
                      v190 = *v126 == (_QWORD)v124;
                      v124 = v126;
                    }
                    while (!v190);
                  }
                  v124 = v126;
                }
                while (v126 != v116 + 12);
              }
              v117 = v118 + 7;
              v116 = v118;
              if (v118 + 7 == (_QWORD *)v114[2].__words[0])
                goto LABEL_180;
            }
            if (quasar::gLogLevel >= 2)
            {
              v400 = 0u;
              v401 = 0u;
              v398 = 0u;
              v399 = 0u;
              v396 = 0u;
              v397 = 0u;
              v394 = 0u;
              v395 = 0u;
              v392 = 0u;
              v393 = 0u;
              v390 = 0u;
              v391 = 0u;
              v388 = 0u;
              v389 = 0u;
              v387 = 0u;
              memset(v386, 0, sizeof(v386));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v386);
              v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"[LinkAlternatives validation failure]: Projections mismatch for source span ", 76);
              v128 = quasar::operator<<(v127);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)". Exclude this source span from results.", 40);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v386);
            }
          }
          std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)&v367, *((_QWORD **)&v367 + 1));
          if (__p[1])
          {
            *(void **)&v366 = __p[1];
            operator delete(__p[1]);
          }
          v129 = (std::string *)v114->__words[1];
          if (v129)
          {
            do
            {
              v130 = v129;
              v129 = (std::string *)v129->__r_.__value_.__r.__words[0];
            }
            while (v129);
          }
          else
          {
            do
            {
              v130 = (std::string *)v114->__words[2];
              v190 = v130->__r_.__value_.__r.__words[0] == (_QWORD)v114;
              v114 = (std::string::__raw *)v130;
            }
            while (!v190);
          }
          v114 = (std::string::__raw *)v130;
        }
        while (v130 != (std::string *)&v359.__r_.__value_.__r.__words[1]);
        v131 = (char *)*((_QWORD *)&v379 + 1);
        v132 = (_DWORD *)v379;
        if ((_QWORD)v379 == *((_QWORD *)&v379 + 1))
        {
LABEL_201:
          v372 = 0;
          v373 = 0;
          v374 = 0;
        }
        else
        {
          v372 = 0;
          v373 = 0;
          v374 = 0;
          if ((_QWORD)v379 + 56 == *((_QWORD *)&v379 + 1))
          {
            v135 = (_DWORD *)v379;
          }
          else
          {
            do
            {
              if (quasar::operator==(v132, v132 + 14)
                || ((v133 = v132[14], *v132 < v132[15] + v133) ? (v134 = v133 < v132[1] + *v132) : (v134 = 0), !v134))
              {
              }
              v135 = v132 + 14;
              v136 = v132 + 28;
              v132 += 14;
            }
            while (v136 != *((_DWORD **)&v379 + 1));
            v132 = (_DWORD *)v379;
            v131 = (char *)(v135 + 14);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v131 - (char *)v132) >> 3)) < 2
            || quasar::operator==(v135 - 14, v135)
            || ((v137 = *(v135 - 14), v137 < v135[1] + *v135) ? (v138 = *v135 < *(v135 - 13) + v137) : (v138 = 0), !v138))
          {
          }
        }
        v386[0] = &v379;
        v139 = v363;
        if ((unint64_t)v363 >= v364)
        {
          v141 = 0xCCCCCCCCCCCCCCCDLL * ((v363 - v362) >> 4);
          v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) > 0x333333333333333)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(v364 - (_QWORD)v362) >> 4) > v142)
            v142 = 0x999999999999999ALL * ((uint64_t)(v364 - (_QWORD)v362) >> 4);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v364 - (_QWORD)v362) >> 4) >= 0x199999999999999)
            v143 = 0x333333333333333;
          else
            v143 = v142;
          v386[2] = (char *)v386[2] + 80;
          v140 = v363;
        }
        else
        {
          v140 = v139 + 80;
        }
        v363 = v140;
        v386[0] = &v372;
        if (SHIBYTE(v376) < 0)
          operator delete(v375[0]);
        v386[0] = &v382;
        v386[0] = &v384;
        v7 = (char *)v344 + 200;
        if ((quasar::TranslationPhraseInternal *)((char *)v344 + 200) == v340)
          goto LABEL_222;
      }
      Senses = (uint64_t *)quasar::MetaInfo::getSenses(v8);
      v383[0] = 0;
      v382 = 0uLL;
      v75 = *Senses;
      v76 = Senses[1];
      while (1)
      {
        if (v75 == v76)
          goto LABEL_163;
        if (*(char *)(v75 + 47) < 0)
        {
          v78 = *(_QWORD *)(v75 + 32);
          if (!v78)
            goto LABEL_161;
          v372 = *(_QWORD *)(v75 + 96);
          v77 = *(_QWORD *)(v75 + 128);
          std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)(v75 + 24), v78);
        }
        else
        {
          if (!*(_BYTE *)(v75 + 47))
            goto LABEL_161;
          v372 = *(_QWORD *)(v75 + 96);
          v77 = *(_QWORD *)(v75 + 128);
          v359 = *(std::string *)(v75 + 24);
        }
        *(_OWORD *)__p = *(_OWORD *)&v359.__r_.__value_.__l.__data_;
        *(_QWORD *)&v366 = *((_QWORD *)&v359.__r_.__value_.__l + 2);
        memset(&v359, 0, sizeof(v359));
        v80 = *((_QWORD *)&v402 + 1);
        v79 = v402;
        if ((_QWORD)v402 == *((_QWORD *)&v402 + 1))
          goto LABEL_121;
        while (1)
        {
          v81 = *(unsigned __int8 **)v79;
          if (*(_QWORD *)v79)
          {
            if (*((_DWORD *)v81 + 6) == 1
              && quasar::VoiceCommandActiveSetCompilation::Suite::operator==(v81, (unsigned __int8 *)__p))
            {
              break;
            }
          }
          v79 += 16;
          if (v79 == v80)
          {
            v79 = v80;
            break;
          }
        }
        if (v79 == *((_QWORD *)&v402 + 1))
        {
LABEL_121:
          v85 = (char *)operator new(0x38uLL);
          v86 = v85;
          *((_QWORD *)v85 + 1) = 0;
          *((_QWORD *)v85 + 2) = 0;
          *(_QWORD *)v85 = &unk_1E5D45938;
          v87 = v85 + 24;
          *(_OWORD *)(v85 + 24) = *(_OWORD *)__p;
          *((_QWORD *)v85 + 5) = v366;
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v366 = 0;
          *((_DWORD *)v85 + 12) = 1;
          *(_QWORD *)&v379 = v85 + 24;
          *((_QWORD *)&v379 + 1) = v85;
          if (v79 >= v403[0])
          {
            v89 = (uint64_t)(v79 - v402) >> 4;
            if ((unint64_t)(v89 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v90 = (uint64_t)(v403[0] - v402) >> 3;
            if (v90 <= v89 + 1)
              v90 = v89 + 1;
            if (v403[0] - (unint64_t)v402 >= 0x7FFFFFFFFFFFFFF0)
              v91 = 0xFFFFFFFFFFFFFFFLL;
            else
              v91 = v90;
            *(_QWORD *)&v387 = v403;
            v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v403, v91);
            v94 = &v92[16 * v89];
            *(_QWORD *)v94 = v87;
            *((_QWORD *)v94 + 1) = v86;
            v95 = (_QWORD *)*((_QWORD *)&v402 + 1);
            v96 = (_QWORD *)v402;
            if (*((_QWORD *)&v402 + 1) == (_QWORD)v402)
            {
              v99 = vdupq_n_s64(*((unint64_t *)&v402 + 1));
              v97 = &v92[16 * v89];
            }
            else
            {
              v97 = &v92[16 * v89];
              do
              {
                v98 = *((_OWORD *)v95 - 1);
                v95 -= 2;
                *((_OWORD *)v97 - 1) = v98;
                v97 -= 16;
                *v95 = 0;
                v95[1] = 0;
              }
              while (v95 != v96);
              v99 = (int64x2_t)v402;
            }
            v88 = (void **)(v94 + 16);
            *(_QWORD *)&v402 = v97;
            *((_QWORD *)&v402 + 1) = v94 + 16;
            *(int64x2_t *)&v386[1] = v99;
            v100 = (void *)v403[0];
            v403[0] = (unint64_t)&v92[16 * v93];
            v386[3] = v100;
            v386[0] = (void *)v99.i64[0];
            std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v386);
          }
          else
          {
            *(_QWORD *)v79 = v87;
            *(_QWORD *)(v79 + 8) = v85;
            v88 = (void **)(v79 + 16);
          }
          *((_QWORD *)&v402 + 1) = v88;
          v375[0] = *(v88 - 2);
          v101 = (unint64_t *)*(v88 - 1);
          v375[1] = v101;
          if (v101)
          {
            v102 = v101 + 1;
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
          }
        }
        else
        {
          v82 = *(unint64_t **)(v79 + 8);
          v375[0] = *(void **)v79;
          v375[1] = v82;
          if (v82)
          {
            v83 = v82 + 1;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
        }
        if (SBYTE7(v366) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v359.__r_.__value_.__l.__data_);
        v104 = operator new(8uLL);
        *(_QWORD *)&v379 = v104;
        *v104 = v77;
        *((_QWORD *)&v379 + 1) = v104 + 1;
        v380 = (unint64_t)(v104 + 1);
        v105 = v382.i64[1];
        if (v382.i64[1] >= v383[0])
        {
          v107 = 0x6DB6DB6DB6DB6DB7 * ((v382.i64[1] - v382.i64[0]) >> 3);
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) > 0x492492492492492)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0xDB6DB6DB6DB6DB6ELL * ((v383[0] - v382.i64[0]) >> 3) > v108)
            v108 = 0xDB6DB6DB6DB6DB6ELL * ((v383[0] - v382.i64[0]) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v383[0] - v382.i64[0]) >> 3)) >= 0x249249249249249)
            v109 = 0x492492492492492;
          else
            v109 = v108;
          *(_QWORD *)&v387 = v383;
          if (v109)
          else
            v110 = 0;
          v386[0] = (void *)v109;
          v386[1] = (void *)(v109 + 56 * v107);
          v386[2] = v386[1];
          v386[3] = (void *)(v109 + 56 * v110);
          v386[2] = (char *)v386[2] + 56;
          v106 = v382.i64[1];
        }
        else
        {
          v106 = v105 + 56;
        }
        v382.i64[1] = v106;
        if ((_QWORD)v379)
          operator delete((void *)v379);
        v111 = (std::__shared_weak_count *)v375[1];
        if (v375[1])
        {
          v112 = (unint64_t *)((char *)v375[1] + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
LABEL_161:
        v75 += 296;
      }
    }
  }
LABEL_222:
  v386[0] = &v402;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v372 = 0;
  v373 = 0;
  v374 = 0;
  std::vector<std::unordered_set<int>>::reserve((uint64_t *)&v372, 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  memset(v371, 0, sizeof(v371));
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::reserve((uint64_t *)v371, 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  if (a3[1] == *a3)
    goto LABEL_428;
  v144 = 0;
  do
  {
    v369 = 0;
    v370 = 0;
    v368 = 0;
    v145 = &v362[80 * v144];
    v146 = (quasar::TranslationPhraseInternal *)*((_QWORD *)v145 + 6);
    v378 = v144;
    v341 = (quasar::TranslationPhraseInternal **)(v145 + 48);
    v148 = v145 + 56;
    v147 = (quasar::TranslationPhraseInternal *)*((_QWORD *)v145 + 7);
    v339 = v148;
    v377 = 0;
    v337 = v144;
    if (v147 == v146)
    {
      memset(v386, 0, sizeof(v386));
      LODWORD(v387) = 1065353216;
      goto LABEL_427;
    }
    v149 = 0;
    do
    {
      v150 = (uint64_t *)((char *)v146 + 56 * v149);
      v382 = 0uLL;
      v383[0] = 0;
      *(_OWORD *)__p = 0u;
      v366 = 0u;
      LODWORD(v367) = 1065353216;
      v151 = v362;
      v343 = v149;
      v345 = v146;
      if (v363 == v362)
      {
LABEL_390:
        *(int64x2_t *)v375 = v382;
        v376 = v383[0];
        v383[0] = 0;
        v382 = 0uLL;
        goto LABEL_391;
      }
      v152 = 0;
      v338 = 0;
      v153 = v378;
      v349 = v378;
      v350 = v378;
      while (2)
      {
        if (v152 == v153)
          goto LABEL_262;
        v154 = (uint64_t)&v151[80 * v349];
        if (!SpanForSourceRange
          || (v156 = (uint64_t)&v151[80 * v152],
          || *((_QWORD *)SpanForSourceRange + 2) - *((_QWORD *)SpanForSourceRange + 1) > 8uLL
          || *((_QWORD *)v157 + 2) - *((_QWORD *)v157 + 1) > 8uLL)
        {
LABEL_261:
          v153 = v350;
          goto LABEL_262;
        }
        v158 = (uint64_t **)v386[0];
        v159 = ((char *)v386[1] - (char *)v386[0]) >> 3;
        v348 = (uint64_t **)v402;
        v160 = v159 == (uint64_t)(*((_QWORD *)&v402 + 1) - v402) >> 3;
        if (v386[1] == v386[0] || v159 != (uint64_t)(*((_QWORD *)&v402 + 1) - v402) >> 3)
        {
          if (!(_QWORD)v402)
            goto LABEL_245;
        }
        else
        {
          v161 = 0;
          v160 = 0;
          if (v159 <= 1)
            v162 = 1;
          else
            v162 = ((char *)v386[1] - (char *)v386[0]) >> 3;
          v346 = v162;
          v347 = ((char *)v386[1] - (char *)v386[0]) >> 3;
          do
          {
            v163 = v384.__r_.__value_.__r.__words[0];
            v164 = v152;
            v165 = v158;
            v166 = v150;
            v167 = v384.__r_.__value_.__l.__size_;
            v385 = &v384;
            std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v385);
            v190 = v163 == v167;
            v150 = v166;
            v158 = v165;
            v152 = v164;
            if (!v190)
              break;
            v160 = v347 <= ++v161;
          }
          while (v346 != v161);
        }
        operator delete(v348);
LABEL_245:
        if (v158)
          operator delete(v158);
        if (!v160)
          goto LABEL_261;
        if (!v168)
          goto LABEL_261;
        if (!v169)
          goto LABEL_261;
        if ((void *)((char *)v386[1] - (char *)v386[0]) == (void *)16)
        {
          v170 = *(_QWORD *)v386[0];
          v153 = v350;
          if (*(_DWORD *)(*(_QWORD *)v386[0] + 24))
            goto LABEL_252;
          if (v151[80 * v349 + 76] && v151[80 * v152 + 76])
          {
            if (*(_DWORD *)&v151[80 * v349 + 72] == *(_DWORD *)&v151[80 * v152 + 72])
              goto LABEL_252;
          }
          else if ((v151[80 * v349 + 76] != 0) == (v151[80 * v152 + 76] != 0))
          {
LABEL_252:
            v171 = (std::__shared_weak_count *)*((_QWORD *)v386[0] + 1);
            v383[2] = *(_QWORD *)v386[0];
            v383[3] = v171;
            if (v171)
            {
              p_shared_owners = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldxr(p_shared_owners);
              while (__stxr(v173 + 1, p_shared_owners));
            }
            v174 = &v151[80 * v152];
            v177 = (_DWORD *)*((_QWORD *)v174 + 6);
            v175 = v174 + 48;
            v176 = v177;
            v178 = (_DWORD *)v175[1];
            if (v177 == v178)
            {
              v179 = 0;
              v153 = v350;
            }
            else
            {
              while (!quasar::operator==(v176, v150))
              {
                v176 += 14;
                if (v176 == v178)
                {
                  v176 = v178;
                  break;
                }
              }
              v153 = v350;
              if (v176 == (_DWORD *)v175[1])
                v179 = 0;
              else
                v179 = (unint64_t)(-1227133513 * (((unint64_t)v176 - *v175) >> 3)) << 32;
            }
            if (v171)
            {
              v180 = (unint64_t *)&v171->__shared_owners_;
              do
                v181 = __ldxr(v180);
              while (__stxr(v181 + 1, v180));
              *(_QWORD *)&v379 = v170;
              *((_QWORD *)&v379 + 1) = v171;
              v380 = v179 | v152;
              v381 = 1;
              do
                v182 = __ldaxr(v180);
              while (__stlxr(v182 - 1, v180));
              if (!v182)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            else
            {
              v379 = v170;
              v380 = v179 | v152;
              v381 = 1;
            }
            goto LABEL_281;
          }
          LOBYTE(v379) = 0;
          v381 = 0;
        }
        else
        {
          LOBYTE(v379) = 0;
          v381 = 0;
          v153 = v350;
        }
LABEL_281:
        *(_QWORD *)&v402 = v386;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v402);
        if (!v381)
          goto LABEL_262;
        v183 = v379;
        v184 = *(_DWORD *)(v379 + 24);
        if (v184 != 1)
        {
          if (v184)
            goto LABEL_339;
          v185 = &v151[80 * v349];
          v186 = v185 + 72;
          v187 = &v151[80 * v152];
          v188 = v185[76];
          v189 = v187[76];
          if (v188)
            v190 = v189 == 0;
          else
            v190 = 1;
          if (v190)
          {
            if ((v188 != 0) != (v189 != 0))
              goto LABEL_339;
          }
          else if (*v186 != *((_DWORD *)v187 + 18))
          {
            goto LABEL_339;
          }
          if ((v338 & 1) != 0)
          {
            if (quasar::gLogLevel >= 2)
            {
              v400 = 0u;
              v401 = 0u;
              v398 = 0u;
              v399 = 0u;
              v396 = 0u;
              v397 = 0u;
              v394 = 0u;
              v395 = 0u;
              v392 = 0u;
              v393 = 0u;
              v390 = 0u;
              v391 = 0u;
              v388 = 0u;
              v389 = 0u;
              v387 = 0u;
              memset(v386, 0, sizeof(v386));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v386);
              v212 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"[LinkAlternatives validation failure]: More than 1 gender alternative for source span ", 86);
              v213 = quasar::operator<<(v212);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, (uint64_t)" and groupId ", 13);
              v265 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, (uint64_t)". No alternatives will be produced.", 35);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v386);
            }
            v233 = 0;
            v375[0] = 0;
            v375[1] = 0;
            v338 = 1;
            v376 = 0;
          }
          else
          {
            v237 = (_QWORD *)v382.i64[1];
            if (v382.i64[1] >= v383[0])
            {
              v247 = 0xAAAAAAAAAAAAAAABLL * ((v382.i64[1] - v382.i64[0]) >> 3);
              v248 = v247 + 1;
              if (v247 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v383[0] - v382.i64[0]) >> 3) > v248)
                v248 = 0x5555555555555556 * ((v383[0] - v382.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v383[0] - v382.i64[0]) >> 3) >= 0x555555555555555)
                v249 = 0xAAAAAAAAAAAAAAALL;
              else
                v249 = v248;
              *(_QWORD *)&v387 = v383;
              if (v249)
                v250 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v383, v249);
              else
                v250 = 0;
              v255 = (uint64_t *)&v250[24 * v247];
              v386[0] = v250;
              v386[1] = v255;
              v386[3] = &v250[24 * v249];
              *v255 = v183;
              v256 = *((_QWORD *)&v379 + 1);
              v255[1] = *((_QWORD *)&v379 + 1);
              if (v256)
              {
                v257 = (unint64_t *)(v256 + 8);
                do
                  v258 = __ldxr(v257);
                while (__stxr(v258 + 1, v257));
              }
              *(_QWORD *)&v250[24 * v247 + 16] = v380;
              v241 = v255 + 3;
              v386[2] = v255 + 3;
              v259 = (_QWORD *)v382.i64[1];
              v260 = (_QWORD *)v382.i64[0];
              v261 = (char *)v386[1];
              if (v382.i64[1] == v382.i64[0])
              {
                v263 = vdupq_n_s64(v382.u64[1]);
              }
              else
              {
                do
                {
                  v262 = *(_OWORD *)(v259 - 3);
                  v259 -= 3;
                  *(_OWORD *)(v261 - 24) = v262;
                  v261 -= 24;
                  *v259 = 0;
                  v259[1] = 0;
                  *((_QWORD *)v261 + 2) = v259[2];
                }
                while (v259 != v260);
                v263 = v382;
                v241 = v386[2];
              }
              v382.i64[0] = (uint64_t)v261;
              v382.i64[1] = (uint64_t)v241;
              *(int64x2_t *)&v386[1] = v263;
              v264 = (void *)v383[0];
              v383[0] = v386[3];
              v386[3] = v264;
              v386[0] = (void *)v263.i64[0];
              std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v386);
            }
            else
            {
              *(_QWORD *)v382.i64[1] = v379;
              v238 = *((_QWORD *)&v379 + 1);
              v237[1] = *((_QWORD *)&v379 + 1);
              if (v238)
              {
                v239 = (unint64_t *)(v238 + 8);
                do
                  v240 = __ldxr(v239);
                while (__stxr(v240 + 1, v239));
              }
              v237[2] = v380;
              v241 = v237 + 3;
            }
            v382.i64[1] = (uint64_t)v241;
            v233 = 1;
            v338 = 1;
          }
          goto LABEL_340;
        }
        v191 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(__p, (unsigned __int8 *)v379);
        v192 = v191;
        if (!v191)
        {
          v214 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
          *(_QWORD *)&v402 = v183;
          *((_QWORD *)&v402 + 1) = *((_QWORD *)&v379 + 1);
          if (*((_QWORD *)&v379 + 1))
          {
            v215 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
          }
          v217 = v380;
          v403[0] = v380;
          memset(v386, 0, 24);
          v384.__r_.__value_.__r.__words[0] = (std::string::size_type)v386;
          v384.__r_.__value_.__s.__data_[8] = 0;
          v218 = operator new(0x18uLL);
          v386[0] = v218;
          v386[1] = v218;
          v386[2] = v218 + 3;
          *v218 = v183;
          v218[1] = v214;
          if (v214)
          {
            v219 = (unint64_t *)&v214->__shared_owners_;
            do
              v220 = __ldxr(v219);
            while (__stxr(v220 + 1, v219));
          }
          v218[2] = v217;
          v386[1] = v218 + 3;
          std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>((uint64_t)__p, (unsigned __int8 *)v183, (__int128 *)v183, (uint64_t)v386);
          v384.__r_.__value_.__r.__words[0] = (std::string::size_type)v386;
          std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v384);
          if (v214)
          {
            v221 = (unint64_t *)&v214->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
              std::__shared_weak_count::__release_weak(v214);
            }
          }
LABEL_339:
          v233 = 1;
          goto LABEL_340;
        }
        v194 = (uint64_t *)*((_QWORD *)v191 + 5);
        v193 = (uint64_t *)*((_QWORD *)v191 + 6);
        if (v194 == v193)
        {
LABEL_311:
          v206 = (uint64_t)(v191 + 56);
          v207 = *((_QWORD *)v192 + 7);
          if ((unint64_t)v193 >= v207)
          {
            v242 = 0xAAAAAAAAAAAAAAABLL * (v193 - v194);
            v243 = v242 + 1;
            if (v242 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v207 - (_QWORD)v194) >> 3);
            if (2 * v244 > v243)
              v243 = 2 * v244;
            if (v244 >= 0x555555555555555)
              v245 = 0xAAAAAAAAAAAAAAALL;
            else
              v245 = v243;
            *(_QWORD *)&v387 = v192 + 56;
            if (v245)
              v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v206, v245);
            else
              v246 = 0;
            v251 = (uint64_t *)&v246[24 * v242];
            v386[0] = v246;
            v386[1] = v251;
            v386[3] = &v246[24 * v245];
            *v251 = v183;
            v252 = *((_QWORD *)&v379 + 1);
            v251[1] = *((_QWORD *)&v379 + 1);
            if (v252)
            {
              v253 = (unint64_t *)(v252 + 8);
              do
                v254 = __ldxr(v253);
              while (__stxr(v254 + 1, v253));
            }
            *(_QWORD *)&v246[24 * v242 + 16] = v380;
            v386[2] = v251 + 3;
            std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer((_QWORD *)v192 + 5, v386);
            v211 = (_QWORD *)*((_QWORD *)v192 + 6);
            std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v386);
          }
          else
          {
            *v193 = v183;
            v208 = *((_QWORD *)&v379 + 1);
            v193[1] = *((_QWORD *)&v379 + 1);
            if (v208)
            {
              v209 = (unint64_t *)(v208 + 8);
              do
                v210 = __ldxr(v209);
              while (__stxr(v210 + 1, v209));
            }
            v193[2] = v380;
            v211 = v193 + 3;
          }
          *((_QWORD *)v192 + 6) = v211;
          v233 = 1;
          goto LABEL_376;
        }
        v195 = *((_QWORD *)v191 + 5);
        while (1)
        {
          v196 = *(_QWORD *)&v362[80 * *(int *)(v195 + 16) + 48] + 56 * *(int *)(v195 + 20);
          if (*(_QWORD *)(v196 + 48) == *(_QWORD *)(*(_QWORD *)&v362[80 * (int)v380 + 48] + 56 * SHIDWORD(v380) + 48))
            break;
LABEL_310:
          v195 += 24;
          if ((uint64_t *)v195 == v193)
            goto LABEL_311;
        }
        v197 = (_QWORD *)(v196 + 32);
        v200 = (_QWORD *)*v197;
        v198 = v197 + 1;
        v199 = v200;
        if (v200 != v198)
        {
          v201 = *(_QWORD **)(*(_QWORD *)&v362[80 * (int)v380 + 48] + 56 * SHIDWORD(v380) + 32);
          while (v199[4] == v201[4])
          {
            v202 = (_QWORD *)v199[1];
            v203 = v199;
            if (v202)
            {
              do
              {
                v199 = v202;
                v202 = (_QWORD *)*v202;
              }
              while (v202);
            }
            else
            {
              do
              {
                v199 = (_QWORD *)v203[2];
                v190 = *v199 == (_QWORD)v203;
                v203 = v199;
              }
              while (!v190);
            }
            v204 = (_QWORD *)v201[1];
            if (v204)
            {
              do
              {
                v205 = v204;
                v204 = (_QWORD *)*v204;
              }
              while (v204);
            }
            else
            {
              do
              {
                v205 = (_QWORD *)v201[2];
                v190 = *v205 == (_QWORD)v201;
                v201 = v205;
              }
              while (!v190);
            }
            v201 = v205;
            if (v199 == v198)
              goto LABEL_331;
          }
          goto LABEL_310;
        }
LABEL_331:
        if (quasar::gLogLevel >= 5)
        {
          v400 = 0u;
          v401 = 0u;
          v398 = 0u;
          v399 = 0u;
          v396 = 0u;
          v397 = 0u;
          v394 = 0u;
          v395 = 0u;
          v392 = 0u;
          v393 = 0u;
          v390 = 0u;
          v391 = 0u;
          v388 = 0u;
          v389 = 0u;
          v387 = 0u;
          memset(v386, 0, sizeof(v386));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v386);
          v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"[LinkAlternatives validation]: for source range: ", 49);
          v153 = v350;
          v224 = quasar::operator<<(v223);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)" in phrase ", 11);
          v225 = (_QWORD *)std::ostream::operator<<();
          v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)" found the same meaning (", 25);
          v227 = *(char *)(v183 + 23);
          if (v227 >= 0)
            v228 = v183;
          else
            v228 = *(_QWORD *)v183;
          if (v227 >= 0)
            v229 = *(unsigned __int8 *)(v183 + 23);
          else
            v229 = *(_QWORD *)(v183 + 8);
          v230 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, v228, v229);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230, (uint64_t)") alternatives in phrases ", 26);
          v231 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, (uint64_t)" and ", 5);
          v232 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)" and all other alternative descriptions are the same. Ignoring.", 63);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v386);
          goto LABEL_339;
        }
        v233 = 1;
LABEL_376:
        v153 = v350;
LABEL_340:
        v234 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
        if (!*((_QWORD *)&v379 + 1))
          goto LABEL_344;
        v235 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        if (v236)
        {
LABEL_344:
          if (!v233)
            goto LABEL_391;
LABEL_262:
          ++v152;
          v151 = v362;
          if (0xCCCCCCCCCCCCCCCDLL * ((v363 - v362) >> 4) <= v152)
          {
            for (i = (uint64_t **)v366; i; i = (uint64_t **)*i)
            {
              std::vector<quasar::AlternativeSelectionSpan::Alternative>::reserve(&v382, 0xAAAAAAAAAAAAAAABLL * ((v382.i64[1] - v382.i64[0]) >> 3) - 0x5555555555555555 * (i[6] - i[5]));
              std::vector<quasar::AlternativeSelectionSpan::Alternative>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>,std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>>(v382.i64, v382.i64[1], i[5], i[6], 0xAAAAAAAAAAAAAAABLL * (i[6] - i[5]));
            }
            goto LABEL_390;
          }
          continue;
        }
        break;
      }
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
      if (v233)
        goto LABEL_262;
LABEL_391:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table((uint64_t)__p);
      v386[0] = &v382;
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
      v267 = v375[1];
      if (v375[0] != v375[1])
      {
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v366 = 0;
        v268 = (char *)v345 + 56 * v343;
        v269 = (char *)*((_QWORD *)v268 + 4);
        v270 = v268 + 40;
        if (v269 == v268 + 40)
        {
          v271 = 0;
          v279 = 0;
        }
        else
        {
          v271 = 0;
          do
          {
            v272 = (char *)v375[0];
            if (v375[0] != v375[1])
            {
              v273 = *(_DWORD *)(*((_QWORD *)v269 + 4) + 24);
              while (1)
              {
                v274 = *(_DWORD *)(*(_QWORD *)v272 + 24);
                v275 = v274 == v273;
                v190 = v274 == -1;
                v276 = v274 == -1;
                if (v190)
                  v275 = 0;
                if (v273 != -1)
                  v276 = v275;
                if (v276)
                  break;
                v272 += 24;
                if (v272 == v375[1])
                  goto LABEL_407;
              }
              if ((unint64_t)v271 >= (unint64_t)v366)
              {
                v271 = (char *)std::vector<quasar::AlternativeSelectionSpan::Alternative>::__emplace_back_slow_path<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>(__p, (uint64_t *)v269 + 4, (int *)&v378, &v377);
              }
              else
              {
                std::allocator<quasar::AlternativeSelectionSpan::Alternative>::construct[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>((uint64_t)&v366, (uint64_t)v271, (uint64_t *)v269 + 4, (int *)&v378, &v377);
                v271 += 24;
              }
              __p[1] = v271;
            }
LABEL_407:
            v277 = (char *)*((_QWORD *)v269 + 1);
            if (v277)
            {
              do
              {
                v278 = v277;
                v277 = *(char **)v277;
              }
              while (v277);
            }
            else
            {
              do
              {
                v278 = (char *)*((_QWORD *)v269 + 2);
                v190 = *(_QWORD *)v278 == (_QWORD)v269;
                v269 = v278;
              }
              while (!v190);
            }
            v269 = v278;
          }
          while (v278 != v270);
          v267 = v375[1];
          v279 = (uint64_t *)__p[0];
        }
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>,std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>>((uint64_t *)v375, (uint64_t)v267, v279, (uint64_t *)v271, 0xAAAAAAAAAAAAAAABLL * ((v271 - (char *)v279) >> 3));
        v280 = (uint64_t *)*((_QWORD *)v345 + 7 * v343 + 1);
        v281 = v369;
        if ((unint64_t)v369 >= v370)
        {
          v286 = std::vector<quasar::AlternativeSelectionSpan>::__emplace_back_slow_path<quasar::AlternativeSelectionSpan::Range const&,quasar::AlternativeSelectionSpan::Range const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(&v368, v150, v280, (__int128 *)v375);
        }
        else
        {
          v282 = *v150;
          v283 = *v280;
          v284 = v376;
          v285 = *(_OWORD *)v375;
          v375[0] = 0;
          v375[1] = 0;
          v376 = 0;
          *v369 = v282;
          v281[1] = v283;
          *((_OWORD *)v281 + 1) = v285;
          v281[4] = v284;
          memset(v386, 0, 24);
          *(_QWORD *)&v379 = v386;
          std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v379);
          v286 = (uint64_t)(v281 + 5);
        }
        v369 = (_QWORD *)v286;
        v386[0] = __p;
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
      }
      v386[0] = v375;
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
      v149 = ++v377;
      v146 = *v341;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)v339 - (_QWORD)*v341) >> 3) > v149);
    v287 = v368;
    v288 = v369;
    memset(v386, 0, sizeof(v386));
    LODWORD(v387) = 1065353216;
    while ((_QWORD *)v287 != v288)
    {
      v289 = *(_QWORD *)(v287 + 16);
      v290 = *(_QWORD *)(v287 + 24);
      while (v289 != v290)
      {
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v386, (int *)(v289 + 16), (_DWORD *)(v289 + 16));
        v289 += 24;
      }
      v287 += 40;
    }
LABEL_427:
    std::vector<std::unordered_set<int>>::emplace_back<std::unordered_set<int>>((uint64_t *)&v372, (uint64_t *)v386);
    std::vector<std::vector<quasar::AlternativeSelectionSpan>>::emplace_back<std::vector<quasar::AlternativeSelectionSpan>>((uint64_t *)v371, (uint64_t)&v368);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v386);
    v386[0] = &v368;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
    v144 = v337 + 1;
  }
  while (0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3) > v337 + 1);
LABEL_428:
  std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::pair[abi:ne180100]<std::vector<std::unordered_set<int>>&,std::vector<std::vector<quasar::AlternativeSelectionSpan>>&,0>(&v359, (uint64_t *)&v372, v371);
  v386[0] = v371;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v386[0] = &v372;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v291 = (_BYTE *)quasar::OptionValue<BOOL>::value(v335 + 3);
  v292 = *v291;
  if (*v291)
  {
    memset(v358, 0, sizeof(v358));
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v358, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
    v356 = v360;
    v357 = v361;
    v361 = 0;
    v360 = 0uLL;
    memset(&v384, 0, sizeof(v384));
    v382.i32[0] = 0;
    *((_QWORD *)&v379 + 1) = 0;
    v380 = 0;
    *(_QWORD *)&v379 = (char *)&v379 + 8;
    v366 = 0u;
    v367 = 0u;
    *(_OWORD *)__p = 0u;
    std::deque<int>::push_back(__p, &v382);
    for (j = *((_QWORD *)&v367 + 1); *((_QWORD *)&v367 + 1); j = *((_QWORD *)&v367 + 1))
    {
      LODWORD(v375[0]) = 0;
      LODWORD(v375[0]) = *(_DWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v367 >> 7) & 0x1FFFFFFFFFFFFF8))
                                   + 4 * (v367 & 0x3FF));
      *(_QWORD *)&v367 = v367 + 1;
      *((_QWORD *)&v367 + 1) = j - 1;
      if ((unint64_t)v367 >= 0x800)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v367 = v367 - 1024;
      }
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&v379, (int *)v375, v375);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v359.__r_.__value_.__l.__size_ - v359.__r_.__value_.__r.__words[0]) >> 3) <= SLODWORD(v375[0]))
      {
        v400 = 0u;
        v401 = 0u;
        v398 = 0u;
        v399 = 0u;
        v396 = 0u;
        v397 = 0u;
        v394 = 0u;
        v395 = 0u;
        v392 = 0u;
        v393 = 0u;
        v390 = 0u;
        v391 = 0u;
        v388 = 0u;
        v389 = 0u;
        v387 = 0u;
        memset(v386, 0, sizeof(v386));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v386);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)"Processing translation phrase with index ", 41);
        v334 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v334, (uint64_t)" while total number is ", 23);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v386);
      }
      for (k = *(_QWORD **)(v359.__r_.__value_.__r.__words[0] + 40 * SLODWORD(v375[0]) + 16); k; k = (_QWORD *)*k)
      {
        v295 = (int *)(k + 2);
        v296 = (uint64_t *)*((_QWORD *)&v379 + 1);
        if (*((_QWORD *)&v379 + 1))
        {
          v297 = *v295;
          do
          {
            v298 = *((_DWORD *)v296 + 7);
            if (v297 >= v298)
            {
              if (v298 >= v297)
                goto LABEL_441;
              ++v296;
            }
            v296 = (uint64_t *)*v296;
          }
          while (v296);
        }
        std::deque<int>::push_back(__p, v295);
LABEL_441:
        ;
      }
    }
    v402 = v379;
    v403[0] = v380;
    if (v380)
    {
      *(_QWORD *)(*((_QWORD *)&v379 + 1) + 16) = (char *)&v402 + 8;
      *(_QWORD *)&v379 = (char *)&v379 + 8;
      *((_QWORD *)&v379 + 1) = 0;
      v380 = 0;
    }
    else
    {
      *(_QWORD *)&v402 = (char *)&v402 + 8;
    }
    std::deque<int>::~deque[abi:ne180100](__p);
    std::__tree<int>::destroy((uint64_t)&v379, *((_QWORD **)&v379 + 1));
    if (v403[0])
    {
      std::vector<quasar::TranslationPhraseInternal>::reserve((uint64_t *)&v384, v403[0]);
      v386[2] = 0;
      v386[1] = 0;
      v386[0] = &v386[1];
      v305 = (int *)v402;
      if ((__int128 *)v402 != (__int128 *)((char *)&v402 + 8))
      {
        v306 = v384.__r_.__value_.__l.__size_;
        do
        {
          __p[0] = (void *)(0x8F5C28F5C28F5C29 * ((uint64_t)(v306 - v384.__r_.__value_.__r.__words[0]) >> 3));
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,unsigned long>((uint64_t **)v386, v305 + 7, v305 + 7, (uint64_t *)__p);
          v307 = (uint64_t *)(v358[0] + 200 * v305[7]);
          v308 = v384.__r_.__value_.__l.__size_;
          if (v384.__r_.__value_.__l.__size_ >= v384.__r_.__value_.__r.__words[2])
          {
            v306 = std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<quasar::TranslationPhraseInternal>((uint64_t *)&v384, v307);
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal(v384.__r_.__value_.__l.__size_, v307);
            v306 = v308 + 200;
          }
          v384.__r_.__value_.__l.__size_ = v306;
          v309 = (int *)*((_QWORD *)v305 + 1);
          if (v309)
          {
            do
            {
              v310 = v309;
              v309 = *(int **)v309;
            }
            while (v309);
          }
          else
          {
            do
            {
              v310 = (int *)*((_QWORD *)v305 + 2);
              v190 = *(_QWORD *)v310 == (_QWORD)v305;
              v305 = v310;
            }
            while (!v190);
          }
          v305 = v310;
        }
        while (v310 != (int *)((char *)&v402 + 8));
      }
      v312 = (uint64_t *)*((_QWORD *)&v356 + 1);
      v311 = (uint64_t *)v356;
      if ((_QWORD)v356 != *((_QWORD *)&v356 + 1))
      {
        v313 = (void **)v386[1];
        do
        {
          v314 = *v311;
          v315 = v311[1];
          while (v314 != v315)
          {
            v316 = *(_QWORD *)(v314 + 16);
            v317 = *(_QWORD *)(v314 + 24);
            while (v316 != v317)
            {
              if (v313)
              {
                v318 = *(_DWORD *)(v316 + 16);
                v319 = &v386[1];
                v320 = v313;
                do
                {
                  v321 = v320;
                  v322 = v319;
                  v323 = *((_DWORD *)v320 + 7);
                  if (v323 >= v318)
                    v319 = v320;
                  else
                    ++v320;
                  v320 = (void **)*v320;
                }
                while (v320);
                if (v319 != &v386[1])
                {
                  v324 = v323 >= v318 ? v321 : v322;
                  if (v318 >= *((_DWORD *)v324 + 7))
                  {
                    if (v323 >= v318)
                      v325 = v321;
                    else
                      v325 = v322;
                    *(_DWORD *)(v316 + 16) = *((_DWORD *)v325 + 8);
                  }
                }
              }
              v316 += 24;
            }
            v314 += 40;
          }
          v311 += 3;
        }
        while (v311 != v312);
      }
      v326 = (void **)v386[0];
      if (v386[0] != &v386[1])
      {
        do
        {
          v327 = *(uint64_t *)((char *)v326 + 28);
          v328 = (uint64_t *)(v384.__r_.__value_.__r.__words[0] + 200 * SHIDWORD(v327) + 192);
          v329 = v356 + 24 * (int)v327;
          __p[1] = 0;
          *(_QWORD *)&v366 = 0;
          __p[0] = 0;
          *(_OWORD *)__p = *(_OWORD *)v329;
          *(_QWORD *)&v366 = *(_QWORD *)(v329 + 16);
          *(_QWORD *)v329 = 0;
          *(_QWORD *)(v329 + 8) = 0;
          *(_QWORD *)(v329 + 16) = 0;
          quasar::MetaInfo::setAlternativeSelectionSpans(v328, (__int128 *)__p);
          *(_QWORD *)&v379 = __p;
          std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v379);
          v330 = (void **)v326[1];
          if (v330)
          {
            do
            {
              v331 = v330;
              v330 = (void **)*v330;
            }
            while (v330);
          }
          else
          {
            do
            {
              v331 = (void **)v326[2];
              v190 = *v331 == v326;
              v326 = v331;
            }
            while (!v190);
          }
          v326 = v331;
        }
        while (v331 != &v386[1]);
      }
      std::__tree<int>::destroy((uint64_t)v386, (_QWORD *)v386[1]);
    }
    std::__tree<int>::destroy((uint64_t)&v402, *((_QWORD **)&v402 + 1));
    if (v292)
    {
LABEL_498:
      v386[0] = &v356;
      std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
      v332 = v358;
      goto LABEL_502;
    }
  }
  else
  {
    v353 = 0;
    v354 = 0;
    v355 = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v353, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
    v351 = v360;
    v352 = v361;
    v361 = 0;
    v360 = 0uLL;
    v300 = v353;
    v299 = v354;
    if (v354 == v353)
    {
      v300 = v354;
    }
    else
    {
      v301 = 0;
      v302 = 0;
      v303 = 192;
      do
      {
        v304 = v351 + v301;
        if (*(_QWORD *)(v351 + v301) != *(_QWORD *)(v351 + v301 + 8))
        {
          memset(v386, 0, 24);
          *(_OWORD *)v386 = *(_OWORD *)v304;
          v386[2] = *(void **)(v304 + 16);
          *(_QWORD *)v304 = 0;
          *(_QWORD *)(v304 + 8) = 0;
          *(_QWORD *)(v304 + 16) = 0;
          quasar::MetaInfo::setAlternativeSelectionSpans((uint64_t *)(v300 + v303), (__int128 *)v386);
          __p[0] = v386;
          std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v300 = v353;
          v299 = v354;
        }
        ++v302;
        v301 += 24;
        v303 += 200;
      }
      while (0x8F5C28F5C28F5C29 * ((uint64_t)(v299 - v300) >> 3) > v302);
    }
    v384.__r_.__value_.__r.__words[0] = v300;
    v384.__r_.__value_.__l.__size_ = v299;
    v384.__r_.__value_.__r.__words[2] = v355;
    v354 = 0;
    v355 = 0;
    v353 = 0;
    if (v292)
      goto LABEL_498;
  }
  v386[0] = &v351;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v332 = &v353;
LABEL_502:
  v386[0] = v332;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v333 = *(_QWORD *)(*v335 - 24);
  memset(v386, 0, 24);
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v386, (uint64_t)v384.__r_.__value_.__l.__data_, v384.__r_.__value_.__l.__size_, 0x8F5C28F5C28F5C29 * ((uint64_t)(v384.__r_.__value_.__l.__size_ - v384.__r_.__value_.__r.__words[0]) >> 3));
  quasar::ProcessingBlock::send((uint64_t)v335 + v333, (uint64_t)v386, 0);
  __p[0] = v386;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v386[0] = &v384;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v386[0] = &v360;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
  v386[0] = &v359;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v386);
}

void sub_1ADE25B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;

  a67 = (void **)&a47;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&a67);
  JUMPOUT(0x1ADE25BACLL);
}

void sub_1ADE25BC4()
{
  JUMPOUT(0x1ADE25F28);
}

void sub_1ADE25BDC()
{
  JUMPOUT(0x1ADE25F38);
}

void sub_1ADE25BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a73;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
  if (a55 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  JUMPOUT(0x1ADE25F34);
}

void sub_1ADE25BFC()
{
  JUMPOUT(0x1ADE25F10);
}

void sub_1ADE25C04()
{
  JUMPOUT(0x1ADE25DD8);
}

void sub_1ADE25C0C()
{
  JUMPOUT(0x1ADE25C94);
}

void sub_1ADE25C20()
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x240]);
  JUMPOUT(0x1ADE25C2CLL);
}

void sub_1ADE25C38()
{
  JUMPOUT(0x1ADE25C58);
}

void sub_1ADE25C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  JUMPOUT(0x1ADE25DD8);
}

void sub_1ADE25CB4()
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x240]);
  JUMPOUT(0x1ADE25E40);
}

void sub_1ADE25CC8()
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x240]);
  JUMPOUT(0x1ADE25E40);
}

void sub_1ADE25CEC()
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x240]);
  JUMPOUT(0x1ADE25EE4);
}

void sub_1ADE25CFC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1ADE25D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  _QWORD *a68;

  std::deque<int>::~deque[abi:ne180100](&a47);
  std::__tree<int>::destroy((uint64_t)&a67, a68);
  STACK[0x240] = (unint64_t)&STACK[0x220];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = (unint64_t)&a31;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = (unint64_t)&a34;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::~pair(&a37);
  JUMPOUT(0x1ADE25ED0);
}

void sub_1ADE25D7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[18];
  char v3;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[4];
  uint64_t *v7;

  v7 = &v4;
  if (v3 < 0)
    operator delete((void *)v2[16]);
  v2[0] = v5;
  v5[0] = v6;
  v6[0] = v0 - 128;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v6);
  JUMPOUT(0x1ADE25F60);
}

void sub_1ADE25D84()
{
  JUMPOUT(0x1ADE25EF0);
}

void sub_1ADE25D90()
{
  uint64_t v0;
  uint64_t v1;
  void **v2[7];
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  *(_QWORD *)(v0 - 128) = &STACK[0x240];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 128));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table(v2);
  v2[0] = (void **)&v6;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](v2);
  v2[0] = (void **)&v3;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](v2);
  v2[0] = (void **)&v4;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](v2);
  v2[0] = (void **)&v5;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](v2);
  JUMPOUT(0x1ADE25F60);
}

void sub_1ADE25DE8()
{
  uint64_t v0;
  void **v1[7];
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (STACK[0x240])
    operator delete((void *)STACK[0x240]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table(v1);
  v1[0] = (void **)&v5;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)&v2;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)&v3;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)&v4;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](v1);
  JUMPOUT(0x1ADE25F60);
}

void sub_1ADE25DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  STACK[0x240] = (unint64_t)&a47;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = (unint64_t)&a63;
  JUMPOUT(0x1ADE25E9CLL);
}

void sub_1ADE25E2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADE25F2CLL);
}

void sub_1ADE25E48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  operator delete(__p);
  JUMPOUT(0x1ADE25E54);
}

void sub_1ADE25EE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,_QWORD *a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[18];
  char v56;
  uint64_t v57;
  _QWORD v58[6];
  void **v59[4];
  uint64_t *v60;

  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v52, a52);
  if (__p)
    operator delete(__p);
  v60 = &v57;
  if (v56 < 0)
    operator delete((void *)v55[16]);
  v55[0] = v58;
  v58[0] = v59;
  v59[0] = (void **)(v53 - 128);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v59);
  JUMPOUT(0x1ADE25F60);
}

void **std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void **std::vector<quasar::`anonymous namespace'::ProcessedTranslation>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 80;
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void `virtual thunk to'quasar::LinkAlternativesBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::LinkAlternativesBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::LinkAlternativesBlock::minConfigVersion(quasar::LinkAlternativesBlock *this)
{
  return 254;
}

uint64_t `virtual thunk to'quasar::LinkAlternativesBlock::minConfigVersion(quasar::LinkAlternativesBlock *this)
{
  return 254;
}

void quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADE26104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::LinkAlternativesBlock::~LinkAlternativesBlock(quasar::LinkAlternativesBlock *this)
{
  char **v1;

  *(_QWORD *)this = off_1E5D04D38;
  v1 = (char **)((char *)this + 320);
  *((_QWORD *)this + 40) = &unk_1E5D04DC0;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;

  *(_QWORD *)this = off_1E5D04D38;
  v1 = (char **)((char *)this + 320);
  *((_QWORD *)this + 40) = &unk_1E5D04DC0;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::LinkAlternativesBlock::~LinkAlternativesBlock(quasar::LinkAlternativesBlock *this)
{
  _QWORD *v1;
  char **v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_1E5D04D38;
  v2 = (char **)(v1 + 40);
  v1[40] = &unk_1E5D04DC0;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesOptions *)(v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D04D38;
  *((_QWORD *)v1 + 40) = &unk_1E5D04DC0;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 40);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__split_buffer<quasar::`anonymous namespace'::ProcessedTranslation>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x333333333333334)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(80 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[80 * a2];
  return a1;
}

uint64_t *std::vector<quasar::`anonymous namespace'::ProcessedTranslation>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<quasar::`anonymous namespace'::ProcessedTranslation>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator_traits<std::allocator<quasar::`anonymous namespace'::ProcessedTranslation>>::destroy[abi:ne180100]<quasar::`anonymous namespace'::ProcessedTranslation,void>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::allocator_traits<std::allocator<quasar::`anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::`anonymous namespace'::TranslationPhraseSpan,quasar::AlternativeSelectionSpan::Range,std::vector<quasar::AlternativeSelectionSpan::Range>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void>(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;

  v4 = *a2;
  v5 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1ADE26520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p)
{
  if (a10)
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::`anonymous namespace'::TranslationPhraseSpan::TranslationPhraseSpan(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>((uint64_t **)(a1 + 32), a4, (uint64_t)a4);
  return a1;
}

void sub_1ADE265B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  uint64_t v5;
  void *v7;

  v5 = v2;
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v5, *v4);
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    *((_OWORD *)v11 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t *std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 56) = *(_QWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      v8 = (uint64_t *)(v2 + v5 - 16);
      v9 = *v8;
      *(_QWORD *)(v4 + v5 - 16) = *v8;
      v10 = v4 + v5 - 16;
      v11 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 8) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v7 - 24) = v8;
        *v8 = 0;
        *(_QWORD *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v6 - 24) = v10;
      }
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<quasar::`anonymous namespace'::TranslationPhraseSpan>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::`anonymous namespace'::TranslationPhraseSpan>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

void std::allocator_traits<std::allocator<quasar::`anonymous namespace'::TranslationPhraseSpan>>::destroy[abi:ne180100]<quasar::`anonymous namespace'::TranslationPhraseSpan,void>(uint64_t a1)
{
  void *v2;

  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void quasar::`anonymous namespace'::TranslationPhraseSpan::~TranslationPhraseSpan(quasar::_anonymous_namespace_::TranslationPhraseSpan *this)
{
  void *v2;

  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>::__on_zero_shared(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E5D489B0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6quasar24AlternativeSelectionSpan11Alternative17GenderDescriptionENSA_18MeaningDescriptionEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator_traits<std::allocator<quasar::`anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::`anonymous namespace'::TranslationPhraseSpan,quasar::AlternativeSelectionSpan::Range &,std::vector<quasar::AlternativeSelectionSpan::Range>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void>(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  uint64_t v11;

  v4 = *a2;
  v5 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  *(_OWORD *)__p = v5;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1ADE26A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p)
{
  if (a10)
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::allocator_traits<std::allocator<quasar::`anonymous namespace'::ProcessedTranslation>>::construct[abi:ne180100]<quasar::`anonymous namespace'::ProcessedTranslation,std::string,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>,std::optional<int> &,void>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v12[3];
  void **v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v14[0] = a2[1];
  *(_QWORD *)((char *)v14 + 7) = *(uint64_t *)((char *)a2 + 15);
  v5 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v6 = *(_QWORD *)a3;
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *a4;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v14 + 7);
  v9 = v14[0];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 23) = v5;
  *(_OWORD *)(a1 + 32) = v7;
  v12[0] = 0;
  v12[1] = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v10 = (uint64_t *)(a1 + 48);
  v12[2] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = v7;
  for (*(_QWORD *)(a1 + 72) = v8; v6 != v11; v6 += 56)
  {
    if (*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8) == 8)
  }
  v13 = (void **)v12;
}

void sub_1ADE26B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;

  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  a13 = (void **)&a10;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>::emplace_back<quasar::`anonymous namespace'::TranslationPhraseSpan const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
    else
      v13 = 0;
    v14 = v12;
    v15 = (_QWORD *)(v12 + 56 * v9);
    v17 = v12 + 56 * v13;
    v16 = v15 + 7;
    v8 = a1[1];
  }
  else
  {
    v8 = v6 + 56;
    a1[1] = v6 + 56;
  }
  a1[1] = v8;
  return result;
}

void sub_1ADE26D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator_traits<std::allocator<quasar::`anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::`anonymous namespace'::TranslationPhraseSpan,quasar::`anonymous namespace'::TranslationPhraseSpan const&,void>(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(a1 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](a1 + 4, a2 + 32);
}

void sub_1ADE26D80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADE26DF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__tree_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1ADE26E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__tree_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_hint_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_hint_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (uint64_t **)std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(a1, a2, &v16, &v15, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v13[1] = a1 + 1;
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v16, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void quasar::`anonymous namespace'::merge(std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan> const&,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan> const&)::$_0::operator()<std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char **v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  uint64_t v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    while (1)
    {
      v5 = (uint64_t *)(*a1 + 8);
      v6 = *v5;
      if (!*v5)
        goto LABEL_9;
      v7 = *a1 + 8;
      do
      {
        v8 = quasar::operator<((_DWORD *)(v6 + 32), (_DWORD *)v2);
        v9 = (uint64_t *)(v6 + 8);
        if (!v8)
        {
          v9 = (uint64_t *)v6;
          v7 = v6;
        }
        v6 = *v9;
      }
      while (*v9);
      if ((uint64_t *)v7 == v5 || quasar::operator<((_DWORD *)v2, (_DWORD *)(v7 + 32)))
LABEL_9:
        v7 = (uint64_t)v5;
      v10 = *a1;
      if (v7 == *a1 + 8)
        break;
LABEL_30:
      v2 += 56;
      if (v2 == v3)
        return;
    }
    v25 = *(_QWORD *)v2;
    v27 = 0;
    v28 = 0;
    __p = 0;
    std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(&__p, *(const void **)(v2 + 8), *(_QWORD *)(v2 + 16), (uint64_t)(*(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 8)) >> 3);
    std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](v29, v2 + 32);
    v20 = 0uLL;
    v21 = 0;
    v22 = (void **)&v20;
    v23 = 0;
    *(_QWORD *)&v20 = operator new(0x38uLL);
    *((_QWORD *)&v20 + 1) = v20;
    v11 = v20 + 56;
    v21 = v20 + 56;
    *((_QWORD *)&v20 + 1) = v11;
    v12 = *(uint64_t **)v7;
    if (*(_QWORD *)v10 == v7)
    {
      v14 = v7;
      if (!v12)
        goto LABEL_19;
    }
    else
    {
      v13 = v7;
      if (v12)
      {
        do
        {
          v14 = (uint64_t)v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          v14 = *(_QWORD *)(v13 + 16);
          v15 = *(_QWORD *)v14 == v13;
          v13 = v14;
        }
        while (v15);
      }
      if (!quasar::operator<((_DWORD *)(v14 + 32), (_DWORD *)v2))
      {
        goto LABEL_23;
      }
      if (!*(_QWORD *)v7)
      {
LABEL_19:
        v24 = v7;
        v16 = v7;
        v17 = (char **)v7;
        goto LABEL_25;
      }
    }
    v24 = v14;
    v17 = (char **)(v14 + 8);
LABEL_23:
    if (*v17)
    {
LABEL_28:
      v22 = (void **)&v20;
      std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)v29, (_QWORD *)v29[1]);
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      goto LABEL_30;
    }
    v16 = v24;
LABEL_25:
    v18 = (char *)operator new(0x40uLL);
    *((_QWORD *)v18 + 4) = *(_QWORD *)v2;
    *(_OWORD *)(v18 + 40) = v20;
    *((_QWORD *)v18 + 7) = v21;
    v20 = 0uLL;
    v21 = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v17 = v18;
    v19 = **(_QWORD **)v10;
    if (v19)
    {
      *(_QWORD *)v10 = v19;
      v18 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)v7, (uint64_t *)v18);
    ++*(_QWORD *)(v10 + 16);
    goto LABEL_28;
  }
}

void sub_1ADE273E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>::emplace_back<quasar::`anonymous namespace'::TranslationPhraseSpan&>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
    else
      v13 = 0;
    v14 = v12;
    v15 = (_QWORD *)(v12 + 56 * v9);
    v17 = v12 + 56 * v13;
    v16 = v15 + 7;
    v8 = a1[1];
  }
  else
  {
    v8 = v6 + 56;
    a1[1] = v6 + 56;
  }
  a1[1] = v8;
  return result;
}

void sub_1ADE27560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>,std::__map_value_compare<quasar::AlternativeSelectionSpan::Range,std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>,std::less<quasar::AlternativeSelectionSpan::Range>,true>,std::allocator<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>>>::__find_equal<quasar::AlternativeSelectionSpan::Range>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _DWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (_DWORD *)(v4 + 32);
        if (!quasar::operator<(a3, (_DWORD *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!quasar::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v11;
}

uint64_t *std::allocator_traits<std::allocator<quasar::`anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::`anonymous namespace'::TranslationPhraseSpan,quasar::`anonymous namespace'::TranslationPhraseSpan&,void>(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(a1 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](a1 + 4, a2 + 32);
}

void sub_1ADE27764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>,std::__map_value_compare<quasar::AlternativeSelectionSpan::Range,std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>,std::less<quasar::AlternativeSelectionSpan::Range>,true>,std::allocator<std::__value_type<quasar::AlternativeSelectionSpan::Range,std::vector<quasar::`anonymous namespace'::TranslationPhraseSpan>>>>::destroy(void **a1)
{
  void **v2;

  if (a1)
  {
    v2 = a1 + 5;
    operator delete(a1);
  }
}

uint64_t std::vector<std::unordered_set<int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADE2786C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::AlternativeSelectionSpan>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADE2791C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_set<int>>::emplace_back<std::unordered_set<int>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[40 * v9];
    v18 = &v13[40 * v12];
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v16, a2);
    v17 = v16 + 40;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v8;
  return v8 - 40;
}

void sub_1ADE27A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::AlternativeSelectionSpan>>::emplace_back<std::vector<quasar::AlternativeSelectionSpan>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADE27B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::reverse_iterator<std::vector<quasar::AlternativeSelectionSpan>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::AlternativeSelectionSpan>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::reserve(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADE27E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *quasar::`anonymous namespace'::ProcessedTranslation::getSpanForSourceRange(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v6;

  v2 = *(_DWORD **)(a1 + 24);
  v3 = *(_DWORD **)(a1 + 32);
  if (v2 == v3)
  {
    v6 = *(_DWORD **)(a1 + 24);
  }
  else
  {
    while (!quasar::operator==(v2, a2))
    {
      v2 += 14;
      if (v2 == v3)
      {
        v2 = v3;
        break;
      }
    }
    v6 = v2;
    v2 = *(_DWORD **)(a1 + 32);
  }
  if (v6 == v2)
    return 0;
  else
    return v6;
}

void quasar::`anonymous namespace'::getDifferentValuesForSameDescriptions(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD **v16;
  _QWORD *v17[2];
  _QWORD *v18;
  _QWORD *v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  char v24;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::set<int>>>((_QWORD *)v20, (_QWORD *)&v20 + 1, v18, &v19, (uint64_t)&v16, (uint64_t)v17, (uint64_t)&v22);
  std::__tree<int>::destroy((uint64_t)&v18, v19);
  std::__tree<int>::destroy((uint64_t)&v20, *((_QWORD **)&v20 + 1));
  v6 = v16;
  if (v16 != v17)
  {
    do
    {
      if (v24)
        v7 = v21 == 0;
      else
        v7 = 1;
      if (v7)
      {
        if ((v24 != 0) == (v21 != 0))
        {
          if (v21)
            goto LABEL_12;
          goto LABEL_17;
        }
      }
      else if (v22 == (_QWORD)v20)
      {
        goto LABEL_12;
      }
      std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::emplace_back<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>((char **)a3, &v20);
      if (v21)
      {
LABEL_12:
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
        if (*((_QWORD *)&v20 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
LABEL_17:
      if (v24)
      {
        v11 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      v14 = v6[1];
      if (v14)
      {
        do
        {
          v15 = (_QWORD **)v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD **)v6[2];
          v7 = *v15 == v6;
          v6 = v15;
        }
        while (!v7);
      }
      v6 = v15;
    }
    while (v15 != v17);
  }
  std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
}

void sub_1ADE280AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, void **a12, _QWORD *a13, uint64_t a14, char a15, _QWORD *a16)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  std::__tree<int>::destroy((uint64_t)&a12, a13);
  std::__tree<int>::destroy((uint64_t)&a15, a16);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::`anonymous namespace'::ProcessedTranslation::getSpansWithoutSource(uint64_t a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(_DWORD **)(a1 + 24);
  v4 = *(_DWORD **)(a1 + 32);
  if (v3 != v4)
  {
    v7 = 0;
    do
    {
      if (!quasar::operator==(v3, a2))
      {
        v8 = (unint64_t)a3[2];
        if ((unint64_t)v7 >= v8)
        {
          v10 = *a3;
          v11 = (v7 - *a3) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v15 = (char *)operator new(8 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v3;
          v9 = v16 + 8;
          if (v7 != v10)
          {
            do
            {
              v17 = *((_QWORD *)v7 - 1);
              v7 -= 8;
              *((_QWORD *)v16 - 1) = v17;
              v16 -= 8;
            }
            while (v7 != v10);
            v7 = *a3;
          }
          *a3 = v16;
          a3[1] = v9;
          a3[2] = &v15[8 * v14];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *(_QWORD *)v7 = v3;
          v9 = v7 + 8;
        }
        a3[1] = v9;
        v7 = v9;
      }
      v3 += 14;
    }
    while (v3 != v4);
  }
}

void sub_1ADE28260(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::`anonymous namespace'::TranslationPhraseSpan::getAltValue@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;

  v3 = *(_QWORD **)(this + 32);
  v4 = (_QWORD *)(this + 40);
  if (v3 != (_QWORD *)(this + 40))
  {
    while (1)
    {
      v5 = *(unsigned int *)(v3[4] + 24);
      if ((_DWORD)v5 == -1)
        v5 = -1;
      if (v5 == a2)
        break;
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
      if (v7 == v4)
        goto LABEL_17;
    }
  }
  if (v3 == v4)
  {
LABEL_17:
    v12 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v9 = v3[5];
    *(_QWORD *)a3 = v3[4];
    *(_QWORD *)(a3 + 8) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = 1;
  }
  *(_BYTE *)(a3 + 16) = v12;
  return this;
}

char *std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::emplace_back<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t *quasar::`anonymous namespace'::TranslationPhraseSpan::getAltTypes@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (uint64_t *)this[4];
  v4 = this + 5;
  if (v3 != this + 5)
  {
    do
    {
      v5 = *(unsigned int *)(v3[4] + 24);
      if ((_DWORD)v5 == -1)
        v5 = -1;
      v9 = v5;
      this = std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>((uint64_t **)a2, (unint64_t *)&v9, &v9);
      v6 = (uint64_t *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return this;
}

void sub_1ADE28518(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

double std::__set_intersection[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>,std::insert_iterator<std::set<int>>>@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  double result;
  int v22;
  __int128 v23;

  *(_QWORD *)&v23 = a5;
  *((_QWORD *)&v23 + 1) = a6;
  if (a1 != a2)
  {
    v10 = a3;
    if (a3 != a4)
    {
      v11 = a1;
      do
      {
        v12 = v11[4];
        v13 = v10[4];
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            v22 = v11[4];
            std::insert_iterator<std::set<int>>::operator=[abi:ne180100]((uint64_t)&v23, &v22);
            v17 = (_QWORD *)v11[1];
            if (v17)
            {
              do
              {
                v16 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v11[2];
                v18 = *v16 == (_QWORD)v11;
                v11 = v16;
              }
              while (!v18);
            }
          }
          else
          {
            v16 = v11;
          }
          v19 = (_QWORD *)v10[1];
          if (v19)
          {
            do
            {
              v10 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = v10;
              v10 = (_QWORD *)v10[2];
            }
            while ((_QWORD *)*v10 != v20);
          }
          v11 = v16;
        }
        else
        {
          v14 = (_QWORD *)v11[1];
          if (v14)
          {
            do
            {
              v11 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = v11;
              v11 = (_QWORD *)v11[2];
            }
            while ((_QWORD *)*v11 != v15);
          }
        }
      }
      while (v11 != a2 && v10 != a4);
    }
  }
  *(_QWORD *)a7 = a2;
  *(_QWORD *)(a7 + 8) = a4;
  result = *(double *)&v23;
  *(_OWORD *)(a7 + 16) = v23;
  return result;
}

uint64_t std::insert_iterator<std::set<int>>::operator=[abi:ne180100](uint64_t a1, int *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

_QWORD *std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *v2 = 0;
    v2[1] = 0;
    *(_QWORD *)(v4 + 16) = v2[2];
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__construct_node_hash<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1ADE2899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__construct_node_hash<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1ADE28A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  this[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<quasar::AlternativeSelectionSpan::Alternative>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>,std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v32[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v13 = *a1;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v32[4] = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
    else
      v19 = 0;
    v26 = (uint64_t *)&v19[24 * v15];
    v32[0] = v19;
    v32[1] = v26;
    v32[3] = &v19[24 * v18];
    v27 = &v26[3 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26[2] = a3[2];
      v26 += 3;
      a3 += 3;
    }
    while (v26 != v27);
    v32[2] = v27;
    v5 = (_QWORD *)std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(a1, v32, v5);
    std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v32);
    return v5;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 3)) >= a5)
  {
    v20 = &a3[3 * a5];
LABEL_29:
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__move_range((uint64_t)a1, a2, v12, a2 + 24 * a5);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,0>(a3, v20, v5);
    return v5;
  }
  v20 = &a3[(uint64_t)(v12 - a2) >> 3];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[(uint64_t)(v12 - a2) >> 3];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v22[2] = v21[2];
      v21 += 3;
      v22 += 3;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_1ADE28D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *v7 = 0;
      v7[1] = 0;
      *(_QWORD *)(v6 + 16) = v7[2];
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      *(_QWORD *)(v10 + 16) = a3[2];
      v10 += 24;
      a3 += 3;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,quasar::AlternativeSelectionSpan::Alternative *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a3 - 24, (__int128 *)(v6 - 24));
      *(_QWORD *)(a3 - 8) = *(_QWORD *)(v6 - 8);
      a3 -= 24;
      v6 -= 24;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::vector<quasar::AlternativeSelectionSpan::Alternative>::__emplace_back_slow_path<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>(_QWORD *a1, uint64_t *a2, int *a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v6)
    v6 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[24 * v5];
  v17 = &v11[24 * v10];
  std::allocator<quasar::AlternativeSelectionSpan::Alternative>::construct[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 24;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1ADE29064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::AlternativeSelectionSpan::Alternative>::construct[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;

  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *a4;
    v10 = *a5;
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_DWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 20) = v10;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v13 = *a4;
    v14 = *a5;
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = v13;
    *(_DWORD *)(a2 + 20) = v14;
  }
}

uint64_t std::vector<quasar::AlternativeSelectionSpan>::__emplace_back_slow_path<quasar::AlternativeSelectionSpan::Range const&,quasar::AlternativeSelectionSpan::Range const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v23[5];
  _QWORD v24[3];
  void **v25;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v23[4] = a1 + 2;
  v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  v15 = &v14[40 * v6];
  v23[0] = v14;
  v23[1] = v15;
  v23[3] = &v14[40 * v16];
  v17 = *a2;
  v18 = *a3;
  v19 = *((_QWORD *)a4 + 2);
  v20 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)v15 = v17;
  *((_QWORD *)v15 + 1) = v18;
  *((_OWORD *)v15 + 1) = v20;
  *((_QWORD *)v15 + 4) = v19;
  memset(v24, 0, sizeof(v24));
  v25 = (void **)v24;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v25);
  v23[2] = v15 + 40;
  std::vector<quasar::AlternativeSelectionSpan>::__swap_out_circular_buffer(a1, v23);
  v21 = a1[1];
  std::__split_buffer<quasar::AlternativeSelectionSpan>::~__split_buffer(v23);
  return v21;
}

void sub_1ADE29230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::AlternativeSelectionSpan>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AlternativeSelectionSpan>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v13 + 1) - 40;
      *((_QWORD *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AlternativeSelectionSpan>,std::reverse_iterator<quasar::AlternativeSelectionSpan*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 16);
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 40;
  }
}

void **std::__split_buffer<quasar::AlternativeSelectionSpan>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::AlternativeSelectionSpan>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::AlternativeSelectionSpan>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    v4 = (void **)(i - 24);
    std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

_QWORD *std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::pair[abi:ne180100]<std::vector<std::unordered_set<int>>&,std::vector<std::vector<quasar::AlternativeSelectionSpan>>&,0>(_QWORD *a1, uint64_t *a2, uint64_t **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::unordered_set<int>>::__init_with_size[abi:ne180100]<std::unordered_set<int>*,std::unordered_set<int>*>(a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__init_with_size[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  return a1;
}

void sub_1ADE294E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unordered_set<int>>::__init_with_size[abi:ne180100]<std::unordered_set<int>*,std::unordered_set<int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int>*,std::unordered_set<int>*,std::unordered_set<int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADE29564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int>*,std::unordered_set<int>*,std::unordered_set<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::unordered_set<int>::unordered_set(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADE295E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__init_with_size[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADE29668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*,std::vector<quasar::AlternativeSelectionSpan>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<quasar::AlternativeSelectionSpan>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan*,quasar::AlternativeSelectionSpan*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE29730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::AlternativeSelectionSpan>>,std::vector<quasar::AlternativeSelectionSpan>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x8F5C28F5C28F5C29 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x147AE147AE147AFLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 200 * v6;
    std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADE298D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,unsigned long>(uint64_t **a1, int *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  uint64_t **v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x28uLL);
    v13 = *a4;
    *((_DWORD *)v12 + 7) = *a3;
    *((_DWORD *)v12 + 8) = v13;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<quasar::TranslationPhraseInternal>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xA3D70A3D70A3D7)
    v9 = 0x147AE147AE147AELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[200 * v4];
  v16 = &v10[200 * v9];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v14, a2);
  v15 = v14 + 200;
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADE29AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::LinkAlternativesOptions::~LinkAlternativesOptions(quasar::LinkAlternativesOptions *this)
{
  *((_QWORD *)this + 21) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 288, *((char **)this + 37));
  *((_QWORD *)this + 21) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  *((_QWORD *)this + 2) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

quasar::TextSanitizer *quasar::TextSanitizer::TextSanitizer(quasar::TextSanitizer *this)
{
  uint64_t v2;
  uint64_t *i;
  int v4;
  int *v5;
  uint64_t v6;
  int v7;
  int *v8;
  uint64_t v9;
  std::basic_string<char32_t> *v10;
  std::basic_string<char32_t>::value_type v11;
  std::basic_string<char32_t> *v12;
  std::basic_string<char32_t> v14;
  std::basic_string<char32_t> v15;
  std::basic_string<char32_t> *v16;
  void *v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E5D35068;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[1],0>(v17, "ـ", "");
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)this + 80, (unsigned __int8 *)v17, 1);
  if (SHIBYTE(v19) < 0)
    operator delete(*((void **)&v18 + 1));
  if (SBYTE7(v18) < 0)
    operator delete(v17[0]);
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  v2 = operator new();
  *(_OWORD *)(v2 + 8) = xmmword_1AE1402C0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &unk_1E5D40240;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = v2;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  for (i = (uint64_t *)*((_QWORD *)this + 12); i; i = (uint64_t *)*i)
  {
    v4 = *((char *)i + 39);
    if (v4 >= 0)
      v5 = (int *)(i + 2);
    else
      v5 = (int *)i[2];
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)i + 39);
    else
      v6 = i[3];
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v17, v5, (int *)((char *)v5 + v6), &v15);
    v7 = *((char *)i + 63);
    if (v7 >= 0)
      v8 = (int *)(i + 5);
    else
      v8 = (int *)i[5];
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)i + 63);
    else
      v9 = i[6];
    std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v17, v8, (int *)((char *)v8 + v9), &v14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::basic_string<char32_t> *)v14.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v15;
    else
      v12 = (std::basic_string<char32_t> *)v15.__r_.__value_.__r.__words[0];
    v16 = v12;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 120, (unsigned int *)v12, (uint64_t)&std::piecewise_construct, (_DWORD **)&v16)+ 5) = v11;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v17);
  return this;
}

void sub_1ADE29E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v26);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v25);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 56);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 40);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23 + 24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void quasar::TextSanitizer::init(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  UErrorCode *v17;
  UErrorCode *v18;
  int v19;
  __int128 v20[17];

  if (*(_DWORD *)(a1 + 72))
  {
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "TextSanitizer is already initialized");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  v19 = 0;
  v18 = (UErrorCode *)&v19;
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[17],UErrorCode *,void>("[^\\u0000-\\uFFEF]", &v18, v20);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 8, v20);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v19 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to compile unicode outliers regex");
    goto LABEL_37;
  }
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      goto LABEL_19;
    a2 = (uint64_t *)*a2;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
    goto LABEL_19;
  }
  v17 = (UErrorCode *)&v19;
  v18 = (UErrorCode *)a2;
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const*,UErrorCode *,void>((const char **)&v18, &v17, v20);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 24, v20);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v19 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to compile special characters regex");
LABEL_37:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_19:
  v18 = (UErrorCode *)&v19;
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[6],UErrorCode *,void>("(\\s)+", &v18, v20);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 40, v20);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v19 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to compile duplicate spaces regex");
    goto LABEL_37;
  }
  v18 = (UErrorCode *)&v19;
  std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[9],UErrorCode *,void>("[\\p{C}]+", &v18, v20);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 56, v20);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
  if (*((_QWORD *)&v20[0] + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to compile control characters regex");
    goto LABEL_37;
  }
  *(_DWORD *)(a1 + 72) = 1;
}

void sub_1ADE2A188(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1ADE2A1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::TextSanitizer::~TextSanitizer(quasar::TextSanitizer *this)
{
  char *v2;

  *(_QWORD *)this = off_1E5D35068;
  v2 = (char *)this + 8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

uint64_t quasar::TextSanitizer::sanitize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  char v6;
  std::string::size_type size;
  std::string::size_type v8;
  unsigned int v9;
  std::string::size_type v10;
  std::string *v11;
  int v12;
  std::string *v14;
  unsigned int v15;
  BOOL v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  std::string::size_type v21;
  int *v22;
  unint64_t v23;
  __int128 *p_p;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  std::basic_string<char32_t>::value_type v28;
  unsigned int v29;
  std::basic_string<char32_t>::size_type v30;
  uint64_t v31;
  char *v32;
  quasar::QsrText *v33;
  uint64_t v34;
  int64_t v35;
  __int128 v36;
  std::string *v37;
  _QWORD *v38;
  const char *v39;
  size_t v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  const char *v45;
  size_t v46;
  URegularExpression **v48;
  _QWORD *v49;
  const char *v50;
  size_t v51;
  _QWORD *v52;
  const char *v53;
  size_t v54;
  _QWORD *v55;
  const char *v56;
  size_t v57;
  std::string::size_type v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  uint64_t v62;
  std::string v63;
  UText *v64;
  UErrorCode code;
  std::string v66;
  std::basic_string<char32_t> v67;
  __int128 c;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 __p;
  uint64_t v86;
  std::string v87;
  _BYTE v88[48];
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 72) != 1)
  {
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    c = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&c, "TextSanitizer is not initialized");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&c);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      v62 = a3;
      std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)a2, v5);
LABEL_7:
      v6 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      size = v87.__r_.__value_.__l.__size_;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      if (size)
      {
        v8 = 0;
        v9 = SHIBYTE(v87.__r_.__value_.__r.__words[2]) >> 31;
        while (1)
        {
          v10 = v87.__r_.__value_.__r.__words[0];
          if ((v9 & 1) != 0)
            v11 = (std::string *)v87.__r_.__value_.__r.__words[0];
          else
            v11 = &v87;
          v12 = v11->__r_.__value_.__s.__data_[v8];
          if (v12 == 13 || v12 == 10)
          {
            v11->__r_.__value_.__s.__data_[v8] = 32;
            v6 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
            v10 = v87.__r_.__value_.__r.__words[0];
          }
          if (v6 >= 0)
            v14 = &v87;
          else
            v14 = (std::string *)v10;
          v15 = v14->__r_.__value_.__s.__data_[v8];
          if (v15 > 0x1F)
            goto LABEL_30;
          if (v15 > 0xD || ((1 << v15) & 0x2600) == 0)
            break;
LABEL_38:
          ++v8;
          v6 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          v9 = SHIBYTE(v87.__r_.__value_.__r.__words[2]) >> 31;
          v19 = v87.__r_.__value_.__l.__size_;
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          if (v19 <= v8)
            goto LABEL_44;
        }
        v14->__r_.__value_.__s.__data_[v8] = 32;
LABEL_30:
        v17 = v15 > 0x1B || ((1 << v15) & 0xA12000C) == 0;
        if (!v17 || v15 == 127)
        {
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v87;
          else
            v18 = (std::string *)v87.__r_.__value_.__r.__words[0];
          v18->__r_.__value_.__s.__data_[v8] = 32;
        }
        goto LABEL_38;
      }
LABEL_44:
      v20 = operator new();
      *(_OWORD *)(v20 + 8) = xmmword_1AE1402C0;
      *(_DWORD *)(v20 + 24) = 0;
      *(_QWORD *)v20 = &unk_1E5D40240;
      memset(v88, 0, sizeof(v88));
      v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = 0u;
      v96 = 0u;
      v97 = 0u;
      v89 = v20;
      v98 = 0;
      __p = 0uLL;
      v21 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = (int *)&v87;
      else
        v22 = (int *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v87.__r_.__value_.__l.__size_;
      v86 = 0;
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v88, v22, (int *)((char *)v22 + v21), (std::basic_string<char32_t> *)&c);
      if (SHIBYTE(v86) < 0)
        operator delete((void *)__p);
      v86 = v69;
      __p = c;
      memset(&v67, 0, sizeof(v67));
      v23 = BYTE7(v69);
      if ((SBYTE7(v69) & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      if (SBYTE7(v69) < 0)
        v23 = *((_QWORD *)&__p + 1);
      if (v23)
      {
        v25 = 4 * v23;
        while (1)
        {
          LODWORD(c) = 0;
          LODWORD(c) = *(_DWORD *)p_p;
          if (u_getIntPropertyValue(c, UCHAR_EMOJI)
            || u_getIntPropertyValue(c, UCHAR_EMOJI_PRESENTATION)
            || u_getIntPropertyValue(c, UCHAR_EMOJI_MODIFIER)
            || u_getIntPropertyValue(c, UCHAR_EMOJI_MODIFIER_BASE))
          {
            v26 = c;
            if ((c - 58) < 0xFFFFFFF6)
              goto LABEL_63;
          }
          else
          {
            v26 = c;
            if ((_DWORD)c == 65039)
              goto LABEL_63;
          }
          if (v26 <= 9791)
          {
            if (v26 == 8205 || v26 == 8419)
              goto LABEL_63;
          }
          else if (v26 == 9792 || v26 == 9794 || v26 == 9877)
          {
            goto LABEL_63;
          }
          v27 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>((_QWORD *)(a1 + 120), (unsigned int *)&c);
          if (v27)
          {
            v28 = *((_DWORD *)v27 + 5);
            if (!v28)
              goto LABEL_63;
          }
          else
          {
            v28 = c;
          }
          std::basic_string<char32_t>::push_back(&v67, v28);
LABEL_63:
          p_p = (__int128 *)((char *)p_p + 4);
          v25 -= 4;
          if (!v25)
          {
            v29 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            v23 = v67.__r_.__value_.__l.__size_;
            v30 = v67.__r_.__value_.__r.__words[0];
            goto LABEL_82;
          }
        }
      }
      v30 = 0;
      v29 = 0;
LABEL_82:
      if ((v29 & 0x80u) == 0)
        v32 = (char *)&v67;
      else
        v32 = (char *)v30;
      if ((v29 & 0x80u) == 0)
        v23 = v29;
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v88, v32, &v32[4 * v23], (std::string *)&c);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = c;
      v87.__r_.__value_.__r.__words[2] = v69;
      memset(&v66, 0, sizeof(v66));
      v34 = quasar::QsrText::SingletonInstance(v33);
      if ((quasar::QsrText::normalizeUnicode(v34, (uint64_t)&v87, (uint64_t)&v66, 0, 1) & 1) == 0)
      {
        if (quasar::gLogLevel >= 4)
        {
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          c = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Failed to normalize ", 20);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = &v87;
          else
            v42 = (std::string *)v87.__r_.__value_.__r.__words[0];
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          else
            v43 = v87.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&c);
        }
        v31 = 1;
        goto LABEL_110;
      }
      v35 = v66.__r_.__value_.__r.__words[2];
      v36 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
      v66 = v87;
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v36;
      v87.__r_.__value_.__r.__words[2] = v35;
      code = U_ZERO_ERROR;
      if (v35 >= 0)
        v37 = &v87;
      else
        v37 = (std::string *)v87.__r_.__value_.__r.__words[0];
      quasar::UTextWrapper::UTextWrapper((quasar::UTextWrapper *)&v64, (const char *)v37, &code);
      if (code < U_ILLEGAL_ARGUMENT_ERROR)
      {
        quasar::URegularExpressionWrapper::replaceAllUTextWithSpace(*(URegularExpression ***)(a1 + 8), &v64, &code, (UText **)&c);
        quasar::UTextWrapper::operator=(&v64, (UText **)&c);
        quasar::UTextWrapper::~UTextWrapper((quasar::UTextWrapper *)&c);
        if (code < U_ILLEGAL_ARGUMENT_ERROR)
        {
          v48 = *(URegularExpression ***)(a1 + 24);
          if (v48
            && (quasar::URegularExpressionWrapper::replaceAllUTextWithSpace(v48, &v64, &code, (UText **)&c),
                quasar::UTextWrapper::operator=(&v64, (UText **)&c),
                quasar::UTextWrapper::~UTextWrapper((quasar::UTextWrapper *)&c),
                code >= U_ILLEGAL_ARGUMENT_ERROR))
          {
            if (quasar::gLogLevel >= 1)
            {
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              c = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
              v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Failed to remove some special characters: ", 42);
              v50 = u_errorName(code);
              v51 = strlen(v50);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&c);
            }
          }
          else
          {
            quasar::URegularExpressionWrapper::replaceAllUTextWithSpace(*(URegularExpression ***)(a1 + 40), &v64, &code, (UText **)&c);
            quasar::UTextWrapper::operator=(&v64, (UText **)&c);
            quasar::UTextWrapper::~UTextWrapper((quasar::UTextWrapper *)&c);
            if (code < U_ILLEGAL_ARGUMENT_ERROR)
            {
              quasar::URegularExpressionWrapper::replaceAllUTextWithSpace(*(URegularExpression ***)(a1 + 56), &v64, &code, (UText **)&c);
              quasar::UTextWrapper::operator=(&v64, (UText **)&c);
              quasar::UTextWrapper::~UTextWrapper((quasar::UTextWrapper *)&c);
              if (code < U_ILLEGAL_ARGUMENT_ERROR)
              {
                quasar::UTextWrapper::getUTF8String(&v64, &code, &v63);
                if (code < U_ILLEGAL_ARGUMENT_ERROR)
                {
                  quasar::trim(&v63);
                  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v58 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
                  else
                    v58 = v63.__r_.__value_.__l.__size_;
                  if (v58)
                  {
                    if (quasar::gLogLevel >= 6)
                    {
                      v83 = 0u;
                      v84 = 0u;
                      v81 = 0u;
                      v82 = 0u;
                      v79 = 0u;
                      v80 = 0u;
                      v77 = 0u;
                      v78 = 0u;
                      v75 = 0u;
                      v76 = 0u;
                      v73 = 0u;
                      v74 = 0u;
                      v71 = 0u;
                      v72 = 0u;
                      v69 = 0u;
                      v70 = 0u;
                      c = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
                      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Intermediate basic sanitization result=", 39);
                      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v60 = &v63;
                      else
                        v60 = (std::string *)v63.__r_.__value_.__r.__words[0];
                      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v61 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
                      else
                        v61 = v63.__r_.__value_.__l.__size_;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
                      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&c);
                    }
                    v31 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v63, v62);
                  }
                  else
                  {
                    if (quasar::gLogLevel >= 6)
                    {
                      v83 = 0u;
                      v84 = 0u;
                      v81 = 0u;
                      v82 = 0u;
                      v79 = 0u;
                      v80 = 0u;
                      v77 = 0u;
                      v78 = 0u;
                      v75 = 0u;
                      v76 = 0u;
                      v73 = 0u;
                      v74 = 0u;
                      v71 = 0u;
                      v72 = 0u;
                      v69 = 0u;
                      v70 = 0u;
                      c = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"sanitized string is empty", 25);
                      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&c);
                    }
                    v31 = 2;
                  }
                }
                else
                {
                  v31 = 1;
                }
                if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v63.__r_.__value_.__l.__data_);
                goto LABEL_109;
              }
              if (quasar::gLogLevel >= 1)
              {
                v83 = 0u;
                v84 = 0u;
                v81 = 0u;
                v82 = 0u;
                v79 = 0u;
                v80 = 0u;
                v77 = 0u;
                v78 = 0u;
                v75 = 0u;
                v76 = 0u;
                v73 = 0u;
                v74 = 0u;
                v71 = 0u;
                v72 = 0u;
                v69 = 0u;
                v70 = 0u;
                c = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
                v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Failed to remove control characters: ", 37);
                v56 = u_errorName(code);
                v57 = strlen(v56);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&c);
              }
            }
            else if (quasar::gLogLevel >= 1)
            {
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              c = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Failed to remove redundant space characters: ", 45);
              v53 = u_errorName(code);
              v54 = strlen(v53);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&c);
            }
          }
        }
        else if (quasar::gLogLevel >= 1)
        {
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          c = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Failed to replace unicode characters in range [\\u0000-\\uFFEF]: ", 63);
          v45 = u_errorName(code);
          v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&c);
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        c = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Could not open UTF8: : ", 23);
        v39 = u_errorName(code);
        v40 = strlen(v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&c);
      }
      v31 = 1;
LABEL_109:
      quasar::UTextWrapper::~UTextWrapper((quasar::UTextWrapper *)&v64);
LABEL_110:
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86) < 0)
        operator delete((void *)__p);
      std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v88);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      return v31;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v62 = a3;
    v87 = *(std::string *)a2;
    goto LABEL_7;
  }
  if (quasar::gLogLevel >= 6)
  {
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    c = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&c);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&c, (uint64_t)"Empty string received.", 22);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&c);
  }
  return 2;
}

void sub_1ADE2ADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a55);
  JUMPOUT(0x1ADE2AFA4);
}

void sub_1ADE2ADE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a55);
  JUMPOUT(0x1ADE2ADF4);
}

void sub_1ADE2AFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void quasar::BasicTextSanitizer::~BasicTextSanitizer(quasar::BasicTextSanitizer *this)
{
  quasar::TextSanitizer::~TextSanitizer(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::BasicTextSanitizer::sanitizeImpl(int a1, const std::string *a2, std::string *this)
{
  std::string::operator=(this, a2);
  return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[17],UErrorCode *,void>@<X0>(const char *a1@<X1>, UErrorCode **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADE2B090(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[17],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(_QWORD *a1, const char *a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D444E0;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1ADE2B0E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[6],UErrorCode *,void>@<X0>(const char *a1@<X1>, UErrorCode **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADE2B140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(_QWORD *a1, const char *a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D444E0;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1ADE2B190(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const(&)[9],UErrorCode *,void>@<X0>(const char *a1@<X1>, UErrorCode **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADE2B1F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const(&)[9],UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(_QWORD *a1, const char *a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D444E0;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1ADE2B240(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void quasar::EagerTriggerConfig::Register(uint64_t a1, uint64_t a2, const void **a3)
{
  size_t v5;
  char *v7;
  const void *v8;
  size_t v9;
  void **v10;
  const void *v11;
  size_t v12;
  void **v13;
  const void *v14;
  size_t v15;
  void **v16;
  const void *v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22;
  size_t v23;
  unsigned __int8 v24;

  if (*((char *)a3 + 23) >= 0)
    v5 = *((unsigned __int8 *)a3 + 23);
  else
    v5 = (size_t)a3[1];
  if (v5)
  {
    v7 = (char *)&v22;
    std::string::basic_string[abi:ne180100]((uint64_t)&v22, v5 + 1);
    if ((v24 & 0x80u) != 0)
      v7 = (char *)v22;
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v5);
    *(_WORD *)&v7[v5] = 45;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
  }
  if ((v24 & 0x80u) == 0)
    v9 = v24;
  else
    v9 = v23;
  v10 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v9 + 17);
  if (v21 < 0)
    v10 = (void **)v20[0];
  if (v9)
  {
    if ((v24 & 0x80u) == 0)
      v11 = &v22;
    else
      v11 = v22;
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "silence-posterior");
  std::string::basic_string[abi:ne180100]<0>(__p, "If silence posteriors are available, trigger only when the average silence posterior is >= this value. Otherwise, ignore this value.");
  quasar::SystemConfig::Register<float>(a2, (const void **)v20, a1, (uint64_t)__p, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if ((v24 & 0x80u) == 0)
    v12 = v24;
  else
    v12 = v23;
  v13 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v12 + 14);
  if (v21 < 0)
    v13 = (void **)v20[0];
  if (v12)
  {
    if ((v24 & 0x80u) == 0)
      v14 = &v22;
    else
      v14 = v22;
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "silence-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Sliding window size (in frames) for silence posterior average. Silence posterior is ignored if this value is <= 0.");
  quasar::SystemConfig::Register<int>(a2, (const void **)v20, a1 + 4, (uint64_t)__p, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if ((v24 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = v23;
  v16 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v15 + 15);
  if (v21 < 0)
    v16 = (void **)v20[0];
  if (v15)
  {
    if ((v24 & 0x80u) == 0)
      v17 = &v22;
    else
      v17 = v22;
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "stable-partials");
  std::string::basic_string[abi:ne180100]<0>(__p, "Trigger only after the number of stable partial results (one per frame) exceeds this value. (Eager's stabilization is unrelated to ResultStreamStabilizer stabilization). Regardless of this value, the trigger always looks for at least 1 stable partial result.");
  quasar::SystemConfig::Register<int>(a2, (const void **)v20, a1 + 8, (uint64_t)__p, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if ((char)v24 < 0)
    operator delete(v22);
}

void sub_1ADE2B598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void quasar::EagerConfig::Register(quasar::EagerConfig *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "early");
  quasar::EagerTriggerConfig::Register((uint64_t)this, (uint64_t)a2, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "backoff");
  quasar::EagerTriggerConfig::Register((uint64_t)this + 12, (uint64_t)a2, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-triggers");
  std::string::basic_string[abi:ne180100]<0>(v4, "Ignored if <= 0: Maximum number of eager result triggers. Once exceeded, no more eager results are created.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 24, (uint64_t)v4, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "require-silence-posterior");
  std::string::basic_string[abi:ne180100]<0>(v4, "If true, disable eager for requests that don't have silence posteriors. Defaults to true since 'false eager results' increase without silence posteriors. Set this to false for experimentation or if the number of 'false eager results' is acceptable.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 28, (uint64_t)v4, 0, 41, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "debug");
  std::string::basic_string[abi:ne180100]<0>(v4, "Debug mode: require-silence-posterior=false and trigger every frame without affecting state machine");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 29, (uint64_t)v4, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADE2B7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1ADE2BB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

quasar::EagerDecision *quasar::EagerDecision::EagerDecision(quasar::EagerDecision *this, const quasar::EagerConfig *a2, int a3)
{
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD v10[17];

  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v5;
  *((_BYTE *)this + 32) = a3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 40);
  *((_BYTE *)this + 304) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_QWORD *)this + 46) = 0;
  *(_QWORD *)((char *)this + 308) = 0;
  *((_BYTE *)this + 316) = 0;
  *((_WORD *)this + 188) = 1;
  *((_BYTE *)this + 378) = 0;
  *((_DWORD *)this + 98) = 0;
  *((_BYTE *)this + 396) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_QWORD *)this + 56) = 0;
  *((_WORD *)this + 228) = 1;
  *((_BYTE *)this + 458) = 0;
  *((_DWORD *)this + 116) = 0;
  *((_BYTE *)this + 468) = 0;
  *((_QWORD *)this + 65) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_WORD *)this + 264) = 1;
  *((_BYTE *)this + 530) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_DWORD *)this + 136) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ENABLED ", 8);
    v7 = quasar::operator<<(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" hasSilencePosterior=", 21);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  *((_QWORD *)this + 48) = this;
  if (a3)
  {
    v8 = *((unsigned int *)this + 1);
    if ((int)v8 >= 1)
      quasar::MovingAverage::init((quasar::EagerDecision *)((char *)this + 536), v8);
  }
  return this;
}

void sub_1ADE2BCC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  quasar::EagerFeatures *v3;
  _QWORD *v4;

  std::deque<int>::~deque[abi:ne180100](v4);
  quasar::EagerFeatures::~EagerFeatures(v3);
  quasar::EagerFeatures::~EagerFeatures((quasar::EagerFeatures *)(v2 + 392));
  quasar::EagerFeatures::~EagerFeatures((quasar::EagerFeatures *)(v2 + 312));
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void quasar::EagerFeatures::~EagerFeatures(quasar::EagerFeatures *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t quasar::EagerDecision::eval(quasar::EagerDecision *this, const quasar::EagerFeatures *a2, BOOL *a3, int *a4)
{
  const quasar::EagerFeatures *v8;
  char *v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  const void *v19;
  size_t v20;
  const void *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  int v29;
  _BOOL4 v30;
  _BYTE *v31;
  _BYTE *v32;
  const void *v33;
  int v34;
  int v35;
  void *__p[2];
  unsigned __int8 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[11];
  char v56;
  uint64_t v57;

  *a3 = 0;
  *a4 = 0;
  v8 = (quasar::EagerDecision *)((char *)this + 464);
  v9 = (char *)this + 392;
  *((_DWORD *)this + 98) = *((_DWORD *)this + 116);
  *((_BYTE *)this + 396) = *((_BYTE *)this + 468);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)((char *)this + 400), *((std::string **)this + 59), *((__int128 **)this + 60), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3));
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 424, *((char **)this + 62), *((_QWORD *)this + 63), (uint64_t)(*((_QWORD *)this + 63) - *((_QWORD *)this + 62)) >> 2);
  v10 = (_QWORD *)((char *)this + 520);
  *((_QWORD *)this + 56) = *((_QWORD *)this + 65);
  *(_DWORD *)(v9 + 63) = *(_DWORD *)((char *)v8 + 63);
  v11 = *((_BYTE *)a2 + 4);
  *((_DWORD *)this + 116) = *(_DWORD *)a2;
  *((_BYTE *)this + 468) = v11;
  if (v8 != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)((char *)this + 472), *((std::string **)a2 + 1), *((__int128 **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 496, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v12 = *((_QWORD *)a2 + 7);
  *(_DWORD *)((char *)this + 527) = *(_DWORD *)((char *)a2 + 63);
  *v10 = v12;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v55);
  if (quasar::gLogLevel >= 5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"trigger=", 8);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" numTriggers=", 13);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" thisFrame=", 11);
    quasar::operator<<(v15, (uint64_t)v8);
  }
  if (*((_BYTE *)this + 32) && *(int *)(*((_QWORD *)this + 48) + 4) >= 1)
  {
    quasar::MovingAverage::add((quasar::EagerDecision *)((char *)this + 536), *((float *)this + 131));
    if (quasar::gLogLevel < 5)
    {
      v18 = 1;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" avgSilPost={", 13);
      quasar::MovingAverage::getAverage((quasar::EagerDecision *)((char *)this + 536));
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
      quasar::MovingAverage::getCount((quasar::EagerDecision *)((char *)this + 536));
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"}", 1);
    }
  }
  else
  {
    v18 = 0;
  }
  if (*((_BYTE *)this + 304))
  {
    v19 = (const void *)*((_QWORD *)this + 43);
    v20 = *((_QWORD *)this + 44) - (_QWORD)v19;
    v21 = (const void *)*((_QWORD *)this + 62);
    if (v20 != *((_QWORD *)this + 63) - (_QWORD)v21 || memcmp(v19, v21, v20))
    {
      quasar::MovingAverage::clear((quasar::EagerDecision *)((char *)this + 536));
      *((_DWORD *)this + 150) = 0;
      quasar::EagerDecision::setTrigger(this, 0, v8);
      *a3 = 1;
    }
  }
  else if (!*a3)
  {
    v29 = *((_DWORD *)this + 6);
    if (v29 < 1 || *((_DWORD *)this + 77) < v29)
    {
      if (v18)
        v30 = quasar::MovingAverage::full((quasar::EagerDecision *)((char *)this + 536))
           && quasar::MovingAverage::getAverage((quasar::EagerDecision *)((char *)this + 536)) >= **((float **)this + 48);
      else
        v30 = 1;
      if (*((_BYTE *)this + 468)
        && (v31 = (_BYTE *)*((_QWORD *)this + 62), v32 = (_BYTE *)*((_QWORD *)this + 63), v31 != v32)
        && (v33 = (const void *)*((_QWORD *)this + 53), v32 - v31 == *((_QWORD *)this + 54) - (_QWORD)v33)
        && !memcmp(v31, v33, v32 - v31)
        && *(int *)v10 >= 1
        && (v35 = *((_DWORD *)this + 112), v35 >= 1))
      {
        if (*(_DWORD *)v10 > v35)
          ++*((_DWORD *)this + 150);
      }
      else
      {
        *((_DWORD *)this + 150) = 0;
      }
      if (quasar::gLogLevel >= 5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" numStable=", 11);
        std::ostream::operator<<();
      }
      v34 = *((_DWORD *)this + 150);
      if (v34 >= 1
        && *((_BYTE *)a2 + 66)
        && v30
        && v34 >= *(_DWORD *)(*((_QWORD *)this + 48) + 8)
        && *((_BYTE *)this + 528))
      {
        quasar::EagerDecision::setTrigger(this, 1, v8);
        *a4 = *((_DWORD *)this + 77);
      }
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::stringbuf::str();
    if ((v37 & 0x80u) == 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    if ((v37 & 0x80u) == 0)
      v23 = v37;
    else
      v23 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v22, v23);
    if ((char)v37 < 0)
      operator delete(__p[0]);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
  }
  if (*a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 5, (uint64_t)"INVALID ", 8);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"INVALIDATED ", 12);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    }
  }
  if (*a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 5, (uint64_t)"TRIGGER ", 8);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"TRIGGERED ", 10);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    }
  }
  v26 = *a4;
  if (*a3 && v26)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Invalidate and trigger shouldn't happen on the same frame", 57);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v38);
  }
  if (*((_BYTE *)this + 529))
  {
    if (!v26)
    {
      quasar::EagerDecision::setTrigger(this, 1, v8);
      *a4 = *((_DWORD *)this + 77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 5, (uint64_t)"FORCE TRIGGER ", 14);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
      if (quasar::gLogLevel >= 5)
      {
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"FORCE TRIGGERED ", 16);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
      }
    }
  }
  v55[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v55 + *(_QWORD *)(v55[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v55[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v56 < 0)
    operator delete((void *)v55[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v57);
}

void sub_1ADE2C450(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  JUMPOUT(0x1ADE2C494);
}

void sub_1ADE2C490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  std::ostringstream::~ostringstream((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void quasar::EagerDecision::setTrigger(quasar::EagerDecision *this, int a2, const quasar::EagerFeatures *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD v9[17];

  if (*((unsigned __int8 *)this + 304) == a2)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Bad state transition: triggered ", 32);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" -> ", 4);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  *((_BYTE *)this + 304) = a2;
  v5 = *(_DWORD *)a3;
  *((_BYTE *)this + 316) = *((_BYTE *)a3 + 4);
  *((_DWORD *)this + 78) = v5;
  if ((quasar::EagerDecision *)((char *)this + 312) != a3)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)((char *)this + 320), *((std::string **)a3 + 1), *((__int128 **)a3 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 2) - *((_QWORD *)a3 + 1)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 344, *((char **)a3 + 4), *((_QWORD *)a3 + 5), (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 2);
    a2 = *((unsigned __int8 *)this + 304);
  }
  v6 = *((_QWORD *)a3 + 7);
  *(_DWORD *)((char *)this + 375) = *(_DWORD *)((char *)a3 + 63);
  *((_QWORD *)this + 46) = v6;
  if (a2)
  {
    ++*((_DWORD *)this + 77);
    *((_QWORD *)this + 48) = (char *)this + 12;
    if (*((_BYTE *)this + 32))
    {
      v7 = *((unsigned int *)this + 4);
      if ((int)v7 >= 1)
        quasar::MovingAverage::init((quasar::EagerDecision *)((char *)this + 536), v7);
    }
  }
}

BOOL quasar::EagerDecision::matches(const void **this, int a2)
{
  size_t v2;
  const void *v3;

  if (*((_BYTE *)this + 304)
    && *((_DWORD *)this + 77) == a2
    && (v2 = (_BYTE *)this[63] - (_BYTE *)this[62], v3 = this[43], v2 == (_BYTE *)this[44] - (_BYTE *)v3))
  {
    return memcmp(this[62], v3, v2) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::EagerDecision::getLog(quasar::EagerDecision *this)
{
  return std::stringbuf::str();
}

uint64_t quasar::TransformerForClassificationConfig::HandleToken(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  int v5;
  BOOL v6;
  BOOL v7;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  std::string *v17;
  std::string *v18;
  int v19;
  std::string __str;
  int *v21;

  if (*((char *)a4 + 23) < 0)
  {
    v9 = a4[1];
    if (v9 != 27)
    {
      if (v9 != 30)
        return 0;
      v10 = *(_QWORD *)*a4 == 0x636E65757165533CLL && *(_QWORD *)(*a4 + 8) == 0x66697373616C4365;
      v11 = v10 && *(_QWORD *)(*a4 + 16) == 0x4F6E6F6974616369;
      if (!v11 || *(_QWORD *)(*a4 + 22) != 0x3E74757074754F6ELL)
        return 0;
LABEL_42:
      memset(&__str, 0, sizeof(__str));
      kaldi::ReadToken(a2, a3, (uint64_t)&__str);
      v19 = 0;
      v21 = &v19;
      v18 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 16, &v19, (uint64_t)&std::piecewise_construct, &v21);
      std::string::operator=(v18 + 1, &__str);
      goto LABEL_43;
    }
    a4 = (uint64_t *)*a4;
  }
  else
  {
    v5 = *((unsigned __int8 *)a4 + 23);
    if (v5 != 27)
    {
      if (v5 != 30)
        return 0;
      v6 = *a4 == 0x636E65757165533CLL && a4[1] == 0x66697373616C4365;
      v7 = v6 && a4[2] == 0x4F6E6F6974616369;
      if (!v7 || *(uint64_t *)((char *)a4 + 22) != 0x3E74757074754F6ELL)
        return 0;
      goto LABEL_42;
    }
  }
  if (*a4 != 0x6C436E656B6F543CLL
    || a4[1] != 0x6163696669737361
    || a4[2] != 0x7074754F6E6F6974
    || *(uint64_t *)((char *)a4 + 19) != 0x3E74757074754F6ELL)
  {
    return 0;
  }
  memset(&__str, 0, sizeof(__str));
  kaldi::ReadToken(a2, a3, (uint64_t)&__str);
  v19 = 1;
  v21 = &v19;
  v17 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1 + 16, &v19, (uint64_t)&std::piecewise_construct, &v21);
  std::string::operator=(v17 + 1, &__str);
LABEL_43:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1ADE2C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::TransformerForClassification::TransformerForClassification(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v11;
  void *__p;
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E5CFF280;
  a1[1] = 0;
  LODWORD(v11) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "classifications");
  std::unordered_map<quasar::TransformerClassificationType,std::string>::unordered_map((uint64_t)(a1 + 2), (int *)&v11, 1);
  if (v14 < 0)
    operator delete(__p);
  a1[7] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = &v11;
  std::string::basic_string[abi:ne180100]((uint64_t)&v11, v4 + 7);
  if (v13 < 0)
    v5 = v11;
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::WrappedComputeEngineConfig::Read((uint64_t)a1, a2, (uint64_t)&v11);
  if (v13 < 0)
    operator delete(v11);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 24))(&v11);
  v7 = v11;
  v11 = 0;
  v8 = a1[7];
  a1[7] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v11;
    v11 = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1ADE2CA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  kaldi::quasar::WrappedComputeEngineConfig *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v23 = *((_QWORD *)v19 + 7);
  *((_QWORD *)v19 + 7) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  *(_QWORD *)v19 = v21;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v20);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(v19);
  _Unwind_Resume(a1);
}

void quasar::TransformerForClassificationConfig::~TransformerForClassificationConfig(quasar::TransformerForClassificationConfig *this)
{
  *(_QWORD *)this = &off_1E5CFF280;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 16);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(this);
}

{
  *(_QWORD *)this = &off_1E5CFF280;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 16);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::TransformerForClassification::~TransformerForClassification(quasar::TransformerForClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E5CFF280;
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)this + 16);
  kaldi::quasar::WrappedComputeEngineConfig::~WrappedComputeEngineConfig(this);
}

void quasar::TransformerForClassification::run(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int32x2_t *a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::string **v16;
  int v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  int i;
  uint64_t j;
  unint64_t v26;
  void *__p;
  _BYTE *v28;
  uint64_t v29;
  std::string **v30;
  std::string **v31;
  uint64_t v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  int v39;
  _BYTE v40[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v39 = a2;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(v40, *(_QWORD *)(a1 + 56), a3);
  v9 = (_QWORD *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[10],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v36, "input_ids", (uint64_t *)v40);
  v10 = *(_QWORD *)v40;
  v37 = v9;
  *(_QWORD *)v40 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(v40, *(_QWORD *)(a1 + 56), a4);
  v11 = v37;
  if ((unint64_t)v37 >= v38)
  {
    v12 = (_QWORD *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[15],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v36, "attention_mask", (uint64_t *)v40);
    v13 = *(_QWORD *)v40;
    v37 = v12;
    *(_QWORD *)v40 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "attention_mask");
    v11[3] = *(_QWORD *)v40;
    v37 = v11 + 4;
  }
  v14 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 16), &v39);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((char *)v14 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v40, (const std::string::value_type *)v14[3], v14[4]);
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)(v14 + 3);
    *(_QWORD *)&v40[16] = v14[5];
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = &v33;
  LOBYTE(v31) = 0;
  v33 = (std::string *)operator new(0x18uLL);
  v34 = v33;
  v35 = v33 + 1;
  v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (__int128 *)v40, (__int128 *)&v40[24], v33);
  if ((v40[23] & 0x80000000) != 0)
    operator delete(*(void **)v40);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  memset(v40, 0, 24);
  (*(void (**)(uint64_t, uint64_t *, std::string **, _BYTE *, std::string ***))(*(_QWORD *)v15 + 120))(v15, &v36, &v33, v40, &v30);
  __p = v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v16 = v30;
  if (v31 == v30)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v17 = (*(uint64_t (**)(std::string *))((*v30)->__r_.__value_.__r.__words[0] + 152))(*v30);
  v18 = (*v16)->__r_.__value_.__r.__words[0];
  if (v17 > 2)
  {
    if ((*(unsigned int (**)(void))(v18 + 152))() != 3)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unsupported number of dimensions in transformer output", 54);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    if ((*(unsigned int (**)(std::string *, _QWORD))((*v16)->__r_.__value_.__r.__words[0] + 160))(*v16, 0) != 1)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unsupported first dimension size for 3-dim transformer output", 61);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    if (kaldi::MatrixBase<float>::NumRows(a3) != 1)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unsupported batch size for 3-dim transformer output", 51);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    __p = 0;
    v28 = 0;
    v29 = 0;
    (*(void (**)(std::string *, void **))((*v16)->__r_.__value_.__r.__words[0] + 56))(*v16, &__p);
    v19 = (*(uint64_t (**)(std::string *, uint64_t))((*v16)->__r_.__value_.__r.__words[0] + 160))(*v16, 1);
    v20 = (*(uint64_t (**)(std::string *, uint64_t))((*v16)->__r_.__value_.__r.__words[0] + 160))(*v16, 2);
    kaldi::Matrix<float>::Resize(a5, v19, v20, 1, 0);
    v21 = __p;
    v22 = v28;
    if (__p == v28
      || (v23 = kaldi::MatrixBase<float>::NumRows((uint64_t)a5),
          (v22 - v21) >> 2 != kaldi::MatrixBase<float>::NumCols((uint64_t)a5) * v23))
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Failed to flatten transformer output", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)a5); ++i)
    {
      for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)a5); ++j)
      {
        v26 = (int)(j + i * kaldi::MatrixBase<float>::NumCols((uint64_t)a5));
        if (v26 >= (v28 - (_BYTE *)__p) >> 2)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        *(_DWORD *)(*(_QWORD *)a5 + 4 * i * a5[2].i32[0] + 4 * j) = *((_DWORD *)__p + v26);
      }
    }
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v18 + 24))();
  }
  *(_QWORD *)v40 = &v30;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  *(_QWORD *)v40 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  *(_QWORD *)v40 = &v36;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
}

void sub_1ADE2D0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  a23 = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a19;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<quasar::TransformerClassificationType,std::string>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__emplace_unique_key_args<quasar::TransformerClassificationType,std::pair<quasar::TransformerClassificationType const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADE2D2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__emplace_unique_key_args<quasar::TransformerClassificationType,std::pair<quasar::TransformerClassificationType const,std::string> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__construct_node_hash<std::pair<quasar::TransformerClassificationType const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1ADE2D4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::__unordered_map_hasher<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::hash<quasar::TransformerClassificationType>,std::equal_to<quasar::TransformerClassificationType>,true>,std::__unordered_map_equal<quasar::TransformerClassificationType,std::__hash_value_type<quasar::TransformerClassificationType,std::string>,std::equal_to<quasar::TransformerClassificationType>,std::hash<quasar::TransformerClassificationType>,true>,std::allocator<std::__hash_value_type<quasar::TransformerClassificationType,std::string>>>::__construct_node_hash<std::pair<quasar::TransformerClassificationType const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::string *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  LODWORD(v8->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADE2D580(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[10],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v17 = v12;
  v18 = &v12[32 * v5];
  v19 = v18;
  v20 = &v12[32 * v11];
  v13 = std::string::basic_string[abi:ne180100]<0>(v18, a2);
  v14 = *a3;
  *a3 = 0;
  v13[3] = v14;
  v19 += 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v17);
  return v15;
}

void sub_1ADE2D67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<char const(&)[15],std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v17 = v12;
  v18 = &v12[32 * v5];
  v19 = v18;
  v20 = &v12[32 * v11];
  v13 = std::string::basic_string[abi:ne180100]<0>(v18, a2);
  v14 = *a3;
  *a3 = 0;
  v13[3] = v14;
  v19 += 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v17);
  return v15;
}

void sub_1ADE2D770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LexiconFst::LexiconFst(uint64_t a1, uint64_t a2, char a3, float a4)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[34];

  v8 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)a1);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = 0;
  if (a4 < 0.0 || a4 >= 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"silence phone probability must be [0,1) ", 40);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  if (a4 <= 0.0)
    goto LABEL_20;
  if (*(char *)(a2 + 23) < 0)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if (!v10)
      goto LABEL_21;
    v11 = *(_QWORD *)a2;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_21;
    v11 = a2;
  }
  v12 = (unsigned __int8 *)(v11 + v10);
  v13 = (unsigned __int8 *)v11;
LABEL_13:
  v14 = 0;
  while (*v13 != asc_1AE262F2A[v14])
  {
    if (++v14 == 5)
    {
      if (++v13 == v12)
        goto LABEL_20;
      goto LABEL_13;
    }
  }
  if (v13 != v12 && &v13[-v11] != (unsigned __int8 *)-1)
  {
LABEL_21:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"invalid silence phone value <", 29);
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = a2;
    else
      v18 = *(_QWORD *)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)">", 1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
LABEL_20:
  *(float *)(a1 + 40) = a4;
  std::string::operator=((std::string *)(v8 + 2), (const std::string *)a2);
  *(_BYTE *)(a1 + 44) = a3;
  return a1;
}

void sub_1ADE2D910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  _DWORD *v4;
  int v5;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = &unk_1E5D256C0;
  v4 = *(_DWORD **)(v1 + 8);
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::LexiconFst::CreateFst(kaldi::quasar::LexiconFst *this, const kaldi::quasar::Lexicon *a2, fst::SymbolTable *a3, fst::SymbolTable *a4, int a5)
{
  uint64_t *v7;
  std::vector<std::string>::pointer begin;
  const char *v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type size;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  float v50;
  float v51;
  double v52;
  unsigned int v53;
  float v54;
  int v55;
  float v56;
  float v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t *v77;
  kaldi::quasar::LexiconFst *v79;
  void *v80[2];
  unsigned __int8 v81;
  _OWORD v82[4];
  void *v83;
  char v84;
  _BYTE v85[152];
  std::string v86;
  _BYTE v87[32];
  int v88;
  std::vector<std::string> v89;
  std::string __p;
  uint64_t v91;
  uint64_t v92;

  v7 = (uint64_t *)a2;
  if ((**(uint64_t (***)(const kaldi::quasar::Lexicon *))a2)(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
    (*(void (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a3 + 32))(a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
    (*(void (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a4 + 32))(a4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    (*(void (**)(fst::SymbolTable *, const char *))(*(_QWORD *)a3 + 104))(a3, "<eps>");
    (*(void (**)(fst::SymbolTable *, const char *))(*(_QWORD *)a4 + 104))(a4, "<eps>");
    memset(&v89, 0, sizeof(v89));
    kaldi::quasar::Lexicon::GetPhoneSymbols((uint64_t)v7, &v89);
    if ((kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols((uint64_t)v7) & 0x80000000) != 0)
    {
      v36 = 0;
LABEL_139:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      return v36;
    }
    if ((int)((*(_QWORD *)(*((_QWORD *)this + 1) + 72) - *(_QWORD *)(*((_QWORD *)this + 1) + 64)) >> 3) >= 1)
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates((uint64_t)this);
    v79 = this;
    memset(v87, 0, sizeof(v87));
    v88 = 1065353216;
    begin = v89.__begin_;
    v77 = v7;
    if (v89.__begin_ != v89.__end_)
    {
      v73 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v74 = *MEMORY[0x1E0DE4F60];
      v10 = "can not find symbol ";
      v72 = MEMORY[0x1E0DE4FB8] + 16;
      while (1)
      {
        if (!a5
          || !kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols((uint64_t)v7)
          || *std::string::at(begin, 0) != 35)
        {
LABEL_57:
          v26 = (*(uint64_t (**)(fst::SymbolTable *, std::vector<std::string>::pointer))(*(_QWORD *)a3 + 32))(a3, begin);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)begin;
          *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)begin, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 5) = v26;
          goto LABEL_58;
        }
        std::string::basic_string(&v86, begin, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        v11 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v86
            : (std::string *)v86.__r_.__value_.__r.__words[0];
        v12 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v86.__r_.__value_.__r.__words[2])
            : v86.__r_.__value_.__l.__size_;
        if (v12)
        {
          v13 = 0;
          while (memchr("0123456789", v11->__r_.__value_.__s.__data_[v13], 0xAuLL))
          {
            if (v12 == ++v13)
              goto LABEL_27;
          }
          if (v13 != -1)
            break;
        }
LABEL_27:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v82);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"/WORD-DIS-", 10);
        v7 = v77;
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = &v86;
        else
          v16 = (std::string *)v86.__r_.__value_.__r.__words[0];
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        else
          size = v86.__r_.__value_.__l.__size_;
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
        std::stringbuf::str();
        v19 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a3 + 96))(a3, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v19 == -1)
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v20 = v10;
            v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v10, 20);
            std::stringbuf::str();
            if ((v81 & 0x80u) == 0)
              v22 = v80;
            else
              v22 = (void **)v80[0];
            if ((v81 & 0x80u) == 0)
              v23 = v81;
            else
              v23 = (uint64_t)v80[1];
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" in the input symbol table", 26);
            v10 = v20;
            if ((char)v81 < 0)
              operator delete(v80[0]);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
          v14 = 0;
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)begin;
          *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)begin, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 5) = v19;
          v14 = 1;
        }
        *(_QWORD *)&v82[0] = v74;
        *(_QWORD *)((char *)v82 + *(_QWORD *)(v74 - 24)) = v73;
        *((_QWORD *)&v82[0] + 1) = v72;
        if (v84 < 0)
          operator delete(v83);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](v85);
        if (v19 != -1)
          goto LABEL_51;
        v25 = 0;
LABEL_53:
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        if ((v25 & 1) == 0)
          goto LABEL_86;
        if (!v14)
          goto LABEL_57;
LABEL_58:
        if (++begin == v89.__end_)
          goto LABEL_59;
      }
      v14 = 0;
      v7 = v77;
LABEL_51:
      v25 = 1;
      goto LABEL_53;
    }
LABEL_59:
    v27 = (uint64_t)v79;
    if (!*((_BYTE *)v79 + 44))
    {
      LODWORD(v30) = -1;
      goto LABEL_88;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v82);
    v28 = (_QWORD *)MEMORY[0x1E0DE4F60];
    if (a5 && kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols((uint64_t)v7))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"/WORD-DIS-", 10);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
      std::stringbuf::str();
      v30 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a3 + 96))(a3, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v30 == -1)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"can not find symbol ", 20);
          std::stringbuf::str();
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v86;
          else
            v32 = (std::string *)v86.__r_.__value_.__r.__words[0];
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          else
            v33 = v86.__r_.__value_.__l.__size_;
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" in the input symbol table", 26);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
        v35 = 0;
        LODWORD(v30) = -1;
LABEL_83:
        *(_QWORD *)&v82[0] = *v28;
        *(_QWORD *)((char *)v82 + *(_QWORD *)(*(_QWORD *)&v82[0] - 24)) = v28[3];
        *((_QWORD *)&v82[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (v84 < 0)
          operator delete(v83);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](v85);
        v7 = v77;
        if ((v35 & 1) == 0)
        {
LABEL_86:
          v36 = 0;
LABEL_138:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v87);
          goto LABEL_139;
        }
LABEL_88:
        v37 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v79);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
        v38 = *((_QWORD *)v79 + 1);
        *(_DWORD *)(v38 + 88) = v37;
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        *(_QWORD *)(v38 + 8) = v39 & 0xCCFFFFF0007 | (((v39 >> 35) & 1) << 37) | *(_QWORD *)(v38 + 8) & 4;
        v40 = *(_DWORD *)(*((_QWORD *)v79 + 1) + 88);
        if (*((float *)v79 + 10) == 0.0)
        {
          kaldi::quasar::Lexicon::begin(v7, (uint64_t *)v82);
          while (1)
          {
            kaldi::quasar::Lexicon::end((uint64_t)v7, &__p);
            if (!(*(_QWORD *)&v82[0] | __p.__r_.__value_.__r.__words[0])
              || *(_OWORD *)&__p.__r_.__value_.__l.__data_ == v82[0])
            {
              break;
            }
            kaldi::quasar::Lexicon::const_iterator::operator*(v82, &__p);
            if (v92 != v91)
            {
              v41 = 0;
              v42 = 0;
              v43 = (v92 - v91) / 24;
              v44 = v43 - 1;
              if (v43 <= 1)
                v45 = 1;
              else
                v45 = (v92 - v91) / 24;
              v46 = v40;
              do
              {
                v47 = v40;
                if (v44 != v42)
                  v47 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v79);
                if (0xAAAAAAAAAAAAAAABLL * ((v92 - v91) >> 3) <= v42)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                v80[0] = (void *)(v91 + v41);
                v48 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)(v91 + v41), (uint64_t)&std::piecewise_construct, (__int128 **)v80)+ 10);
                if (v42)
                  v49 = 0;
                else
                  v49 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a4 + 32))(a4, &__p);
                LODWORD(v86.__r_.__value_.__l.__data_) = v48;
                *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = v49;
                HIDWORD(v86.__r_.__value_.__r.__words[1]) = v47;
                fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
                fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v46, (float *)&v86);
                ++v42;
                v41 += 24;
                v46 = v47;
              }
              while (v45 != v42);
            }
            v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            kaldi::quasar::Lexicon::const_iterator::operator++((int **)v82);
            v27 = (uint64_t)v79;
            v7 = v77;
          }
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(v27, v40, 0.0);
        }
        else
        {
          v76 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v79);
          v75 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v79);
          v50 = *((float *)v79 + 10);
          v51 = logf(v50);
          v52 = log(1.0 - v50);
          v53 = (*(uint64_t (**)(fst::SymbolTable *, uint64_t))(*(_QWORD *)a3 + 32))(a3, (uint64_t)v79 + 16);
          v54 = v52;
          __p.__r_.__value_.__r.__words[0] = 0;
          *(float *)&__p.__r_.__value_.__r.__words[1] = -v54;
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = v76;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v40, (float *)&__p);
          if (*((_BYTE *)v79 + 44))
          {
            v55 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v79);
            __p.__r_.__value_.__r.__words[0] = v53;
            *(float *)&__p.__r_.__value_.__r.__words[1] = -v51;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v55;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v40, (float *)&__p);
            __p.__r_.__value_.__r.__words[0] = v53;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v55;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v75, (float *)&__p);
            __p.__r_.__value_.__r.__words[0] = v30;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v76;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v55, (float *)&__p);
            v27 = (uint64_t)v79;
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = v53;
            *(float *)&__p.__r_.__value_.__r.__words[1] = -v51;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v76;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v40, (float *)&__p);
            __p.__r_.__value_.__r.__words[0] = v53;
            LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
            HIDWORD(__p.__r_.__value_.__r.__words[1]) = v76;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v75, (float *)&__p);
          }
          kaldi::quasar::Lexicon::begin(v7, (uint64_t *)v82);
          v56 = 0.0 - v54;
          v57 = 0.0 - v51;
          while (1)
          {
            kaldi::quasar::Lexicon::end((uint64_t)v7, &__p);
            if (!(*(_QWORD *)&v82[0] | __p.__r_.__value_.__r.__words[0])
              || *(_OWORD *)&__p.__r_.__value_.__l.__data_ == v82[0])
            {
              break;
            }
            kaldi::quasar::Lexicon::const_iterator::operator*(v82, &__p);
            v58 = v91;
            if (v92 != v91)
            {
              v59 = -1 - 0x5555555555555555 * ((v92 - v91) >> 3);
              if (v59)
              {
                v60 = 0;
                v61 = 0;
                v62 = v76;
                do
                {
                  v63 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)v79);
                  if (0xAAAAAAAAAAAAAAABLL * ((v92 - v91) >> 3) <= v61)
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  v64 = v63;
                  v80[0] = (void *)(v91 + v60);
                  v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)(v91 + v60), (uint64_t)&std::piecewise_construct, (__int128 **)v80)+ 10);
                  if (v61)
                    v66 = 0;
                  else
                    v66 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a4 + 32))(a4, &__p);
                  LODWORD(v86.__r_.__value_.__l.__data_) = v65;
                  *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 4) = v66;
                  HIDWORD(v86.__r_.__value_.__r.__words[1]) = v64;
                  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v79);
                  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*((_QWORD **)v79 + 1), v62, (float *)&v86);
                  ++v61;
                  v60 += 24;
                  v62 = v64;
                }
                while (v59 != v61);
                v58 = v91;
                v27 = (uint64_t)v79;
                v7 = v77;
                if (0xAAAAAAAAAAAAAAABLL * ((v92 - v91) >> 3) <= v59)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              else
              {
                v64 = v76;
              }
              v80[0] = (void *)(v58 + 24 * v59);
              v67 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)v80[0], (uint64_t)&std::piecewise_construct, (__int128 **)v80)+ 10);
              if (v59)
                v68 = 0;
              else
                v68 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a4 + 32))(a4, &__p);
              v86.__r_.__value_.__r.__words[0] = __PAIR64__(v68, v67);
              v86.__r_.__value_.__l.__size_ = __PAIR64__(v76, LODWORD(v56));
              fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v27);
              fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(v27 + 8), v64, (float *)&v86);
              if (0xAAAAAAAAAAAAAAABLL * ((v92 - v91) >> 3) <= v59)
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              v80[0] = (void *)(v91 + 24 * v59);
              v69 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v87, (unsigned __int8 *)v80[0], (uint64_t)&std::piecewise_construct, (__int128 **)v80)+ 10);
              if (v59)
                v70 = 0;
              else
                v70 = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a4 + 32))(a4, &__p);
              v86.__r_.__value_.__r.__words[0] = __PAIR64__(v70, v69);
              v86.__r_.__value_.__l.__size_ = __PAIR64__(v75, LODWORD(v57));
              fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v27);
              fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(v27 + 8), v64, (float *)&v86);
            }
            v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            kaldi::quasar::Lexicon::const_iterator::operator++((int **)v82);
          }
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(v27, v76, 0.0);
        }
        v36 = 1;
        goto LABEL_138;
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"#", 1);
      std::ostream::operator<<();
      std::stringbuf::str();
      LODWORD(v30) = (*(uint64_t (**)(fst::SymbolTable *, std::string *))(*(_QWORD *)a3 + 32))(a3, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v35 = 1;
    goto LABEL_83;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"the input lexicon is empty", 26);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
  return 0;
}

void sub_1ADE2E698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *a66;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a66);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a57);
  a21 = (uint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::const_iterator::operator*(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 *v5[34];
  __int128 **v6;

  v3 = *a1;
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Cannot dereference iterator that is already at the end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  memset(v5, 0, 24);
  kaldi::quasar::Lexicon::GetPron(a1[2], *(_DWORD *)(v3 + 40), *(_QWORD *)(a1[1] + 32), (uint64_t)v5);
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string const&,std::vector<std::string>&,0>(a2, (__int128 *)(*a1 + 16), v5);
  v6 = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_1ADE2E920(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

int **kaldi::quasar::Lexicon::const_iterator::operator++(int **a1)
{
  int *v1;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  BOOL v7;
  int *v8;
  _QWORD v10[34];

  v1 = *a1;
  if (!*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Cannot increment iterator that is already at the end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v4 = a1[1];
  v3 = a1[2];
  v5 = (int *)*((_QWORD *)v4 + 1);
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = *(int **)v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (int *)*((_QWORD *)v4 + 2);
      v7 = *(_QWORD *)v6 == (_QWORD)v4;
      v4 = v6;
    }
    while (!v7);
  }
  a1[1] = v6;
  if (a1[1] == (int *)(std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)v3 + 30, v1 + 10)+ 4))
  {
    v8 = *(int **)*a1;
    *a1 = v8;
    if (v8)
      a1[1] = (int *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)a1[2] + 30, v8 + 10)[3];
  }
  return a1;
}

BOOL kaldi::quasar::LexiconFst::CreateFst(uint64_t a1, unsigned int **a2, unsigned int a3)
{
  unsigned int *v3;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  int v23;
  int v24;
  float v25;
  float v26;
  float v27;
  unsigned int *v28;
  unsigned int *v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t v50;
  float v51;
  int v52;
  _QWORD v53[35];

  v3 = a2[1];
  v49 = *a2;
  if (v3 == *a2)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      v22 = a2[1];
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"the input word pron pair is empty", 33);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      v3 = v22;
    }
  }
  else
  {
    v48 = a2[1];
    memset(v53, 0, 24);
    if ((int)((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3) >= 1)
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeleteStates(a1);
    v7 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(v8 + 88) = v7;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    *(_QWORD *)(v8 + 8) = v9 & 0xCCFFFFF0007 | (((v9 >> 35) & 1) << 37) | *(_QWORD *)(v8 + 8) & 4;
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 88);
    if (*(float *)(a1 + 40) == 0.0)
    {
      v12 = *a2;
      v11 = a2[1];
      while (v12 != v11)
      {
        v13 = *((_QWORD *)v12 + 2) - *((_QWORD *)v12 + 1);
        if (v13)
        {
          v14 = 0;
          v15 = (v13 >> 2) - 1;
          if ((unint64_t)(v13 >> 2) <= 1)
            v16 = 1;
          else
            v16 = v13 >> 2;
          v17 = v10;
          do
          {
            v18 = v10;
            if (v15 != v14)
              v18 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
            v19 = *((_QWORD *)v12 + 1);
            if (v14 >= (*((_QWORD *)v12 + 2) - v19) >> 2)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v20 = *(_DWORD *)(v19 + 4 * v14);
            v21 = *v12;
            if (v14)
              v21 = 0;
            v50 = __PAIR64__(v21, v20);
            v51 = 0.0;
            v52 = v18;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v17, (float *)&v50);
            ++v14;
            v17 = v18;
          }
          while (v16 != v14);
          v11 = a2[1];
        }
        v12 += 8;
      }
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(a1, v10, 0.0);
    }
    else
    {
      v23 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
      v24 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
      v25 = *(float *)(a1 + 40);
      v26 = logf(v25);
      v27 = log(1.0 - v25);
      v50 = 0;
      v51 = -v27;
      v52 = v23;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v10, (float *)&v50);
      v50 = a3;
      v51 = -v26;
      v52 = v23;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v10, (float *)&v50);
      v50 = a3;
      v51 = 0.0;
      v52 = v23;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v24, (float *)&v50);
      v29 = *a2;
      v28 = a2[1];
      if (*a2 != v28)
      {
        v30 = 0.0 - v27;
        v31 = 0.0 - v26;
        do
        {
          v32 = *((_QWORD *)v29 + 1);
          v33 = *((_QWORD *)v29 + 2) - v32;
          if (v33)
          {
            v34 = (v33 >> 2) - 1;
            if (v33 >> 2 == 1)
            {
              v39 = v23;
            }
            else
            {
              v35 = 0;
              v36 = v23;
              do
              {
                v37 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState(a1);
                v38 = *((_QWORD *)v29 + 1);
                if (v35 >= (*((_QWORD *)v29 + 2) - v38) >> 2)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                v39 = v37;
                v40 = *(_DWORD *)(v38 + 4 * v35);
                v41 = *v29;
                if (v35)
                  v41 = 0;
                v50 = __PAIR64__(v41, v40);
                v51 = 0.0;
                v52 = v37;
                fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
                fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v36, (float *)&v50);
                ++v35;
                v36 = v39;
              }
              while (v34 != v35);
              v32 = *((_QWORD *)v29 + 1);
              if (v34 >= (*((_QWORD *)v29 + 2) - v32) >> 2)
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            v42 = *(_DWORD *)(v32 + 4 * v34);
            v43 = *v29;
            if (v34)
              v43 = 0;
            v50 = __PAIR64__(v43, v42);
            v51 = v30;
            v52 = v23;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v39, (float *)&v50);
            v44 = *((_QWORD *)v29 + 1);
            if (v34 >= (*((_QWORD *)v29 + 2) - v44) >> 2)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v45 = *(_DWORD *)(v44 + 4 * v34);
            v46 = *v29;
            if (v34)
              v46 = 0;
            v50 = __PAIR64__(v46, v45);
            v51 = v31;
            v52 = v24;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a1);
            fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), v39, (float *)&v50);
            v28 = a2[1];
          }
          v29 += 8;
        }
        while (v29 != v28);
      }
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal(a1, v23, 0.0);
    }
    v50 = (unint64_t)v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    v3 = v48;
  }
  return v3 != v49;
}

void sub_1ADE2EE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string const&,std::vector<std::string>&,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1ADE2EF34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::ForceAlignDecoderBase::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::TrainingGraphCompilerOptions::Register((uint64_t)(this + 78), (uint64_t)a2);
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)this + 644, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[71], a2, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "dict-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 56), (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "dict-mapped-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 59), (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "optional-silence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Optional silence phone");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 62), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-prob");
  std::string::basic_string[abi:ne180100]<0>(__p, "Silence probability (0.0 to 1.0)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 65), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Phone table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 66), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "tree-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tree file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 75), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 636, (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum number of tokens");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 80), (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 82), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "align-lattice-expand-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice expansion limit when doing word alignment(0 for none)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 90), (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 91), (uint64_t)__p, 1, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE2F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::TrainingGraphCompilerOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "transition-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale of transition probabilities (excluding self-loops)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "self-loop-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale of self-loop vs. non-self-loop probability mass ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "reorder");
  std::string::basic_string[abi:ne180100]<0>(__p, "Reorder transition ids for greater decoding efficiency.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 9, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "rm-eps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove [most] epsilons before minimization (only applicable if disambig symbols present)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE2F670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::ForceAlignDecoderBase::finishInit(quasar::ForceAlignDecoderBase *this)
{
  kaldi::Input *v2;
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  __int128 v26;
  void *v27[2];
  __int128 v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[15];
  char v47;
  std::vector<unsigned int> v48;

  memset(&v48, 0, sizeof(v48));
  v47 = 0;
  v2 = (kaldi::Input *)kaldi::Input::Input(v46, (char *)this + 728, &v47);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v3 = (_QWORD *)kaldi::Input::Stream(v2);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet((const std::locale *)&v26, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)&v26);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, (uint64_t)&v43, v5);
  if ((kaldi::SplitStringToIntegers<int>((uint64_t)&v43, ":", 1, &v48) & 1) == 0)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    *(_OWORD *)v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Invalid silence-phones string ", 30);
    if (v45 >= 0)
      v24 = (void **)&v43;
    else
      v24 = v43;
    if (v45 >= 0)
      v25 = HIBYTE(v45);
    else
      v25 = v44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v26);
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(&v26, &v48);
  *((_DWORD *)this + 188) = v26;
  *((_QWORD *)this + 95) = *((_QWORD *)&v26 + 1);
  *((_WORD *)this + 384) = v27[0];
  std::vector<BOOL>::operator=((void **)this + 97, (uint64_t)&v27[1]);
  if ((__int128 *)((char *)this + 752) != &v26)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 800, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27[1])
    operator delete(v27[1]);
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  kaldi::Input::~Input((kaldi::Input *)v46);
  if (v48.__begin_)
  {
    v48.__end_ = v48.__begin_;
    operator delete(v48.__begin_);
  }
  quasar::ModelLoader::readContextDependency(*((_QWORD *)this + 46), (unsigned __int8 *)this + 600, (uint64_t *)&v26);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 584, &v26);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 71), (quasar::ForceAlignDecoderBase *)((char *)this + 32), 1, *((unsigned __int8 *)this + 441), 1);
  v9 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 71), "<?>");
  if (v9 != -1)
  {
    v10 = v9;
    v11 = *((int *)this + 161);
    if ((_DWORD)v11 && v9 != v11 && quasar::gLogLevel >= 2)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      v30 = 0u;
      *(_OWORD *)v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Silence label is set to ", 24);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" but does not match the auto-determined silence label ", 54);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)". Will use latter.", 18);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v26);
    }
    *((_DWORD *)this + 161) = v10;
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 161, (uint64_t)this + 656, (uint64_t)this + 680, (uint64_t *)&v26);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 704, &v26);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 528, 4, 0, (uint64_t *)&v26);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 552, &v26);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  quasar::ForceAlignDecoderBase::setDisambigPhoneIds(this);
  quasar::Lexicon::create((uint64_t)this + 472, (uint64_t)this + 448, &v26);
  v20 = v26;
  *(_QWORD *)&v26 = 0;
  v21 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = v20;
  if (v21)
  {
    std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)this + 848, v21);
    v22 = v26;
    *(_QWORD *)&v26 = 0;
    if (v22)
      std::default_delete<quasar::Lexicon>::operator()[abi:ne180100]((uint64_t)&v26, v22);
  }
}

void sub_1ADE2FAC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  kaldi::Input::~Input((kaldi::Input *)(v1 - 72));
  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

unint64_t quasar::ForceAlignDecoderBase::setDisambigPhoneIds(quasar::ForceAlignDecoderBase *this)
{
  unint64_t result;
  unint64_t v3;
  void **v4;
  int v5;
  char *v6;
  unint64_t v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  void *__p;
  char v18;

  *((_QWORD *)this + 104) = *((_QWORD *)this + 103);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 69) + 120))(*((_QWORD *)this + 69));
  if (result)
  {
    v3 = 0;
    v4 = (void **)((char *)this + 824);
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 69) + 88))(&__p, *((_QWORD *)this + 69), v3);
      if (v18 < 0)
      {
        v5 = *(unsigned __int8 *)__p;
        operator delete(__p);
        if (v5 == 35)
        {
LABEL_7:
          v6 = (char *)*((_QWORD *)this + 104);
          v7 = *((_QWORD *)this + 105);
          if ((unint64_t)v6 >= v7)
          {
            v9 = (char *)*v4;
            v10 = (v6 - (_BYTE *)*v4) >> 2;
            v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v12 = v7 - (_QWORD)v9;
            if (v12 >> 1 > v11)
              v11 = v12 >> 1;
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
              v13 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v13 = v11;
            if (v13)
            {
              v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 840, v13);
              v6 = (char *)*((_QWORD *)this + 104);
              v9 = (char *)*((_QWORD *)this + 103);
            }
            else
            {
              v14 = 0;
            }
            v15 = &v14[4 * v10];
            *(_DWORD *)v15 = v3;
            v8 = v15 + 4;
            while (v6 != v9)
            {
              v16 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v15 - 1) = v16;
              v15 -= 4;
            }
            *((_QWORD *)this + 103) = v15;
            *((_QWORD *)this + 104) = v8;
            *((_QWORD *)this + 105) = &v14[4 * v13];
            if (v9)
              operator delete(v9);
          }
          else
          {
            *(_DWORD *)v6 = v3;
            v8 = v6 + 4;
          }
          *((_QWORD *)this + 104) = v8;
        }
      }
      else if (__p == 35)
      {
        goto LABEL_7;
      }
      ++v3;
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 69) + 120))(*((_QWORD *)this + 69));
    }
    while (result > v3);
  }
  return result;
}

uint64_t quasar::ForceAlignDecoderBase::wordAlignLattice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v10 = *(_DWORD *)(a1 + 720);
  if (v10 < 1)
    v11 = 0;
  else
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3) * v10 + 1000;
  v12 = *(_QWORD *)(a1 + 704);
  v13 = *(std::__shared_weak_count **)(a1 + 712);
  *(_QWORD *)&v44 = v12;
  *((_QWORD *)&v44 + 1) = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (a5)
  {
    std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfo&,void>(*(_QWORD *)(a1 + 704), &v27);
    v16 = v27;
    v27 = 0uLL;
    v44 = v16;
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v12 = v44;
    if ((_QWORD)v44 + 32 != a5)
      std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)(v44 + 32), *(int **)a5, (int *)(a5 + 8));
  }
  if (!kaldi::WordAlignLattice(a3, a2, v12, v11, a4))
  {
    if (quasar::gLogLevel >= 2)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Word alignment failed.", 22);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
    }
    goto LABEL_27;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4) == -1)
  {
    if (quasar::gLogLevel >= 2)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Word alignment lattice empty.", 29);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
    }
LABEL_27:
    v22 = 0;
    goto LABEL_28;
  }
  kaldi::TopSortCompactLatticeIfNeeded(a4);
  v22 = 1;
LABEL_28:
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v22;
}

void sub_1ADE2FF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9 - 112);
  _Unwind_Resume(a1);
}

uint64_t quasar::ForceAlignDecoderBase::align(uint64_t a1, kaldi *a2, kaldi::DecodableInterface *a3, uint64_t *a4, uint64_t a5, kaldi::LatticeScoreCache *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 *i;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  kaldi::quasar::LexiconFst *v26;
  fst::SymbolTable *v27;
  uint64_t v28;
  fst::SymbolTable *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  quasar::Bitmap *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  __int128 v69;
  _QWORD v70[2];
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  void *__p[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unsigned __int8 v92;
  __int128 v93;

  v93 = 0uLL;
  v69 = 0uLL;
  v70[0] = 0;
  v9 = *a4;
  v8 = a4[1];
  if (*a4 == v8)
  {
LABEL_32:
    kaldi::quasar::Lexicon::Lexicon(__p, &v69, 1, 0, 0);
    kaldi::quasar::Lexicon::SetPronView((uint64_t)__p, 2u, 1);
    LOBYTE(v71) = 0;
    std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>((float *)(a1 + 520), a1 + 496, (unsigned __int8 *)&v71, &v66);
    v19 = v66;
    v66 = 0uLL;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
    v93 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (kaldi::quasar::LexiconFst *)v93;
    v27 = *(fst::SymbolTable **)(a1 + 552);
    v28 = *(_QWORD *)(a1 + 568);
    v29 = *(fst::SymbolTable **)(v28 + 96);
    v30 = *(std::__shared_weak_count **)(v28 + 104);
    *(_QWORD *)&v66 = v29;
    *((_QWORD *)&v66 + 1) = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    kaldi::quasar::LexiconFst::CreateFst(v26, (const kaldi::quasar::Lexicon *)__p, v27, v29, 0);
    if (v30)
    {
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v35 = (quasar::Bitmap *)v93;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v93);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v36);
    kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)__p);
    __p[0] = &v69;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v91 = 0uLL;
    v73 = 0;
    v37 = (_QWORD *)operator new();
    quasar::Bitmap::~Bitmap(v35);
    v39 = *(_QWORD *)(v38 + 8);
    v37[1] = v39;
    ++*(_DWORD *)(v39 + 56);
    *v37 = &unk_1E5D28970;
    v73 = v37;
    std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,void>((uint64_t)a2, *(_QWORD *)(a1 + 584), &v73, __p);
    v40 = __p[0];
    v41 = (std::__shared_weak_count *)__p[1];
    v91 = *(_OWORD *)__p;
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v71);
    if (!kaldi::TrainingGraphCompiler::CompileGraphFromText((uint64_t)v40, a4, &v71))
    {
      if (quasar::gLogLevel >= 1)
      {
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to create decoding graph.", 32);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" Hint: Are all the words in the pron lexicon?", 45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" Are all the words in the word symbol table unique?", 51);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
      v43 = 2;
      goto LABEL_71;
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v75 = 0;
    kaldi::AddTransitionProbs(a2, __p, (uint64_t)&v71, *(float *)(a1 + 624), *(float *)(a1 + 628));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)((char *)&v69 + 4) = 0x147FFFFFFFLL;
    *(_QWORD *)((char *)v70 + 4) = 0x400000003F000000;
    LODWORD(v69) = *(_DWORD *)(a1 + 636);
    v42 = *(_DWORD *)(a1 + 640);
    HIDWORD(v69) = 0;
    LODWORD(v70[0]) = v42;
    kaldi::ScoreCacheFasterDecoder::ScoreCacheFasterDecoder(&v66, &v71, &v69, 0);
    kaldi::ScoreCacheFasterDecoder::Decode((kaldi::ScoreCacheFasterDecoder *)&v66, a3);
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v64);
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v62);
    if (kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)&v66)
      && (kaldi::ScoreCacheFasterDecoder::GetBestPath((uint64_t)&v66, (uint64_t)&v62, a6, a2) & 1) != 0)
    {
      fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v62, (uint64_t)&v64, 1);
      if ((quasar::ForceAlignDecoderBase::wordAlignLattice(a1, (uint64_t)a2, (uint64_t)&v64, a5, 0) & 1) != 0)
      {
        kaldi::TopSortCompactLatticeIfNeeded(a5);
        v43 = 0;
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 2)
      {
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word alignment failed. Aborting.", 32);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
    }
    else if (quasar::gLogLevel >= 2)
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoding failed. Aborting.", 26);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    v43 = 2;
LABEL_64:
    v62 = &unk_1E5D25580;
    v46 = v63;
    if (v63)
    {
      v47 = *(_DWORD *)(v63 + 56) - 1;
      *(_DWORD *)(v63 + 56) = v47;
      if (!v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    v64 = &unk_1E5D25800;
    v48 = v65;
    if (v65)
    {
      v49 = *(_DWORD *)(v65 + 56) - 1;
      *(_DWORD *)(v65 + 56) = v49;
      if (!v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    }
    kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)&v66);
LABEL_71:
    v71 = &unk_1E5D256C0;
    v50 = v72;
    if (v72)
    {
      v51 = *(_DWORD *)(v72 + 56) - 1;
      *(_DWORD *)(v72 + 56) = v51;
      if (!v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    if (v41)
    {
      v52 = (unint64_t *)&v41->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    goto LABEL_79;
  }
  while (1)
  {
    quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(a1 + 568), &v91);
    v10 = v92;
    if ((v92 & 0x80u) != 0)
      v10 = *((_QWORD *)&v91 + 1);
    if (v10)
    {
      v66 = 0u;
      v67 = 0u;
      v68 = 1065353216;
      v11 = *(_QWORD **)(a1 + 848);
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::Lexicon::lookUpProns(v11, (uint64_t)&v91, (uint64_t)&v66, (char *)__p);
      if (SBYTE7(v75) < 0)
        operator delete(__p[0]);
      if (*((_QWORD *)&v67 + 1))
      {
        for (i = (__int128 *)v67; i; i = *(__int128 **)i)
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>((std::string *)__p, &v91, i + 1);
          std::vector<std::pair<std::string,std::string>>::emplace_back<std::pair<std::string,std::string>>((std::vector<std::pair<std::string, std::string>> *)&v69, (__int128 *)__p);
          if (SHIBYTE(v76) < 0)
            operator delete(*((void **)&v75 + 1));
          if (SBYTE7(v75) < 0)
            operator delete(__p[0]);
        }
      }
      else
      {
        if ((quasar::gLogLevel & 0x80000000) == 0)
        {
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find wordId=", 22);
          v14 = (_QWORD *)std::ostream::operator<<();
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" word=", 6);
          if ((v92 & 0x80u) == 0)
            v16 = &v91;
          else
            v16 = (__int128 *)v91;
          if ((v92 & 0x80u) == 0)
            v17 = v92;
          else
            v17 = *((_QWORD *)&v91 + 1);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" in lexicon", 11);
          quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
        }
        LODWORD(i) = 1;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v66);
    }
    else
    {
      if ((quasar::gLogLevel & 0x80000000) == 0)
      {
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find word Id ", 23);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" in word symbol table", 21);
        quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
      }
      LODWORD(i) = 1;
    }
    if ((char)v92 < 0)
      operator delete((void *)v91);
    if ((_DWORD)i)
      break;
    v9 += 4;
    if (v9 == v8)
      goto LABEL_32;
  }
  __p[0] = &v69;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v43 = 2;
LABEL_79:
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  return v43;
}

void sub_1ADE3076C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, _DWORD *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;
  int v62;
  int v63;
  uint64_t v64;
  int v65;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  if (a14)
  {
    v62 = a14[14] - 1;
    a14[14] = v62;
    if (!v62)
      (*(void (**)(_DWORD *))(*(_QWORD *)a14 + 8))(a14);
  }
  if (a16)
  {
    v63 = a16[14] - 1;
    a16[14] = v63;
    if (!v63)
      (*(void (**)(_DWORD *))(*(_QWORD *)a16 + 8))(a16);
  }
  kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)&a17);
  a52 = &unk_1E5D256C0;
  v64 = a53;
  if (a53)
  {
    v65 = *(_DWORD *)(a53 + 56) - 1;
    *(_DWORD *)(a53 + 56) = v65;
    if (!v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v60 - 136);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v60 - 112);
  _Unwind_Resume(a1);
}

std::pair<std::string, std::string> *std::vector<std::pair<std::string,std::string>>::emplace_back<std::pair<std::string,std::string>>(std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
  return end - 1;
}

void sub_1ADE30AE4(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t quasar::ForceAlignDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *i;
  __int128 v34;
  int v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  int v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *__p;
  char *v62;
  char *v63;
  __int128 *v64;
  __int128 *v65;
  _BYTE __str[32];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;

  v8 = a1 + 752;
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 752);
  v9 = a2 + 96;
  v10 = *(_QWORD *)(a1 + 760);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 768);
  *(_QWORD *)(a2 + 104) = v10;
  std::vector<BOOL>::operator=((void **)(a2 + 120), a1 + 776);
  if (v9 != v8)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 144), *(char **)(a1 + 800), *(_QWORD *)(a1 + 808), (uint64_t)(*(_QWORD *)(a1 + 808) - *(_QWORD *)(a1 + 800)) >> 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 168), (uint64_t *)(a1 + 552));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 216), (uint64_t *)(a1 + 704));
  v11 = *(_QWORD *)(a1 + 644);
  *(_BYTE *)(a2 + 208) = *(_BYTE *)(a1 + 652);
  *(_QWORD *)(a2 + 200) = v11;
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
  v12 = *(uint64_t **)(*a3 + 472);
  v13 = *(std::__shared_weak_count **)(a1 + 576);
  v83 = *(_QWORD *)(a1 + 568);
  v84 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(v12, &v83, 0, -1);
  v16 = v84;
  if (v84)
  {
    v17 = (unint64_t *)&v84->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::RandomAccessTableReader(&v82, (std::string *)(a1 + 856));
  if ((kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(v19, *(_QWORD *)(*(_QWORD *)a4 + 24) + 128) & 1) != 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(&v82);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v20 + 128);
    if (*(char *)(v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v21;
      *(_QWORD *)&__str[16] = *(_QWORD *)(v21 + 16);
      *(_OWORD *)__str = v22;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::splitAndTrimNoEmpty((const std::string *)__str, (char *)&__p, &v64);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    v56 = a4;
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    __p = 0;
    v62 = 0;
    v63 = 0;
    v32 = v64;
    for (i = v65; v32 != i; v32 = (__int128 *)((char *)v32 + 24))
    {
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
      }
      else
      {
        v34 = *v32;
        *(_QWORD *)&__str[16] = *((_QWORD *)v32 + 2);
        *(_OWORD *)__str = v34;
      }
      v35 = std::stoi((const std::string *)__str, 0, 10);
      v36 = v35;
      v37 = v62;
      if (v62 >= v63)
      {
        v39 = (char *)__p;
        v40 = (v62 - (_BYTE *)__p) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v42 = v63 - (_BYTE *)__p;
        if ((v63 - (_BYTE *)__p) >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v63, v43);
          v39 = (char *)__p;
          v37 = v62;
        }
        else
        {
          v44 = 0;
        }
        v45 = (int *)&v44[4 * v40];
        *v45 = v36;
        v38 = (char *)(v45 + 1);
        while (v37 != v39)
        {
          v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *--v45 = v46;
        }
        __p = v45;
        v62 = v38;
        v63 = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_DWORD *)v62 = v35;
        v38 = v37 + 4;
      }
      v62 = v38;
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v59);
    v47 = quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **, uint64_t, _QWORD))(*(_QWORD *)a1 + 184))(a1, v47, *(_QWORD *)(a2 + 16), &__p, v59, *(_QWORD *)(*a3 + 488));
    if (!(_DWORD)v31)
    {
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 152), &v59);
      *(_BYTE *)(*a3 + 145) = 1;
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v57);
      kaldi::CompactLatticeShortestPath(*(_QWORD **)(*a3 + 152), (uint64_t)&v57, 0, (uint64_t *)(*a3 + 448));
      if (*(_DWORD *)(v58 + 88) == -1)
      {
        if (quasar::gLogLevel >= 2)
        {
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          memset(__str, 0, sizeof(__str));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Best-path failed", 16);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__str);
        }
        v31 = 2;
      }
      else
      {
        fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(__str);
        fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v57, (uint64_t)__str, 1);
        v31 = quasar::Decoder::reportResults((uint64_t)__str, a3, v56, a2);
        *(_QWORD *)__str = &unk_1E5D25580;
        v52 = *(_QWORD *)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v53 = *(_DWORD *)(*(_QWORD *)&__str[8] + 56) - 1;
          *(_DWORD *)(*(_QWORD *)&__str[8] + 56) = v53;
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        }
      }
      v57 = &unk_1E5D25800;
      v54 = v58;
      if (v58)
      {
        v55 = *(_DWORD *)(v58 + 56) - 1;
        *(_DWORD *)(v58 + 56) = v55;
        if (!v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      }
    }
    v48 = v60;
    if (v60)
    {
      v49 = (unint64_t *)&v60->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (__p)
    {
      v62 = (char *)__p;
      operator delete(__p);
    }
    *(_QWORD *)__str = &v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"No word ID sequence found for utterance ", 40);
      v24 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      v27 = *(_QWORD *)(v24 + 128);
      v25 = v24 + 128;
      v26 = v27;
      v28 = *(char *)(v25 + 23);
      if (v28 >= 0)
        v29 = v25;
      else
        v29 = v26;
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(v25 + 23);
      else
        v30 = *(_QWORD *)(v25 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v29, v30);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
    }
    v31 = 2;
  }
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader(&v82);
  return v31;
}

void sub_1ADE310A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  int v31;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a24);
  if (a12)
  {
    v31 = a12[14] - 1;
    a12[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)a12 + 8))(a12);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  a24 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader((_QWORD *)(v29 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(_QWORD *a1, uint64_t a2)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[34];

  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(a1);
  if (!kaldi::IsToken((uint64_t *)a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"RandomAccessTableReader::HasKey, invalid key \"", 46);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, a2);
}

void quasar::ForceAlignDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  quasar::ForceAlignDecoderBase::registerParams(this, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "ref-rspec");
  std::string::basic_string[abi:ne180100]<0>(__p, "Rspec containing reference word ID sequence for every utt");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 107), (uint64_t)__p, 0, 234, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE3133C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::ForceAlignDecoder::~ForceAlignDecoder(void **this)
{
  *this = &off_1E5D36420;
  if (*((char *)this + 879) < 0)
    operator delete(this[107]);
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)this);
}

{
  *this = &off_1E5D36420;
  if (*((char *)this + 879) < 0)
    operator delete(this[107]);
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)this);
  JUMPOUT(0x1AF44D190);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADE31474(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfo&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfo&,std::allocator<kaldi::WordBoundaryInfo>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE314D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfo&,std::allocator<kaldi::WordBoundaryInfo>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D416F0;
  a1[1] = 0;
  std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfo&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADE31534(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D416F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D416F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<kaldi::WordBoundaryInfo>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t *std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfo&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<kaldi::WordBoundaryInfo::PhoneType>::__init_with_size[abi:ne180100]<kaldi::WordBoundaryInfo::PhoneType*,kaldi::WordBoundaryInfo::PhoneType*>((_QWORD *)a2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  result = std::set<int>::set[abi:ne180100]((uint64_t *)(a2 + 32), a3 + 32);
  *(_BYTE *)(a2 + 56) = *(_BYTE *)(a3 + 56);
  return result;
}

void sub_1ADE31610(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<kaldi::WordBoundaryInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  std::__tree<int>::destroy(a2 + 32, *(_QWORD **)(a2 + 40));
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t *kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::RandomAccessTableReader(uint64_t *a1, std::string *this)
{
  _QWORD *v5;
  int v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD v10[34];

  *a1 = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this->__r_.__value_.__l.__size_)
      return a1;
  }
  else if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    return a1;
  }
  if ((kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(a1, this) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening RandomAccessTableReader object  (rspecifier is: ", 62);
    v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v6 >= 0)
      v7 = this;
    else
      v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, size);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, ")");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(uint64_t *a1, std::string *this)
{
  int v4;
  uint64_t v5;
  uint64_t (**v6)(int, std::string *);
  _QWORD *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  uint64_t result;
  int v12;
  _QWORD v13[34];

  if (*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "RandomAccessTableReader::Open(): already open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v12 = 0;
  v4 = kaldi::ClassifyRspecifier(this, 0, (uint64_t)&v12);
  if (v4 == 1)
  {
    if (BYTE1(v12))
    {
      if (BYTE2(v12))
      {
        v5 = operator new();
        *(_OWORD *)(v5 + 8) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        v6 = &off_1E5D2B240;
        *(_QWORD *)v5 = &off_1E5D2B240;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
      }
      else
      {
        v5 = operator new();
        *(_OWORD *)(v5 + 8) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        v6 = &off_1E5D2B1B0;
        *(_QWORD *)v5 = &off_1E5D2B1B0;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
        *(_QWORD *)(v5 + 104) = -1;
        *(_QWORD *)(v5 + 112) = -1;
      }
    }
    else
    {
      v5 = operator new();
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_QWORD *)(v5 + 72) = 0;
      v6 = &off_1E5D2B2D0;
      *(_QWORD *)v5 = &off_1E5D2B2D0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_QWORD *)(v5 + 120) = 0;
      *(_BYTE *)(v5 + 128) = 0;
      *(_QWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_DWORD *)(v5 + 112) = 1056964608;
    }
LABEL_19:
    *a1 = v5;
    if ((BOOL)(*v6)(v5, this))
      return 1;
    if (*a1)
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
    result = 0;
    *a1 = 0;
    return result;
  }
  if (v4 == 2)
  {
    v5 = operator new();
    v6 = &off_1E5D2AF80;
    *(_QWORD *)v5 = &off_1E5D2AF80;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_DWORD *)(v5 + 136) = 0;
    goto LABEL_19;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RandomAccessTableReader::Open(), invalid rspecifier: ", 53);
    v8 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = this;
    else
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v8 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, size);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
  }
  return 0;
}

void sub_1ADE319A4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(uint64_t a1, std::string *this)
{
  std::string *v4;
  int v5;
  _BOOL8 result;
  unint64_t v7;
  const void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  size_t v21;
  int v22;
  int v23;
  const void **v24;
  size_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *v28;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v31;
  size_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  std::string v38;
  std::string __p;
  _QWORD v40[35];

  if ((*(_DWORD *)(a1 + 136) - 2) <= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, " Opening already open RandomAccessTableReader: call Close first.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  v4 = (std::string *)(a1 + 48);
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 16);
  v5 = 1;
  result = kaldi::ReadScriptFile((uint64_t)v4, 1, (std::vector<std::pair<std::string, std::string>> *)(a1 + 104));
  if (result)
  {
    std::string::operator=((std::string *)(a1 + 24), this);
    if (!*(_BYTE *)(a1 + 17))
    {
      v7 = *(_QWORD *)(a1 + 104);
      v8 = *(const void ***)(a1 + 112);
      v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 4));
      if (v8 == (const void **)v7)
        v10 = 0;
      else
        v10 = v9;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(v7, v8, (uint64_t)v40, v10, 1);
    }
    v11 = *(_QWORD *)(a1 + 104);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 112) - v11) >> 4) <= 1)
      v12 = 1;
    else
      v12 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 112) - v11) >> 4);
    v13 = -48;
    do
    {
      if (!--v12)
      {
        result = 1;
        v5 = 2;
        goto LABEL_67;
      }
      v14 = v11 + v13 + 96;
      v15 = (_QWORD *)(v11 + v13 + 48);
      v16 = *(unsigned __int8 *)(v11 + v13 + 71);
      if (*(char *)(v11 + v13 + 71) < 0)
      {
        v17 = *(_QWORD *)(v11 + v13 + 56);
        v15 = (_QWORD *)*v15;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v11 + v13 + 71);
      }
      v13 += 48;
      v18 = *(char *)(v14 + 23);
      if (v18 >= 0)
        v19 = *(unsigned __int8 *)(v14 + 23);
      else
        v19 = *(_QWORD *)(v14 + 8);
      if (v18 >= 0)
        v20 = (unsigned __int8 *)v14;
      else
        v20 = *(unsigned __int8 **)v14;
      if (v19 >= v17)
        v21 = v17;
      else
        v21 = v19;
      v22 = memcmp(v15, v20, v21);
      if (v17 >= v19)
        v23 = 0;
      else
        v23 = -1;
      if (v22)
        v23 = v22;
    }
    while (v23 < 0);
    v24 = (const void **)(v11 + v13);
    v25 = *(_QWORD *)(v11 + v13 + 8);
    if ((v16 & 0x80u) == 0)
      v26 = v16;
    else
      v26 = *(_QWORD *)(v11 + v13 + 8);
    v27 = " is not sorted (remove s, option or add ns, option): key is ";
    if (v26 == v19)
    {
      if ((v16 & 0x80) != 0)
      {
        if (!memcmp(*v24, v20, v25))
          v27 = " contains duplicate key: ";
      }
      else if ((_DWORD)v16)
      {
        while (*(unsigned __int8 *)v24 == *v20)
        {
          v24 = (const void **)((char *)v24 + 1);
          ++v20;
          if (!--v16)
          {
            v27 = " contains duplicate key: ";
            break;
          }
        }
      }
      else
      {
        v27 = " contains duplicate key: ";
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Script file ", 12);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v38 = *v4;
      kaldi::PrintableRxfilename((uint64_t)&v38, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, size);
      v32 = strlen(v27);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v27, v32);
      v34 = *(_QWORD *)(a1 + 104) + v13;
      v35 = *(char *)(v34 + 23);
      if (v35 >= 0)
        v36 = *(_QWORD *)(a1 + 104) + v13;
      else
        v36 = *(_QWORD *)v34;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(v34 + 23);
      else
        v37 = *(_QWORD *)(v34 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    }
    result = 0;
    v5 = 1;
  }
LABEL_67:
  *(_DWORD *)(a1 + 136) = v5;
  return result;
}

void sub_1ADE31D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, a1[19]);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, const void **a2)
{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  const void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD v39[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "RandomAccessTableReaderWriter: Value() called on not-open object.");
    goto LABEL_44;
  }
  v4 = *(_DWORD *)(a1 + 136);
  if ((v4 - 3) > 1)
    goto LABEL_19;
  v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  v7 = (const void *)*(unsigned __int8 *)(a1 + 95);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = *(const void **)(a1 + 80);
  if (v6 != v7)
    goto LABEL_19;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a1 + 72);
  else
    v9 = *(unsigned __int8 **)(a1 + 72);
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*a2, v9, (size_t)a2[1]))
    {
LABEL_19:
      if (((*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, 1) & 1) != 0)
      {
        v11 = *((unsigned __int8 *)a2 + 23);
        v12 = a2[1];
        if ((v11 & 0x80u) == 0)
          v12 = (const void *)*((unsigned __int8 *)a2 + 23);
        v13 = (const void *)*(unsigned __int8 *)(a1 + 95);
        v14 = (char)v13;
        if ((char)v13 < 0)
          v13 = *(const void **)(a1 + 80);
        if (v12 == v13)
        {
          v15 = v14 >= 0 ? (unsigned __int8 *)(a1 + 72) : *(unsigned __int8 **)(a1 + 72);
          if ((v11 & 0x80) == 0 && *((_BYTE *)a2 + 23))
          {
            v16 = v11 - 1;
            v17 = a2;
            do
            {
              v19 = *(unsigned __int8 *)v17;
              v17 = (const void **)((char *)v17 + 1);
              v18 = v19;
              v21 = *v15++;
              v20 = v21;
              v23 = v16-- != 0;
            }
            while (v18 == v20 && v23);
          }
        }
        goto LABEL_38;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"RandomAccessTableReader::Value(), could not get item for key ", 61);
      v26 = *((char *)a2 + 23);
      if (v26 >= 0)
        v27 = a2;
      else
        v27 = (void *)*a2;
      if (v26 >= 0)
        v28 = *((unsigned __int8 *)a2 + 23);
      else
        v28 = (uint64_t)a2[1];
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", rspecifier is ", 16);
      v33 = *(_QWORD *)(a1 + 24);
      v32 = a1 + 24;
      v31 = v33;
      v34 = *(char *)(v32 + 23);
      if (v34 >= 0)
        v35 = v32;
      else
        v35 = v31;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v32 + 23);
      else
        v36 = *(_QWORD *)(v32 + 8);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v35, v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"[to ignore this ", 16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, ", add the p, (permissive) option to the rspecifier.");
LABEL_44:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
    }
  }
  else if (*((_BYTE *)a2 + 23))
  {
    v10 = a2;
    while (*(unsigned __int8 *)v10 == *v9)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v9;
      if (!--v5)
        goto LABEL_37;
    }
    goto LABEL_19;
  }
LABEL_37:
  if (v4 != 3)
  {
    if (!*(_BYTE *)(a1 + 16))
      return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value((uint64_t *)(a1 + 96));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Value called twice for the same key\n");
    goto LABEL_44;
  }
LABEL_38:
  *(_DWORD *)(a1 + 136) = 4;
  if (*(_BYTE *)(a1 + 16))
    kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::MakeTombstone((_QWORD *)a1, (unsigned __int8 *)a2);
  return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value((uint64_t *)(a1 + 96));
}

void sub_1ADE31F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD v5[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Close() called on RandomAccessTableReader that was not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear((_QWORD *)(a1 + 96));
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v3 = *(_QWORD *)(a1 + 104);
  for (i = *(_QWORD *)(a1 + 112);
        i != v3;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a1 + 120, i))
  {
    i -= 48;
  }
  *(_QWORD *)(a1 + 112) = v3;
  MEMORY[0x1AF44C914](a1 + 72, "");
  return 1;
}

void kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderScriptImpl(a1);
  JUMPOUT(0x1AF44D190);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 136) - 2) < 3;
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKeyInternal(uint64_t a1, std::string *a2, int a3)
{
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string::size_type size;
  std::string v20;
  std::string v21;
  std::string __p;
  unint64_t v23;
  _QWORD v24[34];

  if (*(_DWORD *)(a1 + 136) <= 1u)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "HasKey called on RandomAccessTableReader object that is not open.");
    goto LABEL_49;
  }
  kaldi::IsToken((uint64_t *)a2);
  v23 = 0;
  result = kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::LookupKey((_QWORD *)a1, (unsigned __int8 *)a2, &v23);
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(a1 + 16))
  {
    v7 = *(_QWORD *)(a1 + 104) + 48 * v23;
    if (*(char *)(v7 + 47) < 0)
    {
      if (*(_QWORD *)(v7 + 32))
        goto LABEL_6;
    }
    else if (*(_BYTE *)(v7 + 47))
    {
      goto LABEL_6;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"HasKey called on key whose value was already read, and  you specified the \"once\" option (o,): try removing o, or adding no, : rspecifier is ", 141);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, a1 + 24);
LABEL_49:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
LABEL_6:
  if (!a3)
    return 1;
  if ((kaldi::Input::OpenInternal((_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 104) + 48 * v23 + 24, 1, 0) & 1) != 0)
  {
    if ((*(_DWORD *)(a1 + 136) - 3) <= 1)
      kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear((_QWORD *)(a1 + 96));
    v8 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
    if (kaldi::KaldiObjectHolder<quasar::KaldiString>::Read((uint64_t *)(a1 + 96), v8))
    {
      *(_DWORD *)(a1 + 136) = 3;
      std::string::operator=((std::string *)(a1 + 72), a2);
      return 1;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"RandomAccessTableReader: error reading object from stream ", 58);
      v14 = *(_QWORD *)(a1 + 104) + 48 * v23;
      if (*(char *)(v14 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v14 + 24), *(_QWORD *)(v14 + 32));
      }
      else
      {
        v15 = *(_OWORD *)(v14 + 24);
        v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 40);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
      }
      kaldi::PrintableRxfilename((uint64_t)&v20, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    result = 0;
    *(_DWORD *)(a1 + 136) = 2;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"RandomAccessTableReader: error opening stream ", 46);
      v10 = *(_QWORD *)(a1 + 104) + 48 * v23;
      if (*(char *)(v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v10 + 24), *(_QWORD *)(v10 + 32));
      }
      else
      {
        v11 = *(_OWORD *)(v10 + 24);
        v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 40);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      }
      kaldi::PrintableRxfilename((uint64_t)&v21, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &__p;
      else
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v17 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v16, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    return 0;
  }
  return result;
}

void sub_1ADE3242C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::MakeTombstone(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD v4[34];
  unint64_t v5;

  v5 = 0;
  if ((kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::LookupKey(a1, a2, &v5) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "RandomAccessTableReader object in inconsistent state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return MEMORY[0x1AF44C914](a1[13] + 48 * v5 + 24, "");
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::LookupKey(_QWORD *a1, unsigned __int8 *a2, unint64_t *a3)
{
  unsigned __int8 *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  const void **v20;
  const void **v21;
  const void **v22;
  const void **v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  int v27;
  unsigned __int8 *v28;
  const void **v29;
  uint64_t v30;
  unint64_t v32;
  std::string v33;
  void *__p;
  char v35;
  char v36;
  char v37;

  v4 = a2;
  v6 = a1[16];
  v7 = a1[13];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[14] - v7) >> 4);
  if (v6 < v8)
  {
    v9 = (unsigned __int8 *)(v7 + 48 * v6);
    v10 = v9[23];
    if ((v10 & 0x80u) == 0)
      v11 = v9[23];
    else
      v11 = *((_QWORD *)v9 + 1);
    v12 = a2[23];
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a2 + 1);
    if (v11 == v12)
    {
      if (v13 < 0)
        a2 = *(unsigned __int8 **)a2;
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v9, a2, *((_QWORD *)v9 + 1)))
          goto LABEL_48;
      }
      else
      {
        if (!v9[23])
          goto LABEL_48;
        while (*v9 == *a2)
        {
          ++v9;
          ++a2;
          if (!--v10)
            goto LABEL_48;
        }
      }
    }
  }
  a1[16] = ++v6;
  if (v6 >= v8)
    goto LABEL_32;
  v14 = (unsigned __int8 *)(v7 + 48 * v6);
  v15 = v14[23];
  if ((v15 & 0x80u) == 0)
    v16 = v14[23];
  else
    v16 = *((_QWORD *)v14 + 1);
  v17 = v4[23];
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *((_QWORD *)v4 + 1);
  if (v16 != v17)
    goto LABEL_32;
  if (v18 >= 0)
    v19 = v4;
  else
    v19 = *(unsigned __int8 **)v4;
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v14, v19, *((_QWORD *)v14 + 1)))
      goto LABEL_32;
LABEL_48:
    *a3 = v6;
    return 1;
  }
  if (!v14[23])
    goto LABEL_48;
  while (*v14 == *v19)
  {
    ++v14;
    ++v19;
    if (!--v15)
      goto LABEL_48;
  }
LABEL_32:
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(&v33, (__int128 *)v4, "");
  v20 = (const void **)a1[13];
  v21 = (const void **)a1[14];
  v36 = 0;
  v22 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,std::string> *>,std::__wrap_iter<std::pair<std::string,std::string> *>,std::pair<std::string,std::string>,std::__identity,std::__less<void,void>>(v20, v21, (const void **)&v33.__r_.__value_.__l.__data_, (uint64_t)&v37);
  v23 = v22;
  if ((const void **)a1[14] != v22)
  {
    v24 = *((unsigned __int8 *)v22 + 23);
    if ((v24 & 0x80u) == 0)
      v25 = (const void *)*((unsigned __int8 *)v22 + 23);
    else
      v25 = v22[1];
    v26 = (const void *)v4[23];
    v27 = (char)v26;
    if ((char)v26 < 0)
      v26 = (const void *)*((_QWORD *)v4 + 1);
    if (v25 == v26)
    {
      if (v27 >= 0)
        v28 = v4;
      else
        v28 = *(unsigned __int8 **)v4;
      if ((v24 & 0x80) == 0)
      {
        if (*((_BYTE *)v22 + 23))
        {
          v29 = v22;
          while (*(unsigned __int8 *)v29 == *v28)
          {
            v29 = (const void **)((char *)v29 + 1);
            ++v28;
            if (!--v24)
              goto LABEL_56;
          }
          goto LABEL_50;
        }
LABEL_56:
        v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1[13]) >> 4);
        *a3 = v32;
        a1[16] = v32;
        v30 = 1;
        goto LABEL_51;
      }
      if (!memcmp(*v22, v28, (size_t)v22[1]))
        goto LABEL_56;
    }
  }
LABEL_50:
  v30 = 0;
LABEL_51:
  if (v35 < 0)
    operator delete(__p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return v30;
}

void sub_1ADE3273C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E5D2AF80;
  if ((*(_DWORD *)(a1 + 136) - 3) <= 1)
    kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear((_QWORD *)(a1 + 96));
  v3 = (void **)(a1 + 104);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder((uint64_t *)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Open(uint64_t a1, std::string *this)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  std::string v10;
  std::string __p;
  _QWORD v12[34];

  if (*(_DWORD *)(a1 + 76) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader::Open, error closing previous input.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 72);
  v4 = 1;
  v5 = kaldi::Input::OpenInternal((_QWORD *)(a1 + 8), a1 + 48, 1, 0);
  if ((v5 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"TableReader: failed to open stream ", 35);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v10 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    }
    v4 = 0;
  }
  *(_DWORD *)(a1 + 76) = v4;
  return v5;
}

void sub_1ADE329A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, std::string *a2)
{
  std::string *v2;
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t size;
  _QWORD *v21;
  _QWORD *v22;
  std::string __p;
  std::string v24;
  _QWORD v25[34];

  v2 = a2;
  if (!kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    v18 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = (uint64_t)v2;
    else
      v19 = v2->__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    else
      size = v2->__r_.__value_.__l.__size_;
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, size);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      __p = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&__p, &v24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (uint64_t)&v24);
    std::string::~string(&v24);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  v5 = v2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v5 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  v6 = *(unsigned __int8 *)(a1 + 39);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 24);
  if (v5 == v6)
  {
    v8 = v7 >= 0 ? (unsigned __int8 *)(a1 + 16) : *(unsigned __int8 **)(a1 + 16);
    if ((v4 & 0x80) == 0 && *((_BYTE *)&v2->__r_.__value_.__s + 23))
    {
      v9 = v4 - 1;
      do
      {
        v11 = v2->__r_.__value_.__s.__data_[0];
        v2 = (std::string *)((char *)v2 + 1);
        v10 = v11;
        v13 = *v8++;
        v12 = v13;
        v15 = v9-- != 0;
      }
      while (v10 == v12 && v15);
    }
  }
  return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(*(uint64_t **)(a1 + 40));
}

void kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderDSortedArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(uint64_t a1)
{
  unsigned int v1;
  _QWORD v3[34];

  v1 = *(_DWORD *)(a1 + 76);
  if (v1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x1Eu >> v1) & 1;
}

BOOL kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(uint64_t a1, std::string *__str)
{
  std::string *v4;
  size_t v5;
  int v6;
  std::string::size_type size;
  std::string *v8;
  size_t v9;
  std::string *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL8 v15;
  char v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  size_t v28;
  const void *v29;
  std::string::size_type v30;
  std::string *p_p;
  size_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  std::string *v48;
  std::string::size_type v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string __p;
  _QWORD v53[35];

  v4 = (std::string *)(a1 + 80);
  v5 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
    goto LABEL_23;
  }
  v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v6 >= 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((v5 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = *(_QWORD *)(a1 + 88);
  if ((v5 & 0x80u) == 0)
    v10 = v4;
  else
    v10 = *(std::string **)(a1 + 80);
  if (v9 >= size)
    v11 = size;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = size < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"cs\" option ", 54);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"but are not calling with keys in sorted order: ", 47);
    v47 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v47 >= 0)
      v48 = __str;
    else
      v48 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v47 >= 0)
      v49 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v49 = __str->__r_.__value_.__l.__size_;
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" < ", 3);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51, (uint64_t)v4);
LABEL_93:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
  }
LABEL_23:
  std::string::operator=(v4, __str);
  v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
    v14 = *(_DWORD *)(a1 + 76);
  }
  if ((v14 - 3) < 2)
    return 0;
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v53, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_93;
  }
  v16 = 0;
  memset(&__p, 0, sizeof(__p));
  v17 = *(unsigned __int8 *)(a1 + 39);
  while (1)
  {
    v18 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v19 = __str->__r_.__value_.__l.__size_;
    if (v18 >= 0)
      v20 = __str;
    else
      v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v21 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(a1 + 24);
    v22 = v21 >= 0 ? (const void *)(a1 + 16) : *(const void **)(a1 + 16);
    v23 = v17 >= v19 ? v19 : v17;
    v24 = memcmp(v20, v22, v23);
    v25 = v19 < v17 ? -1 : v17 < v19;
    v26 = v24 ? v24 : v25;
    if (v26 < 1)
      break;
    std::string::operator=(&__p, (const std::string *)(a1 + 16));
    v27 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(*(uint64_t **)(a1 + 40));
    MEMORY[0x1AF44D190](v27, 0x20C4093837F09);
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 76) = 1;
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*(_DWORD *)(a1 + 76) != 2)
      break;
    v17 = *(unsigned __int8 *)(a1 + 39);
    if (*(char *)(a1 + 39) < 0)
    {
      v29 = *(const void **)(a1 + 16);
      v28 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v28 = *(unsigned __int8 *)(a1 + 39);
      v29 = (const void *)(a1 + 16);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v30 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v30 >= v28)
      v32 = v28;
    else
      v32 = v30;
    v33 = memcmp(v29, p_p, v32);
    if (v28 < v30)
      v34 = -1;
    else
      v34 = v30 < v28;
    if (v33)
      v34 = v33;
    if (v34 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"s\" option ", 53);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" (sorted order), but keys are out of order or duplicated: ", 58);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v38 = __p.__r_.__value_.__l.__size_;
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" is followed by ", 16);
      v41 = *(char *)(a1 + 39);
      if (v41 >= 0)
        v42 = a1 + 16;
      else
        v42 = *(_QWORD *)(a1 + 16);
      if (v41 >= 0)
        v43 = *(unsigned __int8 *)(a1 + 39);
      else
        v43 = *(_QWORD *)(a1 + 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
    }
  }
  v15 = v26 == 0;
  if (v16 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1ADE32F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  void *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t *v24;
  uint64_t *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v28;
  std::string v29;
  std::string v30;
  char v31;
  std::string v32;
  std::string __p;
  _QWORD v34[34];

  if (*(_DWORD *)(a1 + 76) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "TableReader: ReadNextObject() called from wrong state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
  }
  v2 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, a1 + 16);
  v3 = *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32);
  if ((v3 & 2) != 0)
  {
    v5 = 3;
LABEL_31:
    *(_DWORD *)(a1 + 76) = v5;
    return;
  }
  if ((v3 & 5) != 0)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
    {
LABEL_30:
      v5 = 4;
      goto LABEL_31;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Error reading archive ", 22);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v32 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v32, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      goto LABEL_30;
    }
    v11 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v11);
    goto LABEL_29;
  }
  v6 = std::istream::peek();
  if (v6 != 9)
  {
    if (v6 == 10)
      goto LABEL_12;
    if (v6 != 32)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        goto LABEL_30;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Invalid archive file format: expected space after key ", 54);
      v13 = *(char *)(a1 + 39);
      if (v13 >= 0)
        v14 = a1 + 16;
      else
        v14 = *(_QWORD *)(a1 + 16);
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a1 + 39);
      else
        v15 = *(_QWORD *)(a1 + 24);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", got character ", 16);
      v31 = std::istream::peek();
      kaldi::CharToString((kaldi *)&v31, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v19 = __p.__r_.__value_.__l.__size_;
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", reading ", 10);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v29 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v29, &v30);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v30;
      else
        v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        v27 = v30.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v26, v27);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      v11 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_28;
    }
  }
  std::istream::get();
LABEL_12:
  v7 = (uint64_t *)operator new();
  *v7 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  if (kaldi::KaldiObjectHolder<quasar::KaldiString>::Read(v7, v2))
  {
    v5 = 2;
    goto LABEL_31;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Object read failed, reading archive ", 36);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v28 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v28, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__p;
    else
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v22, v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
  }
  *(_DWORD *)(a1 + 76) = 4;
  v24 = *(uint64_t **)(a1 + 40);
  if (v24)
  {
    v25 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v24);
    MEMORY[0x1AF44D190](v25, 0x20C4093837F09);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_1ADE33410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a27);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CloseInternal(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD v6[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Close() called on TableReader twice or otherwise wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*(_QWORD *)(a1 + 8))
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 76);
  if (v2 == 2)
  {
    v3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(*(uint64_t **)(a1 + 40));
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
    *(_QWORD *)(a1 + 40) = 0;
    v2 = *(_DWORD *)(a1 + 76);
  }
  *(_DWORD *)(a1 + 76) = 0;
  if (v2 == 4)
  {
    if (!*(_BYTE *)(a1 + 75))
      return 0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"RandomAccessTableReader, error state detected closing reader.  ", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Ignoring it because you specified permissive mode.", 50);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
  }
  return 1;
}

void sub_1ADE33530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  _QWORD v3[34];

  *(_QWORD *)a1 = &off_1E5D2B240;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase(a1);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D2B120;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  std::string __p;
  std::string v8;
  _QWORD v9[34];
  uint64_t v10;

  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  v10 = 0;
  result = kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, a2, &v10);
  if ((_DWORD)result && *(_BYTE *)(a1 + 72) && !*(_QWORD *)(*(_QWORD *)(a1 + 80) + 32 * v10 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error: HasKey called after Value() already called for ", 54);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" that key, and once (o) option specified: ", 42);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      __p = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&__p, &v8);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v8);
    std::string::~string(&v8);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string v19;
  std::string v20;
  std::string v21;
  _QWORD v22[34];
  uint64_t v23;

  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  v23 = 0;
  if (!kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v23))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v19 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v19, &v21);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)&v21);
    std::string::~string(&v21);
    v18 = &v19;
LABEL_26:
    std::string::~string(v18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 80) + 32 * v23 + 24);
  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Error: Value() called more than once for key ", 45);
    v13 = *(char *)(a2 + 23);
    if (v13 >= 0)
      v14 = a2;
    else
      v14 = *(_QWORD *)a2;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" and once (o) option specified: ", 32);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v20 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v20, &v21);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (uint64_t)&v21);
    std::string::~string(&v21);
    v18 = &v20;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 72))
    *(_QWORD *)(a1 + 112) = v23;
  return kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(v4);
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1 + 10;
  if (v3 != v2)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *(uint64_t **)(v2 + v6);
      if (v7)
      {
        v8 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v7);
        MEMORY[0x1AF44D190](v8, 0x20C4093837F09);
        v2 = a1[10];
        v3 = a1[11];
      }
      ++v5;
      v6 += 32;
    }
    while (v5 < (v3 - v2) >> 5);
  }
  std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](v4);
  a1[13] = -1;
  a1[14] = -1;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CloseInternal((uint64_t)a1);
}

void kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderSortedArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(result + 112);
  if (v1 != -1)
  {
    v2 = result;
    v3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(*(uint64_t **)(*(_QWORD *)(result + 80)
                                                                                       + 32 * v1
                                                                                       + 24));
    result = MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
    *(_QWORD *)(*(_QWORD *)(v2 + 80) + 32 * *(_QWORD *)(v2 + 112) + 24) = 0;
    *(_QWORD *)(v2 + 112) = -1;
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char v16;
  unint64_t *v17;
  int v18;
  size_t v19;
  const std::string::value_type *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  char v28;
  size_t v29;
  const void *v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  std::string::size_type v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const void **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  _QWORD *v67;
  std::string *v68;
  std::string::size_type size;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  _OWORD *v83;
  std::string v84;
  uint64_t v85;
  std::string v86;
  std::string v87;
  char *v88;
  uint64_t v89;
  char v90;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 104);
  v82 = (uint64_t *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  if (v7 >= (v8 - v6) >> 5)
    goto LABEL_16;
  v9 = (unsigned __int8 *)(v6 + 32 * v7);
  v10 = v9[23];
  if ((v10 & 0x80u) == 0)
    v11 = v9[23];
  else
    v11 = *((_QWORD *)v9 + 1);
  v12 = a2[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 1);
  if (v11 != v12)
    goto LABEL_16;
  if (v13 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, a2, *((_QWORD *)v9 + 1)))
      goto LABEL_16;
LABEL_111:
    *a3 = v7;
    return 1;
  }
  if (!v9[23])
    goto LABEL_111;
  while (*v9 == *a2)
  {
    ++v9;
    ++a2;
    if (!--v10)
      goto LABEL_111;
  }
LABEL_16:
  v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    v16 = 0;
    v83 = (_OWORD *)(a1 + 16);
    v17 = (unint64_t *)(a1 + 96);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 80);
      v8 = *(_QWORD *)(a1 + 88);
      if (v6 != v8)
      {
        v18 = *(char *)(v8 - 9);
        v15 = (char)v4[23];
        if (v15 >= 0)
          v19 = v4[23];
        else
          v19 = *((_QWORD *)v4 + 1);
        if (v15 >= 0)
          v20 = (const std::string::value_type *)v4;
        else
          v20 = *(const std::string::value_type **)v4;
        if (v18 >= 0)
          v21 = *(unsigned __int8 *)(v8 - 9);
        else
          v21 = *(_QWORD *)(v8 - 24);
        if (v18 >= 0)
          v22 = (const void *)(v8 - 32);
        else
          v22 = *(const void **)(v8 - 32);
        if (v21 >= v19)
          v23 = v19;
        else
          v23 = v21;
        v24 = memcmp(v20, v22, v23);
        if (v19 < v21)
          v25 = -1;
        else
          v25 = v21 < v19;
        if (v24)
          v25 = v24;
        if (v25 < 1)
          break;
      }
      kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
      v26 = *(_DWORD *)(a1 + 76);
      if (v26 == 2)
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *(_BYTE *)(a1 + 39);
        if (*(_QWORD *)(a1 + 80) != v27)
        {
          v29 = *(unsigned __int8 *)(a1 + 39);
          v30 = (const void *)(a1 + 16);
          if ((*(_BYTE *)(a1 + 39) & 0x80) != 0)
          {
            v30 = *(const void **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
          }
          v31 = *(char *)(v27 - 9);
          if (v31 >= 0)
            v32 = *(unsigned __int8 *)(v27 - 9);
          else
            v32 = *(_QWORD *)(v27 - 24);
          if (v31 >= 0)
            v33 = (const void *)(v27 - 32);
          else
            v33 = *(const void **)(v27 - 32);
          if (v32 >= v29)
            v34 = v29;
          else
            v34 = v32;
          v35 = memcmp(v30, v33, v34);
          if (v29 < v32)
            v36 = -1;
          else
            v36 = v32 < v29;
          if (v35)
            v36 = v35;
          if (v36 <= 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"RandomAccessTableReader: you provide the sorted (s) ", 52);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"option but keys in archive ", 27);
            if (*(char *)(a1 + 71) < 0)
              std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
            else
              v86 = *(std::string *)(a1 + 48);
            kaldi::PrintableRxfilename((uint64_t)&v86, &v84);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &v84;
            else
              v68 = (std::string *)v84.__r_.__value_.__r.__words[0];
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            else
              size = v84.__r_.__value_.__l.__size_;
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, size);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" are not ", 9);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"in sorted order: ", 17);
            v73 = *(_QWORD *)(a1 + 88);
            v76 = *(_QWORD *)(v73 - 32);
            v74 = v73 - 32;
            v75 = v76;
            v77 = *(char *)(v74 + 23);
            if (v77 >= 0)
              v78 = v74;
            else
              v78 = v75;
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(v74 + 23);
            else
              v79 = *(_QWORD *)(v74 + 8);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v78, v79);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" is followed by ", 16);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v81, (uint64_t)v83);
            std::string::~string(&v84);
            std::string::~string(&v86);
LABEL_126:
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v87);
          }
        }
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
          v37 = *(_QWORD *)(a1 + 40);
          v27 = *(_QWORD *)(a1 + 88);
        }
        else
        {
          v37 = *(_QWORD *)(a1 + 40);
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *v83;
          v84.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 32);
        }
        v85 = v37;
        if (v27 >= *v17)
        {
          v39 = (uint64_t)(v27 - *v82) >> 5;
          if ((unint64_t)(v39 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v40 = *v17 - *v82;
          v41 = v40 >> 4;
          if (v40 >> 4 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
            v42 = 0x7FFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          v89 = a1 + 96;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 96, v42);
          v44 = (std::string::size_type)&v43[32 * v39];
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          v87.__r_.__value_.__l.__size_ = v44;
          v88 = &v43[32 * v45];
          v46 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(_QWORD *)(v44 + 16) = *((_QWORD *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)v44 = v46;
          memset(&v84, 0, sizeof(v84));
          *(_QWORD *)(v44 + 24) = v85;
          v87.__r_.__value_.__r.__words[2] = v44 + 32;
          std::vector<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>::__swap_out_circular_buffer(v82, &v87);
          v47 = *(_QWORD *)(a1 + 88);
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v87);
          v48 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a1 + 88) = v47;
          if (v48 < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
        }
        else
        {
          v38 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)v27 = v38;
          memset(&v84, 0, sizeof(v84));
          *(_QWORD *)(v27 + 24) = v85;
          *(_QWORD *)(a1 + 88) = v27 + 32;
        }
        *(_QWORD *)(a1 + 40) = 0;
        v26 = 1;
        *(_DWORD *)(a1 + 76) = 1;
      }
      v16 = 1;
      if (v26 != 1)
      {
        v6 = *(_QWORD *)(a1 + 80);
        v8 = *(_QWORD *)(a1 + 88);
        goto LABEL_96;
      }
    }
    if ((v16 & 1) == 0)
      goto LABEL_19;
LABEL_96:
    if (v6 == v8)
      return 0;
    v56 = *(unsigned __int8 *)(v8 - 9);
    if ((v56 & 0x80u) == 0)
      v57 = *(unsigned __int8 *)(v8 - 9);
    else
      v57 = *(_QWORD *)(v8 - 24);
    v58 = v4[23];
    v59 = (char)v58;
    if ((v58 & 0x80u) != 0)
      v58 = *((_QWORD *)v4 + 1);
    if (v57 != v58)
      return 0;
    v60 = (const void **)(v8 - 32);
    if (v59 >= 0)
      v61 = v4;
    else
      v61 = *(unsigned __int8 **)v4;
    if ((v56 & 0x80) != 0)
    {
      if (memcmp(*v60, v61, *(_QWORD *)(v8 - 24)))
        return 0;
    }
    else if (*(_BYTE *)(v8 - 9))
    {
      while (*(unsigned __int8 *)v60 == *v61)
      {
        v60 = (const void **)((char *)v60 + 1);
        ++v61;
        if (!--v56)
          goto LABEL_119;
      }
      return 0;
    }
LABEL_119:
    v64 = ((v8 - v6) >> 5) - 1;
    *a3 = v64;
    *(_QWORD *)(a1 + 104) = v64;
    return 1;
  }
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v87, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_126;
  }
  LOBYTE(v15) = v4[23];
LABEL_19:
  if ((v15 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    v6 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v87 = *(std::string *)v4;
  }
  v88 = 0;
  v90 = 0;
  v49 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__identity,kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::PairCompare>(v6, v8, (const void **)&v87.__r_.__value_.__l.__data_);
  v50 = v49;
  if (*(_QWORD *)(a1 + 88) == v49)
    goto LABEL_113;
  v51 = v4[23];
  if ((v51 & 0x80u) == 0)
    v52 = v4[23];
  else
    v52 = *((_QWORD *)v4 + 1);
  v53 = *(unsigned __int8 *)(v49 + 23);
  v54 = (char)v53;
  if ((v53 & 0x80u) != 0)
    v53 = *(_QWORD *)(v49 + 8);
  if (v52 != v53)
    goto LABEL_113;
  if (v54 >= 0)
    v55 = (unsigned __int8 *)v49;
  else
    v55 = *(unsigned __int8 **)v49;
  if ((v51 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v55, *((_QWORD *)v4 + 1)))
    {
LABEL_113:
      v62 = 0;
      goto LABEL_114;
    }
  }
  else if (v4[23])
  {
    while (*v4 == *v55)
    {
      ++v4;
      ++v55;
      if (!--v51)
        goto LABEL_116;
    }
    goto LABEL_113;
  }
LABEL_116:
  v63 = (v50 - *(_QWORD *)(a1 + 80)) >> 5;
  *a3 = v63;
  *(_QWORD *)(a1 + 104) = v63;
  v62 = 1;
LABEL_114:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  return v62;
}

void sub_1ADE3409C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a27);
}

void sub_1ADE340EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x1ADE34110);
  JUMPOUT(0x1ADE34114);
}

uint64_t std::vector<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>,std::reverse_iterator<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__identity,kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::PairCompare>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  _BOOL4 v14;

  v3 = a1;
  if (a2 != a1)
  {
    v4 = (a2 - a1) >> 5;
    v5 = *((char *)a3 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = (size_t)a3[1];
    if (v5 >= 0)
      v7 = a3;
    else
      v7 = *a3;
    do
    {
      v8 = v3 + 32 * (v4 >> 1);
      v9 = *(char *)(v8 + 23);
      if (v9 >= 0)
        v10 = *(unsigned __int8 *)(v8 + 23);
      else
        v10 = *(_QWORD *)(v8 + 8);
      if (v9 >= 0)
        v11 = (const void *)(v3 + 32 * (v4 >> 1));
      else
        v11 = *(const void **)v8;
      if (v6 >= v10)
        v12 = v10;
      else
        v12 = v6;
      v13 = memcmp(v11, v7, v12);
      v14 = v10 < v6;
      if (v13)
        v14 = v13 < 0;
      if (v14)
        v4 += ~(v4 >> 1);
      else
        v4 >>= 1;
      if (v14)
        v3 = v8 + 32;
    }
    while (v4);
  }
  return v3;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  void **v3[34];

  *a1 = &off_1E5D2B1B0;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen((uint64_t)a1)
    && ((*((uint64_t (**)(void **))*a1 + 3))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  v3[0] = a1 + 10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v3);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase((uint64_t)a1);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  return kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, a2, 0);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Value(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string __p;
  std::string v12;
  _QWORD v13[34];
  uint64_t v14;

  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(a1);
  v14 = 0;
  if (!kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      __p = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&__p, &v12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&v12);
    std::string::~string(&v12);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return v14;
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(uint64_t a1)
{
  _QWORD *i;
  uint64_t *v3;
  uint64_t *v4;

  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    v3 = (uint64_t *)i[5];
    if (v3)
    {
      v4 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v3);
      MEMORY[0x1AF44D190](v4, 0x20C4093837F09);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 80);
  MEMORY[0x1AF44C914](a1 + 136, "");
  *(_BYTE *)(a1 + 128) = 0;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CloseInternal(a1);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderUnsortedArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::HandlePendingDelete(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[35];
  std::string v12;

  if (*(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)(a1 + 128) = 0;
    v2 = *(uint64_t **)(*(_QWORD *)(a1 + 120) + 40);
    if (v2)
    {
      v3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v2);
      MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
    }
    if (*(char *)(a1 + 159) < 0)
      v4 = *(_QWORD *)(a1 + 144);
    else
      v4 = *(unsigned __int8 *)(a1 + 159);
    v5 = *(_QWORD *)(a1 + 120);
    if (!v4)
    {
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(v5 + 16));
      v5 = *(_QWORD *)(a1 + 120);
    }
    if (*(char *)(v5 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v5 + 16), *(_QWORD *)(v5 + 24));
      v5 = *(_QWORD *)(a1 + 120);
    }
    else
    {
      v12 = *(std::string *)(v5 + 16);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase((_QWORD *)(a1 + 80), (uint64_t *)v5);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, 3);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"After deleting holder for key: ", 31);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v12;
      else
        v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      else
        size = v12.__r_.__value_.__l.__size_;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", map size = ", 13);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1ADE34710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 25) < 0)
    operator delete(*(void **)(v10 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t result;
  const void **v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::string __p;
  std::string v41;
  std::string v42;
  uint64_t v43;

  v6 = a1 + 80;
  v7 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::find<std::string>((_QWORD *)(a1 + 80), (char *)a2);
  if (v7)
  {
    if (!a3)
      return 1;
    v8 = v7;
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 76) != 1)
  {
LABEL_33:
    if (*(_BYTE *)(a1 + 72))
    {
      v20 = a2[23];
      if ((v20 & 0x80u) == 0)
        v21 = a2[23];
      else
        v21 = *((_QWORD *)a2 + 1);
      v22 = *(unsigned __int8 *)(a1 + 159);
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a1 + 144);
      if (v21 == v22)
      {
        if (v23 >= 0)
          v24 = (unsigned __int8 *)(a1 + 136);
        else
          v24 = *(unsigned __int8 **)(a1 + 136);
        if ((v20 & 0x80) == 0)
        {
          if (a2[23])
          {
            v25 = a2;
            while (*v25 == *v24)
            {
              ++v25;
              ++v24;
              if (!--v20)
                goto LABEL_48;
            }
            return 0;
          }
LABEL_48:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"RandomAccessTableReader: you specified the once (o) option but you are calling using key ", 89);
          v27 = (char)a2[23];
          if (v27 >= 0)
            v28 = (uint64_t)a2;
          else
            v28 = *(_QWORD *)a2;
          if (v27 >= 0)
            v29 = a2[23];
          else
            v29 = *((_QWORD *)a2 + 1);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" more than once: archive is ", 28);
          if (*(char *)(a1 + 71) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
          else
            __p = *(std::string *)(a1 + 48);
          kaldi::PrintableRxfilename((uint64_t)&__p, &v41);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (uint64_t)&v41);
          std::string::~string(&v41);
          std::string::~string(&__p);
          goto LABEL_71;
        }
        if (!memcmp(*(const void **)a2, v24, *((_QWORD *)a2 + 1)))
          goto LABEL_48;
      }
    }
    return 0;
  }
  v10 = (const void **)(a1 + 16);
  while (1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::ReadNextObject(a1);
    v11 = *(_DWORD *)(a1 + 76);
    if (v11 == 2)
      break;
LABEL_32:
    if (v11 != 1)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 76) = 1;
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 32);
  }
  v43 = *(_QWORD *)(a1 + 40);
  v8 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(v6, (char *)&v42, (uint64_t)&v42);
  v13 = v12;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (!v13)
  {
    v32 = *(uint64_t **)(a1 + 40);
    if (v32)
    {
      v33 = kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(v32);
      MEMORY[0x1AF44D190](v33, 0x20C4093837F09);
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Error in RandomAccessTableReader: duplicate key ", 48);
    v35 = *(char *)(a1 + 39);
    if (v35 >= 0)
      v36 = a1 + 16;
    else
      v36 = *(_QWORD *)(a1 + 16);
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 39);
    else
      v37 = *(_QWORD *)(a1 + 24);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" in archive ", 12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39, a1 + 48);
LABEL_71:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  *(_QWORD *)(a1 + 40) = 0;
  v14 = *(unsigned __int8 *)(a1 + 39);
  if ((v14 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(a1 + 39);
  else
    v15 = *(_QWORD *)(a1 + 24);
  v16 = a2[23];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 1);
  if (v15 != v16)
    goto LABEL_31;
  if (v17 >= 0)
    v18 = a2;
  else
    v18 = *(unsigned __int8 **)a2;
  if ((v14 & 0x80) == 0)
  {
    if (!*(_BYTE *)(a1 + 39))
      goto LABEL_56;
    v19 = (unsigned __int8 *)(a1 + 16);
    while (*v19 == *v18)
    {
      ++v19;
      ++v18;
      if (!--v14)
        goto LABEL_56;
    }
    goto LABEL_31;
  }
  if (memcmp(*v10, v18, *(_QWORD *)(a1 + 24)))
  {
LABEL_31:
    v11 = *(_DWORD *)(a1 + 76);
    goto LABEL_32;
  }
LABEL_56:
  if (!a3)
    return 1;
LABEL_4:
  *a3 = kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(*((uint64_t **)v8 + 5));
  if (!*(_BYTE *)(a1 + 72))
    return 1;
  *(_QWORD *)(a1 + 120) = v8;
  result = 1;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::find<std::string>(_QWORD *a1, char *a2)
{
  uint64_t v3;
  int v4;
  char *v5;
  unint64_t i;
  uint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;

  v3 = a2[23];
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  for (i = 0; v3; --v3)
  {
    v7 = *v5++;
    i = v7 + 7853 * i;
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = i;
    if (i >= *(_QWORD *)&v8)
      v11 = i % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & i;
  }
  v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = *((_QWORD *)v13 + 1);
      if (v15 == i)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v14, v13 + 16, (unsigned __int8 *)a2) & 1) != 0)
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  int v8;
  char *v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *j;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v7 = a2[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  for (i = 0; v7; --v7)
  {
    v11 = *v9++;
    i = v11 + 7853 * i;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v3 = i;
      if (i >= v12)
        v3 = i % v12;
    }
    else
    {
      v3 = (v12 - 1) & i;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v15)
    {
      for (j = *v15; j; j = *(unsigned __int8 **)j)
      {
        v17 = *((_QWORD *)j + 1);
        if (v17 == i)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, j + 16, (unsigned __int8 *)a2) & 1) != 0)
            return j;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__construct_node_hash<std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(a1, i, a3, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (i >= v12)
        v3 = i % v12;
      else
        v3 = i;
    }
    else
    {
      v3 = (v12 - 1) & i;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  j = (unsigned __int8 *)v27[0];
  ++*(_QWORD *)(a1 + 24);
  return j;
}

void sub_1ADE34E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__construct_node_hash<std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  v8[5] = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADE34F2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  _QWORD v3[34];

  *(_QWORD *)a1 = &off_1E5D2B2D0;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 80);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReaderArchiveImplBase(a1);
}

_QWORD *kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader(_QWORD *a1)
{
  _QWORD v3[34];

  if (*a1 && (kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RandomAccessTableReader destructor: failure detected.", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(_QWORD *a1)
{
  uint64_t v2;

  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(a1);
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  *a1 = 0;
  return v2;
}

_QWORD *kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(_QWORD *result)
{
  _QWORD *v1;
  _QWORD v2[34];

  if (!*result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Trying to use empty RandomAccessTableReader (perhaps you ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "passed the empty string as an argument to a program?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t simple_sort(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t reverseTrie@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int v6;
  const unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t result;
  _BYTE v12[87];
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _BYTE v18[12];
  int v19;

  Trie<unsigned int,unsigned int>::Trie(a3, 0);
  *(_DWORD *)&v18[8] = 0;
  v19 = 0;
  v17 = 0;
  *(_QWORD *)v18 = a2 + 1;
  if (a2 == -1)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v17, a2, 0);
    LODWORD(v14) = 0;
    HIDWORD(v14) = a2 + 1;
    v15 = 0;
    v16 = 0;
    Array<unsigned int>::alloc((uint64_t)&v14, a2, 0);
  }
  v6 = 0;
  v13 = 0;
  do
  {
    TrieIter2<unsigned int,unsigned int>::TrieIter2(v12, a1, *(_QWORD *)&v18[4] - 4 * v17, v6 - 1, 0);
    while (1)
    {
      v8 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)v12);
      if (!v8)
        break;
      Vocab::copy(v15 - 4 * (int)v14, (unsigned int *)(*(_QWORD *)&v18[4] - 4 * v17), v7);
      Vocab::reverse(v15 - 4 * (int)v14, v9);
      v10 = *(_DWORD *)(v8 + 8);
      *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie(a3, (unsigned int *)(v15 - 4 * (int)v14), &v13) + 2) = v10;
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v12);
    ++v6;
  }
  while (v6 <= a2);
  if (v15)
    MEMORY[0x1AF44D160](v15, 0x1000C8052888210);
  result = *(_QWORD *)&v18[4];
  if (*(_QWORD *)&v18[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v18[4], 0x1000C8052888210);
  return result;
}

void sub_1ADE35270(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 64);
  if (v4)
    MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
  Trie<unsigned int,unsigned int>::~Trie(v1);
  _Unwind_Resume(a1);
}

void MEModel::MEModel(MEModel *this, Vocab *a2, int a3)
{
  uint64_t v5;

  LM::LM(this, a2);
  *(_QWORD *)v5 = &off_1E5D17620;
  *(_DWORD *)(v5 + 152) = a3;
  *(_BYTE *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  Trie<unsigned int,unsigned int>::Trie(v5 + 192, 0);
  Trie<unsigned int,unsigned int>::Trie((char *)this + 208, 0);
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1000;
}

void sub_1ADE3534C(_Unwind_Exception *a1)
{
  LM *v1;
  uint64_t v2;

  Trie<unsigned int,unsigned int>::~Trie(v2);
  LM::~LM(v1);
  _Unwind_Resume(a1);
}

void MEModel::~MEModel(MEModel *this)
{
  *(_QWORD *)this = &off_1E5D17620;
  MEModel::clear(this);
  LHash<unsigned int,double>::clear((_QWORD *)this + 28, 0);
  Trie<unsigned int,unsigned int>::~Trie((char *)this + 208);
  Trie<unsigned int,unsigned int>::~Trie((char *)this + 192);
  LM::~LM(this);
}

{
  MEModel::~MEModel(this);
  JUMPOUT(0x1AF44D190);
}

void MEModel::clear(MEModel *this)
{
  hmaxent::model *v2;

  v2 = (hmaxent::model *)*((_QWORD *)this + 23);
  if (v2)
  {
    hmaxent::model::~model(v2);
    MEMORY[0x1AF44D190]();
  }
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear((_QWORD *)this + 26, 0);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::clear((_QWORD *)this + 24, 0);
  LHash<unsigned int,double>::clear((_QWORD *)this + 28, 0);
}

float MEModel::wordProb(uint64_t a1, const unsigned int *a2, Vocab *this)
{
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v17;
  unsigned int v18;

  v6 = Vocab::length((uint64_t)this, a2);
  if (*(_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1))
  {
    if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)) == (_DWORD)a2
      || *(_DWORD *)(a1 + 152) >= 2u
      && ((v7 = *(_DWORD *)this,
           v7 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
       || *(_DWORD *)(a1 + 152) >= 3u
       && v6
       && (v8 = *((_DWORD *)this + 1),
           v8 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))))
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
        || *(_BYTE *)(a1 + 8)
        || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
      {
        return -INFINITY;
      }
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v10 = "[OOV context]";
      v11 = 13;
LABEL_25:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      return -INFINITY;
    }
  }
  v18 = 0;
  if (!LHash<unsigned int,double>::locate((_DWORD **)(a1 + 224), a2, &v18))
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
      || *(_BYTE *)(a1 + 8)
      || Debug::debugAll <= 1 && *(_DWORD *)(a1 + 12) < 2u)
    {
      return -INFINITY;
    }
    v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v10 = "[OOV]";
    v11 = 5;
    goto LABEL_25;
  }
  v12 = (unint64_t *)(*(_QWORD *)(a1 + 224) + 16 * v18 + 8);
  v17 = 0;
  v13 = (*(uint64_t (**)(uint64_t, const unsigned int *, Vocab *, int *))(*(_QWORD *)a1 + 208))(a1, a2, this, &v17);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && !*(_BYTE *)(a1 + 8)
    && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"gram]", 5);
  }
  return hmaxent::model::log_prob_context(*(unint64_t ***)(a1 + 184), *(unsigned int *)(v13 + 8), *v12)
       / 2.30258509;
}

_DWORD **MEModel::contextID(MEModel *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  _DWORD **v5;
  unint64_t v6;
  unsigned int v9;
  int v11;

  v5 = (_DWORD **)((char *)this + 192);
  if (*((_DWORD *)this + 38) == 1)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v9 = a3[v6];
      if (v9 == -1)
        break;
      v11 = 0;
      if (!LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(v5, v9, &v11))
        break;
      v5 = (_DWORD **)&(*v5)[6 * v11 + 2];
      ++v6;
    }
    while (v6 < (*((_DWORD *)this + 38) - 1));
  }
  *a4 = v6;
  return v5;
}

uint64_t MEModel::read(MEModel *this, File *a2)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v9;
  _QWORD *v10;
  char **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD **v22;
  char *v23;
  char **v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char **v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  std::locale v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char **v68;
  unsigned int v69;
  unsigned int v70[102];
  std::locale v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = File::getline(a2);
  if (strncmp(v4, "H-MAXENT 0.1", 0xCuLL)
    || (v67 = 0,
        v68 = 0,
        v65 = 0,
        v66 = 0,
        v9 = File::getline(a2),
        !sscanf(v9, "# %ld %ld %ld %ld", &v68, &v67, &v66, &v65)))
  {
    v5 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format error in H-MAXENT file", 29);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v7 = std::locale::use_facet(v71, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(v71);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  v10 = (_QWORD *)operator new();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = 0;
  v12 = v67;
  v11 = v68;
  *((_DWORD *)this + 38) = (_DWORD)v68;
  *v10 = v11;
  v10[1] = v12;
  v13 = (_QWORD *)operator new();
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v10[4] = v13;
  v14 = (_QWORD *)operator new();
  v15 = v65;
  *v14 = 0;
  v14[1] = 0;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    *v14 = v16;
    bzero(v16, 8 * v15);
    v14[1] = &v16[8 * v15];
  }
  v10[3] = v14;
  if (!*((_BYTE *)this + 8) && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Reading ", 8);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" contexts...", 12);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(v71, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(v71);
    std::ostream::put();
    std::ostream::flush();
  }
  v20 = operator new[]();
  v102 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  *(_OWORD *)&v71[0].__locale_ = 0u;
  if (v66 >= 1)
  {
    v62 = 0;
    v21 = 0;
    v60 = (_QWORD *)((char *)this + 208);
    v22 = (_DWORD **)((char *)this + 224);
    while (1)
    {
      v23 = File::getline(a2);
      v25 = Vocab::parseWords((Vocab *)v23, (char *)v71, (const char **)v68, v24);
      v26 = atoi((const char *)v71[0].__locale_);
      v27 = (v25 - 1);
      (*(void (**)(_QWORD, std::locale *, unsigned int *, uint64_t))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3), &v71[1], &v69, v27);
      v70[v27 - 1] = -1;
      LOBYTE(v63.__locale_) = 0;
      *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie(v60, &v69, &v63) + 2) = v62;
      if ((_DWORD)v27)
      {
        LOBYTE(v63.__locale_) = 0;
        v59 = *(unsigned int *)(Trie<unsigned int,unsigned int>::findTrie((_DWORD **)v60, v70, &v63) + 8);
      }
      else
      {
        v59 = 0;
      }
      v28 = v21;
      if (v26)
        break;
LABEL_27:
      v61 = v28;
      v37 = v26;
      v38 = v10[4];
      v39 = *(_QWORD **)(v38 + 8);
      v40 = *(_QWORD *)(v38 + 16);
      if ((unint64_t)v39 >= v40)
      {
        v42 = *(_QWORD **)v38;
        v43 = ((uint64_t)v39 - *(_QWORD *)v38) >> 5;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v45 = v40 - (_QWORD)v42;
        if (v45 >> 4 > v44)
          v44 = v45 >> 4;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
          v46 = 0x7FFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v38 + 16, v46);
          v42 = *(_QWORD **)v38;
          v39 = *(_QWORD **)(v38 + 8);
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[32 * v43];
        *(_DWORD *)v48 = v27;
        *((_QWORD *)v48 + 1) = v59;
        *((_QWORD *)v48 + 2) = v21;
        *((_QWORD *)v48 + 3) = v37;
        v49 = v48;
        if (v39 == v42)
        {
          v21 = v61;
        }
        else
        {
          v21 = v61;
          do
          {
            v50 = *((_OWORD *)v39 - 1);
            *((_OWORD *)v49 - 2) = *((_OWORD *)v39 - 2);
            *((_OWORD *)v49 - 1) = v50;
            v49 -= 32;
            v39 -= 4;
          }
          while (v39 != v42);
          v42 = *(_QWORD **)v38;
        }
        v41 = v48 + 32;
        *(_QWORD *)v38 = v49;
        *(_QWORD *)(v38 + 8) = v48 + 32;
        *(_QWORD *)(v38 + 16) = &v47[32 * v46];
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_DWORD *)v39 = v27;
        v39[1] = v59;
        v39[2] = v21;
        v41 = (char *)(v39 + 4);
        v39[3] = v37;
        v21 = v28;
      }
      *(_QWORD *)(v38 + 8) = v41;
      if (v66 <= ++v62)
        goto LABEL_46;
    }
    v29 = v26;
    v30 = v21;
    while (1)
    {
      v31 = File::getline(a2);
      if (Vocab::parseWords((Vocab *)v31, (char *)v71, (const char **)2, v32) != 2)
        break;
      v33 = (*(uint64_t (**)(_QWORD, std::locale::__imp *))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v71[0].__locale_);
      LOBYTE(v63.__locale_) = 0;
      v34 = (uint64_t *)LHash<unsigned int,double>::insert((_QWORD *)this + 28, v33, &v63);
      if (LOBYTE(v63.__locale_))
      {
        v35 = *v34;
      }
      else
      {
        v36 = *v22;
        if (*v22)
          LODWORD(v36) = *v36 >> 5;
        v35 = ((_DWORD)v36 - 1);
        *v34 = v35;
      }
      *(_QWORD *)(*(_QWORD *)v10[3] + 8 * v30) = v35;
      *(double *)(v20 + 8 * v30++) = atof((const char *)v71[1].__locale_);
      if (!--v29)
      {
        v28 = v26 + v21;
        goto LABEL_27;
      }
    }
    v56 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"<word> <weight> expected", 24);
    std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
    v58 = std::locale::use_facet(&v63, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale(&v63);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
LABEL_46:
  v51 = operator new();
  hmaxent::model::model(v51, v10);
  *((_QWORD *)this + 23) = v51;
  v52 = v65;
  if (v65 >= 1)
  {
    v53 = **(_QWORD ***)(v51 + 120);
    v54 = (uint64_t *)v20;
    do
    {
      v55 = *v54++;
      *v53++ = v55;
      --v52;
    }
    while (v52);
  }
  MEMORY[0x1AF44D160](v20, 0x1000C8000313F17);
  reverseTrie((uint64_t)this + 208, v68, &v63);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((_QWORD *)this + 24, &v63);
  *((_DWORD *)this + 50) = v64;
  Trie<unsigned int,unsigned int>::~Trie(&v63);
  return 1;
}

void sub_1ADE35E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  Trie<unsigned int,unsigned int>::~Trie(va);
  _Unwind_Resume(a1);
}

uint64_t MEModel::write(MEModel *this, File *a2)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  const char *v28;
  _QWORD *v31;
  _BYTE v32[80];
  int v33;
  _BYTE v34[12];
  int v35;
  int v36;
  _BYTE v37[24];
  uint64_t v38;

  LHashIter<unsigned int,unsigned long>::LHashIter((uint64_t)v37, (_DWORD **)this + 28, 0);
  v36 = 0;
  v31 = (_QWORD *)((char *)this + 192);
  while (1)
  {
    v4 = (unsigned int *)LHashIter<unsigned int,unsigned long>::next((uint64_t)v37, &v36);
    if (!v4)
      break;
    v5 = v36;
    v6 = *v4;
    v32[0] = 0;
    v7 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert(v31, v6, v32);
    if (!v32[0])
      *v7 = 0;
    v7[2] = v5;
  }
  File::fprintf(a2, "H-MAXENT 0.1\n");
  v8 = *(_QWORD **)(*((_QWORD *)this + 23) + 16);
  File::fprintf(a2, "# %ld %ld %ld %ld\n", *v8, v8[1], (uint64_t)(*(_QWORD *)(v8[4] + 8) - *(_QWORD *)v8[4]) >> 5, (uint64_t)(*(_QWORD *)(v8[3] + 8) - *(_QWORD *)v8[3]) >> 3);
  v9 = *(_QWORD **)(*((_QWORD *)this + 23) + 120);
  v10 = *((_DWORD *)this + 38);
  *(_DWORD *)&v34[8] = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)v34 = (v10 + 1);
  if (v10 == -1 || (Array<unsigned int>::alloc((uint64_t)&v33, v10, 0), *((_DWORD *)this + 38)))
  {
    v11 = 0;
    do
    {
      TrieIter2<unsigned int,unsigned int>::TrieIter2(v32, (char *)this + 208, *(_QWORD *)&v34[4] - 4 * v33, v11, 0);
      while (1)
      {
        v12 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)v32);
        if (!v12)
          break;
        v13 = *(unsigned int *)(v12 + 8);
        v14 = *(_QWORD *)v8[4];
        v15 = v14 + 32 * v13;
        v17 = *(_QWORD *)(v15 + 24);
        v16 = (_QWORD *)(v15 + 24);
        File::fprintf(a2, "%ld", v17);
        if ((_DWORD)v11)
        {
          v18 = 0;
          do
          {
            v19 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), *(unsigned int *)(*(_QWORD *)&v34[4] + 4 * (v18 - v33)));
            File::fprintf(a2, " %s", v19);
            ++v18;
          }
          while ((_DWORD)v11 != v18);
        }
        File::fprintf(a2, "\n");
        v20 = v14 + 32 * v13;
        v23 = *(_QWORD *)(v20 + 16);
        v22 = (_QWORD *)(v20 + 16);
        v21 = v23;
        if (*v16 + v23 > (unint64_t)v23)
        {
          v24 = v21;
          v25 = v21 + 1;
          do
          {
            v26 = *((_QWORD *)this + 3);
            v27 = (unsigned int *)Trie<unsigned int,unsigned int>::find((_DWORD **)v31, *(_QWORD *)(*(_QWORD *)v8[3] + 8 * v24));
            v28 = (const char *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, *v27);
            File::fprintf(a2, "%s %f\n", v28, *(double *)(*v9 + 8 * v24));
            v24 = v25;
          }
          while (*v16 + *v22 > (unint64_t)v25++);
        }
        File::fprintf(a2, "\n");
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v32);
      v11 = (v11 + 1);
    }
    while (v11 < *((_DWORD *)this + 38));
  }
  if (*(_QWORD *)&v34[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v34[4], 0x1000C8052888210);
  if (v38)
    MEMORY[0x1AF44D160](v38, 0x1000C8052888210);
  return 1;
}

void sub_1ADE36188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v29;

  v29 = *(_QWORD *)(v27 - 96);
  if (v29)
    MEMORY[0x1AF44D160](v29, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

Ngram *MEModel::getNgramLM(MEModel *this)
{
  Ngram *v2;
  unsigned int *v3;
  _DWORD **v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  unint64_t **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  float *inserted;
  float v26;
  float v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  double v33;
  double v34;
  unsigned int *v35;
  float *v36;
  float v37;
  char *v40;
  MEModel *v41;
  int v42;
  _DWORD v43[2];
  uint64_t v44;
  int v45;
  _BYTE v46[80];
  int v47;
  _BYTE v48[12];
  int v49;
  void *__p;
  _BYTE *v51;
  int v52;
  _BYTE v53[24];
  uint64_t v54;

  v2 = (Ngram *)operator new();
  Ngram::Ngram(v2, *((Vocab **)this + 3), *((_DWORD *)this + 38));
  v3 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 104))(*((_QWORD *)this + 3));
  *(_DWORD *)Ngram::insertProb(v2, *v3, &Vocab_None) = -8388608;
  LHashIter<unsigned int,unsigned long>::LHashIter((uint64_t)v53, (_DWORD **)this + 28, 0);
  v52 = 0;
  v4 = (_DWORD **)((char *)this + 192);
  while (1)
  {
    v5 = (unsigned int *)LHashIter<unsigned int,unsigned long>::next((uint64_t)v53, &v52);
    if (!v5)
      break;
    v6 = v52;
    v7 = *v5;
    v46[0] = 0;
    v8 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned int>>::insert((_QWORD *)this + 24, v7, v46);
    if (!v46[0])
      *v8 = 0;
    v8[2] = v6;
  }
  hmaxent::model::param_sums(*((uint64_t ****)this + 23), (uint64_t ***)&__p);
  v9 = hmaxent::model::lognormconst(*((unint64_t ***)this + 23));
  v10 = *(_QWORD *)(*((_QWORD *)this + 23) + 16);
  v41 = this;
  v11 = *((_DWORD *)this + 38);
  *(_DWORD *)&v48[8] = 0;
  v49 = 0;
  v47 = 0;
  *(_QWORD *)v48 = (v11 + 1);
  if (v11 == -1 || (Array<unsigned int>::alloc((uint64_t)&v47, v11, 0), *((_DWORD *)this + 38)))
  {
    v12 = 0;
    v40 = (char *)this + 208;
    v42 = -1;
    do
    {
      TrieIter2<unsigned int,unsigned int>::TrieIter2(v46, v40, *(_QWORD *)&v48[4] - 4 * v47, v12, 0);
      v13 = v12 + 1;
      while (1)
      {
        v14 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)v46);
        v15 = v14;
        if (!v14)
          break;
        v16 = *(unsigned int *)(v14 + 8);
        v17 = **(_QWORD **)(v10 + 32);
        v43[0] = 0;
        v43[1] = v12 + 1;
        v44 = 0;
        v45 = 0;
        Array<unsigned int>::alloc((uint64_t)v43, v12, 0);
        v18 = v44;
        if ((_DWORD)v12)
        {
          v19 = 0;
          v20 = *(_QWORD *)&v48[4];
          v21 = v42;
          do
          {
            *(_DWORD *)(v18 + 4 * (v21 - v43[0])) = *(_DWORD *)(v20 + 4 * (v19 - v47));
            ++v19;
            --v21;
          }
          while (v21 != -1);
        }
        *(_DWORD *)(v18 + 4 * ((int)v12 - v43[0])) = -1;
        v22 = v17 + 32 * v16;
        v23 = *(double *)&(*v9)[*(_QWORD *)(v22 + 8)];
        v24 = *(double *)&(*v9)[*(unsigned int *)(v15 + 8)];
        inserted = (float *)Ngram::insertBOW(v2, (unsigned int *)(v18 - 4 * v43[0]));
        v26 = v23 - v24;
        v27 = v26 / 2.30258509;
        *inserted = v27;
        v30 = *(_QWORD *)(v22 + 16);
        v29 = (_QWORD *)(v22 + 16);
        v28 = v30;
        if (v29[1] + v30 > (unint64_t)v30)
        {
          v31 = v28;
          v32 = v28 + 1;
          do
          {
            v33 = *((double *)__p + v31);
            v34 = *(double *)&(*v9)[*(unsigned int *)(v15 + 8)];
            v35 = (unsigned int *)Trie<unsigned int,unsigned int>::find(v4, *(_DWORD *)(**(_QWORD **)(v10 + 24) + 8 * v31));
            v36 = (float *)Ngram::insertProb(v2, *v35, (unsigned int *)(v44 - 4 * v43[0]));
            v37 = (v33 - v34) / 2.30258509;
            *v36 = v37;
            v31 = v32;
          }
          while (v29[1] + *v29 > (unint64_t)v32++);
        }
        if (v44)
          MEMORY[0x1AF44D160](v44, 0x1000C8052888210);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v46);
      ++v42;
      v12 = (v12 + 1);
    }
    while (v13 < *((_DWORD *)v41 + 38));
  }
  if (*(_QWORD *)&v48[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v48[4], 0x1000C8052888210);
  if (__p)
  {
    if (v51 != __p)
      v51 += ((_BYTE *)__p - v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    operator delete(__p);
  }
  if (v54)
    MEMORY[0x1AF44D160](v54, 0x1000C8052888210);
  return v2;
}

void sub_1ADE3659C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;

  if (__p)
    operator delete(__p);
  v32 = *(_QWORD *)(v30 - 128);
  if (v32)
    MEMORY[0x1AF44D160](v32, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t MEModel::contextID(MEModel *this, const unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(MEModel *, uint64_t, const unsigned int *, unsigned int *))(*(_QWORD *)this + 208))(this, 0xFFFFFFFFLL, a2, a3);
}

uint64_t MEModel::skipOOVs(MEModel *this)
{
  return (uint64_t)this + 176;
}

void MEModel::_estimate<double>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v8;
  int v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *inserted;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t i;
  _QWORD *v36;
  const std::locale::facet *v37;
  uint64_t v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *DataFrom;
  uint64_t v53;
  float **v54;
  float *v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _BYTE v69[80];
  std::locale v70;
  char v71;
  _QWORD v72[2];
  int v73;
  int v74;
  _BYTE v75[12];
  int v76;
  _BYTE v77[36];
  _DWORD v78[3];

  VocabIter::VocabIter((VocabIter *)v77, *(const Vocab **)(a1 + 24), 1);
  v8 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v75[8] = 0;
  v76 = 0;
  v74 = 0;
  *(_QWORD *)v75 = (v8 + 1);
  if (v8 == -1)
  {
    memset(v72, 0, sizeof(v72));
    v73 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v74, v8, 0);
    v9 = *(_DWORD *)(a1 + 152);
    HIDWORD(v72[1]) = 0;
    v73 = 0;
    LODWORD(v72[0]) = 0;
    *(_QWORD *)((char *)v72 + 4) = (v9 + 1);
    if (v9 != -1)
      Array<unsigned int>::alloc((uint64_t)v72, v9, 0);
  }
  MEModel::modifyCounts<double>(a1, a2);
  v71 = 0;
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Counting counts of order 1 ", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v66 = a2;
  v67 = (_QWORD *)(a1 + 224);
  while (v14 <= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24)))
  {
    if ((*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24))
       || (_DWORD)v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
      && (_DWORD)v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24))
      && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), v14))
    {
      LOBYTE(v70.__locale_) = 0;
      *(_QWORD *)LHash<unsigned int,double>::insert(v67, v14, &v70) = v13;
      ++v12;
      ++v13;
    }
    v14 = (v14 + 1);
  }
  v15 = *(_QWORD *)&v75[4];
  *(_DWORD *)(*(_QWORD *)&v75[4] - 4 * v74) = -1;
  v68 = (_QWORD *)(a1 + 208);
  v65 = v13;
  *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie((_QWORD *)(a1 + 208), (unsigned int *)(v15 - 4 * v74), &v71)
  + 2) = 0;
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    v17 = (_QWORD *)(a2 + 160);
    v16 = 1;
    v18 = 2;
    do
    {
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Counting counts of order ", 25);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
        v20 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v70);
        std::ostream::put();
        std::ostream::flush();
      }
      TrieIter2<unsigned int,double>::TrieIter2(&v70, v17, *(_QWORD *)&v75[4] - 4 * v74, v18 - 1, simple_sort);
      while (TrieIter2<unsigned int,double>::next((uint64_t)&v70))
      {
        v21 = v72[1];
        v22 = SLODWORD(v72[0]);
        LOBYTE(v78[0]) = 0;
        inserted = Trie<unsigned int,unsigned long>::insertTrie(v17, (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74), v78);
        TrieIter2<unsigned int,double>::TrieIter2(v69, inserted, v21 - 4 * v22, 1, simple_sort);
        v24 = 1;
        while (TrieIter2<unsigned int,double>::next((uint64_t)v69))
        {
          v24 = 0;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), *(unsigned int *)(v72[1] - 4 * SLODWORD(v72[0]))))++v12;
        }
        if ((v24 & 1) == 0)
        {
          v25 = Trie<unsigned int,unsigned int>::insertTrie(v68, (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74), &v71);
          if (!v71)
            *((_DWORD *)v25 + 2) = v16++;
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v69);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v70);
      ++v18;
    }
    while (v18 <= *(_DWORD *)(a1 + 152));
  }
  else
  {
    v16 = 1;
  }
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 9 || *(_DWORD *)(a1 + 12) >= 0xAu))
  {
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Contexts:", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
    Trie<unsigned int,unsigned int>::dump((_DWORD **)v68, 0);
  }
  v28 = (_QWORD *)operator new();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = 0;
  *v28 = *(unsigned int *)(a1 + 152);
  v28[1] = v65;
  v29 = (_QWORD *)operator new();
  std::vector<hmaxent::feature_context_t>::vector(v29, v16);
  v28[4] = v29;
  v30 = (_QWORD *)operator new();
  *v30 = 0;
  v30[1] = 0;
  if (v12)
  {
    v31 = 8 * v12;
    v32 = (char *)operator new(v31);
    *v30 = v32;
    bzero(v32, v31);
    v30[1] = &v32[v31];
  }
  v28[3] = v30;
  v33 = *(_QWORD *)v28[4];
  *(_DWORD *)v33 = 0;
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = v65;
  VocabIter::init((VocabIter *)v77);
  v34 = 0;
  for (i = 0;
        i <= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
        i = (i + 1))
  {
    if ((*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24))
       || (_DWORD)i != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
      && (_DWORD)i != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24))
      && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), i))
    {
      LODWORD(v70.__locale_) = 0;
      LHash<unsigned int,double>::locate((_DWORD **)v67, i, &v70);
      *(_QWORD *)(*(_QWORD *)v28[3] + 8 * v34++) = *(_QWORD *)(*v67 + 16 * LODWORD(v70.__locale_) + 8);
    }
  }
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating feature contexts...", 28);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    v38 = 1;
    do
    {
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Indexing contexts of order ", 27);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
        v40 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale(&v70);
        std::ostream::put();
        std::ostream::flush();
      }
      TrieIter2<unsigned int,unsigned int>::TrieIter2(&v70, v68, *(_QWORD *)&v75[4] - 4 * v74, v38, simple_sort);
      while (1)
      {
        v41 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)&v70);
        if (!v41)
          break;
        v42 = *(unsigned int *)(v41 + 8);
        v43 = *(_QWORD *)v28[4];
        *(_DWORD *)(v43 + 32 * v42) = v38;
        v44 = *(unsigned int *)(Trie<unsigned int,unsigned int>::findTrie((_DWORD **)v68, (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74 + 4), &v71)+ 8);
        v45 = v43 + 32 * v42;
        *(_QWORD *)(v45 + 16) = v34;
        v46 = (_QWORD *)(v45 + 16);
        *(v46 - 1) = v44;
        v47 = v72[1];
        v48 = SLODWORD(v72[0]);
        LOBYTE(v78[0]) = 0;
        v49 = Trie<unsigned int,unsigned long>::insertTrie((_QWORD *)(v66 + 160), (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74), v78);
        TrieIter2<unsigned int,double>::TrieIter2(v69, v49, v47 - 4 * v48, 1, simple_sort);
        while (TrieIter2<unsigned int,double>::next((uint64_t)v69))
        {
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), *(unsigned int *)(v72[1] - 4 * SLODWORD(v72[0]))))
          {
            v50 = *(_DWORD *)(v72[1] - 4 * SLODWORD(v72[0]));
            v78[0] = 0;
            LHash<unsigned int,double>::locate((_DWORD **)v67, v50, v78);
            *(_QWORD *)(*(_QWORD *)v28[3] + 8 * v34++) = *(_QWORD *)(*v67 + 16 * v78[0] + 8);
          }
        }
        *(_QWORD *)(v43 + 32 * v42 + 24) = v34 - *v46;
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v69);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v70);
      v38 = (v38 + 1);
    }
    while (v38 < *(_DWORD *)(a1 + 152));
  }
  v51 = operator new();
  hmaxent::model::model(v51, v28);
  *(_QWORD *)(a1 + 184) = v51;
  DataFrom = MEModel::createDataFromCounts<double>(a1, v66);
  v53 = *(_QWORD *)(a1 + 184);
  v54 = (float **)DataFrom[1];
  v55 = *v54;
  v56 = v54[1];
  if (v55 == v56)
  {
    v59 = 0.0;
    v64 = a4 * 0.0;
  }
  else
  {
    v58 = *v55;
    v57 = v55 + 1;
    v59 = v58;
    if (v57 != v56)
    {
      v60 = v57;
      v61 = v59;
      do
      {
        v62 = *v60++;
        v61 = v61 + v62;
      }
      while (v60 != v56);
      *(double *)(v53 + 56) = v61 * a4;
      while (v57 != v56)
      {
        v63 = *v57++;
        v59 = v59 + v63;
      }
LABEL_78:
      *(double *)(v53 + 64) = a3 / v59;
      *(_DWORD *)(v53 + 136) = *(_DWORD *)(a1 + 232);
      hmaxent::model::fit();
    }
    v64 = v59 * a4;
  }
  *(double *)(v53 + 56) = v64;
  goto LABEL_78;
}

uint64_t sub_1ADE3704C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  std::locale v70;
  int v71;

  if (v61)
    MEMORY[0x1AF44D190](v61, 0x20C40960023A9);
  if (!*(_BYTE *)(v60 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v60 + 12) >= 2u))
  {
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
    v64 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v69, *(_DWORD *)(v60 + 152), &v70);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((_QWORD *)(v60 + 192), &v70);
  *(_DWORD *)(v60 + 200) = v71;
  Trie<unsigned int,unsigned int>::~Trie(&v70);
  v65 = *(_QWORD *)(v62 - 184);
  if (v65)
    MEMORY[0x1AF44D160](v65, 0x1000C8052888210);
  v66 = *(_QWORD *)(v62 - 160);
  if (v66)
    MEMORY[0x1AF44D160](v66, 0x1000C8052888210);
  v67 = *(_QWORD *)(v62 - 120);
  if (v67)
    MEMORY[0x1AF44D160](v67, 0x50C80EE9192B6);
  return 1;
}

void sub_1ADE371A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v26 = *(_QWORD *)(v24 - 160);
  if (v26)
    MEMORY[0x1AF44D160](v26, 0x1000C8052888210);
  v27 = *(_QWORD *)(v24 - 120);
  if (v27)
    MEMORY[0x1AF44D160](v27, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t MEModel::modifyCounts<double>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int **v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t Trie;
  double *v13;
  uint64_t result;
  _BYTE v15[80];
  int v16;
  _BYTE v17[12];
  int v18;
  char v19;

  v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v17[8] = 0;
  v18 = 0;
  v16 = 0;
  *(_QWORD *)v17 = (v4 + 1);
  if (v4 == -1)
  {
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v16, v4, 0);
    v5 = *(unsigned int *)(a1 + 152);
    if (!(_DWORD)v5)
      goto LABEL_22;
  }
  v6 = (unsigned int **)(a2 + 160);
  do
  {
    TrieIter2<unsigned int,double>::TrieIter2(v15, v6, *(_QWORD *)&v17[4] - 4 * v16, v5, 0);
LABEL_6:
    while (TrieIter2<unsigned int,double>::next((uint64_t)v15))
    {
      v7 = 0;
      while (1)
      {
        if (!*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24)))
        {
          v8 = *(_DWORD *)(*(_QWORD *)&v17[4] + 4 * (v7 - v16));
          if (v8 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
            break;
        }
        if ((_DWORD)v5 == ++v7)
          goto LABEL_6;
      }
      Trie<unsigned int,double>::remove(v6, (unsigned int *)(*(_QWORD *)&v17[4] - 4 * v16), 0);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
    v5 = (v5 - 1);
  }
  while ((_DWORD)v5);
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    v9 = 2;
    do
    {
      TrieIter2<unsigned int,double>::TrieIter2(v15, v6, *(_QWORD *)&v17[4] - 4 * v16, v9, 0);
      while (1)
      {
        v10 = TrieIter2<unsigned int,double>::next((uint64_t)v15);
        if (!v10)
          break;
        v11 = *(double *)(v10 + 8);
        v19 = 0;
        Trie = Trie<unsigned int,unsigned int>::findTrie(v6, (unsigned int *)(*(_QWORD *)&v17[4] - 4 * v16 + 4), &v19);
        v13 = (double *)(Trie + 8);
        if (!Trie)
          v13 = 0;
        *v13 = *v13 - v11;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
      v9 = (v9 + 1);
    }
    while (v9 <= *(_DWORD *)(a1 + 152));
  }
LABEL_22:
  result = *(_QWORD *)&v17[4];
  if (*(_QWORD *)&v17[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v17[4], 0x1000C8052888210);
  return result;
}

void sub_1ADE37500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    MEMORY[0x1AF44D160](a20, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *MEModel::createDataFromCounts<double>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::locale::id *v10;
  uint64_t Trie;
  uint64_t v12;
  uint64_t v13;
  _QWORD *inserted;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  double v22;
  double *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unsigned int v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  unsigned int v60;
  int v61;
  int v62;
  _QWORD *v63;
  std::locale v64;
  _BYTE v65[87];
  char v66;
  _QWORD v67[20];
  _QWORD v68[2];
  _QWORD v69[2];
  int v70;
  int v71;
  _BYTE v72[12];
  int v73;
  std::locale v74;

  v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v72[8] = 0;
  v73 = 0;
  v71 = 0;
  *(_QWORD *)v72 = (v4 + 1);
  if (v4 == -1)
  {
    memset(v69, 0, sizeof(v69));
    v70 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v71, v4, 0);
    v5 = *(_DWORD *)(a1 + 152);
    HIDWORD(v69[1]) = 0;
    v70 = 0;
    LODWORD(v69[0]) = 0;
    *(_QWORD *)((char *)v69 + 4) = (v5 + 1);
    if (v5 != -1)
      Array<unsigned int>::alloc((uint64_t)v69, v5, 0);
  }
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  NgramCounts<double>::NgramCounts((LMStats *)v67, *(Vocab **)(a1 + 24), *(_DWORD *)(a1 + 152));
  v63 = v6;
  if (*(_DWORD *)(a1 + 152))
  {
    v7 = 0;
    v8 = 0;
    v60 = 0;
    v9 = (_QWORD *)(a2 + 160);
    v10 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v61 = v7;
      TrieIter2<unsigned int,double>::TrieIter2(&v64, v9, *(_QWORD *)&v72[4] - 4 * v71, v7, 0);
      while (TrieIter2<unsigned int,double>::next((uint64_t)&v64))
      {
        v66 = 0;
        Trie = Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a1 + 208), (unsigned int *)(*(_QWORD *)&v72[4] - 4 * v71), &v66);
        v12 = v69[1];
        v13 = SLODWORD(v69[0]);
        LOBYTE(v74.__locale_) = 0;
        inserted = Trie<unsigned int,unsigned long>::insertTrie(v9, (unsigned int *)(*(_QWORD *)&v72[4] - 4 * v71), &v74);
        TrieIter2<unsigned int,double>::TrieIter2(v65, inserted, v12 - 4 * v13, 1, simple_sort);
LABEL_10:
        v15 = v8;
LABEL_11:
        v8 = v15;
        while (1)
        {
          v16 = TrieIter2<unsigned int,double>::next((uint64_t)v65);
          if (!v16)
            break;
          v17 = *(unsigned int *)(v69[1] - 4 * SLODWORD(v69[0]));
          if ((*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24))
             || (_DWORD)v17 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
            && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), v17))
          {
            if (Trie)
            {
              v22 = *(double *)(v16 + 8);
              v23 = (double *)NgramCounts<unsigned long>::insertCount((uint64_t)v67, (unsigned int *)(*(_QWORD *)&v72[4] - 4 * v71), v17);
              *v23 = v22 + *v23;
              ++v60;
              goto LABEL_10;
            }
            v15 = 1;
            if (!(_DWORD)v8)
            {
              v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"WARNING: Data contains n-grams that cannot be properly mapped the nodes of the Maximum Entropy model structure;",
                      111);
              std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
              v19 = std::locale::use_facet(&v74, v10);
              ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
              std::locale::~locale(&v74);
              std::ostream::put();
              std::ostream::flush();
              v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"         If you are adapting a prior model, use also adaptation data (with weight 0) for creating the prior model", 113);
              std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
              v21 = std::locale::use_facet(&v74, v10);
              ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
              std::locale::~locale(&v74);
              std::ostream::put();
              std::ostream::flush();
            }
            goto LABEL_11;
          }
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v65);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v64);
      v7 = (v61 + 1);
    }
    while (v7 < *(_DWORD *)(a1 + 152));
  }
  else
  {
    v60 = 0;
  }
  v24 = v63;
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating count contexts...", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
    v26 = std::locale::use_facet(&v64, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v64);
    std::ostream::put();
    std::ostream::flush();
  }
  v27 = (_QWORD *)operator new();
  *v27 = 0;
  v27[1] = 0;
  if (v60)
  {
    v28 = (char *)operator new(8 * v60);
    *v27 = v28;
    bzero(v28, 8 * v60);
    v27[1] = &v28[8 * v60];
  }
  *v63 = v27;
  v29 = (_QWORD *)operator new();
  *v29 = 0;
  v29[1] = 0;
  if (v60)
  {
    v30 = (char *)operator new(4 * v60);
    *v29 = v30;
    bzero(v30, 4 * v60);
    v29[1] = &v30[4 * v60];
  }
  v63[1] = v29;
  v31 = (_QWORD *)operator new();
  *v31 = 0;
  v31[1] = 0;
  v31[2] = 0;
  v63[2] = v31;
  if (*(_DWORD *)(a1 + 152))
  {
    v32 = 0;
    v33 = 0;
    do
    {
      v62 = v32;
      TrieIter2<unsigned int,double>::TrieIter2(&v64, v68, *(_QWORD *)&v72[4] - 4 * v71, v32, 0);
      while (TrieIter2<unsigned int,double>::next((uint64_t)&v64))
      {
        v66 = 0;
        v34 = v69[1];
        v35 = SLODWORD(v69[0]);
        LOBYTE(v74.__locale_) = 0;
        v36 = Trie<unsigned int,unsigned long>::insertTrie(v68, (unsigned int *)(*(_QWORD *)&v72[4] - 4 * v71), &v74);
        TrieIter2<unsigned int,double>::TrieIter2(v65, v36, v34 - 4 * v35, 1, simple_sort);
        v37 = Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a1 + 208), (unsigned int *)(*(_QWORD *)&v72[4] - 4 * v71), &v66);
        if (v66)
        {
          v38 = *(unsigned int *)(v37 + 8);
          v39 = v33;
          v40 = v33;
          while (1)
          {
            v41 = TrieIter2<unsigned int,double>::next((uint64_t)v65);
            if (!v41)
              break;
            v42 = *(double *)(v41 + 8);
            if (v42 > 0.0)
            {
              v43 = *(_DWORD *)(v69[1] - 4 * SLODWORD(v69[0]));
              v44 = v42;
              *(float *)(*(_QWORD *)v24[1] + 4 * v40) = v44;
              LODWORD(v74.__locale_) = 0;
              LHash<unsigned int,double>::locate((_DWORD **)(a1 + 224), v43, &v74);
              *(_QWORD *)(*(_QWORD *)*v24 + 8 * v40) = *(_QWORD *)(*(_QWORD *)(a1 + 224)
                                                                                 + 16 * LODWORD(v74.__locale_)
                                                                                 + 8);
              v40 = (v40 + 1);
            }
          }
          if ((_DWORD)v33 != (_DWORD)v40)
          {
            v45 = v40 - (unint64_t)v33;
            v46 = v24[2];
            v47 = *(_QWORD **)(v46 + 8);
            v48 = *(_QWORD *)(v46 + 16);
            if ((unint64_t)v47 >= v48)
            {
              v50 = *(_QWORD **)v46;
              v51 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v47 - *(_QWORD *)v46) >> 3);
              v52 = v51 + 1;
              if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v50) >> 3);
              if (2 * v53 > v52)
                v52 = 2 * v53;
              if (v53 >= 0x555555555555555)
                v54 = 0xAAAAAAAAAAAAAAALL;
              else
                v54 = v52;
              if (v54)
              {
                v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v46 + 16, v54);
                v50 = *(_QWORD **)v46;
                v47 = *(_QWORD **)(v46 + 8);
              }
              else
              {
                v55 = 0;
              }
              v56 = &v55[24 * v51];
              *(_QWORD *)v56 = v38;
              *((_QWORD *)v56 + 1) = v39;
              *((_QWORD *)v56 + 2) = v45;
              v57 = v56;
              if (v47 == v50)
              {
                v24 = v63;
              }
              else
              {
                v24 = v63;
                do
                {
                  v58 = *(_OWORD *)(v47 - 3);
                  *((_QWORD *)v57 - 1) = *(v47 - 1);
                  *(_OWORD *)(v57 - 24) = v58;
                  v57 -= 24;
                  v47 -= 3;
                }
                while (v47 != v50);
                v50 = *(_QWORD **)v46;
              }
              v49 = v56 + 24;
              *(_QWORD *)v46 = v57;
              *(_QWORD *)(v46 + 8) = v56 + 24;
              *(_QWORD *)(v46 + 16) = &v55[24 * v54];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *v47 = v38;
              v47[1] = v39;
              v49 = v47 + 3;
              v47[2] = v45;
            }
            *(_QWORD *)(v46 + 8) = v49;
            v33 = v40;
          }
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v65);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v64);
      v32 = (v62 + 1);
    }
    while (v32 < *(_DWORD *)(a1 + 152));
  }
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 9 || *(_DWORD *)(a1 + 12) >= 0xAu))
  {
    File::File((File *)&v64, "-", "w", 1);
    NgramCounts<double>::write((uint64_t)v67, (File *)&v64, 0, 0);
    File::~File((File *)&v64);
  }
  v67[0] = &unk_1E5D15A18;
  Trie<unsigned int,double>::~Trie(v68);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v67);
  if (v69[1])
    MEMORY[0x1AF44D160](v69[1], 0x1000C8052888210);
  if (*(_QWORD *)&v72[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v72[4], 0x1000C8052888210);
  return v24;
}

void sub_1ADE37D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;

  v37 = *(_QWORD *)(v35 - 128);
  if (v37)
    MEMORY[0x1AF44D160](v37, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<hmaxent::feature_context_t>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_1ADE37ED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MEModel::_estimate<unsigned long>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v8;
  int v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *inserted;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t i;
  _QWORD *v36;
  const std::locale::facet *v37;
  uint64_t v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *DataFrom;
  uint64_t v53;
  float **v54;
  float *v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _BYTE v69[80];
  std::locale v70;
  char v71;
  _QWORD v72[2];
  int v73;
  int v74;
  _BYTE v75[12];
  int v76;
  _BYTE v77[36];
  _DWORD v78[3];

  VocabIter::VocabIter((VocabIter *)v77, *(const Vocab **)(a1 + 24), 1);
  v8 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v75[8] = 0;
  v76 = 0;
  v74 = 0;
  *(_QWORD *)v75 = (v8 + 1);
  if (v8 == -1)
  {
    memset(v72, 0, sizeof(v72));
    v73 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v74, v8, 0);
    v9 = *(_DWORD *)(a1 + 152);
    HIDWORD(v72[1]) = 0;
    v73 = 0;
    LODWORD(v72[0]) = 0;
    *(_QWORD *)((char *)v72 + 4) = (v9 + 1);
    if (v9 != -1)
      Array<unsigned int>::alloc((uint64_t)v72, v9, 0);
  }
  MEModel::modifyCounts<unsigned long>(a1, a2);
  v71 = 0;
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Counting counts of order 1 ", 27);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v66 = a2;
  v67 = (_QWORD *)(a1 + 224);
  while (v14 <= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24)))
  {
    if ((*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24))
       || (_DWORD)v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
      && (_DWORD)v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24))
      && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), v14))
    {
      LOBYTE(v70.__locale_) = 0;
      *(_QWORD *)LHash<unsigned int,double>::insert(v67, v14, &v70) = v13;
      ++v12;
      ++v13;
    }
    v14 = (v14 + 1);
  }
  v15 = *(_QWORD *)&v75[4];
  *(_DWORD *)(*(_QWORD *)&v75[4] - 4 * v74) = -1;
  v68 = (_QWORD *)(a1 + 208);
  v65 = v13;
  *((_DWORD *)Trie<unsigned int,unsigned int>::insertTrie((_QWORD *)(a1 + 208), (unsigned int *)(v15 - 4 * v74), &v71)
  + 2) = 0;
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    v17 = (_QWORD *)(a2 + 160);
    v16 = 1;
    v18 = 2;
    do
    {
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Counting counts of order ", 25);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
        v20 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v70);
        std::ostream::put();
        std::ostream::flush();
      }
      TrieIter2<unsigned int,unsigned long>::TrieIter2(&v70, v17, *(_QWORD *)&v75[4] - 4 * v74, v18 - 1, simple_sort);
      while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)&v70))
      {
        v21 = v72[1];
        v22 = SLODWORD(v72[0]);
        LOBYTE(v78[0]) = 0;
        inserted = Trie<unsigned int,unsigned long>::insertTrie(v17, (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74), v78);
        TrieIter2<unsigned int,unsigned long>::TrieIter2(v69, inserted, v21 - 4 * v22, 1, simple_sort);
        v24 = 1;
        while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v69))
        {
          v24 = 0;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), *(unsigned int *)(v72[1] - 4 * SLODWORD(v72[0]))))++v12;
        }
        if ((v24 & 1) == 0)
        {
          v25 = Trie<unsigned int,unsigned int>::insertTrie(v68, (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74), &v71);
          if (!v71)
            *((_DWORD *)v25 + 2) = v16++;
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v69);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v70);
      ++v18;
    }
    while (v18 <= *(_DWORD *)(a1 + 152));
  }
  else
  {
    v16 = 1;
  }
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 9 || *(_DWORD *)(a1 + 12) >= 0xAu))
  {
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Contexts:", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
    Trie<unsigned int,unsigned int>::dump((_DWORD **)v68, 0);
  }
  v28 = (_QWORD *)operator new();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = 0;
  *v28 = *(unsigned int *)(a1 + 152);
  v28[1] = v65;
  v29 = (_QWORD *)operator new();
  std::vector<hmaxent::feature_context_t>::vector(v29, v16);
  v28[4] = v29;
  v30 = (_QWORD *)operator new();
  *v30 = 0;
  v30[1] = 0;
  if (v12)
  {
    v31 = 8 * v12;
    v32 = (char *)operator new(v31);
    *v30 = v32;
    bzero(v32, v31);
    v30[1] = &v32[v31];
  }
  v28[3] = v30;
  v33 = *(_QWORD *)v28[4];
  *(_DWORD *)v33 = 0;
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = v65;
  VocabIter::init((VocabIter *)v77);
  v34 = 0;
  for (i = 0;
        i <= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
        i = (i + 1))
  {
    if ((*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24))
       || (_DWORD)i != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
      && (_DWORD)i != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24))
      && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), i))
    {
      LODWORD(v70.__locale_) = 0;
      LHash<unsigned int,double>::locate((_DWORD **)v67, i, &v70);
      *(_QWORD *)(*(_QWORD *)v28[3] + 8 * v34++) = *(_QWORD *)(*v67 + 16 * LODWORD(v70.__locale_) + 8);
    }
  }
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating feature contexts...", 28);
    std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
    v37 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    v38 = 1;
    do
    {
      if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Indexing contexts of order ", 27);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
        v40 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale(&v70);
        std::ostream::put();
        std::ostream::flush();
      }
      TrieIter2<unsigned int,unsigned int>::TrieIter2(&v70, v68, *(_QWORD *)&v75[4] - 4 * v74, v38, simple_sort);
      while (1)
      {
        v41 = TrieIter2<unsigned int,unsigned int>::next((uint64_t)&v70);
        if (!v41)
          break;
        v42 = *(unsigned int *)(v41 + 8);
        v43 = *(_QWORD *)v28[4];
        *(_DWORD *)(v43 + 32 * v42) = v38;
        v44 = *(unsigned int *)(Trie<unsigned int,unsigned int>::findTrie((_DWORD **)v68, (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74 + 4), &v71)+ 8);
        v45 = v43 + 32 * v42;
        *(_QWORD *)(v45 + 16) = v34;
        v46 = (_QWORD *)(v45 + 16);
        *(v46 - 1) = v44;
        v47 = v72[1];
        v48 = SLODWORD(v72[0]);
        LOBYTE(v78[0]) = 0;
        v49 = Trie<unsigned int,unsigned long>::insertTrie((_QWORD *)(v66 + 160), (unsigned int *)(*(_QWORD *)&v75[4] - 4 * v74), v78);
        TrieIter2<unsigned int,unsigned long>::TrieIter2(v69, v49, v47 - 4 * v48, 1, simple_sort);
        while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v69))
        {
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), *(unsigned int *)(v72[1] - 4 * SLODWORD(v72[0]))))
          {
            v50 = *(_DWORD *)(v72[1] - 4 * SLODWORD(v72[0]));
            v78[0] = 0;
            LHash<unsigned int,double>::locate((_DWORD **)v67, v50, v78);
            *(_QWORD *)(*(_QWORD *)v28[3] + 8 * v34++) = *(_QWORD *)(*v67 + 16 * v78[0] + 8);
          }
        }
        *(_QWORD *)(v43 + 32 * v42 + 24) = v34 - *v46;
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v69);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v70);
      v38 = (v38 + 1);
    }
    while (v38 < *(_DWORD *)(a1 + 152));
  }
  v51 = operator new();
  hmaxent::model::model(v51, v28);
  *(_QWORD *)(a1 + 184) = v51;
  DataFrom = MEModel::createDataFromCounts<unsigned long>(a1, v66);
  v53 = *(_QWORD *)(a1 + 184);
  v54 = (float **)DataFrom[1];
  v55 = *v54;
  v56 = v54[1];
  if (v55 == v56)
  {
    v59 = 0.0;
    v64 = a4 * 0.0;
  }
  else
  {
    v58 = *v55;
    v57 = v55 + 1;
    v59 = v58;
    if (v57 != v56)
    {
      v60 = v57;
      v61 = v59;
      do
      {
        v62 = *v60++;
        v61 = v61 + v62;
      }
      while (v60 != v56);
      *(double *)(v53 + 56) = v61 * a4;
      while (v57 != v56)
      {
        v63 = *v57++;
        v59 = v59 + v63;
      }
LABEL_78:
      *(double *)(v53 + 64) = a3 / v59;
      *(_DWORD *)(v53 + 136) = *(_DWORD *)(a1 + 232);
      hmaxent::model::fit();
    }
    v64 = v59 * a4;
  }
  *(double *)(v53 + 56) = v64;
  goto LABEL_78;
}

uint64_t sub_1ADE3888C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  std::locale v70;
  int v71;

  if (v61)
    MEMORY[0x1AF44D190](v61, 0x20C40960023A9);
  if (!*(_BYTE *)(v60 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v60 + 12) >= 2u))
  {
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
    v64 = std::locale::use_facet(&v70, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v69, *(_DWORD *)(v60 + 152), &v70);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((_QWORD *)(v60 + 192), &v70);
  *(_DWORD *)(v60 + 200) = v71;
  Trie<unsigned int,unsigned int>::~Trie(&v70);
  v65 = *(_QWORD *)(v62 - 184);
  if (v65)
    MEMORY[0x1AF44D160](v65, 0x1000C8052888210);
  v66 = *(_QWORD *)(v62 - 160);
  if (v66)
    MEMORY[0x1AF44D160](v66, 0x1000C8052888210);
  v67 = *(_QWORD *)(v62 - 120);
  if (v67)
    MEMORY[0x1AF44D160](v67, 0x50C80EE9192B6);
  return 1;
}

void sub_1ADE389E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24)
{
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v26 = *(_QWORD *)(v24 - 160);
  if (v26)
    MEMORY[0x1AF44D160](v26, 0x1000C8052888210);
  v27 = *(_QWORD *)(v24 - 120);
  if (v27)
    MEMORY[0x1AF44D160](v27, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t MEModel::modifyCounts<unsigned long>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int **v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Trie;
  _QWORD *v13;
  uint64_t result;
  _BYTE v15[80];
  int v16;
  _BYTE v17[12];
  int v18;
  char v19;

  v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v17[8] = 0;
  v18 = 0;
  v16 = 0;
  *(_QWORD *)v17 = (v4 + 1);
  if (v4 == -1)
  {
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v16, v4, 0);
    v5 = *(unsigned int *)(a1 + 152);
    if (!(_DWORD)v5)
      goto LABEL_22;
  }
  v6 = (unsigned int **)(a2 + 160);
  do
  {
    TrieIter2<unsigned int,unsigned long>::TrieIter2(v15, v6, *(_QWORD *)&v17[4] - 4 * v16, v5, 0);
LABEL_6:
    while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v15))
    {
      v7 = 0;
      while (1)
      {
        if (!*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24)))
        {
          v8 = *(_DWORD *)(*(_QWORD *)&v17[4] + 4 * (v7 - v16));
          if (v8 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
            break;
        }
        if ((_DWORD)v5 == ++v7)
          goto LABEL_6;
      }
      Trie<unsigned int,unsigned long>::remove(v6, (unsigned int *)(*(_QWORD *)&v17[4] - 4 * v16), 0);
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
    v5 = (v5 - 1);
  }
  while ((_DWORD)v5);
  if (*(_DWORD *)(a1 + 152) >= 2u)
  {
    v9 = 2;
    do
    {
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v15, v6, *(_QWORD *)&v17[4] - 4 * v16, v9, 0);
      while (1)
      {
        v10 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v15);
        if (!v10)
          break;
        v11 = *(_QWORD *)(v10 + 8);
        v19 = 0;
        Trie = Trie<unsigned int,unsigned int>::findTrie(v6, (unsigned int *)(*(_QWORD *)&v17[4] - 4 * v16 + 4), &v19);
        v13 = (_QWORD *)(Trie + 8);
        if (!Trie)
          v13 = 0;
        *v13 -= v11;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v15);
      v9 = (v9 + 1);
    }
    while (v9 <= *(_DWORD *)(a1 + 152));
  }
LABEL_22:
  result = *(_QWORD *)&v17[4];
  if (*(_QWORD *)&v17[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v17[4], 0x1000C8052888210);
  return result;
}

void sub_1ADE38D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    MEMORY[0x1AF44D160](a20, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *MEModel::createDataFromCounts<unsigned long>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::locale::id *v10;
  uint64_t Trie;
  uint64_t v12;
  uint64_t v13;
  _QWORD *inserted;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  unsigned int v59;
  int v60;
  int v61;
  _QWORD *v62;
  std::locale v63;
  _BYTE v64[87];
  char v65;
  _QWORD v66[20];
  _QWORD v67[2];
  _QWORD v68[2];
  int v69;
  int v70;
  _BYTE v71[12];
  int v72;
  std::locale v73;

  v4 = *(_DWORD *)(a1 + 152);
  *(_DWORD *)&v71[8] = 0;
  v72 = 0;
  v70 = 0;
  *(_QWORD *)v71 = (v4 + 1);
  if (v4 == -1)
  {
    memset(v68, 0, sizeof(v68));
    v69 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v70, v4, 0);
    v5 = *(_DWORD *)(a1 + 152);
    HIDWORD(v68[1]) = 0;
    v69 = 0;
    LODWORD(v68[0]) = 0;
    *(_QWORD *)((char *)v68 + 4) = (v5 + 1);
    if (v5 != -1)
      Array<unsigned int>::alloc((uint64_t)v68, v5, 0);
  }
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  NgramCounts<unsigned long>::NgramCounts((LMStats *)v66, *(Vocab **)(a1 + 24), *(_DWORD *)(a1 + 152));
  v62 = v6;
  if (*(_DWORD *)(a1 + 152))
  {
    v7 = 0;
    v8 = 0;
    v59 = 0;
    v9 = (_QWORD *)(a2 + 160);
    v10 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v60 = v7;
      TrieIter2<unsigned int,unsigned long>::TrieIter2(&v63, v9, *(_QWORD *)&v71[4] - 4 * v70, v7, 0);
      while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)&v63))
      {
        v65 = 0;
        Trie = Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a1 + 208), (unsigned int *)(*(_QWORD *)&v71[4] - 4 * v70), &v65);
        v12 = v68[1];
        v13 = SLODWORD(v68[0]);
        LOBYTE(v73.__locale_) = 0;
        inserted = Trie<unsigned int,unsigned long>::insertTrie(v9, (unsigned int *)(*(_QWORD *)&v71[4] - 4 * v70), &v73);
        TrieIter2<unsigned int,unsigned long>::TrieIter2(v64, inserted, v12 - 4 * v13, 1, simple_sort);
LABEL_10:
        v15 = v8;
LABEL_11:
        v8 = v15;
        while (1)
        {
          v16 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v64);
          if (!v16)
            break;
          v17 = *(unsigned int *)(v68[1] - 4 * SLODWORD(v68[0]));
          if ((*(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24))
             || (_DWORD)v17 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
            && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 176))(*(_QWORD *)(a1 + 24), v17))
          {
            if (Trie)
            {
              v22 = *(_QWORD *)(v16 + 8);
              v23 = NgramCounts<unsigned long>::insertCount((uint64_t)v66, (unsigned int *)(*(_QWORD *)&v71[4] - 4 * v70), v17);
              *(_QWORD *)v23 += v22;
              ++v59;
              goto LABEL_10;
            }
            v15 = 1;
            if (!(_DWORD)v8)
            {
              v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"WARNING: Data contains n-grams that cannot be properly mapped the nodes of the Maximum Entropy model structure;",
                      111);
              std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
              v19 = std::locale::use_facet(&v73, v10);
              ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
              std::locale::~locale(&v73);
              std::ostream::put();
              std::ostream::flush();
              v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"         If you are adapting a prior model, use also adaptation data (with weight 0) for creating the prior model", 113);
              std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
              v21 = std::locale::use_facet(&v73, v10);
              ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
              std::locale::~locale(&v73);
              std::ostream::put();
              std::ostream::flush();
            }
            goto LABEL_11;
          }
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v64);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v63);
      v7 = (v60 + 1);
    }
    while (v7 < *(_DWORD *)(a1 + 152));
  }
  else
  {
    v59 = 0;
  }
  v24 = v62;
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
  {
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating count contexts...", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
    v26 = std::locale::use_facet(&v63, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v63);
    std::ostream::put();
    std::ostream::flush();
  }
  v27 = (_QWORD *)operator new();
  *v27 = 0;
  v27[1] = 0;
  if (v59)
  {
    v28 = (char *)operator new(8 * v59);
    *v27 = v28;
    bzero(v28, 8 * v59);
    v27[1] = &v28[8 * v59];
  }
  *v62 = v27;
  v29 = (_QWORD *)operator new();
  *v29 = 0;
  v29[1] = 0;
  if (v59)
  {
    v30 = (char *)operator new(4 * v59);
    *v29 = v30;
    bzero(v30, 4 * v59);
    v29[1] = &v30[4 * v59];
  }
  v62[1] = v29;
  v31 = (_QWORD *)operator new();
  *v31 = 0;
  v31[1] = 0;
  v31[2] = 0;
  v62[2] = v31;
  if (*(_DWORD *)(a1 + 152))
  {
    v32 = 0;
    v33 = 0;
    do
    {
      v61 = v32;
      TrieIter2<unsigned int,unsigned long>::TrieIter2(&v63, v67, *(_QWORD *)&v71[4] - 4 * v70, v32, 0);
      while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)&v63))
      {
        v65 = 0;
        v34 = v68[1];
        v35 = SLODWORD(v68[0]);
        LOBYTE(v73.__locale_) = 0;
        v36 = Trie<unsigned int,unsigned long>::insertTrie(v67, (unsigned int *)(*(_QWORD *)&v71[4] - 4 * v70), &v73);
        TrieIter2<unsigned int,unsigned long>::TrieIter2(v64, v36, v34 - 4 * v35, 1, simple_sort);
        v37 = Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a1 + 208), (unsigned int *)(*(_QWORD *)&v71[4] - 4 * v70), &v65);
        if (v65)
        {
          v38 = *(unsigned int *)(v37 + 8);
          v39 = v33;
          v40 = v33;
          while (1)
          {
            v41 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v64);
            if (!v41)
              break;
            v42 = *(_QWORD *)(v41 + 8);
            if (v42)
            {
              v43 = *(_DWORD *)(v68[1] - 4 * SLODWORD(v68[0]));
              *(float *)(*(_QWORD *)v24[1] + 4 * v40) = (float)v42;
              LODWORD(v73.__locale_) = 0;
              LHash<unsigned int,double>::locate((_DWORD **)(a1 + 224), v43, &v73);
              *(_QWORD *)(*(_QWORD *)*v24 + 8 * v40) = *(_QWORD *)(*(_QWORD *)(a1 + 224)
                                                                                 + 16 * LODWORD(v73.__locale_)
                                                                                 + 8);
              v40 = (v40 + 1);
            }
          }
          if ((_DWORD)v33 != (_DWORD)v40)
          {
            v44 = v40 - (unint64_t)v33;
            v45 = v24[2];
            v46 = *(_QWORD **)(v45 + 8);
            v47 = *(_QWORD *)(v45 + 16);
            if ((unint64_t)v46 >= v47)
            {
              v49 = *(_QWORD **)v45;
              v50 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v46 - *(_QWORD *)v45) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v49) >> 3);
              if (2 * v52 > v51)
                v51 = 2 * v52;
              if (v52 >= 0x555555555555555)
                v53 = 0xAAAAAAAAAAAAAAALL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v45 + 16, v53);
                v49 = *(_QWORD **)v45;
                v46 = *(_QWORD **)(v45 + 8);
              }
              else
              {
                v54 = 0;
              }
              v55 = &v54[24 * v50];
              *(_QWORD *)v55 = v38;
              *((_QWORD *)v55 + 1) = v39;
              *((_QWORD *)v55 + 2) = v44;
              v56 = v55;
              if (v46 == v49)
              {
                v24 = v62;
              }
              else
              {
                v24 = v62;
                do
                {
                  v57 = *(_OWORD *)(v46 - 3);
                  *((_QWORD *)v56 - 1) = *(v46 - 1);
                  *(_OWORD *)(v56 - 24) = v57;
                  v56 -= 24;
                  v46 -= 3;
                }
                while (v46 != v49);
                v49 = *(_QWORD **)v45;
              }
              v48 = v55 + 24;
              *(_QWORD *)v45 = v56;
              *(_QWORD *)(v45 + 8) = v55 + 24;
              *(_QWORD *)(v45 + 16) = &v54[24 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *v46 = v38;
              v46[1] = v39;
              v48 = v46 + 3;
              v46[2] = v44;
            }
            *(_QWORD *)(v45 + 8) = v48;
            v33 = v40;
          }
        }
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v64);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(&v63);
      v32 = (v61 + 1);
    }
    while (v32 < *(_DWORD *)(a1 + 152));
  }
  if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll > 9 || *(_DWORD *)(a1 + 12) >= 0xAu))
  {
    File::File((File *)&v63, "-", "w", 1);
    NgramCounts<unsigned long>::write((uint64_t)v66, (File *)&v63, 0, 0);
    File::~File((File *)&v63);
  }
  v66[0] = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie(v67);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v66);
  if (v68[1])
    MEMORY[0x1AF44D160](v68[1], 0x1000C8052888210);
  if (*(_QWORD *)&v71[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v71[4], 0x1000C8052888210);
  return v24;
}

