uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D31838;
  *(_QWORD *)(a1 + 96) = &unk_1E5D31860;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D31700;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADAACE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1E5D316B0;
  *(_QWORD *)(a1 + 96) = &unk_1E5D316D8;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1E5D31578;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1ADAAD3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, quasar::Bitmap *a14, quasar::Bitmap *a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void quasar::SpeechModelInfo::getLocale(quasar::SpeechModelInfo *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  void *__p[2];
  char v5;

  v3 = (char *)this + 120;
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  quasar::Locale::fromInternalShortIdentifier((uint64_t)v3, (char *)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1ADAAD5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

quasar::SystemConfig *quasar::SystemConfig::SystemConfig(quasar::SystemConfig *this, const quasar::SystemConfig *a2, int a3, int a4)
{
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  unsigned __int8 v13;
  const void ***v14;
  unsigned __int8 v15;
  const void ***v16;
  unsigned __int8 v17;
  const void ***v18;
  unsigned __int8 v19;
  const void ***v20;
  unsigned __int8 v21;
  const void ***v22;
  unsigned __int8 v23;
  const void ***v24;
  unsigned __int8 v25;
  const void ***v26;
  unsigned __int8 v27;
  const void ***v28;
  unsigned __int8 v29;
  const void ***v30;
  unsigned __int8 v31;
  const void ***v32;
  unsigned __int8 v33;
  const void ***v34;
  unsigned __int8 v35;
  const void ***v36;
  unsigned __int8 v37;
  const void ***v38;
  unsigned __int8 v39;
  const void ***v40;
  unsigned __int8 v41;
  const void ***v42;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;

  *(_QWORD *)this = off_1E5D34DA8;
  quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((std::string *)((char *)this + 8), (const quasar::SystemConfig *)((char *)a2 + 8));
  if (*((char *)a2 + 839) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 34, *((const std::string::value_type **)a2 + 102), *((_QWORD *)a2 + 103));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 51);
    *((_QWORD *)this + 104) = *((_QWORD *)a2 + 104);
    *((_OWORD *)this + 51) = v8;
  }
  if (a3)
  {
    *((_QWORD *)this + 105) = *((_QWORD *)a2 + 105);
    v9 = *((_QWORD *)a2 + 106);
    *((_QWORD *)this + 106) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)this + 105);
  }
  if (*((char *)a2 + 879) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 856), *((const std::string::value_type **)a2 + 107), *((_QWORD *)a2 + 108));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a2 + 856);
    *((_QWORD *)this + 109) = *((_QWORD *)a2 + 109);
    *(_OWORD *)((char *)this + 856) = v12;
  }
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 55) = 0u;
  quasar::SpeechModelInfo::SpeechModelInfo((std::string *)((char *)this + 904), (const quasar::SystemConfig *)((char *)a2 + 904));
  if ((v13 & 1) == 0
  {
    v44 = (_QWORD *)operator new();
    v44[2] = 0;
    v44[1] = 0;
    *v44 = v44 + 1;
    quasar::maybeReturnMap<std::string,BOOL *>(std::map<std::string,BOOL *> const&,BOOL)::emptyMap = (uint64_t)v44;
  }
  if (a4)
    v14 = (const void ***)((char *)a2 + 1176);
  else
    v14 = (const void ***)quasar::maybeReturnMap<std::string,BOOL *>(std::map<std::string,BOOL *> const&,BOOL)::emptyMap;
  std::map<std::string,BOOL *>::map[abi:ne180100]((uint64_t *)this + 147, v14);
  if ((v15 & 1) == 0
  {
    v45 = (_QWORD *)operator new();
    v45[2] = 0;
    v45[1] = 0;
    *v45 = v45 + 1;
    quasar::maybeReturnMap<std::string,int *>(std::map<std::string,int *> const&,BOOL)::emptyMap = (uint64_t)v45;
  }
  if (a4)
    v16 = (const void ***)((char *)a2 + 1200);
  else
    v16 = (const void ***)quasar::maybeReturnMap<std::string,int *>(std::map<std::string,int *> const&,BOOL)::emptyMap;
  std::map<std::string,int *>::map[abi:ne180100]((uint64_t *)this + 150, v16);
  if ((v17 & 1) == 0
  {
    v46 = (_QWORD *)operator new();
    v46[2] = 0;
    v46[1] = 0;
    *v46 = v46 + 1;
    quasar::maybeReturnMap<std::string,unsigned int *>(std::map<std::string,unsigned int *> const&,BOOL)::emptyMap = (uint64_t)v46;
  }
  if (a4)
    v18 = (const void ***)((char *)a2 + 1224);
  else
    v18 = (const void ***)quasar::maybeReturnMap<std::string,unsigned int *>(std::map<std::string,unsigned int *> const&,BOOL)::emptyMap;
  std::map<std::string,unsigned int *>::map[abi:ne180100]((uint64_t *)this + 153, v18);
  if ((v19 & 1) == 0
  {
    v47 = (_QWORD *)operator new();
    v47[2] = 0;
    v47[1] = 0;
    *v47 = v47 + 1;
    quasar::maybeReturnMap<std::string,long long *>(std::map<std::string,long long *> const&,BOOL)::emptyMap = (uint64_t)v47;
  }
  if (a4)
    v20 = (const void ***)((char *)a2 + 1248);
  else
    v20 = (const void ***)quasar::maybeReturnMap<std::string,long long *>(std::map<std::string,long long *> const&,BOOL)::emptyMap;
  std::map<std::string,long long *>::map[abi:ne180100]((uint64_t *)this + 156, v20);
  if ((v21 & 1) == 0
  {
    v48 = (_QWORD *)operator new();
    v48[2] = 0;
    v48[1] = 0;
    *v48 = v48 + 1;
    quasar::maybeReturnMap<std::string,float *>(std::map<std::string,float *> const&,BOOL)::emptyMap = (uint64_t)v48;
  }
  if (a4)
    v22 = (const void ***)((char *)a2 + 1272);
  else
    v22 = (const void ***)quasar::maybeReturnMap<std::string,float *>(std::map<std::string,float *> const&,BOOL)::emptyMap;
  std::map<std::string,float *>::map[abi:ne180100]((uint64_t *)this + 159, v22);
  if ((v23 & 1) == 0
  {
    v49 = (_QWORD *)operator new();
    v49[2] = 0;
    v49[1] = 0;
    *v49 = v49 + 1;
    quasar::maybeReturnMap<std::string,double *>(std::map<std::string,double *> const&,BOOL)::emptyMap = (uint64_t)v49;
  }
  if (a4)
    v24 = (const void ***)((char *)a2 + 1296);
  else
    v24 = (const void ***)quasar::maybeReturnMap<std::string,double *>(std::map<std::string,double *> const&,BOOL)::emptyMap;
  std::map<std::string,double *>::map[abi:ne180100]((uint64_t *)this + 162, v24);
  if ((v25 & 1) == 0
  {
    v50 = (_QWORD *)operator new();
    v50[2] = 0;
    v50[1] = 0;
    *v50 = v50 + 1;
    quasar::maybeReturnMap<std::string,std::string*>(std::map<std::string,std::string*> const&,BOOL)::emptyMap = (uint64_t)v50;
  }
  if (a4)
    v26 = (const void ***)((char *)a2 + 1320);
  else
    v26 = (const void ***)quasar::maybeReturnMap<std::string,std::string*>(std::map<std::string,std::string*> const&,BOOL)::emptyMap;
  std::map<std::string,std::string*>::map[abi:ne180100]((uint64_t *)this + 165, v26);
  if ((v27 & 1) == 0
  {
    v51 = (_QWORD *)operator new();
    v51[2] = 0;
    v51[1] = 0;
    *v51 = v51 + 1;
    quasar::maybeReturnMap<std::string,std::vector<std::string> *>(std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>> const&,BOOL)::emptyMap = (uint64_t)v51;
  }
  if (a4)
    v28 = (const void ***)((char *)a2 + 1344);
  else
    v28 = (const void ***)quasar::maybeReturnMap<std::string,std::vector<std::string> *>(std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>> const&,BOOL)::emptyMap;
  std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>>::map[abi:ne180100]((uint64_t *)this + 168, v28);
  if ((v29 & 1) == 0
  {
    v52 = (_QWORD *)operator new();
    v52[2] = 0;
    v52[1] = 0;
    *v52 = v52 + 1;
    quasar::maybeReturnMap<std::string,std::vector<std::pair<std::string,std::string>> *>(std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>> const&,BOOL)::emptyMap = (uint64_t)v52;
  }
  if (a4)
    v30 = (const void ***)((char *)a2 + 1368);
  else
    v30 = (const void ***)quasar::maybeReturnMap<std::string,std::vector<std::pair<std::string,std::string>> *>(std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>> const&,BOOL)::emptyMap;
  std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>>::map[abi:ne180100]((uint64_t *)this + 171, v30);
  if ((v31 & 1) == 0
  {
    v53 = (_QWORD *)operator new();
    v53[2] = 0;
    v53[1] = 0;
    *v53 = v53 + 1;
    quasar::maybeReturnMap<std::string,std::unordered_map<std::string,std::string> *>(std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>> const&,BOOL)::emptyMap = (uint64_t)v53;
  }
  if (a4)
    v32 = (const void ***)((char *)a2 + 1392);
  else
    v32 = (const void ***)quasar::maybeReturnMap<std::string,std::unordered_map<std::string,std::string> *>(std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>> const&,BOOL)::emptyMap;
  std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>>::map[abi:ne180100]((uint64_t *)this + 174, v32);
  if ((v33 & 1) == 0
  {
    v54 = (_QWORD *)operator new();
    v54[2] = 0;
    v54[1] = 0;
    *v54 = v54 + 1;
    quasar::maybeReturnMap<std::string,std::unordered_set<std::string> *>(std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>> const&,BOOL)::emptyMap = (uint64_t)v54;
  }
  if (a4)
    v34 = (const void ***)((char *)a2 + 1416);
  else
    v34 = (const void ***)quasar::maybeReturnMap<std::string,std::unordered_set<std::string> *>(std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>> const&,BOOL)::emptyMap;
  std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>>::map[abi:ne180100]((uint64_t *)this + 177, v34);
  if ((v35 & 1) == 0
  {
    v55 = (_QWORD *)operator new();
    v55[2] = 0;
    v55[1] = 0;
    *v55 = v55 + 1;
    quasar::maybeReturnMap<std::string,quasar::filesystem::Path *>(std::map<std::string,quasar::filesystem::Path *> const&,BOOL)::emptyMap = (uint64_t)v55;
  }
  if (a4)
    v36 = (const void ***)((char *)a2 + 1440);
  else
    v36 = (const void ***)quasar::maybeReturnMap<std::string,quasar::filesystem::Path *>(std::map<std::string,quasar::filesystem::Path *> const&,BOOL)::emptyMap;
  std::map<std::string,quasar::filesystem::Path *>::map[abi:ne180100]((uint64_t *)this + 180, v36);
  if ((v37 & 1) == 0
  {
    v56 = (_QWORD *)operator new();
    v56[2] = 0;
    v56[1] = 0;
    *v56 = v56 + 1;
    quasar::maybeReturnMap<std::string,quasar::SystemConfig::Version>(std::map<std::string,quasar::SystemConfig::Version> const&,BOOL)::emptyMap = (uint64_t)v56;
  }
  if (a4)
    v38 = (const void ***)((char *)a2 + 1464);
  else
    v38 = (const void ***)quasar::maybeReturnMap<std::string,quasar::SystemConfig::Version>(std::map<std::string,quasar::SystemConfig::Version> const&,BOOL)::emptyMap;
  std::map<std::string,quasar::SystemConfig::Version>::map[abi:ne180100]((uint64_t *)this + 183, v38);
  if ((v39 & 1) == 0
  {
    v57 = (_QWORD *)operator new();
    v57[2] = 0;
    v57[1] = 0;
    *v57 = v57 + 1;
    quasar::maybeReturnMap<std::string,quasar::SystemConfig::Version>(std::map<std::string,quasar::SystemConfig::Version> const&,BOOL)::emptyMap = (uint64_t)v57;
  }
  if (a4)
    v40 = (const void ***)((char *)a2 + 1488);
  else
    v40 = (const void ***)quasar::maybeReturnMap<std::string,quasar::SystemConfig::Version>(std::map<std::string,quasar::SystemConfig::Version> const&,BOOL)::emptyMap;
  std::map<std::string,quasar::SystemConfig::Version>::map[abi:ne180100]((uint64_t *)this + 186, v40);
  if ((v41 & 1) == 0
  {
    v58 = (_QWORD *)operator new();
    v58[2] = 0;
    v58[1] = 0;
    *v58 = v58 + 1;
    quasar::maybeReturnMap<std::string,std::set<std::string>>(std::map<std::string,std::set<std::string>> const&,BOOL)::emptyMap = (uint64_t)v58;
  }
  if (a4)
    v42 = (const void ***)((char *)a2 + 1512);
  else
    v42 = (const void ***)quasar::maybeReturnMap<std::string,std::set<std::string>>(std::map<std::string,std::set<std::string>> const&,BOOL)::emptyMap;
  std::map<std::string,std::set<std::string>>::map[abi:ne180100]((uint64_t *)this + 189, v42);
  *((_DWORD *)this + 384) = *((_DWORD *)a2 + 384);
  return this;
}

void sub_1ADAADE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, quasar::SpeechModelInfo *a19, uint64_t a20,quasar::SystemConfig::SystemConfigInfo *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  std::__tree<std::string>::destroy(v23, *(char **)(v21 + 1496));
  std::__tree<std::string>::destroy(v22, *(char **)(v21 + 1472));
  std::__tree<std::string>::destroy(v27, *(char **)(v21 + 1448));
  std::__tree<std::string>::destroy(v26, *(char **)(v21 + 1424));
  std::__tree<std::string>::destroy(v25, *(char **)(v21 + 1400));
  std::__tree<std::string>::destroy(v24, *(char **)(v21 + 1376));
  std::__tree<std::string>::destroy(a9, *(char **)(v21 + 1352));
  std::__tree<std::string>::destroy(a10, *(char **)(v21 + 1328));
  std::__tree<std::string>::destroy(a11, *(char **)(v21 + 1304));
  std::__tree<std::string>::destroy(a12, *(char **)(v21 + 1280));
  std::__tree<std::string>::destroy(a13, *(char **)(v21 + 1256));
  std::__tree<std::string>::destroy(a15, *(char **)(v21 + 1232));
  std::__tree<std::string>::destroy(a17, *(char **)(v21 + 1208));
  std::__tree<std::string>::destroy(a18, *(char **)(v21 + 1184));
  quasar::SpeechModelInfo::~SpeechModelInfo(a19);
  if (*(char *)(v21 + 903) < 0)
    operator delete(*(void **)(v21 + 880));
  if (*(char *)(v21 + 879) < 0)
    operator delete(*a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a20);
  if (*(char *)(v21 + 839) < 0)
    operator delete(*a16);
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo(a21);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v21);
  _Unwind_Resume(a1);
}

void sub_1ADAAE0A8()
{
  JUMPOUT(0x1ADAADFD8);
}

void sub_1ADAAE0B0()
{
  JUMPOUT(0x1ADAADFE4);
}

void sub_1ADAAE0B8()
{
  JUMPOUT(0x1ADAADFF0);
}

void sub_1ADAAE0C0()
{
  JUMPOUT(0x1ADAADFFCLL);
}

void sub_1ADAAE0C8()
{
  JUMPOUT(0x1ADAAE008);
}

void sub_1ADAAE0D0()
{
  JUMPOUT(0x1ADAAE014);
}

void sub_1ADAAE0D8()
{
  JUMPOUT(0x1ADAAE020);
}

void sub_1ADAAE0E0()
{
  JUMPOUT(0x1ADAAE02CLL);
}

void sub_1ADAAE0E8()
{
  JUMPOUT(0x1ADAAE038);
}

void sub_1ADAAE0F0()
{
  JUMPOUT(0x1ADAAE044);
}

void sub_1ADAAE0F8()
{
  JUMPOUT(0x1ADAAE04CLL);
}

void sub_1ADAAE100()
{
  JUMPOUT(0x1ADAAE098);
}

double quasar::SystemConfig::Version::Version(quasar::SystemConfig::Version *this)
{
  double result;

  result = NAN;
  *(_QWORD *)this = -1;
  return result;
}

_DWORD *quasar::SystemConfig::Version::Version(_DWORD *this, int a2, int a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

BOOL quasar::SystemConfig::Version::operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  if (*a1 == *a2)
    return a1[1] < a2[1];
  return 0;
}

BOOL quasar::SystemConfig::Version::operator>(_DWORD *a1, _DWORD *a2)
{
  if (*a2 < *a1)
    return 1;
  if (*a2 == *a1)
    return a2[1] < a1[1];
  return 0;
}

BOOL quasar::SystemConfig::Version::operator>=(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0;
  if (*a1 == *a2)
    return a1[1] >= a2[1];
  return 1;
}

uint64_t quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(quasar::SystemConfig::SystemConfigInfoCache *this)
{
  unsigned __int8 v1;
  quasar::SystemConfig::SystemConfigInfoCache *v3;

  if ((v1 & 1) == 0
  {
    v3 = (quasar::SystemConfig::SystemConfigInfoCache *)operator new();
    quasar::SystemConfig::SystemConfigInfoCache::SystemConfigInfoCache(v3, 16);
    quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(void)::singletonInstance = (uint64_t)v3;
  }
  return quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(void)::singletonInstance;
}

void sub_1ADAAE240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40D51851D7);
  _Unwind_Resume(a1);
}

quasar::SystemConfig::SystemConfigInfoCache *quasar::SystemConfig::SystemConfigInfoCache::SystemConfigInfoCache(quasar::SystemConfig::SystemConfigInfoCache *this, uint64_t a2)
{
  *(_QWORD *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  quasar::SystemConfig::SystemConfigInfoCache::reset((std::mutex *)this, a2);
  return this;
}

void sub_1ADAAE2BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](&v1[1].__m_.__sig, 0);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::SystemConfigInfoCache::reset(std::mutex *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;

  std::mutex::lock(this);
  if (a2)
  {
    v4 = (_QWORD *)operator new();
    *v4 = a2;
    std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::unordered_map((uint64_t)(v4 + 1), 0, &v7, &v6);
    v4[7] = v4 + 7;
    v4[8] = v4 + 7;
    v4[9] = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = 0;
  std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](&this[1].__m_.__sig, (uint64_t)v4);
  std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](&v5, 0);
  *(_QWORD *)this[1].__m_.__opaque = 0;
  std::mutex::unlock(this);
}

void sub_1ADAAE380(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10A0C4098A769C9);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::SystemConfigInfoCache::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  std::mutex::lock((std::mutex *)a1);
  v6 = *(_QWORD *)(a1 + 64);
  if (v6
    && kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(v6, a2, a3))
  {
    ++*(_QWORD *)(a1 + 72);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  std::mutex::unlock((std::mutex *)a1);
  return v7;
}

void sub_1ADAAE420(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v4;
  uint64_t v6;

  v6 = 0;
  v4 = kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(a1, a2, &v6);
  if (v4)
    quasar::SystemConfig::SystemConfigInfo::operator=(a3, v6);
  return v4;
}

void quasar::SystemConfig::SystemConfigInfoCache::putIfNotExist(std::mutex *a1, std::string::size_type a2, uint64_t a3)
{
  unint64_t *sig;
  _BYTE v7[808];

  std::mutex::lock(a1);
  if (a1[1].__m_.__sig)
  {
    quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)v7);
    if (!kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(a1[1].__m_.__sig, a2, (uint64_t)v7))
    {
      sig = (unint64_t *)a1[1].__m_.__sig;
      if (*sig)
        kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,quasar::SystemConfig::SystemConfigInfo const&)::{lambda(quasar::SystemConfig::SystemConfigInfo&)#1}>(sig, a2, a3);
    }
    quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)v7);
  }
  std::mutex::unlock(a1);
}

void sub_1ADAAE500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::getConfigFileVersion(quasar::SystemConfig *this)
{
  _OWORD v2[17];

  if (*((_DWORD *)this + 384) != 1)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

uint64_t quasar::SystemConfig::getModelLoader(quasar::SystemConfig *this)
{
  return *((_QWORD *)this + 105);
}

uint64_t quasar::SystemConfig::getModelLoaderPtr(quasar::SystemConfig *this)
{
  return (uint64_t)this + 840;
}

std::string *quasar::SystemConfig::setPrefix(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 34, a2);
}

void quasar::SystemConfig::getPrefix(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 839) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 102), *((_QWORD *)this + 103));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 51);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 104);
  }
}

void quasar::SystemConfig::~SystemConfig(quasar::SystemConfig *this)
{
  *(_QWORD *)this = off_1E5D34DA8;
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)this + 1512, *((_QWORD **)this + 190));
  std::__tree<std::string>::destroy((uint64_t)this + 1488, *((char **)this + 187));
  std::__tree<std::string>::destroy((uint64_t)this + 1464, *((char **)this + 184));
  std::__tree<std::string>::destroy((uint64_t)this + 1440, *((char **)this + 181));
  std::__tree<std::string>::destroy((uint64_t)this + 1416, *((char **)this + 178));
  std::__tree<std::string>::destroy((uint64_t)this + 1392, *((char **)this + 175));
  std::__tree<std::string>::destroy((uint64_t)this + 1368, *((char **)this + 172));
  std::__tree<std::string>::destroy((uint64_t)this + 1344, *((char **)this + 169));
  std::__tree<std::string>::destroy((uint64_t)this + 1320, *((char **)this + 166));
  std::__tree<std::string>::destroy((uint64_t)this + 1296, *((char **)this + 163));
  std::__tree<std::string>::destroy((uint64_t)this + 1272, *((char **)this + 160));
  std::__tree<std::string>::destroy((uint64_t)this + 1248, *((char **)this + 157));
  std::__tree<std::string>::destroy((uint64_t)this + 1224, *((char **)this + 154));
  std::__tree<std::string>::destroy((uint64_t)this + 1200, *((char **)this + 151));
  std::__tree<std::string>::destroy((uint64_t)this + 1176, *((char **)this + 148));
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SystemConfig *)((char *)this + 904));
  if (*((char *)this + 903) < 0)
    operator delete(*((void **)this + 110));
  if (*((char *)this + 879) < 0)
    operator delete(*((void **)this + 107));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 840);
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::SystemConfig::~SystemConfig(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::operator<<(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  return a1;
}

void quasar::SystemConfig::makePathAbsolute(quasar::SystemConfig *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*((_DWORD *)a1 + 384) != 1)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v7, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v7);
  }
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    quasar::filesystem::Path::makeAbsolute((uint64_t)a1 + 40, a2, (std::string *)&v7);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v7;
    *(_QWORD *)(a2 + 16) = v8;
    quasar::SystemConfig::checkPathExists(a1, a2, a3);
  }
}

void quasar::SystemConfig::checkPathExists(quasar::SystemConfig *a1, uint64_t a2, int a3)
{
  const char *v6;
  uint64_t ConfigFileVersion;
  BOOL v8;
  _QWORD *v9;
  int *v10;
  char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  char *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  stat v41;

  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  if (stat(v6, &v41))
  {
    ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(a1);
    if ((int)ConfigFileVersion >= 36)
    {
      v8 = (_DWORD)ConfigFileVersion == 36 && ConfigFileVersion < 0;
      if (!v8 && a3)
      {
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Failed to read file. ", 21);
        v19 = __error();
        v20 = strerror(*v19);
        v21 = strlen(v20);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", path: ", 8);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, a2);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
      }
    }
    if (quasar::gLogLevel >= 2)
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Failed to read file. ", 21);
      v10 = __error();
      v11 = strerror(*v10);
      v12 = strlen(v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", path: ", 8);
      v15 = *(char *)(a2 + 23);
      if (v15 >= 0)
        v16 = a2;
      else
        v16 = *(_QWORD *)a2;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a2 + 23);
      else
        v17 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v24);
    }
  }
}

void sub_1ADAAEA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *quasar::SystemConfig::makePathAbsoluteInternal(unsigned __int8 *result, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (*((_DWORD *)result + 384) != 1)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "Config path is empty. Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = result;
    quasar::filesystem::Path::makeAbsolute((uint64_t)(result + 40), a2, (std::string *)&v8);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v7 = 768;
    if (a3)
      v7 = 728;
    return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v6[v7 + 8], (unsigned __int8 *)a2, a2);
  }
  return result;
}

void quasar::SystemConfig::checkAllAbsolutePathsExist(quasar::SystemConfig *this)
{
  _QWORD *i;
  _QWORD *j;

  for (i = (_QWORD *)*((_QWORD *)this + 99); i; i = (_QWORD *)*i)
    quasar::SystemConfig::checkPathExists(this, (uint64_t)(i + 2), 0);
  for (j = (_QWORD *)*((_QWORD *)this + 94); j; j = (_QWORD *)*j)
    quasar::SystemConfig::checkPathExists(this, (uint64_t)(j + 2), 1);
}

void quasar::SystemConfig::findCommentNodes(uint64_t a1, quasar::PTree *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::string __p;

  v8 = quasar::PTree::begin(a2);
  v9 = quasar::PTree::end(a2);
  if (v8 != v9)
  {
    v10 = v9;
    do
    {
      v11 = *(unsigned __int8 *)(a3 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a3 + 8);
      if (v11)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)v8, (uint64_t)&__p);
      }
      else if (*(char *)(v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
      }
      else
      {
        v12 = *(_OWORD *)v8;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      if (!std::string::compare((const std::string *)v8, 0, 2uLL, "__"))
      {
        v13 = a4[1];
        if (v13 >= a4[2])
        {
          v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a4[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v13 = v14;
          }
          v15 = v13 + 24;
          a4[1] = v13 + 24;
        }
        a4[1] = v15;
      }
      else if ((quasar::PTree::isLeaf((quasar::PTree *)(v8 + 24)) & 1) == 0)
      {
        quasar::SystemConfig::findCommentNodes(a1, v8 + 24, &__p, a4);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 += 88;
    }
    while (v8 != v10);
  }
}

void sub_1ADAAED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::removeCommentNodes(quasar::SystemConfig *this)
{
  char *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v2 = (char *)this + 72;
  quasar::SystemConfig::findCommentNodes((uint64_t)this, (quasar::SystemConfig *)((char *)this + 72), (uint64_t)__p, &v26);
  if (SBYTE7(v10) < 0)
    operator delete(__p[0]);
  v3 = v26;
  for (i = v27; v3 != i; v3 += 24)
  {
    if (quasar::gLogLevel >= 5)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"remove child: ", 14);
      v6 = *(char *)(v3 + 23);
      if (v6 >= 0)
        v7 = v3;
      else
        v7 = *(_QWORD *)v3;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v3 + 23);
      else
        v8 = *(_QWORD *)(v3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::PTree::erase((uint64_t)v2, (unsigned __int8 *)v3);
  }
  __p[0] = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADAAEE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  __p = (void *)(v14 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::overrideValue(uint64_t a1, uint64_t a2, quasar::PTree *a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;
  quasar::PTree *ChildOptional;
  quasar::PTree *v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type size;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type v29;
  _QWORD *v30;
  uint64_t String;
  __int128 v32;
  std::string *v33;
  uint64_t v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  void *__p[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  std::string v55;
  std::string v56;
  std::string v57;
  uint64_t v58;
  uint64_t v59;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::splitStringSimple(a2, (uint64_t *)__p, &v58);
  if (SBYTE7(v39) < 0)
    operator delete(__p[0]);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v57 = *(std::string *)a2;
  if (v58 != v59)
    std::string::operator=(&v57, (const std::string *)(v59 - 24));
  std::string::basic_string[abi:ne180100]<0>(__p, "append:");
  v6 = quasar::startsWith((unsigned __int8 *)&v57, (unsigned __int8 *)__p);
  v7 = v6;
  if ((SBYTE7(v39) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_10;
LABEL_13:
    quasar::PTree::putChild(a1 + 72, a2, (uint64_t)a3, 1);
    goto LABEL_48;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_13;
LABEL_10:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v56 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "append:");
  std::string::basic_string[abi:ne180100]<0>(&v55, "");
  quasar::replaceFirst((uint64_t)&v56, (uint64_t *)__p, (uint64_t)&v55);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SBYTE7(v39) < 0)
    operator delete(__p[0]);
  v8 = a1 + 72;
  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional(v8, (uint64_t)&v56);
  v10 = ChildOptional;
  if (ChildOptional)
  {
    if (!quasar::PTree::isList(ChildOptional))
    {
      if (quasar::PTree::getDataType(v10))
      {
        if (quasar::gLogLevel >= 2)
        {
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Appending of new value is supported only for value types - list, string. Please cross check value for key: ", 107);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v56;
          else
            v25 = (std::string *)v56.__r_.__value_.__r.__words[0];
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          else
            size = v56.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, size);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
      }
      else
      {
        if (quasar::gLogLevel >= 5)
        {
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The existing value of the key: ", 31);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v56;
          else
            v28 = (std::string *)v56.__r_.__value_.__r.__words[0];
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          else
            v29 = v56.__r_.__value_.__l.__size_;
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" will be appended with new value.", 33);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        String = quasar::PTree::getString(v10);
        if (*(char *)(String + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
        }
        else
        {
          v32 = *(_OWORD *)String;
          v55.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
          *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v32;
        }
        v33 = std::string::append(&v55, ",");
        v34 = quasar::PTree::getString(a3);
        v35 = *(char *)(v34 + 23);
        if (v35 >= 0)
          v36 = (const std::string::value_type *)v34;
        else
          v36 = *(const std::string::value_type **)v34;
        if (v35 >= 0)
          v37 = *(unsigned __int8 *)(v34 + 23);
        else
          v37 = *(_QWORD *)(v34 + 8);
        std::string::append(v33, v36, v37);
        quasar::PTree::PTree(__p, &v55);
        quasar::PTree::putChild(v8, (uint64_t)&v56, (uint64_t)__p, 1);
        quasar::PTree::~PTree((quasar::PTree *)__p);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
      }
      goto LABEL_46;
    }
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The existing value of the key: ", 31);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v56;
      else
        v12 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v13 = v56.__r_.__value_.__l.__size_;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" is a list. New value will be appended to the list.", 51);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::PTree::addChild(v10, a3);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The override key: ", 18);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v57;
      else
        v16 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        v17 = v57.__r_.__value_.__l.__size_;
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" starts with ", 13);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"append:", 7);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", however no existing key/value was found to be appended. New value will be added for the keyPath: ", 99);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v56;
      else
        v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      else
        v23 = v56.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v10 = a3;
  }
  quasar::PTree::putChild(v8, (uint64_t)&v56, (uint64_t)v10, 1);
LABEL_46:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
LABEL_48:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  __p[0] = &v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADAAF3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 105) < 0)
    operator delete(*(void **)(v14 - 128));
  if (*(char *)(v14 - 73) < 0)
    operator delete(*(void **)(v14 - 96));
  __p = (void *)(v14 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::readJsonFile(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, char a6)
{
  void **v9;
  uint64_t SpeechModelInfo;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t ConfigFileVersion;
  const quasar::SpeechModelInfo *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  _QWORD *j;
  __int128 **k;
  __int128 *m;
  __int128 *v26;
  __int128 *v27;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void **v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t *v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  void *v54[2];
  __int128 v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *v74[2];
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 __n;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string __str;
  int v94;

  quasar::SystemConfig::simpleReadJson(a1, a2, a4, a6);
  if (*(_DWORD *)(a1 + 728))
  {
    quasar::SystemConfig::getModelVersion((quasar::SystemConfig *)a1, &__str);
    std::string::operator=((std::string *)(a1 + 856), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)(a1 + 40), &__str);
    v9 = (void **)(a1 + 880);
    if (*(char *)(a1 + 903) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 896) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    if (*(_DWORD *)(a1 + 728) == 1)
    {
      SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)a1);
      quasar::SpeechModelInfo::operator=(a1 + 904, SpeechModelInfo);
    }
  }
  v11 = quasar::SystemConfig::checkConfigFileVersion((quasar::SystemConfig *)a1);
  v12 = v11;
  if ((_DWORD)v11 == 2)
  {
    *(_DWORD *)(a1 + 1536) = 0;
  }
  else
  {
    v46 = v11;
    v47 = a3;
    v14 = *a3;
    for (i = a3[1]; v14 != i; v14 += 24)
    {
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&__str);
      v76 = 0u;
      v77 = 0u;
      LODWORD(v78) = 1065353216;
      quasar::SystemConfig::simpleReadJson((uint64_t)&__str, v14, (uint64_t)&v76, 0);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v76);
      ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)&__str);
      if ((int)ConfigFileVersion < 14 || (_DWORD)ConfigFileVersion == 14 && SHIDWORD(ConfigFileVersion) <= 1)
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        __n = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"override config version << ", 27);
        *(_QWORD *)&v51 = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)&__str);
        quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)&v51, (std::string *)&v57);
        if ((SBYTE7(v58) & 0x80u) == 0)
          v39 = &v57;
        else
          v39 = (__int128 *)v57;
        if ((SBYTE7(v58) & 0x80u) == 0)
          v40 = BYTE7(v58);
        else
          v40 = *((_QWORD *)&v57 + 1);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" is incompatible with main config version: ", 43);
        v74[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
        quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)v74, (std::string *)v54);
        if ((SBYTE7(v55) & 0x80u) == 0)
          v43 = v54;
        else
          v43 = (void **)v54[0];
        if ((SBYTE7(v55) & 0x80u) == 0)
          v44 = BYTE7(v55);
        else
          v44 = (uint64_t)v54[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        if (SBYTE7(v55) < 0)
          operator delete(v54[0]);
        if (SBYTE7(v58) < 0)
          operator delete((void *)v57);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v76);
      }
      if (v94 != *(_DWORD *)(a1 + 728))
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        __n = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"override config type << ", 24);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" is not the same as main config type: ", 38);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v76);
      }
      std::string::basic_string[abi:ne180100]<0>(v74, "model-info.version");
      if (*(_DWORD *)(a1 + 728) != 1)
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        __n = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"We only support override of speech model.", 41);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v76);
      }
      v16 = (const quasar::SpeechModelInfo *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&__str);
      quasar::SpeechModelInfo::SpeechModelInfo((std::string *)&v76, v16);
      v17 = HIBYTE(__n);
      if (__n >= 0)
        v18 = HIBYTE(__n);
      else
        v18 = __n;
      v19 = *(unsigned __int8 *)(a1 + 279);
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(a1 + 264);
      if (v18 != v19)
        goto LABEL_59;
      if (v20 >= 0)
        v21 = (unsigned __int8 *)(a1 + 256);
      else
        v21 = *(unsigned __int8 **)(a1 + 256);
      if ((HIBYTE(__n) & 0x80) != 0)
      {
        if (memcmp(*((const void **)&v83 + 1), v21, __n))
          goto LABEL_59;
      }
      else if (HIBYTE(__n))
      {
        v22 = (unsigned __int8 *)&v83 + 8;
        while (*v22 == *v21)
        {
          ++v22;
          ++v21;
          if (!--v17)
            goto LABEL_32;
        }
LABEL_59:
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v57 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"override config language [", 26);
        if (__n >= 0)
          v30 = (char *)&v83 + 8;
        else
          v30 = (char *)*((_QWORD *)&v83 + 1);
        if (__n >= 0)
          v31 = HIBYTE(__n);
        else
          v31 = __n;
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"] is not the same as main config langauge [", 43);
        v34 = *(char *)(a1 + 279);
        if (v34 >= 0)
          v35 = a1 + 256;
        else
          v35 = *(_QWORD *)(a1 + 256);
        if (v34 >= 0)
          v36 = *(unsigned __int8 *)(a1 + 279);
        else
          v36 = *(_QWORD *)(a1 + 264);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"]", 1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v57);
      }
LABEL_32:
      quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)&v76);
      *(_OWORD *)v54 = 0u;
      v55 = 0u;
      v56 = 1065353216;
      v51 = 0u;
      v52 = 0u;
      v53 = 1065353216;
      quasar::SystemConfig::getLeafProperties((uint64_t)&__str, 1, (uint64_t)v54, &v51);
      quasar::SystemConfig::getModelVersion((quasar::SystemConfig *)&__str, (std::string *)&v57);
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const,0>((std::string *)&v76, (__int128 *)v74, &v57);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t)v54, (unsigned __int8 *)&v76, (uint64_t)&v76);
      if (SHIBYTE(v78) < 0)
        operator delete(*((void **)&v77 + 1));
      if (SBYTE7(v77) < 0)
        operator delete((void *)v76);
      if (SBYTE7(v58) < 0)
        operator delete((void *)v57);
      for (j = (_QWORD *)v55; j; j = (_QWORD *)*j)
        quasar::SystemConfig::verifyOverrideValue(a1, (uint64_t)(j + 2), (uint64_t)(j + 5), a5);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      for (k = (__int128 **)v52; k; k = (__int128 **)*k)
        quasar::SystemConfig::verifyOverrideValue(a1, (uint64_t)(k + 2), k + 5, (uint64_t *)&v48, a5);
      for (m = (__int128 *)v55; m; m = *(__int128 **)m)
      {
        std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)&v57, m + 1);
        quasar::PTree::PTree(&v76, (char *)&v58 + 8);
        quasar::SystemConfig::overrideValue(a1, (uint64_t)&v57, (quasar::PTree *)&v76);
        quasar::PTree::~PTree((quasar::PTree *)&v76);
        if (SHIBYTE(v59) < 0)
          operator delete(*((void **)&v58 + 1));
        if (SBYTE7(v58) < 0)
          operator delete((void *)v57);
      }
      v27 = v48;
      v26 = v49;
      while (v27 != v26)
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100]((std::string *)&v76, v27);
        quasar::SystemConfig::overrideValue(a1, (uint64_t)&v76, (quasar::PTree *)((char *)&v77 + 8));
        quasar::PTree::~PTree((quasar::PTree *)((char *)&v77 + 8));
        if (SBYTE7(v77) < 0)
          operator delete((void *)v76);
        v27 = (__int128 *)((char *)v27 + 88);
      }
      *(_QWORD *)&v76 = &v48;
      std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v51);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v54);
      if (v75 < 0)
        operator delete(v74[0]);
      quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&__str);
    }
    v12 = v46;
    if (*v47 != v47[1])
      quasar::SystemConfig::readModelInfo((quasar::SystemConfig *)a1);
  }
  return v12;
}

void sub_1ADAAFDE0()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADAAFBACLL);
}

void quasar::SystemConfig::simpleReadJson(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  quasar::filesystem *v8;
  uint64_t v9;
  quasar::SystemConfig::SystemConfigInfo *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *i;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type size;
  quasar::filesystem::Path *v28;
  _QWORD *v29;
  quasar::SystemConfig::SystemConfigInfoCache *v30;
  std::mutex *v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  void *v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *__p[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::string v69;
  char v70;
  std::string v71;

  if (*(_DWORD *)(a1 + 1536))
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "This method can be called only once throughout the lifetime of this object.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v8 = (quasar::filesystem *)quasar::filesystem::Path::Path(&v69, (__int128 *)a2);
  quasar::filesystem::system_complete(v8, v35);
  quasar::filesystem::Path::normalize((quasar::filesystem::Path *)v35, __p);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)__p, &v71);
  __p[0] = &unk_1E5D343A0;
  if (SHIBYTE(v53) < 0)
    operator delete(__p[1]);
  v35[0] = &unk_1E5D343A0;
  if (SHIBYTE(v36) < 0)
    operator delete(v35[1]);
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
  if (v70 < 0)
    operator delete((void *)v69.__r_.__value_.__l.__size_);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)__p);
  if (v9
    || (v11 = quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(v10),
        !quasar::SystemConfig::SystemConfigInfoCache::get(v11, (uint64_t)&v71, (uint64_t)__p)))
  {
    if (quasar::gLogLevel >= 4)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)v35 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Reading json file ", 18);
      v16 = *(char *)(a2 + 23);
      if (v16 >= 0)
        v17 = a2;
      else
        v17 = *(_QWORD *)a2;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a2 + 23);
      else
        v18 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
    }
    quasar::PTree::readJsonFromFile(a1 + 72, (__int128 *)a2);
    for (i = *(uint64_t **)(a3 + 16); i; i = (uint64_t *)*i)
    {
      if (*((char *)i + 63) < 0)
        std::string::__init_copy_ctor_external(&v69, (const std::string::value_type *)i[5], i[6]);
      else
        v69 = *(std::string *)(i + 5);
      if (quasar::gLogLevel >= 4)
      {
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        *(_OWORD *)v35 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Config override: ", 17);
        v21 = *((char *)i + 39);
        if (v21 >= 0)
          v22 = (uint64_t)(i + 2);
        else
          v22 = i[2];
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)i + 39);
        else
          v23 = i[3];
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"=", 1);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v69;
        else
          v26 = (std::string *)v69.__r_.__value_.__r.__words[0];
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        else
          size = v69.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, size);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
      }
      quasar::PTree::PTree(v35, &v69);
      quasar::PTree::putChild(a1 + 72, (uint64_t)(i + 2), (uint64_t)v35, 1);
      quasar::PTree::~PTree((quasar::PTree *)v35);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
    }
    quasar::SystemConfig::removeCommentNodes((quasar::SystemConfig *)a1);
    *(_DWORD *)(a1 + 1536) = 1;
    quasar::SystemConfig::readVersion((quasar::SystemConfig *)a1);
    quasar::SystemConfig::readModelInfo((quasar::SystemConfig *)a1);
    quasar::SystemConfig::readHybridClientConfigs((quasar::SystemConfig *)a1);
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
    v28 = (quasar::filesystem::Path *)quasar::filesystem::Path::Path(&v69, (__int128 *)&v71);
    quasar::filesystem::Path::parent_path(v28, v35);
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)&v35[1]);
    v35[0] = &unk_1E5D343A0;
    if (SHIBYTE(v36) < 0)
      operator delete(v35[1]);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
    if (v70 < 0)
      operator delete((void *)v69.__r_.__value_.__l.__size_);
    if (quasar::gLogLevel >= 4)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)v35 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Set json config file path to ", 29);
      quasar::filesystem::operator<<(v29, a1 + 40);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "");
    quasar::SystemConfig::absolutizeFilePathInPtree((unsigned __int8 *)a1, (quasar::PTree *)(a1 + 72), (uint64_t)v35);
    if (SBYTE7(v36) < 0)
    {
      operator delete(v35[0]);
      if (v9)
        goto LABEL_59;
    }
    else if (v9)
    {
      goto LABEL_59;
    }
    v31 = (std::mutex *)quasar::SystemConfig::SystemConfigInfoCache::SingletonInstance(v30);
    quasar::SystemConfig::SystemConfigInfoCache::putIfNotExist(v31, (std::string::size_type)&v71, a1 + 8);
    goto LABEL_59;
  }
  if (quasar::gLogLevel >= 4)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Using cache for json file ", 26);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v71;
    else
      v13 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v14 = v71.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
  }
  quasar::SystemConfig::SystemConfigInfo::operator=(a1 + 8, (__int128 *)__p);
  *(_DWORD *)(a1 + 1536) = 1;
LABEL_59:
  if (*(_DWORD *)(a1 + 728) && quasar::gLogLevel >= 4)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v35 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Config file version=", 20);
    quasar::SystemConfig::getModelVersion((quasar::SystemConfig *)a1, &v69);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v69;
    else
      v33 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v34 = v69.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v35);
  }
  if ((a4 & 1) == 0)
    quasar::SystemConfig::checkAllAbsolutePathsExist((quasar::SystemConfig *)a1);
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)__p);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
}

void quasar::SystemConfig::getModelVersion(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  int v2;
  char *v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (*((_DWORD *)this + 384) != 1)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Config file must be loaded before calling this method.");
    goto LABEL_14;
  }
  v2 = *((_DWORD *)this + 182);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      if ((*((char *)this + 159) & 0x80000000) == 0)
      {
        v3 = (char *)this + 136;
LABEL_8:
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
        a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        return;
      }
      v4 = (const std::string::value_type *)*((_QWORD *)this + 17);
      v5 = *((_QWORD *)this + 18);
      goto LABEL_11;
    }
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Config file does not have model-info node.");
LABEL_14:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v6);
  }
  if ((*((char *)this + 431) & 0x80000000) == 0)
  {
    v3 = (char *)this + 408;
    goto LABEL_8;
  }
  v4 = (const std::string::value_type *)*((_QWORD *)this + 51);
  v5 = *((_QWORD *)this + 52);
LABEL_11:
  std::string::__init_copy_ctor_external(a2, v4, v5);
}

uint64_t quasar::SystemConfig::getSpeechModelInfo(quasar::SystemConfig *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*((_DWORD *)this + 384) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 182) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have speech model-info node.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return (uint64_t)this + 136;
}

uint64_t quasar::SystemConfig::checkConfigFileVersion(quasar::SystemConfig *this)
{
  _QWORD *v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v2 = (_QWORD *)((char *)this + 32);
  v3 = *((_DWORD *)this + 8);
  v4 = quasar::gLogLevel;
  if (v3 == 15)
  {
    if (quasar::gLogLevel >= 4)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Reading version ", 16);
      v6 = (_QWORD *)quasar::operator<<((uint64_t)v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" as 15.0", 8);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v21);
      v4 = quasar::gLogLevel;
    }
    *v2 = 15;
  }
  if (v4 >= 5)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Version of currently loaded config file: ", 41);
    v8 = (_QWORD *)quasar::operator<<((uint64_t)v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" Supported config file version: ", 32);
    v10 = (_QWORD *)quasar::operator<<((uint64_t)v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (minimum supported version: ", 29);
    v12 = (_QWORD *)quasar::operator<<((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
    v3 = *(_DWORD *)v2;
  }
  if (v3 < 14)
  {
LABEL_8:
    if (quasar::gLogLevel >= 1)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Config file version ", 20);
      v14 = (_QWORD *)quasar::operator<<((uint64_t)v13);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" is lower than the minimum supported version ", 45);
      quasar::operator<<((uint64_t)v15);
LABEL_18:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v21);
      return 2;
    }
    return 2;
  }
  if (v3 == 14)
  {
    if (*((int *)this + 9) <= 1)
      goto LABEL_8;
    return 1;
  }
  if (v3 > 0x112)
    goto LABEL_16;
  if (v3 != 274)
    return 1;
  v16 = *((_DWORD *)this + 9);
  if (v16 >= 1)
  {
LABEL_16:
    if (quasar::gLogLevel >= 1)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Config file version ", 20);
      v18 = (_QWORD *)quasar::operator<<((uint64_t)v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" is higher than the supported version ", 38);
      quasar::operator<<((uint64_t)v19);
      goto LABEL_18;
    }
    return 2;
  }
  return v16 != 0;
}

void sub_1ADAB0B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

void quasar::SystemConfig::getLeafProperties(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  void *v7[2];
  char v8;
  void *__p;
  std::string v10;
  std::string v11;
  char v12;

  if (a2)
  {
    LODWORD(__p) = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
    else
      v10 = *(std::string *)(a1 + 80);
    memset(&v11, 0, sizeof(v11));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v11, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3));
    v12 = *(_BYTE *)(a1 + 128);
    std::string::basic_string[abi:ne180100]<0>(v7, "version-major");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0)
      operator delete(v7[0]);
    std::string::basic_string[abi:ne180100]<0>(v7, "version-minor");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0)
      operator delete(v7[0]);
    std::string::basic_string[abi:ne180100]<0>(v7, "model-info");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0)
      operator delete(v7[0]);
    std::string::basic_string[abi:ne180100]<0>(v7, "mt-model-info");
    quasar::PTree::erase((uint64_t)&__p, (unsigned __int8 *)v7);
    if (v8 < 0)
      operator delete(v7[0]);
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, (quasar::PTree *)&__p, (std::string::size_type)v7, a3, a4);
    if (v8 < 0)
      operator delete(v7[0]);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, (quasar::PTree *)(a1 + 72), (std::string::size_type)&__p, a3, a4);
    if (v10.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
  }
}

void sub_1ADAB0DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  _Unwind_Resume(a1);
}

void sub_1ADAB0E1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADAB0E14);
}

void quasar::SystemConfig::verifyOverrideValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  quasar::PTree *PtreeOptional;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (!a4)
  {
    if (quasar::SystemConfig::hasParam(a1, a2))
    {
      PtreeOptional = (quasar::PTree *)quasar::SystemConfig::getPtreeOptional(a1, a2);
      if ((quasar::PTree::isLeaf(PtreeOptional) & 1) != 0)
        goto LABEL_12;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"parameter [", 11);
      v28 = *(char *)(a2 + 23);
      if (v28 >= 0)
        v29 = a2;
      else
        v29 = *(_QWORD *)a2;
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(a2 + 23);
      else
        v30 = *(_QWORD *)(a2 + 8);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "] is not a leaf node.");
    }
    else
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"parameter [", 11);
      v23 = *(char *)(a2 + 23);
      if (v23 >= 0)
        v24 = a2;
      else
        v24 = *(_QWORD *)a2;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(a2 + 23);
      else
        v25 = *(_QWORD *)(a2 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "] is not in original config.");
    }
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  if (quasar::gLogLevel < 4)
    return;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"parameter [", 11);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] was not verified of its presence in the original config. Adding/Replacing it.", 79);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v32);
LABEL_12:
  if (quasar::gLogLevel >= 4)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Config override: ", 17);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"=", 1);
    v19 = *(char *)(a3 + 23);
    if (v19 >= 0)
      v20 = a3;
    else
      v20 = *(_QWORD *)a3;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v32);
  }
}

void sub_1ADAB10CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::verifyOverrideValue(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::string v24;
  void *v25;
  char v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (*a3 != a3[1])
  {
    if (a5)
    {
      if (quasar::gLogLevel >= 4)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"parameter [", 11);
        v9 = *(char *)(a2 + 23);
        if (v9 >= 0)
          v10 = a2;
        else
          v10 = *(_QWORD *)a2;
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(a2 + 23);
        else
          v11 = *(_QWORD *)(a2 + 8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] was not verified of its presence in the original config. Adding/Replacing it.", 79);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
    }
    else if (!quasar::SystemConfig::hasParam(a1, a2))
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"parameter [", 11);
      v20 = *(char *)(a2 + 23);
      if (v20 >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a2 + 23);
      else
        v22 = *(_QWORD *)(a2 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "] is not in original config.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3) < 2)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(&v24, (__int128 *)a2, *a3);
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string,std::string,0>((uint64_t)__p, (__int128 *)&v24);
      v15 = a4[1];
      if (v15 >= a4[2])
      {
        v16 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(a4, (__int128 *)__p);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](a4[1], (__int128 *)__p);
        v16 = v15 + 88;
        a4[1] = v15 + 88;
      }
      a4[1] = v16;
      quasar::PTree::~PTree((quasar::PTree *)((char *)&v28 + 8));
      if (SBYTE7(v28) < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }
    else
    {
      quasar::PTree::PTree((quasar::PTree *)&v24);
      v14 = *a3;
      v13 = a3[1];
      while (v14 != v13)
      {
        quasar::PTree::PTree(__p, v14);
        quasar::PTree::addChild((quasar::PTree *)&v24, (const quasar::PTree *)__p);
        quasar::PTree::~PTree((quasar::PTree *)__p);
        v14 = (__int128 *)((char *)v14 + 24);
      }
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree&,0>((std::string *)__p, (__int128 *)a2, (uint64_t)&v24);
      v17 = a4[1];
      if (v17 >= a4[2])
      {
        v18 = std::vector<std::pair<std::string,quasar::PTree>>::__push_back_slow_path<std::pair<std::string,quasar::PTree>>(a4, (__int128 *)__p);
      }
      else
      {
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](a4[1], (__int128 *)__p);
        v18 = v17 + 88;
        a4[1] = v17 + 88;
      }
      a4[1] = v18;
      quasar::PTree::~PTree((quasar::PTree *)((char *)&v28 + 8));
      if (SBYTE7(v28) < 0)
        operator delete(__p[0]);
      quasar::PTree::~PTree((quasar::PTree *)&v24);
    }
  }
}

void quasar::SystemConfig::readModelInfo(quasar::SystemConfig *this)
{
  _BOOL4 v2;
  uint64_t PtreeOptional;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(__p, "model-info");
  if (quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "mt-model-info");
    v2 = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)v23) != 0;
    if (v24 < 0)
      operator delete(v23[0]);
  }
  else
  {
    v2 = 0;
  }
  if (SBYTE7(v7) < 0)
    operator delete(__p[0]);
  if (v2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Only one of model-info and mt-model-info can exist in the config");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  v4 = PtreeOptional;
  if (SBYTE7(v7) < 0)
  {
    operator delete(__p[0]);
    if (v4)
      goto LABEL_10;
  }
  else if (PtreeOptional)
  {
LABEL_10:
    quasar::SystemConfig::readSpeechModelInfo(this);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info");
  v5 = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  if (SBYTE7(v7) < 0)
    operator delete(__p[0]);
  if (v5)
    quasar::SystemConfig::readTranslationModelInfo(this);
}

uint64_t quasar::SystemConfig::SystemConfigInfo::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)((char *)a2 + 40));
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)a2 + 3);
  if ((__int128 *)a1 != a2)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 96, *((std::string **)a2 + 12), *((std::string **)a2 + 13), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  quasar::SpeechModelInfo::operator=(a1 + 128, a2 + 8);
  quasar::TranslationModelInfo::operator=(a1 + 400, a2 + 25);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__move_assign(a1 + 672, (_QWORD *)a2 + 84);
  std::__tree<std::string>::__move_assign(a1 + 696, (_QWORD *)a2 + 87);
  *(_DWORD *)(a1 + 720) = *((_DWORD *)a2 + 180);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 728, (uint64_t *)a2 + 91);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 768, (uint64_t *)a2 + 96);
  return a1;
}

void quasar::SystemConfig::readVersion(quasar::SystemConfig *this)
{
  _BOOL4 hasParam;
  unsigned int v3;
  void *__p[2];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "version-major");
  if (quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "version-minor");
    hasParam = quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)&v21);
    if (v22 < 0)
      operator delete((void *)v21);
  }
  else
  {
    hasParam = 0;
  }
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  if (!hasParam)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file version is missing. ");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "version-major");
  v3 = quasar::PTree::getInt<int>((uint64_t)this + 72, (__int128 *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v21, "version-minor");
  *((_QWORD *)this + 4) = v3 | (unint64_t)(quasar::PTree::getInt<int>((uint64_t)this + 72, &v21) << 32);
  if (v22 < 0)
    operator delete((void *)v21);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
}

void sub_1ADAB182C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 33) < 0)
    operator delete(*(void **)(v14 - 56));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::readHybridClientConfigs(quasar::SystemConfig *this)
{
  _BOOL4 hasParam;
  _BOOL4 v3;
  uint64_t ChildOptional;
  quasar::PTree *v5;
  const std::string *v6;
  uint64_t v7;
  const std::string *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  double Double;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  quasar::PTree *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  int v22;
  __int128 v23;
  std::string __p;
  double v25;
  std::string v26;
  std::string v27;

  std::string::basic_string[abi:ne180100]<0>(&__p, "hybrid-client-configs");
  hasParam = quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)&__p);
  v3 = hasParam;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v3)
      goto LABEL_27;
  }
  else if (!hasParam)
  {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hybrid-client-configs");
  quasar::SystemConfig::enforceMinVersion((uint64_t)this, 56, 0, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hybrid-client-configs.hybrid-ep-thresholds");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)this + 72, (uint64_t)&__p);
  v5 = (quasar::PTree *)ChildOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v5)
      goto LABEL_27;
  }
  else if (!ChildOptional)
  {
    goto LABEL_27;
  }
  v6 = (const std::string *)quasar::PTree::begin(v5);
  v7 = quasar::PTree::end(v5);
  if (v6 != (const std::string *)v7)
  {
    v8 = (const std::string *)v7;
    do
    {
      v9 = std::stoi(v6, 0, 10);
      *(_OWORD *)&v27.__r_.__value_.__r.__words[1] = 0uLL;
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27.__r_.__value_.__l.__size_;
      v10 = quasar::PTree::begin((quasar::PTree *)&v6[1]);
      v11 = quasar::PTree::end((quasar::PTree *)&v6[1]);
      while (v10 != v11)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          v12 = *(_OWORD *)v10;
          v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
        }
        Double = quasar::PTree::getDouble((quasar::PTree *)(v10 + 24));
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
        else
          __p = v26;
        v25 = Double;
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string,double>>((uint64_t **)&v27, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        v10 += 88;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = v9;
      std::map<std::string,double>::map[abi:ne180100]((uint64_t *)&__p.__r_.__value_.__l.__size_, (const void ***)&v27);
      std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_unique_key_args<int,std::pair<int,std::map<std::string,double>>>((uint64_t)this + 680, (int *)&__p, (uint64_t)&__p);
      std::__tree<std::string>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (char *)__p.__r_.__value_.__r.__words[2]);
      std::__tree<std::string>::destroy((uint64_t)&v27, (char *)v27.__r_.__value_.__l.__size_);
      v6 = (const std::string *)((char *)v6 + 88);
    }
    while (v6 != v8);
  }
LABEL_27:
  std::string::basic_string[abi:ne180100]<0>(&__p, "hybrid-client-configs");
  v14 = quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)&__p);
  v15 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v15)
      return;
  }
  else if (!v14)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hybrid-client-configs.hybrid-ep-extra-delay-frequency");
  v16 = quasar::PTree::getChildOptional((uint64_t)this + 72, (uint64_t)&__p);
  v17 = (quasar::PTree *)v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v17)
      return;
  }
  else if (!v16)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "hybrid-client-configs.hybrid-ep-extra-delay-frequency");
  quasar::SystemConfig::enforceMinVersion((uint64_t)this, 92, 0, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = quasar::PTree::begin(v17);
  v19 = quasar::PTree::end(v17);
  if (v18 != v19)
  {
    v20 = v19;
    v21 = (uint64_t **)((char *)this + 704);
    do
    {
      v22 = quasar::PTree::getInt<int>(v18 + 24);
      if (*(char *)(v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
      }
      else
      {
        v23 = *(_OWORD *)v18;
        v27.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v23;
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      else
        __p = v27;
      LODWORD(v25) = v22;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(v21, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v18 += 88;
    }
    while (v18 != v20);
  }
}

void sub_1ADAB1C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::absolutizeFilePathInPtree(unsigned __int8 *a1, quasar::PTree *a2, uint64_t a3)
{
  uint64_t String;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  size_t v11;
  std::string::size_type size;
  std::string *v13;
  const void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  size_t v21;
  void **v22;
  const void *v23;
  std::string v24;
  void *__p[2];
  int64_t v26;
  std::string v27;

  if (quasar::PTree::isLeaf(a2))
  {
    String = quasar::PTree::getString(a2);
    quasar::SystemConfig::absolutizeFilePaths(a1, (uint64_t *)a3, String);
    return;
  }
  v7 = quasar::PTree::begin(a2);
  v8 = quasar::PTree::end(a2);
  if (v7 != v8)
  {
    v9 = v8;
    do
    {
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
      }
      else
      {
        v10 = *(_OWORD *)v7;
        v27.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
      }
      if (*(char *)(a3 + 23) >= 0)
        v11 = *(unsigned __int8 *)(a3 + 23);
      else
        v11 = *(_QWORD *)(a3 + 8);
      if (v11)
      {
        size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v27.__r_.__value_.__l.__size_;
        if (size)
        {
          std::string::basic_string[abi:ne180100]((uint64_t)&v24, v11 + 1);
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v24;
          else
            v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 23) >= 0)
            v14 = (const void *)a3;
          else
            v14 = *(const void **)a3;
          memmove(v13, v14, v11);
          *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v11) = 46;
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v27;
          else
            v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          else
            v16 = v27.__r_.__value_.__l.__size_;
          v17 = std::string::append(&v24, (const std::string::value_type *)v15, v16);
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v26 = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          quasar::SystemConfig::absolutizeFilePathInPtree(a1, v7 + 24, __p);
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
          if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_48;
          v19 = (void *)v24.__r_.__value_.__r.__words[0];
          goto LABEL_47;
        }
        if ((quasar::PTree::isLeaf((quasar::PTree *)(v7 + 24)) & 1) == 0)
        {
          if (*(char *)(a3 + 23) >= 0)
            v21 = *(unsigned __int8 *)(a3 + 23);
          else
            v21 = *(_QWORD *)(a3 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v21 + 2);
          if (v26 >= 0)
            v22 = __p;
          else
            v22 = (void **)__p[0];
          if (v21)
          {
            if (*(char *)(a3 + 23) >= 0)
              v23 = (const void *)a3;
            else
              v23 = *(const void **)a3;
            memmove(v22, v23, v21);
          }
          strcpy((char *)v22 + v21, "[]");
          quasar::SystemConfig::absolutizeFilePathInPtree(a1, v7 + 24, __p);
          if ((SHIBYTE(v26) & 0x80000000) == 0)
            goto LABEL_48;
          v19 = __p[0];
LABEL_47:
          operator delete(v19);
          goto LABEL_48;
        }
        v20 = quasar::PTree::getString((quasar::PTree *)(v7 + 24));
        quasar::SystemConfig::absolutizeFilePaths(a1, (uint64_t *)a3, v20);
      }
      else
      {
        quasar::SystemConfig::absolutizeFilePathInPtree(a1, v7 + 24, &v27);
      }
LABEL_48:
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v7 += 88;
    }
    while (v7 != v9);
  }
}

void sub_1ADAB1F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

BOOL quasar::SystemConfig::hasParam(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v4;
  void *__p[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config file must be loaded before calling this method (state = ", 63);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, ").");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  quasar::PTree::getStringOptional(a1 + 72, a2, (std::string *)__p);
  v2 = BYTE8(v6);
  if (BYTE8(v6) && SBYTE7(v6) < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

uint64_t quasar::SystemConfig::getMainSpeechModelInfo(quasar::SystemConfig *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*((_DWORD *)this + 384) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 182) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have speech model-info node.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return (uint64_t)this + 904;
}

uint64_t quasar::SystemConfig::getTranslationModelInfo(quasar::SystemConfig *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*((_DWORD *)this + 384) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 182) != 2)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have mt-model-info node.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return (uint64_t)this + 408;
}

uint64_t quasar::SystemConfig::getHybridClientConfigs(quasar::SystemConfig *this)
{
  _OWORD v2[17];

  if (*((_DWORD *)this + 384) != 1)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return (uint64_t)this + 680;
}

void quasar::SystemConfig::getMainModelVersion(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*((_DWORD *)this + 384) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_8;
  }
  if (!*((_DWORD *)this + 182))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have model-info node.");
LABEL_8:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  if (*((char *)this + 879) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 107), *((_QWORD *)this + 108));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 856);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 109);
  }
}

void quasar::SystemConfig::getLmeAssetPath(quasar::SystemConfig *this@<X0>, std::string *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*((_DWORD *)this + 384) != 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file must be loaded before calling this method.");
    goto LABEL_8;
  }
  if (!*((_DWORD *)this + 182))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Config file does not have model-info node.");
LABEL_8:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  if (*((char *)this + 903) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 110), *((_QWORD *)this + 111));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 55);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 112);
  }
}

uint64_t quasar::SystemConfig::getPtreeOptional(uint64_t a1, uint64_t a2)
{
  _OWORD v3[17];

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return quasar::PTree::getChildOptional(a1 + 72, a2);
}

void quasar::SystemConfig::readSpeechModelInfo(quasar::SystemConfig *this)
{
  const std::string *String;
  const std::string *v3;
  const std::string *v4;
  quasar::PTree *Child;
  uint64_t v6;
  uint64_t i;
  const void **v8;
  quasar::PTree *v9;
  uint64_t v10;
  uint64_t j;
  quasar::PTree *v12;
  uint64_t v13;
  uint64_t k;
  const void **v15;
  const std::string *v16;
  const std::string *v17;
  uint64_t ChildOptional;
  quasar::PTree *v19;
  uint64_t v20;
  uint64_t m;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type size;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  quasar::PTree *v37;
  uint64_t v38;
  uint64_t n;
  __int128 v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  uint64_t v45;
  quasar::PTree *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t Int;
  uint64_t v51;
  quasar::SystemConfig *v52;
  char *v53;
  std::string __str;
  std::string v55;
  void *__p[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  std::string v73[2];
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::string v83[2];
  std::string v84;
  uint64_t *v85;
  _QWORD v86[2];
  uint64_t *v87;
  _QWORD v88[2];
  uint64_t *v89;
  _QWORD v90[2];
  int v91;
  int v92;
  std::string *p_str;
  __int128 *v94[3];

  memset(v73, 0, sizeof(v73));
  v74 = &v75;
  v75 = 0;
  v78 = 0;
  v79 = 0;
  v76 = 0;
  v77 = &v78;
  v80 = &v81;
  v81 = 0;
  memset(&v84, 0, sizeof(v84));
  memset(v83, 0, sizeof(v83));
  v82 = 0;
  v86[0] = 0;
  v85 = v86;
  v88[1] = 0;
  v88[0] = 0;
  v86[1] = 0;
  v87 = v88;
  v90[1] = 0;
  v90[0] = 0;
  v89 = v90;
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.version");
  String = (const std::string *)quasar::PTree::getString((uint64_t)this + 72, (__int128 *)__p);
  std::string::operator=(v73, String);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  if (*((int *)this + 8) >= 253)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "model-info.acoustic-model-version");
    v3 = (const std::string *)quasar::PTree::getString((uint64_t)this + 72, (__int128 *)__p);
    std::string::operator=(&v73[1], v3);
    if (SBYTE7(v57) < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.language");
  v4 = (const std::string *)quasar::PTree::getString((uint64_t)this + 72, (__int128 *)__p);
  std::string::operator=(v83, v4);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  if (*((int *)this + 8) >= 91)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "model-info.os-types");
    Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this + 72, (__int128 *)__p);
    if (SBYTE7(v57) < 0)
      operator delete(__p[0]);
    v6 = quasar::PTree::begin(Child);
    for (i = quasar::PTree::end(Child); v6 != i; v6 += 88)
    {
      v8 = (const void **)quasar::PTree::getString((quasar::PTree *)(v6 + 24));
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v80, v8, (uint64_t)v8);
    }
    if (!v82)
    {
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Empty model-info.os-types", 25);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.sampling-rates");
  v9 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this + 72, (__int128 *)__p);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  v10 = quasar::PTree::begin(v9);
  for (j = quasar::PTree::end(v9); v10 != j; v10 += 88)
  {
    LODWORD(__p[0]) = quasar::PTree::getInt<int>(v10 + 24);
    std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v74, (int *)__p, __p);
  }
  if (!v76)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Empty model-info.sampling-rates", 31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.tasks");
  v12 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this + 72, (__int128 *)__p);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  v13 = quasar::PTree::begin(v12);
  for (k = quasar::PTree::end(v12); v13 != k; v13 += 88)
  {
    v15 = (const void **)quasar::PTree::getString((quasar::PTree *)(v13 + 24));
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v77, v15, (uint64_t)v15);
  }
  if (!v79)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Empty model-info.tasks", 22);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.phoneset-version");
  v16 = (const std::string *)quasar::PTree::getString((uint64_t)this + 72, (__int128 *)__p);
  std::string::operator=(&v83[1], v16);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.acoustic-profile-version");
  v17 = (const std::string *)quasar::PTree::getString((uint64_t)this + 72, (__int128 *)__p);
  std::string::operator=(&v84, v17);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create.template-map");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)this + 72, (uint64_t)__p);
  v19 = (quasar::PTree *)ChildOptional;
  v52 = this;
  v53 = (char *)this + 72;
  if (SBYTE7(v57) < 0)
  {
    operator delete(__p[0]);
    if (!v19)
      goto LABEL_61;
  }
  else if (!ChildOptional)
  {
    goto LABEL_61;
  }
  v20 = quasar::PTree::begin(v19);
  for (m = quasar::PTree::end(v19); v20 != m; v20 += 88)
  {
    if (*(char *)(v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v20;
      v55.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v22;
    }
    v23 = quasar::PTree::getString((quasar::PTree *)(v20 + 24));
    if (*(char *)(v23 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v23;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v24;
    }
    if (v86 != (_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v85, (const void **)&v55.__r_.__value_.__l.__data_)&& quasar::gLogLevel >= 5)
    {
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ACE category name ", 18);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v55;
      else
        v26 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" occurs twice in lme-create.template-map", 40);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v94[0] = (__int128 *)&v55;
    v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v85, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v94);
    std::string::operator=((std::string *)(v29 + 7), &__str);
    if (v88 == (_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v87, (const void **)&__str.__r_.__value_.__l.__data_))
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v57 = 0;
      p_str = &__str;
      v30 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v87, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_str);
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v30 + 7));
      *(_OWORD *)(v30 + 7) = *(_OWORD *)__p;
      v30[9] = v57;
      __p[1] = 0;
      *(_QWORD *)&v57 = 0;
      __p[0] = 0;
      v94[0] = (__int128 *)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    }
    v94[0] = (__int128 *)&__str;
    v31 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v87, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v94);
    v32 = v31;
    v33 = v31[8];
    if (v33 >= v31[9])
    {
      v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v31 + 7, (__int128 *)&v55);
    }
    else
    {
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v31[8], v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else
      {
        v34 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
        *(_QWORD *)(v33 + 16) = *((_QWORD *)&v55.__r_.__value_.__l + 2);
        *(_OWORD *)v33 = v34;
      }
      v35 = v33 + 24;
      v32[8] = v33 + 24;
    }
    v32[8] = v35;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
LABEL_61:
  std::string::basic_string[abi:ne180100]<0>(__p, "lme-create.name-enumerator-map");
  v36 = quasar::PTree::getChildOptional((uint64_t)v53, (uint64_t)__p);
  v37 = (quasar::PTree *)v36;
  if (SBYTE7(v57) < 0)
  {
    operator delete(__p[0]);
    if (!v37)
      goto LABEL_88;
  }
  else if (!v36)
  {
    goto LABEL_88;
  }
  v38 = quasar::PTree::begin(v37);
  for (n = quasar::PTree::end(v37); v38 != n; v38 += 88)
  {
    if (*(char *)(v38 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v38, *(_QWORD *)(v38 + 8));
    }
    else
    {
      v40 = *(_OWORD *)v38;
      v55.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v40;
    }
    if (v90 != (_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v89, (const void **)&v55.__r_.__value_.__l.__data_)&& quasar::gLogLevel >= 5)
    {
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Quasar template name ", 21);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v55;
      else
        v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        v43 = v55.__r_.__value_.__l.__size_;
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" occurs twice in lme-create.name-enumerator-map", 47);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v45 = quasar::PTree::getChild((uint64_t)v37, (__int128 *)&v55);
    std::string::basic_string[abi:ne180100]<0>(&__str, "type");
    v46 = (quasar::PTree *)quasar::PTree::getChild(v45, (__int128 *)&__str);
    v47 = quasar::PTree::getString(v46);
    if (*(char *)(v47 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v47, *(_QWORD *)(v47 + 8));
    }
    else
    {
      v48 = *(_OWORD *)v47;
      *(_QWORD *)&v57 = *(_QWORD *)(v47 + 16);
      *(_OWORD *)__p = v48;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    v49 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v89, (const void **)&v55.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
    std::string::operator=((std::string *)(v49 + 7), (const std::string *)__p);
    if (SBYTE7(v57) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p.model-version");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)v53, (uint64_t)__p);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  if ((Int & 0xFF00000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "g2p.model-version");
    quasar::SystemConfig::enforceMinVersion((uint64_t)this, 14, 2, (uint64_t)__p);
    if (SBYTE7(v57) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(Int) = 0;
  }
  v91 = Int;
  std::string::basic_string[abi:ne180100]<0>(__p, "model-info.hybrid-endpointer-version");
  v51 = quasar::PTree::getIntOptional<int>((uint64_t)v53, (uint64_t)__p);
  if (SBYTE7(v57) < 0)
    operator delete(__p[0]);
  if ((v51 & 0xFF00000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "model-info.hybrid-endpointer-version");
    quasar::SystemConfig::enforceMinVersion((uint64_t)v52, 56, 0, (uint64_t)__p);
    if (SBYTE7(v57) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v51) = 0;
  }
  v92 = v51;
  quasar::SpeechModelInfo::operator=((uint64_t)v52 + 136, (uint64_t)v73);
  *((_DWORD *)v52 + 182) = 1;
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)v73);
}

void sub_1ADAB3218()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADAB3220);
}

void quasar::SystemConfig::readTranslationModelInfo(quasar::SystemConfig *this)
{
  char *v2;
  const std::string *String;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;
  void **v7;
  std::string *p_str;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t ChildOptional;
  quasar::PTree *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  __int128 v18;
  quasar::PTree *v19;
  uint64_t ConfigFileVersion;
  uint64_t v21;
  quasar::PTree *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  std::string::size_type v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  void **v32;
  void **v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  std::string *v39;
  const void *v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  unsigned __int8 *v46;
  void **v47;
  void **v48;
  _QWORD *v49;
  _BYTE *v50;
  BOOL v51;
  quasar::PTree *Child;
  uint64_t v53;
  uint64_t k;
  const void **v55;
  std::vector<std::pair<std::string, std::string>> *v56;
  uint64_t v57;
  quasar::PTree *v58;
  unsigned __int8 *v59;
  uint64_t m;
  uint64_t v61;
  __int128 v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t *v68;
  unsigned __int8 *v69;
  uint64_t *v70;
  uint64_t PtreeOptional;
  uint64_t v72;
  quasar::PTree *v73;
  uint64_t n;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  void **v77;
  void **v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  std::string::size_type v83;
  uint64_t v84;
  int v85;
  unsigned __int8 *v86;
  std::string *p_s1;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  std::string *v104;
  std::string::size_type v105;
  _QWORD *v106;
  uint64_t v107;
  std::string::size_type v108;
  uint64_t v109;
  int v110;
  unsigned __int8 *v111;
  std::string *p_n;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  std::string *v119;
  std::string::size_type v120;
  _QWORD *v121;
  char *v122;
  char **v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _BOOL4 v138;
  std::string *v139;
  __int128 v140;
  _QWORD *v141;
  std::string *v142;
  std::string::size_type v143;
  _QWORD *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  std::string *v149;
  std::string::size_type v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t j;
  quasar::SystemConfig *v154;
  __int128 *v155[2];
  std::string __n;
  std::string __s1;
  void *__p[2];
  _QWORD v159[4];
  void *v160[2];
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  std::string v174;
  _BYTE v175[32];
  __int128 v176;
  std::string v177;
  std::string v178;
  std::string __str;
  std::string v180;
  char **v181;
  char *v182;
  uint64_t v183;
  _BYTE v184[56];
  int v185;
  _QWORD v186[4];
  int v187;
  _QWORD v188[4];
  int v189;
  _QWORD v190[4];
  int v191;
  _BYTE v192[32];
  int v193;

  memset(&v180, 0, sizeof(v180));
  v183 = 0;
  v182 = 0;
  v181 = &v182;
  memset(v184, 0, sizeof(v184));
  memset(v186, 0, sizeof(v186));
  v185 = 1065353216;
  v187 = 1065353216;
  memset(v188, 0, sizeof(v188));
  memset(v190, 0, sizeof(v190));
  v189 = 1065353216;
  v191 = 1065353216;
  memset(v192, 0, sizeof(v192));
  v193 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.version");
  v154 = this;
  v2 = (char *)this + 72;
  String = (const std::string *)quasar::PTree::getString((uint64_t)v2, (__int128 *)__p);
  std::string::operator=(&v180, String);
  if (SHIBYTE(v159[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v175, "mt-model-info.source-language");
  quasar::PTree::getStringOptional((uint64_t)v2, (uint64_t)v175, (std::string *)__p);
  if (LOBYTE(v159[1]))
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __str.__r_.__value_.__r.__words[2] = v159[0];
    __p[1] = 0;
    v159[0] = 0;
    __p[0] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    if (LOBYTE(v159[1]) && SHIBYTE(v159[0]) < 0)
      operator delete(__p[0]);
  }
  if ((v175[23] & 0x80000000) != 0)
    operator delete(*(void **)v175);
  std::string::basic_string[abi:ne180100]<0>(v175, "mt-model-info.target-language");
  quasar::PTree::getStringOptional((uint64_t)v2, (uint64_t)v175, (std::string *)__p);
  v152 = (uint64_t)v2;
  if (LOBYTE(v159[1]))
  {
    *(_OWORD *)&v178.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v178.__r_.__value_.__r.__words[2] = v159[0];
    __p[1] = 0;
    v159[0] = 0;
    __p[0] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v178, "");
    if (LOBYTE(v159[1]) && SHIBYTE(v159[0]) < 0)
      operator delete(__p[0]);
  }
  if ((v175[23] & 0x80000000) != 0)
    operator delete(*(void **)v175);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
    if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = v178.__r_.__value_.__l.__size_;
    if (v5)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&__str, (__int128 *)&v178);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)v184, (__int128 *)__p);
      if (SHIBYTE(v159[3]) < 0)
        operator delete((void *)v159[1]);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v6 = __str.__r_.__value_.__l.__size_;
      v7 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
      if (v159[0] < 0)
        v7 = (void **)__p[0];
      if (v6)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v7, p_str, v6);
      }
      *(_WORD *)((char *)v7 + v6) = 45;
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v178;
      else
        v9 = (std::string *)v178.__r_.__value_.__r.__words[0];
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
      else
        v10 = v178.__r_.__value_.__l.__size_;
      v11 = std::string::append((std::string *)__p, (const std::string::value_type *)v9, v10);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v177.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      v176 = 0u;
      memset(v175, 0, sizeof(v175));
      std::string::operator=((std::string *)v175, &__str);
      std::string::operator=((std::string *)&v175[24], &v178);
      std::pair<std::string,quasar::TranslationPairSetting>::pair[abi:ne180100]<std::string&,quasar::TranslationPairSetting&,0>((std::string *)__p, (__int128 *)&v177, (__int128 *)v175);
      std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::TranslationPairSetting>>((uint64_t)v186, (unsigned __int8 *)__p, (uint64_t)__p);
      if (SBYTE7(v161) < 0)
        operator delete(v160[0]);
      if (SHIBYTE(v159[3]) < 0)
        operator delete((void *)v159[1]);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v176) < 0)
        operator delete(*(void **)&v175[24]);
      if ((v175[23] & 0x80000000) != 0)
        operator delete(*(void **)v175);
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      goto LABEL_169;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.language-pairs");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)v2, (uint64_t)__p);
  v14 = (quasar::PTree *)ChildOptional;
  if (SHIBYTE(v159[0]) < 0)
  {
    operator delete(__p[0]);
    if (v14)
    {
LABEL_59:
      v15 = quasar::PTree::begin(v14);
      for (i = quasar::PTree::end(v14); v15 != i; v15 += 88)
      {
        v17 = quasar::PTree::getString((quasar::PTree *)(v15 + 24));
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v18 = *(_OWORD *)v17;
          v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
          *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v18;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "-");
        quasar::split((uint64_t)&v177, (uint64_t *)__p, 0, (uint64_t)&v174);
        if (SHIBYTE(v159[0]) < 0)
          operator delete(__p[0]);
        if (v174.__r_.__value_.__l.__size_ - v174.__r_.__value_.__r.__words[0] != 48)
        {
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          *(_OWORD *)v160 = 0u;
          v161 = 0u;
          memset(v159, 0, sizeof(v159));
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid language pair: ", 23);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v142 = &v177;
          else
            v142 = (std::string *)v177.__r_.__value_.__r.__words[0];
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v143 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          else
            v143 = v177.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)v142, v143);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)v174.__r_.__value_.__l.__data_, (__int128 *)(v174.__r_.__value_.__r.__words[0] + 24));
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)v184, (__int128 *)__p);
        if (SHIBYTE(v159[3]) < 0)
          operator delete((void *)v159[1]);
        if (SHIBYTE(v159[0]) < 0)
          operator delete(__p[0]);
        v176 = 0u;
        memset(v175, 0, sizeof(v175));
        std::string::operator=((std::string *)v175, (const std::string *)v174.__r_.__value_.__l.__data_);
        std::string::operator=((std::string *)&v175[24], (const std::string *)(v174.__r_.__value_.__r.__words[0] + 24));
        std::pair<std::string,quasar::TranslationPairSetting>::pair[abi:ne180100]<std::string&,quasar::TranslationPairSetting&,0>((std::string *)__p, (__int128 *)&v177, (__int128 *)v175);
        std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::TranslationPairSetting>>((uint64_t)v186, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SBYTE7(v161) < 0)
          operator delete(v160[0]);
        if (SHIBYTE(v159[3]) < 0)
          operator delete((void *)v159[1]);
        if (SHIBYTE(v159[0]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v176) < 0)
          operator delete(*(void **)&v175[24]);
        if ((v175[23] & 0x80000000) != 0)
          operator delete(*(void **)v175);
        __p[0] = &v174;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v177.__r_.__value_.__l.__data_);
      }
      goto LABEL_169;
    }
  }
  else if (ChildOptional)
  {
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.tasks");
  v19 = (quasar::PTree *)quasar::PTree::getChildOptional(v152, (uint64_t)__p);
  if (SHIBYTE(v159[0]) < 0)
    operator delete(__p[0]);
  if (!v19 || !quasar::PTree::isDict(v19))
  {
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    *(_OWORD *)v160 = 0u;
    v161 = 0u;
    memset(v159, 0, sizeof(v159));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"'mt-model-info.tasks' must be dictionary of task specific language pair lists, when no global language pair(s) provided", 119);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(v154);
  if ((int)ConfigFileVersion < 175 || ConfigFileVersion < 0 && (_DWORD)ConfigFileVersion == 175)
  {
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    *(_OWORD *)v160 = 0u;
    v161 = 0u;
    memset(v159, 0, sizeof(v159));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"task specific language pair lists require minimum config version ", 65);
    *(_QWORD *)v175 = 175;
    quasar::operator<<((uint64_t)v151);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *(_OWORD *)&v175[8] = 0uLL;
  *(_QWORD *)v175 = &v175[8];
  v21 = quasar::PTree::begin(v19);
  for (j = quasar::PTree::end(v19); v21 != j; v21 += 88)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v181, (const void **)v21, v21);
    std::string::basic_string[abi:ne180100]<0>(__p, "language-pairs");
    v22 = (quasar::PTree *)quasar::PTree::getChildOptional(v21 + 24, (uint64_t)__p);
    if (SHIBYTE(v159[0]) < 0)
      operator delete(__p[0]);
    if (!v22)
    {
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      *(_OWORD *)v160 = 0u;
      v161 = 0u;
      memset(v159, 0, sizeof(v159));
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"no 'language-pairs' section in task section '", 45);
      v145 = *(char *)(v21 + 23);
      if (v145 >= 0)
        v146 = v21;
      else
        v146 = *(_QWORD *)v21;
      if (v145 >= 0)
        v147 = *(unsigned __int8 *)(v21 + 23);
      else
        v147 = *(_QWORD *)(v21 + 8);
      v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, v146, v147);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"'", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v23 = quasar::PTree::begin(v22);
    v24 = quasar::PTree::end(v22);
    while (v23 != v24)
    {
      v25 = quasar::PTree::getString((quasar::PTree *)(v23 + 24));
      std::string::basic_string[abi:ne180100]<0>(__p, "-");
      quasar::split(v25, (uint64_t *)__p, 0, (uint64_t)&v177);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      if (v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0] != 48)
      {
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        *(_OWORD *)v160 = 0u;
        v161 = 0u;
        memset(v159, 0, sizeof(v159));
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid language pair: ", 23);
        v129 = quasar::PTree::getString((quasar::PTree *)(v23 + 24));
        v130 = *(char *)(v129 + 23);
        if (v130 >= 0)
          v131 = v129;
        else
          v131 = *(_QWORD *)v129;
        if (v130 >= 0)
          v132 = *(unsigned __int8 *)(v129 + 23);
        else
          v132 = *(_QWORD *)(v129 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, v131, v132);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v174.__r_.__value_.__r.__words[0] = v21;
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v184[24], (unsigned __int8 *)v21, (uint64_t)&std::piecewise_construct, (__int128 **)&v174);
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)v177.__r_.__value_.__l.__data_, (__int128 *)(v177.__r_.__value_.__r.__words[0] + 24));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(v26 + 40), (__int128 *)__p);
      if (SHIBYTE(v159[3]) < 0)
        operator delete((void *)v159[1]);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      v27 = v177.__r_.__value_.__r.__words[0];
      if (*(char *)(v177.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v177.__r_.__value_.__l.__data_, *(_QWORD *)(v177.__r_.__value_.__r.__words[0] + 8));
        v27 = v177.__r_.__value_.__r.__words[0];
      }
      else
      {
        v28 = *(_OWORD *)v177.__r_.__value_.__l.__data_;
        v159[0] = *(_QWORD *)(v177.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)__p = v28;
      }
      if (*(char *)(v27 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v159[1], *(const std::string::value_type **)(v27 + 24), *(_QWORD *)(v27 + 32));
      }
      else
      {
        v29 = *(_OWORD *)(v27 + 24);
        v159[3] = *(_QWORD *)(v27 + 40);
        *(_OWORD *)&v159[1] = v29;
      }
      v174.__r_.__value_.__r.__words[0] = v21;
      v30 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v188, (unsigned __int8 *)v21, (uint64_t)&std::piecewise_construct, (__int128 **)&v174);
      v174.__r_.__value_.__r.__words[0] = quasar::PTree::getString((quasar::PTree *)(v23 + 24));
      v31 = std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v30 + 40), (unsigned __int8 *)v174.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v174);
      v32 = (void **)(v31 + 40);
      if ((char)v31[63] < 0)
        operator delete(*v32);
      *((_QWORD *)v31 + 7) = v159[0];
      *(_OWORD *)v32 = *(_OWORD *)__p;
      HIBYTE(v159[0]) = 0;
      LOBYTE(__p[0]) = 0;
      v33 = (void **)(v31 + 64);
      if ((char)v31[87] < 0)
      {
        operator delete(*v33);
        v34 = SHIBYTE(v159[0]);
        *(_OWORD *)v33 = *(_OWORD *)&v159[1];
        *((_QWORD *)v31 + 10) = v159[3];
        HIBYTE(v159[3]) = 0;
        LOBYTE(v159[1]) = 0;
        if (v34 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v33 = *(_OWORD *)&v159[1];
        *((_QWORD *)v31 + 10) = v159[3];
      }
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)v177.__r_.__value_.__l.__data_, (__int128 *)(v177.__r_.__value_.__r.__words[0] + 24));
      std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>((uint64_t **)v175, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v159[3]) < 0)
        operator delete((void *)v159[1]);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      __p[0] = &v177;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v23 += 88;
    }
  }
  v35 = *(_BYTE **)v175;
  if (*(_BYTE **)v175 != &v175[8])
  {
    do
    {
      v36 = *(_QWORD *)&v184[8];
      if (*(_QWORD *)&v184[8] >= *(_QWORD *)&v184[16])
      {
        v37 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((uint64_t *)v184, (__int128 *)v35 + 2);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100](*(std::string **)&v184[8], (__int128 *)v35 + 2);
        v37 = v36 + 48;
      }
      *(_QWORD *)&v184[8] = v37;
      if ((char)v35[55] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v35 + 4), *((_QWORD *)v35 + 5));
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v35 + 2);
        v159[0] = *((_QWORD *)v35 + 6);
      }
      if ((char)v35[79] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v159[1], *((const std::string::value_type **)v35 + 7), *((_QWORD *)v35 + 8));
      }
      else
      {
        *(_OWORD *)&v159[1] = *(_OWORD *)(v35 + 56);
        v159[3] = *((_QWORD *)v35 + 9);
      }
      if ((char)v35[55] >= 0)
        v38 = v35[55];
      else
        v38 = *((_QWORD *)v35 + 5);
      std::string::basic_string[abi:ne180100]((uint64_t)&v174, v38 + 1);
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v174;
      else
        v39 = (std::string *)v174.__r_.__value_.__r.__words[0];
      if (v38)
      {
        if ((char)v35[55] >= 0)
          v40 = v35 + 32;
        else
          v40 = (const void *)*((_QWORD *)v35 + 4);
        memmove(v39, v40, v38);
      }
      *(_WORD *)((char *)&v39->__r_.__value_.__l.__data_ + v38) = 45;
      v41 = (char)v35[79];
      if (v41 >= 0)
        v42 = v35 + 56;
      else
        v42 = (const std::string::value_type *)*((_QWORD *)v35 + 7);
      if (v41 >= 0)
        v43 = v35[79];
      else
        v43 = *((_QWORD *)v35 + 8);
      v44 = std::string::append(&v174, v42, v43);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v177.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      v46 = std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v186, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&__s1);
      v47 = (void **)(v46 + 40);
      if ((char)v46[63] < 0)
        operator delete(*v47);
      *((_QWORD *)v46 + 7) = v159[0];
      *(_OWORD *)v47 = *(_OWORD *)__p;
      HIBYTE(v159[0]) = 0;
      LOBYTE(__p[0]) = 0;
      v48 = (void **)(v46 + 64);
      if ((char)v46[87] < 0)
        operator delete(*v48);
      *(_OWORD *)v48 = *(_OWORD *)&v159[1];
      *((_QWORD *)v46 + 10) = v159[3];
      HIBYTE(v159[3]) = 0;
      LOBYTE(v159[1]) = 0;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v174.__r_.__value_.__l.__data_);
      if (SHIBYTE(v159[3]) < 0)
        operator delete((void *)v159[1]);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      v49 = (_QWORD *)*((_QWORD *)v35 + 1);
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (_BYTE *)*((_QWORD *)v35 + 2);
          v51 = *(_QWORD *)v50 == (_QWORD)v35;
          v35 = v50;
        }
        while (!v51);
      }
      v35 = v50;
    }
    while (v50 != &v175[8]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v175, *(_QWORD **)&v175[8]);
LABEL_169:
  if (!v183)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.tasks");
    Child = (quasar::PTree *)quasar::PTree::getChild(v152, (__int128 *)__p);
    if (SHIBYTE(v159[0]) < 0)
      operator delete(__p[0]);
    v53 = quasar::PTree::begin(Child);
    for (k = quasar::PTree::end(Child); v53 != k; v53 += 88)
    {
      v55 = (const void **)quasar::PTree::getString((quasar::PTree *)(v53 + 24));
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v181, v55, (uint64_t)v55);
      *(_QWORD *)v175 = quasar::PTree::getString((quasar::PTree *)(v53 + 24));
      v56 = (std::vector<std::pair<std::string, std::string>> *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v184[24], *(unsigned __int8 **)v175, (uint64_t)&std::piecewise_construct, (__int128 **)v175)+ 40);
      if (v56 != (std::vector<std::pair<std::string, std::string>> *)v184)
        std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v56, *(std::string **)v184, *(__int128 **)&v184[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v184[8] - *(_QWORD *)v184) >> 4));
    }
  }
  if (*(_QWORD *)v184 == *(_QWORD *)&v184[8])
  {
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    *(_OWORD *)v160 = 0u;
    v161 = 0u;
    memset(v159, 0, sizeof(v159));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Non source and target language pair.", 36);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (!v183)
  {
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    *(_OWORD *)v160 = 0u;
    v161 = 0u;
    memset(v159, 0, sizeof(v159));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Empty mt-model-info.tasks", 25);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.task-alias");
  v57 = quasar::PTree::getChildOptional(v152, (uint64_t)__p);
  v58 = (quasar::PTree *)v57;
  if (SHIBYTE(v159[0]) < 0)
  {
    operator delete(__p[0]);
    if (!v58)
      goto LABEL_199;
  }
  else if (!v57)
  {
    goto LABEL_199;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.task-alias");
  quasar::SystemConfig::enforceMinVersion((uint64_t)v154, 225, 0, (uint64_t)__p);
  if (SHIBYTE(v159[0]) < 0)
    operator delete(__p[0]);
  v59 = (unsigned __int8 *)quasar::PTree::begin(v58);
  for (m = quasar::PTree::end(v58); v59 != (unsigned __int8 *)m; v59 += 88)
  {
    v61 = quasar::PTree::getString((quasar::PTree *)(v59 + 24));
    if (*(char *)(v61 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v61, *(_QWORD *)(v61 + 8));
    }
    else
    {
      v62 = *(_OWORD *)v61;
      v159[0] = *(_QWORD *)(v61 + 16);
      *(_OWORD *)__p = v62;
    }
    *(_QWORD *)v175 = v59;
    v63 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v190, v59, (uint64_t)&std::piecewise_construct, (__int128 **)v175);
    std::string::operator=((std::string *)(v63 + 40), (const std::string *)__p);
    if (&v182 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v181, (const void **)v59))std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v181, (const void **)v59, (uint64_t)v59);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v184[24], v59))
    {
      *(_QWORD *)v175 = __p;
      v64 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v184[24], (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)v175);
      *(_QWORD *)v175 = v59;
      v65 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v184[24], v59, (uint64_t)&std::piecewise_construct, (__int128 **)v175);
      if (v65 != v64)
        std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::vector<std::pair<std::string, std::string>> *)(v65 + 40), *((std::string **)v64 + 5), *((__int128 **)v64 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v64 + 6) - *((_QWORD *)v64 + 5)) >> 4));
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v188, v59))
    {
      *(_QWORD *)v175 = __p;
      v66 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v188, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)v175);
      *(_QWORD *)v175 = v59;
      v67 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v188, v59, (uint64_t)&std::piecewise_construct, (__int128 **)v175);
      if (v67 != v66)
      {
        *((_DWORD *)v67 + 18) = *((_DWORD *)v66 + 18);
        std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>((_QWORD *)v67 + 5, *((uint64_t **)v66 + 7), 0);
      }
    }
    if (SHIBYTE(v159[0]) < 0)
      operator delete(__p[0]);
  }
LABEL_199:
  v68 = (uint64_t *)v181;
  if (v181 != &v182)
  {
    while (1)
    {
      v69 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v190, (unsigned __int8 *)v68 + 32);
      v70 = (uint64_t *)(v69 + 40);
      if (!v69)
        v70 = v68 + 4;
      if (*((char *)v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v175, (const std::string::value_type *)*v70, v70[1]);
      }
      else
      {
        *(_OWORD *)v175 = *(_OWORD *)v70;
        *(_QWORD *)&v175[16] = v70[2];
      }
      std::operator+<char>();
      PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v154, (uint64_t)&v177);
      if (!PtreeOptional)
      {
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        *(_OWORD *)v160 = 0u;
        v161 = 0u;
        memset(v159, 0, sizeof(v159));
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"missing decoder config for task ", 32);
        v134 = *((char *)v68 + 55);
        if (v134 >= 0)
          v135 = (uint64_t)(v68 + 4);
        else
          v135 = v68[4];
        if (v134 >= 0)
          v136 = *((unsigned __int8 *)v68 + 55);
        else
          v136 = v68[5];
        v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, v135, v136);
        v138 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v175, (unsigned __int8 *)v68 + 32);
        if (v138)
        {
          std::operator+<char>();
          v139 = std::string::append(&__s1, ")");
          v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
          v174.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v140;
          v139->__r_.__value_.__l.__size_ = 0;
          v139->__r_.__value_.__r.__words[2] = 0;
          v139->__r_.__value_.__r.__words[0] = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v174, "");
        }
        if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v149 = &v174;
        else
          v149 = (std::string *)v174.__r_.__value_.__r.__words[0];
        if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v150 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
        else
          v150 = v174.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v149, v150);
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v174.__r_.__value_.__l.__data_);
        if (v138 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "language-pair-specific-settings");
      v72 = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
      v73 = (quasar::PTree *)v72;
      if ((SHIBYTE(v159[0]) & 0x80000000) == 0)
      {
        if (v72)
          break;
        goto LABEL_313;
      }
      operator delete(__p[0]);
      if (v73)
        break;
LABEL_313:
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
      if ((v175[23] & 0x80000000) != 0)
        operator delete(*(void **)v175);
      v122 = (char *)v68[1];
      if (v122)
      {
        do
        {
          v123 = (char **)v122;
          v122 = *(char **)v122;
        }
        while (v122);
      }
      else
      {
        do
        {
          v123 = (char **)v68[2];
          v51 = *v123 == (char *)v68;
          v68 = (uint64_t *)v123;
        }
        while (!v51);
      }
      v68 = (uint64_t *)v123;
      if (v123 == &v182)
        goto LABEL_323;
    }
    for (n = quasar::PTree::begin(v73); ; n += 88)
    {
      if (n == quasar::PTree::end(v73))
        goto LABEL_313;
      std::string::basic_string[abi:ne180100]<0>(__p, "-");
      quasar::split(n, (uint64_t *)__p, 0, (uint64_t)&v174);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      if (v174.__r_.__value_.__l.__size_ - v174.__r_.__value_.__r.__words[0] != 48)
      {
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        v169 = 0u;
        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        *(_OWORD *)v160 = 0u;
        v161 = 0u;
        memset(v159, 0, sizeof(v159));
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid language pair name: ", 28);
        v125 = *(char *)(n + 23);
        if (v125 >= 0)
          v126 = n;
        else
          v126 = *(_QWORD *)n;
        if (v125 >= 0)
          v127 = *(unsigned __int8 *)(n + 23);
        else
          v127 = *(_QWORD *)(n + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, v126, v127);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      memset(&__s1, 0, sizeof(__s1));
      memset(&__n, 0, sizeof(__n));
      quasar::PDecTranslator::getLanguageMapping((uint64_t)v154, (uint64_t)v175, (uint64_t)v174.__r_.__value_.__l.__data_, v174.__r_.__value_.__r.__words[0] + 24, (std::string *)__p);
      v155[0] = (__int128 *)&__s1;
      v155[1] = (__int128 *)&__n;
      std::tuple<std::string &,std::string &>::operator=[abi:ne180100]<std::string,std::string,0>(v155, (__int128 *)__p);
      if (SHIBYTE(v159[3]) < 0)
        operator delete((void *)v159[1]);
      if (SHIBYTE(v159[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
        v159[0] = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
      }
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)&v159[1], __n.__r_.__value_.__l.__data_, __n.__r_.__value_.__l.__size_);
      else
        *(std::string *)&v159[1] = __n;
      v155[0] = (__int128 *)(v68 + 4);
      v75 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v188, (unsigned __int8 *)v68 + 32, (uint64_t)&std::piecewise_construct, v155);
      v155[0] = (__int128 *)n;
      v76 = std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v75 + 40), (unsigned __int8 *)n, (uint64_t)&std::piecewise_construct, v155);
      v77 = (void **)(v76 + 40);
      if ((char)v76[63] < 0)
        operator delete(*v77);
      *((_QWORD *)v76 + 7) = v159[0];
      *(_OWORD *)v77 = *(_OWORD *)__p;
      HIBYTE(v159[0]) = 0;
      LOBYTE(__p[0]) = 0;
      v78 = (void **)(v76 + 64);
      if ((char)v76[87] < 0)
      {
        operator delete(*v78);
        v79 = SHIBYTE(v159[0]);
        *(_OWORD *)v78 = *(_OWORD *)&v159[1];
        *((_QWORD *)v76 + 10) = v159[3];
        HIBYTE(v159[3]) = 0;
        LOBYTE(v159[1]) = 0;
        if (v79 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v78 = *(_OWORD *)&v159[1];
        *((_QWORD *)v76 + 10) = v159[3];
      }
      v80 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v186, (unsigned __int8 *)n);
      v81 = v80;
      if (!v80)
      {
        if (quasar::gLogLevel >= 2)
        {
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          *(_OWORD *)v160 = 0u;
          v161 = 0u;
          memset(v159, 0, sizeof(v159));
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"missing tokenizer language specific setting: '", 46);
          v89 = *(char *)(n + 23);
          if (v89 >= 0)
            v90 = n;
          else
            v90 = *(_QWORD *)n;
          if (v89 >= 0)
            v91 = *(unsigned __int8 *)(n + 23);
          else
            v91 = *(_QWORD *)(n + 8);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"' for task: '", 13);
          v94 = *((char *)v68 + 55);
          if (v94 >= 0)
            v95 = (uint64_t)(v68 + 4);
          else
            v95 = v68[4];
          if (v94 >= 0)
            v96 = *((unsigned __int8 *)v68 + 55);
          else
            v96 = v68[5];
          v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, v95, v96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"'", 1);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        goto LABEL_308;
      }
      v82 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v83 = __s1.__r_.__value_.__l.__size_;
      if (v83)
      {
        v84 = v80[63];
        v85 = (char)v84;
        if ((v84 & 0x80u) != 0)
          v84 = *((_QWORD *)v80 + 6);
        if (v83 == v84)
        {
          if (v85 >= 0)
            v86 = v80 + 40;
          else
            v86 = (unsigned __int8 *)*((_QWORD *)v80 + 5);
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__s1.__r_.__value_.__l.__data_, v86, __s1.__r_.__value_.__l.__size_))
              goto LABEL_277;
          }
          else
          {
            if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              goto LABEL_277;
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *v86)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v86;
              if (!--v82)
                goto LABEL_277;
            }
          }
        }
        std::string::operator=((std::string *)(v81 + 40), &__s1);
        if (quasar::gLogLevel >= 4)
        {
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          *(_OWORD *)v160 = 0u;
          v161 = 0u;
          memset(v159, 0, sizeof(v159));
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"source language ", 16);
          v99 = *(char *)(v174.__r_.__value_.__r.__words[0] + 23);
          if (v99 >= 0)
            v100 = v174.__r_.__value_.__r.__words[0];
          else
            v100 = *(_QWORD *)v174.__r_.__value_.__l.__data_;
          if (v99 >= 0)
            v101 = *(unsigned __int8 *)(v174.__r_.__value_.__r.__words[0] + 23);
          else
            v101 = *(_QWORD *)(v174.__r_.__value_.__r.__words[0] + 8);
          v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, v100, v101);
          v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" using ", 7);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v104 = &__s1;
          else
            v104 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v105 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v105 = __s1.__r_.__value_.__l.__size_;
          v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v104, v105);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"' tokenizer.", 12);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
LABEL_277:
      v107 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
      if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
      else
        v108 = __n.__r_.__value_.__l.__size_;
      if (v108)
      {
        v109 = v81[87];
        v110 = (char)v109;
        if ((v109 & 0x80u) != 0)
          v109 = *((_QWORD *)v81 + 9);
        if (v108 == v109)
        {
          if (v110 >= 0)
            v111 = v81 + 64;
          else
            v111 = (unsigned __int8 *)*((_QWORD *)v81 + 8);
          if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__n.__r_.__value_.__l.__data_, v111, __n.__r_.__value_.__l.__size_))
              goto LABEL_308;
          }
          else
          {
            if (!*((_BYTE *)&__n.__r_.__value_.__s + 23))
              goto LABEL_308;
            p_n = &__n;
            while (p_n->__r_.__value_.__s.__data_[0] == *v111)
            {
              p_n = (std::string *)((char *)p_n + 1);
              ++v111;
              if (!--v107)
                goto LABEL_308;
            }
          }
        }
        std::string::operator=((std::string *)(v81 + 64), &__n);
        if (quasar::gLogLevel >= 4)
        {
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          v169 = 0u;
          v166 = 0u;
          v167 = 0u;
          v164 = 0u;
          v165 = 0u;
          v162 = 0u;
          v163 = 0u;
          *(_OWORD *)v160 = 0u;
          v161 = 0u;
          memset(v159, 0, sizeof(v159));
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"target language ", 16);
          v114 = *(char *)(v174.__r_.__value_.__r.__words[0] + 47);
          if (v114 >= 0)
            v115 = v174.__r_.__value_.__r.__words[0] + 24;
          else
            v115 = *(_QWORD *)(v174.__r_.__value_.__r.__words[0] + 24);
          if (v114 >= 0)
            v116 = *(unsigned __int8 *)(v174.__r_.__value_.__r.__words[0] + 47);
          else
            v116 = *(_QWORD *)(v174.__r_.__value_.__r.__words[0] + 32);
          v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, v115, v116);
          v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" using ", 7);
          if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = &__n;
          else
            v119 = (std::string *)__n.__r_.__value_.__r.__words[0];
          if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
          else
            v120 = __n.__r_.__value_.__l.__size_;
          v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)v119, v120);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"' tokenizer.", 12);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
LABEL_308:
      if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__n.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      __p[0] = &v174;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
LABEL_323:
  quasar::SystemConfig::readOverridesForTranslationModelInfo(v154, (quasar::TranslationModelInfo *)&v180);
  quasar::SystemConfig::validateOverridesInTranslationModelInfo(v154, (const quasar::TranslationModelInfo *)&v180);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  quasar::TranslationModelInfo::operator=((uint64_t)v154 + 408, (uint64_t)&v180);
  *((_DWORD *)v154 + 182) = 2;
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)v192);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v190);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table((uint64_t)v188);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)v186);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table((uint64_t)&v184[24]);
  __p[0] = v184;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::string>::destroy((uint64_t)&v181, v182);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
}

void sub_1ADAB51B0()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADAB51B8);
}

uint64_t quasar::SystemConfig::enforceMinVersion(uint64_t result, int a2, int a3, uint64_t a4)
{
  int v5;
  void *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _DWORD v21[2];

  v21[0] = a2;
  v21[1] = a3;
  v5 = *(_DWORD *)(result + 32);
  if (v5 < a2 || v5 == a2 && *(_DWORD *)(result + 36) < a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)v21, &v16);
    v7 = std::string::insert(&v16, 0, "Incompatible system config version. Needs to be >= ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v17, " to use ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = *(char *)(a4 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a4;
    else
      v12 = *(const std::string::value_type **)a4;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a4 + 23);
    else
      v13 = *(_QWORD *)(a4 + 8);
    v14 = std::string::append(&v18, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20 = v14->__r_.__value_.__r.__words[2];
    v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v19);
  }
  return result;
}

void sub_1ADAB52EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void quasar::SystemConfig::readOverridesForTranslationModelInfo(quasar::SystemConfig *this, quasar::TranslationModelInfo *a2)
{
  char *v4;
  uint64_t ChildOptional;
  quasar::PTree *v6;
  uint64_t ConfigFileVersion;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unsigned __int8 *v15;
  void *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *String;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v4 = (char *)this + 72;
  std::string::basic_string[abi:ne180100]<0>(__p, "mt-model-info.supported-overrides");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)v4, (uint64_t)__p);
  v6 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v30) < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(this);
  if ((int)ConfigFileVersion < 259 || ConfigFileVersion < 0 && (_DWORD)ConfigFileVersion == 259)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"task specific overrides require minimum config version ", 55);
    quasar::operator<<((uint64_t)v28);
    goto LABEL_23;
  }
  if (!quasar::PTree::isDict(v6) || quasar::PTree::empty(v6))
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "'mt-model-info.supported-overrides' must be dictionary of task specific overrides");
    goto LABEL_23;
  }
  v8 = quasar::PTree::begin(v6);
  v9 = quasar::PTree::end(v6);
  if (v8 != v9)
  {
    v10 = v9;
    v11 = (char *)a2 + 24;
    v12 = (char *)a2 + 32;
    v13 = (_QWORD *)((char *)a2 + 192);
    v14 = (char *)a2 + 232;
    while (1)
    {
      if (v12 == (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v11, (const void **)v8))
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        *(_OWORD *)__p = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "'mt-model-info.supported-overrides must contain only specified tasks in the 'mt-model-info.tasks'");
        goto LABEL_23;
      }
      if (!quasar::PTree::isList((quasar::PTree *)(v8 + 24)))
        break;
      v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)v8);
      if (v15)
        v16 = v15 + 40;
      else
        v16 = (void *)v8;
      __p[0] = v16;
      v17 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)v16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v18 = quasar::PTree::begin((quasar::PTree *)(v8 + 24));
      v19 = quasar::PTree::end((quasar::PTree *)(v8 + 24));
      if (v18 != v19)
      {
        v20 = v19;
        v21 = (uint64_t)(v17 + 40);
        do
        {
          String = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v18 + 24));
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v21, String, (uint64_t)String);
          v18 += 88;
        }
        while (v18 != v20);
      }
      v8 += 88;
      if (v8 == v10)
        return;
    }
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"'mt-model-info.supported-overrides.", 35);
    v24 = *(char *)(v8 + 23);
    if (v24 >= 0)
      v25 = v8;
    else
      v25 = *(_QWORD *)v8;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(v8 + 23);
    else
      v26 = *(_QWORD *)(v8 + 8);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "' must be a list of override names");
LABEL_23:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
}

void sub_1ADAB568C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
}

uint64_t quasar::SystemConfig::validateOverridesInTranslationModelInfo(quasar::SystemConfig *this, const quasar::TranslationModelInfo *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t PtreeOptional;
  uint64_t ChildOptional;
  quasar::PTree *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  quasar::PTree *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  int v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *__p[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  char v112;
  _BYTE v113[16];
  _QWORD *v114;

  v88 = (_QWORD *)((char *)a2 + 232);
  std::unordered_map<std::string,std::unordered_set<std::string>>::unordered_map((uint64_t)v113, (uint64_t)a2 + 232);
  v3 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  v86 = (char *)a2 + 32;
  if (v3 != (unsigned __int8 *)((char *)a2 + 32))
  {
    v87 = (_QWORD *)((char *)a2 + 192);
    while (1)
    {
      v4 = v3 + 32;
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v87, v3 + 32);
      if (v5)
        v4 = v5 + 40;
      v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v88, v4);
      if (!v6)
        goto LABEL_92;
      v7 = v6;
      std::operator+<char>();
      v89 = v3;
      PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)&v111);
      if (PtreeOptional)
        break;
LABEL_89:
      if (v112 < 0)
        operator delete(v111);
      v3 = v89;
      if (!PtreeOptional)
        return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)v113);
LABEL_92:
      v64 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = *(unsigned __int8 **)v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v19 = *(_QWORD *)v65 == (_QWORD)v3;
          v3 = v65;
        }
        while (!v19);
      }
      v3 = v65;
      if (v65 == (unsigned __int8 *)v86)
        return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)v113);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "block-definitions");
    ChildOptional = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
    v10 = (quasar::PTree *)ChildOptional;
    v91 = PtreeOptional;
    if ((SBYTE7(v95) & 0x80000000) == 0)
    {
      if (ChildOptional)
        goto LABEL_11;
LABEL_29:
      std::string::basic_string[abi:ne180100]<0>(__p, "language-pair-specific-settings");
      v23 = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
      v24 = (quasar::PTree *)v23;
      if (SBYTE7(v95) < 0)
      {
        operator delete(__p[0]);
        if (!v24)
          goto LABEL_69;
      }
      else if (!v23)
      {
LABEL_69:
        v47 = v114;
        if (v114)
        {
          v48 = quasar::gLogLevel;
          do
          {
            if (v47[8])
              v49 = v48 < 4;
            else
              v49 = 1;
            if (!v49)
            {
              v109 = 0u;
              v110 = 0u;
              v107 = 0u;
              v108 = 0u;
              v105 = 0u;
              v106 = 0u;
              v103 = 0u;
              v104 = 0u;
              v101 = 0u;
              v102 = 0u;
              v99 = 0u;
              v100 = 0u;
              v97 = 0u;
              v98 = 0u;
              v95 = 0u;
              v96 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found override config: ", 23);
              v51 = v47[7];
              v54 = *(_QWORD *)(v51 + 16);
              v52 = v51 + 16;
              v53 = v54;
              v55 = *(char *)(v52 + 23);
              if (v55 >= 0)
                v56 = v52;
              else
                v56 = v53;
              if (v55 >= 0)
                v57 = *(unsigned __int8 *)(v52 + 23);
              else
                v57 = *(_QWORD *)(v52 + 8);
              v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v56, v57);
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" for task ", 10);
              v60 = (char)v4[23];
              if (v60 >= 0)
                v61 = (uint64_t)v4;
              else
                v61 = *(_QWORD *)v4;
              if (v60 >= 0)
                v62 = v4[23];
              else
                v62 = *((_QWORD *)v4 + 1);
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" that doesn't have any specified configuration.", 47);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
              v48 = quasar::gLogLevel;
            }
            v47 = (_QWORD *)*v47;
          }
          while (v47);
        }
        goto LABEL_89;
      }
      v25 = quasar::PTree::begin(v24);
      v26 = quasar::PTree::end(v24);
      if (v25 == v26)
        goto LABEL_69;
      v27 = v7 + 40;
      v90 = v26;
      while (1)
      {
        v28 = quasar::PTree::begin((quasar::PTree *)(v25 + 24));
        v92 = v25;
        v29 = quasar::PTree::end((quasar::PTree *)(v25 + 24));
        if (v28 != v29)
          break;
LABEL_68:
        PtreeOptional = v91;
        v25 = v92 + 88;
        if (v92 + 88 == v90)
          goto LABEL_69;
      }
      v93 = v29;
      while (2)
      {
        v30 = *(char *)(v28 + 23);
        if (v30 < 0)
        {
          if (*(_QWORD *)(v28 + 8) != 5)
            goto LABEL_46;
          v31 = *(_QWORD *)v28;
        }
        else
        {
          v31 = v28;
          if (v30 != 5)
            goto LABEL_46;
        }
        v32 = *(_DWORD *)v31;
        v33 = *(unsigned __int8 *)(v31 + 4);
        if (v32 != 1885434471 || v33 != 104)
        {
LABEL_46:
          v28 += 88;
          if (v28 == v93)
            goto LABEL_68;
          continue;
        }
        break;
      }
      v35 = quasar::PTree::begin((quasar::PTree *)(v28 + 24));
      v36 = quasar::PTree::end((quasar::PTree *)(v28 + 24));
LABEL_49:
      if (v35 == v36)
        goto LABEL_46;
      v37 = quasar::PTree::begin((quasar::PTree *)(v35 + 24));
      v38 = quasar::PTree::end((quasar::PTree *)(v35 + 24));
      while (1)
      {
        if (v37 == v38)
        {
          v35 += 88;
          goto LABEL_49;
        }
        v39 = *(char *)(v37 + 23);
        if (v39 < 0)
        {
          if (*(_QWORD *)(v37 + 8) != 9)
            goto LABEL_66;
          v40 = *(_QWORD *)v37;
        }
        else
        {
          v40 = v37;
          if (v39 != 9)
            goto LABEL_66;
        }
        v41 = *(_QWORD *)v40;
        v42 = *(unsigned __int8 *)(v40 + 8);
        if (v41 == 0x656469727265766FLL && v42 == 115)
        {
          v44 = quasar::PTree::begin((quasar::PTree *)(v37 + 24));
          v45 = quasar::PTree::end((quasar::PTree *)(v37 + 24));
          while (v44 != v45)
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v27, (unsigned __int8 *)v44))
            {
              v109 = 0u;
              v110 = 0u;
              v107 = 0u;
              v108 = 0u;
              v105 = 0u;
              v106 = 0u;
              v103 = 0u;
              v104 = 0u;
              v101 = 0u;
              v102 = 0u;
              v99 = 0u;
              v100 = 0u;
              v97 = 0u;
              v98 = 0u;
              v95 = 0u;
              v96 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found override config: ", 23);
              v68 = *(char *)(v44 + 23);
              if (v68 >= 0)
                v69 = v44;
              else
                v69 = *(_QWORD *)v44;
              if (v68 >= 0)
                v70 = *(unsigned __int8 *)(v44 + 23);
              else
                v70 = *(_QWORD *)(v44 + 8);
              v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
              v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" in the language-pair-specific-settings, which is not specified as supported for task ", 86);
              v73 = (char)v4[23];
              if (v73 >= 0)
                v74 = (uint64_t)v4;
              else
                v74 = *(_QWORD *)v4;
              if (v73 >= 0)
                v75 = v4[23];
              else
                v75 = *((_QWORD *)v4 + 1);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
            __p[0] = v4;
            v46 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v113, v4, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
            std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>((_QWORD *)v46 + 5, (unsigned __int8 *)v44);
            v44 += 88;
          }
        }
LABEL_66:
        v37 += 88;
      }
    }
    operator delete(__p[0]);
    if (!v10)
      goto LABEL_29;
LABEL_11:
    v11 = quasar::PTree::begin(v10);
    v12 = quasar::PTree::end(v10);
    if (v11 == v12)
      goto LABEL_29;
LABEL_12:
    v13 = quasar::PTree::begin((quasar::PTree *)(v11 + 24));
    v14 = quasar::PTree::end((quasar::PTree *)(v11 + 24));
    while (1)
    {
      if (v13 == v14)
      {
        v11 += 88;
        if (v11 == v12)
          goto LABEL_29;
        goto LABEL_12;
      }
      v15 = *(char *)(v13 + 23);
      if (v15 < 0)
      {
        if (*(_QWORD *)(v13 + 8) != 9)
          goto LABEL_23;
        v16 = *(_QWORD *)v13;
      }
      else
      {
        v16 = v13;
        if (v15 != 9)
          goto LABEL_23;
      }
      v17 = *(_QWORD *)v16;
      v18 = *(unsigned __int8 *)(v16 + 8);
      v19 = v17 == 0x656469727265766FLL && v18 == 115;
      if (v19)
      {
        v20 = quasar::PTree::begin((quasar::PTree *)(v13 + 24));
        v21 = quasar::PTree::end((quasar::PTree *)(v13 + 24));
        while (v20 != v21)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)v7 + 5, (unsigned __int8 *)v20))
          {
            v109 = 0u;
            v110 = 0u;
            v107 = 0u;
            v108 = 0u;
            v105 = 0u;
            v106 = 0u;
            v103 = 0u;
            v104 = 0u;
            v101 = 0u;
            v102 = 0u;
            v99 = 0u;
            v100 = 0u;
            v97 = 0u;
            v98 = 0u;
            v95 = 0u;
            v96 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found override config: ", 23);
            v77 = *(char *)(v20 + 23);
            if (v77 >= 0)
              v78 = v20;
            else
              v78 = *(_QWORD *)v20;
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(v20 + 23);
            else
              v79 = *(_QWORD *)(v20 + 8);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v78, v79);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" in the block-definitions, which is not specified as supported for task ", 72);
            v82 = (char)v4[23];
            if (v82 >= 0)
              v83 = (uint64_t)v4;
            else
              v83 = *(_QWORD *)v4;
            if (v82 >= 0)
              v84 = v4[23];
            else
              v84 = *((_QWORD *)v4 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v83, v84);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          __p[0] = v4;
          v22 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v113, v4, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>((_QWORD *)v22 + 5, (unsigned __int8 *)v20);
          v20 += 88;
        }
      }
LABEL_23:
      v13 += 88;
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)v113);
}

void sub_1ADAB5E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(v1 - 136);
  _Unwind_Resume(a1);
}

_QWORD *std::tuple<std::string &,std::string &>::operator=[abi:ne180100]<std::string,std::string,0>(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v4 = *a1;
  if (*(char *)(*a1 + 23) < 0)
    operator delete(*(void **)v4);
  v5 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v6 = a1[1];
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  v7 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v6 = v7;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

uint64_t quasar::TranslationModelInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 != a2)
  {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 24), *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::vector<std::pair<std::string, std::string>> *)(a1 + 48), *(std::string **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4));
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *> *>>((_QWORD *)(a1 + 72), *(uint64_t **)(a2 + 88), 0);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>((_QWORD *)(a1 + 112), *(uint64_t **)(a2 + 128), 0);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *> *>>((_QWORD *)(a1 + 152), *(uint64_t **)(a2 + 168), 0);
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(a1 + 192), *(uint64_t **)(a2 + 208), 0);
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>((_QWORD *)(a1 + 232), *(uint64_t **)(a2 + 248), 0);
  }
  return a1;
}

void quasar::TranslationModelInfo::~TranslationModelInfo(char **this)
{
  void **v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)(this + 29));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 24));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table((uint64_t)(this + 19));
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)(this + 14));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table((uint64_t)(this + 9));
  v2 = (void **)(this + 6);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::SystemConfig::aceCatToQuasarTemplate(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  _OWORD v10[17];

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 328, (const void **)a2);
  if (a1 + 336 != v6)
  {
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    v8 = *(const std::string::value_type **)(v6 + 56);
    v9 = *(_QWORD *)(v6 + 64);
    goto LABEL_10;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(const std::string::value_type **)a2;
    v9 = *(_QWORD *)(a2 + 8);
LABEL_10:
    std::string::__init_copy_ctor_external(a3, v8, v9);
    return;
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
  a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
}

std::string *quasar::SystemConfig::quasarTemplateToAceCats@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  std::string *result;
  _OWORD v6[17];

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  result = (std::string *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 352, a2);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if ((std::string *)(a1 + 360) != result)
    return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, (__int128 *)result[2].__r_.__value_.__l.__size_, (__int128 *)result[2].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(result[2].__r_.__value_.__r.__words[2] - result[2].__r_.__value_.__l.__size_) >> 3));
  return result;
}

void quasar::SystemConfig::getFullListOfParams(quasar::SystemConfig *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  const char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  BOOL v26;
  quasar::SystemConfig *v27;
  std::string *v28;
  uint64_t (*v29)();
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  uint64_t (*v37)();
  std::string *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  quasar::SystemConfig *v48;
  quasar::SystemConfig *v49;
  quasar::SystemConfig *v50;
  std::string *v51;
  uint64_t (*v52)();
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  char *v59;
  uint64_t (*v60)();
  std::string *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  std::string *v66;
  std::string *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  quasar::SystemConfig *v71;
  quasar::SystemConfig *v72;
  quasar::SystemConfig *v73;
  std::string *v74;
  uint64_t (*v75)();
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  char *v82;
  uint64_t (*v83)();
  std::string *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  std::string *v89;
  std::string *v90;
  __int128 v91;
  uint64_t v92;
  int v93;
  quasar::SystemConfig *v94;
  quasar::SystemConfig *v95;
  quasar::SystemConfig *v96;
  std::string *v97;
  uint64_t (*v98)();
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  char *v105;
  uint64_t (*v106)();
  std::string *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  std::string *v112;
  std::string *v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  quasar::SystemConfig *v117;
  quasar::SystemConfig *v118;
  quasar::SystemConfig *v119;
  std::string *v120;
  uint64_t (*v121)();
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  __int128 v127;
  char *v128;
  uint64_t (*v129)();
  std::string *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  std::string *v135;
  std::string *v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  quasar::SystemConfig *v140;
  quasar::SystemConfig *v141;
  quasar::SystemConfig *v142;
  std::string *v143;
  std::string *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  __int128 v150;
  char *v151;
  std::string *v152;
  std::string *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  std::string *v158;
  std::string *v159;
  __int128 v160;
  uint64_t v161;
  int v162;
  quasar::SystemConfig *v163;
  quasar::SystemConfig *v164;
  const void **v165;
  unint64_t v166;
  uint64_t v167;
  const char *v169;
  void *__p[2];
  std::string::size_type v171;
  std::__split_buffer<std::string> __v;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[80];
  __int128 v180;
  std::locale v181[14];

  v181[11] = *(std::locale *)MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 384) != 1)
  {
    v180 = 0u;
    memset(v181, 0, 80);
    v178 = 0u;
    memset(v179, 0, sizeof(v179));
    v177 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v173, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v173);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (char *)*((_QWORD *)this + 147);
  v4 = (char *)this + 1184;
  if (v3 != (char *)this + 1184)
  {
    v5 = "%s : %s";
    v6 = "true";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v5);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)(v3 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v7 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      v8 = "false";
      if (**((_BYTE **)v3 + 7))
        v8 = v6;
      v169 = v8;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v169;
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,char const* const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,char const* const>;
      v9 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v7, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v9, (uint64_t)__p);
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      if (v10 >= v11)
      {
        v13 = v6;
        v14 = v5;
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a2) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)a2) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v18)
          v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v18);
        else
          v19 = 0;
        v20 = v19 + v15;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        v21 = *(_OWORD *)__p;
        v20->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v22 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v23 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v22;
        v5 = v14;
        v6 = v13;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v171;
        *(_OWORD *)v10 = v12;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v10 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v24 = (char *)*((_QWORD *)v3 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (char *)*((_QWORD *)v3 + 2);
          v26 = *(_QWORD *)v25 == (_QWORD)v3;
          v3 = v25;
        }
        while (!v26);
      }
      v3 = v25;
    }
    while (v25 != v4);
  }
  v27 = (quasar::SystemConfig *)*((_QWORD *)this + 150);
  if (v27 != (quasar::SystemConfig *)((char *)this + 1208))
  {
    v28 = (std::string *)boost::io::detail::call_put_head<char,std::char_traits<char>,int>;
    v29 = boost::io::detail::call_put_last<char,std::char_traits<char>,int>;
    v30 = "%s : %d";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v30);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v27 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v31 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v27 + 7);
      __v.__begin_ = v28;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v29;
      v32 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v31, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v32, (uint64_t)__p);
      v33 = *(_QWORD *)(a2 + 8);
      v34 = *(_QWORD *)(a2 + 16);
      if (v33 >= v34)
      {
        v36 = v30;
        v37 = v29;
        v38 = v28;
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *(_QWORD *)a2) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)a2) >> 3);
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0x555555555555555)
          v42 = 0xAAAAAAAAAAAAAAALL;
        else
          v42 = v40;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v42)
          v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v42);
        else
          v43 = 0;
        v44 = v43 + v39;
        __v.__first_ = v43;
        __v.__begin_ = v44;
        __v.__end_cap_.__value_ = &v43[v42];
        v45 = *(_OWORD *)__p;
        v44->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v44 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v46 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v47 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v46;
        v28 = v38;
        v29 = v37;
        v30 = v36;
        if (v47 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v35 = *(_OWORD *)__p;
        *(_QWORD *)(v33 + 16) = v171;
        *(_OWORD *)v33 = v35;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v33 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v48 = (quasar::SystemConfig *)*((_QWORD *)v27 + 1);
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = *(quasar::SystemConfig **)v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (quasar::SystemConfig *)*((_QWORD *)v27 + 2);
          v26 = *(_QWORD *)v49 == (_QWORD)v27;
          v27 = v49;
        }
        while (!v26);
      }
      v27 = v49;
    }
    while (v49 != (quasar::SystemConfig *)((char *)this + 1208));
  }
  v50 = (quasar::SystemConfig *)*((_QWORD *)this + 153);
  if (v50 != (quasar::SystemConfig *)((char *)this + 1232))
  {
    v51 = (std::string *)boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned int>;
    v52 = boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int>;
    v53 = "%s : %d";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v53);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v50 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v54 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v50 + 7);
      __v.__begin_ = v51;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v52;
      v55 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v54, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v55, (uint64_t)__p);
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(_QWORD *)(a2 + 16);
      if (v56 >= v57)
      {
        v59 = v53;
        v60 = v52;
        v61 = v51;
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *(_QWORD *)a2) >> 3);
        v63 = v62 + 1;
        if (v62 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *(_QWORD *)a2) >> 3);
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x555555555555555)
          v65 = 0xAAAAAAAAAAAAAAALL;
        else
          v65 = v63;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v65)
          v66 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v65);
        else
          v66 = 0;
        v67 = v66 + v62;
        __v.__first_ = v66;
        __v.__begin_ = v67;
        __v.__end_cap_.__value_ = &v66[v65];
        v68 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v67 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v69 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v70 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v69;
        v51 = v61;
        v52 = v60;
        v53 = v59;
        if (v70 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v58 = *(_OWORD *)__p;
        *(_QWORD *)(v56 + 16) = v171;
        *(_OWORD *)v56 = v58;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v56 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v71 = (quasar::SystemConfig *)*((_QWORD *)v50 + 1);
      if (v71)
      {
        do
        {
          v72 = v71;
          v71 = *(quasar::SystemConfig **)v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          v72 = (quasar::SystemConfig *)*((_QWORD *)v50 + 2);
          v26 = *(_QWORD *)v72 == (_QWORD)v50;
          v50 = v72;
        }
        while (!v26);
      }
      v50 = v72;
    }
    while (v72 != (quasar::SystemConfig *)((char *)this + 1232));
  }
  v73 = (quasar::SystemConfig *)*((_QWORD *)this + 156);
  if (v73 != (quasar::SystemConfig *)((char *)this + 1256))
  {
    v74 = (std::string *)boost::io::detail::call_put_head<char,std::char_traits<char>,long long>;
    v75 = boost::io::detail::call_put_last<char,std::char_traits<char>,long long>;
    v76 = "%s : %d";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v76);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v73 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v77 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v73 + 7);
      __v.__begin_ = v74;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v75;
      v78 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v77, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v78, (uint64_t)__p);
      v79 = *(_QWORD *)(a2 + 8);
      v80 = *(_QWORD *)(a2 + 16);
      if (v79 >= v80)
      {
        v82 = v76;
        v83 = v75;
        v84 = v74;
        v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *(_QWORD *)a2) >> 3);
        v86 = v85 + 1;
        if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *(_QWORD *)a2) >> 3);
        if (2 * v87 > v86)
          v86 = 2 * v87;
        if (v87 >= 0x555555555555555)
          v88 = 0xAAAAAAAAAAAAAAALL;
        else
          v88 = v86;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v88)
          v89 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v88);
        else
          v89 = 0;
        v90 = v89 + v85;
        __v.__first_ = v89;
        __v.__begin_ = v90;
        __v.__end_cap_.__value_ = &v89[v88];
        v91 = *(_OWORD *)__p;
        v90->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v91;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v90 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v92 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v93 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v92;
        v74 = v84;
        v75 = v83;
        v76 = v82;
        if (v93 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v81 = *(_OWORD *)__p;
        *(_QWORD *)(v79 + 16) = v171;
        *(_OWORD *)v79 = v81;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v79 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v94 = (quasar::SystemConfig *)*((_QWORD *)v73 + 1);
      if (v94)
      {
        do
        {
          v95 = v94;
          v94 = *(quasar::SystemConfig **)v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          v95 = (quasar::SystemConfig *)*((_QWORD *)v73 + 2);
          v26 = *(_QWORD *)v95 == (_QWORD)v73;
          v73 = v95;
        }
        while (!v26);
      }
      v73 = v95;
    }
    while (v95 != (quasar::SystemConfig *)((char *)this + 1256));
  }
  v96 = (quasar::SystemConfig *)*((_QWORD *)this + 159);
  if (v96 != (quasar::SystemConfig *)((char *)this + 1280))
  {
    v97 = (std::string *)boost::io::detail::call_put_head<char,std::char_traits<char>,float>;
    v98 = boost::io::detail::call_put_last<char,std::char_traits<char>,float>;
    v99 = "%s : %f";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v99);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v96 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v100 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v96 + 7);
      __v.__begin_ = v97;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v98;
      v101 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v100, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v101, (uint64_t)__p);
      v102 = *(_QWORD *)(a2 + 8);
      v103 = *(_QWORD *)(a2 + 16);
      if (v102 >= v103)
      {
        v105 = v99;
        v106 = v98;
        v107 = v97;
        v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - *(_QWORD *)a2) >> 3);
        v109 = v108 + 1;
        if (v108 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - *(_QWORD *)a2) >> 3);
        if (2 * v110 > v109)
          v109 = 2 * v110;
        if (v110 >= 0x555555555555555)
          v111 = 0xAAAAAAAAAAAAAAALL;
        else
          v111 = v109;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v111)
          v112 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v111);
        else
          v112 = 0;
        v113 = v112 + v108;
        __v.__first_ = v112;
        __v.__begin_ = v113;
        __v.__end_cap_.__value_ = &v112[v111];
        v114 = *(_OWORD *)__p;
        v113->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v113->__r_.__value_.__l.__data_ = v114;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v113 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v115 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v116 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v115;
        v97 = v107;
        v98 = v106;
        v99 = v105;
        if (v116 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v104 = *(_OWORD *)__p;
        *(_QWORD *)(v102 + 16) = v171;
        *(_OWORD *)v102 = v104;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v102 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v117 = (quasar::SystemConfig *)*((_QWORD *)v96 + 1);
      if (v117)
      {
        do
        {
          v118 = v117;
          v117 = *(quasar::SystemConfig **)v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          v118 = (quasar::SystemConfig *)*((_QWORD *)v96 + 2);
          v26 = *(_QWORD *)v118 == (_QWORD)v96;
          v96 = v118;
        }
        while (!v26);
      }
      v96 = v118;
    }
    while (v118 != (quasar::SystemConfig *)((char *)this + 1280));
  }
  v119 = (quasar::SystemConfig *)*((_QWORD *)this + 162);
  if (v119 != (quasar::SystemConfig *)((char *)this + 1304))
  {
    v120 = (std::string *)boost::io::detail::call_put_head<char,std::char_traits<char>,double>;
    v121 = boost::io::detail::call_put_last<char,std::char_traits<char>,double>;
    v122 = "%s : %f";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v122);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v119 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v123 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v119 + 7);
      __v.__begin_ = v120;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v121;
      v124 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v123, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v124, (uint64_t)__p);
      v125 = *(_QWORD *)(a2 + 8);
      v126 = *(_QWORD *)(a2 + 16);
      if (v125 >= v126)
      {
        v128 = v122;
        v129 = v121;
        v130 = v120;
        v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - *(_QWORD *)a2) >> 3);
        v132 = v131 + 1;
        if (v131 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - *(_QWORD *)a2) >> 3);
        if (2 * v133 > v132)
          v132 = 2 * v133;
        if (v133 >= 0x555555555555555)
          v134 = 0xAAAAAAAAAAAAAAALL;
        else
          v134 = v132;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v134)
          v135 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v134);
        else
          v135 = 0;
        v136 = v135 + v131;
        __v.__first_ = v135;
        __v.__begin_ = v136;
        __v.__end_cap_.__value_ = &v135[v134];
        v137 = *(_OWORD *)__p;
        v136->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v136->__r_.__value_.__l.__data_ = v137;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v136 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v138 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v139 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v138;
        v120 = v130;
        v121 = v129;
        v122 = v128;
        if (v139 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v127 = *(_OWORD *)__p;
        *(_QWORD *)(v125 + 16) = v171;
        *(_OWORD *)v125 = v127;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v125 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v140 = (quasar::SystemConfig *)*((_QWORD *)v119 + 1);
      if (v140)
      {
        do
        {
          v141 = v140;
          v140 = *(quasar::SystemConfig **)v140;
        }
        while (v140);
      }
      else
      {
        do
        {
          v141 = (quasar::SystemConfig *)*((_QWORD *)v119 + 2);
          v26 = *(_QWORD *)v141 == (_QWORD)v119;
          v119 = v141;
        }
        while (!v26);
      }
      v119 = v141;
    }
    while (v141 != (quasar::SystemConfig *)((char *)this + 1304));
  }
  v142 = (quasar::SystemConfig *)*((_QWORD *)this + 165);
  if (v142 != (quasar::SystemConfig *)((char *)this + 1328))
  {
    v143 = (std::string *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string>;
    v144 = (std::string *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string>;
    v145 = "%s : %s";
    do
    {
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t)&v173, v145);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)v142 + 32);
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string const>;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string const>;
      v146 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t)&v173, &__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v142 + 7);
      __v.__begin_ = v143;
      __v.__end_ = v144;
      v147 = boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(v146, &__v);
      boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(v147, (uint64_t)__p);
      v148 = *(_QWORD *)(a2 + 8);
      v149 = *(_QWORD *)(a2 + 16);
      if (v148 >= v149)
      {
        v151 = v145;
        v152 = v144;
        v153 = v143;
        v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *(_QWORD *)a2) >> 3);
        v155 = v154 + 1;
        if (v154 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - *(_QWORD *)a2) >> 3);
        if (2 * v156 > v155)
          v155 = 2 * v156;
        if (v156 >= 0x555555555555555)
          v157 = 0xAAAAAAAAAAAAAAALL;
        else
          v157 = v155;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v157)
          v158 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v157);
        else
          v158 = 0;
        v159 = v158 + v154;
        __v.__first_ = v158;
        __v.__begin_ = v159;
        __v.__end_cap_.__value_ = &v158[v157];
        v160 = *(_OWORD *)__p;
        v159->__r_.__value_.__r.__words[2] = v171;
        *(_OWORD *)&v159->__r_.__value_.__l.__data_ = v160;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        __v.__end_ = v159 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v161 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v162 = SHIBYTE(v171);
        *(_QWORD *)(a2 + 8) = v161;
        v143 = v153;
        v144 = v152;
        v145 = v151;
        if (v162 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v150 = *(_OWORD *)__p;
        *(_QWORD *)(v148 + 16) = v171;
        *(_OWORD *)v148 = v150;
        __p[1] = 0;
        v171 = 0;
        __p[0] = 0;
        *(_QWORD *)(a2 + 8) = v148 + 24;
      }
      if (BYTE8(v180))
      {
        std::locale::~locale(v181);
        BYTE8(v180) = 0;
      }
      boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v179);
      if (SBYTE7(v178) < 0)
        operator delete((void *)v177);
      if (*((_QWORD *)&v174 + 1))
        operator delete(*((void **)&v174 + 1));
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v173;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v163 = (quasar::SystemConfig *)*((_QWORD *)v142 + 1);
      if (v163)
      {
        do
        {
          v164 = v163;
          v163 = *(quasar::SystemConfig **)v163;
        }
        while (v163);
      }
      else
      {
        do
        {
          v164 = (quasar::SystemConfig *)*((_QWORD *)v142 + 2);
          v26 = *(_QWORD *)v164 == (_QWORD)v142;
          v142 = v164;
        }
        while (!v26);
      }
      v142 = v164;
    }
    while (v164 != (quasar::SystemConfig *)((char *)this + 1328));
  }
  v165 = *(const void ***)(a2 + 8);
  v166 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v165 - *(_QWORD *)a2) >> 3));
  if (v165 == *(const void ***)a2)
    v167 = 0;
  else
    v167 = v166;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(*(_QWORD *)a2, v165, (uint64_t)&__v, v167, 1);
}

void sub_1ADAB7254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::__split_buffer<std::wstring> *a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SystemConfig::getPtree(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _OWORD v4[17];

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  result = a1 + 72;
  if (v2)
    return quasar::PTree::getChild(result, (__int128 *)a2);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _OWORD v4[17];

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  result = a1 + 72;
  if (v2)
    return quasar::PTree::getChild(result, (__int128 *)a2);
  return result;
}

void quasar::SystemConfig::getAllLeafNodesFromPtreeIf(uint64_t a1, quasar::PTree *a2, std::string::size_type a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  size_t v16;
  std::string::size_type size;
  std::string *v18;
  const void *v19;
  std::string *p_str;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  void *v24;
  unsigned __int8 *v25;
  uint64_t String;
  __int128 v27;
  std::string::size_type v28;
  char v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::string::size_type v35;
  char v36;
  unsigned __int8 *v37;
  std::string v38;
  std::string __p;
  std::string __str;
  __int128 *v41;

  if (!quasar::PTree::isLeaf(a2))
  {
    v12 = quasar::PTree::begin(a2);
    v13 = quasar::PTree::end(a2);
    if (v12 == v13)
      return;
    v14 = v13;
    while (1)
    {
      if (*(char *)(v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
      }
      else
      {
        v15 = *(_OWORD *)v12;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
      }
      if (*(char *)(a3 + 23) >= 0)
        v16 = *(unsigned __int8 *)(a3 + 23);
      else
        v16 = *(_QWORD *)(a3 + 8);
      if (v16)
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __str.__r_.__value_.__l.__size_;
        if (size)
        {
          std::string::basic_string[abi:ne180100]((uint64_t)&v38, v16 + 1);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v38;
          else
            v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 23) >= 0)
            v19 = (const void *)a3;
          else
            v19 = *(const void **)a3;
          memmove(v18, v19, v16);
          *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v16) = 46;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v21 = __str.__r_.__value_.__l.__size_;
          v22 = std::string::append(&v38, (const std::string::value_type *)p_str, v21);
          v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, v12 + 24, &__p, a4, a5);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_51;
          v24 = (void *)v38.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a5, (unsigned __int8 *)a3))
          {
            memset(&__p, 0, sizeof(__p));
            v41 = (__int128 *)a3;
            v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v41);
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v25 + 40));
            *(std::string *)(v25 + 40) = __p;
            memset(&__p, 0, sizeof(__p));
            v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          }
          String = quasar::PTree::getString((quasar::PTree *)(v12 + 24));
          if (*(char *)(String + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
          }
          else
          {
            v27 = *(_OWORD *)String;
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
          }
          v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = __p.__r_.__value_.__l.__size_;
          if (v28)
          {
            v38.__r_.__value_.__r.__words[0] = a3;
            v30 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v38);
            v31 = v30;
            v32 = *((_QWORD *)v30 + 6);
            if (v32 >= *((_QWORD *)v30 + 7))
            {
              v34 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v30 + 5, (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)v30 + 6), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v32 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v32 = v33;
              }
              v34 = v32 + 24;
              *((_QWORD *)v31 + 6) = v32 + 24;
            }
            *((_QWORD *)v31 + 6) = v34;
            v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          if ((v29 & 0x80) == 0)
            goto LABEL_51;
          v24 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        operator delete(v24);
      }
      else
      {
        quasar::SystemConfig::getAllLeafNodesFromPtreeIf(a1, v12 + 24, &__str, a4, a5);
      }
LABEL_51:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v12 += 88;
      if (v12 == v14)
        return;
    }
  }
  v10 = quasar::PTree::getString(a2);
  if (*(char *)(v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    v11 = *(_OWORD *)v10;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
  }
  v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = __str.__r_.__value_.__l.__size_;
  if (v35)
  {
    __p.__r_.__value_.__r.__words[0] = a3;
    v37 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    std::string::operator=((std::string *)(v37 + 40), &__str);
    v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v36 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADAB7830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v28 + 48) = v29;
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::absolutizeFilePaths(unsigned __int8 *a1, uint64_t *a2, uint64_t a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  std::string *v11;
  std::string *i;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;

  std::string::basic_string[abi:ne180100]<0>(v22, "-file");
  if (quasar::endsWith(a2, (uint64_t *)v22))
  {
    v6 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "nt-fsts.\\NT-bizname");
    if (quasar::endsWith(a2, (uint64_t *)&v19))
    {
      v6 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "g2p-blacklist");
      if (quasar::endsWith(a2, (uint64_t *)v17))
      {
        v6 = 1;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-directory");
        v6 = quasar::endsWith(a2, (uint64_t *)__p);
        if (v16 < 0)
          operator delete(__p[0]);
      }
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if (SHIBYTE(v21) < 0)
      operator delete(v19);
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (v6)
      goto LABEL_15;
  }
  else if (v6)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v22, "geo-config");
    v7 = quasar::startsWith((unsigned __int8 *)a2, (unsigned __int8 *)v22);
    if (SHIBYTE(v23) < 0)
      operator delete(v22[0]);
    quasar::SystemConfig::makePathAbsoluteInternal(a1, a3, !v7);
    std::string::basic_string[abi:ne180100]<0>(v22, "-ark-file");
    v8 = quasar::endsWith(a2, (uint64_t *)v22);
    v9 = v8;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if (!v9)
        return;
    }
    else if (!v8)
    {
      return;
    }
    std::operator+<char>();
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = *(_OWORD *)v22;
    *(_QWORD *)(a3 + 16) = v23;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "-file-list");
  if (quasar::endsWith(a2, (uint64_t *)v22))
  {
    v10 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "rule-fst");
    if (quasar::endsWith(a2, (uint64_t *)&v19))
    {
      v10 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "emoji-keyword-remove-fst-1");
      v10 = quasar::endsWith(a2, (uint64_t *)v17);
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if (SHIBYTE(v21) < 0)
      operator delete(v19);
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v10)
      return;
  }
  else if (!v10)
  {
    return;
  }
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  kaldi::SplitStringToVector((const std::string *)a3, ",", 1, (uint64_t)v22);
  v11 = (std::string *)v22[0];
  for (i = (std::string *)v22[1]; v11 != i; ++v11)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    kaldi::SplitStringToVector(v11, ":", 1, (uint64_t)&v19);
    v13 = (unsigned __int8 *)v19;
    v14 = v20;
    while (v13 != v14)
    {
      if (!quasar::isPlaceholder(v13))
        quasar::SystemConfig::makePathAbsoluteInternal(a1, (uint64_t)v13, 1);
      kaldi::JoinVectorToString((uint64_t *)&v19, ":", 1, (__int128 *)v11);
      v13 += 24;
    }
    v17[0] = &v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  kaldi::JoinVectorToString((uint64_t *)v22, ",", 1, (__int128 *)a3);
  v19 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1ADAB7C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

BOOL quasar::isPlaceholder(unsigned __int8 *a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "\\");
  v2 = quasar::startsWith(a1, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1ADAB7D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

quasar::PTree *quasar::SystemConfig::readPtree(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  quasar::PTree *result;
  quasar::PTree *v9;
  uint64_t v10;
  uint64_t i;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t ConfigFileVersion;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t String;
  int v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  _BYTE *v38;
  const void *v39;
  _OWORD *v40;
  const void **v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  const void **v48;
  const void ***v49;
  BOOL v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void **v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void *__p[2];
  int64_t v76;
  _QWORD v77[4];
  int v78;
  _BYTE v79[32];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v80 = 0u;
    memset(v79, 0, sizeof(v79));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v79, "Config file must be loaded before calling this method.");
    goto LABEL_106;
  }
  result = (quasar::PTree *)quasar::PTree::getChildOptional(a1 + 72, a2);
  v9 = result;
  if (a3 && !result)
    return result;
  if (!result)
  {
    v93 = 0uLL;
    v94 = 0uLL;
    v91 = 0uLL;
    v92 = 0uLL;
    v89 = 0uLL;
    v90 = 0uLL;
    v87 = 0uLL;
    v88 = 0uLL;
    v85 = 0uLL;
    v86 = 0uLL;
    v83 = 0uLL;
    v84 = 0uLL;
    v81 = 0uLL;
    v82 = 0uLL;
    v80 = 0uLL;
    memset(v79, 0, sizeof(v79));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Could not find required name \"", 30);
    v71 = *(char *)(a2 + 23);
    if (v71 >= 0)
      v72 = a2;
    else
      v72 = *(_QWORD *)a2;
    if (v71 >= 0)
      v73 = *(unsigned __int8 *)(a2 + 23);
    else
      v73 = *(_QWORD *)(a2 + 8);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v74, "\"");
LABEL_106:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v79);
  }
  memset(v77, 0, sizeof(v77));
  v78 = 1065353216;
  v10 = quasar::PTree::begin(result);
  for (i = quasar::PTree::end(v9); v10 != i; v10 += 88)
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)v79, v12 + 1);
    if (v79[23] >= 0)
      v13 = v79;
    else
      v13 = *(_BYTE **)v79;
    if (v12)
    {
      if (*(char *)(a2 + 23) >= 0)
        v14 = (const void *)a2;
      else
        v14 = *(const void **)a2;
      memmove(v13, v14, v12);
    }
    *(_WORD *)&v13[v12] = 46;
    v15 = *(char *)(v10 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v10;
    else
      v16 = *(const std::string::value_type **)v10;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v10 + 23);
    else
      v17 = *(_QWORD *)(v10 + 8);
    v18 = std::string::append((std::string *)v79, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v76 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((v79[23] & 0x80000000) != 0)
      operator delete(*(void **)v79);
    if (a4 && quasar::PTree::isDict((quasar::PTree *)(v10 + 24)))
    {
      quasar::SystemConfig::readPtree(a1, __p, a3, 1);
    }
    else
    {
      v20 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1464, (const void **)__p);
      if (a1 + 1472 != v20)
      {
        ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
        v22 = *(_DWORD *)(v20 + 56);
        if (v22 > (int)ConfigFileVersion
          || v22 == (_DWORD)ConfigFileVersion && *(_DWORD *)(v20 + 60) > SHIDWORD(ConfigFileVersion))
        {
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v80 = 0u;
          memset(v79, 0, sizeof(v79));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Parameter \"", 11);
          if (v76 >= 0)
            v59 = __p;
          else
            v59 = (void **)__p[0];
          if (v76 >= 0)
            v60 = HIBYTE(v76);
          else
            v60 = (uint64_t)__p[1];
          v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"\" requires minimum version ", 27);
          v63 = (_QWORD *)quasar::operator<<((uint64_t)v62);
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" but config version is ", 23);
          quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
          quasar::operator<<((uint64_t)v64);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v79);
        }
      }
      v23 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1488, (const void **)__p);
      if (a1 + 1496 != v23)
      {
        v24 = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
        v25 = *(_DWORD *)(v23 + 56);
        if (v25 < (int)v24 || v25 == (_DWORD)v24 && *(_DWORD *)(v23 + 60) < SHIDWORD(v24))
        {
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v80 = 0u;
          memset(v79, 0, sizeof(v79));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Parameter \"", 11);
          if (v76 >= 0)
            v52 = __p;
          else
            v52 = (void **)__p[0];
          if (v76 >= 0)
            v53 = HIBYTE(v76);
          else
            v53 = (uint64_t)__p[1];
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\" requires maximum version ", 27);
          v56 = (_QWORD *)quasar::operator<<((uint64_t)v55);
          v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" but config version is ", 23);
          quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
          quasar::operator<<((uint64_t)v57);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v79);
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v77, (unsigned __int8 *)__p, (uint64_t)__p);
      v26 = quasar::SystemConfig::SetOption(a1, (const void **)__p, (quasar::PTree *)(v10 + 24));
      if (quasar::gLogLevel < 4)
        v27 = 1;
      else
        v27 = v26;
      if ((v27 & 1) == 0)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v80 = 0u;
        memset(v79, 0, sizeof(v79));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Ignoring unrecognized option ", 29);
        if (v76 >= 0)
          v29 = __p;
        else
          v29 = (void **)__p[0];
        if (v76 >= 0)
          v30 = HIBYTE(v76);
        else
          v30 = (uint64_t)__p[1];
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" : ", 3);
        String = quasar::PTree::getString((quasar::PTree *)(v10 + 24));
        v34 = *(char *)(String + 23);
        if (v34 >= 0)
          v35 = String;
        else
          v35 = *(_QWORD *)String;
        if (v34 >= 0)
          v36 = *(unsigned __int8 *)(String + 23);
        else
          v36 = *(_QWORD *)(String + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v35, v36);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v79);
      }
    }
    if (SHIBYTE(v76) < 0)
      operator delete(__p[0]);
  }
  if (*(char *)(a2 + 23) >= 0)
    v37 = *(unsigned __int8 *)(a2 + 23);
  else
    v37 = *(_QWORD *)(a2 + 8);
  v38 = v79;
  std::string::basic_string[abi:ne180100]((uint64_t)v79, v37 + 1);
  if (v79[23] < 0)
    v38 = *(_BYTE **)v79;
  if (v37)
  {
    if (*(char *)(a2 + 23) >= 0)
      v39 = (const void *)a2;
    else
      v39 = *(const void **)a2;
    memmove(v38, v39, v37);
  }
  *(_WORD *)&v38[v37] = 46;
  __p[0] = v79;
  v40 = std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)v79, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  if ((v79[23] & 0x80000000) != 0)
    operator delete(*(void **)v79);
  v41 = (const void **)*((_QWORD *)v40 + 7);
  if (v41 != (const void **)(v40 + 4))
  {
    do
    {
      v42 = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
      *(_QWORD *)v79 = v41 + 4;
      v43 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1464), v41 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v79);
      v44 = *((_DWORD *)v43 + 14);
      if (v44 <= (int)v42 && (v44 != (_DWORD)v42 || *((_DWORD *)v43 + 15) <= SHIDWORD(v42)))
      {
        v45 = quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)a1);
        *(_QWORD *)v79 = v41 + 4;
        v46 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1488), v41 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v79);
        v47 = *((_DWORD *)v46 + 14);
        if (v47 >= (int)v45
          && (v47 != (_DWORD)v45 || *((_DWORD *)v46 + 15) >= SHIDWORD(v45))
          && !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v77, (unsigned __int8 *)v41 + 32))
        {
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v80 = 0u;
          memset(v79, 0, sizeof(v79));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
          v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Required parameter \"", 20);
          v66 = *((char *)v41 + 55);
          if (v66 >= 0)
            v67 = (uint64_t)(v41 + 4);
          else
            v67 = (uint64_t)v41[4];
          if (v66 >= 0)
            v68 = *((unsigned __int8 *)v41 + 55);
          else
            v68 = (uint64_t)v41[5];
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v67, v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"\" not found", 11);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v79);
        }
      }
      v48 = (const void **)v41[1];
      if (v48)
      {
        do
        {
          v49 = (const void ***)v48;
          v48 = (const void **)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (const void ***)v41[2];
          v50 = *v49 == v41;
          v41 = (const void **)v49;
        }
        while (!v50);
      }
      v41 = (const void **)v49;
    }
    while (v49 != (const void ***)(v40 + 4));
  }
  return (quasar::PTree *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v77);
}

void sub_1ADAB8514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x1ADAB8534);
  JUMPOUT(0x1ADAB8540);
}

void sub_1ADAB853C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SystemConfig::SetOption(uint64_t a1, const void **a2, quasar::PTree *a3)
{
  uint64_t **v6;
  uint64_t String;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  float v24;
  const std::string *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  __int128 *v44;
  std::vector<std::pair<std::string, std::string>> *v45;
  __int128 *v46;
  uint64_t **v47;
  uint64_t *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  __int128 *v61;
  uint64_t *v62;
  std::string __p;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  const void **v86;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v69, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v69);
  }
  v6 = (uint64_t **)(a1 + 1176);
  if (a1 + 1184 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1176, a2))
  {
    String = quasar::PTree::getString(a3);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v8 = *(_OWORD *)String;
      v68.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v8;
    }
    v11 = quasar::SystemConfig::ToBool((uint64_t)&v68);
    *(_QWORD *)&v69 = a2;
    *(_BYTE *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7] = v11;
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    v12 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1208 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1200, a2))
  {
    v9 = quasar::PTree::getString(a3);
    if (*(char *)(v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v9;
      v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v10;
    }
    v15 = quasar::SystemConfig::ToInt((char *)&v67);
    *(_QWORD *)&v69 = a2;
    *(_DWORD *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1200), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7] = v15;
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    v12 = (void *)v67.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1232 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1224, a2))
  {
    v13 = quasar::PTree::getString(a3);
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v13;
      v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v14;
    }
    v18 = quasar::SystemConfig::ToUInt((char *)&v66);
    *(_QWORD *)&v69 = a2;
    *(_DWORD *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1224), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7] = v18;
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    v12 = (void *)v66.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1256 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1248, a2))
  {
    v16 = quasar::PTree::getString(a3);
    if (*(char *)(v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
    }
    else
    {
      v17 = *(_OWORD *)v16;
      v65.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v17;
    }
    v21 = quasar::SystemConfig::ToInt64((char *)&v65);
    *(_QWORD *)&v69 = a2;
    *(_QWORD *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1248), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7] = v21;
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    v12 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1280 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1272, a2))
  {
    v19 = quasar::PTree::getString(a3);
    if (*(char *)(v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
    }
    else
    {
      v20 = *(_OWORD *)v19;
      v64.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v20;
    }
    v24 = quasar::SystemConfig::ToFloat((char *)&v64);
    *(_QWORD *)&v69 = a2;
    *(float *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1272), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7] = v24;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    v12 = (void *)v64.__r_.__value_.__r.__words[0];
    goto LABEL_40;
  }
  if (a1 + 1304 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1296, a2))
  {
    v22 = quasar::PTree::getString(a3);
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
    }
    else
    {
      v23 = *(_OWORD *)v22;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
    }
    quasar::SystemConfig::ToDouble((char *)&__p);
    *(_QWORD *)&v69 = a2;
    *(_QWORD *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1296), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7] = v27;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_40:
    operator delete(v12);
    return 1;
  }
  if (a1 + 1328 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1320, a2))
  {
    v25 = (const std::string *)quasar::PTree::getString(a3);
    *(_QWORD *)&v69 = a2;
    v26 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1320), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
    std::string::operator=((std::string *)v26[7], v25);
    return 1;
  }
  v29 = (uint64_t **)(a1 + 1344);
  if (a1 + 1352 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1344, a2))
  {
    v38 = (uint64_t **)(a1 + 1368);
    if (a1 + 1376 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1368, a2))
    {
      v47 = (uint64_t **)(a1 + 1392);
      if (a1 + 1400 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1392, a2))
      {
        v54 = (uint64_t **)(a1 + 1416);
        if (a1 + 1424 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1416, a2))
        {
          if (a1 + 1448 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1440, a2))
          {
            v61 = (__int128 *)quasar::PTree::getString(a3);
            quasar::filesystem::Path::Path(&v69, v61);
            v86 = a2;
            v62 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1440), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v86);
            std::string::operator=((std::string *)(v62[7] + 8), (const std::string *)((char *)&v69 + 8));
            *(_QWORD *)&v69 = &unk_1E5D343A0;
            if ((SHIBYTE(v70) & 0x80000000) == 0)
              return 1;
            v12 = (void *)*((_QWORD *)&v69 + 1);
            goto LABEL_40;
          }
          return 0;
        }
        else
        {
          *(_QWORD *)&v69 = a2;
          v55 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1416), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(v55[7]);
          v56 = quasar::PTree::begin(a3);
          v57 = quasar::PTree::end(a3);
          if (v56 == v57)
            return 1;
          v58 = v57;
          do
          {
            *(_QWORD *)&v69 = a2;
            v59 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7];
            v60 = (unsigned __int8 *)quasar::PTree::getString((quasar::PTree *)(v56 + 24));
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v59, v60, (uint64_t)v60);
            v56 += 88;
            result = 1;
          }
          while (v56 != v58);
        }
      }
      else
      {
        *(_QWORD *)&v69 = a2;
        v48 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1392), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(v48[7]);
        v49 = (__int128 *)quasar::PTree::begin(a3);
        v50 = quasar::PTree::end(a3);
        if (v49 == (__int128 *)v50)
          return 1;
        v51 = (__int128 *)v50;
        do
        {
          *(_QWORD *)&v69 = a2;
          v52 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7];
          v53 = (__int128 *)quasar::PTree::getString((quasar::PTree *)((char *)v49 + 24));
          std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)&v69, v49, v53);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(v52, (unsigned __int8 *)&v69, (uint64_t)&v69);
          if (SHIBYTE(v71) < 0)
            operator delete(*((void **)&v70 + 1));
          if (SBYTE7(v70) < 0)
            operator delete((void *)v69);
          v49 = (__int128 *)((char *)v49 + 88);
          result = 1;
        }
        while (v49 != v51);
      }
    }
    else
    {
      *(_QWORD *)&v69 = a2;
      v39 = (uint64_t *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1368), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7];
      v41 = *v39;
      v40 = v39[1];
      if (v40 != *v39)
      {
        do
        {
          v40 -= 48;
          std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v39 + 2), v40);
        }
        while (v40 != v41);
      }
      v39[1] = v41;
      v42 = (__int128 *)quasar::PTree::begin(a3);
      v43 = quasar::PTree::end(a3);
      if (v42 == (__int128 *)v43)
        return 1;
      v44 = (__int128 *)v43;
      do
      {
        *(_QWORD *)&v69 = a2;
        v45 = (std::vector<std::pair<std::string, std::string>> *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7];
        v46 = (__int128 *)quasar::PTree::getString((quasar::PTree *)((char *)v42 + 24));
        std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>((std::string *)&v69, v42, v46);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v45, &v69);
        if (SHIBYTE(v71) < 0)
          operator delete(*((void **)&v70 + 1));
        if (SBYTE7(v70) < 0)
          operator delete((void *)v69);
        v42 = (__int128 *)((char *)v42 + 88);
        result = 1;
      }
      while (v42 != v44);
    }
  }
  else
  {
    *(_QWORD *)&v69 = a2;
    v30 = std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1344), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v30[7]);
    v31 = quasar::PTree::begin(a3);
    v32 = quasar::PTree::end(a3);
    if (v31 == v32)
      return 1;
    v33 = v32;
    do
    {
      *(_QWORD *)&v69 = a2;
      v34 = (uint64_t *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)[7];
      v35 = (__int128 *)quasar::PTree::getString((quasar::PTree *)(v31 + 24));
      v36 = v34[1];
      if (v36 >= v34[2])
      {
        v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v34, v35);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v34, v35);
        v37 = v36 + 24;
      }
      v34[1] = v37;
      v31 += 88;
      result = 1;
    }
    while (v31 != v33);
  }
  return result;
}

void quasar::SystemConfig::readPtreeAtPrefix(quasar::SystemConfig *this, unsigned int a2, int a3)
{
  uint64_t *v6;
  BOOL v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v6 = (uint64_t *)((char *)this + 816);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  v7 = quasar::endsWith(v6, (uint64_t *)__p);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  if (!v7)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Prefix must end with '.' : ", 27);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)v6);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (*((char *)this + 839) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 102), *((_QWORD *)this + 103));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v6;
    *(_QWORD *)&v12 = v6[2];
  }
  if (SBYTE7(v12) < 0)
  {
    v9 = (void **)__p[0];
    v8 = (uint64_t)--__p[1];
  }
  else
  {
    v8 = BYTE7(v12) - 1;
    BYTE7(v12) = v8 & 0x7F;
    v9 = __p;
  }
  *((_BYTE *)v9 + v8) = 0;
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, a2, a3);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
}

void sub_1ADAB8FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SystemConfig::enforceMaxVersion(uint64_t result, int a2, int a3, uint64_t a4)
{
  int v5;
  void *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _DWORD v21[2];

  v21[0] = a2;
  v21[1] = a3;
  v5 = *(_DWORD *)(result + 32);
  if (v5 > a2 || v5 == a2 && *(_DWORD *)(result + 36) > a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)v21, &v16);
    v7 = std::string::insert(&v16, 0, "Incompatible system config version. Needs to be <= ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v17, " to use ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = *(char *)(a4 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a4;
    else
      v12 = *(const std::string::value_type **)a4;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a4 + 23);
    else
      v13 = *(_QWORD *)(a4 + 8);
    v14 = std::string::append(&v18, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20 = v14->__r_.__value_.__r.__words[2];
    v19 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v19);
  }
  return result;
}

void sub_1ADAB9110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t quasar::SystemConfig::ToBool(uint64_t a1)
{
  uint64_t v1;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v1 = quasar::PTree::toBool(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1ADAB9210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SystemConfig::ToInt(char *a1)
{
  char *v1;
  uint64_t result;
  char *v3;
  void *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  __int128 v8;
  std::string::size_type v9;
  char *__endptr;

  v1 = a1;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  __endptr = 0;
  result = strtol(a1, &__endptr, 0);
  v3 = v1;
  if (v1[23] < 0)
    v3 = *(char **)v1;
  if (v3 == __endptr)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v5 = std::string::append(&v7, "\"");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9 = v5->__r_.__value_.__r.__words[2];
    v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v8);
  }
  return result;
}

void sub_1ADAB9308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unint64_t quasar::SystemConfig::ToUInt(char *a1)
{
  char *v1;
  unint64_t result;
  char *v3;
  void *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  __int128 v8;
  std::string::size_type v9;
  char *__endptr;

  v1 = a1;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  __endptr = 0;
  result = strtoul(a1, &__endptr, 0);
  v3 = v1;
  if (v1[23] < 0)
    v3 = *(char **)v1;
  if (v3 == __endptr)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v5 = std::string::append(&v7, "\"");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9 = v5->__r_.__value_.__r.__words[2];
    v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v8);
  }
  return result;
}

void sub_1ADAB9444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t quasar::SystemConfig::ToInt64(char *a1)
{
  char *v1;
  uint64_t result;
  char *v3;
  void *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  __int128 v8;
  std::string::size_type v9;
  char *__endptr;

  v1 = a1;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  __endptr = 0;
  result = strtol(a1, &__endptr, 0);
  v3 = v1;
  if (v1[23] < 0)
    v3 = *(char **)v1;
  if (v3 == __endptr)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v5 = std::string::append(&v7, "\"");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9 = v5->__r_.__value_.__r.__words[2];
    v8 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v8);
  }
  return result;
}

void sub_1ADAB9580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

float quasar::SystemConfig::ToFloat(char *a1)
{
  char *v1;
  double v2;
  char *v3;
  void *exception;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;
  char *v11;

  v1 = a1;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  v11 = 0;
  v2 = strtod(a1, &v11);
  v3 = v1;
  if (v1[23] < 0)
    v3 = *(char **)v1;
  if (v3 == v11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v6 = std::string::append(&v8, "\"");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v9);
  }
  return v2;
}

void sub_1ADAB96BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void quasar::SystemConfig::ToDouble(char *a1)
{
  char *v1;
  char *v2;
  void *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  __int128 v7;
  std::string::size_type v8;
  char *v9;

  v1 = a1;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  v9 = 0;
  strtod(a1, &v9);
  v2 = v1;
  if (v1[23] < 0)
    v2 = *(char **)v1;
  if (v2 == v9)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v4 = std::string::append(&v6, "\"");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v8 = v4->__r_.__value_.__r.__words[2];
    v7 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::Error::Error(exception, &v7);
  }
}

void sub_1ADAB97F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void quasar::SystemConfig::Register(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1176);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1184;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1200);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1208;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1224);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1232;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1248);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1256;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1272);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1280;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1296);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1304;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1320);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1328;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1344);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1352;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1368);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1376;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1392);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1400;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1416);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1424;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

{
  uint64_t **v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*(_DWORD *)(a1 + 1536) != 1)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Config file must be loaded before calling this method.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = (uint64_t **)(a1 + 1440);
  v7 = (const void **)(a1 + 816);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  v9 = a1 + 1448;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v9 != v8 && quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter name ", 15);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)v14);
    if ((v15 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14[1];
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" already registered", 19);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2, (uint64_t)__p);
  v14[0] = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v14)+ 7) = a3;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

std::string *quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo(std::string *this, const quasar::SystemConfig::SystemConfigInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E5D343A0;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v5;
  }
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 16);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v6;
  }
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(this + 4, *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  this[5].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 120);
  quasar::SpeechModelInfo::SpeechModelInfo((std::string *)((char *)this + 128), (const quasar::SystemConfig::SystemConfigInfo *)((char *)a2 + 128));
  quasar::TranslationModelInfo::TranslationModelInfo((std::string *)((char *)this + 400), (const quasar::SystemConfig::SystemConfigInfo *)((char *)a2 + 400));
  std::map<int,std::map<std::string,double>>::map[abi:ne180100]((uint64_t *)&this[28], (uint64_t)a2 + 672);
  std::map<std::string,int>::map[abi:ne180100]((uint64_t *)&this[29], (const void ***)a2 + 87);
  LODWORD(this[30].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 180);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[30].__r_.__value_.__l.__size_, (uint64_t)a2 + 728);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[32], (uint64_t)a2 + 768);
  return this;
}

void sub_1ADABB478(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 32) = v3 + 16;
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1ADABB508()
{
  JUMPOUT(0x1ADABB4C8);
}

void sub_1ADABB510()
{
  JUMPOUT(0x1ADABB4D0);
}

void sub_1ADABB518()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 95) < 0)
    operator delete(*v1);
  JUMPOUT(0x1ADABB4D8);
}

void quasar::HybridClientConfigs::~HybridClientConfigs(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy((uint64_t)this, this[1]);
}

std::string *quasar::TranslationModelInfo::TranslationModelInfo(std::string *this, const quasar::TranslationModelInfo *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4));
  std::unordered_map<std::string,std::vector<std::pair<std::string,std::string>>>::unordered_map((uint64_t)&this[3], (uint64_t)a2 + 72);
  std::unordered_map<std::string,quasar::TranslationPairSetting>::unordered_map((uint64_t)&this[4].__r_.__value_.__r.__words[2], (uint64_t)a2 + 112);
  std::unordered_map<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>::unordered_map((uint64_t)&this[6].__r_.__value_.__l.__size_, (uint64_t)a2 + 152);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&this[8], (uint64_t)a2 + 192);
  std::unordered_map<std::string,std::unordered_set<std::string>>::unordered_map((uint64_t)&this[9].__r_.__value_.__r.__words[2], (uint64_t)a2 + 232);
  return this;
}

void sub_1ADABB65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v7);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table(v4);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::string>::destroy(v3, *(char **)(v2 + 32));
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void sub_1ADABB6D0()
{
  JUMPOUT(0x1ADABB6ACLL);
}

void sub_1ADABB6D8()
{
  JUMPOUT(0x1ADABB6B8);
}

std::string *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADABB744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::vector<std::pair<std::string,std::string>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1ADABB7C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADABBA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADABBAB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4));
  return this;
}

void sub_1ADABBB40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::unordered_map<std::string,quasar::TranslationPairSetting>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::TranslationPairSetting> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1ADABBBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::TranslationPairSetting> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::pair<std::string const,quasar::TranslationPairSetting> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADABBE7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::pair<std::string const,quasar::TranslationPairSetting> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::TranslationPairSetting>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADABBEF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::TranslationPairSetting>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADABBFB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1ADABC08C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADABC30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADABC380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_map<std::string,quasar::TranslationPairSetting>::unordered_map((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1ADABC3F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t *std::map<int,std::map<std::string,double>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::map<std::string,double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADABC48C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::map<std::string,double>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::map<std::string,double>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::map<std::string,double>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int const,std::map<std::string,double>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

std::string *quasar::SpeechModelInfo::SpeechModelInfo(std::string *this, const quasar::SpeechModelInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::set<int>::set[abi:ne180100]((uint64_t *)&this[2], (uint64_t)a2 + 48);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[3], (const void ***)a2 + 9);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[4], (const void ***)a2 + 12);
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v8;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[8], (const void ***)a2 + 24);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)&this[9], (const void ***)a2 + 27);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[10], (const void ***)a2 + 30);
  this[11].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 33);
  return this;
}

void sub_1ADABC744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;

  if (*(char *)(v10 + 167) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 143) < 0)
    operator delete(*v14);
  std::__tree<std::string>::destroy(v13, *(char **)(v10 + 104));
  std::__tree<std::string>::destroy(v12, *(char **)(v10 + 80));
  std::__tree<int>::destroy(a10, *(_QWORD **)(v10 + 56));
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void sub_1ADABC80C()
{
  JUMPOUT(0x1ADABC7CCLL);
}

void sub_1ADABC814()
{
  JUMPOUT(0x1ADABC7D8);
}

void sub_1ADABC81C()
{
  JUMPOUT(0x1ADABC7E4);
}

uint64_t *std::map<std::string,std::vector<std::string>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABC860(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string const,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADABCA08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::TranslationModelInfo::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::__tree<std::string>::__move_assign(a1 + 24, (_QWORD *)a2 + 3);
  std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 48));
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__move_assign(a1 + 72, (uint64_t *)a2 + 9);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__move_assign(a1 + 112, (uint64_t *)a2 + 14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__move_assign(a1 + 152, (uint64_t *)a2 + 19);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a1 + 192, (uint64_t *)a2 + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__move_assign(a1 + 232, (uint64_t *)a2 + 29);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

std::string *std::pair<std::string,quasar::TranslationPairSetting>::pair[abi:ne180100]<std::string&,quasar::TranslationPairSetting&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 2;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1ADABD0B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD v12[2];

  v4 = (__int128 *)a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::vector<std::pair<std::string,std::string>> &>::operator=[abi:ne180100]<std::string const,std::vector<std::pair<std::string,std::string>>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = *(__int128 **)v4;
        if (v10)
          v11 = v4 == (__int128 *)a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (__int128 *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(a1, v4 + 1);
    v4 = *(__int128 **)v4;
  }
}

void sub_1ADABD1C4(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADABD1E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<std::pair<std::string,std::string>> &>::operator=[abi:ne180100]<std::string const,std::vector<std::pair<std::string,std::string>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::vector<std::pair<std::string, std::string>> *v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(std::vector<std::pair<std::string, std::string>> **)(a1 + 8);
  if (v4 != (std::vector<std::pair<std::string, std::string>> *)(a2 + 24))
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, *(std::string **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4));
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_multi<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1ADABD29C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node<std::pair<std::string const,std::vector<std::pair<std::string,std::string>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADABD32C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD v12[2];

  v4 = (__int128 *)a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::unordered_map<std::string,quasar::TranslationPairSetting> &>::operator=[abi:ne180100]<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = *(__int128 **)v4;
        if (v10)
          v11 = v4 == (__int128 *)a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (__int128 *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_multi<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(a1, v4 + 1);
    v4 = *(__int128 **)v4;
  }
}

void sub_1ADABD420(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADABD43C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::unordered_map<std::string,quasar::TranslationPairSetting> &>::operator=[abi:ne180100]<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2 + 24)
  {
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>((_QWORD *)v4, *(uint64_t **)(a2 + 40), 0);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_multi<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1ADABD4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::unordered_map<std::string,quasar::TranslationPairSetting>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADABD580(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1ADABD66C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADABD688(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1ADABD6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADABD77C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD v12[2];

  v4 = (__int128 *)a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,std::unordered_set<std::string> &>::operator=[abi:ne180100]<std::string const,std::unordered_set<std::string>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = *(__int128 **)v4;
        if (v10)
          v11 = v4 == (__int128 *)a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (__int128 *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, v4 + 1);
    v4 = *(__int128 **)v4;
  }
}

void sub_1ADABD870(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADABD88C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::unordered_set<std::string> &>::operator=[abi:ne180100]<std::string const,std::unordered_set<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2 + 24)
  {
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 56);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)v4, *(uint64_t **)(a2 + 40), 0);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::unordered_set<std::string>> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1ADABD940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node<std::pair<std::string const,std::unordered_set<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::unordered_set<std::string>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADABD9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unordered_set<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1ADABDA40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string const&,quasar::PTree&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a3 + 56);
  return this;
}

void sub_1ADABDB24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADABDBD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<std::string,std::string,0>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  quasar::PTree::PTree(a1 + 24, (char *)a2 + 24);
  return a1;
}

void sub_1ADABDC28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::unordered_set<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1ADABDCA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADABDF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_set<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::unordered_set<std::string>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADABDF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABDFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL *>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BOOL *> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__construct_node<std::pair<std::string const,long long> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::map<std::string,int *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE140(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned int *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,long long *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,float *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,double *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE290(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string*>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::string> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE338(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::pair<std::string,std::string>> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<std::string,std::string>> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE38C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::unordered_map<std::string,std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::string> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::unordered_set<std::string> *,std::less<std::string>,std::allocator<std::pair<std::string const,std::unordered_set<std::string> *>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE434(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::filesystem::Path *>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE488(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::SystemConfig::Version>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,BOOL *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,BOOL *>,std::__tree_node<std::__value_type<std::string,BOOL *>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<std::string>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADABE530(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADABE6B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_1ADABE720(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear((uint64_t *)(v2 + 56));
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 8);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,0>(uint64_t a1)
{
  quasar::SystemConfig::SystemConfigInfo::~SystemConfigInfo((quasar::SystemConfig::SystemConfigInfo *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v9[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>((_QWORD *)(a1 + 8), v9);
  v6 = v5;
  if (v5)
  {
    v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

uint64_t quasar::SystemConfig::SystemConfigInfo::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    quasar::SpeechModelInfo::operator=(a1 + 128, a2 + 128);
    quasar::TranslationModelInfo::operator=(a1 + 400, a2 + 400);
    *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  }
  else
  {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 96, *(std::string **)(a2 + 96), *(std::string **)(a2 + 104), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    quasar::SpeechModelInfo::operator=(a1 + 128, a2 + 128);
    quasar::TranslationModelInfo::operator=(a1 + 400, a2 + 400);
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::map<std::string,double>>,std::__tree_node<std::__value_type<int,std::map<std::string,double>>,void *> *,long>>((uint64_t **)(a1 + 672), *(uint64_t **)(a2 + 672), (uint64_t *)(a2 + 680));
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>((uint64_t **)(a1 + 696), *(_QWORD **)(a2 + 696), (_QWORD *)(a2 + 704));
    *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
    *(_DWORD *)(a1 + 760) = *(_DWORD *)(a2 + 760);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a1 + 728), *(uint64_t **)(a2 + 744), 0);
    *(_DWORD *)(a1 + 800) = *(_DWORD *)(a2 + 800);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a1 + 768), *(uint64_t **)(a2 + 784), 0);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)a1 + 44;
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        v14 = (unsigned __int8 *)v11[2];
        if (v14 == (unsigned __int8 *)*a2
          || (std::equal_to<std::string>::operator()[abi:ne180100](v12, v14, (unsigned __int8 *)*a2) & 1) != 0)
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,quasar::SystemConfig::SystemConfigInfo const&)::{lambda(quasar::SystemConfig::SystemConfigInfo&)#1}>(unint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::string v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  v27 = (uint64_t *)&v27;
  v28 = (uint64_t *)&v27;
  v29 = 0;
  v6 = a1 + 1;
  v26.__r_.__value_.__r.__words[0] = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1 + 1, (uint64_t *)&v26);
  if (v7)
  {
    v8 = (uint64_t *)v7[3];
    if (&v27 != (uint64_t **)v8)
    {
      v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v27)
      {
        v10 = *v8;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)v8[1] = v10;
        v11 = (uint64_t)v27;
        v27[1] = (uint64_t)v8;
        *v8 = v11;
        v8[1] = (uint64_t)&v27;
        --a1[9];
        v27 = v8;
        ++v29;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    v12 = a1[9];
    if (v12 >= *a1)
    {
      v13 = (uint64_t *)a1[7];
      if (&v27 != (uint64_t **)v13)
      {
        v14 = (uint64_t *)v13[1];
        if (v14 != (uint64_t *)&v27)
        {
          v15 = *v13;
          *(_QWORD *)(v15 + 8) = v14;
          *(_QWORD *)v13[1] = v15;
          v16 = (uint64_t)v27;
          v27[1] = (uint64_t)v13;
          *v13 = v16;
          v13[1] = (uint64_t)&v27;
          a1[9] = v12 - 1;
          v27 = v13;
          ++v29;
        }
      }
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 2);
      std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(v6, (uint64_t *)&v26);
      std::string::operator=((std::string *)(v28 + 2), (const std::string *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v26 = *(std::string *)a2;
      v17 = std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::__create_node[abi:ne180100]<std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>((uint64_t)&v27, 0, 0, (uint64_t)&std::piecewise_construct, (uint64_t)&v26);
      v18 = (uint64_t)v27;
      *v17 = (uint64_t)v27;
      v17[1] = (uint64_t)&v27;
      *(_QWORD *)(v18 + 8) = v17;
      v27 = v17;
      ++v29;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  v19 = v28;
  v20 = v28 + 5;
  quasar::SystemConfig::SystemConfigInfo::operator=((uint64_t)(v28 + 5), a3);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 2);
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>((uint64_t)v6, (uint64_t *)&v26, &v26);
  v21 = (uint64_t *)a1[8];
  if (v21 != v19)
  {
    v22 = (uint64_t *)v19[1];
    if (v22 != v21)
    {
      v23 = *v19;
      *(_QWORD *)(v23 + 8) = v22;
      *(_QWORD *)v19[1] = v23;
      v24 = *v21;
      *(_QWORD *)(v24 + 8) = v19;
      *v19 = v24;
      *v21 = (uint64_t)v19;
      v19[1] = (uint64_t)v21;
      --v29;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear((uint64_t *)&v27);
  return v20;
}

void sub_1ADABED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::clear(&a17);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__list_imp<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>>::__create_node[abi:ne180100]<std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;

  v9 = a1 + 16;
  v10 = operator new(0x350uLL);
  *v10 = a2;
  v10[1] = a3;
  std::allocator<std::__list_node<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>::construct[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>(v9, (uint64_t)(v10 + 2), a4, a5);
  return v10;
}

void sub_1ADABEE60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::allocator<std::__list_node<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>::construct[abi:ne180100]<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,std::piecewise_construct_t const&,std::tuple<std::string>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  uint64_t v5;

  *(_OWORD *)__p = *(_OWORD *)a4;
  v5 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>::pair[abi:ne180100]<std::string>(a2, (__int128 *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1ADABEEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>::pair[abi:ne180100]<std::string>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  quasar::SystemConfig::SystemConfigInfo *v4;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = (quasar::SystemConfig::SystemConfigInfo *)(a1 + 24);
  bzero((void *)(a1 + 24), 0x328uLL);
  quasar::SystemConfig::SystemConfigInfo::SystemConfigInfo(v4);
  return a1;
}

void sub_1ADABEF34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  unsigned __int8 *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 32, *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          v15 = (unsigned __int8 *)i[2];
          if (v15 == (unsigned __int8 *)*a2
            || (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 44, v15, (unsigned __int8 *)*a2) & 1) != 0)
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 40);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_39:
    *v23 = i;
    goto LABEL_40;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADABF188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5;
  char v6;

  v5 = *a3;
  v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADABF1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v16 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADABF488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::TranslationPairSetting>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x58uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v16 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v17 = *(_OWORD *)(a3 + 48);
  *((_QWORD *)v16 + 10) = *(_QWORD *)(a3 + 64);
  *((_OWORD *)v16 + 4) = v17;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1ADABF74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADABF9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADABFA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADABFD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADABFDC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::TranslationPairSetting>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADAC0060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADAC0108(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::pair<std::string,std::string>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::pair<std::string,std::string>>::__find_equal<std::pair<std::string,std::string>>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::pair<std::string,std::string>>::__find_equal<std::pair<std::string,std::string>>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v7, a3, (const void **)(v4 + 32)))break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v7, v9, a3))break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::pair<std::string, std::string> *v10;
  uint64_t v11;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9)
    v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::pair<std::string,std::string>::pair[abi:ne180100](&__v.__begin_->first, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  return v11;
}

void sub_1ADAC0378(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x58uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1ADAC0620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  std::string *v12[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = (std::string *)(v8 + 2);
        v12[1] = (std::string *)(v8 + 5);
        std::pair<std::string &,quasar::TranslationPairSetting &>::operator=[abi:ne180100]<std::string const,quasar::TranslationPairSetting,(void *)0>(v12, (const std::string *)(v4 + 2));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_multi<std::pair<std::string const,quasar::TranslationPairSetting> const&>(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1ADAC0714(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADAC0730(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string **std::pair<std::string &,quasar::TranslationPairSetting &>::operator=[abi:ne180100]<std::string const,quasar::TranslationPairSetting,(void *)0>(std::string **a1, const std::string *a2)
{
  std::string *v4;

  std::string::operator=(*a1, a2);
  v4 = a1[1];
  std::string::operator=(v4, a2 + 1);
  std::string::operator=(v4 + 1, a2 + 2);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__emplace_multi<std::pair<std::string const,quasar::TranslationPairSetting> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node<std::pair<std::string const,quasar::TranslationPairSetting> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1ADAC07E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::__construct_node<std::pair<std::string const,quasar::TranslationPairSetting> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,quasar::TranslationPairSetting>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADAC0874(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::pair<std::string,double>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 7) = *(_QWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__emplace_unique_key_args<int,std::pair<int,std::map<std::string,double>>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  int v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int,std::map<std::string,double>>>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

_DWORD *std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__construct_node<std::pair<int,std::map<std::string,double>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *result;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[8] = *(_DWORD *)a2;
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)result + 5) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 6) = v8;
  v9 = (char *)(result + 12);
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 8) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *((_QWORD *)result + 5) = v9;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *boost::io::detail::call_put_last<char,std::char_traits<char>,char const* const>(_QWORD *a1, const char **a2)
{
  const char *v3;
  size_t v4;

  v3 = *a2;
  v4 = strlen(*a2);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,int>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,long long>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,float>()
{
  return std::ostream::operator<<();
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,double>()
{
  return std::ostream::operator<<();
}

_QWORD *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1ADAC1C14(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

double std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  result = NAN;
  *((_QWORD *)v6 + 7) = -1;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADAC20B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::ResultCombiner::ResultCombiner(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = &unk_1E5D35510;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 32));
  return a1;
}

void sub_1ADAC213C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

quasar::ResultCombiner *quasar::ResultCombiner::ResultCombiner(quasar::ResultCombiner *this)
{
  *(_QWORD *)this = &unk_1E5D35510;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  quasar::SystemConfig::SystemConfig((quasar::ResultCombiner *)((char *)this + 32));
  return this;
}

void sub_1ADAC21A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ResultCombiner::init(quasar::ResultCombiner *this)
{
  char **v2;
  char *v3;
  int JsonFile;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27[3];
  void *v28[2];
  char v29;

  v2 = (char **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
    v3 = *v2;
  else
    v3 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(v28, v3);
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  LODWORD(v12) = 1065353216;
  JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)this + 32, (uint64_t)v28, v27, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v29 < 0)
    operator delete(v28[0]);
  if (JsonFile == 2)
  {
    if (quasar::gLogLevel >= 2)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VersionUnsupported: ", 20);
      v6 = *((char *)this + 31);
      if (v6 >= 0)
        v7 = (uint64_t)v2;
      else
        v7 = *((_QWORD *)this + 1);
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)this + 31);
      else
        v8 = *((_QWORD *)this + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    return 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "result-combiner");
    quasar::SystemConfig::enforceMinVersion((uint64_t)this + 32, 45, 0, (uint64_t)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "result-combiner.");
    quasar::SystemConfig::setPrefix((std::string *)((char *)this + 32), (const std::string *)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
    (*(void (**)(quasar::ResultCombiner *, char *))(*(_QWORD *)this + 8))(this, (char *)this + 32);
    std::string::basic_string[abi:ne180100]<0>(__p, "result-combiner");
    quasar::SystemConfig::readPtree((uint64_t)this + 32, (uint64_t)__p, 0, 0);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
    (*(void (**)(quasar::ResultCombiner *))(*(_QWORD *)this + 16))(this);
    return 1;
  }
}

void sub_1ADAC23BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  void *v27;
  void *v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;

  if (SBYTE7(a10) < 0)
    operator delete((void *)__p);
  if (a2 == 2)
  {
    v27 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 2)
    {
LABEL_8:
      v28 = v27;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
      v30 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
      v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v27 = __cxa_begin_catch(exception_object);
    if (quasar::gLogLevel >= 2)
      goto LABEL_8;
  }
  __cxa_end_catch();
  JUMPOUT(0x1ADAC22E0);
}

void quasar::ResultCombiner::~ResultCombiner(void **this)
{
  *this = &unk_1E5D35510;
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *quasar::RankingResultCombiner::RankingResultCombiner(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)quasar::ResultCombiner::ResultCombiner(a1, a2);
  *result = &off_1E5D38858;
  result[197] = 0;
  result[199] = 0;
  result[198] = 0;
  result[201] = 0;
  result[203] = 0;
  result[202] = 0;
  return result;
}

void quasar::RankingResultCombiner::registerParams(quasar::RankingResultCombiner *this, quasar::SystemConfig *a2)
{
  char *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  *((_BYTE *)this + 1604) = 1;
  *((_DWORD *)this + 400) = 10;
  v4 = (char *)this + 1576;
  MEMORY[0x1AF44C914]((char *)this + 1576, "1.0,1.0");
  std::string::basic_string[abi:ne180100]<0>(v7, "compute-conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "Whether to use existing confidence or re-compute a score from the tokens, default = true.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 1604, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "nbest-depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of alternatives to allow in the combined output, default = 10.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 1600, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "system-weights");
  std::string::basic_string[abi:ne180100]<0>(__p, "A comma-separated list of weights to apply to each system, in the same order as the provided system input, default is 1.0,1.0.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)v4, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1ADAC27E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::ConfusionNetworkCombiner::registerParams(quasar::ConfusionNetworkCombiner *this, quasar::SystemConfig *a2)
{
  char *v4;
  char *v5;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v4 = (char *)this + 1629;
  *((_BYTE *)this + 1628) = 1;
  *((_DWORD *)this + 406) = 10;
  v5 = (char *)this + 1576;
  MEMORY[0x1AF44C914]((char *)this + 1576, "1.0,1.0");
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v4 + 71) = _D0;
  *(_DWORD *)v4 = 16777217;
  *((_BYTE *)this + 1633) = 0;
  *((_DWORD *)this + 424) = 100;
  *((_DWORD *)this + 427) = 0;
  *((_QWORD *)this + 211) = 0x7FFFFFFF00000001;
  MEMORY[0x1AF44C914]((char *)this + 1600, "contact-first@contact-middle@contact-last@appname-first@appname-last,contact-first@contact-middle@contact-last@appname-first@appname-last");
  std::string::basic_string[abi:ne180100]<0>(v13, "compute-conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "Whether to use existing confidence or re-compute a score from the tokens, default = true.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1628, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "nbest-depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of alternatives to allow in the combined output, default = 10.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1624, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "system-weights");
  std::string::basic_string[abi:ne180100]<0>(__p, "A comma-separated list of weights to apply to each system, in the same order as the provided system input, default is 1.0,1.0.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)v5, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "backbone-system");
  std::string::basic_string[abi:ne180100]<0>(__p, "The index of the system to use as the reference/backbone system. This is the default system, and the one which is used for alignment.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1688, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "eps-backbone");
  std::string::basic_string[abi:ne180100]<0>(__p, "The epsilon confidence score for epsilons inserted into the backbone.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(v4 + 71), (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "eps-alternative");
  std::string::basic_string[abi:ne180100]<0>(__p, "The epsilon confidence score for epsilons inserted into the alternative systems.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1704, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "do-selection");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether to do system selection or combination, default is 'true' (i.e. do selection only).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)v4, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "combine-any-region");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether, if regions are specified, to do region combination within the entire utterance, if the region exists at all in the two CNs.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1630, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "combine-in-region-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether, if regions are specified, to do region combination only in slots where the region exists.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1631, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "confidence-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "The delta by which the competing systems must be better than the backbone in order to be considered better.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1708, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "region-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "List of regional terminals to mach for use for system combination (works with region-combine options). Comma-separated for each system, and @-separated for each region within a system (e.g. contact-first@appname-first,contact-last).");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1600, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "do-flatten");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether to flatten the confusion network such that only a 1-best combination/selection is performed.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1632, (uint64_t)__p, 0, 45, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "do-partial-merge");
  std::string::basic_string[abi:ne180100]<0>(__p, "Switch to control whether to allow merging a partial hypothesis with a longer one before doing selection.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1633, (uint64_t)__p, 0, 63, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "max-partial-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "The amount of jitter or shift to allow when deciding whether to merge a longer hypothesis with a partial one.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1696, (uint64_t)__p, 0, 63, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "truncation-delta-milliseconds");
  std::string::basic_string[abi:ne180100]<0>(__p, "Skip system combination if (backbone speech end - competing speech end) >= this value. Value can be positive or negative. This prevents truncation if the CN being combined with is too short. By default, we don't enable this check, value = huge number.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 1692, (uint64_t)__p, 0, 61, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_1ADAC2F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RankingResultCombiner::finishInit(quasar::RankingResultCombiner *this)
{
  uint64_t result;
  _OWORD v2[17];

  result = kaldi::SplitStringToFloats<float>((uint64_t)this + 1576, ",", 1, (_QWORD *)this + 201);
  if ((result & 1) == 0)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Could not read system weight info");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return result;
}

void quasar::ConfusionNetworkCombiner::finishInit(quasar::ConfusionNetworkCombiner *this)
{
  std::string __p;
  _OWORD v3[17];

  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1576, ",", 1, (_QWORD *)this + 208) & 1) == 0)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Could not read system weight info");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  if (*((char *)this + 1623) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 200), *((_QWORD *)this + 201));
  else
    __p = *(std::string *)((char *)this + 1600);
  kaldi::quasar::ProcessRegionInformation(",", "@", (uint64_t)&__p, (uint64_t *)this + 205);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADAC3150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::getNBestFromSausage(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5, uint64_t *a6)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  std::string::size_type v25;
  _QWORD *v26;
  _QWORD *v27;
  float *v28;
  float v29;
  std::string *v30;
  std::string *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type size;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v46;
  std::string *v47;
  unint64_t v48;
  std::string v49;
  void *__p[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void **v67;

  if (quasar::gLogLevel >= 5)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Number of systems is ", 21);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  v9 = *a2;
  if (a2[1] != *a2)
  {
    v10 = 0;
    v41 = (_DWORD)a6 + 16;
    v42 = a6;
    do
    {
      if (quasar::gLogLevel >= 5)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"System ", 7);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" Number of alternatives is ", 27);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        v9 = *a2;
      }
      if (*(_QWORD *)(v9 + 24 * v10 + 8) != *(_QWORD *)(v9 + 24 * v10))
      {
        v12 = 0;
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&v49, "");
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v13 = *(_QWORD *)(*a2 + 24 * v10);
          v14 = *(_QWORD **)(v13 + 24 * v12);
          if (*(_QWORD **)(v13 + 24 * v12 + 8) == v14)
          {
            v20 = 0.0;
            v19 = 0.0;
            v18 = 0.0;
            v17 = 0.0;
          }
          else
          {
            v15 = 0;
            v16 = *(_QWORD **)(*a1 + 24 * v10);
            v17 = 0.0;
            v18 = 0.0;
            v19 = 0.0;
            v20 = 0.0;
            do
            {
              v21 = (_QWORD *)(v16[3 * v15] + 24 * v14[v15]);
              if (v21[1] != *v21)
              {
                v22 = 0;
                v23 = 0;
                do
                {
                  if (v15)
                  {
                    std::operator+<char>();
                    if ((SBYTE7(v51) & 0x80u) == 0)
                      v24 = __p;
                    else
                      v24 = (void **)__p[0];
                    if ((SBYTE7(v51) & 0x80u) == 0)
                      v25 = BYTE7(v51);
                    else
                      v25 = (std::string::size_type)__p[1];
                    std::string::append(&v49, (const std::string::value_type *)v24, v25);
                    if (SBYTE7(v51) < 0)
                      operator delete(__p[0]);
                    v26 = *(_QWORD **)(*a1 + 24 * v10);
                    v27 = *(_QWORD **)(*(_QWORD *)(*a2 + 24 * v10) + 24 * v12);
                  }
                  else
                  {
                    std::string::operator=(&v49, (const std::string *)(*(_QWORD *)(*v16 + 24 * *v14) + v22));
                    v26 = *(_QWORD **)(*a1 + 24 * v10);
                    v27 = *(_QWORD **)(*(_QWORD *)(*a2 + 24 * v10) + 24 * v12);
                    v18 = (float)*(unsigned int *)(*(_QWORD *)(*v26 + 24 * *v27) + v22 + 28);
                  }
                  v28 = (float *)(*(_QWORD *)(v26[3 * v15] + 24 * v27[v15]) + v22);
                  v29 = v28[10];
                  v30 = v47;
                  if ((unint64_t)v47 >= v48)
                  {
                    v31 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v46, (const quasar::Token *)v28);
                  }
                  else
                  {
                    quasar::Token::Token(v47, (const quasar::Token *)v28);
                    v31 = (std::string *)((char *)v30 + 224);
                  }
                  v47 = v31;
                  v19 = v19 + 1.0;
                  v16 = *(_QWORD **)(*a1 + 24 * v10);
                  v13 = *(_QWORD *)(*a2 + 24 * v10);
                  v20 = v20 + v29;
                  v14 = *(_QWORD **)(v13 + 24 * v12);
                  v32 = (_QWORD *)(v16[3 * v15] + 24 * v14[v15]);
                  ++v23;
                  v22 += 224;
                }
                while (v23 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32[1] - *v32) >> 5));
                v17 = (float)*(unsigned int *)(*v32 + v22 - 192);
              }
              ++v15;
            }
            while (v15 < (uint64_t)(*(_QWORD *)(v13 + 24 * v12 + 8) - (_QWORD)v14) >> 3);
          }
          a6 = v42;
          if (quasar::gLogLevel > 4)
          {
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Alternative = ", 14);
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = &v49;
            else
              v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
            else
              size = v49.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, size);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          quasar::Alternative::Alternative((uint64_t)__p, &v49, &v46, a5, v10, v12, v18, v17, (float)(v20 / v19) * *(float *)(*a4 + 4 * v10), *(float *)(*a4 + 4 * v10) * *(float *)(*(_QWORD *)(*a3 + 24 * v10) + 4 * v12));
          v36 = v42[1];
          if (v36 >= v42[2])
          {
            v37 = std::vector<quasar::Alternative>::__push_back_slow_path<quasar::Alternative const&>(v42, (__int128 *)__p);
          }
          else
          {
            std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>(v41, (std::string *)v42[1], (__int128 *)__p);
            v37 = v36 + 80;
            v42[1] = v36 + 80;
          }
          v42[1] = v37;
          v67 = (void **)&v53 + 1;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v67);
          if (SBYTE7(v51) < 0)
            operator delete(__p[0]);
          __p[0] = &v46;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          ++v12;
          v9 = *a2;
        }
        while (v12 < 0xAAAAAAAAAAAAAAABLL
                    * ((uint64_t)(*(_QWORD *)(*a2 + 24 * v10 + 8) - *(_QWORD *)(*a2 + 24 * v10)) >> 3));
      }
      ++v10;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - v9) >> 3));
  }
  v38 = (__int128 *)a6[1];
  v39 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v38 - *a6) >> 4));
  if (v38 == (__int128 *)*a6)
    v40 = 0;
  else
    v40 = v39;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,false>(*a6, v38, (uint64_t)__p, v40, 1);
}

void sub_1ADAC3720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a24);
  _Unwind_Resume(a1);
}

void quasar::Alternative::~Alternative(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t quasar::removeRedundantAlternativesAndPrune(__int128 **a1, unint64_t a2, _QWORD *a3)
{
  __int128 *v3;
  __int128 *v4;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::string v11;
  void *__p;
  char v13;
  uint64_t v14;
  _OWORD v15[2];
  int v16;
  void **v17;

  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v7 = a3 + 2;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v15, (unsigned __int8 *)v3))
      {
        std::pair<std::string,quasar::Alternative>::pair[abi:ne180100]<true,0>(&v11, v3, v3);
        std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::Alternative>>((uint64_t)v15, (unsigned __int8 *)&v11, (uint64_t)&v11);
        v17 = (void **)&v14;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v17);
        if (v13 < 0)
          operator delete(__p);
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        v8 = a3[1];
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *a3) >> 4) < a2)
        {
          if (v8 >= *v7)
          {
            v9 = std::vector<quasar::Alternative>::__push_back_slow_path<quasar::Alternative const&>(a3, v3);
          }
          else
          {
            std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>((int)v7, (std::string *)a3[1], v3);
            v9 = v8 + 80;
            a3[1] = v8 + 80;
          }
          a3[1] = v9;
        }
      }
      v3 += 5;
    }
    while (v3 != v4);
  }
  return std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::~__hash_table((uint64_t)v15);
}

void sub_1ADAC3934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v15 + 8) = v16;
  std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,quasar::Alternative>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 80);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::generateCombinedOutputSimple(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  __int128 *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *__p;
  char *v74;
  char *v75;
  uint64_t *v76;
  _QWORD *v77;
  unint64_t v78;

  v76 = 0;
  v77 = 0;
  v78 = 0;
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v14 = 0;
    v71 = a7 + 16;
    v72 = a6 + 16;
    v70 = a4 + 16;
    do
    {
      v15 = *(int *)(v7 + 80 * v14 + 44);
      v17 = *(_QWORD **)(a6 + 8);
      v16 = *(_QWORD *)(a6 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(_QWORD **)a6;
        v20 = ((uint64_t)v17 - *(_QWORD *)a6) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v72, v23);
          v19 = *(_QWORD **)a6;
          v17 = *(_QWORD **)(a6 + 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v15;
        v18 = v25 + 8;
        while (v17 != v19)
        {
          v26 = *--v17;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        *(_QWORD *)a6 = v25;
        *(_QWORD *)(a6 + 8) = v18;
        *(_QWORD *)(a6 + 16) = &v24[8 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v17 = v15;
        v18 = v17 + 1;
      }
      *(_QWORD *)(a6 + 8) = v18;
      v27 = *(int *)(*a1 + 80 * v14 + 48);
      v29 = *(_QWORD **)(a7 + 8);
      v28 = *(_QWORD *)(a7 + 16);
      if ((unint64_t)v29 >= v28)
      {
        v31 = *(_QWORD **)a7;
        v32 = ((uint64_t)v29 - *(_QWORD *)a7) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v34 = v28 - (_QWORD)v31;
        if (v34 >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v71, v35);
          v31 = *(_QWORD **)a7;
          v29 = *(_QWORD **)(a7 + 8);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[8 * v32];
        *(_QWORD *)v37 = v27;
        v30 = v37 + 8;
        while (v29 != v31)
        {
          v38 = *--v29;
          *((_QWORD *)v37 - 1) = v38;
          v37 -= 8;
        }
        *(_QWORD *)a7 = v37;
        *(_QWORD *)(a7 + 8) = v30;
        *(_QWORD *)(a7 + 16) = &v36[8 * v35];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v29 = v27;
        v30 = v29 + 1;
      }
      *(_QWORD *)(a7 + 8) = v30;
      v39 = (_DWORD *)(*a1 + 80 * v14 + 24);
      v41 = *(_DWORD **)(a4 + 8);
      v40 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v41 >= v40)
      {
        v43 = *(_DWORD **)a4;
        v44 = ((uint64_t)v41 - *(_QWORD *)a4) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = v40 - (_QWORD)v43;
        if (v46 >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v70, v47);
          v43 = *(_DWORD **)a4;
          v41 = *(_DWORD **)(a4 + 8);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[4 * v44];
        *(_DWORD *)v49 = *v39;
        v42 = v49 + 4;
        while (v41 != v43)
        {
          v50 = *--v41;
          *((_DWORD *)v49 - 1) = v50;
          v49 -= 4;
        }
        *(_QWORD *)a4 = v49;
        *(_QWORD *)(a4 + 8) = v42;
        *(_QWORD *)(a4 + 16) = &v48[4 * v47];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v41 = *v39;
        v42 = v41 + 1;
      }
      *(_QWORD *)(a4 + 8) = v42;
      v51 = (__int128 *)(*a1 + 80 * v14);
      v52 = a5[1];
      if (v52 >= a5[2])
      {
        v53 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, v51);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v51);
        v53 = v52 + 24;
      }
      a5[1] = v53;
      __p = 0;
      v74 = 0;
      v75 = 0;
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v75, 1uLL);
      v56 = (char *)__p;
      v57 = v74;
      *(_QWORD *)v55 = v14;
      v58 = v55 + 8;
      v59 = v55;
      while (v57 != v56)
      {
        v60 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *((_QWORD *)v59 - 1) = v60;
        v59 -= 8;
      }
      __p = v59;
      v74 = v55 + 8;
      v75 = &v55[8 * v54];
      if (v56)
        operator delete(v56);
      v74 = v58;
      v61 = a3[1];
      if (v61 >= a3[2])
      {
        v62 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(a3, (uint64_t)&__p);
      }
      else
      {
        std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>((uint64_t)a3, (uint64_t)&__p);
        v62 = v61 + 24;
      }
      a3[1] = v62;
      v63 = *a1;
      v64 = (uint64_t *)(*a1 + 80 * v14 + 56);
      v65 = v77;
      if ((unint64_t)v77 >= v78)
      {
        v66 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v76, v64);
      }
      else
      {
        *v77 = 0;
        v65[1] = 0;
        v65[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v65, *v64, *(_QWORD *)(v63 + 80 * v14 + 64), 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v63 + 80 * v14 + 64) - *v64) >> 5));
        v66 = (uint64_t)(v65 + 3);
      }
      v77 = (_QWORD *)v66;
      if (__p)
      {
        v74 = (char *)__p;
        operator delete(__p);
      }
      ++v14;
      v7 = *a1;
    }
    while (v14 < 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  }
  v67 = a2[1];
  if (v67 >= a2[2])
  {
    v68 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a2, &v76);
  }
  else
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a2, &v76);
    v68 = v67 + 24;
  }
  a2[1] = v68;
  __p = &v76;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADAC3E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  __p = &a18;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::RankingResultCombiner::combineResults(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53[4];

  memset(v53, 0, 24);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v47, *(const void **)(a1 + 1608), *(_QWORD *)(a1 + 1616), (uint64_t)(*(_QWORD *)(a1 + 1616) - *(_QWORD *)(a1 + 1608)) >> 2);
  quasar::getNBestFromSausage(a2, a3, a4, &v47, *(_BYTE *)(a1 + 1604), (uint64_t *)v53);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  quasar::removeRedundantAlternativesAndPrune(v53, *(int *)(a1 + 1600), &v50);
  if (quasar::gLogLevel >= 5)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Final alternatives list:", 24);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
    v19 = v50;
    v18 = v51;
    if (v51 != v50)
    {
      v20 = 0;
      v21 = 0;
      v22 = quasar::gLogLevel;
      do
      {
        if (v22 >= 5)
        {
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v30 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
          v23 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" : ", 3);
          v24 = (_QWORD *)std::ostream::operator<<();
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" -> ", 4);
          v26 = v50 + v20;
          v27 = *(char *)(v50 + v20 + 23);
          if (v27 >= 0)
            v28 = v50 + v20;
          else
            v28 = *(_QWORD *)v26;
          if (v27 >= 0)
            v29 = *(unsigned __int8 *)(v26 + 23);
          else
            v29 = *(_QWORD *)(v26 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v28, v29);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v30);
          v22 = quasar::gLogLevel;
          v19 = v50;
          v18 = v51;
        }
        ++v21;
        v20 += 80;
      }
      while (v21 < 0xCCCCCCCCCCCCCCCDLL * ((v18 - v19) >> 4));
    }
  }
  quasar::generateCombinedOutputSimple(&v50, a5, a6, a7, a8, a9, a10);
  *(_QWORD *)&v30 = &v50;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(_QWORD *)&v30 = v53;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1ADAC40CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  a9 = v9 - 136;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = v9 - 112;
  std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

float quasar::computeOverlap(quasar *this, float *a2, float *a3, float *a4, const float *a5)
{
  float v5;
  float result;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v14;

  v5 = *a3;
  result = -100000.0;
  if (*a3 >= 0.0)
  {
    v7 = *a4;
    if (*a4 >= 0.0)
    {
      v8 = *(float *)this;
      v9 = *a2;
      if (*(float *)this > v5 || v9 < v7)
      {
        v11 = v9 - v8;
        if (v9 > v7)
          v11 = v7 - v8;
        v12 = v9 - v5;
        if (v8 < v5)
          v13 = v12;
        else
          v13 = v11;
      }
      else
      {
        v13 = v7 - v5;
      }
      v14 = v7 - v5;
      result = v13 / v14;
      if (v14 == 0.0)
        return 1.0;
    }
  }
  return result;
}

void quasar::RearrangeConfusionNetworkUsingTiming(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const float *a5)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  float v14;
  float v15;
  unsigned int v16;
  const float *v17;
  float v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  std::string *v22;
  std::string *v23;
  const float *v24;
  float v25;
  uint64_t v26;
  float v27;
  unsigned int v28;
  float v29;
  std::string *v30;
  uint64_t *v31;
  unint64_t v32;
  std::string *v33;
  uint64_t *v34;
  uint64_t p_size;
  std::string *i;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  float v44;
  float v45;
  float v46;
  void **v47;
  std::string *v48;
  unint64_t v49;
  void **v50;
  std::string *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  void ***v56;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v6 = *(uint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v7 = 0;
    while (1)
    {
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v8 = &v6[3 * v7];
      v9 = (unsigned int *)*v8;
      if (v8[1] != *v8)
        break;
LABEL_42:
      v42 = v54;
      if ((unint64_t)v54 >= v55)
      {
        v43 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v53, (uint64_t *)&v47);
      }
      else
      {
        *v54 = 0;
        v42[1] = 0;
        v42[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v42, (uint64_t)v47, (uint64_t)v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 5));
        v43 = v42 + 3;
      }
      v54 = v43;
      v56 = &v47;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      ++v7;
      v6 = *(uint64_t **)a1;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
        goto LABEL_46;
    }
    v10 = 0;
    v11 = v7 - 1;
    v12 = v7 + 1;
    while (1)
    {
      if (!v10)
      {
        v22 = v48;
        if ((unint64_t)v48 >= v49)
        {
          v23 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v47, (const quasar::Token *)v9);
        }
        else
        {
          quasar::Token::Token(v48, (const quasar::Token *)v9);
          v23 = (std::string *)((char *)v22 + 224);
        }
        v48 = v23;
        std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token*>,std::__wrap_iter<quasar::Token*>>((uint64_t *)&v47, (__int128 *)v23, (const quasar::Token *)v50, (uint64_t)v51, 0x6DB6DB6DB6DB6DB7 * (((char *)v51 - (char *)v50) >> 5));
        v37 = (std::string *)v50;
        for (i = v51; i != v37; quasar::Token::~Token((void **)&i[-10].__r_.__value_.__r.__words[2]))
          ;
        v51 = v37;
        goto LABEL_37;
      }
      v13 = &v9[56 * v10];
      v14 = (float)v13[7];
      *(float *)&v56 = v14;
      v15 = (float)v13[8];
      v16 = v9[8];
      v45 = (float)v9[7];
      v46 = v15;
      v44 = (float)v16;
      v18 = quasar::computeOverlap((quasar *)&v56, &v46, &v45, &v44, a5);
      *(float *)&v56 = v14;
      v46 = v15;
      if (v7)
      {
        v19 = v6[3 * v11];
        v20 = (float)*(unsigned int *)(v19 + 28);
        v21 = *(_DWORD *)(v19 + 32);
      }
      else
      {
        v21 = -1;
        v20 = 4295000000.0;
      }
      v45 = v20;
      v44 = (float)v21;
      v25 = quasar::computeOverlap((quasar *)&v56, &v46, &v45, &v44, v17);
      *(float *)&v56 = v14;
      v46 = v15;
      if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v6) >> 3))
      {
        v28 = -1;
        v27 = 4295000000.0;
      }
      else
      {
        v26 = v6[3 * v12];
        v27 = (float)*(unsigned int *)(v26 + 28);
        v28 = *(_DWORD *)(v26 + 32);
      }
      v45 = v27;
      v44 = (float)v28;
      v29 = quasar::computeOverlap((quasar *)&v56, &v46, &v45, &v44, v24);
      if (v18 < v29 || v18 < v25)
      {
        if (v25 > v18 && v25 >= v29)
        {
          v31 = &v53[3 * v11];
          v33 = (std::string *)v31[1];
          v32 = v31[2];
          v34 = v31 + 1;
          if ((unint64_t)v33 >= v32)
          {
            p_size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v53[3 * v11], (const quasar::Token *)v13);
          }
          else
          {
            quasar::Token::Token(v33, (const quasar::Token *)v13);
            p_size = (uint64_t)&v33[9].__r_.__value_.__l.__size_;
            *v34 = (uint64_t)&v33[9].__r_.__value_.__l.__size_;
          }
          *v34 = p_size;
          goto LABEL_37;
        }
        if (v29 > v18 && v29 >= v25)
        {
          v38 = v51;
          if ((unint64_t)v51 >= v52)
          {
            v39 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v50, (const quasar::Token *)v13);
          }
          else
          {
            quasar::Token::Token(v51, (const quasar::Token *)v13);
            v39 = (std::string *)((char *)v38 + 224);
          }
          v51 = v39;
          goto LABEL_37;
        }
        v30 = v48;
        if ((unint64_t)v48 < v49)
        {
LABEL_35:
          quasar::Token::Token(v48, (const quasar::Token *)v13);
          v40 = (std::string *)((char *)v30 + 224);
          goto LABEL_36;
        }
      }
      else
      {
        v30 = v48;
        if ((unint64_t)v48 < v49)
          goto LABEL_35;
      }
      v40 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v47, (const quasar::Token *)v13);
LABEL_36:
      v48 = v40;
LABEL_37:
      ++v10;
      v6 = *(uint64_t **)a1;
      v41 = *(_QWORD *)a1 + 24 * v7;
      v9 = *(unsigned int **)v41;
      if (v10 >= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v41 + 8) - *(_QWORD *)v41) >> 5))
        goto LABEL_42;
    }
  }
LABEL_46:
  if (&v53 != (uint64_t **)a1)
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1, v53, v54, 0xAAAAAAAAAAAAAAABLL * (v54 - v53));
  v47 = (void **)&v50;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v47);
  v50 = (void **)&v53;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v50);
}

void sub_1ADAC45A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  a11 = &a14;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a14 = (void **)&a17;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

float quasar::GetConsensusHypFromSausage(uint64_t *a1, uint64_t a2, float *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL4 isPrintable;
  const quasar::Token *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  std::string *v56;
  size_t v57;
  size_t v58;
  std::string *v59;
  const void *v60;
  uint64_t v61;
  int v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  char v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  float result;
  uint64_t v71;
  std::string v76;
  _BYTE __str[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v5 = a4;
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    v71 = a5 + 16;
    do
    {
      v9 = (uint64_t *)(v6 + 24 * v8);
      v10 = *v9;
      v11 = v9[1];
      v12 = quasar::gLogLevel;
      if (v11 == v10)
      {
        v15 = 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = -10000.0;
        do
        {
          v17 = *(float *)(v10 + v13 + 40);
          if (v12 >= 5)
          {
            v91 = 0u;
            v92 = 0u;
            v89 = 0u;
            v90 = 0u;
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            v81 = 0u;
            v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            v78 = 0u;
            memset(__str, 0, sizeof(__str));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"DECODER OPTION in slot ", 23);
            v18 = (_QWORD *)std::ostream::operator<<();
            v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" word ", 6);
            v20 = *(_QWORD *)(*a1 + 24 * v8) + v13;
            v21 = *(char *)(v20 + 23);
            if (v21 >= 0)
              v22 = *(_QWORD *)(*a1 + 24 * v8) + v13;
            else
              v22 = *(_QWORD *)v20;
            if (v21 >= 0)
              v23 = *(unsigned __int8 *)(v20 + 23);
            else
              v23 = *(_QWORD *)(v20 + 8);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" score = ", 9);
            v25 = (_QWORD *)std::ostream::operator<<();
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" phoneSeq ", 10);
            v27 = *(_QWORD *)(*a1 + 24 * v8) + v13;
            v30 = *(_QWORD *)(v27 + 48);
            v28 = v27 + 48;
            v29 = v30;
            v31 = *(char *)(v28 + 23);
            if (v31 >= 0)
              v32 = v28;
            else
              v32 = v29;
            if (v31 >= 0)
              v33 = *(unsigned __int8 *)(v28 + 23);
            else
              v33 = *(_QWORD *)(v28 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v32, v33);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
            v12 = quasar::gLogLevel;
            v6 = *a1;
          }
          if (v17 > v16)
          {
            v15 = v14;
            v16 = v17;
          }
          ++v14;
          v10 = *(_QWORD *)(v6 + 24 * v8);
          v13 += 224;
        }
        while (v14 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v6 + 24 * v8 + 8) - v10) >> 5));
      }
      v5 = a4;
      if (v12 > 4)
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"CONSENSUS in slot ", 18);
        v34 = (_QWORD *)std::ostream::operator<<();
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" selected word ", 15);
        v36 = *(_QWORD *)(*a1 + 24 * v8) + 224 * v15;
        v37 = *(char *)(v36 + 23);
        if (v37 >= 0)
          v38 = *(_QWORD *)(*a1 + 24 * v8) + 224 * v15;
        else
          v38 = *(_QWORD *)v36;
        if (v37 >= 0)
          v39 = *(unsigned __int8 *)(v36 + 23);
        else
          v39 = *(_QWORD *)(v36 + 8);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v38, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" score = ", 9);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
        v6 = *a1;
      }
      isPrintable = quasar::Token::isPrintable((quasar::Token *)(*(_QWORD *)(v6 + 24 * v8) + 224 * v15));
      v6 = *a1;
      if (!isPrintable)
        goto LABEL_85;
      v42 = (const quasar::Token *)(*(_QWORD *)(v6 + 24 * v8) + 224 * v15);
      v43 = a4[1];
      if (v43 >= a4[2])
      {
        v44 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a4, v42);
      }
      else
      {
        quasar::Token::Token((std::string *)a4[1], v42);
        v44 = v43 + 224;
        a4[1] = v43 + 224;
      }
      a4[1] = v44;
      v46 = *(unint64_t **)(a5 + 8);
      v45 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v46 >= v45)
      {
        v48 = *(unint64_t **)a5;
        v49 = ((uint64_t)v46 - *(_QWORD *)a5) >> 3;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v51 = v45 - (_QWORD)v48;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v71, v52);
          v48 = *(unint64_t **)a5;
          v46 = *(unint64_t **)(a5 + 8);
        }
        else
        {
          v53 = 0;
        }
        v54 = (unint64_t *)&v53[8 * v49];
        *v54 = v15;
        v47 = v54 + 1;
        while (v46 != v48)
        {
          v55 = *--v46;
          *--v54 = v55;
        }
        *(_QWORD *)a5 = v54;
        *(_QWORD *)(a5 + 8) = v47;
        *(_QWORD *)(a5 + 16) = &v53[8 * v52];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *v46 = v15;
        v47 = v46 + 1;
      }
      *(_QWORD *)(a5 + 8) = v47;
      v56 = (std::string *)a2;
      if (*(char *)(a2 + 23) < 0)
      {
        v57 = *(_QWORD *)(a2 + 8);
        if (!v57)
        {
LABEL_74:
          v68 = *(_QWORD *)(*a1 + 24 * v8) + 224 * v15;
          if (*(char *)(v68 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v68, *(_QWORD *)(v68 + 8));
            v56 = (std::string *)a2;
          }
          else
          {
            v69 = *(_OWORD *)v68;
            *(_QWORD *)&__str[16] = *(_QWORD *)(v68 + 16);
            *(_OWORD *)__str = v69;
          }
          v66 = 1;
          goto LABEL_78;
        }
      }
      else
      {
        if (!*(_BYTE *)(a2 + 23))
          goto LABEL_74;
        v57 = *(_QWORD *)(a2 + 8);
      }
      if (*(char *)(a2 + 23) >= 0)
        v58 = *(unsigned __int8 *)(a2 + 23);
      else
        v58 = v57;
      std::string::basic_string[abi:ne180100]((uint64_t)&v76, v58 + 1);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v76;
      else
        v59 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (v58)
      {
        if (*(char *)(a2 + 23) >= 0)
          v60 = (const void *)a2;
        else
          v60 = *(const void **)a2;
        memmove(v59, v60, v58);
      }
      *(_WORD *)((char *)&v59->__r_.__value_.__l.__data_ + v58) = 32;
      v61 = *(_QWORD *)(*a1 + 24 * v8) + 224 * v15;
      v62 = *(char *)(v61 + 23);
      if (v62 >= 0)
        v63 = (const std::string::value_type *)(*(_QWORD *)(*a1 + 24 * v8) + 224 * v15);
      else
        v63 = *(const std::string::value_type **)v61;
      if (v62 >= 0)
        v64 = *(unsigned __int8 *)(v61 + 23);
      else
        v64 = *(_QWORD *)(v61 + 8);
      v65 = std::string::append(&v76, v63, v64);
      v66 = 0;
      v67 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      *(_QWORD *)&__str[16] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
      *(_OWORD *)__str = v67;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v56 = (std::string *)a2;
      v5 = a4;
LABEL_78:
      std::string::operator=(v56, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__str);
        if ((v66 & 1) == 0)
        {
LABEL_82:
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
        }
      }
      else if ((v66 & 1) == 0)
      {
        goto LABEL_82;
      }
      v6 = *a1;
      *a3 = *(float *)(*(_QWORD *)(*a1 + 24 * v8) + 224 * v15 + 40) + *a3;
LABEL_85:
      ++v8;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - v6) >> 3));
  }
  result = *a3 / (float)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 5));
  *a3 = result;
  return result;
}

void sub_1ADAC4BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v26 + 8) = v25;
  _Unwind_Resume(exception_object);
}

uint64_t quasar::MergeConfusionNetworks(int a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v5 = *(_QWORD *)(a3[1] - 24);
  v6 = *(unsigned int *)(v5 + 36);
  v7 = *(_DWORD *)(v5 + 28);
  if (quasar::gLogLevel >= 5)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"End time of competing confusion network is ", 43);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
  }
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      if ((v10 & 1) != 0)
        goto LABEL_6;
      v13 = *(_QWORD *)(v8 + 24 * v9);
      v14 = *(_DWORD *)(v13 + 28);
      if (v14 == (_DWORD)v6)
        break;
      v15 = *(_DWORD *)(v13 + 32);
      v16 = v15 - v14;
      if (v15 < v14)
        ++v16;
      v17 = v14 >= (int)v6 || v15 <= (int)v6;
      if (!v17 && (float)(int)v6 < (float)(v14 + (v16 >> 1)))
      {
        v18 = v6 - v14;
        if ((int)v6 - v14 <= a1)
        {
          v33 = a3[1];
          v34 = *(_QWORD *)(v33 - 24);
          v35 = *(_QWORD *)(v33 - 16);
          if (v34 == v35)
          {
            LODWORD(v11) = -1;
          }
          else
          {
            v36 = 0xFFFFFFFFLL;
            do
            {
              v11 = v6;
              if (v14 > v7)
              {
                *(_DWORD *)(v34 + 32) = v14;
                *(_DWORD *)(v34 + 36) = v14;
                v11 = v36;
              }
              v34 += 224;
              v36 = v11;
            }
            while (v34 != v35);
          }
          if (quasar::gLogLevel > 4)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Backbone word starts before the end of the competing CN, ends after and covers more audio. Merge starting at ", 132);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
        }
        else
        {
          if (quasar::gLogLevel >= 5)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Exceeded the maximum allowable shift amount (", 68);
            v19 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") with ", 7);
            v20 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" won't try to merge anymore.", 28);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
          v11 = *a3;
          v21 = a3[1];
          while (v21 != v11)
          {
            v21 -= 24;
            *(_QWORD *)&v42 = v21;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
          }
          a3[1] = v11;
          LODWORD(v11) = -1;
        }
        if (v18 > a1)
          return 0;
LABEL_7:
        if (quasar::gLogLevel >= 5)
        {
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Merging the word/words in slot ", 31);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" onto the end of the competing confusion network", 48);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
        }
LABEL_26:
        v22 = a3[1];
        v23 = *a2;
        if (*a3 != v22)
          *(_DWORD *)(*(_QWORD *)(v22 - 24) + 32) = *(_DWORD *)(*(_QWORD *)(v23 + 24 * v9) + 28);
        v24 = (uint64_t *)(v23 + 24 * v9);
        if (v22 >= a3[2])
        {
          v25 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a3, v24);
        }
        else
        {
          std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a3, v24);
          v25 = v22 + 24;
        }
        a3[1] = v25;
        if ((v11 & 0x80000000) == 0)
        {
          v26 = *(_QWORD *)(v25 - 24);
          v27 = *(_QWORD *)(v25 - 16);
          while (v26 != v27)
          {
            *(_DWORD *)(v26 + 28) = v11;
            v26 += 224;
          }
        }
        v10 = 1;
        goto LABEL_36;
      }
      v28 = v14 - v6;
      if (v14 > (int)v6)
      {
        if (v28 <= a1)
        {
          v37 = a3[1];
          v38 = *(_QWORD *)(v37 - 24);
          v39 = *(_QWORD *)(v37 - 16);
          while (v38 != v39)
          {
            *(_DWORD *)(v38 + 32) = v14;
            *(_DWORD *)(v38 + 36) = v14;
            v38 += 224;
          }
          if (quasar::gLogLevel > 4)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Backbone word starts after end of the competing CN, and haven't started merging yet, and the word doesn't start too long after. Merge starting at ", 169);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
        }
        else
        {
          if (quasar::gLogLevel >= 5)
          {
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: We have exceeded the maximum allowable shift amount (", 76);
            v29 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") with ", 7);
            v30 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" we won't try to merge anymore.", 31);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
          }
          v31 = *a3;
          v32 = a3[1];
          while (v32 != v31)
          {
            v32 -= 24;
            *(_QWORD *)&v42 = v32;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
          }
          a3[1] = v31;
        }
        if (v28 > a1)
          return 0;
        goto LABEL_6;
      }
      v10 = 0;
LABEL_36:
      ++v9;
      v8 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v9)
        return 1;
    }
    if (quasar::gLogLevel < 5)
    {
      LODWORD(v11) = -1;
      goto LABEL_26;
    }
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"ConfusionNetworkMerge: Backbone word starts at the same time as the end of the competing CN. Merge starting at ", 111);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v42);
LABEL_6:
    LODWORD(v11) = -1;
    goto LABEL_7;
  }
  return 1;
}

void sub_1ADAC51AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::GetConfusionNetworkConfidence(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  float v3;
  float v4;
  const quasar::Token *v5;
  const quasar::Token *v6;
  float v7;
  std::string v8;
  float v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  const quasar::Token *v20;
  const quasar::Token *v21;
  uint64_t v22;
  void **v23;

  v1 = *a1;
  v2 = a1[1];
  v3 = 0.0;
  v4 = 0.0;
  if (*a1 != v2)
  {
    do
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v20, *v1, v1[1], 0x6DB6DB6DB6DB6DB7 * ((v1[1] - *v1) >> 5));
      v5 = v20;
      v6 = v21;
      while (v5 != v6)
      {
        quasar::Token::Token(&v8, v5);
        if (quasar::Token::isPrintable((quasar::Token *)&v8))
        {
          v3 = v3 + 1.0;
          v7 = v9;
        }
        else
        {
          v7 = -0.0;
        }
        if (v19 < 0)
          operator delete(__p);
        if (v17 < 0)
          operator delete(v16);
        v23 = (void **)&v15;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v23);
        if (v14 < 0)
          operator delete(v13);
        v23 = (void **)&v12;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
        if (v11 < 0)
          operator delete(v10);
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        v4 = v4 + v7;
        v5 = (const quasar::Token *)((char *)v5 + 224);
      }
      v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
      v1 += 3;
    }
    while (v1 != v2);
  }
}

void sub_1ADAC535C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 160);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::CheckConfusionNetworkForRegion(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  const quasar::Token *v4;
  const quasar::Token *v5;
  char *v6;
  char *v7;
  __int128 v8;
  char v9;
  uint64_t *v11;
  void *v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string v29;
  void *__p[2];
  char v31;
  std::string v32;
  std::string v33;
  void *v34;
  char v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  const quasar::Token *v44;
  const quasar::Token *v45;
  uint64_t v46;

  v2 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    while (2)
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v44, *v2, v2[1], 0x6DB6DB6DB6DB6DB7 * ((v2[1] - *v2) >> 5));
      v4 = v44;
      v5 = v45;
      while (v4 != v5)
      {
        quasar::Token::Token(&v33, v4);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v32, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
        else
          v32 = v33;
        std::string::basic_string[abi:ne180100]<0>(v12, "~w00");
        std::string::basic_string[abi:ne180100]<0>(__p, " ");
        quasar::replaceAll((uint64_t)&v32, (uint64_t)v12, (char *)__p);
        if (v31 < 0)
          operator delete(__p[0]);
        if (SBYTE7(v13) < 0)
          operator delete(v12[0]);
        std::string::basic_string[abi:ne180100]<0>(v12, "\\ ");
        quasar::split((uint64_t)&v32, (uint64_t *)v12, 1, (uint64_t)__p);
        if (SBYTE7(v13) < 0)
          operator delete(v12[0]);
        v7 = (char *)__p[0];
        v6 = (char *)__p[1];
        while (1)
        {
          if (v7 == v6)
          {
            v9 = 1;
            goto LABEL_28;
          }
          if (v7[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
          }
          else
          {
            v8 = *(_OWORD *)v7;
            v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)&v29))
          {
            break;
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          v7 += 24;
        }
        if (quasar::gLogLevel >= 5)
        {
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v23 = 0u;
          v24 = 0u;
          v21 = 0u;
          v22 = 0u;
          v19 = 0u;
          v20 = 0u;
          v17 = 0u;
          v18 = 0u;
          v15 = 0u;
          v16 = 0u;
          v13 = 0u;
          v14 = 0u;
          *(_OWORD *)v12 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Found a region of interest in the confusion network", 51);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        v9 = 0;
LABEL_28:
        v12[0] = __p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (v43 < 0)
          operator delete(v42);
        if (v41 < 0)
          operator delete(v40);
        v12[0] = &v39;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
        if (v38 < 0)
          operator delete(v37);
        v12[0] = &v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
        if (v35 < 0)
          operator delete(v34);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if ((v9 & 1) == 0)
        {
          v12[0] = &v44;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
          return 1;
        }
        v4 = (const quasar::Token *)((char *)v4 + 224);
      }
      v12[0] = &v44;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
      v2 += 3;
      if (v2 != v11)
        continue;
      break;
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Could not find a region of interest in the confusion network", 60);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v12);
  }
  return 0;
}

void sub_1ADAC56EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfusionNetworkCombiner::SelectSystems(uint64_t a1, int a2, int *a3, uint64_t a4, _QWORD *a5)
{
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t **v33;
  uint64_t *v34;
  _QWORD v36[5];
  _QWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  quasar::GetConfusionNetworkConfidence((uint64_t **)a4);
  v11 = v10;
  quasar::GetConfusionNetworkConfidence((uint64_t **)(*a5 + 24 * a2));
  v13 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 == v13 || (v14 = *(_QWORD *)(v13 - 24), v14 == *(_QWORD *)(v13 - 16)))
    v15 = 0;
  else
    v15 = *(_DWORD *)(v14 + 36);
  v16 = (uint64_t *)(*a5 + 24 * a2);
  v18 = *v16;
  v17 = v16[1];
  if (v18 == v17 || (v19 = *(_QWORD *)(v17 - 24), v19 == *(_QWORD *)(v17 - 16)))
    v20 = 0;
  else
    v20 = *(_DWORD *)(v19 + 36);
  v21 = v12 - *(float *)(a1 + 1708);
  if (quasar::gLogLevel >= 5)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"BestConfidence is ", 18);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Competing Confidence for system ", 32);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" is ", 4);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
      if (quasar::gLogLevel >= 5)
      {
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Best system End Time is ", 24);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
        if (quasar::gLogLevel >= 5)
        {
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v38 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"End time for competing system ", 30);
          v23 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" is ", 4);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
        }
      }
    }
  }
  v24 = (unsigned __int8 **)(*(_QWORD *)(a1 + 1640) + 24 * *a3);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v37, *v24, v24[1]);
  v25 = (unsigned __int8 **)(*(_QWORD *)(a1 + 1640) + 24 * a2);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v36, *v25, v25[1]);
  if (v15 - v20 < *(_DWORD *)(a1 + 1692))
    goto LABEL_15;
  if (quasar::gLogLevel >= 4)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Competing system does not cover enough speech (max truncation is ", 65);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ,current truncation is ", 24);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 2);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v38);
  }
  if (*(_BYTE *)(a1 + 1633))
  {
    if ((quasar::MergeConfusionNetworks(*(_DWORD *)(a1 + 1696), (uint64_t *)a4, (uint64_t *)(*a5 + 24 * a2)) & 1) != 0)
    {
      if (quasar::gLogLevel >= 5)
      {
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Proceeding with selection logic using merged partial confusion network", 70);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
      }
LABEL_15:
      if (*(_BYTE *)(a1 + 1630) && (quasar::CheckConfusionNetworkForRegion((uint64_t **)a4, v37) & 1) == 0)
        v26 = quasar::CheckConfusionNetworkForRegion((uint64_t **)(*a5 + 24 * a2), v36);
      else
        v26 = 1;
      if (v11 + 0.00001 < v21 && v26 != 0)
      {
        if (quasar::gLogLevel >= 4)
        {
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v38 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Switching selected system from ", 31);
          v30 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" to ", 4);
          v31 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" new score = ", 13);
          v32 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" old score = ", 13);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v38);
        }
        v33 = (uint64_t **)(*a5 + 24 * a2);
        if (v33 != (uint64_t **)a4)
        {
          v34 = *(uint64_t **)(*a5 + 24 * a2 + 8);
          std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a4, *v33, v34, 0xAAAAAAAAAAAAAAABLL * (v34 - *v33));
        }
        *a3 = a2;
      }
      goto LABEL_34;
    }
    if (quasar::gLogLevel >= 5)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Exiting selection logic", 23);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v38);
    }
  }
LABEL_34:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v37);
}

void sub_1ADAC5D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void quasar::RemovePhoneDurations(const std::string *__s@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int64_t size;
  const std::string *v6;
  _BYTE *v7;
  std::string *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  std::string *p_p;
  const void *v14;
  int v15;
  const std::string *data;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  std::string __p;
  const std::string *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v4 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&__s->__r_.__value_.__l + 2);
LABEL_4:
    size = v4;
    v6 = __s;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external((std::string *)a2, __s->__r_.__value_.__l.__data_, __s->__r_.__value_.__l.__size_);
  v4 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) == 0)
    goto LABEL_4;
  v6 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  size = __s->__r_.__value_.__l.__size_;
LABEL_5:
  if (size >= 1)
  {
    v7 = (char *)v6 + size;
    v8 = (std::string *)v6;
    do
    {
      v9 = memchr(v8, 95, size);
      if (!v9)
        break;
      if (*v9 == 95)
      {
        if (v9 != v7 && v9 - (_BYTE *)v6 != -1)
        {
          kaldi::SplitStringToVector(__s, "_", 1, (uint64_t)&v22);
          if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3) >= 2)
          {
            std::string::operator=((std::string *)a2, v22);
            if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3) >= 3)
            {
              v10 = 0;
              v11 = 2;
              do
              {
                if (*(char *)(a2 + 23) >= 0)
                  v12 = *(unsigned __int8 *)(a2 + 23);
                else
                  v12 = *(_QWORD *)(a2 + 8);
                std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 1);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if (v12)
                {
                  if (*(char *)(a2 + 23) >= 0)
                    v14 = (const void *)a2;
                  else
                    v14 = *(const void **)a2;
                  memmove(p_p, v14, v12);
                }
                *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v12) = 32;
                v15 = SHIBYTE(v22[v10 + 2].__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  data = &v22[v10 + 2];
                else
                  data = (const std::string *)v22[v10 + 2].__r_.__value_.__l.__data_;
                if (v15 >= 0)
                  v17 = HIBYTE(v22[v10 + 2].__r_.__value_.__r.__words[2]);
                else
                  v17 = v22[v10 + 2].__r_.__value_.__l.__size_;
                v18 = std::string::append(&__p, (const std::string::value_type *)data, v17);
                v19 = v18->__r_.__value_.__r.__words[0];
                v25[0] = v18->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
                v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
                v18->__r_.__value_.__l.__size_ = 0;
                v18->__r_.__value_.__r.__words[2] = 0;
                v18->__r_.__value_.__r.__words[0] = 0;
                if (*(char *)(a2 + 23) < 0)
                  operator delete(*(void **)a2);
                *(_QWORD *)a2 = v19;
                *(_QWORD *)(a2 + 8) = v25[0];
                *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v25 + 7);
                *(_BYTE *)(a2 + 23) = v20;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v11 += 2;
                v10 += 2;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 3) > v11);
            }
          }
        }
        break;
      }
      v8 = (std::string *)(v9 + 1);
      size = v7 - (_BYTE *)v8;
    }
    while (v7 - (_BYTE *)v8 >= 1);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADAC6038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::FlattenConfusionNetworks(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string::size_type size;
  const std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::string v27;
  std::string v28;
  std::string v29;
  int v30;
  float v31;
  std::string::value_type v32;
  std::string __p;
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  std::string *v42;
  std::string *v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;

  v3 = *a1;
  if (a1[1] != *a1)
  {
    v6 = 0;
    do
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      if (*(_QWORD *)(v3 + 24 * v6 + 8) != *(_QWORD *)(v3 + 24 * v6))
      {
        v7 = 0;
        do
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v8 = *(_QWORD *)(*(_QWORD *)(v3 + 24 * v6) + 24 * v7);
          if (*(_QWORD *)(*(_QWORD *)(v3 + 24 * v6) + 24 * v7 + 8) != v8)
          {
            v9 = 0;
            do
            {
              v10 = v8 + 24 * v9;
              if (*(_QWORD *)(v10 + 8) != *(_QWORD *)v10)
              {
                quasar::Token::Token(&v29, *(const quasar::Token **)v10);
                v31 = *(float *)(*a2 + 4 * v6) * v31;
                quasar::RemovePhoneDurations(&__p, (uint64_t)&v28);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                __p = v28;
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 24 * v6) + 24 * v7)
                                                             + 24 * v9
                                                             + 8)
                                                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 24 * v6) + 24 * v7)
                                                             + 24 * v9)) >> 5)) >= 2)
                {
                  v11 = 272;
                  v12 = 1;
                  do
                  {
                    std::operator+<char>();
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v13 = &v28;
                    else
                      v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
                    else
                      size = v28.__r_.__value_.__l.__size_;
                    std::string::append(&v29, (const std::string::value_type *)v13, size);
                    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v28.__r_.__value_.__l.__data_);
                    v15 = (const std::string *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 24 * v6) + 24 * v7) + 24 * v9)
                                              + v11);
                    v30 = v15[-1].__r_.__value_.__r.__words[1];
                    v32 = v15[-1].__r_.__value_.__s.__data_[20];
                    v31 = (float)(v31
                                * (float)(*(float *)&v15[-1].__r_.__value_.__r.__words[2] * *(float *)(*a2 + 4 * v6)))
                        / 1000.0;
                    quasar::RemovePhoneDurations(v15, (uint64_t)&v27);
                    v16 = std::string::insert(&v27, 0, " ");
                    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
                    v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
                    v16->__r_.__value_.__l.__size_ = 0;
                    v16->__r_.__value_.__r.__words[2] = 0;
                    v16->__r_.__value_.__r.__words[0] = 0;
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v18 = &v28;
                    else
                      v18 = (std::string *)v28.__r_.__value_.__r.__words[0];
                    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v19 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
                    else
                      v19 = v28.__r_.__value_.__l.__size_;
                    std::string::append(&__p, (const std::string::value_type *)v18, v19);
                    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v28.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v27.__r_.__value_.__l.__data_);
                    ++v12;
                    v11 += 224;
                  }
                  while (v12 < 0x6DB6DB6DB6DB6DB7
                              * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 24 * v6) + 24 * v7) + 24 * v9 + 8)
                                         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 24 * v6) + 24 * v7) + 24 * v9)) >> 5));
                }
                if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v28, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
                else
                  v28 = v29;
                v20 = v43;
                if ((unint64_t)v43 >= v44)
                {
                  v21 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v42, (const quasar::Token *)&v29);
                }
                else
                {
                  quasar::Token::Token(v43, (const quasar::Token *)&v29);
                  v21 = (std::string *)((char *)v20 + 224);
                }
                v43 = v21;
                if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v28.__r_.__value_.__l.__data_);
                if (v41 < 0)
                  operator delete(v40);
                if (v39 < 0)
                  operator delete(v38);
                v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
                if (v36 < 0)
                  operator delete(v35);
                v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v29.__r_.__value_.__l.__data_);
                v3 = *a1;
              }
              ++v9;
              v8 = *(_QWORD *)(*(_QWORD *)(v3 + 24 * v6) + 24 * v7);
            }
            while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(v3 + 24 * v6) + 24 * v7 + 8) - v8) >> 3));
            if (v43 != v42)
            {
              v22 = v46;
              if ((unint64_t)v46 >= v47)
              {
                v23 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v45, (uint64_t *)&v42);
              }
              else
              {
                *v46 = 0;
                v22[1] = 0;
                v22[2] = 0;
                std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v22, (uint64_t)v42, (uint64_t)v43, 0x6DB6DB6DB6DB6DB7 * (((char *)v43 - (char *)v42) >> 5));
                v23 = (uint64_t)(v22 + 3);
              }
              v46 = (_QWORD *)v23;
            }
          }
          v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
          ++v7;
          v3 = *a1;
        }
        while (v7 < 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(*(_QWORD *)(*a1 + 24 * v6 + 8) - *(_QWORD *)(*a1 + 24 * v6)) >> 3));
      }
      v24 = a3[1];
      if (v24 >= a3[2])
      {
        v25 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a3, &v45);
      }
      else
      {
        std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a3, &v45);
        v25 = v24 + 24;
      }
      a3[1] = v25;
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      ++v6;
      v3 = *a1;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void sub_1ADAC654C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  a24 = (void *)(v63 - 112);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void quasar::TransformConfusionNetwork(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ***v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t ***v13;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t **v26;
  unint64_t v27;
  void ***v28;

  v1 = *a1;
  if (a1[1] != *a1)
  {
    v2 = 0;
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v15 = v2;
      v3 = (uint64_t ***)(v1 + 24 * v2);
      v4 = *v3;
      v5 = v3[1];
      if (*v3 != v5)
      {
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v22, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (v4[1] - *v4));
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v6 = (uint64_t *)v22;
          v7 = (uint64_t *)v23;
          if (v22 != v23)
          {
            v8 = 0;
            do
            {
              v16 = 0;
              v17 = 0;
              v18 = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v16, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
              if (!v8)
              {
                v9 = v20;
                if ((unint64_t)v20 >= v21)
                {
                  v10 = (uint64_t *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v19, (uint64_t *)&v16);
                }
                else
                {
                  *v20 = 0;
                  v9[1] = 0;
                  v9[2] = 0;
                  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v9, (uint64_t)v16, v17, 0x6DB6DB6DB6DB6DB7 * ((v17 - (uint64_t)v16) >> 5));
                  v10 = v9 + 3;
                }
                v20 = v10;
              }
              v28 = &v16;
              std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
              --v8;
              v6 += 3;
            }
            while (v6 != v7);
          }
          v11 = v26;
          if ((unint64_t)v26 >= v27)
          {
            v12 = (uint64_t **)std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>((uint64_t *)&v25, &v19);
          }
          else
          {
            *v26 = 0;
            v11[1] = 0;
            v11[2] = 0;
            std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v11, v19, v20, 0xAAAAAAAAAAAAAAABLL * (v20 - v19));
            v12 = v11 + 3;
          }
          v26 = v12;
          v16 = (void **)&v19;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v16);
          v19 = (uint64_t *)&v22;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
          v4 += 3;
        }
        while (v4 != v5);
        v1 = *a1;
      }
      v13 = (uint64_t ***)(v1 + 24 * v15);
      if (v13 != &v25)
        std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)v13, v25, v26, 0xAAAAAAAAAAAAAAABLL * (v26 - v25));
      v22 = (void **)&v25;
      std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      v2 = v15 + 1;
      v1 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v15 + 1);
  }
}

void sub_1ADAC6884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a18 = (void **)&a21;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void quasar::ConfusionNetworkCombiner::combineResults(uint64_t a1, uint64_t ****a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  void *__p;
  void *v71;
  uint64_t v72;
  _QWORD v73[3];
  int v74;
  void *v75[2];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t *v94[3];
  uint64_t v95[3];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;

  v99 = *(_DWORD *)(a1 + 1688);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>(&v96, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  if (*(_BYTE *)(a1 + 1632))
    quasar::TransformConfusionNetwork(&v96);
  memset(v95, 0, sizeof(v95));
  quasar::FlattenConfusionNetworks(&v96, (_QWORD *)(a1 + 1664), v95);
  v15 = (uint64_t **)(v95[0] + 24 * *(int *)(a1 + 1688));
  memset(v94, 0, sizeof(v94));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v94, *v15, v15[1], 0xAAAAAAAAAAAAAAABLL * (v15[1] - *v15));
  if (v97 != v96)
  {
    v16 = 0;
    do
    {
      if (v16 != *(_DWORD *)(a1 + 1688))
      {
        if (*(_BYTE *)(a1 + 1629))
        {
          quasar::ConfusionNetworkCombiner::SelectSystems(a1, v16, &v99, (uint64_t)v94, v95);
          if (quasar::gLogLevel >= 5)
          {
            v92 = 0u;
            v93 = 0u;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v77 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Selected system is ", 19);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v77);
          }
        }
        else
        {
          quasar::ConfusionNetworkCombiner::SelectSystems(a1, v16, &v99, (uint64_t)v94, v95);
        }
      }
      ++v16;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(v75, "");
  v74 = 0;
  memset(v73, 0, sizeof(v73));
  __p = 0;
  v71 = 0;
  v72 = 0;
  quasar::RearrangeConfusionNetworkUsingTiming((uint64_t)v94, v17, v18, v19, v20);
  quasar::GetConsensusHypFromSausage((uint64_t *)v94, (uint64_t)v75, (float *)&v74, v73, (uint64_t)&__p);
  if (quasar::gLogLevel >= 5)
  {
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"FINAL HYPOTHESIS IS  : ", 23);
    if (v76 >= 0)
      v22 = v75;
    else
      v22 = (void **)v75[0];
    if (v76 >= 0)
      v23 = HIBYTE(v76);
    else
      v23 = (uint64_t)v75[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v77);
  }
  v24 = a8[1];
  if (v24 >= a8[2])
  {
    v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a8, (__int128 *)v75);
  }
  else
  {
    if (SHIBYTE(v76) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a8[1], (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
    }
    else
    {
      v25 = *(_OWORD *)v75;
      *(_QWORD *)(v24 + 16) = v76;
      *(_OWORD *)v24 = v25;
    }
    v26 = v24 + 24;
    a8[1] = v24 + 24;
  }
  a8[1] = v26;
  v27 = v99;
  v28 = *(_QWORD *)(a9 + 16);
  v29 = *(_QWORD **)(a9 + 8);
  if ((unint64_t)v29 >= v28)
  {
    v31 = *(_QWORD **)a9;
    v32 = ((uint64_t)v29 - *(_QWORD *)a9) >> 3;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v34 = v28 - (_QWORD)v31;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a9 + 16, v35);
      v31 = *(_QWORD **)a9;
      v29 = *(_QWORD **)(a9 + 8);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[8 * v32];
    v38 = &v36[8 * v35];
    *(_QWORD *)v37 = v27;
    v30 = v37 + 8;
    while (v29 != v31)
    {
      v39 = *--v29;
      *((_QWORD *)v37 - 1) = v39;
      v37 -= 8;
    }
    *(_QWORD *)a9 = v37;
    *(_QWORD *)(a9 + 8) = v30;
    *(_QWORD *)(a9 + 16) = v38;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *v29 = v99;
    v30 = v29 + 1;
  }
  *(_QWORD *)(a9 + 8) = v30;
  v40 = *(_QWORD *)(a10 + 16);
  v41 = *(_QWORD **)(a10 + 8);
  if ((unint64_t)v41 >= v40)
  {
    v43 = *(_QWORD **)a10;
    v44 = ((uint64_t)v41 - *(_QWORD *)a10) >> 3;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v46 = v40 - (_QWORD)v43;
    if (v46 >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a10 + 16, v47);
      v43 = *(_QWORD **)a10;
      v41 = *(_QWORD **)(a10 + 8);
    }
    else
    {
      v48 = 0;
    }
    v49 = &v48[8 * v44];
    v50 = &v48[8 * v47];
    *(_QWORD *)v49 = 0;
    v42 = v49 + 8;
    while (v41 != v43)
    {
      v51 = *--v41;
      *((_QWORD *)v49 - 1) = v51;
      v49 -= 8;
    }
    *(_QWORD *)a10 = v49;
    *(_QWORD *)(a10 + 8) = v42;
    *(_QWORD *)(a10 + 16) = v50;
    if (v43)
      operator delete(v43);
  }
  else
  {
    *v41 = 0;
    v42 = v41 + 1;
  }
  *(_QWORD *)(a10 + 8) = v42;
  v52 = a6[1];
  if (v52 >= a6[2])
  {
    v53 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(a6, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>((uint64_t)a6, (uint64_t)&__p);
    v53 = v52 + 24;
  }
  a6[1] = v53;
  quasar::GetConfusionNetworkConfidence(v94);
  v55 = v54;
  v56 = *(_QWORD *)(a7 + 16);
  v57 = *(_DWORD **)(a7 + 8);
  if ((unint64_t)v57 >= v56)
  {
    v59 = *(_DWORD **)a7;
    v60 = ((uint64_t)v57 - *(_QWORD *)a7) >> 2;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v62 = v56 - (_QWORD)v59;
    if (v62 >> 1 > v61)
      v61 = v62 >> 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
      v63 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a7 + 16, v63);
      v59 = *(_DWORD **)a7;
      v57 = *(_DWORD **)(a7 + 8);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[4 * v60];
    v66 = &v64[4 * v63];
    *(_DWORD *)v65 = v55;
    v58 = v65 + 4;
    while (v57 != v59)
    {
      v67 = *--v57;
      *((_DWORD *)v65 - 1) = v67;
      v65 -= 4;
    }
    *(_QWORD *)a7 = v65;
    *(_QWORD *)(a7 + 8) = v58;
    *(_QWORD *)(a7 + 16) = v66;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v57 = v54;
    v58 = v57 + 1;
  }
  *(_QWORD *)(a7 + 8) = v58;
  v68 = a5[1];
  if (v68 >= a5[2])
  {
    v69 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a5, v94);
  }
  else
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a5, v94);
    v69 = v68 + 24;
  }
  a5[1] = v69;
  if (__p)
  {
    v71 = __p;
    operator delete(__p);
  }
  *(_QWORD *)&v77 = v73;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (SHIBYTE(v76) < 0)
    operator delete(v75[0]);
  *(_QWORD *)&v77 = v94;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  *(_QWORD *)&v77 = v95;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  *(_QWORD *)&v77 = &v96;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
}

void sub_1ADAC6EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v22 + 8) = v23;
  if (__p)
    operator delete(__p);
  a22 = &a12;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a21 < 0)
    operator delete(a16);
  a22 = (char *)(v24 - 176);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = (char *)(v24 - 152);
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a22 = (char *)(v24 - 128);
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::ConfusionNetworkCombiner::~ConfusionNetworkCombiner(quasar::ConfusionNetworkCombiner *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D395B8;
  v2 = (void *)*((_QWORD *)this + 208);
  if (v2)
  {
    *((_QWORD *)this + 209) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 1640);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 1623) < 0)
    operator delete(*((void **)this + 200));
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  quasar::ResultCombiner::~ResultCombiner((void **)this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D395B8;
  v2 = (void *)*((_QWORD *)this + 208);
  if (v2)
  {
    *((_QWORD *)this + 209) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 1640);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 1623) < 0)
    operator delete(*((void **)this + 200));
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  quasar::ResultCombiner::~ResultCombiner((void **)this);
  MEMORY[0x1AF44D190]();
}

void quasar::RankingResultCombiner::~RankingResultCombiner(quasar::RankingResultCombiner *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D38858;
  v2 = (void *)*((_QWORD *)this + 201);
  if (v2)
  {
    *((_QWORD *)this + 202) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  quasar::ResultCombiner::~ResultCombiner((void **)this);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E5D38858;
  v2 = (void *)*((_QWORD *)this + 201);
  if (v2)
  {
    *((_QWORD *)this + 202) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 1599) < 0)
    operator delete(*((void **)this + 197));
  quasar::ResultCombiner::~ResultCombiner((void **)this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::Alternative::Alternative(uint64_t a1, const std::string *a2, uint64_t *a3, char a4, int a5, int a6, float a7, float a8, float a9, float a10)
{
  uint64_t v19;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v19 = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::string::operator=((std::string *)a1, a2);
  if ((uint64_t *)v19 != a3)
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v19, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5));
  *(float *)(a1 + 32) = a7;
  *(float *)(a1 + 36) = a8;
  *(float *)(a1 + 24) = a9;
  *(float *)(a1 + 28) = a10;
  *(_DWORD *)(a1 + 44) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(_BYTE *)(a1 + 40) = a4;
  if ((a4 & 1) == 0)
    *(float *)(a1 + 24) = a10;
  return a1;
}

void sub_1ADAC7228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::Alternative>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(__int128 *)((char *)a3 + 24);
  v8 = *(__int128 *)((char *)a3 + 36);
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 4) = v8;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&this[3].__r_.__value_.__l.__size_, *((_QWORD *)a3 + 7), *((_QWORD *)a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 5));
  return this;
}

void sub_1ADAC7314(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::Alternative>::__push_back_slow_path<quasar::Alternative const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Alternative>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::Alternative>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADAC7440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Alternative>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::Alternative>::construct[abi:ne180100]<quasar::Alternative,quasar::Alternative const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(__int128 *)((char *)a3 + 24);
  v7 = *(__int128 *)((char *)a3 + 36);
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 4) = v7;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&this[2].__r_.__value_.__l.__size_, *((_QWORD *)a3 + 7), *((_QWORD *)a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 5));
}

void sub_1ADAC74DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::Alternative>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>,std::reverse_iterator<quasar::Alternative*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 80;
      *((_QWORD *)&v15 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Alternative>,std::reverse_iterator<quasar::Alternative*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::Alternative>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::Alternative>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 56);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **std::__split_buffer<quasar::Alternative>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::Alternative>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::Alternative>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<quasar::Alternative>::destroy[abi:ne180100](v4, i - 80);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,false>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  _BYTE v21[28];
  __int128 v22;
  uint64_t v23;
  void **v24[13];

  if (a1 != a2)
  {
    v24[11] = v2;
    v24[12] = v3;
    v6 = a1 + 80;
    if (a1 + 80 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v6;
        if (*(float *)(v8 + 24) < *(float *)(v8 + 104))
        {
          *(_OWORD *)__p = *(_OWORD *)v6;
          v20 = *(_QWORD *)(v6 + 16);
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)v6 = 0;
          *(_OWORD *)v21 = *(_OWORD *)(v8 + 104);
          *(_OWORD *)&v21[12] = *(_OWORD *)(v8 + 116);
          v22 = *(_OWORD *)(v8 + 136);
          v23 = *(_QWORD *)(v8 + 152);
          *(_QWORD *)(v8 + 144) = 0;
          *(_QWORD *)(v8 + 152) = 0;
          v10 = v7;
          *(_QWORD *)(v8 + 136) = 0;
          while (1)
          {
            v11 = v10;
            v12 = a1 + v10;
            v13 = a1 + v10 + 80;
            if (*(char *)(a1 + v10 + 103) < 0)
              operator delete(*(void **)v13);
            *(_OWORD *)v13 = *(_OWORD *)v12;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
            *(_BYTE *)(v12 + 23) = 0;
            *(_BYTE *)v12 = 0;
            *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 24);
            *(_OWORD *)(v12 + 116) = *(_OWORD *)(v12 + 36);
            std::vector<quasar::Token>::__vdeallocate((void **)(v12 + 136));
            *(_OWORD *)(v12 + 136) = *(_OWORD *)(v12 + 56);
            *(_QWORD *)(v12 + 152) = *(_QWORD *)(v12 + 72);
            *(_QWORD *)(v12 + 64) = 0;
            *(_QWORD *)(v12 + 72) = 0;
            *(_QWORD *)(v12 + 56) = 0;
            if (!v11)
              break;
            v10 = v11 - 80;
            if (*(float *)(a1 + v11 - 56) >= *(float *)v21)
            {
              v14 = a1 + v11;
              goto LABEL_12;
            }
          }
          v14 = a1;
LABEL_12:
          if (*(char *)(v14 + 23) < 0)
            operator delete(*(void **)v14);
          v15 = (_OWORD *)(a1 + v11 + 24);
          v16 = (void **)(a1 + v11 + 56);
          *(_OWORD *)v14 = *(_OWORD *)__p;
          *(_QWORD *)(v14 + 16) = v20;
          *v15 = *(_OWORD *)v21;
          *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v21[12];
          std::vector<quasar::Token>::__vdeallocate(v16);
          v17 = *((_QWORD *)&v22 + 1);
          *v16 = (void *)v22;
          v18 = v23;
          *(_QWORD *)(v14 + 64) = v17;
          *(_QWORD *)(v14 + 72) = v18;
          v23 = 0;
          v22 = 0uLL;
          v24[0] = (void **)&v22;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v24);
        }
        v6 = v9 + 80;
        v7 += 80;
        v8 = v9;
      }
      while (v9 + 80 != a2);
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t result, uint64_t a2)
{
  void **v2;
  void **v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  void **v10;
  float v11;
  void **v12;
  void **v13;
  void *__p[2];
  void *v15;
  _BYTE v16[28];
  __int128 v17;
  void *v18;
  void **v19[11];

  if (result != a2)
  {
    v19[9] = v2;
    v19[10] = v3;
    v5 = result + 80;
    if (result + 80 != a2)
    {
      v6 = (_QWORD *)(result + 152);
      do
      {
        v7 = v5;
        if (*(float *)(result + 24) < *(float *)(result + 104))
        {
          *(_OWORD *)__p = *(_OWORD *)v5;
          v15 = *(void **)(v5 + 16);
          *(_QWORD *)(v5 + 8) = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)v5 = 0;
          *(_OWORD *)v16 = *(_OWORD *)(result + 104);
          *(_OWORD *)&v16[12] = *(_OWORD *)(result + 116);
          v17 = *(_OWORD *)(result + 136);
          v18 = *(void **)(result + 152);
          *(_QWORD *)(result + 144) = 0;
          *(_QWORD *)(result + 152) = 0;
          v8 = v6;
          *(_QWORD *)(result + 136) = 0;
          do
          {
            v9 = (void **)(v8 - 9);
            if (*((char *)v8 - 49) < 0)
              operator delete(*v9);
            *(_OWORD *)v9 = *(_OWORD *)(v8 - 19);
            *(v8 - 7) = *(v8 - 17);
            *((_BYTE *)v8 - 129) = 0;
            *((_BYTE *)v8 - 152) = 0;
            *((_OWORD *)v8 - 3) = *((_OWORD *)v8 - 8);
            *(_OWORD *)((char *)v8 - 36) = *(_OWORD *)((char *)v8 - 116);
            std::vector<quasar::Token>::__vdeallocate((void **)v8 - 2);
            *((_OWORD *)v8 - 1) = *((_OWORD *)v8 - 6);
            v10 = (void **)(v8 - 10);
            *v8 = *(v8 - 10);
            *(v8 - 10) = 0;
            *(v8 - 12) = 0;
            *(v8 - 11) = 0;
            v11 = *((float *)v8 - 52);
            v8 -= 10;
          }
          while (v11 < *(float *)v16);
          v12 = v10 - 9;
          if (*((char *)v10 - 49) < 0)
            operator delete(*v12);
          v13 = v10 - 6;
          *(_OWORD *)v12 = *(_OWORD *)__p;
          *(v10 - 7) = v15;
          *(_OWORD *)v13 = *(_OWORD *)v16;
          *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)&v16[12];
          std::vector<quasar::Token>::__vdeallocate(v10 - 2);
          *((_OWORD *)v10 - 1) = v17;
          *v10 = v18;
          v18 = 0;
          v17 = 0uLL;
          v19[0] = (void **)&v17;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v19);
        }
        v5 = v7 + 80;
        v6 += 10;
        result = v7;
      }
      while (v7 + 80 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float v7;
  __int128 *v8;
  __int128 *v9;

  v6 = *(float *)(a2 + 24);
  v7 = *(float *)(a3 + 24);
  if (*(float *)(a1 + 24) < v6)
  {
    if (v6 < v7)
    {
      std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a1, (__int128 *)a3);
      return 1;
    }
    std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a1, (__int128 *)a2);
    if (*(float *)(a2 + 24) >= *(float *)(a3 + 24))
      return 1;
    v8 = (__int128 *)a2;
    v9 = (__int128 *)a3;
LABEL_9:
    std::swap[abi:ne180100]<quasar::Alternative>(v8, v9);
    return 2;
  }
  if (v6 < v7)
  {
    std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a2, (__int128 *)a3);
    if (*(float *)(a1 + 24) >= *(float *)(a2 + 24))
      return 1;
    v8 = (__int128 *)a1;
    v9 = (__int128 *)a2;
    goto LABEL_9;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(uint64_t a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  __int128 *v9;
  float v10;
  float v11;
  float v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  uint64_t v18;
  _BYTE v19[28];
  __int128 v20;
  uint64_t v21;
  void **v22;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v19 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v19[12] = *(_OWORD *)(a1 + 36);
  v3 = (void **)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (*((float *)a2 - 14) >= *(float *)v19)
  {
    v7 = a1 + 80;
    do
    {
      v5 = v7;
      if (v7 >= (unint64_t)a2)
        break;
      v8 = *(float *)(v7 + 24);
      v7 += 80;
    }
    while (v8 >= *(float *)v19);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4 + 80;
      v6 = *(float *)(v4 + 104);
      v4 += 80;
    }
    while (v6 >= *(float *)v19);
  }
  if (v5 >= (unint64_t)a2)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 5;
      v10 = *((float *)a2 - 14);
      a2 -= 5;
    }
    while (v10 < *(float *)v19);
  }
  while (v5 < (unint64_t)v9)
  {
    std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)v5, v9);
    do
    {
      v11 = *(float *)(v5 + 104);
      v5 += 80;
    }
    while (v11 >= *(float *)v19);
    do
    {
      v12 = *((float *)v9 - 14);
      v9 -= 5;
    }
    while (v12 < *(float *)v19);
  }
  v13 = (void **)(v5 - 80);
  if (v5 - 80 != a1)
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v5 - 64);
    *(_OWORD *)a1 = v14;
    *(_BYTE *)(v5 - 57) = 0;
    *(_BYTE *)(v5 - 80) = 0;
    v15 = *(_OWORD *)(v5 - 56);
    *(_OWORD *)(a1 + 36) = *(_OWORD *)(v5 - 44);
    *(_OWORD *)(a1 + 24) = v15;
    std::vector<quasar::Token>::__vdeallocate(v3);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v5 - 24);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v5 - 8);
    *(_QWORD *)(v5 - 24) = 0;
    *(_QWORD *)(v5 - 16) = 0;
    *(_QWORD *)(v5 - 8) = 0;
  }
  if (*(char *)(v5 - 57) < 0)
    operator delete(*v13);
  *(_QWORD *)(v5 - 64) = v18;
  *(_OWORD *)v13 = *(_OWORD *)__p;
  *(_OWORD *)(v5 - 44) = *(_OWORD *)&v19[12];
  *(_OWORD *)(v5 - 56) = *(_OWORD *)v19;
  std::vector<quasar::Token>::__vdeallocate((void **)(v5 - 24));
  *(_OWORD *)(v5 - 24) = v20;
  *(_QWORD *)(v5 - 8) = v21;
  v20 = 0uLL;
  v21 = 0;
  v22 = (void **)&v20;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v5;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _OWORD *v4;
  void **v5;
  float v6;
  unint64_t v7;
  __int128 *v8;
  float v9;
  float v10;
  unint64_t v11;
  __int128 *v12;
  float v13;
  float v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  void *__p[2];
  uint64_t v20;
  _BYTE v21[28];
  __int128 v22;
  uint64_t v23;
  void **v24;

  v3 = 0;
  *(_OWORD *)__p = *(_OWORD *)a1;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = (_OWORD *)(a1 + 24);
  *(_OWORD *)v21 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 36);
  v23 = *(_QWORD *)(a1 + 72);
  v5 = (void **)(a1 + 56);
  v22 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  do
  {
    v6 = *(float *)(a1 + v3 + 104);
    v3 += 80;
  }
  while (*(float *)v21 < v6);
  v7 = a1 + v3;
  if (v3 == 80)
  {
    while (v7 < (unint64_t)a2)
    {
      v8 = a2 - 5;
      v10 = *((float *)a2 - 14);
      a2 -= 5;
      if (*(float *)v21 < v10)
        goto LABEL_9;
    }
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 5;
      v9 = *((float *)a2 - 14);
      a2 -= 5;
    }
    while (*(float *)v21 >= v9);
  }
LABEL_9:
  v11 = a1 + v3;
  if (v7 < (unint64_t)v8)
  {
    v12 = v8;
    do
    {
      std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)v11, v12);
      do
      {
        v13 = *(float *)(v11 + 104);
        v11 += 80;
      }
      while (*(float *)v21 < v13);
      do
      {
        v14 = *((float *)v12 - 14);
        v12 -= 5;
      }
      while (*(float *)v21 >= v14);
    }
    while (v11 < (unint64_t)v12);
  }
  v15 = (void **)(v11 - 80);
  if (v11 - 80 != a1)
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v16 = *(_OWORD *)v15;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 - 64);
    *(_OWORD *)a1 = v16;
    *(_BYTE *)(v11 - 57) = 0;
    *(_BYTE *)(v11 - 80) = 0;
    v17 = *(_OWORD *)(v11 - 56);
    *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(v11 - 44);
    *v4 = v17;
    std::vector<quasar::Token>::__vdeallocate(v5);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v11 - 24);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v11 - 24) = 0;
    *(_QWORD *)(v11 - 16) = 0;
    *(_QWORD *)(v11 - 8) = 0;
  }
  if (*(char *)(v11 - 57) < 0)
    operator delete(*v15);
  *(_QWORD *)(v11 - 64) = v20;
  *(_OWORD *)v15 = *(_OWORD *)__p;
  *(_OWORD *)(v11 - 44) = *(_OWORD *)&v21[12];
  *(_OWORD *)(v11 - 56) = *(_OWORD *)v21;
  std::vector<quasar::Token>::__vdeallocate((void **)(v11 - 24));
  *(_OWORD *)(v11 - 24) = v22;
  *(_QWORD *)(v11 - 8) = v23;
  v22 = 0uLL;
  v23 = 0;
  v24 = (void **)&v22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v11 - 80;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  _BYTE v20[28];
  __int128 v21;
  uint64_t v22;
  void **v23;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a1 + 24) < *(float *)(a2 - 56))
      {
        std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a1, (__int128 *)(a2 - 80));
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 80);
      return 1;
    default:
      v6 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a1 + 80, a1 + 160);
      v7 = a1 + 240;
      if (a1 + 240 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)(v6 + 24) < *(float *)(v7 + 24))
    {
      *(_OWORD *)__p = *(_OWORD *)v7;
      v19 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      *(_OWORD *)v20 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)&v20[12] = *(_OWORD *)(v7 + 36);
      v21 = *(_OWORD *)(v7 + 56);
      v22 = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      v10 = v8;
      *(_QWORD *)(v7 + 72) = 0;
      while (1)
      {
        v11 = v10;
        v12 = a1 + v10;
        v13 = a1 + v10 + 240;
        if (*(char *)(a1 + v10 + 263) < 0)
          operator delete(*(void **)v13);
        *(_OWORD *)v13 = *(_OWORD *)(v12 + 160);
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 176);
        *(_BYTE *)(v12 + 183) = 0;
        *(_BYTE *)(v12 + 160) = 0;
        *(_OWORD *)(v12 + 264) = *(_OWORD *)(v12 + 184);
        *(_OWORD *)(v12 + 276) = *(_OWORD *)(v12 + 196);
        std::vector<quasar::Token>::__vdeallocate((void **)(v12 + 296));
        *(_OWORD *)(v12 + 296) = *(_OWORD *)(v12 + 216);
        *(_QWORD *)(v12 + 312) = *(_QWORD *)(v12 + 232);
        *(_QWORD *)(v12 + 224) = 0;
        *(_QWORD *)(v12 + 232) = 0;
        *(_QWORD *)(v12 + 216) = 0;
        if (v11 == -160)
          break;
        v10 = v11 - 80;
        if (*(float *)(a1 + v11 + 104) >= *(float *)v20)
        {
          v14 = a1 + v10 + 240;
          goto LABEL_14;
        }
      }
      v14 = a1;
LABEL_14:
      if (*(char *)(v14 + 23) < 0)
        operator delete(*(void **)v14);
      v15 = (_OWORD *)(a1 + v11 + 184);
      *(_OWORD *)v14 = *(_OWORD *)__p;
      *(_QWORD *)(v14 + 16) = v19;
      *v15 = *(_OWORD *)v20;
      *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v20[12];
      std::vector<quasar::Token>::__vdeallocate((void **)(a1 + v11 + 216));
      v16 = *((_QWORD *)&v21 + 1);
      *(_QWORD *)(a1 + v11 + 216) = v21;
      v17 = v22;
      *(_QWORD *)(v14 + 64) = v16;
      *(_QWORD *)(v14 + 72) = v17;
      v22 = 0;
      v21 = 0uLL;
      v23 = (void **)&v21;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (++v9 == 8)
        return v7 + 80 == a2;
    }
    v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 == a2)
      return 1;
  }
}

void std::swap[abi:ne180100]<quasar::Alternative>(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[28];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v4 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v13 = *(__int128 *)((char *)a1 + 24);
  *(_OWORD *)&v13[12] = *(__int128 *)((char *)a1 + 36);
  v5 = (__int128 *)((char *)a1 + 56);
  v6 = *((_QWORD *)a1 + 7);
  v16 = 0;
  v14 = v6;
  v10 = a1[4];
  *(_OWORD *)__p = v4;
  v15 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = 0;
  *((_QWORD *)a1 + 7) = 0;
  v7 = *((_QWORD *)a2 + 2);
  *a1 = *a2;
  *((_QWORD *)a1 + 2) = v7;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v8 = (__int128 *)((char *)a2 + 24);
  v9 = *(__int128 *)((char *)a2 + 24);
  *(__int128 *)((char *)a1 + 36) = *(__int128 *)((char *)a2 + 36);
  *(__int128 *)((char *)a1 + 24) = v9;
  std::vector<quasar::Token>::__vdeallocate((void **)a1 + 7);
  *v5 = *(__int128 *)((char *)a2 + 56);
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *a2 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 2) = v12;
  *v8 = *(_OWORD *)v13;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)&v13[12];
  std::vector<quasar::Token>::__vdeallocate((void **)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  a2[4] = v10;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = (void **)&v14;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a2, a3);
  if (*(float *)(a3 + 24) < *(float *)(a4 + 24))
  {
    std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a3, (__int128 *)a4);
    if (*(float *)(a2 + 24) < *(float *)(a3 + 24))
    {
      std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a2, (__int128 *)a3);
      if (*(float *)(a1 + 24) < *(float *)(a2 + 24))
        std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a1, (__int128 *)a2);
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a2, a3, a4);
  if (*(float *)(a4 + 24) < *(float *)(a5 + 24))
  {
    std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a4, (__int128 *)a5);
    if (*(float *)(a3 + 24) < *(float *)(a4 + 24))
    {
      std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a3, (__int128 *)a4);
      if (*(float *)(a2 + 24) < *(float *)(a3 + 24))
      {
        std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a2, (__int128 *)a3);
        if (*(float *)(a1 + 24) < *(float *)(a2 + 24))
          std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a1, (__int128 *)a2);
      }
    }
  }
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 80;
    if (a2 - a1 >= 81)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 80 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a4, v9, v12);
        v12 -= 5;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(float *)(a1 + 24) < *(float *)(v14 + 24))
        {
          std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)v14, (__int128 *)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, a4, v9, (__int128 *)a1);
        }
        v14 += 80;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 81)
    {
      v15 = v8 / 0x50uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::Alternative *>(a1, v6, a4, v15);
        v6 -= 80;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  float *v7;
  int64_t v9;
  int64_t v11;
  float *v12;
  float *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  _BYTE v19[28];
  __int128 v20;
  uint64_t v21;
  void **v22[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22[11] = v4;
    v22[12] = v5;
    v7 = (float *)a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 4)))
    {
      v11 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4)) | 1;
      v12 = (float *)(a1 + 80 * v11);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2) < a3
        && v12[26] < *(float *)(a1 + 80 * v11 + 24))
      {
        v12 += 20;
        v11 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2;
      }
      if (*((float *)a4 + 6) >= v12[6])
      {
        *(_OWORD *)__p = *a4;
        v18 = *((_QWORD *)a4 + 2);
        *((_QWORD *)a4 + 1) = 0;
        *((_QWORD *)a4 + 2) = 0;
        *(_QWORD *)a4 = 0;
        *(_OWORD *)v19 = *(__int128 *)((char *)a4 + 24);
        *(_OWORD *)&v19[12] = *(__int128 *)((char *)a4 + 36);
        v20 = *(__int128 *)((char *)a4 + 56);
        v21 = *((_QWORD *)a4 + 9);
        *((_QWORD *)a4 + 7) = 0;
        *((_QWORD *)a4 + 8) = 0;
        *((_QWORD *)a4 + 9) = 0;
        do
        {
          v13 = v12;
          if (*((char *)v7 + 23) < 0)
            operator delete(*(void **)v7);
          v14 = *(_OWORD *)v13;
          *((_QWORD *)v7 + 2) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v7 = v14;
          *((_BYTE *)v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          v15 = *(_OWORD *)(v13 + 6);
          *(_OWORD *)(v7 + 9) = *(_OWORD *)(v13 + 9);
          *(_OWORD *)(v7 + 6) = v15;
          std::vector<quasar::Token>::__vdeallocate((void **)v7 + 7);
          *(_OWORD *)(v7 + 14) = *(_OWORD *)(v13 + 14);
          *((_QWORD *)v7 + 9) = *((_QWORD *)v13 + 9);
          *((_QWORD *)v13 + 7) = 0;
          *((_QWORD *)v13 + 8) = 0;
          *((_QWORD *)v13 + 9) = 0;
          if (v9 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (float *)(a1 + 80 * v16);
          if (2 * v11 + 2 < a3 && v12[26] < *(float *)(a1 + 80 * v16 + 24))
          {
            v12 += 20;
            v16 = 2 * v11 + 2;
          }
          v7 = v13;
          v11 = v16;
        }
        while (*(float *)v19 >= v12[6]);
        if (*((char *)v13 + 23) < 0)
          operator delete(*(void **)v13);
        *((_QWORD *)v13 + 2) = v18;
        *(_OWORD *)v13 = *(_OWORD *)__p;
        *(_OWORD *)(v13 + 6) = *(_OWORD *)v19;
        *(_OWORD *)(v13 + 9) = *(_OWORD *)&v19[12];
        std::vector<quasar::Token>::__vdeallocate((void **)v13 + 7);
        *(_OWORD *)(v13 + 14) = v20;
        *((_QWORD *)v13 + 9) = v21;
        v20 = 0uLL;
        v21 = 0;
        v22[0] = (void **)&v20;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v22);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v7;
  __int128 *v8;
  void **v9;
  int v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 __p;
  uint64_t v16;
  _BYTE v17[28];
  __int128 v18;
  uint64_t v19;
  void **v20;

  if (a4 >= 2)
  {
    __p = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_OWORD *)v17 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&v17[12] = *(_OWORD *)(a1 + 36);
    v18 = *(_OWORD *)(a1 + 56);
    v19 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>((__int128 *)a1, a3, a4);
    v8 = v7;
    v9 = (void **)(a2 - 80);
    v10 = *((char *)v7 + 23);
    if (v7 == (__int128 *)(a2 - 80))
    {
      if (v10 < 0)
        operator delete(*(void **)v7);
      *((_QWORD *)v8 + 2) = v16;
      *v8 = __p;
      *(__int128 *)((char *)v8 + 24) = *(_OWORD *)v17;
      *(__int128 *)((char *)v8 + 36) = *(_OWORD *)&v17[12];
      std::vector<quasar::Token>::__vdeallocate((void **)v8 + 7);
      *(__int128 *)((char *)v8 + 56) = v18;
      *((_QWORD *)v8 + 9) = v19;
      v18 = 0uLL;
      v19 = 0;
    }
    else
    {
      if (v10 < 0)
        operator delete(*(void **)v7);
      v11 = *(_OWORD *)v9;
      *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 - 64);
      *v8 = v11;
      *(_BYTE *)(a2 - 57) = 0;
      *(_BYTE *)(a2 - 80) = 0;
      v12 = *(_OWORD *)(a2 - 56);
      *(__int128 *)((char *)v8 + 36) = *(_OWORD *)(a2 - 44);
      *(__int128 *)((char *)v8 + 24) = v12;
      std::vector<quasar::Token>::__vdeallocate((void **)v8 + 7);
      v13 = (_QWORD *)(a2 - 24);
      *(__int128 *)((char *)v8 + 56) = *(_OWORD *)(a2 - 24);
      *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 - 8);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v14 = (uint64_t)(v8 + 5);
      if (*(char *)(a2 - 57) < 0)
        operator delete(*v9);
      *(_OWORD *)v9 = __p;
      *(_QWORD *)(a2 - 64) = v16;
      *(_OWORD *)(a2 - 56) = *(_OWORD *)v17;
      *(_OWORD *)(a2 - 44) = *(_OWORD *)&v17[12];
      std::vector<quasar::Token>::__vdeallocate((void **)(a2 - 24));
      *(_OWORD *)(a2 - 24) = v18;
      *(_QWORD *)(a2 - 8) = v19;
      v19 = 0;
      v18 = 0uLL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, v14, a3, 0xCCCCCCCCCCCCCCCDLL * ((v14 - a1) >> 4));
    }
    v20 = (void **)&v18;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

void sub_1ADAC8EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::Alternative::~Alternative(&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = v5 + 1;
    v9 = &a1[5 * v5 + 5];
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3 && *((float *)v9 + 26) < *((float *)&a1[5 * v8 + 1] + 2))
    {
      v9 += 5;
      v5 = v11;
    }
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *v9;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v9 + 2);
    *a1 = v12;
    *((_BYTE *)v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    v13 = *(__int128 *)((char *)v9 + 24);
    *(__int128 *)((char *)a1 + 36) = *(__int128 *)((char *)v9 + 36);
    *(__int128 *)((char *)a1 + 24) = v13;
    std::vector<quasar::Token>::__vdeallocate((void **)a1 + 7);
    *(__int128 *)((char *)a1 + 56) = *(__int128 *)((char *)v9 + 56);
    *((_QWORD *)a1 + 9) = *((_QWORD *)v9 + 9);
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 8) = 0;
    *((_QWORD *)v9 + 9) = 0;
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  _BYTE v22[28];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26[15];

  if (a4 >= 2)
  {
    v26[1] = v7;
    v26[2] = v6;
    v26[13] = v4;
    v26[14] = v5;
    v9 = (unint64_t)(a4 - 2) >> 1;
    if (*(float *)(a2 - 56) < *(float *)(a1 + 80 * v9 + 24))
    {
      v10 = a2 - 80;
      *(_OWORD *)__p = *(_OWORD *)(a2 - 80);
      v21 = *(_QWORD *)(a2 - 64);
      *(_QWORD *)(a2 - 72) = 0;
      *(_QWORD *)(a2 - 64) = 0;
      *(_QWORD *)(a2 - 80) = 0;
      *(_OWORD *)v22 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)&v22[12] = *(_OWORD *)(a2 - 44);
      v11 = *(_QWORD *)(a2 - 16);
      v19 = *(_QWORD *)(a2 - 24);
      v23 = v19;
      v24 = v11;
      v18 = v11;
      v12 = *(_QWORD *)(a2 - 8);
      v25 = v12;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      do
      {
        v13 = v9;
        if (*(char *)(v10 + 23) < 0)
          operator delete(*(void **)v10);
        v14 = (__int128 *)(a1 + 80 * v13);
        v15 = *v14;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v10 = v15;
        *((_BYTE *)v14 + 23) = 0;
        *(_BYTE *)v14 = 0;
        v16 = *(__int128 *)((char *)v14 + 24);
        *(_OWORD *)(v10 + 36) = *(__int128 *)((char *)v14 + 36);
        *(_OWORD *)(v10 + 24) = v16;
        std::vector<quasar::Token>::__vdeallocate((void **)(v10 + 56));
        *(_OWORD *)(v10 + 56) = *(__int128 *)((char *)v14 + 56);
        *(_QWORD *)(v10 + 72) = *((_QWORD *)v14 + 9);
        *((_QWORD *)v14 + 8) = 0;
        *((_QWORD *)v14 + 9) = 0;
        *((_QWORD *)v14 + 7) = 0;
        if (!v13)
          break;
        v9 = (v13 - 1) >> 1;
        v10 = a1 + 80 * v13;
      }
      while (*(float *)v22 < *(float *)(a1 + 80 * v9 + 24));
      v17 = (_QWORD *)(a1 + 80 * v13 + 64);
      if (*((char *)v14 + 23) < 0)
        operator delete(*(void **)v14);
      *v14 = *(_OWORD *)__p;
      *((_QWORD *)v14 + 2) = v21;
      *(__int128 *)((char *)v14 + 24) = *(_OWORD *)v22;
      *(__int128 *)((char *)v14 + 36) = *(_OWORD *)&v22[12];
      std::vector<quasar::Token>::__vdeallocate((void **)v14 + 7);
      *((_QWORD *)v14 + 7) = v19;
      *v17 = v18;
      *((_QWORD *)v14 + 9) = v12;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      v26[0] = (void **)&v23;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v26);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::Alternative>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::Alternative>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 80);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::Alternative>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::Alternative>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::Alternative>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::Alternative>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x78uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v16 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v16 + 76) = *(_OWORD *)(a3 + 60);
  *((_OWORD *)v16 + 4) = v17;
  *((_OWORD *)v16 + 6) = *(_OWORD *)(a3 + 80);
  *((_QWORD *)v16 + 14) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1ADAC952C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::Alternative>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::Alternative>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::vector<std::vector<unsigned long>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned long> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADAC95D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADAC96D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::Alternative>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<quasar::Alternative>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__int128 *std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token*>,std::__wrap_iter<quasar::Token*>>(uint64_t *a1, __int128 *a2, const quasar::Token *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  const quasar::Token *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  _QWORD v26[2];
  std::string *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 5) >= a5)
      {
        v21 = (uint64_t)a3 + 224 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 32 * ((uint64_t)(v12 - (_QWORD)a2) >> 5);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token*,quasar::Token*,quasar::Token*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<quasar::Token>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x92492492492492)
        v18 = 0x124924924924924;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v9, v18);
      else
        v19 = 0;
      v22 = (std::string *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[224 * v18];
      v23 = 224 * a5;
      v24 = (std::string *)((char *)v22 + 224 * a5);
      do
      {
        quasar::Token::Token(v22, v7);
        v22 = (std::string *)((char *)v22 + 224);
        v7 = (const quasar::Token *)((char *)v7 + 224);
        v23 -= 224;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1ADAC994C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__int128 *std::vector<quasar::Token>::__move_range(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__int128 *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (__int128 *)((char *)a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(a1 + 16, v8, v10);
      v10 += 14;
      v8 += 224;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a3;
  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  v8 = (__int128 *)*a1;
  v9 = v6;
  if ((__int128 *)*a1 != a3)
  {
    v10 = a3;
    v9 = a2[1];
    do
    {
      v9 -= 224;
      v10 -= 14;
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v7, v9, v10);
    }
    while (v10 != v8);
  }
  a2[1] = v9;
  v11 = (__int128 *)a1[1];
  v12 = a2[2];
  if (v11 != v3)
  {
    do
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v7, v12, v3);
      v3 += 14;
      v12 += 224;
    }
    while (v3 != v11);
    v9 = a2[1];
  }
  a2[2] = v12;
  v13 = *a1;
  *a1 = v9;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return v6;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 14;
      a3 -= 224;
      quasar::Token::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__assign_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADAC9CC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADAC9CCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *,std::vector<std::vector<quasar::Token>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4)
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a4, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * (v5[1] - *v5));
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>(_QWORD *result, uint64_t ***a2, uint64_t ***a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADAC9DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<std::vector<quasar::Token>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*,std::vector<std::vector<std::vector<quasar::Token>>>*>(uint64_t a1, uint64_t ***a2, uint64_t ***a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t ***v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADAC9E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<quasar::Token>>>>,std::vector<std::vector<std::vector<quasar::Token>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t *quasar::QuantizationTool::LinearRegionDequantize@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  float *v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  float v24;
  int v25;

  v10 = *a1;
  v11 = a1[1] - *a1;
  v25 = 0;
  result = std::vector<float>::vector(a6, v11, &v25);
  if (a2 < 1)
    return result;
  v13 = 0;
  v14 = *a5;
  v15 = *result;
  do
  {
    if (a3 < 1)
      goto LABEL_13;
    v16 = 0;
    v17 = (unsigned __int8 *)(v10 + v13 * a3);
    do
    {
      v18 = (float *)(v14 + 4 * (v16 & 0xFFFFFFFC));
      result = (uint64_t *)*v17;
      if ((int)result <= a4)
      {
        v19 = *v18;
        v20 = v18[1];
        v21 = *v18;
        v22 = (double)result;
        goto LABEL_9;
      }
      if (256 - a4 < (int)result)
      {
        v19 = v18[2];
        v20 = v18[3];
        v21 = v19;
        v22 = (double)((int)result - 192);
LABEL_9:
        v23 = 1.0 / (double)a4 * v22;
        goto LABEL_11;
      }
      v19 = v18[1];
      v20 = v18[2];
      v21 = v19;
      v23 = 1.0 / (double)(256 - 2 * a4) * (double)((int)result - 64);
LABEL_11:
      v24 = v21 + v23 * (float)(v20 - v19);
      *(float *)(v15 + v16) = v24;
      ++v17;
      v16 += 4;
    }
    while (4 * a3 != v16);
    v15 += v16;
LABEL_13:
    ++v13;
  }
  while (v13 != a2);
  return result;
}

void quasar::QuantizationTool::LinearRegionQuantize(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  char *v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  int v32;
  float *v33;
  float *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  float *v40;
  int v41;
  float *v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  float *v49;
  int v50;
  float *v51;
  float *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  int v63;
  int v64;
  int v65;
  int v66;
  double v67;
  int v68;
  uint64_t v70;
  int v71;
  void *v72[3];
  void *__p;
  float *v74;
  float *v75;
  void *v76;
  float *v77;
  char v78[9];

  v9 = a2;
  LODWORD(__p) = 0;
  std::vector<float>::vector(&v76, a2, &__p);
  v71 = a2;
  v10 = a2 + (a2 < 0 ? 3 : 0);
  __p = 0;
  v74 = 0;
  v75 = 0;
  v11 = (uint64_t)(a1[1] - *a1) >> 2;
  v78[0] = 0;
  std::vector<unsigned char>::vector(v72, v11, v78);
  if (a3)
  {
    v12 = 0;
    v13 = 0;
    if (v9 <= 1)
      v14 = 1;
    else
      v14 = v9;
    v70 = v14;
    do
    {
      if (v71)
      {
        v15 = (_DWORD *)(*a1 + v12);
        v16 = v76;
        v17 = v70;
        do
        {
          *v16++ = *v15;
          v15 += a3;
          --v17;
        }
        while (v17);
      }
      std::__sort<std::__less<float,float> &,float *>();
      v18 = *(float *)v76;
      v19 = *((float *)v76 + ((uint64_t)v10 >> 2));
      v20 = *((float *)v76 + 3 * ((uint64_t)v10 >> 2));
      v21 = *(v77 - 1);
      v23 = v74;
      v22 = (char *)v75;
      if (v74 >= v75)
      {
        v25 = (float *)__p;
        v26 = ((char *)v74 - (_BYTE *)__p) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          goto LABEL_94;
        v28 = (char *)v75 - (_BYTE *)__p;
        if (((char *)v75 - (_BYTE *)__p) >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v29);
          v25 = (float *)__p;
          v23 = v74;
        }
        else
        {
          v30 = 0;
        }
        v31 = (float *)&v30[4 * v26];
        *v31 = v18;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *((_DWORD *)v23-- - 1);
          *((_DWORD *)v31-- - 1) = v32;
        }
        v22 = &v30[4 * v29];
        __p = v31;
        v74 = v24;
        v75 = (float *)v22;
        if (v25)
        {
          operator delete(v25);
          v22 = (char *)v75;
        }
      }
      else
      {
        *v74 = v18;
        v24 = v23 + 1;
      }
      v74 = v24;
      if (v24 >= (float *)v22)
      {
        v34 = (float *)__p;
        v35 = ((char *)v24 - (_BYTE *)__p) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          goto LABEL_94;
        v37 = v22 - (_BYTE *)__p;
        if (v37 >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v38);
          v34 = (float *)__p;
          v24 = v74;
        }
        else
        {
          v39 = 0;
        }
        v40 = (float *)&v39[4 * v35];
        *v40 = v19;
        v33 = v40 + 1;
        while (v24 != v34)
        {
          v41 = *((_DWORD *)v24-- - 1);
          *((_DWORD *)v40-- - 1) = v41;
        }
        v22 = &v39[4 * v38];
        __p = v40;
        v74 = v33;
        v75 = (float *)v22;
        if (v34)
        {
          operator delete(v34);
          v22 = (char *)v75;
        }
      }
      else
      {
        *v24 = v19;
        v33 = v24 + 1;
      }
      v74 = v33;
      if (v33 >= (float *)v22)
      {
        v43 = (float *)__p;
        v44 = ((char *)v33 - (_BYTE *)__p) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          goto LABEL_94;
        v46 = v22 - (_BYTE *)__p;
        if (v46 >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v47);
          v43 = (float *)__p;
          v33 = v74;
        }
        else
        {
          v48 = 0;
        }
        v49 = (float *)&v48[4 * v44];
        *v49 = v20;
        v42 = v49 + 1;
        while (v33 != v43)
        {
          v50 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v49-- - 1) = v50;
        }
        v22 = &v48[4 * v47];
        __p = v49;
        v74 = v42;
        v75 = (float *)v22;
        if (v43)
        {
          operator delete(v43);
          v22 = (char *)v75;
        }
      }
      else
      {
        *v33 = v20;
        v42 = v33 + 1;
      }
      v74 = v42;
      if (v42 >= (float *)v22)
      {
        v52 = (float *)__p;
        v53 = ((char *)v42 - (_BYTE *)__p) >> 2;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
LABEL_94:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v55 = v22 - (_BYTE *)__p;
        if (v55 >> 1 > v54)
          v54 = v55 >> 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v75, v56);
          v52 = (float *)__p;
          v42 = v74;
        }
        else
        {
          v57 = 0;
        }
        v58 = (float *)&v57[4 * v53];
        *v58 = v21;
        v51 = v58 + 1;
        while (v42 != v52)
        {
          v59 = *((_DWORD *)v42-- - 1);
          *((_DWORD *)v58-- - 1) = v59;
        }
        __p = v58;
        v74 = v51;
        v75 = (float *)&v57[4 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *v42 = v21;
        v51 = v42 + 1;
      }
      v74 = v51;
      if (v71)
      {
        v60 = v13;
        v61 = v70;
        do
        {
          v62 = *(float *)(*a1 + 4 * v60);
          v63 = (int)((float)((float)((float)(v62 - v20) / (float)(v21 - v20)) * (float)(a4 - 1)) + 0.5);
          v64 = (v63 & ~(v63 >> 31)) - a4 + 256;
          if (v64 >= 255)
            LOBYTE(v64) = -1;
          v65 = (int)((float)((float)((float)(v62 - v19) / (float)(v20 - v19)) * (float)(256 - 2 * a4)) + 0.5);
          v66 = (v65 & ~(v65 >> 31)) + a4;
          if (v66 >= 256 - a4)
            LOBYTE(v66) = -(char)a4;
          if (v62 < v20)
            LOBYTE(v64) = v66;
          v67 = (float)((float)((float)(v62 - v18) / (float)(v19 - v18)) * (float)a4) + 0.5;
          v68 = (int)v67 & ~((int)v67 >> 31);
          if (v68 >= a4)
            LOBYTE(v68) = a4;
          if (v62 < v19)
            LOBYTE(v64) = v68;
          *((_BYTE *)v72[0] + v60) = v64;
          v60 += a3;
          --v61;
        }
        while (v61);
      }
      ++v13;
      v12 += 4;
    }
    while (v13 != a3);
  }
  std::pair<std::vector<float>,std::vector<unsigned char>>::pair[abi:ne180100]<std::vector<float>&,std::vector<unsigned char>&,0>(a5, (uint64_t)&__p, (uint64_t)v72);
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  if (__p)
  {
    v74 = (float *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    v77 = (float *)v76;
    operator delete(v76);
  }
}

void sub_1ADACA55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::QuantizationTool::SimpleDequantize@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>, float a3@<S0>)
{
  char *v3;
  char *v4;
  double v5;
  float v6;
  float v7;
  _QWORD *v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (char *)*result;
  v4 = (char *)result[1];
  v8 = a2;
  if (v3 != v4)
  {
    v5 = 1.0 / a3;
    do
    {
      v6 = v5 * (double)*v3;
      v7 = v6;
      result = std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v8, &v7);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1ADACA630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t **quasar::QuantizationTool::SimpleQuantizeWithRatio@<X0>(unint64_t **result@<X0>, unint64_t *a2@<X8>, float a3@<S0>)
{
  float *v3;
  float *v4;
  char v6;
  unint64_t *i;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (float *)*result;
  v4 = (float *)result[1];
  for (i = a2; v3 != v4; ++v3)
  {
    v6 = (int)(float)(*v3 * a3);
    result = std::back_insert_iterator<std::vector<signed char>>::operator=[abi:ne180100](&i, &v6);
  }
  return result;
}

void sub_1ADACA6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::vector<float>,std::vector<unsigned char>>::pair[abi:ne180100]<std::vector<float>&,std::vector<unsigned char>&,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  return a1;
}

void sub_1ADACA738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADACA7B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADACA828(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

unint64_t **std::back_insert_iterator<std::vector<signed char>>::operator=[abi:ne180100](unint64_t **a1, _BYTE *a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

_QWORD *quasar::BasicTokenizer::BasicTokenizer(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E5D350E0;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void quasar::BasicTokenizer::~BasicTokenizer(void **this)
{
  *this = off_1E5D350E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D350E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::BasicTokenizer::tokenize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type size;
  char v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *p_p;
  std::string::size_type v13;
  _QWORD *v14;
  const std::string *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string __p;
  int v24;
  uint64_t v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43[3];
  std::string v44;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  quasar::trim(&v44);
  size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v44.__r_.__value_.__l.__size_;
  if (size)
  {
    quasar::split((uint64_t)&v44, (uint64_t *)(a1 + 8), 1, (uint64_t)v43);
    if (quasar::gLogLevel >= 6)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"text=", 5);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v44;
      else
        v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v9 = v44.__r_.__value_.__l.__size_;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" tokens=[", 9);
      v25[0] = (uint64_t)",";
      v25[1] = 1;
      quasar::join<std::vector<std::string>>(v43, v25);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v13 = __p.__r_.__value_.__l.__size_;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v26);
    }
    v26 = 0uLL;
    *(_QWORD *)&v27 = 0;
    v15 = (const std::string *)v43[0];
    v16 = v43[1];
    while (v15 != (const std::string *)v16)
    {
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&__p, v15);
      v24 = 0;
      v17 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1) >= (unint64_t)v27)
      {
        v19 = std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v26, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v26 + 1), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(*((_QWORD *)&v26 + 1) + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v17 = v18;
        }
        *(_DWORD *)(v17 + 24) = v24;
        v19 = v17 + 32;
      }
      *((_QWORD *)&v26 + 1) = v19;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v15;
    }
    v20 = a3[1];
    if (v20 >= a3[2])
    {
      v21 = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(a3, (uint64_t)&v26);
    }
    else
    {
      std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>((uint64_t)a3, (uint64_t)&v26);
      v21 = v20 + 32;
    }
    a3[1] = v21;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(_QWORD *)&v26 = v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v6 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  if (v6 < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1ADACAD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a18);
  a18 = v19 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v19 - 57) < 0)
    operator delete(*(void **)(v19 - 80));
  _Unwind_Resume(a1);
}

float std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>((std::string *)v4, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  result = *(float *)(a2 + 24);
  *(float *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1ADACAE98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::TextTokenizer::Token>::__init_with_size[abi:ne180100]<quasar::TextTokenizer::Token*,quasar::TextTokenizer::Token*>(v11, *(__int128 **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  LODWORD(v11[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  v15 = (std::string *)((char *)v15 + 32);
  std::vector<quasar::TextTokenizer::TokenString>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::TokenString>::~__split_buffer(v14);
  return v12;
}

void sub_1ADACAF88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::TokenString>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TextTokenizer::TokenString>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::TokenString>,std::reverse_iterator<quasar::TextTokenizer::TokenString*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<quasar::TextTokenizer::TokenString>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::TextTokenizer::TokenString>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::TextTokenizer::TokenString>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

kaldi::DecodableMatrixScaledMapped *kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(kaldi::DecodableMatrixScaledMapped *this, uint64_t a2, uint64_t a3, int a4, float a5)
{
  *(_QWORD *)this = &off_1E5D2ABF0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((float *)this + 6) = a5;
  *((_BYTE *)this + 28) = 0;
  if (a4)
    kaldi::DecodableMatrixScaledMapped::ValidateLikesAndPdfs(this);
  return this;
}

void sub_1ADACB1F8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::DecodableMatrixScaledMapped::ValidateLikesAndPdfs(kaldi::DecodableMatrixScaledMapped *this)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD v5[34];

  result = kaldi::MatrixBase<float>::NumCols(*((_QWORD *)this + 2));
  if ((_DWORD)result != *(_DWORD *)(*((_QWORD *)this + 1) + 240))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"DecodableMatrixScaledMapped: mismatch, matrix has ", 50);
    kaldi::MatrixBase<float>::NumCols(*((_QWORD *)this + 2));
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" columns but transition-model has ", 34);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, " pdf-ids.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return result;
}

uint64_t kaldi::DecodableMatrixScaledMapped::NumFrames(kaldi::DecodableMatrixScaledMapped *this)
{
  return kaldi::MatrixBase<float>::NumRows(*((_QWORD *)this + 2));
}

BOOL kaldi::DecodableMatrixScaledMapped::IsLastFrame(kaldi::DecodableMatrixScaledMapped *this, int a2)
{
  (*(void (**)(kaldi::DecodableMatrixScaledMapped *))(*(_QWORD *)this + 104))(this);
  return (*(unsigned int (**)(kaldi::DecodableMatrixScaledMapped *))(*(_QWORD *)this + 104))(this) - 1 == a2;
}

BOOL kaldi::DecodableMatrixScaledMapped::IsLastFrameNoBlocking(kaldi::DecodableMatrixScaledMapped *this, int a2)
{
  (*(void (**)(kaldi::DecodableMatrixScaledMapped *))(*(_QWORD *)this + 104))(this);
  return (*(unsigned int (**)(kaldi::DecodableMatrixScaledMapped *))(*(_QWORD *)this + 104))(this) - 1 == a2;
}

float kaldi::DecodableMatrixScaledMapped::LogLikelihood(kaldi::DecodableMatrixScaledMapped *this, int a2, int a3)
{
  return *((float *)this + 6)
       * *(float *)(**((_QWORD **)this + 2)
                  + 4 * *(_DWORD *)(*((_QWORD *)this + 2) + 16) * a2
                  + 4 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 4 * a3));
}

uint64_t kaldi::DecodableMatrixScaledMapped::NumIndices(kaldi::DecodableMatrixScaledMapped *this)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 1) + 152) - *(_QWORD *)(*((_QWORD *)this + 1) + 144)) >> 2)
       - 1;
}

void kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(kaldi::DecodableMatrixScaledMapped *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D2ABF0;
  if (*((_BYTE *)this + 28))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      v3 = kaldi::Matrix<float>::~Matrix(v2);
      MEMORY[0x1AF44D190](v3, 0x1080C40EB13E0A1);
    }
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::DecodableMatrixScaledMappedLazyNnet1::DecodableMatrixScaledMappedLazyNnet1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int a6, int a7, float a8)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v16;
  char v17;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(float *)(a1 + 24) = a8;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)a1 = &off_1E5D2B098;
  v9 = a4[1];
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a5[1];
  *(_QWORD *)(a1 + 48) = *a5;
  *(_QWORD *)(a1 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 64) = a6 + 1;
  *(_QWORD *)(a1 + 72) = a7;
  std::unordered_map<std::vector<int> const*,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerHasher,kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::PointerPred,std::allocator<std::pair<std::vector<int> const* const,std::__list_iterator<std::pair<std::vector<int>,kaldi::CuVector<float>>,void *>>>>::unordered_map(a1 + 80, 0, &v17, &v16);
  *(_QWORD *)(a1 + 152) = &unk_1E5D341C8;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  kaldi::CuVector<float>::Resize(a1 + 152, 1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_1ADACB52C(_Unwind_Exception *a1)
{
  kaldi::DecodableMatrixScaledMapped *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;

  v7 = v6;
  kaldi::CuVector<float>::~CuVector(v7);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear(v5);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(v1);
  _Unwind_Resume(a1);
}

float kaldi::DecodableMatrixScaledMappedLazyNnet1::LogLikelihood(kaldi::DecodableMatrixScaledMappedLazyNnet1 *this, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  uint64_t *v11;
  float v12;
  _QWORD v14[3];
  _QWORD v15[4];
  uint64_t *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v4 = (a2 / *((_DWORD *)this + 16) * *((_DWORD *)this + 16));
  v5 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 4 * a3);
  if (*((_QWORD *)this + 6))
  {
    v6 = operator new(8uLL);
    v16 = 0;
    v17 = v6;
    *v6 = v4 | (v5 << 32);
    v18 = v6 + 1;
    v19 = v6 + 1;
    if (!kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get((uint64_t)this + 72, (uint64_t)&v17, &v16))
    {
      v16 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)this + 9, (uint64_t)&v17);
      kaldi::CuVector<float>::Resize((uint64_t)v16, 1, 0);
      v7 = *((_QWORD *)this + 2);
      v8 = *(_QWORD *)v7;
      v9 = *(_DWORD *)(v7 + 16);
      v14[2] = 0;
      v14[0] = v8 + 4 * v9 * (int)v4;
      v14[1] = kaldi::MatrixBase<float>::NumCols(v7);
      kaldi::CuVector<float>::CuVector(v15, v14, 0);
      v10 = (*(float (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 6) + 136))(*((_QWORD *)this + 6), v15, v5);
      v11 = v16;
      *(float *)v16[1] = v10;
      kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(*((_QWORD *)this + 4), v5, (uint64_t)v11);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v16, *((float *)this + 6));
      v15[0] = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v15);
    }
    v12 = *(float *)v16[1];
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
  }
  else
  {
    **((_DWORD **)this + 20) = *(_DWORD *)(**((_QWORD **)this + 2)
                                         + 4 * *(_DWORD *)(*((_QWORD *)this + 2) + 16) * (int)v4
                                         + 4 * (int)v5);
    kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(*((_QWORD *)this + 4), v5, (uint64_t)this + 152);
    kaldi::CuVectorBase<float>::Scale((uint64_t)this + 152, *((float *)this + 6));
    return **((float **)this + 20);
  }
  return v12;
}

void sub_1ADACB71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::DecodableMatrixScaledMappedLazyNnet1::ValidateLikesAndPdfs(kaldi::DecodableMatrixScaledMappedLazyNnet1 *this)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[34];

  v2 = *((_QWORD *)this + 6);
  if (v2)
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 176))(v2, 0);
  else
    result = kaldi::MatrixBase<float>::NumCols(*((_QWORD *)this + 2));
  if ((_DWORD)result != *(_DWORD *)(*((_QWORD *)this + 1) + 240))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"DecodableMatrixScaledMapped: mismatch, matrix has ", 50);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 176))(*((_QWORD *)this + 6), 0);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" columns but transition-model has ", 34);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " pdf-ids.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

void kaldi::DecodableMatrixScaledMappedLazyNnet1::~DecodableMatrixScaledMappedLazyNnet1(kaldi::DecodableMatrixScaledMappedLazyNnet1 *this)
{
  *(_QWORD *)this = &off_1E5D2B098;
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 152);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);
}

{
  *(_QWORD *)this = &off_1E5D2B098;
  *((_QWORD *)this + 19) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 152);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)this + 16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::SeevaStepInferenceTensorNames::BuildStateTensorNames(kaldi::quasar::SeevaStepInferenceTensorNames *this)
{
  int v2;
  std::allocator<std::string> *v3;
  std::allocator<std::string> *v4;
  char v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  char v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  int v37;
  _QWORD *v38;
  std::allocator<std::string> *v39;
  std::allocator<std::string> *v40;
  char v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  char v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  uint64_t *i;
  int v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::string *v65;
  std::string *v66;
  std::string::size_type v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  std::string *v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  std::allocator<std::string> *v80;
  std::vector<std::string> *v81;
  std::vector<std::string> *v82;
  std::vector<std::string> *v83;
  const std::string::value_type *v84;
  const std::string::value_type *v85;
  std::__split_buffer<std::string> v86;
  void *__p[2];
  std::string::size_type v88;
  _QWORD v89[3];

  v89[2] = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 84) >= 1)
  {
    v2 = 0;
    v84 = (char *)this + 72;
    v85 = (char *)this + 48;
    v80 = (std::allocator<std::string> *)((char *)this + 232);
    v81 = (std::vector<std::string> *)((char *)this + 240);
    v82 = (std::vector<std::string> *)((char *)this + 216);
    v3 = (std::allocator<std::string> *)((char *)this + 256);
    do
    {
      std::to_string((std::string *)&v86, v2);
      v4 = v3;
      v5 = *((_BYTE *)this + 71);
      if (v5 >= 0)
        v6 = v85;
      else
        v6 = (const std::string::value_type *)*((_QWORD *)this + 6);
      if (v5 >= 0)
        v7 = *((unsigned __int8 *)this + 71);
      else
        v7 = *((_QWORD *)this + 7);
      v8 = std::string::insert((std::string *)&v86, 0, v6, v7);
      v9 = v8->__r_.__value_.__r.__words[0];
      __p[0] = (void *)v8->__r_.__value_.__l.__size_;
      *(void **)((char *)__p + 7) = *(void **)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
      v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0)
        operator delete(v86.__first_);
      std::to_string((std::string *)&v86, v2);
      v11 = *((_BYTE *)this + 95);
      if (v11 >= 0)
        v12 = v84;
      else
        v12 = (const std::string::value_type *)*((_QWORD *)this + 9);
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)this + 95);
      else
        v13 = *((_QWORD *)this + 10);
      v14 = std::string::insert((std::string *)&v86, 0, v12, v13);
      v15 = v14->__r_.__value_.__r.__words[0];
      v89[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v89 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0)
        operator delete(v86.__first_);
      v17 = *((_QWORD *)this + 28);
      v18 = *((_QWORD *)this + 29);
      if (v17 >= v18)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (unint64_t)v82->__begin_) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (unint64_t)v82->__begin_) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v21;
        v86.__end_cap_.__value_ = v80;
        if (v23)
          v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v80, v23);
        else
          v24 = 0;
        v25 = v24 + v20;
        v86.__first_ = v24;
        v86.__begin_ = v25;
        v86.__end_cap_.__value_ = &v24[v23];
        v25->__r_.__value_.__r.__words[0] = v9;
        v25->__r_.__value_.__l.__size_ = (std::string::size_type)__p[0];
        *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p + 7);
        *((_BYTE *)&v25->__r_.__value_.__s + 23) = v10;
        __p[0] = 0;
        *(void **)((char *)__p + 7) = 0;
        v86.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v82, &v86);
        v19 = *((_QWORD *)this + 28);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
      }
      else
      {
        *(_QWORD *)v17 = v9;
        *(void **)(v17 + 8) = __p[0];
        *(void **)(v17 + 15) = *(void **)((char *)__p + 7);
        *(_BYTE *)(v17 + 23) = v10;
        __p[0] = 0;
        *(void **)((char *)__p + 7) = 0;
        v19 = v17 + 24;
        *((_QWORD *)this + 28) = v17 + 24;
      }
      v3 = v4;
      *((_QWORD *)this + 28) = v19;
      v26 = *((_QWORD *)this + 31);
      v27 = *((_QWORD *)this + 32);
      if (v26 >= v27)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (unint64_t)v81->__begin_) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (unint64_t)v81->__begin_) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        v86.__end_cap_.__value_ = v4;
        if (v33)
        {
          v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v33);
          v3 = v4;
        }
        else
        {
          v34 = 0;
        }
        v35 = v34 + v30;
        v86.__first_ = v34;
        v86.__begin_ = v35;
        v86.__end_cap_.__value_ = &v34[v33];
        v36 = v89[0];
        v35->__r_.__value_.__r.__words[0] = v15;
        v35->__r_.__value_.__l.__size_ = v36;
        *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v89 + 7);
        *((_BYTE *)&v35->__r_.__value_.__s + 23) = v16;
        v86.__end_ = v35 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v81, &v86);
        v29 = *((_QWORD *)this + 31);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
      }
      else
      {
        v28 = v89[0];
        *(_QWORD *)v26 = v15;
        *(_QWORD *)(v26 + 8) = v28;
        *(_QWORD *)(v26 + 15) = *(_QWORD *)((char *)v89 + 7);
        *(_BYTE *)(v26 + 23) = v16;
        v29 = v26 + 24;
        *((_QWORD *)this + 31) = v26 + 24;
      }
      *((_QWORD *)this + 31) = v29;
      ++v2;
    }
    while (v2 < *((_DWORD *)this + 84));
  }
  if (*((int *)this + 85) >= 1)
  {
    v37 = 0;
    v38 = (_QWORD *)((char *)this + 264);
    v83 = (std::vector<std::string> *)((char *)this + 288);
    v39 = (std::allocator<std::string> *)((char *)this + 304);
    do
    {
      std::to_string((std::string *)&v86, v37);
      v40 = v39;
      v41 = *((_BYTE *)this + 191);
      if (v41 >= 0)
        v42 = (char *)this + 168;
      else
        v42 = (const std::string::value_type *)*((_QWORD *)this + 21);
      if (v41 >= 0)
        v43 = *((unsigned __int8 *)this + 191);
      else
        v43 = *((_QWORD *)this + 22);
      v44 = std::string::insert((std::string *)&v86, 0, v42, v43);
      v45 = v44->__r_.__value_.__r.__words[0];
      v89[0] = v44->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v89 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
      v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0)
        operator delete(v86.__first_);
      std::to_string((std::string *)&v86, v37);
      v47 = *((_BYTE *)this + 215);
      if (v47 >= 0)
        v48 = (char *)this + 192;
      else
        v48 = (const std::string::value_type *)*((_QWORD *)this + 24);
      if (v47 >= 0)
        v49 = *((unsigned __int8 *)this + 215);
      else
        v49 = *((_QWORD *)this + 25);
      v50 = std::string::insert((std::string *)&v86, 0, v48, v49);
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v88 = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__end_) < 0)
        operator delete(v86.__first_);
      for (i = (uint64_t *)*((_QWORD *)this + 44); i; i = (uint64_t *)*i)
      {
        v53 = *((_DWORD *)i + 7);
        if (v37 >= v53)
        {
          if (v53 >= v37)
          {
            v54 = *((_QWORD *)this + 40);
            if (v54 >= *((_QWORD *)this + 41))
            {
              v56 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)this + 39, (__int128 *)__p);
            }
            else
            {
              if (SHIBYTE(v88) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)this + 40), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                v55 = *(_OWORD *)__p;
                *(_QWORD *)(v54 + 16) = v88;
                *(_OWORD *)v54 = v55;
              }
              v56 = v54 + 24;
              *((_QWORD *)this + 40) = v54 + 24;
            }
            *((_QWORD *)this + 40) = v56;
            break;
          }
          ++i;
        }
      }
      v57 = *((_QWORD *)this + 34);
      v58 = *((_QWORD *)this + 35);
      if (v57 >= v58)
      {
        v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v38) >> 3);
        v62 = v61 + 1;
        if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v38) >> 3);
        if (2 * v63 > v62)
          v62 = 2 * v63;
        if (v63 >= 0x555555555555555)
          v64 = 0xAAAAAAAAAAAAAAALL;
        else
          v64 = v62;
        v86.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 280);
        if (v64)
          v65 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)this + 280, v64);
        else
          v65 = 0;
        v66 = v65 + v61;
        v86.__first_ = v65;
        v86.__begin_ = v66;
        v86.__end_cap_.__value_ = &v65[v64];
        v67 = v89[0];
        v66->__r_.__value_.__r.__words[0] = v45;
        v66->__r_.__value_.__l.__size_ = v67;
        *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v89 + 7);
        *((_BYTE *)&v66->__r_.__value_.__s + 23) = v46;
        v89[0] = 0;
        *(_QWORD *)((char *)v89 + 7) = 0;
        v86.__end_ = v66 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)this + 11, &v86);
        v60 = *((_QWORD *)this + 34);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
      }
      else
      {
        v59 = v89[0];
        *(_QWORD *)v57 = v45;
        *(_QWORD *)(v57 + 8) = v59;
        *(_QWORD *)(v57 + 15) = *(_QWORD *)((char *)v89 + 7);
        *(_BYTE *)(v57 + 23) = v46;
        v89[0] = 0;
        *(_QWORD *)((char *)v89 + 7) = 0;
        v60 = v57 + 24;
        *((_QWORD *)this + 34) = v57 + 24;
      }
      v39 = v40;
      *((_QWORD *)this + 34) = v60;
      v69 = *((_QWORD *)this + 37);
      v68 = *((_QWORD *)this + 38);
      if (v69 >= v68)
      {
        v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (unint64_t)v83->__begin_) >> 3);
        v72 = v71 + 1;
        if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (unint64_t)v83->__begin_) >> 3);
        if (2 * v73 > v72)
          v72 = 2 * v73;
        if (v73 >= 0x555555555555555)
          v74 = 0xAAAAAAAAAAAAAAALL;
        else
          v74 = v72;
        v86.__end_cap_.__value_ = v40;
        if (v74)
        {
          v75 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v40, v74);
          v39 = v40;
        }
        else
        {
          v75 = 0;
        }
        v76 = v75 + v71;
        v86.__first_ = v75;
        v86.__begin_ = v76;
        v86.__end_cap_.__value_ = &v75[v74];
        v77 = *(_OWORD *)__p;
        v76->__r_.__value_.__r.__words[2] = v88;
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
        __p[1] = 0;
        v88 = 0;
        __p[0] = 0;
        v86.__end_ = v76 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v83, &v86);
        v78 = *((_QWORD *)this + 37);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v86);
        v79 = SHIBYTE(v88);
        *((_QWORD *)this + 37) = v78;
        if (v79 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v70 = *(_OWORD *)__p;
        *(_QWORD *)(v69 + 16) = v88;
        *(_OWORD *)v69 = v70;
        *((_QWORD *)this + 37) = v69 + 24;
      }
      ++v37;
    }
    while (v37 < *((_DWORD *)this + 85));
  }
}

void sub_1ADACC01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__split_buffer<std::wstring> *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__pa,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;

  *(_QWORD *)(v27 + 320) = v30;
  if (a27 < 0)
    operator delete(__pa);
  if (v28 < 0)
    operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaStepInference::SeevaStepInference(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  kaldi::quasar::SeevaStepInferenceTensorNames *v16;
  __int128 *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = &off_1E5D336B8;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = &unk_1E5D33A48;
  v8 = *(_OWORD *)(a4 + 8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a4 + 24);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  v10 = *(_OWORD *)(a4 + 56);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a4 + 72);
  *(_OWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a4 + 80);
  v11 = *(_OWORD *)(a4 + 88);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a4 + 104);
  *(_OWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a4 + 112);
  v12 = *(_OWORD *)(a4 + 120);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 136);
  *(_OWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E5D33D30;
  v13 = *(_OWORD *)(a4 + 144);
  v14 = *(_OWORD *)(a4 + 160);
  v15 = *(_OWORD *)(a4 + 176);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a4 + 192);
  *(_OWORD *)(a1 + 200) = v15;
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 168) = v13;
  v16 = (kaldi::quasar::SeevaStepInferenceTensorNames *)(a1 + 224);
  kaldi::quasar::SeevaStepInferenceTensorNames::SeevaStepInferenceTensorNames(a1 + 224, a5);
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  if (!*(_BYTE *)(a1 + 592))
  {
    kaldi::quasar::SeevaStepInferenceTensorNames::BuildStateTensorNames(v16);
    *(_BYTE *)(a1 + 592) = 1;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 600), *(std::string **)(a1 + 464), *(__int128 **)(a1 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3));
  v17 = (__int128 *)(a1 + 248);
  v18 = *(_QWORD *)(a1 + 608);
  if (v18 >= *(_QWORD *)(a1 + 616))
  {
    v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 600), v17);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 600, v17);
    v19 = v18 + 24;
  }
  *(_QWORD *)(a1 + 608) = v19;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 624), *(std::string **)(a1 + 512), *(__int128 **)(a1 + 520), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 3));
  v20 = (__int128 *)(a1 + 368);
  v21 = *(_QWORD *)(a1 + 632);
  if (v21 >= *(_QWORD *)(a1 + 640))
  {
    v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 624), v20);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 624, v20);
    v22 = v21 + 24;
  }
  *(_QWORD *)(a1 + 632) = v22;
  return a1;
}

void sub_1ADACC328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  uint64_t v11;
  void **v12;
  kaldi::quasar::SeevaStepInferenceTensorNames *v13;
  void **v14;
  void **v15;
  uint64_t v17;

  v15 = v14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v15;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::quasar::SeevaStepInferenceTensorNames::~SeevaStepInferenceTensorNames(v13);
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(v12);
  v17 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v11 + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  kaldi::quasar::SeevaStepInference::SeevaStepInference(v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(void **this)
{
  *this = &unk_1E5D33A48;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

void kaldi::quasar::SeevaStepInference::~SeevaStepInference(kaldi::quasar::SeevaStepInference *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E5D336B8;
  v4 = (void **)((char *)this + 672);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 648);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 624);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 600);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::quasar::SeevaStepInferenceTensorNames::~SeevaStepInferenceTensorNames((kaldi::quasar::SeevaStepInference *)((char *)this + 224));
  *((_QWORD *)this + 3) = &unk_1E5D33A48;
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  kaldi::quasar::SeevaStepInference::~SeevaStepInference(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::SeevaStepInference::RunEncoder(uint64_t a1, uint64_t *a2, char a3)
{
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  int64x2_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int64x2_t v54;
  char *v55;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  unint64_t v62;
  void **v63;
  int64x2_t v64;
  char *v65;
  uint64_t v66;
  void ***v67;

  v60 = 0;
  v61 = 0;
  v62 = 0;
  v5 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v60, (__int128 *)(a1 + 224), *a2);
  v61 = v5;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if ((a3 & 1) == 0 && *(int *)(a1 + 560) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a1 + 440);
      v9 = v8 + v6;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * v7);
      if ((unint64_t)v5 >= v62)
      {
        v5 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v60, (__int128 *)v9, *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * v7));
      }
      else
      {
        if (*(char *)(v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v8 + v6), *(_QWORD *)(v8 + v6 + 8));
        }
        else
        {
          v11 = *(_OWORD *)v9;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v11;
        }
        v5[1].__r_.__value_.__r.__words[0] = v10;
        v5 = (std::string *)((char *)v5 + 32);
      }
      v61 = v5;
      ++v7;
      v6 += 24;
    }
    while (v7 < *(int *)(a1 + 560));
  }
  v12 = *(_QWORD *)(a1 + 8);
  v63 = 0;
  v64 = 0uLL;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void ***, uint64_t **))(*(_QWORD *)v12 + 128))(v12, &v60, a1 + 600, &v63, &v57);
  v67 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  v13 = *(_QWORD **)(a1 + 656);
  v14 = *(_QWORD **)(a1 + 648);
  while (v13 != v14)
  {
    v16 = *--v13;
    v15 = v16;
    *v13 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  *(_QWORD *)(a1 + 656) = v14;
  v17 = v58;
  v18 = *(_QWORD **)(a1 + 680);
  v19 = *(_QWORD *)(a1 + 688);
  if ((unint64_t)v18 >= v19)
  {
    v22 = *(_QWORD *)(a1 + 672);
    v23 = ((uint64_t)v18 - v22) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v24 = v19 - v22;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v66 = a1 + 688;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 688, v26);
    else
      v27 = 0;
    v28 = &v27[8 * v23];
    v29 = &v27[8 * v26];
    v65 = v29;
    v30 = *(v17 - 1);
    *(v17 - 1) = 0;
    *(_QWORD *)v28 = v30;
    v21 = v28 + 8;
    v64.i64[1] = (uint64_t)(v28 + 8);
    v31 = *(_QWORD **)(a1 + 680);
    v32 = *(_QWORD **)(a1 + 672);
    if (v31 == v32)
    {
      v34 = vdupq_n_s64((unint64_t)v31);
    }
    else
    {
      do
      {
        v33 = *--v31;
        *v31 = 0;
        *((_QWORD *)v28 - 1) = v33;
        v28 -= 8;
      }
      while (v31 != v32);
      v34 = *(int64x2_t *)(a1 + 672);
      v21 = (_QWORD *)v64.i64[1];
      v29 = v65;
    }
    *(_QWORD *)(a1 + 672) = v28;
    *(_QWORD *)(a1 + 680) = v21;
    v64 = v34;
    v35 = *(char **)(a1 + 688);
    *(_QWORD *)(a1 + 688) = v29;
    v65 = v35;
    v63 = (void **)v34.i64[0];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v63);
  }
  else
  {
    v20 = *(v58 - 1);
    *(v58 - 1) = 0;
    *v18 = v20;
    v21 = v18 + 1;
  }
  *(_QWORD *)(a1 + 680) = v21;
  v36 = v57;
  v37 = v58;
  if (v57 != v58)
  {
    v38 = 0;
    v39 = (int64x2_t *)(a1 + 648);
    v40 = *(_QWORD **)(a1 + 656);
    v41 = (_QWORD *)(a1 + 664);
    do
    {
      if ((unint64_t)v40 >= *v41)
      {
        v43 = ((uint64_t)v40 - v39->i64[0]) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v44 = *v41 - v39->i64[0];
        v45 = v44 >> 2;
        if (v44 >> 2 <= (unint64_t)(v43 + 1))
          v45 = v43 + 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        v66 = a1 + 664;
        if (v46)
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 664, v46);
        else
          v47 = 0;
        v48 = &v47[8 * v43];
        v49 = &v47[8 * v46];
        v65 = v49;
        v50 = *v36;
        *v36 = 0;
        *(_QWORD *)v48 = v50;
        v40 = v48 + 8;
        v64.i64[1] = (uint64_t)(v48 + 8);
        v51 = *(_QWORD **)(a1 + 656);
        v52 = *(_QWORD **)(a1 + 648);
        if (v51 == v52)
        {
          v54 = vdupq_n_s64((unint64_t)v51);
        }
        else
        {
          do
          {
            v53 = *--v51;
            *v51 = 0;
            *((_QWORD *)v48 - 1) = v53;
            v48 -= 8;
          }
          while (v51 != v52);
          v54 = *v39;
          v40 = (_QWORD *)v64.i64[1];
          v49 = v65;
        }
        *(_QWORD *)(a1 + 648) = v48;
        *(_QWORD *)(a1 + 656) = v40;
        v64 = v54;
        v55 = *(char **)(a1 + 664);
        *(_QWORD *)(a1 + 664) = v49;
        v65 = v55;
        v63 = (void **)v54.i64[0];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v63);
      }
      else
      {
        v42 = *v36;
        *v36 = 0;
        *v40++ = v42;
      }
      *(_QWORD *)(a1 + 656) = v40;
      ++v38;
      ++v36;
    }
    while (v38 != *(_DWORD *)(a1 + 560) && v36 != v37);
  }
  v63 = (void **)&v57;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v63);
  v63 = (void **)&v60;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v63);
}

void sub_1ADACC8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a9;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a9 = (void **)&a12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStepInference::RunDecoder(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5, uint64_t a6)
{
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  __int128 v22;
  uint64_t v23;
  void **v24[3];
  uint64_t v25;
  std::string *v26;
  unint64_t v27;
  void ***v28;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v11 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v25, (__int128 *)(a1 + 320), *a2);
  v12 = v11;
  v26 = v11;
  v13 = (__int128 *)(a1 + 344);
  v14 = *a3;
  if ((unint64_t)v11 >= v27)
  {
    v16 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v25, v13, v14);
  }
  else
  {
    if (*(char *)(a1 + 367) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a1 + 344), *(_QWORD *)(a1 + 352));
    }
    else
    {
      v15 = *v13;
      v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 360);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v15;
    }
    v12[1].__r_.__value_.__r.__words[0] = v14;
    v16 = (std::string *)((char *)v12 + 32);
  }
  v26 = v16;
  if ((a5 & 1) == 0 && *(int *)(a1 + 564) >= 1)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(a1 + 488);
      v20 = v19 + v17;
      v21 = *(_QWORD *)(*a4 + 8 * v18);
      if ((unint64_t)v16 >= v27)
      {
        v16 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v25, (__int128 *)v20, *(_QWORD *)(*a4 + 8 * v18));
      }
      else
      {
        if (*(char *)(v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(v19 + v17), *(_QWORD *)(v19 + v17 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v20;
          v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v22;
        }
        v16[1].__r_.__value_.__r.__words[0] = v21;
        v16 = (std::string *)((char *)v16 + 32);
      }
      v26 = v16;
      ++v18;
      v17 += 24;
    }
    while (v18 < *(int *)(a1 + 564));
  }
  v23 = *(_QWORD *)(a1 + 16);
  memset(v24, 0, sizeof(v24));
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void ***, uint64_t))(*(_QWORD *)v23 + 128))(v23, &v25, a1 + 624, v24, a6);
  v28 = v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v24[0] = (void **)&v25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1ADACCAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStepInference::CollectEncoderOutput(kaldi::quasar::SeevaStepInference *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  char *v39;
  char *v40;
  _QWORD v41[3];
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v7 = (uint64_t *)*((_QWORD *)this + 84);
  v8 = (uint64_t *)*((_QWORD *)this + 85);
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      v10 = *v7;
      if (v9 >= v45)
      {
        v11 = (v9 - (_BYTE *)v43) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = (v45 - (_BYTE *)v43) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v45 - (_BYTE *)v43) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v45, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v10;
        v9 = v15 + 8;
        v17 = (char *)v43;
        v16 = v44;
        if (v44 != v43)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = (char *)v43;
        }
        v43 = v15;
        v44 = v9;
        v45 = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v9 = v10;
        v9 += 8;
      }
      v44 = v9;
      ++v7;
    }
    while (v7 != v8);
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, void **, _QWORD))(**((_QWORD **)this + 1) + 96))(&v42, *((_QWORD *)this + 1), &v43, 0);
  if (a2 || a3 != -1)
  {
    v19 = *((_DWORD *)this + 45);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 104))(v41, *((_QWORD *)this + 1), v42);
    v20 = (uint64_t)(v41[1] - v41[0]) >> 3;
    v21 = (int)(((v19 * v20) & (a3 >> 31)) + a3) / v19;
    v22 = v20 - 1;
    v23 = (int)(((v19 * v20) & (a2 >> 31)) + a2) / v19;
    if (v22 < v23)
      LODWORD(v23) = v22;
    if (v22 < v21)
      v21 = v22;
    __p = 0;
    v39 = 0;
    v40 = 0;
    if ((int)v23 <= v21)
    {
      v24 = 0;
      v25 = (int)v23;
      v26 = v21 + 1;
      do
      {
        v27 = *(_QWORD *)(v41[0] + 8 * v25);
        if (v24 >= v40)
        {
          v28 = (v24 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v28 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v29 = (v40 - (_BYTE *)__p) >> 2;
          if (v29 <= v28 + 1)
            v29 = v28 + 1;
          if ((unint64_t)(v40 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v40, v30);
          else
            v31 = 0;
          v32 = &v31[8 * v28];
          *(_QWORD *)v32 = v27;
          v24 = v32 + 8;
          v34 = (char *)__p;
          v33 = v39;
          if (v39 != __p)
          {
            do
            {
              v35 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *((_QWORD *)v32 - 1) = v35;
              v32 -= 8;
            }
            while (v33 != v34);
            v33 = (char *)__p;
          }
          __p = v32;
          v39 = v24;
          v40 = &v31[8 * v30];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v24 = v27;
          v24 += 8;
        }
        v39 = v24;
        ++v25;
      }
      while (v26 != (_DWORD)v25);
    }
    (*(void (**)(_QWORD, void **, _QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), &__p, 0);
    if (__p)
    {
      v39 = (char *)__p;
      operator delete(__p);
    }
    __p = v41;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v36 = v42;
    v42 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  else
  {
    *a4 = v42;
  }
  if (v43)
  {
    v44 = (char *)v43;
    operator delete(v43);
  }
}

void sub_1ADACCE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v20;

  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = a17;
  a17 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::SeevaStepInference::ResetGraph(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = this;
  v2 = (_QWORD *)this[82];
  v3 = (_QWORD *)this[81];
  while (v2 != v3)
  {
    v4 = (_QWORD *)*--v2;
    this = v4;
    *v2 = 0;
    if (v4)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  v1[82] = v3;
  v5 = (_QWORD *)v1[85];
  v6 = (_QWORD *)v1[84];
  while (v5 != v6)
  {
    v7 = (_QWORD *)*--v5;
    this = v7;
    *v5 = 0;
    if (v7)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  v1[85] = v6;
  return this;
}

void kaldi::quasar::SeevaStepInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::quasar::SeevaInferenceConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames in each batch");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 144, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "if the whole audio is too short, pad to this length");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 148, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "the beam size used in the model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 152, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "time-reduction-factor");
  std::string::basic_string[abi:ne180100]<0>(__p, "source sequence length reduction factor in the model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 156, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-decode-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "the maximum number of decoding steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 160, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "coverage-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this value as the coverage penalty.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 164, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "utt-end-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this beam at the utterance end.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 168, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "safe-align-thresh");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of steps for alignment wiggle room");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 172, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "init-wait-time");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames before running the first generation step");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 176, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cont-wait-time");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames before running the continuous generation step");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 180, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "rb-steps-fail");
  std::string::basic_string[abi:ne180100]<0>(__p, "for early termination (failed), rollback this number of steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 184, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "rb-steps-boundary");
  std::string::basic_string[abi:ne180100]<0>(__p, "for hitting boundary, rollback this number of steps");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 188, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "encoder-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "only streaming the encoder part");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 192, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-attn-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "the minimum attention weight for a valid generation step");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 196, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADACD478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "if >= 0, use this value as length penalty weight. Default means using the default in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pad-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "if the whole audio is too short, pad to this length");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "mmapped-graph");
  std::string::basic_string[abi:ne180100]<0>(__p, "is it a memory mapped graph?");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-inter-op-threads");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of threads for inter ops in TF graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-intra-op-threads");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum number of threads for intra ops in TF graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "default-device");
  std::string::basic_string[abi:ne180100]<0>(__p, "TF default device");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "catf-input");
  std::string::basic_string[abi:ne180100]<0>(__p, "the catf input, a list of comma delimited values");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 56, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "allow-soft-placement");
  std::string::basic_string[abi:ne180100]<0>(__p, "TF allow soft placement");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 80, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "log-device-placement");
  std::string::basic_string[abi:ne180100]<0>(__p, "TF log device placement");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 81, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "profiling-granularity");
  std::string::basic_string[abi:ne180100]<0>(__p, "Level of profiling (higher means more precise breakdown per operation)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 84, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-config-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The config file for the model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 88, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-config-binary");
  std::string::basic_string[abi:ne180100]<0>(__p, "is the config file binary?");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 112, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-config-end-token");
  std::string::basic_string[abi:ne180100]<0>(__p, "The config file's end token");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, v6, a1 + 120, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADACD9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::SeevaStepInferenceTensorNames::SeevaStepInferenceTensorNames(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(result + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(result + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(result + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(result + 72) = v5;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v6 = a2[6];
  *(_QWORD *)(result + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(result + 96) = v6;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v7 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(result + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)(result + 120) = v7;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v8 = a2[9];
  *(_QWORD *)(result + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(result + 144) = v8;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  v9 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(result + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(result + 168) = v9;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  v10 = a2[12];
  *(_QWORD *)(result + 208) = *((_QWORD *)a2 + 26);
  *(_OWORD *)(result + 192) = v10;
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(result + 232) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_OWORD *)(result + 240) = a2[15];
  *(_QWORD *)(result + 256) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 30) = 0;
  *((_QWORD *)a2 + 31) = 0;
  *((_QWORD *)a2 + 32) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = 0;
  v11 = *((_QWORD *)a2 + 34);
  *(_QWORD *)(result + 264) = *((_QWORD *)a2 + 33);
  *(_QWORD *)(result + 272) = v11;
  *(_QWORD *)(result + 280) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 33) = 0;
  *((_QWORD *)a2 + 34) = 0;
  *((_QWORD *)a2 + 35) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_OWORD *)(result + 288) = a2[18];
  *(_QWORD *)(result + 304) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 36) = 0;
  *((_QWORD *)a2 + 37) = 0;
  *((_QWORD *)a2 + 38) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 328) = 0;
  v12 = *((_QWORD *)a2 + 40);
  *(_QWORD *)(result + 312) = *((_QWORD *)a2 + 39);
  *(_QWORD *)(result + 320) = v12;
  *(_QWORD *)(result + 328) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 39) = 0;
  *((_QWORD *)a2 + 40) = 0;
  *((_QWORD *)a2 + 41) = 0;
  *(_QWORD *)(result + 336) = *((_QWORD *)a2 + 42);
  *(_QWORD *)(result + 344) = *((_QWORD *)a2 + 43);
  v13 = result + 352;
  v14 = *((_QWORD *)a2 + 44);
  *(_QWORD *)(result + 352) = v14;
  v15 = *((_QWORD *)a2 + 45);
  *(_QWORD *)(result + 360) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v13;
    *((_QWORD *)a2 + 43) = a2 + 22;
    *((_QWORD *)a2 + 44) = 0;
    *((_QWORD *)a2 + 45) = 0;
  }
  else
  {
    *(_QWORD *)(result + 344) = v13;
  }
  *(_BYTE *)(result + 368) = *((_BYTE *)a2 + 368);
  return result;
}

void kaldi::quasar::SeevaStepInferenceTensorNames::~SeevaStepInferenceTensorNames(kaldi::quasar::SeevaStepInferenceTensorNames *this)
{
  void **v2;

  std::__tree<int>::destroy((uint64_t)this + 344, *((_QWORD **)this + 44));
  v2 = (void **)((char *)this + 312);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::vector<std::vector<int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADACDE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADACDEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ScoreCacheFasterDecoder::ScoreCacheFasterDecoder(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  vm_map_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v22;
  _BYTE v23[272];
  vm_address_t v24;
  vm_address_t address;

  *(_QWORD *)(a1 + 48) = 0;
  v5 = a1 + 48;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1AE146E50;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a2;
  v6 = *a3;
  v7 = *(__int128 *)((char *)a3 + 12);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 148) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  v8 = *(int *)(a1 + 152);
  *(_DWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 24) = 1;
  v24 = 0;
  address = 0;
  v9 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 28 * v8, 1711276033))
  {
    if (kaldi::g_kaldi_verbose_level < 0)
      goto LABEL_9;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": Could not vm_allocate ", 24);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" of ", 4);
    v14 = strlen((const char *)(0x80000001AE1849D4 & 0x7FFFFFFFFFFFFFFFLL));
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, 0x80000001AE1849D4 & 0x7FFFFFFFFFFFFFFFLL, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = address;
  if (vm_allocate(*v9, &v24, 4 * *(int *)(a1 + 32), 1711276033))
  {
    if (kaldi::g_kaldi_verbose_level < 0)
      goto LABEL_9;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": Could not vm_allocate ", 24);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" of ", 4);
    v19 = strlen((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EF8] + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, *(_QWORD *)(MEMORY[0x1E0DE4EF8] + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    std::ostream::operator<<();
LABEL_8:
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v23);
LABEL_9:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v22 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v22, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
  }
  *(_QWORD *)a1 = v24;
  *(_DWORD *)(a1 + 8) = 0;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v5, 0x3E8uLL);
  return a1;
}

void sub_1ADACE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  void *v15;
  void *v16;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  v15 = (void *)v12[27];
  if (v15)
  {
    v12[28] = v15;
    operator delete(v15);
  }
  a11 = v13 + 3;
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__destroy_vector::operator()[abi:ne180100](&a11);
  v16 = *v13;
  if (*v13)
  {
    v12[22] = v16;
    operator delete(v16);
  }
  kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList(v11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ScoreCacheFasterDecoder::Decode(kaldi::ScoreCacheFasterDecoder *this, kaldi::DecodableInterface *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t (***v13)(_QWORD);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  float v26;
  uint64_t v27;
  float v28;
  _QWORD **v29;
  _QWORD *v30[2];
  int v31;

  v4 = *((_QWORD *)this + 7);
  if (v4 != -1)
  {
    v5 = *((_QWORD *)this + 9);
    do
    {
      v6 = (uint64_t *)(v5 + 16 * v4);
      v6[1] = 0;
      v4 = *v6;
    }
    while (v4 != -1);
  }
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = -1;
  if (v7)
  {
    do
    {
      kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, *(_DWORD *)(v7 + 8));
      v8 = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 16) = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v7;
      v7 = v8;
    }
    while (v8);
  }
  v10 = *((_QWORD *)this + 24);
  v9 = *((_QWORD *)this + 25);
  if (v9 != v10)
  {
    v11 = v9 - 32;
    do
    {
      std::__tree<int>::destroy(v11, *(_QWORD **)(v11 + 8));
      v12 = v11 == v10;
      v11 -= 32;
    }
    while (!v12);
  }
  *((_QWORD *)this + 25) = v10;
  v13 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 5);
  if (v13)
  {
    LODWORD(v13) = (**v13)(v13);
    v10 = *((_QWORD *)this + 25);
  }
  v30[0] = 0;
  v30[1] = 0;
  v29 = v30;
  v31 = (int)v13;
  if (v10 >= *((_QWORD *)this + 26))
  {
    v14 = std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__push_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>((uint64_t *)this + 24, (uint64_t)&v29);
  }
  else
  {
    std::map<int,int>::map[abi:ne180100]((uint64_t *)v10, (uint64_t)&v29);
    *(_DWORD *)(v10 + 24) = v31;
    v14 = v10 + 32;
    *((_QWORD *)this + 25) = v10 + 32;
  }
  v15 = (uint64_t *)((char *)this + 48);
  *((_QWORD *)this + 25) = v14;
  std::__tree<int>::destroy((uint64_t)&v29, v30[0]);
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 24))(*((_QWORD *)this + 16));
  v17 = (int)v16;
  v18 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, 0, 0, v16 << 32, 0.0);
  v19 = v17 % *((_QWORD *)this + 8);
  v20 = (_QWORD *)(*((_QWORD *)this + 9) + 16 * v19);
  v21 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New((_QWORD *)this + 6);
  *(_QWORD *)v21 = v17;
  *(_DWORD *)(v21 + 8) = v18;
  v22 = v20 + 1;
  v23 = v20[1];
  if (v23)
  {
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v23 + 16);
    *(_QWORD *)(v23 + 16) = v21;
    *v22 = v21;
  }
  else
  {
    v24 = *((_QWORD *)this + 7);
    if (v24 != -1)
      v15 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v24 + 8) + 16);
    *v15 = v21;
    *(_QWORD *)(v21 + 16) = 0;
    *v22 = v21;
    *v20 = v24;
    *((_QWORD *)this + 7) = v19;
  }
  kaldi::ScoreCacheFasterDecoder::ProcessNonemitting(this, 3.4028e38);
  result = (*(uint64_t (**)(kaldi::DecodableInterface *, uint64_t))(*(_QWORD *)a2 + 8))(a2, 0xFFFFFFFFLL);
  if ((result & 1) == 0)
  {
    v27 = 0;
    do
    {
      v28 = kaldi::ScoreCacheFasterDecoder::ProcessEmitting(this, a2, v27, v26);
      kaldi::ScoreCacheFasterDecoder::ProcessNonemitting(this, v28);
      result = (*(uint64_t (**)(kaldi::DecodableInterface *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v27);
      v27 = (v27 + 1);
    }
    while ((result & 1) == 0);
  }
  return result;
}

void sub_1ADACE440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::ScoreCacheFasterDecoder::ClearToks(uint64_t *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    v2 = a2;
    v3 = this;
    do
    {
      this = kaldi::ScoreCacheFasterDecoder::DeleteTokenChain(v3, *(_DWORD *)(v2 + 8));
      v4 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = v3[12];
      v3[12] = v2;
      v2 = v4;
    }
    while (v4);
  }
  return this;
}

uint64_t kaldi::ScoreCacheFasterDecoder::NewToken(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  std::runtime_error *exception;

  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = v5 - 1;
    LODWORD(v7) = *(_DWORD *)(*(_QWORD *)a1 + 4 * (v5 - 1));
    *(_DWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7 >= *(int *)(a1 + 32))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "ScoreCacheFasterDecoder: Ran out of token storage");
    }
    *(_QWORD *)(a1 + 24) = v7 + 1;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = v8 + 28 * v7;
  *(_DWORD *)(v9 + 20) = 1;
  *(_QWORD *)v9 = a3;
  *(_QWORD *)(v9 + 8) = a4;
  if (a2)
  {
    v10 = *(_QWORD *)(a1 + 16) + 28 * a2;
    ++*(_DWORD *)(v10 + 20);
    v11 = *(float *)(v10 + 24) + *(float *)&a4;
  }
  else
  {
    v11 = *(float *)&a4;
  }
  v12 = v8 + 28 * v7;
  *(float *)(v12 + 24) = v11 + a5;
  *(_DWORD *)(v12 + 16) = a2;
  return v7;
}

void sub_1ADACE590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void kaldi::ScoreCacheFasterDecoder::ProcessNonemitting(kaldi::ScoreCacheFasterDecoder *this, float a2)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int32 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  __n128 *v52;
  char *v53;
  __n128 *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  __n128 *v65;
  uint64_t v66;
  _QWORD *v67;
  void **v68;
  uint64_t *v69;
  _QWORD v70[3];
  _DWORD *v71;
  unint64_t v72;
  char v73[4];
  int v74;
  float v75;
  int v76;

  v2 = (unsigned int *)*((_QWORD *)this + 21);
  v68 = (void **)((char *)this + 168);
  v3 = (uint64_t *)*((_QWORD *)this + 6);
  v69 = (uint64_t *)((char *)this + 48);
  if (v3)
  {
    v67 = (_QWORD *)((char *)this + 184);
    do
    {
      v6 = *v3;
      v7 = *((_DWORD *)v3 + 2);
      if ((unint64_t)v2 >= *v67)
      {
        v8 = (unsigned int *)*v68;
        v9 = ((char *)v2 - (_BYTE *)*v68) >> 4;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = *v67 - (_QWORD)v8;
        if (v11 >> 3 > v10)
          v10 = v11 >> 3;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v12 = 0xFFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v12);
          v8 = (unsigned int *)*((_QWORD *)this + 21);
          v2 = (unsigned int *)*((_QWORD *)this + 22);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[16 * v9];
        *(_QWORD *)v14 = v6;
        *((_DWORD *)v14 + 2) = v7;
        v15 = v14;
        if (v2 != v8)
        {
          do
          {
            *((_OWORD *)v15 - 1) = *((_OWORD *)v2 - 1);
            v15 -= 16;
            v2 -= 4;
          }
          while (v2 != v8);
          v8 = (unsigned int *)*v68;
        }
        v2 = (unsigned int *)(v14 + 16);
        *((_QWORD *)this + 21) = v15;
        *((_QWORD *)this + 22) = v14 + 16;
        *((_QWORD *)this + 23) = &v13[16 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v2 = v6;
        v2[2] = v7;
        v2 += 4;
      }
      *((_QWORD *)this + 22) = v2;
      v3 = (uint64_t *)v3[2];
    }
    while (v3);
    v16 = (unsigned int *)*v68;
    while (1)
    {
      if (v16 == v2)
        return;
      v18 = *((_QWORD *)v2 - 2);
      v2 -= 4;
      v17 = v18;
      v19 = v2[2];
      *((_QWORD *)this + 22) = v2;
      if (v19 && *((_DWORD *)this + 8) >= v19)
        v20 = *((_QWORD *)this + 2) + 28 * v19;
      else
        v20 = 0;
      if (*(float *)(v20 + 24) > a2)
        continue;
      v21 = HIDWORD(v17);
      v22 = *((_QWORD *)this + 16);
      v72 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v22 + 136))(v22, v17, v70);
      v66 = v17 >> 32;
      while (1)
      {
        if (!v70[0])
        {
          if (v72 >= v70[2])
            goto LABEL_98;
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v70[0] + 24))(v70[0]))
          break;
        if (v70[0])
        {
          v24 = (*(uint64_t (**)(void))(*(_QWORD *)v70[0] + 32))();
          goto LABEL_34;
        }
LABEL_33:
        v24 = v70[1] + 16 * v72;
LABEL_34:
        if (*(_DWORD *)v24)
          goto LABEL_89;
        v25 = *(_QWORD *)v24;
        v26 = HIDWORD(*(_QWORD *)v24);
        v27 = *(float *)(v24 + 8);
        v28 = *(int *)(v24 + 12);
        if (!(_DWORD)v26)
          goto LABEL_49;
        v29 = *((_QWORD *)this + 5);
        if (!v29)
        {
          v32 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v21, v26, 0);
          goto LABEL_50;
        }
        if (!(*(unsigned int (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v29 + 32))(v29, *(unsigned int *)(*((_QWORD *)this + 24) + 32 * v66 + 24), v26, v73))
        {
          v27 = INFINITY;
LABEL_49:
          v32 = v21;
          goto LABEL_50;
        }
        v30 = NAN;
        if (v27 != -INFINITY)
        {
          v30 = NAN;
          if (v75 != -INFINITY)
          {
            if (v75 == INFINITY || v27 == INFINITY)
              v30 = INFINITY;
            else
              v30 = v75 + v27;
          }
        }
        LODWORD(v26) = v74;
        v32 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v21, v74, v76);
        v27 = v30;
LABEL_50:
        v23.n128_f32[0] = *(float *)(v20 + 24) + v27;
        if (v23.n128_f32[0] < a2)
        {
          v33 = v28 + (v32 << 32);
          v34 = *((_QWORD *)this + 9);
          v35 = v33 % *((_QWORD *)this + 8);
          v36 = *(_QWORD *)(v34 + 16 * v35 + 8);
          if (!v36)
            goto LABEL_57;
          v37 = *(_QWORD *)(v34 + 16 * v35);
          v38 = v69;
          if (v37 != -1)
            v38 = (uint64_t *)(*(_QWORD *)(v34 + 16 * v37 + 8) + 16);
          v39 = *(_QWORD *)(v36 + 16);
          v40 = *v38;
          if (*v38 == v39)
          {
LABEL_57:
            v41 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v19, v25 | ((unint64_t)v26 << 32), LODWORD(v27) | (unint64_t)(v28 << 32), 0.0);
            v42 = *((_QWORD *)this + 8);
            v43 = *((_QWORD *)this + 9);
            v44 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New(v69);
            *(_QWORD *)v44 = v33;
            *(_DWORD *)(v44 + 8) = v41;
            v45 = v43 + 16 * (v33 % v42);
            v48 = *(_QWORD *)(v45 + 8);
            v46 = (uint64_t *)(v45 + 8);
            v47 = v48;
            if (v48)
            {
              *(_QWORD *)(v44 + 16) = *(_QWORD *)(v47 + 16);
              *(_QWORD *)(v47 + 16) = v44;
              *v46 = v44;
            }
            else
            {
              v49 = *((_QWORD *)this + 7);
              v50 = v69;
              if (v49 != -1)
                v50 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v49 + 8) + 16);
              *v50 = v44;
              *(_QWORD *)(v44 + 16) = 0;
              *v46 = v44;
              *(_QWORD *)(v43 + 16 * (v33 % v42)) = v49;
              *((_QWORD *)this + 7) = v33 % v42;
            }
            v52 = (__n128 *)*((_QWORD *)this + 22);
            v51 = *((_QWORD *)this + 23);
            if ((unint64_t)v52 < v51)
              goto LABEL_63;
            v54 = (__n128 *)*v68;
            v55 = ((char *)v52 - (_BYTE *)*v68) >> 4;
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v57 = v51 - (_QWORD)v54;
            if (v57 >> 3 > v56)
              v56 = v57 >> 3;
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
              v58 = 0xFFFFFFFFFFFFFFFLL;
            else
              v58 = v56;
            if (v58)
            {
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v58);
              v54 = (__n128 *)*((_QWORD *)this + 21);
              v52 = (__n128 *)*((_QWORD *)this + 22);
            }
            else
            {
              v59 = 0;
            }
            v64 = &v59[16 * v55];
            *(_QWORD *)v64 = v33;
            *((_DWORD *)v64 + 2) = v41;
            v65 = (__n128 *)v64;
            if (v52 != v54)
            {
              do
              {
                v23 = v52[-1];
                v65[-1] = v23;
                --v65;
                --v52;
              }
              while (v52 != v54);
              goto LABEL_85;
            }
LABEL_86:
            v53 = v64 + 16;
            *((_QWORD *)this + 21) = v65;
            *((_QWORD *)this + 22) = v64 + 16;
            *((_QWORD *)this + 23) = &v59[16 * v58];
            if (v54)
              operator delete(v54);
LABEL_88:
            *((_QWORD *)this + 22) = v53;
            goto LABEL_89;
          }
          while (*(_QWORD *)v40 != v33)
          {
            v40 = *(_QWORD *)(v40 + 16);
            if (v40 == v39)
              goto LABEL_57;
          }
          if (*(float *)(*((_QWORD *)this + 2) + 28 * *(unsigned int *)(v40 + 8) + 24) > v23.n128_f32[0])
          {
            v41 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v19, v25 | ((unint64_t)v26 << 32), LODWORD(v27) | ((unint64_t)v28 << 32), 0.0);
            kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, *(_DWORD *)(v40 + 8));
            *(_DWORD *)(v40 + 8) = v41;
            v52 = (__n128 *)*((_QWORD *)this + 22);
            v60 = *((_QWORD *)this + 23);
            if ((unint64_t)v52 >= v60)
            {
              v54 = (__n128 *)*v68;
              v61 = ((char *)v52 - (_BYTE *)*v68) >> 4;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v63 = v60 - (_QWORD)v54;
              if (v63 >> 3 > v62)
                v62 = v63 >> 3;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
                v58 = 0xFFFFFFFFFFFFFFFLL;
              else
                v58 = v62;
              if (v58)
              {
                v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v58);
                v54 = (__n128 *)*((_QWORD *)this + 21);
                v52 = (__n128 *)*((_QWORD *)this + 22);
              }
              else
              {
                v59 = 0;
              }
              v64 = &v59[16 * v61];
              *(_QWORD *)v64 = v33;
              *((_DWORD *)v64 + 2) = v41;
              v65 = (__n128 *)v64;
              if (v52 != v54)
              {
                do
                {
                  v23 = v52[-1];
                  v65[-1] = v23;
                  --v65;
                  --v52;
                }
                while (v52 != v54);
LABEL_85:
                v54 = (__n128 *)*v68;
              }
              goto LABEL_86;
            }
LABEL_63:
            v52->n128_u64[0] = v33;
            v52->n128_u32[2] = v41;
            v53 = (char *)&v52[1];
            goto LABEL_88;
          }
        }
LABEL_89:
        if (v70[0])
          (*(void (**)(_QWORD, __n128))(*(_QWORD *)v70[0] + 40))(v70[0], v23);
        else
          ++v72;
      }
      if (v70[0])
      {
        (*(void (**)(void))(*(_QWORD *)v70[0] + 8))();
        goto LABEL_100;
      }
LABEL_98:
      if (v71)
        --*v71;
LABEL_100:
      v16 = (unsigned int *)*((_QWORD *)this + 21);
      v2 = (unsigned int *)*((_QWORD *)this + 22);
    }
  }
}

void sub_1ADACEBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

float kaldi::ScoreCacheFasterDecoder::ProcessEmitting(kaldi::ScoreCacheFasterDecoder *this, kaldi::DecodableInterface *a2, unsigned int a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  signed int v24;
  float v25;
  uint64_t v26;
  float v27;
  float v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  unint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v45;
  float v46;
  float v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t i;
  float v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  char v84[4];
  signed int v85;
  float v86;
  int v87;

  v6 = *((_QWORD *)this + 7);
  if (v6 != -1)
  {
    v7 = *((_QWORD *)this + 9);
    do
    {
      v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      v6 = *v8;
    }
    while (v6 != -1);
  }
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = -1;
  v83 = 0;
  v82 = 0.0;
  v81 = 0;
  v10 = v9;
  v11 = kaldi::GetCutoffHelper<kaldi::ScoreCacheFasterDecoder,kaldi::ScoreCacheFasterDecoderOptions,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>(this, (uint64_t)this + 136, v9, &v83, &v82, &v81, 1, a4);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v76, 3);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" tokens active.", 15);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v76);
  }
  v74 = (_QWORD *)((char *)this + 48);
  v13 = (unint64_t)(float)(*((float *)this + 40) * (float)v83);
  if (*((_QWORD *)this + 8) < v13)
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize((uint64_t)v74, v13);
  if (!v81)
  {
    v18 = v10;
    v19 = INFINITY;
    goto LABEL_46;
  }
  v14 = *(_QWORD *)v81;
  v15 = HIDWORD(*(_QWORD *)v81);
  v16 = *(_DWORD *)(v81 + 8);
  if (v16 && *((_DWORD *)this + 8) >= v16)
    v17 = *((_QWORD *)this + 2) + 28 * v16;
  else
    v17 = 0;
  v20 = *((_QWORD *)this + 16);
  v80 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v20 + 136))(v20, v14, &v76);
  v21 = v14 >> 32;
  v19 = INFINITY;
  while (1)
  {
    if (!v76)
    {
      if (v80 >= v78)
        goto LABEL_44;
      goto LABEL_20;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76))
      break;
    if (v76)
    {
      v22 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v76 + 32))();
      goto LABEL_21;
    }
LABEL_20:
    v22 = (float *)(v77 + 16 * v80);
LABEL_21:
    v23 = *(unsigned int *)v22;
    if ((_DWORD)v23)
    {
      v24 = *((_DWORD *)v22 + 1);
      v25 = v22[2];
      if (v24)
      {
        v26 = *((_QWORD *)this + 5);
        if (v26)
        {
          if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, *(unsigned int *)(*((_QWORD *)this + 24) + 32 * v21 + 24)))
          {
            v27 = NAN;
            if (v25 != -INFINITY)
            {
              v27 = NAN;
              if (v86 != -INFINITY)
              {
                if (v86 == INFINITY || v25 == INFINITY)
                  v27 = INFINITY;
                else
                  v27 = v25 + v86;
              }
            }
            kaldi::ScoreCacheFasterDecoder::AddLmState(this, v15, v85, v87);
          }
          else
          {
            v27 = INFINITY;
          }
          v25 = v27;
        }
        else
        {
          kaldi::ScoreCacheFasterDecoder::AddLmState(this, v15, v24, 0);
        }
      }
      v29 = (**(float (***)(kaldi::DecodableInterface *, _QWORD, uint64_t))a2)(a2, a3, v23);
      v30 = v82 + (float)((float)(v25 + *(float *)(v17 + 24)) - v29);
      if (v30 < v19)
        v19 = v30;
    }
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
    else
      ++v80;
  }
  if (v76)
  {
    (*(void (**)(void))(*(_QWORD *)v76 + 8))();
    v18 = v10;
    goto LABEL_46;
  }
LABEL_44:
  v18 = v10;
  if (v79)
    --*v79;
LABEL_46:
  if (!v18)
    return v19;
  while (2)
  {
    v31 = *(_DWORD *)(v18 + 8);
    if (v31 && *((_DWORD *)this + 8) >= v31)
      v32 = *((_QWORD *)this + 2) + 28 * v31;
    else
      v32 = 0;
    if (*(float *)(v32 + 24) >= v11)
      goto LABEL_102;
    v73 = *(_DWORD *)(v18 + 8);
    v71 = v18;
    v33 = *(_QWORD *)v18;
    v34 = HIDWORD(*(_QWORD *)v18);
    v35 = *((_QWORD *)this + 16);
    v80 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v35 + 136))(v35, v33, &v76);
    v72 = v33 >> 32;
    while (2)
    {
      if (!v76)
      {
        if (v80 >= v78)
          goto LABEL_99;
        goto LABEL_58;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76))
      {
        if (v76)
        {
          v36 = (*(uint64_t (**)(void))(*(_QWORD *)v76 + 32))();
          goto LABEL_59;
        }
LABEL_58:
        v36 = v77 + 16 * v80;
LABEL_59:
        if (*(_DWORD *)v36)
        {
          v37 = *(_QWORD *)v36;
          v38 = *(float *)(v36 + 8);
          v39 = *(int *)(v36 + 12);
          v40 = (**(float (***)(kaldi::DecodableInterface *, _QWORD, _QWORD))a2)(a2, a3, *(_QWORD *)v36);
          v41 = HIDWORD(v37);
          if (!HIDWORD(v37))
            goto LABEL_74;
          v42 = *((_QWORD *)this + 5);
          if (v42)
          {
            if ((*(unsigned int (**)(uint64_t, _QWORD, unint64_t, char *))(*(_QWORD *)v42 + 32))(v42, *(unsigned int *)(*((_QWORD *)this + 24) + 32 * v72 + 24), HIDWORD(v37), v84))
            {
              v43 = NAN;
              if (v38 != -INFINITY)
              {
                v43 = NAN;
                if (v86 != -INFINITY)
                {
                  if (v86 == INFINITY || v38 == INFINITY)
                    v43 = INFINITY;
                  else
                    v43 = v86 + v38;
                }
              }
              LODWORD(v41) = v85;
              v45 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v34, v85, v87);
              v38 = v43;
              goto LABEL_75;
            }
            v38 = INFINITY;
LABEL_74:
            v45 = v34;
          }
          else
          {
            v45 = kaldi::ScoreCacheFasterDecoder::AddLmState(this, v34, SHIDWORD(v37), 0);
          }
LABEL_75:
          v46 = (float)(*(float *)(v32 + 24) + v38) - v40;
          if (v46 < v19)
          {
            v47 = -v40;
            v48 = v39 + (v45 << 32);
            v49 = *((_QWORD *)this + 9);
            v50 = v48 % *((_QWORD *)this + 8);
            v51 = *(_QWORD *)(v49 + 16 * v50 + 8);
            if (v51)
            {
              v52 = *(_QWORD *)(v49 + 16 * v50);
              v53 = (uint64_t *)((char *)this + 48);
              if (v52 != -1)
                v53 = (uint64_t *)(*(_QWORD *)(v49 + 16 * v52 + 8) + 16);
              v54 = *(_QWORD *)(v51 + 16);
              for (i = *v53; i != v54; i = *(_QWORD *)(i + 16))
              {
                if (*(_QWORD *)i == v48)
                {
                  if ((float)(v46 + v82) < v19)
                    v19 = v46 + v82;
                  if (v46 < *(float *)(*((_QWORD *)this + 2) + 28 * *(unsigned int *)(i + 8) + 24))
                  {
                    v67 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v73, v37 | ((unint64_t)v41 << 32), LODWORD(v38) | (unint64_t)(v39 << 32), v47);
                    kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, *(_DWORD *)(i + 8));
                    *(_DWORD *)(i + 8) = v67;
                  }
                  goto LABEL_94;
                }
              }
            }
            v56 = v46 + v82;
            if (v56 < v19)
              v19 = v56;
            v57 = kaldi::ScoreCacheFasterDecoder::NewToken((uint64_t)this, v73, v37 | ((unint64_t)v41 << 32), LODWORD(v38) | ((unint64_t)v39 << 32), v47);
            v58 = *((_QWORD *)this + 8);
            v59 = *((_QWORD *)this + 9);
            v60 = kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New(v74);
            *(_QWORD *)v60 = v48;
            *(_DWORD *)(v60 + 8) = v57;
            v61 = v59 + 16 * (v48 % v58);
            v64 = *(_QWORD *)(v61 + 8);
            v62 = (uint64_t *)(v61 + 8);
            v63 = v64;
            if (v64)
            {
              *(_QWORD *)(v60 + 16) = *(_QWORD *)(v63 + 16);
              *(_QWORD *)(v63 + 16) = v60;
              *v62 = v60;
            }
            else
            {
              v65 = *((_QWORD *)this + 7);
              v66 = (uint64_t *)((char *)this + 48);
              if (v65 != -1)
                v66 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * v65 + 8) + 16);
              *v66 = v60;
              *(_QWORD *)(v60 + 16) = 0;
              *v62 = v60;
              *(_QWORD *)(v59 + 16 * (v48 % v58)) = v65;
              *((_QWORD *)this + 7) = v48 % v58;
            }
          }
        }
LABEL_94:
        if (v76)
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
        else
          ++v80;
        continue;
      }
      break;
    }
    if (v76)
    {
      (*(void (**)(void))(*(_QWORD *)v76 + 8))();
      goto LABEL_101;
    }
LABEL_99:
    if (v79)
      --*v79;
LABEL_101:
    v18 = v71;
    v31 = *(_DWORD *)(v71 + 8);
LABEL_102:
    v68 = *(_QWORD *)(v18 + 16);
    v69 = v18;
    kaldi::ScoreCacheFasterDecoder::DeleteTokenChain((uint64_t *)this, v31);
    *(_QWORD *)(v69 + 16) = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v69;
    v18 = v68;
    if (v68)
      continue;
    return v19;
  }
}

void sub_1ADACF330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::ScoreCacheFasterDecoder::ReachedFinal(kaldi::ScoreCacheFasterDecoder *this)
{
  unsigned int *v1;
  float v3;
  float v4;
  _BOOL8 result;

  v1 = (unsigned int *)*((_QWORD *)this + 6);
  if (!v1)
    return 0;
  do
  {
    v3 = *(float *)(*((_QWORD *)this + 2) + 28 * v1[2] + 24);
    v4 = v3 + (*(float (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 32))(*((_QWORD *)this + 16), *v1);
    result = v4 != INFINITY;
    if (v4 != INFINITY)
      break;
    v1 = (unsigned int *)*((_QWORD *)v1 + 2);
  }
  while (v1);
  return result;
}

uint64_t kaldi::ScoreCacheFasterDecoder::GetBestPath(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  BOOL v6;
  unsigned int *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  double v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v37;
  _DWORD v38[2];
  int v39[2];
  uint64_t v40;
  unsigned int v41;
  void *__p;
  _BYTE *v43;
  unint64_t v44;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)a1);
  v7 = *(unsigned int **)(a1 + 48);
  if (!v6)
  {
    if (!v7)
      return 0;
    v8 = 0;
    while (1)
    {
      v13 = v7[2];
      if (v13 && *(_DWORD *)(a1 + 32) >= v13)
      {
        v14 = *(_QWORD *)(a1 + 16) + 28 * v13;
        if (!v8)
          goto LABEL_16;
      }
      else
      {
        v14 = 0;
        if (!v8)
          goto LABEL_16;
      }
      if (*(float *)(v14 + 24) < *(float *)(v8 + 24))
LABEL_16:
        v8 = v14;
      v7 = (unsigned int *)*((_QWORD *)v7 + 2);
      if (!v7)
        goto LABEL_18;
    }
  }
  if (!v7)
    return 0;
  v8 = 0;
  v9 = INFINITY;
  do
  {
    v10 = *(_QWORD *)(a1 + 16) + 28 * v7[2];
    v11 = *(float *)(v10 + 24);
    v12 = v11 + (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *v7);
    if (v12 != INFINITY && v12 < v9)
    {
      v9 = v12;
      v8 = v10;
    }
    v7 = (unsigned int *)*((_QWORD *)v7 + 2);
  }
  while (v7);
LABEL_18:
  if (!v8)
    return 0;
  v15 = 0;
  __p = 0;
  v43 = 0;
  v16 = v8;
  v44 = 0;
  while (1)
  {
    v17 = *(_DWORD *)(v16 + 16);
    v18 = 0.0;
    if (v17 && *(_DWORD *)(a1 + 32) >= v17)
      v18 = *(float *)(*(_QWORD *)(a1 + 16) + 28 * v17 + 24);
    v19 = *(float *)(v16 + 24) - v18;
    v20 = *(float *)(v16 + 8);
    v21 = *(_DWORD *)(v16 + 12);
    *(_QWORD *)v39 = *(_QWORD *)v16;
    *(float *)&v40 = v20;
    *((float *)&v40 + 1) = v19 - v20;
    v41 = v21;
    if (v15 >= v44)
    {
      v15 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, (uint64_t)v39);
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v39;
      *(_QWORD *)(v15 + 8) = v40;
      *(_DWORD *)(v15 + 16) = v41;
      v15 += 20;
    }
    v43 = (_BYTE *)v15;
    v22 = *(_DWORD *)(v16 + 16);
    if (!v22 || *(_DWORD *)(a1 + 32) < v22)
      break;
    v16 = *(_QWORD *)(a1 + 16) + 28 * v22;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
  v43 -= 20;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v24);
  v34 = v6;
  v25 = v43 - (_BYTE *)__p;
  if (v43 - (_BYTE *)__p >= 1)
  {
    v26 = 0;
    v27 = v25 / 0x14 + 1;
    v28 = -(int)(v25 / 0x14);
    v29 = 20 * ((v43 - (_BYTE *)__p) / 0x14uLL);
    do
    {
      *(_QWORD *)v39 = *(_QWORD *)((char *)__p + v29 - 20);
      v40 = *(_QWORD *)((char *)__p + v29 - 12);
      v41 = *(_DWORD *)((char *)__p + v29 - 4);
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 208))(a2, v24, v39);
      v24 = v41;
      if (v39[0])
      {
        if (a3)
        {
          v31 = (int)__p;
          v30 = (int)v43;
          v32 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, v39[0]);
          v33 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v32);
          kaldi::LatticeScoreCache::CacheScore(a3, v28 + (v30 - v31) / 20 - v26, v33, *((float *)&v40 + 1));
        }
      }
      else
      {
        ++v26;
      }
      --v27;
      ++v28;
      v29 -= 20;
    }
    while (v27 > 1);
  }
  if (v34)
  {
    v38[0] = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *(unsigned int *)(v8 + 12));
    v38[1] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v24, v38);
  }
  else
  {
    v37 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v24, &v37);
  }
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1ADACF7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ScoreCacheFasterDecoder::GetRawLattice(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  double v15;
  float v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  int v31;
  uint64_t *i;
  uint64_t v33;
  unsigned int v35;
  char v36;
  int v37;
  uint64_t v38;
  _DWORD v40[2];
  _DWORD v41[2];
  unsigned int v42;
  int v43[2];
  uint64_t v44;
  unsigned int v45;
  void *__p;
  _BYTE *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v7 = kaldi::ScoreCacheFasterDecoder::ReachedFinal((kaldi::ScoreCacheFasterDecoder *)a1);
  if ((v7 & 1) != 0)
  {
    v49 = 0u;
    v50 = 0u;
    v51 = 1065353216;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v8);
    v35 = v7;
    v9 = *(unsigned int **)(a1 + 48);
    if (v9)
    {
      v36 = 0;
      v37 = v8;
      do
      {
        v10 = *(_QWORD *)(a1 + 16) + 28 * v9[2];
        v11 = *(float *)(v10 + 24);
        if ((float)(v11
                   + (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *v9)) != INFINITY)
        {
          v12 = 0;
          __p = 0;
          v47 = 0;
          v13 = v10;
          v48 = 0;
          while (1)
          {
            v14 = *(_DWORD *)(v13 + 16);
            v15 = 0.0;
            if (v14 && *(_DWORD *)(a1 + 32) >= v14)
              v15 = *(float *)(*(_QWORD *)(a1 + 16) + 28 * v14 + 24);
            v16 = *(float *)(v13 + 24) - v15;
            v17 = *(float *)(v13 + 8);
            v18 = *(_DWORD *)(v13 + 12);
            *(_QWORD *)v43 = *(_QWORD *)v13;
            *(float *)&v44 = v17;
            *((float *)&v44 + 1) = v16 - v17;
            v45 = v18;
            if (v12 >= v48)
            {
              v12 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>((uint64_t *)&__p, (uint64_t)v43);
            }
            else
            {
              *(_QWORD *)v12 = *(_QWORD *)v43;
              *(_QWORD *)(v12 + 8) = v44;
              *(_DWORD *)(v12 + 16) = v45;
              v12 += 20;
            }
            v47 = (_BYTE *)v12;
            v19 = *(_DWORD *)(v13 + 16);
            if (!v19 || *(_DWORD *)(a1 + 32) < v19)
              break;
            v13 = *(_QWORD *)(a1 + 16) + 28 * v19;
          }
          v38 = v10;
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
          v47 -= 20;
          v42 = v8;
          v20 = v47 - (_BYTE *)__p;
          if (v47 - (_BYTE *)__p >= 1)
          {
            v21 = 0;
            v22 = v20 / 0x14 + 1;
            v23 = -(int)(v20 / 0x14);
            v24 = 20 * ((v47 - (_BYTE *)__p) / 0x14uLL);
            do
            {
              *(_QWORD *)v43 = *(_QWORD *)((char *)__p + v24 - 20);
              v44 = *(_QWORD *)((char *)__p + v24 - 12);
              v45 = *(_DWORD *)((char *)__p + v24 - 4);
              v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
              (*(void (**)(uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 208))(a2, v42, v43);
              v42 = v45;
              if (v43[0])
              {
                if (a3)
                {
                  v25 = (int)__p;
                  v26 = (int)v47;
                  v27 = kaldi::TransitionModel::TransitionIdToTransitionState(a4, v43[0]);
                  v28 = kaldi::TransitionModel::TransitionStateToForwardPdf(a4, v27);
                  kaldi::LatticeScoreCache::CacheScore(a3, v23 + (v26 - v25) / 20 - v21, v28, *((float *)&v44 + 1));
                }
              }
              else
              {
                ++v21;
              }
              --v22;
              ++v23;
              v24 -= 20;
            }
            while (v22 > 1);
          }
          v43[0] = 0;
          v43[0] = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *(unsigned int *)(v38 + 12));
          if (*(float *)v43 == INFINITY)
          {
            LODWORD(v8) = v37;
          }
          else
          {
            std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,int &,float &>((uint64_t)&v49, (int *)&v42, &v42, v43);
            LODWORD(v8) = v37;
            v29 = *(_QWORD *)(a1 + 40);
            if (v29)
            {
              v30 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 16))(v29, *(unsigned int *)(*(_QWORD *)(a1 + 192) + 32 * (int)v9[1] + 24));
              v36 |= v30 != INFINITY;
              *(float *)&v31 = v30 + *(float *)v43;
              v43[0] = v31;
            }
            else
            {
              v31 = v43[0];
            }
            v41[0] = v31;
            v41[1] = 0;
            (*(void (**)(uint64_t, _QWORD, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v42, v41);
          }
          if (__p)
          {
            v47 = __p;
            operator delete(__p);
          }
        }
        v9 = (unsigned int *)*((_QWORD *)v9 + 2);
      }
      while (v9);
    }
    else
    {
      v36 = 0;
    }
    v7 = v35;
    if (*(_QWORD *)(a1 + 40))
    {
      if ((v36 & 1) == 0)
      {
        for (i = (uint64_t *)v50; i; i = (uint64_t *)*i)
        {
          v33 = *((unsigned int *)i + 4);
          v40[0] = *((_DWORD *)i + 5);
          v40[1] = 0;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v33, v40);
        }
      }
    }
    fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v49);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Try to get lattice before decoding finishes.", 44);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
  }
  return v7;
}

void sub_1ADACFC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a23);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ScoreCacheFasterDecoder::GetLattice(uint64_t a1, uint64_t a2, kaldi::LatticeScoreCache *a3, kaldi::TransitionModel *a4)
{
  uint64_t RawLattice;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[34];
  uint64_t (**v23)(_QWORD);
  uint64_t v24;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v23);
  RawLattice = kaldi::ScoreCacheFasterDecoder::GetRawLattice(a1, (uint64_t)&v23, a3, a4);
  if ((RawLattice & 1) != 0)
  {
    if (v23[14](&v23))
    {
      v9 = v23[14](&v23);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
    else
    {
      v10 = 0;
    }
    if (v23[15](&v23))
    {
      v11 = v23[15](&v23);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
    else
    {
      v12 = 0;
    }
    fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v23);
    ((void (*)(uint64_t (***)(_QWORD), uint64_t))v23[35])(&v23, v12);
    ((void (*)(uint64_t (***)(_QWORD), uint64_t))v23[36])(&v23, v10);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v23);
    v14 = kaldi::g_kaldi_verbose_level < -1 || v13;
    if ((v14 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Topological sorting of state-level lattice failed (probably your lexicon has empty words or your LM has epsilon cycles; this  is a bad idea.)",
        141);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    }
    fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v23);
    v18 = 981467136;
    v19 = -1;
    v20 = -1;
    v21 = 1056964608;
    fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>((void **)&v23, a2, (__int128 *)&v18, 999.0);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates((uint64_t)&v23);
    fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
    if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x4000000000, 1))
      fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
  }
  v23 = (uint64_t (**)(_QWORD))&unk_1E5D25580;
  v15 = v24;
  if (v24)
  {
    v16 = *(_DWORD *)(v24 + 56) - 1;
    *(_DWORD *)(v24 + 56) = v16;
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return RawLattice;
}

void sub_1ADACFEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  _DWORD *v7;
  int v8;
  va_list va;

  va_start(va, a5);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  *(_QWORD *)(v5 - 64) = &unk_1E5D25580;
  v7 = *(_DWORD **)(v5 - 56);
  if (v7)
  {
    v8 = v7[14] - 1;
    v7[14] = v8;
    if (!v8)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

BOOL fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD v5[3];
  unsigned __int8 v6;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  v6 = 0;
  v5[0] = &__p;
  v5[1] = &v6;
  fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(a1, (uint64_t)v5, 0);
  if (v6)
  {
    fst::StateSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a1, &__p);
    v2 = 0x6800000000;
  }
  else
  {
    v2 = 0x8400000000;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v2, v2);
  v3 = v6;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3 != 0;
}

void sub_1ADACFFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float kaldi::GetCutoffHelper<kaldi::ScoreCacheFasterDecoder,kaldi::ScoreCacheFasterDecoderOptions,kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::Elem>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, float *a5, _QWORD *a6, int a7, float a8)
{
  uint64_t v9;
  int v11;
  int v12;
  void **v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  float v29;
  BOOL v30;
  uint64_t v31;
  float v32;
  float v33;
  BOOL v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  unint64_t v39;
  float *v40;
  int v41;
  float v42;
  float v43;
  float *v44;
  int v47;
  unint64_t v48;

  v9 = a3;
  v11 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12))
    v11 = *(_DWORD *)(a2 + 12);
  if (a7)
    v12 = v11;
  else
    v12 = 0;
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v12 == 0)
  {
    v31 = 0;
    v32 = INFINITY;
    if (a3)
    {
      do
      {
        v33 = *(float *)(a1[2] + 28 * *(unsigned int *)(v9 + 8) + 24);
        if (v33 >= v32)
        {
          v34 = 1;
        }
        else
        {
          v32 = *(float *)(a1[2] + 28 * *(unsigned int *)(v9 + 8) + 24);
          v34 = a6 == 0;
        }
        if (!v34)
        {
          *a6 = v9;
          v32 = v33;
        }
        v9 = *(_QWORD *)(v9 + 16);
        ++v31;
      }
      while (v9);
    }
    if (a4)
      *a4 = v31;
    if (a5)
      *a5 = *(float *)a2;
    return v32 + *(float *)a2;
  }
  else
  {
    v47 = v12;
    v48 = *(int *)(a2 + 4);
    v14 = (void **)(a1 + 27);
    a1[28] = a1[27];
    v15 = 0;
    if (a3)
    {
      v16 = -INFINITY;
      v17 = INFINITY;
      do
      {
        v18 = *(float *)(a1[2] + 28 * *(unsigned int *)(v9 + 8) + 24);
        v20 = (float *)a1[28];
        v19 = a1[29];
        if ((unint64_t)v20 >= v19)
        {
          v22 = (float *)*v14;
          v23 = ((char *)v20 - (_BYTE *)*v14) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = v19 - (_QWORD)v22;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 29), v26);
            v22 = (float *)a1[27];
            v20 = (float *)a1[28];
          }
          else
          {
            v27 = 0;
          }
          v28 = (float *)&v27[4 * v23];
          *v28 = v18;
          v21 = v28 + 1;
          while (v20 != v22)
          {
            v29 = *--v20;
            a8 = v29;
            *--v28 = v29;
          }
          a1[27] = v28;
          a1[28] = v21;
          a1[29] = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v20 = v18;
          v21 = v20 + 1;
        }
        a1[28] = v21;
        if (v18 >= v17)
        {
          v30 = 1;
        }
        else
        {
          v17 = v18;
          v30 = a6 == 0;
        }
        if (!v30)
        {
          *a6 = v9;
          v17 = v18;
        }
        if (v18 > v16)
          v16 = v18;
        v9 = *(_QWORD *)(v9 + 16);
        ++v15;
      }
      while (v9);
    }
    else
    {
      v17 = INFINITY;
      v16 = -INFINITY;
    }
    if (a4)
      *a4 = v15;
    v36 = *(float *)a2;
    v35 = INFINITY;
    if (!*(_DWORD *)(a2 + 12))
      v16 = INFINITY;
    v37 = (float *)a1[27];
    v38 = (float *)a1[28];
    v39 = v38 - v37;
    if (v39 <= v48)
    {
      v41 = v47;
    }
    else
    {
      v40 = &v37[v48];
      v41 = v47;
      if (v40 != v38)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v37, v40, v38, a8);
        v37 = (float *)a1[27];
        v38 = (float *)a1[28];
        v39 = v38 - v37;
      }
      v35 = v37[v48];
    }
    v42 = v17 + v36;
    if (v39 > v41)
      v43 = v17;
    else
      v43 = v16;
    if (v41 && v39 > v41)
    {
      v44 = &v37[v41];
      if (v39 > v48)
        v38 = &v37[v48];
      if (v44 != v38)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v37, v44, v38, v43);
        v37 = (float *)*v14;
      }
      v43 = v37[v41];
    }
    if (v35 >= v42)
    {
      if (v43 <= v42)
      {
        *a5 = *(float *)a2;
        return v42;
      }
      else
      {
        if (a5)
          *a5 = (float)(v43 - v17) + *(float *)(a2 + 20);
        return v43;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v35 - v17) + *(float *)(a2 + 20);
    }
  }
  return v35;
}

uint64_t *kaldi::ScoreCacheFasterDecoder::DeleteTokenChain(uint64_t *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;

  if (a2 && *((_DWORD *)this + 8) >= a2)
    v2 = this[2] + 28 * a2;
  else
    v2 = 0;
  v3 = *(_DWORD *)(v2 + 20) - 1;
  *(_DWORD *)(v2 + 20) = v3;
  if (!v3)
  {
    v4 = *this;
    v5 = *((_DWORD *)this + 2);
    do
    {
      v6 = *(_DWORD *)(v2 + 16);
      *(_DWORD *)(v4 + 4 * v5) = a2;
      v5 = *((_DWORD *)this + 2) + 1;
      *((_DWORD *)this + 2) = v5;
      if (!v6)
        break;
      v2 = this[2] + 28 * v6;
      v7 = *(_DWORD *)(v2 + 20);
      a2 = v6;
      *(_DWORD *)(v2 + 20) = v7 - 1;
    }
    while (v7 == 1);
  }
  return this;
}

uint64_t kaldi::ScoreCacheFasterDecoder::AddLmState(kaldi::ScoreCacheFasterDecoder *this, int a2, signed int a3, int a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  unint64_t v23;
  _QWORD *v24[2];
  int v25;

  v6 = a2;
  v8 = *((_QWORD *)this + 24);
  v9 = *((_QWORD *)this + 25);
  v7 = (uint64_t *)((char *)this + 192);
  v10 = v8 + 32 * a2;
  v13 = *(_QWORD *)(v10 + 8);
  v11 = v10 + 8;
  v12 = v13;
  if (v13)
  {
    v14 = v11;
    do
    {
      v15 = *(_DWORD *)(v12 + 28);
      v16 = v15 < a3;
      if (v15 >= a3)
        v17 = (uint64_t *)v12;
      else
        v17 = (uint64_t *)(v12 + 8);
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 != v11 && *(_DWORD *)(v14 + 28) <= a3)
      return *(unsigned int *)(v14 + 32);
  }
  v24[0] = 0;
  v24[1] = 0;
  v23 = (unint64_t)v24;
  v25 = a4;
  if (v9 >= *((_QWORD *)this + 26))
  {
    v18 = std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__emplace_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>(v7, (uint64_t)&v23);
  }
  else
  {
    std::map<int,int>::map[abi:ne180100]((uint64_t *)v9, (uint64_t)&v23);
    *(_DWORD *)(v9 + 24) = v25;
    v18 = v9 + 32;
    *((_QWORD *)this + 25) = v9 + 32;
  }
  *((_QWORD *)this + 25) = v18;
  std::__tree<int>::destroy((uint64_t)&v23, v24[0]);
  v19 = *((_QWORD *)this + 24);
  v20 = (uint64_t **)(v19 + 32 * v6);
  v21 = (_QWORD *)(((*((_QWORD *)this + 25) - v19) >> 5) - 1);
  v23 = a3;
  v24[0] = v21;
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned long>>(v20, (int *)&v23, (uint64_t)&v23);
  return ((*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 5) - 1;
}

void sub_1ADAD04B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__emplace_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[32 * v4];
  v15 = v14;
  v16 = &v10[32 * v9];
  *((_DWORD *)std::map<int,int>::map[abi:ne180100](v14, a2) + 6) = *(_DWORD *)(a2 + 24);
  v15 += 4;
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADAD05B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<quasar::PronType,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<quasar::PronType,int>,std::__tree_node<std::__value_type<quasar::PronType,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADAD0604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      std::map<int,int>::map[abi:ne180100]((uint64_t *)(v7 - 32), v9 - 32);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
      v9 -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADAD0740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::ScoreCacheFasterDecoder::LmTrie>,std::reverse_iterator<kaldi::ScoreCacheFasterDecoder::LmTrie*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 32;
  }
}

void **std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer(void **a1)
{
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::__tree<int>::destroy(i - 32, *(_QWORD **)(i - 24));
  }
}

uint64_t **std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned long>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v11 = *(_QWORD *)(a3 + 8);
    *((_DWORD *)v10 + 7) = *(_DWORD *)a3;
    *((_DWORD *)v10 + 8) = v11;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v13[34];

  v2 = a1[6];
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = (_QWORD *)a1[7];
  v5 = (_BYTE *)a1[8];
  if (v5 == (_BYTE *)v4)
  {
    v7 = 0;
    v4 = (_QWORD *)a1[8];
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1AF44D160](v4[v6], 0x1020C806E52F545);
        v4 = (_QWORD *)a1[7];
        v5 = (_BYTE *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (_BYTE *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v4 = (_QWORD *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 32;
      do
      {
        std::__tree<int>::destroy(v6, *(_QWORD **)(v6 + 8));
        v7 = v6 == (_QWORD)v2;
        v6 -= 32;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__push_back_slow_path<kaldi::ScoreCacheFasterDecoder::LmTrie>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[32 * v4];
  v15 = v14;
  v16 = &v10[32 * v9];
  *((_DWORD *)std::map<int,int>::map[abi:ne180100](v14, a2) + 6) = *(_DWORD *)(a2 + 24);
  v15 += 4;
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADAD0BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::ScoreCacheFasterDecoder::LmTrie>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::New(_QWORD *a1)
{
  uint64_t result;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  result = a1[6];
  if (!result)
  {
    v3 = (char **)(a1 + 7);
    do
    {
      v4 = operator new[]();
      v5 = v4;
      v6 = -24552;
      do
      {
        *(_QWORD *)(v4 + v6 + 24568) = v4 + v6 + 24576;
        v6 += 24;
      }
      while (v6);
      *(_QWORD *)(v4 + 24568) = 0;
      a1[6] = v4;
      v8 = (uint64_t *)a1[8];
      v7 = a1[9];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - *v3) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v3;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 9), v13);
        else
          v14 = 0;
        v15 = (uint64_t *)&v14[8 * v10];
        *v15 = v5;
        v9 = v15 + 1;
        v17 = (char *)a1[7];
        v16 = (char *)a1[8];
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = *v3;
        }
        a1[7] = v15;
        a1[8] = v9;
        a1[9] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v4;
        v9 = v8 + 1;
      }
      a1[8] = v9;
      result = a1[6];
    }
    while (!result);
  }
  a1[6] = *(_QWORD *)(result + 16);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,int &,float &>(uint64_t a1, int *a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *((_DWORD *)v12 + 5) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1ADAD0F0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::StateSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  int32x2_t v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _DWORD *v32;
  unint64_t v33;
  int v34;
  void *v35;
  void *__p;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD *v51;

  v4 = a2[1] - *a2;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) == v4 >> 2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
      return;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0xF3FFFFF0007, 0);
    v6 = (uint64_t)(a2[1] - *a2) >> 2;
    LOBYTE(v29) = 0;
    std::vector<BOOL>::vector(&v51, v6, (unsigned __int8 *)&v29);
    memset(v50, 0, sizeof(v50));
    memset(v49, 0, sizeof(v49));
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, *(unsigned int *)(*a2 + 4 * v7));
    v27 = v5;
    v48 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v46);
    v8 = v50;
    v9 = v49;
    v10 = vdup_n_s32(0x7F800000u);
LABEL_4:
    if (!v46)
    {
      if ((int)v48 >= v47)
        goto LABEL_70;
      goto LABEL_9;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46))
    {
      if (v46)
      {
        v11 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 24))();
LABEL_10:
        if (((*(_QWORD *)((char *)v51 + (((unint64_t)(int)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
        {
          v12 = v9;
          goto LABEL_62;
        }
        (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&v43, a1, v11);
        v39 = (void *)v10;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v8);
        v33 = 0;
        (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v11, &v29);
        while (1)
        {
          if (v29)
          {
            if ((*(unsigned int (**)(void *))(*(_QWORD *)v29 + 24))(v29))
            {
              if (v29)
              {
                (*(void (**)(void))(*(_QWORD *)v29 + 8))();
                goto LABEL_29;
              }
LABEL_27:
              if (v32)
                --*v32;
LABEL_29:
              while (2)
              {
                v12 = v9;
                v16 = (unint64_t)(int)v11 >> 6;
                v17 = 1 << v11;
                if (((1 << v11) & v51[v16]) == 0)
                {
                  v11 = *(int *)(*a2 + 4 * (int)v11);
                  if (((*(_QWORD *)((char *)v51 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
                    goto LABEL_31;
                  (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&v29, a1, v11);
                  v39 = v29;
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v40, (char *)v30, (uint64_t)v31, ((_BYTE *)v31 - (_BYTE *)v30) >> 2);
                  if (v30)
                  {
                    v31 = v30;
                    operator delete(v30);
                  }
                  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v9);
                  v33 = 0;
                  (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v11, &v29);
LABEL_42:
                  if (v29)
                  {
                    if ((*(unsigned int (**)(void *))(*(_QWORD *)v29 + 24))(v29))
                    {
                      if (v29)
                      {
                        (*(void (**)(void))(*(_QWORD *)v29 + 8))();
                        goto LABEL_31;
                      }
LABEL_56:
                      if (v32)
                        --*v32;
LABEL_31:
                      v35 = v43;
                      v37 = 0;
                      v38 = 0;
                      __p = 0;
                      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 2);
                      (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)a1 + 184))(a1, v11, &v35);
                      if (__p)
                      {
                        v37 = __p;
                        operator delete(__p);
                      }
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 240))(a1, v11);
                      v28 = v17;
                      v18 = *v8;
                      if (v8[1] != *v8)
                      {
                        v19 = 0;
                        v20 = 0;
                        do
                        {
                          v21 = v18 + v19;
                          v29 = *(void **)(v18 + v19);
                          v30 = *(void **)(v18 + v19 + 8);
                          v32 = 0;
                          v33 = 0;
                          v31 = 0;
                          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31, *(const void **)(v18 + v19 + 16), *(_QWORD *)(v18 + v19 + 24), (uint64_t)(*(_QWORD *)(v18 + v19 + 24) - *(_QWORD *)(v18 + v19 + 16)) >> 2);
                          v34 = *(_DWORD *)(v21 + 40);
                          v34 = *(_DWORD *)(*a2 + 4 * v34);
                          (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v11, &v29);
                          if (v31)
                          {
                            v32 = v31;
                            operator delete(v31);
                          }
                          ++v20;
                          v18 = *v8;
                          v19 += 48;
                        }
                        while (v20 < 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 4));
                      }
                      v51[v16] |= v28;
                      v43 = v39;
                      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v44, (char *)v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 2);
                      v9 = v8;
                      v8 = v12;
                      continue;
                    }
                    if (v29)
                    {
                      v22 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v29 + 32))();
LABEL_48:
                      v23 = v12[1];
                      if (v23 >= v12[2])
                      {
                        v24 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v12, (uint64_t)v22);
                      }
                      else
                      {
                        std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v12, (uint64_t)v22);
                        v24 = v23 + 48;
                      }
                      v12[1] = v24;
                      if (v29)
                        (*(void (**)(void *))(*(_QWORD *)v29 + 40))(v29);
                      else
                        ++v33;
                      goto LABEL_42;
                    }
                  }
                  else if (v33 >= (unint64_t)v31)
                  {
                    goto LABEL_56;
                  }
                  v22 = (char *)v30 + 48 * v33;
                  goto LABEL_48;
                }
                break;
              }
              if (v40)
              {
                v41 = v40;
                operator delete(v40);
              }
              if (v44)
              {
                v45 = v44;
                operator delete(v44);
              }
LABEL_62:
              if (v46)
                (*(void (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
              else
                ++v48;
              v9 = v12;
              goto LABEL_4;
            }
            if (v29)
            {
              v13 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v29 + 32))();
              goto LABEL_19;
            }
          }
          else if (v33 >= (unint64_t)v31)
          {
            goto LABEL_27;
          }
          v13 = (char *)v30 + 48 * v33;
LABEL_19:
          v14 = v8[1];
          if (v14 >= v8[2])
          {
            v15 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(v8, (uint64_t)v13);
          }
          else
          {
            std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)v8, (uint64_t)v13);
            v15 = v14 + 48;
          }
          v8[1] = v15;
          if (v29)
            (*(void (**)(void *))(*(_QWORD *)v29 + 40))(v29);
          else
            ++v33;
        }
      }
LABEL_9:
      v11 = v48;
      goto LABEL_10;
    }
    if (v46)
      (*(void (**)(void))(*(_QWORD *)v46 + 8))();
LABEL_70:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v27, 0x3FFFFFFF0007);
    v29 = v49;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    v29 = v50;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (v51)
      operator delete(v51);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v29, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v29, "ERROR");
    v25 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)&v29);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"StateSort: bad order vector size: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
    if (SHIBYTE(v31) < 0)
      operator delete(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
  }
}

void sub_1ADAD1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, void *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a31);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::Collation<long long,long long>::SortInPlace<std::vector<long long>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (uint64_t *)a2[1];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(a1, v4, v5, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_1ADAD1804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::Deserialize<long long,true>@<X0>(uint64_t *a1@<X0>, quasar::tennessee::memory_mapping::VirtualMemoryFile **a2@<X1>, _QWORD *a3@<X8>)
{
  quasar::tennessee::memory_mapping::VirtualMemoryFile *v5;
  unsigned int *v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  quasar::tennessee::memory_mapping::VirtualMemoryFile *v10;
  __int16 v11;
  uint64_t v12;
  char *v13;

  v5 = *a2;
  *a2 = 0;
  v10 = v5;
  v11 = 0;
  v12 = 0;
  v6 = (unsigned int *)quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(v5);
  v13 = (char *)v6 + *v6;
  v9 = &unk_1E5D3C9E8;
  std::make_unique[abi:ne180100]<quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>(a1, (uint64_t)&v9, &v8);
  *a3 = v8;
  result = (uint64_t)v10;
  v9 = &unk_1E5D3C838;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADAD18E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = *a2;
    v8 = *a3;
    for (i = (_QWORD *)*((_QWORD *)v6 + 1); v8 != v7; ++v7)
      *i++ = v7;
    *((_QWORD *)v6 + 1) = i;
  }
  return result;
}

void sub_1ADAD1A54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<std::vector<long long>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v7 = 126 - 2 * __clz(((uint64_t)a3 - a2) >> 3);
  if (a3 == (uint64_t *)a2)
    v8 = 0;
  else
    v8 = v7;
  v10[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10[1] = a4;
  return std::__introsort<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,false>(a2, a3, v10, v8, 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,false>(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
  while (2)
  {
    v10 = 1 - a4;
LABEL_4:
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v25 = *(a2 - 1);
        v31 = *v9;
        v32 = v25;
        v26 = *(_QWORD *)(a3[1] + 24);
        if (!v26)
          goto LABEL_36;
        v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v32);
        v28 = *(_QWORD *)(a3[1] + 24);
        if (!v28)
          goto LABEL_36;
        v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v31);
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v27, v29);
        if ((result & 0x80000000) != 0)
        {
          v30 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v30;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 1);
          v31 = *v9;
          v32 = v17;
          v18 = *(_QWORD *)(a3[1] + 24);
          if (!v18
            || (v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v32),
                (v20 = *(_QWORD *)(a3[1] + 24)) == 0))
          {
LABEL_36:
            std::__throw_bad_function_call[abi:ne180100]();
          }
          v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v31);
          if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v19, v21) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(v9, a2, a3);
            v9 = (uint64_t *)result;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            continue;
          }
LABEL_14:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(v9, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_17;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v9, v22, a3);
          v9 = v22 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(v22 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (!v24)
            {
LABEL_17:
              result = std::__introsort<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,false>(v8, v22, a3, -v11, a5 & 1);
              v9 = v22 + 1;
              goto LABEL_19;
            }
            goto LABEL_4;
          }
          a4 = -v11;
          a2 = v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,long long *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        v22 = v10;
        v23 = v9;
        v11 = *(_QWORD *)(a3[1] + 24);
        if (!v11
          || (v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v23),
              (v13 = *(_QWORD *)(a3[1] + 24)) == 0))
        {
LABEL_17:
          std::__throw_bad_function_call[abi:ne180100]();
        }
        v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v22);
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v12, v14);
        if ((result & 0x80000000) != 0)
        {
          v15 = *v8;
          v16 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v16 + 8) = *(_QWORD *)((char *)v4 + v16);
            if (!v16)
              break;
            v22 = *(_QWORD *)((char *)v4 + v16 - 8);
            v23 = v15;
            v17 = *(_QWORD *)(a3[1] + 24);
            if (!v17)
              goto LABEL_17;
            v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v23);
            v19 = *(_QWORD *)(a3[1] + 24);
            if (!v19)
              goto LABEL_17;
            v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v22);
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v18, v20);
            v16 -= 8;
            if ((result & 0x80000000) == 0)
            {
              v21 = (_QWORD *)((char *)v4 + v16 + 8);
              goto LABEL_14;
            }
          }
          v21 = v4;
LABEL_14:
          *v21 = v15;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      v20 = v8;
      v21 = v7;
      v9 = *(_QWORD *)(a3[1] + 24);
      if (!v9
        || (v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v21),
            (v11 = *(_QWORD *)(a3[1] + 24)) == 0))
      {
LABEL_13:
        std::__throw_bad_function_call[abi:ne180100]();
      }
      v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v20);
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12);
      if ((result & 0x80000000) != 0)
      {
        v13 = *v4;
        v14 = v4;
        do
        {
          v15 = *(v14 - 2);
          *v14 = *(v14 - 1);
          v20 = v15;
          v21 = v13;
          v16 = *(_QWORD *)(a3[1] + 24);
          if (!v16)
            goto LABEL_13;
          v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v21);
          v18 = *(_QWORD *)(a3[1] + 24);
          if (!v18)
            goto LABEL_13;
          v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v20);
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v17, v19);
          --v14;
        }
        while ((result & 0x80000000) != 0);
        *v14 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *a2;
  v39 = *a1;
  v40 = v5;
  v6 = *(_QWORD *)(a4[1] + 24);
  if (!v6)
    goto LABEL_23;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v40);
  v11 = *(_QWORD *)(a4[1] + 24);
  if (!v11)
    goto LABEL_23;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v39);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v10, v12);
  v14 = *a3;
  if ((v13 & 0x80000000) == 0)
  {
    v39 = *a2;
    v40 = v14;
    v15 = *(_QWORD *)(a4[1] + 24);
    if (v15)
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v40);
      v17 = *(_QWORD *)(a4[1] + 24);
      if (v17)
      {
        v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v39);
        if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v16, v18) & 0x80000000) == 0)
          return 0;
        v32 = *a2;
        *a2 = *a3;
        *a3 = v32;
        v33 = *a2;
        v39 = *a1;
        v40 = v33;
        v34 = *(_QWORD *)(a4[1] + 24);
        if (v34)
        {
          v35 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v40);
          v36 = *(_QWORD *)(a4[1] + 24);
          if (v36)
          {
            v37 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 48))(v36, &v39);
            if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v35, v37) & 0x80000000) != 0)
            {
              v38 = *a1;
              *a1 = *a2;
              *a2 = v38;
              return 2;
            }
            return 1;
          }
        }
      }
    }
LABEL_23:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v39 = *a2;
  v40 = v14;
  v20 = *(_QWORD *)(a4[1] + 24);
  if (!v20)
    goto LABEL_23;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v40);
  v22 = *(_QWORD *)(a4[1] + 24);
  if (!v22)
    goto LABEL_23;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v39);
  v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v21, v23);
  v25 = *a1;
  if (v24 < 0)
  {
    *a1 = *a3;
    *a3 = v25;
    return 1;
  }
  *a1 = *a2;
  *a2 = v25;
  v26 = *a3;
  v39 = v25;
  v40 = v26;
  v27 = *(_QWORD *)(a4[1] + 24);
  if (!v27)
    goto LABEL_23;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 48))(v27, &v40);
  v29 = *(_QWORD *)(a4[1] + 24);
  if (!v29)
    goto LABEL_23;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 48))(v29, &v39);
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v28, v30) & 0x80000000) != 0)
  {
    v31 = *a2;
    *a2 = *a3;
    *a3 = v31;
    return 2;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v4 = *a1;
  v40 = *(a2 - 1);
  v41 = v4;
  v5 = *(_QWORD *)(a3[1] + 24);
  if (!v5)
    goto LABEL_30;
  v7 = a2;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v41);
  v9 = *(_QWORD *)(a3[1] + 24);
  if (!v9)
    goto LABEL_30;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v40);
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v8, v10) & 0x80000000) != 0)
  {
    v12 = a1;
    while (1)
    {
      v18 = v12[1];
      ++v12;
      v40 = v18;
      v41 = v4;
      v19 = *(_QWORD *)(a3[1] + 24);
      if (!v19)
        break;
      v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v41);
      v21 = *(_QWORD *)(a3[1] + 24);
      if (!v21)
        break;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v40);
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v20, v22) & 0x80000000) != 0)
        goto LABEL_14;
    }
LABEL_30:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v11 = a1 + 1;
  do
  {
    v12 = v11;
    if (v11 >= v7)
      break;
    v40 = *v11;
    v41 = v4;
    v13 = *(_QWORD *)(a3[1] + 24);
    if (!v13)
      goto LABEL_30;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v41);
    v15 = *(_QWORD *)(a3[1] + 24);
    if (!v15)
      goto LABEL_30;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v40);
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v14, v16);
    v11 = v12 + 1;
  }
  while ((v17 & 0x80000000) == 0);
LABEL_14:
  if (v12 < v7)
  {
    do
    {
      v23 = *--v7;
      v40 = v23;
      v41 = v4;
      v24 = *(_QWORD *)(a3[1] + 24);
      if (!v24)
        goto LABEL_30;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v41);
      v26 = *(_QWORD *)(a3[1] + 24);
      if (!v26)
        goto LABEL_30;
      v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v40);
    }
    while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v25, v27) & 0x80000000) != 0);
  }
LABEL_26:
  if (v12 < v7)
  {
    v28 = *v12;
    *v12 = *v7;
    *v7 = v28;
    do
    {
      v29 = v12[1];
      ++v12;
      v40 = v29;
      v41 = v4;
      v30 = *(_QWORD *)(a3[1] + 24);
      if (!v30)
        goto LABEL_30;
      v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v41);
      v32 = *(_QWORD *)(a3[1] + 24);
      if (!v32)
        goto LABEL_30;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 48))(v32, &v40);
    }
    while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v31, v33) & 0x80000000) == 0);
    while (1)
    {
      v34 = *--v7;
      v40 = v34;
      v41 = v4;
      v35 = *(_QWORD *)(a3[1] + 24);
      if (!v35)
        goto LABEL_30;
      v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v41);
      v37 = *(_QWORD *)(a3[1] + 24);
      if (!v37)
        goto LABEL_30;
      v38 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 48))(v37, &v40);
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v36, v38) & 0x80000000) == 0)
        goto LABEL_26;
    }
  }
  if (v12 - 1 != a1)
    *a1 = *(v12 - 1);
  *(v12 - 1) = v4;
  return v12;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long long *,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *result;
  uint64_t v38;
  uint64_t v39;

  v6 = 0;
  v7 = *a1;
  do
  {
    v8 = a1[v6 + 1];
    v38 = v7;
    v39 = v8;
    v9 = *(_QWORD *)(a3[1] + 24);
    if (!v9)
      goto LABEL_29;
    v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v39);
    v11 = *(_QWORD *)(a3[1] + 24);
    if (!v11)
      goto LABEL_29;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v38);
    ++v6;
  }
  while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12) & 0x80000000) != 0);
  v13 = &a1[v6];
  if (v6 != 1)
  {
    while (1)
    {
      v14 = *--a2;
      v38 = v7;
      v39 = v14;
      v15 = *(_QWORD *)(a3[1] + 24);
      if (!v15)
        break;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v39);
      v17 = *(_QWORD *)(a3[1] + 24);
      if (!v17)
        break;
      v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v38);
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v16, v18) & 0x80000000) != 0)
        goto LABEL_14;
    }
LABEL_29:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  while (v13 < a2)
  {
    v19 = *--a2;
    v38 = v7;
    v39 = v19;
    v20 = *(_QWORD *)(a3[1] + 24);
    if (!v20)
      goto LABEL_29;
    v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v39);
    v22 = *(_QWORD *)(a3[1] + 24);
    if (!v22)
      goto LABEL_29;
    v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v38);
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v21, v23) & 0x80000000) != 0)
      break;
  }
LABEL_14:
  if (v13 >= a2)
  {
    result = v13 - 1;
  }
  else
  {
    v24 = &a1[v6];
    v25 = a2;
    do
    {
      v26 = *v24;
      *v24 = *v25;
      *v25 = v26;
      do
      {
        v27 = v24[1];
        ++v24;
        v38 = v7;
        v39 = v27;
        v28 = *(_QWORD *)(a3[1] + 24);
        if (!v28)
          goto LABEL_29;
        v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v39);
        v30 = *(_QWORD *)(a3[1] + 24);
        if (!v30)
          goto LABEL_29;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v38);
      }
      while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v29, v31) & 0x80000000) != 0);
      do
      {
        v32 = *--v25;
        v38 = v7;
        v39 = v32;
        v33 = *(_QWORD *)(a3[1] + 24);
        if (!v33)
          goto LABEL_29;
        v34 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v39);
        v35 = *(_QWORD *)(a3[1] + 24);
        if (!v35)
          goto LABEL_29;
        v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v38);
      }
      while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v34, v36) & 0x80000000) == 0);
    }
    while (v24 < v25);
    result = v24 - 1;
  }
  if (result != a1)
    *a1 = *result;
  *result = v7;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v30 = *a1;
      v31 = v8;
      v9 = *(_QWORD *)(a3[1] + 24);
      if (!v9)
        goto LABEL_27;
      v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v31);
      v11 = *(_QWORD *)(a3[1] + 24);
      if (!v11)
        goto LABEL_27;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v30);
      if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v10, v12) & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v14 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a1 + 1, a1 + 2, a3);
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *v15;
    v30 = *v14;
    v31 = v18;
    v19 = *(_QWORD *)(a3[1] + 24);
    if (!v19
      || (v20 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v31),
          (v21 = *(_QWORD *)(a3[1] + 24)) == 0))
    {
LABEL_27:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v22 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v30);
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v20, v22) & 0x80000000) != 0)
    {
      v23 = *v15;
      v24 = v16;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v24 + 24) = *(uint64_t *)((char *)a1 + v24 + 16);
        if (v24 == -16)
          break;
        v30 = *(uint64_t *)((char *)a1 + v24 + 8);
        v31 = v23;
        v25 = *(_QWORD *)(a3[1] + 24);
        if (!v25)
          goto LABEL_27;
        v26 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v31);
        v27 = *(_QWORD *)(a3[1] + 24);
        if (!v27)
          goto LABEL_27;
        v28 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 48))(v27, &v30);
        v24 -= 8;
        if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v26, v28) & 0x80000000) == 0)
        {
          v29 = (uint64_t *)((char *)a1 + v24 + 24);
          goto LABEL_18;
        }
      }
      v29 = a1;
LABEL_18:
      *v29 = v23;
      if (++v17 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v16 += 8;
    if (++v15 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a2, a3, a5);
  v10 = *a4;
  v29 = *a3;
  v30 = v10;
  v11 = *(_QWORD *)(a5[1] + 24);
  if (!v11)
    goto LABEL_12;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v30);
  v13 = *(_QWORD *)(a5[1] + 24);
  if (!v13)
    goto LABEL_12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v29);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v12, v14);
  if ((result & 0x80000000) == 0)
    return result;
  v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  v17 = *a3;
  v29 = *a2;
  v30 = v17;
  v18 = *(_QWORD *)(a5[1] + 24);
  if (!v18)
    goto LABEL_12;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v30);
  v20 = *(_QWORD *)(a5[1] + 24);
  if (!v20)
    goto LABEL_12;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v29);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v19, v21);
  if ((result & 0x80000000) == 0)
    return result;
  v22 = *a2;
  *a2 = *a3;
  *a3 = v22;
  v23 = *a2;
  v29 = *a1;
  v30 = v23;
  v24 = *(_QWORD *)(a5[1] + 24);
  if (!v24
    || (v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v30),
        (v26 = *(_QWORD *)(a5[1] + 24)) == 0))
  {
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v29);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, v25, v27);
  if ((result & 0x80000000) != 0)
  {
    v28 = *a1;
    *a1 = *a2;
    *a2 = v28;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a2, a3, a4, a6);
  v12 = *a5;
  v37 = *a4;
  v38 = v12;
  v13 = *(_QWORD *)(a6[1] + 24);
  if (!v13)
    goto LABEL_15;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v38);
  v15 = *(_QWORD *)(a6[1] + 24);
  if (!v15)
    goto LABEL_15;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v37);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v14, v16);
  if ((result & 0x80000000) == 0)
    return result;
  v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  v19 = *a4;
  v37 = *a3;
  v38 = v19;
  v20 = *(_QWORD *)(a6[1] + 24);
  if (!v20)
    goto LABEL_15;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38);
  v22 = *(_QWORD *)(a6[1] + 24);
  if (!v22)
    goto LABEL_15;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v37);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v21, v23);
  if ((result & 0x80000000) == 0)
    return result;
  v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  v25 = *a3;
  v37 = *a2;
  v38 = v25;
  v26 = *(_QWORD *)(a6[1] + 24);
  if (!v26)
    goto LABEL_15;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v38);
  v28 = *(_QWORD *)(a6[1] + 24);
  if (!v28)
    goto LABEL_15;
  v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v37);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v27, v29);
  if ((result & 0x80000000) == 0)
    return result;
  v30 = *a2;
  *a2 = *a3;
  *a3 = v30;
  v31 = *a2;
  v37 = *a1;
  v38 = v31;
  v32 = *(_QWORD *)(a6[1] + 24);
  if (!v32
    || (v33 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 48))(v32, &v38),
        (v34 = *(_QWORD *)(a6[1] + 24)) == 0))
  {
LABEL_15:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v35 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 48))(v34, &v37);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v33, v35);
  if ((result & 0x80000000) != 0)
  {
    v36 = *a1;
    *a1 = *a2;
    *a2 = v36;
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v27 = *a1;
        v28 = v15;
        v16 = *(_QWORD *)(a4[1] + 24);
        if (!v16
          || (v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v28),
              (v18 = *(_QWORD *)(a4[1] + 24)) == 0))
        {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v27);
        if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v17, v19) & 0x80000000) != 0)
        {
          v20 = *v14;
          *v14 = *a1;
          *a1 = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v21 = (unint64_t)v8 >> 3;
      v22 = a2 - 1;
      do
      {
        v23 = *a1;
        v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(a1, a4, v21);
        if (v22 == v24)
        {
          *v24 = v23;
        }
        else
        {
          *v24 = *v22;
          *v22 = v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>((uint64_t)a1, (uint64_t)(v24 + 1), a4, v24 + 1 - a1);
        }
        --v22;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = a3 - 2;
  if (a3 < 2)
    return result;
  v5 = a4;
  v6 = result;
  v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - result) >> 3)
    return result;
  v10 = ((uint64_t)a4 - result) >> 2;
  v11 = v10 + 1;
  v12 = (uint64_t *)(result + 8 * (v10 + 1));
  v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    v14 = *v12;
    v38 = v12[1];
    v39 = v14;
    v15 = *(_QWORD *)(a2[1] + 24);
    if (!v15
      || (v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v39),
          (v17 = *(_QWORD *)(a2[1] + 24)) == 0))
    {
LABEL_26:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v38);
    if ((*(int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v16, v18) < 0)
    {
      ++v12;
      v11 = v13;
    }
  }
  v19 = *v12;
  v38 = *v5;
  v39 = v19;
  v20 = *(_QWORD *)(a2[1] + 24);
  if (!v20)
    goto LABEL_26;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v39);
  v22 = *(_QWORD *)(a2[1] + 24);
  if (!v22)
    goto LABEL_26;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v38);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v21, v23);
  if ((result & 0x80000000) == 0)
  {
    v24 = *v5;
    v37 = *v5;
    do
    {
      v25 = v12;
      *v5 = *v12;
      if (v7 < v11)
        break;
      v26 = (2 * v11) | 1;
      v12 = (uint64_t *)(v6 + 8 * v26);
      v11 = 2 * v11 + 2;
      if (v11 >= a3)
      {
        v11 = v26;
      }
      else
      {
        v27 = *v12;
        v38 = v12[1];
        v39 = v27;
        v28 = *(_QWORD *)(a2[1] + 24);
        if (!v28)
          goto LABEL_26;
        v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v39);
        v30 = *(_QWORD *)(a2[1] + 24);
        if (!v30)
          goto LABEL_26;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v38);
        if ((*(int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v29, v31) >= 0)
          v11 = v26;
        else
          ++v12;
        v24 = v37;
      }
      v32 = *v12;
      v38 = v24;
      v39 = v32;
      v33 = *(_QWORD *)(a2[1] + 24);
      if (!v33)
        goto LABEL_26;
      v34 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v39);
      v35 = *(_QWORD *)(a2[1] + 24);
      if (!v35)
        goto LABEL_26;
      v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v38);
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v34, v36);
      v5 = v25;
    }
    while ((result & 0x80000000) == 0);
    *v25 = v24;
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *v9;
      v18 = v9[1];
      v19 = v12;
      v13 = *(_QWORD *)(a2[1] + 24);
      if (!v13
        || (v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v19),
            (v15 = *(_QWORD *)(a2[1] + 24)) == 0))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v18);
      if ((*(int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v14, v16) < 0)
      {
        ++v9;
        v10 = v11;
      }
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,void quasar::tennessee::Collation<long long,long long>::SortInPlace<std::__wrap_iter<long long *>>(std::__wrap_iter<long long *>,std::__wrap_iter<long long *>,std::function<long long const& ()(std::__wrap_iter<long long *>::value_type const&)>)::{lambda(long long,long long)#1} &,long long *>(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = *v8;
    v10 = (uint64_t *)(a2 - 8);
    v22 = *(_QWORD *)(a2 - 8);
    v23 = v9;
    v11 = *(_QWORD *)(a3[1] + 24);
    if (!v11
      || (v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v23),
          (v13 = *(_QWORD *)(a3[1] + 24)) == 0))
    {
LABEL_12:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v14 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v22);
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v12, v14);
    if ((result & 0x80000000) != 0)
    {
      v15 = *v10;
      do
      {
        v16 = v8;
        *v10 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v17 = *v8;
        v22 = v15;
        v23 = v17;
        v18 = *(_QWORD *)(a3[1] + 24);
        if (!v18)
          goto LABEL_12;
        v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v23);
        v20 = *(_QWORD *)(a3[1] + 24);
        if (!v20)
          goto LABEL_12;
        v21 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v22);
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, v19, v21);
        v10 = v16;
      }
      while ((result & 0x80000000) != 0);
      *v16 = v15;
    }
  }
  return result;
}

_QWORD *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D3CEE0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E5D3CEE0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_1E5D3CEE0;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1ADAD3754(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3CEE0;
  return std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::tennessee::cxx20::identity<long long>,std::allocator<quasar::tennessee::cxx20::identity<long long>>,long long const& ()(long long const&)>::target_type()
{
}

uint64_t std::__function::__value_func<long long const& ()(long long const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::ImmutableSortedArrayStlVectorImpl(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  a1[1] = v4;
  *a1 = &unk_1E5D3CAE0;
  v5 = *a3;
  *a3 = 0;
  a1[2] = v5;
  quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::CheckSorted(a1);
  return a1;
}

void sub_1ADAD391C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v4, v6);
  quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::ImmutableSortedArrayStlVectorImpl(v1, v2);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::internal::ManagedImmutableSortedArrayStlVectorImpl<long long>::~ManagedImmutableSortedArrayStlVectorImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D3CAE0;
  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void quasar::tennessee::internal::ManagedImmutableSortedArrayStlVectorImpl<long long>::~ManagedImmutableSortedArrayStlVectorImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D3CAE0;
  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::at(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 16);
  if (a2 >= (uint64_t)(v2[1] - *v2) >> 3)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  return *v2 + 8 * a2;
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::data(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16);
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 3;
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::end(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::cbegin(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::cend(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::CheckSorted(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[17];

  result = quasar::tennessee::ShouldCheckSorted(0);
  if ((_DWORD)result)
  {
    v3 = a1[1];
    v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    v6 = v5;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    result = quasar::tennessee::Collation<long long,long long>::IsSorted<quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(v3, v4, v6, v7, v8);
    if ((result & 1) == 0)
    {
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "Input container is not sorted.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
    }
  }
  return result;
}

_QWORD *quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::~ImmutableSortedArrayStlVectorImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D3CAE0;
  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void quasar::tennessee::internal::ImmutableSortedArrayStlVectorImpl<long long,std::vector<long long>,std::unique_ptr<std::vector<long long>>>::~ImmutableSortedArrayStlVectorImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D3CAE0;
  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::Collation<long long,long long>::IsSorted<quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD v20[17];
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2 == a4 && a3 == a5)
    return 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v21[0] = &unk_1E5D3FDA0;
  v21[1] = v10;
  v22 = v21;
  v11 = std::__is_sorted_until[abi:ne180100]<std::function<BOOL ()(long long const&,long long const&)> &,quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(a2, a3, a4, a5, (uint64_t)v21);
  v13 = v12;
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_8;
  }
  if (v22)
  {
    v15 = 5;
LABEL_8:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = v11 == a4 && v13 == a5;
  v17 = !v16;
  if (!v16 && quasar::gLogLevel >= 2)
  {
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Element at position ", 20);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"is smaller than preceding element.", 34);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v20);
  }
  return v17 ^ 1u;
}

void sub_1ADAD3E0C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__is_sorted_until[abi:ne180100]<std::function<BOOL ()(long long const&,long long const&)> &,quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::Iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a1;
  if (a1 == a3 && a2 == a4)
    return a3;
  for (i = a2 + 1; v8 != a3 || a4 != i; ++i)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, i);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, i - 1);
    v12 = *(_QWORD *)(a5 + 24);
    if (!v12)
      std::__throw_bad_function_call[abi:ne180100]();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v10, v11))
      return v8;
  }
  return a3;
}

void std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3FDA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3FDA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::operator()(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) >> 31;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1},std::allocator<quasar::tennessee::Collation<long long,long long>::GetLessThanComparator(void)::{lambda(long long const&,long long const&)#1}>,BOOL ()(long long const&,long long const&)>::target_type()
{
}

uint64_t std::make_unique[abi:ne180100]<quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (_QWORD *)operator new();
  v7 = *a1;
  *a1 = 0;
  v12 = v7;
  quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::unique_vmem_file_flatbuf_ptr(&v10, a2);
  quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::ImmutableSortedArrayFlatbufferVectorImpl(v6, &v12, (uint64_t)&v10);
  *v6 = &unk_1E5D3CC98;
  *a3 = v6;
  v8 = v11;
  v10 = &unk_1E5D3C838;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADAD40EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  MEMORY[0x1AF44D190](v14, 0x10E1C4078ECEE6DLL);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::~unique_vmem_file_flatbuf_ptr(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E5D3C838;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr(uint64_t a1, quasar::tennessee::memory_mapping::VirtualMemoryFile **a2, int a3)
{
  quasar::tennessee::memory_mapping::VirtualMemoryFile *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = &unk_1E5D3C838;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = a3;
  if (!a3)
  {
    *(_QWORD *)(a1 + 24) = 0;
LABEL_9:
    v10 = (unsigned int *)quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(v4);
    goto LABEL_10;
  }
  v5 = (unsigned int *)quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(v4);
  v6 = (int *)((char *)v5 + *v5);
  v7 = *(unsigned __int16 *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (!(_DWORD)v7)
  {
    v4 = *(quasar::tennessee::memory_mapping::VirtualMemoryFile **)(a1 + 8);
    goto LABEL_9;
  }
  v8 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v8 > v7)
  {
    v9 = *(unsigned __int16 *)((char *)v8 + v7);
    if (v9)
    {
      v10 = (unsigned int *)((char *)v6 + v9);
LABEL_10:
      v11 = (char *)v10 + *v10;
      goto LABEL_11;
    }
  }
  v11 = 0;
LABEL_11:
  *(_QWORD *)(a1 + 32) = v11;
  return a1;
}

void sub_1ADAD4238(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::~unique_vmem_file_flatbuf_ptr(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E5D3C838;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::~generic_flatbuf_ptr(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E5D3C838;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::~generic_flatbuf_ptr(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &unk_1E5D3C838;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::unique_vmem_file_flatbuf_ptr(_QWORD *a1, uint64_t a2)
{
  quasar::tennessee::memory_mapping::VirtualMemoryFile *v4;
  quasar::tennessee::memory_mapping::VirtualMemoryFile *v5;
  quasar::tennessee::memory_mapping::VirtualMemoryFile *v7;

  v4 = *(quasar::tennessee::memory_mapping::VirtualMemoryFile **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = v4;
  quasar::tennessee::generic_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::memory_mapping::VirtualMemoryFile,std::unique_ptr<quasar::tennessee::memory_mapping::VirtualMemoryFile>>::generic_flatbuf_ptr((uint64_t)a1, &v7, *(unsigned __int16 *)(a2 + 16));
  *a1 = &unk_1E5D3C9E8;
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(quasar::tennessee::memory_mapping::VirtualMemoryFile *))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

void sub_1ADAD43B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::ImmutableSortedArrayFlatbufferVectorImpl(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *a1 = &unk_1E5D3CB90;
  a1[1] = v4;
  quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>::unique_vmem_file_flatbuf_ptr(a1 + 2, a3);
  quasar::tennessee::ImmutableSortedArray<long long,quasar::tennessee::Collation<long long,long long>,std::unique_ptr<quasar::tennessee::Collation<long long,long long>>>::CheckSorted(a1);
  return a1;
}

void sub_1ADAD4424(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[3];
  v1[2] = &unk_1E5D3C838;
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[1];
  *v1 = &unk_1E5D3C930;
  v1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>::~VmemFileImmutableSortedArrayFlatbufferVectorImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D3CB90;
  v2 = a1[3];
  a1[2] = &unk_1E5D3C838;
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void quasar::tennessee::internal::VmemFileImmutableSortedArrayFlatbufferVectorImpl<long long>::~VmemFileImmutableSortedArrayFlatbufferVectorImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D3CB90;
  v2 = a1[3];
  a1[2] = &unk_1E5D3C838;
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::at(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 48) + 8 * a2 + 4;
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::data(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) + 4;
}

uint64_t quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::size(uint64_t a1)
{
  return **(unsigned int **)(a1 + 48);
}

_QWORD *quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::~ImmutableSortedArrayFlatbufferVectorImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D3CB90;
  v2 = a1[3];
  a1[2] = &unk_1E5D3C838;
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void quasar::tennessee::internal::ImmutableSortedArrayFlatbufferVectorImpl<long long,flatbuffers_2_0_6::Vector<long long>,quasar::tennessee::unique_vmem_file_flatbuf_ptr<flatbuffers_2_0_6::Vector<long long>>>::~ImmutableSortedArrayFlatbufferVectorImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D3CB90;
  v2 = a1[3];
  a1[2] = &unk_1E5D3C838;
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &unk_1E5D3C930;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1AF44D190);
}

void quasar::LanguageDetectorV2::languageIdV2Configuration(quasar::LanguageDetectorV2 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t PtreeOptional;
  double v6;
  double v7;
  char v8;
  char v9;
  double v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28[2];
  char v29;
  std::vector<std::wstring> v30;
  std::string v31;
  std::vector<std::wstring> v32;
  std::vector<std::wstring> *v33;

  memset(&v32, 0, sizeof(v32));
  std::string::basic_string[abi:ne180100]<0>(__p, "ld-inference");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  if (!PtreeOptional)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing 'ld-inference' in json config file", 42);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "languages-list");
  quasar::PTree::getStringOptional(PtreeOptional, (uint64_t)&v31, (std::string *)__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (BYTE8(v12))
  {
    if (SBYTE7(v12) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v31.__r_.__value_.__r.__words[2] = v12;
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "_");
    std::string::basic_string[abi:ne180100]<0>(v28, "-");
    quasar::replaceAll((uint64_t)&v31, (uint64_t)&v30, (char *)v28);
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v30.__end_cap_.__value_) < 0)
      operator delete(v30.__begin_);
    std::string::basic_string[abi:ne180100]<0>(v28, ",");
    quasar::splitAndTrimNoEmpty(&v31, (char *)v28, &v30);
    std::vector<std::string>::__vdeallocate(&v32);
    v32 = v30;
    v33 = &v30;
    memset(&v30, 0, sizeof(v30));
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "english-threshold");
  quasar::PTree::getDoubleOptional(PtreeOptional, (uint64_t)&v31);
  v7 = v6;
  v9 = v8;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (BYTE8(v12) && SBYTE7(v12) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a2, (__int128 *)v32.__begin_, (__int128 *)v32.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v32.__end_ - (char *)v32.__begin_) >> 3));
  v10 = v7;
  if (!v9)
    v10 = 0.03;
  *(double *)(a2 + 24) = v10;
  __p[0] = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADAD4930()
{
  uint64_t v0;

  if (*(char *)(v0 - 129) < 0)
    operator delete(*(void **)(v0 - 152));
  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x1ADAD49A0);
}

void sub_1ADAD49BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  if ((*(char *)(v1 - 73) & 0x80000000) == 0)
  {
    v3 = v1 - 64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1ADAD49B4);
}

void sub_1ADAD49D4()
{
  JUMPOUT(0x1ADAD49A8);
}

uint64_t SdapiAnnotatedText::SdapiAnnotatedText(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  std::string *__str[3];
  void **v8[3];
  _QWORD __dst[4];

  __dst[3] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 48) = 0u;
  v3 = (std::string *)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    memset(__str, 0, sizeof(__str));
    v8[0] = (void **)"\\";
    v8[1] = (void **)"";
    boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v8);
    boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((__int128 *)__str, a2, __dst, 1);
    if (__dst[2] >= 0x11uLL && __dst[0])
      MEMORY[0x1AF44D160](__dst[0], 0x1000C8077774924);
    std::string::operator=((std::string *)a1, __str[0]);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3) >= 2)
    {
      std::string::operator=((std::string *)(a1 + 24), __str[0] + 1);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3) >= 3)
        std::string::operator=(v3, __str[0] + 2);
    }
    v8[0] = (void **)__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  return a1;
}

void sub_1ADAD4B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t v17;
  void **v18;
  void **v19;

  if (a17 >= 0x11 && a15)
    MEMORY[0x1AF44D160](a15, 0x1000C8077774924);
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  if (*(char *)(v17 + 71) < 0)
    operator delete(*v18);
  if (*(char *)(v17 + 47) < 0)
    operator delete(*v19);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

__int128 *boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(__int128 *a1, uint64_t a2, _QWORD *__src, int a4)
{
  _QWORD *v5;
  size_t v8;
  void *v9;
  size_t v10;
  void *v11;
  void **v12;
  size_t v13;
  void *v14;
  __int128 *v15;
  void *__srca[2];
  size_t __n;
  void *__dst[2];
  size_t v20;
  int v21;
  void *v22[2];
  size_t v23;
  uint64_t v24;

  v5 = __src;
  v24 = *MEMORY[0x1E0C80C00];
  v8 = __src[2];
  __n = v8;
  __srca[0] = 0;
  if (v8 >= 0x11)
  {
    v9 = (void *)operator new[]();
    __srca[0] = v9;
    v5 = (_QWORD *)*v5;
  }
  else
  {
    v9 = __srca;
  }
  memcpy(v9, v5, v8);
  v10 = __n;
  v23 = __n;
  v22[0] = 0;
  if (__n >= 0x11)
  {
    v11 = (void *)operator new[]();
    v22[0] = v11;
    v12 = (void **)__srca[0];
  }
  else
  {
    v11 = v22;
    v12 = __srca;
  }
  memcpy(v11, v12, v10);
  v13 = v23;
  v20 = v23;
  __dst[0] = 0;
  if (v23 > 0x10)
  {
    __dst[0] = (void *)operator new[]();
    v14 = v22[0];
    memcpy(__dst[0], v22[0], v13);
    v21 = a4;
    if (v14)
      MEMORY[0x1AF44D160](v14, 0x1000C8077774924);
  }
  else
  {
    memcpy(__dst, v22, v23);
    v21 = a4;
  }
  v15 = boost::algorithm::iter_split<std::vector<std::string>,std::string const&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, a2, __dst);
  if (v20 >= 0x11 && __dst[0])
    MEMORY[0x1AF44D160](__dst[0], 0x1000C8077774924);
  if (v10 >= 0x11 && __srca[0])
    MEMORY[0x1AF44D160](__srca[0], 0x1000C8077774924);
  return v15;
}

void sub_1ADAD4DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v17;

  if (a17)
    MEMORY[0x1AF44D160](a17, 0x1000C8077774924);
  if (v17 >= 0x11)
  {
    if (a10)
      MEMORY[0x1AF44D160](a10, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(_QWORD *__dst, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  void *v6;

  *__dst = 0;
  v4 = *(_BYTE **)a2;
  v5 = *(_BYTE **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11)
  {
    v6 = (void *)operator new[]();
    *__dst = v6;
    v4 = *(_BYTE **)a2;
    v5 = *(_BYTE **)(a2 + 8);
  }
  else
  {
    v6 = __dst;
  }
  if (v5 != v4)
    memmove(v6, v4, v5 - v4);
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

__int128 *boost::algorithm::iter_split<std::vector<std::string>,std::string const&,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(__int128 *a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  __int128 v13;
  std::string *v14;
  uint64_t v16[10];
  uint64_t v17[10];
  std::vector<std::string> v18;
  uint64_t v19[4];
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23[10];
  uint64_t v24[9];
  uint64_t v25[10];
  std::vector<std::string> *v26;
  _QWORD v27[2];
  unint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *(char *)(a2 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (v6)
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v7 + v8;
  v10 = *((_QWORD *)a3 + 2);
  v28 = v10;
  v27[0] = 0;
  if (v10 >= 0x11)
  {
    v11 = (_QWORD *)operator new[]();
    v27[0] = v11;
    v12 = *(const void **)a3;
  }
  else
  {
    v11 = v27;
    v12 = a3;
  }
  memcpy(v11, v12, v10);
  v29 = a3[6];
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)v24, v7, v9, v27);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v25, v24);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v24);
  if (v28 >= 0x11 && v27[0])
    MEMORY[0x1AF44D160](v27[0], 0x1000C8077774924);
  v19[0] = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 1;
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v23, v19);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v19);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v17, v25);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v16, v23);
  std::vector<std::string>::vector<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,0>(&v18, v17, v16);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v16);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v17);
  v13 = *a1;
  *a1 = *(_OWORD *)&v18.__begin_;
  *(_OWORD *)&v18.__begin_ = v13;
  v14 = (std::string *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v18.__end_cap_.__value_;
  v18.__end_cap_.__value_ = v14;
  v26 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v23);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v25);
  return a1;
}

void sub_1ADAD5088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a9);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a19);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a42);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)(v42 - 176));
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  if (*a2)
  {
    *(_QWORD *)a1 = v4;
    if ((v4 & 1) != 0)
    {
      v5 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  size_t v8;
  _QWORD *v9;
  const void *v10;
  _QWORD v12[2];
  unint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a4 + 2);
  v13 = v8;
  v12[0] = 0;
  if (v8 >= 0x11)
  {
    v9 = (_QWORD *)operator new[]();
    v12[0] = v9;
    v10 = *(const void **)a4;
  }
  else
  {
    v9 = v12;
    v10 = a4;
  }
  memcpy(v9, v10, v8);
  v14 = a4[6];
  boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t (***)())a1, v12);
  if (v13 >= 0x11 && v12[0])
    MEMORY[0x1AF44D160](v12[0], 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a3)
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(a1);
  return a1;
}

void sub_1ADAD52A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v1);
  _Unwind_Resume(a1);
}

uint64_t (***boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t (***a1)(), _QWORD *a2))()
{
  _QWORD *v2;
  size_t v4;
  _QWORD *v5;
  _QWORD v7[2];
  unint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v10 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v8 = v4;
  v7[0] = 0;
  if (v4 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    v7[0] = v5;
    a2 = (_QWORD *)*v2;
  }
  else
  {
    v5 = v7;
  }
  memcpy(v5, a2, v4);
  v9 = *((_DWORD *)v2 + 6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v7);
  if (v8 >= 0x11 && v7[0])
    MEMORY[0x1AF44D160](v7[0], 0x1000C8077774924);
  return a1;
}

void sub_1ADAD53D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)a1)
  {
    result = boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::operator()((_QWORD *)a1);
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 56);
    result = v4;
  }
  v5 = result == v2 && v4 == v2;
  if (v5 && *(_QWORD *)(a1 + 40) == v2)
    *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t (***boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t (***a1)(), _QWORD *a2))()
{
  _QWORD *v2;
  size_t v4;
  _QWORD *v5;
  _QWORD v7[2];
  unint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v10 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  v4 = a2[2];
  v8 = v4;
  v7[0] = 0;
  if (v4 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    v7[0] = v5;
    a2 = (_QWORD *)*v2;
  }
  else
  {
    v5 = v7;
  }
  memcpy(v5, a2, v4);
  v9 = *((_DWORD *)v2 + 6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v7);
  if (v8 >= 0x11 && v7[0])
    MEMORY[0x1AF44D160](v7[0], 0x1000C8077774924);
  return a1;
}

void sub_1ADAD5554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t (***a1)(), _QWORD *a2)
{
  _QWORD *v2;
  size_t v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  uint64_t (**v8)();
  _QWORD v9[2];
  unint64_t v10;
  int v11;
  uint64_t v12;

  v2 = a2;
  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v10 = v4;
  v9[0] = 0;
  if (v4 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    v9[0] = v5;
    a2 = (_QWORD *)*v2;
  }
  else
  {
    v5 = v9;
  }
  memcpy(v5, a2, v4);
  v11 = *((_DWORD *)v2 + 6);
  result = boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable, v9, a1 + 1);
  v7 = result;
  if (v10 >= 0x11)
  {
    result = v9[0];
    if (v9[0])
      result = MEMORY[0x1AF44D160](v9[0], 0x1000C8077774924);
  }
  if (v7)
    v8 = boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable;
  else
    v8 = 0;
  *a1 = v8;
  return result;
}

void sub_1ADAD5678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(_DWORD **a1, char *a2, char *a3)
{
  return boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char const*>>(*a1, a2, a3);
}

uint64_t boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  size_t v6;
  _QWORD *v7;
  uint64_t is_any_of;
  _QWORD v10[2];
  unint64_t v11;
  int v12;
  uint64_t v13;

  v4 = a2;
  v13 = *MEMORY[0x1E0C80C00];
  v6 = a2[2];
  v11 = v6;
  v10[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v10[0] = v7;
    a2 = (_QWORD *)*v4;
  }
  else
  {
    v7 = v10;
  }
  memcpy(v7, a2, v6);
  v12 = *((_DWORD *)v4 + 6);
  is_any_of = boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v10, a3);
  if (v11 >= 0x11 && v10[0])
    MEMORY[0x1AF44D160](v10[0], 0x1000C8077774924);
  return is_any_of;
}

{
  _QWORD *v4;
  size_t v6;
  _QWORD *v7;
  _QWORD v9[2];
  unint64_t v10;
  int v11;
  uint64_t v12;

  v4 = a2;
  v12 = *MEMORY[0x1E0C80C00];
  v6 = a2[2];
  v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v9[0] = v7;
    a2 = (_QWORD *)*v4;
  }
  else
  {
    v7 = v9;
  }
  memcpy(v7, a2, v6);
  v11 = *((_DWORD *)v4 + 6);
  boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v9, a3);
  if (v10 >= 0x11 && v9[0])
    MEMORY[0x1AF44D160](v9[0], 0x1000C8077774924);
  return 1;
}

void sub_1ADAD57B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_DWORD **)result;
      v6 = (_QWORD *)operator new();
      v7 = v6;
      v8 = *((_QWORD *)v5 + 2);
      v6[2] = v8;
      *v6 = 0;
      if (v8 >= 0x11)
      {
        v6 = (_QWORD *)operator new[]();
        *v7 = v6;
        v9 = *(const void **)v5;
        v8 = v7[2];
      }
      else
      {
        v9 = v5;
      }
      result = (uint64_t)memcpy(v6, v9, v8);
      *((_DWORD *)v7 + 6) = v5[6];
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v10 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        if (v10[2] >= 0x11uLL && *v10)
          MEMORY[0x1AF44D160](*v10, 0x1000C8077774924);
        result = MEMORY[0x1AF44D190](v10, 0x1012C405C87E9CELL);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001AE15EE9CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000001AE15EE9CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1ADAD5954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

char *boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char const*>>(_DWORD *a1, char *a2, char *a3)
{
  size_t v6;
  _QWORD *v7;
  const void *v8;
  char *v9;
  _QWORD v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 2);
  v12 = v6;
  v11[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v11[0] = v7;
    v8 = *(const void **)a1;
  }
  else
  {
    v7 = v11;
    v8 = a1;
  }
  memcpy(v7, v8, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v11, *a2))
      goto LABEL_9;
    ++a2;
  }
  a2 = a3;
LABEL_9:
  if (v12 >= 0x11 && v11[0])
    MEMORY[0x1AF44D160](v11[0], 0x1000C8077774924);
  if (a2 == a3)
    return a3;
  if (!a1[6])
  {
    v9 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(a1, *v9))
        break;
      ++v9;
    }
    while (v9 != a3);
  }
  return a2;
}

void sub_1ADAD5AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a11 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a9);
  _Unwind_Resume(exception_object);
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(_QWORD *a1, int a2)
{
  unint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  int v6;
  unint64_t v7;

  v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (_QWORD *)*a1;
    v3 = (_QWORD *)((char *)a1 + v2);
  }
  else
  {
    v3 = (_QWORD *)((char *)a1 + v2);
    if (!v2)
      return a1 != v3 && *(char *)a1 <= a2;
  }
  do
  {
    v4 = (char *)a1 + (v2 >> 1);
    v6 = *v4;
    v5 = v4 + 1;
    v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2)
      a1 = v5;
    else
      v2 = v7;
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

void sub_1ADAD5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

void *boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const void *v8;
  void *result;

  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = *((_QWORD *)a2 + 2);
  v5[2] = v7;
  *v5 = 0;
  if (v7 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    *v6 = v5;
    v8 = *(const void **)a2;
    v7 = v6[2];
  }
  else
  {
    v8 = a2;
  }
  result = memcpy(v5, v8, v7);
  *((_DWORD *)v6 + 6) = a2[6];
  *a3 = v6;
  return result;
}

void sub_1ADAD5CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::operator()(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_1E5D298C8;
    boost::throw_exception<boost::bad_function_call>(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_1ADAD5D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1ADAD5DC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E5D29458;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29488;
  *(_QWORD *)(a1 + 24) = &unk_1E5D294B0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &unk_1E5D298C8;
  *(_QWORD *)(v2 + 24) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E5D29458;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29488;
  *(_QWORD *)(v2 + 24) = &unk_1E5D294B0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_1ADAD5F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1ADAD5FD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1AF44D190);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E5D298C8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E5D29458;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29488;
  *(_QWORD *)(a1 + 24) = &unk_1E5D294B0;
  return a1;
}

void sub_1ADAD6220(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

std::vector<std::string> *std::vector<std::string>::vector<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,0>(std::vector<std::string> *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6[10];
  uint64_t v7[10];

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v7, a2);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v6, a3);
  std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>>(a1, (uint64_t)v7, (uint64_t)v6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v7);
  return a1;
}

void sub_1ADAD62EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a9);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(&a19);
  _Unwind_Resume(a1);
}

BOOL std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char const*>>,boost::algorithm::split_iterator<std::__wrap_iter<char const*>>,boost::use_default,boost::use_default>>(std::vector<std::string> *a1, uint64_t a2, uint64_t a3)
{
  std::allocator<std::string> *p_end_cap;
  _BOOL8 result;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  int v19;
  void *__p[2];
  std::string::size_type v21;
  std::vector<std::string> *v22;
  char v23;
  std::__split_buffer<std::string> __v;

  v22 = a1;
  v23 = 0;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  while (1)
  {
    result = boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::equal(a2, a3);
    if (result)
      break;
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, *(char **)(a2 + 32), *(char **)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
    end = a1->__end_;
    value = a1->__end_cap_.__value_;
    if (end >= value)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a1->__begin_) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v14)
        v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v14);
      else
        v15 = 0;
      v16 = v15 + v11;
      __v.__first_ = v15;
      __v.__begin_ = v16;
      __v.__end_cap_.__value_ = &v15[v14];
      v17 = *(_OWORD *)__p;
      v16->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      __v.__end_ = v16 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
      v18 = a1->__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v19 = SHIBYTE(v21);
      a1->__end_ = v18;
      if (v19 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      a1->__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(a2);
  }
  return result;
}

void sub_1ADAD6490(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, std::__split_buffer<std::wstring> *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(__p);
}

BOOL boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::equal(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  const void *v7;
  const void *v8;
  size_t v9;

  if (*(_QWORD *)a1)
    v4 = *(_BYTE *)(a1 + 64) != 0;
  else
    v4 = 1;
  if (!*(_QWORD *)a2)
  {
    v5 = 1;
    return v4 ^ v5 ^ 1;
  }
  v5 = *(_BYTE *)(a2 + 64) != 0;
  if (*(_BYTE *)(a2 + 64))
    v6 = 1;
  else
    v6 = v4;
  if (v6 == 1)
    return v4 ^ v5 ^ 1;
  v7 = *(const void **)(a1 + 32);
  v8 = *(const void **)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
  return v9 == *(_QWORD *)(a2 + 40) - (_QWORD)v8
      && !memcmp(v7, v8, v9)
      && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56);
}

_QWORD *LHash<unsigned int,unsigned int>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,float>::clear(a1, 0);
  return a1;
}

void LMStats::LMStats(LMStats *this, Vocab *a2)
{
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E5D175A8;
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE4A50];
  *((_QWORD *)this + 3) = a2;
  *((_BYTE *)this + 32) = 1;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_WORD *)((char *)this + 33) = 257;
}

uint64_t LMStats::countString(LMStats *this, Vocab *a2, int a3)
{
  char **v6;
  char **v7;
  char *v8;
  char **v9;

  v6 = (char **)countStringWords();
  v8 = *v6;
  if (!*v6)
  {
    v9 = v6;
    v8 = (char *)malloc_type_calloc(0xC351uLL, 8uLL, 0x50040EE9192B6uLL);
    *v9 = v8;
  }
  if (Vocab::parseWords(a2, v8, (const char **)0xC351, v7) == 50001)
    return 0;
  if (a3)
    return (*(uint64_t (**)(LMStats *, char *, _QWORD))(*(_QWORD *)this + 48))(this, v8 + 8, *(_QWORD *)v8);
  return (*(uint64_t (**)(LMStats *, char *))(*(_QWORD *)this + 40))(this, v8);
}

void LMStats::freeThread(LMStats *this)
{
  void **v1;

  v1 = (void **)countStringWords();
  if (*v1)
  {
    free(*v1);
    *v1 = 0;
  }
}

uint64_t LMStats::countFile(LMStats *this, File *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = File::getline(a2);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    if ((_DWORD)a3)
      v9 = "illegal count weight or ";
    else
      v9 = "";
    if ((_DWORD)a3)
      v10 = 24;
    else
      v10 = 0;
    v11 = (_QWORD *)MEMORY[0x1E0DE4A50];
    do
    {
      v12 = (*(uint64_t (**)(LMStats *, char *, uint64_t))(*(_QWORD *)this + 64))(this, v7, a3);
      if (v12)
      {
        v8 = (v12 + v8);
      }
      else
      {
        v13 = File::position((const char **)a2, v11);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v9, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"line too long?\n", 15);
      }
      v7 = File::getline(a2);
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    v15 = (_QWORD *)(*(uint64_t (**)(LMStats *, char *))(*(_QWORD *)this + 24))(this, v7);
    v16 = File::position((const char **)a2, v15);
    operator<<(v16, (double *)this + 5);
  }
  return v8;
}

_QWORD *quasar::lm::SymbolTableData::SymbolTableData(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *Featurizer;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v22;

  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  *a2 = 0;
  *((_OWORD *)a1 + 9) = 0u;
  a1[2] = v3;
  *(_OWORD *)(a1 + 3) = 0u;
  v4 = (uint64_t)(a1 + 3);
  v5 = (uint64_t)(a1 + 6);
  a1[10] = -1;
  v6 = a1 + 10;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  a1[9] = 0;
  a1[11] = -1;
  *((_DWORD *)a1 + 24) = -1;
  *(_OWORD *)(a1 + 13) = 0u;
  *((_BYTE *)a1 + 100) = 0;
  *(_OWORD *)(a1 + 15) = 0u;
  *((_DWORD *)a1 + 34) = 1065353216;
  *((_OWORD *)a1 + 10) = 0u;
  *((_DWORD *)a1 + 44) = 1065353216;
  if (!v3)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "SymbolTableData", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 45);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Null symbol table passed to constructor", 39);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
    v3 = a1[2];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "<s>");
  *v6 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  if (v22 < 0)
    operator delete(__p[0]);
  v8 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "</s>");
  *((_DWORD *)a1 + 21) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = (*(uint64_t (**)(_QWORD, const char *))(*(_QWORD *)a1[2] + 104))(a1[2], "#0");
  *((_DWORD *)a1 + 23) = v9;
  if (v9 <= 0)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "SymbolTableData", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 64);
    v10 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Could not find symbol: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"#0", 2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  v12 = (*(uint64_t (**)(_QWORD, const char *))(*(_QWORD *)a1[2] + 104))(a1[2], "/WORD-DIS-1/");
  *((_DWORD *)a1 + 22) = v12;
  if (v12 <= 0)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "SymbolTableData", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 68);
    v13 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Could not find symbol: ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/WORD-DIS-1/", 12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 112))(a1[2]);
  std::vector<BOOL>::resize(v4, v15, 0);
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 112))(a1[2]);
  std::vector<BOOL>::resize(v5, v16, 0);
  _ZNSt3__115allocate_sharedB8ne180100I5VocabNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)__p);
  v17 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 152))(*a1) = 1;
  *(_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1) = 0;
  quasar::lm::SymbolTableData::observeSymbol((uint64_t)a1, 2, *((_DWORD *)a1 + 22));
  *((_DWORD *)a1 + 24) = (*(uint64_t (**)(_QWORD, const char *))(*(_QWORD *)*a1 + 16))(*a1, "/WORD-DIS-1/");
  return a1;
}

void sub_1ADAD6B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18);
  if (*v16)
    operator delete(*v16);
  if (*v15)
    operator delete(*v15);
  v20 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void quasar::lm::SymbolTableData::observeSymbol(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t *v4;
  _DWORD *v5;
  _QWORD *Featurizer;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v13[16];

  if (a2 == 2)
  {
    v4 = (uint64_t *)(a1 + 48);
    v5 = (_DWORD *)(a1 + 76);
    if ((a3 & 0x80000000) != 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (a2 == 1)
  {
    v4 = (uint64_t *)(a1 + 24);
    v5 = (_DWORD *)(a1 + 72);
    if ((a3 & 0x80000000) != 0)
      goto LABEL_9;
LABEL_8:
    v8 = v4[1];
    if (v8 > a3)
      goto LABEL_10;
    goto LABEL_9;
  }
  quasar::lm::LogMessage::LogMessage(v13, 5, "observeSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 271);
  Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Unknown symbol source ", 22);
  std::ostream::operator<<();
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  quasar::lm::LogMessage::LogMessage(v13, 5, "observeSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 275);
  v7 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"symbolMask and numSymbols should be non-null", 44);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  v5 = 0;
  v4 = 0;
  if ((a3 & 0x80000000) == 0)
    goto LABEL_8;
LABEL_9:
  quasar::lm::LogMessage::LogMessage(v13, 5, "observeSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 279);
  v9 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Label out of bounds: ", 21);
  std::ostream::operator<<();
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  v8 = v4[1];
LABEL_10:
  if (v8 <= (int)a3)
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v10 = *v4;
  v11 = (unint64_t)(int)a3 >> 6;
  v12 = *(_QWORD *)(*v4 + 8 * v11);
  if ((v12 & (1 << a3)) == 0)
  {
    ++*v5;
    *(_QWORD *)(v10 + 8 * v11) = v12 | (1 << a3);
  }
}

void sub_1ADAD6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::SymbolTableData::getAndCheckSymbolId(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  std::string __p;
  int v10;

  v4 = a1 + 104;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 104), (unsigned __int8 *)a2);
  if (v5)
    return *((unsigned int *)v5 + 10);
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16), a2);
  if (quasar::lm::SymbolTableData::symbolIdIsOov((quasar::lm::SymbolTableData *)a1, v7))
    v6 = 0xFFFFFFFFLL;
  else
    v6 = v7;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v10 = v6;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(v4, (unsigned __int8 *)&__p, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1ADAD6ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::lm::SymbolTableData::symbolIdIsOov(quasar::lm::SymbolTableData *this, int a2)
{
  _BOOL8 v3;
  BOOL v4;

  v3 = a2 < 1 || *((_BYTE *)this + 100) == 0;
  if (*((_BYTE *)this + 100))
    v4 = 1;
  else
    v4 = a2 < 1;
  if (!v4)
  {
    if (*((_QWORD *)this + 4) <= (unint64_t)a2)
      return 1;
    else
      return ((*(_QWORD *)(*((_QWORD *)this + 3) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0
          && *((_DWORD *)this + 21) != a2
          && *((_DWORD *)this + 20) != a2
          && *((_DWORD *)this + 23) != a2
          && *((_DWORD *)this + 22) != a2;
  }
  return v3;
}

uint64_t quasar::lm::SymbolTableData::observeTrainingSymbol(_QWORD *a1, int *a2, uint64_t *a3)
{
  _QWORD *Featurizer;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  _QWORD v13[2];

  if (*a2 <= 0)
  {
    quasar::lm::LogMessage::LogMessage(v13, 5, "observeTrainingSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 192);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"unmapped FST symbol", 19);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  }
  if (!*a1)
  {
    quasar::lm::LogMessage::LogMessage(v13, 5, "observeTrainingSymbol", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 195);
    v7 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"trainVocab not set", 18);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v13);
  }
  v8 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 18, a2);
  if (v8)
    return *((unsigned int *)v8 + 5);
  v10 = *a2;
  if (*a2 != *((_DWORD *)a1 + 21)
    && v10 != *((_DWORD *)a1 + 20)
    && v10 != *((_DWORD *)a1 + 23)
    && v10 != *((_DWORD *)a1 + 22))
  {
    quasar::lm::SymbolTableData::observeSymbol((uint64_t)a1, 2, v10);
  }
  if (*((char *)a3 + 23) >= 0)
    v11 = a3;
  else
    v11 = (uint64_t *)*a3;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 16))(*a1, v11);
  LODWORD(v13[0]) = *a2;
  HIDWORD(v13[0]) = v9;
  std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)(a1 + 18), (int *)v13, v13);
  return v9;
}

void sub_1ADAD70E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::SymbolTableData::lookupTrainId(quasar::lm::SymbolTableData *this, int *a2, int a3)
{
  _QWORD *Featurizer;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *p_p;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  void *v24[2];
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;

  if (quasar::lm::SymbolTableData::symbolIdIsOov(this, *a2))
  {
    quasar::lm::LogMessage::LogMessage(&__p, 5, "lookupTrainId", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 218);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"trying to look-up unmapped FST symbol: ", 39);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
  }
  v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)this + 18, a2);
  if (v7)
    return *((unsigned int *)v7 + 5);
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 88))(&__p, *((_QWORD *)this + 2), *a2);
  if (a3)
  {
    quasar::lm::LogMessage::LogMessage(v24, 5, "lookupTrainId", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 224);
    v9 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"training token ", 15);
    if ((v27 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v27 & 0x80u) == 0)
      v12 = v27;
    else
      v12 = v26;
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" : ", 3);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" not present in training map", 28);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
  }
  if (((char)v27 & 0x80000000) == 0)
  {
    if (v27)
    {
      v15 = &__p;
      goto LABEL_18;
    }
LABEL_20:
    quasar::lm::LogMessage::LogMessage(v24, 2, "lookupTrainId", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 235);
    v17 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
    if ((v27 & 0x80u) == 0)
      v18 = &__p;
    else
      v18 = __p;
    if ((v27 & 0x80u) == 0)
      v19 = v27;
    else
      v19 = v26;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" : ", 3);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" not present in training or ARPA vocabulary", 43);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    v22 = *((_DWORD *)this + 24);
    LODWORD(v24[0]) = *a2;
    HIDWORD(v24[0]) = v22;
    std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)this + 144, (int *)v24, v24);
    v8 = *((unsigned int *)this + 24);
    goto LABEL_27;
  }
  if (!v26)
    goto LABEL_20;
  v15 = __p;
LABEL_18:
  v16 = (*(uint64_t (**)(_QWORD, void *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, v15, 0xFFFFFFFFLL);
  v8 = v16;
  if ((_DWORD)v16 == -1)
    goto LABEL_20;
  LODWORD(v24[0]) = *a2;
  HIDWORD(v24[0]) = v16;
  std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)this + 144, (int *)v24, v24);
LABEL_27:
  if ((char)v27 < 0)
    operator delete(__p);
  return v8;
}

void sub_1ADAD735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::lm::SymbolTableData::tokenIsOov(quasar::lm::SymbolTableData *a1)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 96))(*((_QWORD **)a1 + 2));
  return quasar::lm::SymbolTableData::symbolIdIsOov(a1, v2);
}

void quasar::lm::SymbolTableData::observeBigGSymbols(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  quasar::lm *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  quasar::lm *v14;
  quasar::lm *v15;
  quasar::lm *v16;
  quasar::lm *v17;
  _QWORD *v18;
  _QWORD *v19;
  quasar::lm *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;

  v23 = 0;
  v4 = *a2;
  v22 = 0;
  (*(void (**)(uint64_t, quasar::lm **))(*(_QWORD *)v4 + 128))(v4, &v20);
LABEL_2:
  v5 = v20;
  if (v20)
  {
    v6 = (*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v20 + 16))(v20);
    v5 = v20;
    if (!v6)
    {
      if (v20)
      {
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 24))();
        goto LABEL_8;
      }
LABEL_7:
      v7 = v22;
LABEL_8:
      if (v23)
      {
        fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v23, *a2, v7);
      }
      else
      {
        v10 = *a2;
        v11 = (_QWORD *)operator new();
        v11[4] = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 136))(v10, v7, v11);
        v19 = 0;
        v12 = v23;
        v23 = v11;
        if (v12)
        {
          std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)&v23, v12);
          v13 = v19;
          v19 = 0;
          if (v13)
            std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)&v19, v13);
        }
      }
      while (1)
      {
        v8 = v23;
        if (*v23)
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 24))(*v23) & 1) != 0)
            goto LABEL_21;
          v8 = v23;
          if (*v23)
          {
            v9 = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 32))(*v23);
            goto LABEL_16;
          }
        }
        else if (v23[4] >= v23[2])
        {
LABEL_21:
          if (v20)
            (*(void (**)(quasar::lm *))(*(_QWORD *)v20 + 32))(v20);
          else
            ++v22;
          goto LABEL_2;
        }
        v9 = (unsigned int *)(v8[1] + 16 * v8[4]);
LABEL_16:
        if (*v9)
          quasar::lm::SymbolTableData::observeSymbol(a1, 1, *v9);
        if (*v23)
          (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 40))(*v23);
        else
          ++v23[4];
      }
    }
    if (v20)
      v5 = (quasar::lm *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8))();
  }
  else if ((int)v22 < v21)
  {
    goto LABEL_7;
  }
  if ((**(_BYTE **)(a1 + 24) & 1) != 0)
  {
    quasar::lm::LogMessage::LogMessage(&v20, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 310);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v20);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v20);
  }
  else
  {
    v14 = (quasar::lm *)quasar::lm::nullstream(v5);
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 92) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 92)) & 1) != 0)
  {
    quasar::lm::LogMessage::LogMessage(&v20, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 311);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v20);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v20);
  }
  else
  {
    v15 = (quasar::lm *)quasar::lm::nullstream(v14);
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 88) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 88)) & 1) != 0)
  {
    quasar::lm::LogMessage::LogMessage(&v20, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 312);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v20);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v20);
  }
  else
  {
    v16 = (quasar::lm *)quasar::lm::nullstream(v15);
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 80) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 80)) & 1) != 0)
  {
    quasar::lm::LogMessage::LogMessage(&v20, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 313);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v20);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v20);
  }
  else
  {
    v17 = (quasar::lm *)quasar::lm::nullstream(v16);
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + (((unint64_t)*(int *)(a1 + 84) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 84)) & 1) != 0)
  {
    quasar::lm::LogMessage::LogMessage(&v20, 5, "observeBigGSymbols", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 314);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v20);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v20);
  }
  else
  {
    quasar::lm::nullstream(v17);
  }
  v18 = v23;
  v23 = 0;
  if (v18)
    std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)&v23, v18);
}

void sub_1ADAD7784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  _QWORD *v15;

  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::SymbolTableData::observeAllSymbols(uint64_t this)
{
  *(_BYTE *)(this + 100) = 1;
  return this;
}

uint64_t quasar::lm::SymbolTableData::extractTrainVocabFromSymbolTable(quasar::lm::SymbolTableData *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void **v11;
  int v12;
  void *v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
  v3 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 32))(*(_QWORD *)this, v2);
  strlen(v3);
  MEMORY[0x1E0C80A78]();
  v5 = (char *)v14 - v4;
  v6 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 32))(*(_QWORD *)this, v2);
  strcpy(v5, v6);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)this + 64))(*(_QWORD *)this, v2);
  v7 = *((_QWORD *)this + 2);
  v8 = operator new();
  quasar::lm::srilm::VocabIterator::VocabIterator(v8, v7, (char *)this + 48);
  while (1)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v10 = *(_QWORD *)this;
    if ((v9 & 1) != 0)
      break;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 24))(v14, v8);
    if (v15 >= 0)
      v11 = v14;
    else
      v11 = (void **)v14[0];
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 16))(v10, v11);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  v12 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)v10 + 40))(*(_QWORD *)this, v5, 0xFFFFFFFFLL);
  *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this) = v12;
  *(_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 152))(*(_QWORD *)this) = v12 != -1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1ADAD7A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405945F38DLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::SymbolTableData::observeSrilmVocabulary(quasar::lm::SymbolTableData *this, Vocab *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *Featurizer;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _BYTE v14[20];
  unsigned int v15;
  _BYTE v16[32];

  VocabIter::VocabIter((VocabIter *)v16, a2, 0);
  v4 = 0;
  *(_BYTE *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 152))(a2) = 1;
  v15 = 0;
  while (1)
  {
    v5 = VocabIter::next((VocabIter *)v16, &v15);
    if (!v5)
      break;
    if (!(*(unsigned int (**)(Vocab *, _QWORD))(*(_QWORD *)a2 + 176))(a2, v15))
    {
      v6 = (*(uint64_t (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2), v5);
      if ((v6 & 0x80000000) != 0 || ((*(_QWORD *)(*((_QWORD *)this + 3) + 8 * (v6 >> 6)) >> v6) & 1) == 0)
      {
        v7 = v4 + 1;
        if (v4++ <= 0x13)
        {
          v4 = v7;
          if (*((_DWORD *)this + 21) != v6)
          {
            quasar::lm::LogMessage::LogMessage(v14, 2, "observeSrilmVocabulary", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 377);
            Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v14);
            v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"ARPA vocabulary contains data pack OOV: ", 40);
            v11 = strlen((const char *)v5);
            v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" : ", 3);
            std::ostream::operator<<();
            quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v14);
            v4 = v7;
          }
        }
      }
      else
      {
        quasar::lm::SymbolTableData::observeSymbol((uint64_t)this, 2, v6);
      }
    }
  }
  return LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v16);
}

void sub_1ADAD7C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::lm::SymbolTableData::generateTrainToBigGIdRemapping(quasar::lm::SymbolTableData *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  void *p_p;
  unsigned int v9;
  _QWORD *Featurizer;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  quasar::lm *v18;
  quasar::lm *v19;
  _QWORD v20[2];
  unsigned int v21;
  void *__p;
  const char *v23;
  unsigned __int8 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D454D8;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = v4 + 24;
  *a2 = v4 + 24;
  a2[1] = v4;
  v21 = 0;
  if (*((_QWORD *)this + 7))
  {
    v6 = 0;
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 6) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)this + 18, (int *)&v21);
        if (!v7)
        {
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 88))(&__p, *((_QWORD *)this + 2), (int)v21);
          if (((char)v24 & 0x80000000) == 0)
          {
            if (v24)
            {
              p_p = &__p;
              goto LABEL_11;
            }
            goto LABEL_13;
          }
          if (!v23)
            goto LABEL_13;
          p_p = __p;
LABEL_11:
          v9 = (*(uint64_t (**)(_QWORD, void *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, p_p, 0xFFFFFFFFLL);
          if (v9 == -1)
          {
LABEL_13:
            quasar::lm::LogMessage::LogMessage(v20, 5, "generateTrainToBigGIdRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 403);
            Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v20);
            if ((v24 & 0x80u) == 0)
              v11 = &__p;
            else
              v11 = __p;
            if ((v24 & 0x80u) == 0)
              v12 = v24;
            else
              v12 = (uint64_t)v23;
            v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)v11, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" : ", 3);
            v14 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" observed in ARPA but not present in SRILM Vocab", 48);
            quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v20);
          }
          else
          {
            v20[0] = __PAIR64__(v21, v9);
            std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,int> &>((uint64_t)v5, (unsigned int *)v20, v20);
          }
          if ((char)v24 < 0)
            operator delete(__p);
          goto LABEL_22;
        }
        LODWORD(__p) = *((_DWORD *)v7 + 5);
        HIDWORD(__p) = v21;
        std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,int> &>((uint64_t)v5, (unsigned int *)&__p, &__p);
      }
LABEL_22:
      v6 = (int)v21++ + 1;
    }
    while (*((_QWORD *)this + 7) > v6);
  }
  v15 = 0;
  __p = "<s>";
  v23 = "</s>";
  do
  {
    v16 = *(uint64_t *)((char *)&__p + v15);
    LODWORD(v20[0]) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, v16, 0xFFFFFFFFLL);
    v17 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v5, (unsigned int *)v20);
    if (v17)
    {
      v18 = (quasar::lm *)*((int *)v17 + 5);
      v19 = (quasar::lm *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2), v16);
      if (v19 == v18)
      {
        quasar::lm::nullstream(v19);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(v20, 5, "generateTrainToBigGIdRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 412);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v20);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v20);
      }
    }
    else
    {
      LODWORD(v20[0]) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, v16, 0xFFFFFFFFLL);
      v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2), v16);
      quasar::lm::InsertOrDie<std::unordered_map<unsigned int,int>>((uint64_t)v5, v20, (int *)&v21);
    }
    v15 += 8;
  }
  while (v15 != 16);
}

void sub_1ADAD7FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::unordered_map<unsigned int,int>>(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3;
  quasar::lm *v4;
  char v5;
  _QWORD *Featurizer;
  _QWORD v7[2];

  v3 = *a3;
  LODWORD(v7[0]) = *a2;
  HIDWORD(v7[0]) = v3;
  v4 = (quasar::lm *)std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>(a1, (unsigned int *)v7, v7);
  if ((v5 & 1) != 0)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v7, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v7);
  }
}

void sub_1ADAD80B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::IterateSRILMVocabTokens(Vocab *a1, uint64_t a2, char a3, char a4, char a5)
{
  unsigned int *v9;
  const char *v10;
  _QWORD *Featurizer;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _BYTE v17[20];
  unsigned int v18;
  _BYTE v19[32];

  VocabIter::VocabIter((VocabIter *)v19, a1, 0);
  v18 = 0;
  while (1)
  {
    v9 = VocabIter::next((VocabIter *)v19, &v18);
    v10 = (const char *)v9;
    if (!v9)
      return LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v19);
    if (!strcmp((const char *)v9, "<s>"))
    {
      if ((a4 & 1) == 0)
        goto LABEL_7;
      goto LABEL_9;
    }
    if (!strcmp(v10, "</s>"))
    {
      if ((a5 & 1) == 0)
        goto LABEL_7;
LABEL_9:
      std::function<void ()(char const*,unsigned int)>::operator()(a2, (uint64_t)v10, v18);
    }
    else
    {
      if (!(*(unsigned int (**)(Vocab *, _QWORD))(*(_QWORD *)a1 + 176))(a1, v18) || (a3 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      quasar::lm::LogMessage::LogMessage(v17, 2, "IterateSRILMVocabTokens", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 443);
      Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v17);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Skipping ", 9);
      v13 = strlen(v10);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v10, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v17);
    }
  }
}

void sub_1ADAD8234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(char const*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

_QWORD *quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab *a1, uint64_t a2, _QWORD *a3, int a4)
{
  unint64_t v8;
  _QWORD *Featurizer;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a3);
  if (a4)
  {
    v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 104))(a2, "<s>");
    if ((v8 & 0x8000000000000000) != 0)
    {
      quasar::lm::LogMessage::LogMessage(v15, 5, "ComputeSRILMVocabToOpenFSTSymbolTableRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 461);
      Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"FST SymbolTable should contain <s>.", 35);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v15);
    }
    else
    {
      quasar::lm::nullstream((quasar::lm *)v8);
    }
    v10 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 104))(a2, "</s>");
    if ((v10 & 0x8000000000000000) != 0)
    {
      quasar::lm::LogMessage::LogMessage(v15, 5, "ComputeSRILMVocabToOpenFSTSymbolTableRemapping", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 465);
      v11 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"FST SymbolTable should contain </s>.", 36);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v15);
    }
    else
    {
      quasar::lm::nullstream((quasar::lm *)v10);
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = &off_1E5D3E590;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v16 = v12;
  quasar::lm::IterateSRILMVocabTokens(a1, (uint64_t)v15, 0, a4, a4);
  result = v16;
  if (v16 == v15)
  {
    v14 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_1ADAD8444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(quasar::lm *this, const Vocab *a2, const fst::SymbolTable *a3)
{
  int v3;
  uint64_t v6;

  v3 = (int)a3;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(this, (uint64_t)a2, (_QWORD *)v6, v3);
  return v6;
}

void sub_1ADAD8530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::set<std::string>>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  char v4;
  _QWORD *Featurizer;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];

  v3 = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a1, (const void **)a2, a2);
  if ((v4 & 1) != 0)
  {
    quasar::lm::nullstream((quasar::lm *)v3);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 77);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate element ", 18);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
}

void sub_1ADAD85E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::lm::ExtractVocabularyFromARPA(uint64_t a1, File *a2)
{
  const char *v3;
  Vocab *v4;
  _BYTE v5[104];

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  File::File((File *)v5, v3, "r", 1);
  quasar::lm::ExtractVocabularyFromARPA((quasar::lm *)v5, a2, v4);
  File::~File((File *)v5);
}

void sub_1ADAD8658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

void quasar::lm::ExtractVocabularyFromARPA(quasar::lm *this, File *a2, Vocab *a3)
{
  _QWORD v4[19];
  uint64_t v5;

  Ngram::Ngram((Ngram *)v4, a2, 1u);
  Ngram::read((Ngram *)v4, this, 0);
  v4[0] = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie(&v5);
  LM::~LM((LM *)v4);
}

void sub_1ADAD86D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(Ngram *__hidden this))
{
  uint64_t v9;

  a9 = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie(v9 + 152);
  LM::~LM((LM *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100I5VocabNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI5VocabNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADAD8730(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI5VocabNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40B20;
  a1[1] = 0;
  Vocab::Vocab((Vocab *)(a1 + 3), 0, 0xFFFFFFFE);
  return a1;
}

void sub_1ADAD8784(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Vocab>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<Vocab>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)i + 10) = *(_DWORD *)(a3 + 24);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1ADAD8A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADAD8C7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;

  if (a2)
  {
    if (*a2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 8))(*a2);
    }
    else
    {
      v2 = (_DWORD *)a2[3];
      if (v2)
        --*v2;
    }
    JUMPOUT(0x1AF44D190);
  }
}

void std::__shared_ptr_emplace<std::unordered_map<unsigned int,int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D454D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<unsigned int,int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D454D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<unsigned int,int>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,int> &>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADAD8F50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3E590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E590;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::operator()(uint64_t a1, const char **a2, int *a3)
{
  const char *v4;
  _QWORD *Featurizer;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v10[16];
  int v11;
  int v12;

  v4 = *a2;
  v12 = *a3;
  v11 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v4);
  if (v11 < 0)
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/symbol_tables.cpp", 474);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"FST SymbolTable does not contain token ", 39);
    v7 = strlen(v4);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (id ", 5);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)").", 2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
  quasar::lm::InsertOrDie<std::unordered_map<unsigned int,int>>(*(_QWORD *)(a1 + 24), &v12, &v11);
}

void sub_1ADAD90CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0,std::allocator<quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(Vocab const&,fst::SymbolTable const&,std::unordered_map<unsigned int,int> *,BOOL)::$_0>,void ()(char const*,unsigned int)>::target_type()
{
}

uint64_t std::unique_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t quasar::CalculateJoinedNBest<0ul>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return quasar::CalculateJoinedNBest<0ul>::operator()(a1, *(_QWORD *)(a2 + 8), a3, *(_QWORD *)a2, a4, *(_DWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 32));
}

uint64_t quasar::CalculateJoinedNBest<0ul>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, char a8)
{
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *__p;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  int32x2_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[160];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (quasar::gLogLevel >= 6)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v47);
    kaldi::WriteCompactLattice(&v48, 0, a2);
    if (quasar::gLogLevel >= 6)
    {
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v56 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Primary lattice: ", 17);
      std::stringbuf::str();
      if (SHIBYTE(v36) >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (SHIBYTE(v36) >= 0)
        v14 = HIBYTE(v36);
      else
        v14 = (uint64_t)v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v14);
      if (SHIBYTE(v36) < 0)
        operator delete(__p);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v56);
    }
    *(_QWORD *)&v47 = *MEMORY[0x1E0DE4F50];
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v47 + *(_QWORD *)(v47 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v48 = v15;
    *((_QWORD *)&v48 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v53) < 0)
      operator delete(*((void **)&v52 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](v55);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v44);
  v40 = vdup_n_s32(0x7F800000u);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2, (uint64_t)&v44, a4, 0, 0, (uint64_t *)&v40, -1, 0);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v16 = *(_QWORD *)(v45 + 64);
  if (((*(_QWORD *)(v45 + 72) - v16) & 0x7FFFFFFF8) == 0 || (v17 = *(int *)(v45 + 88), (_DWORD)v17 == -1))
  {
    if (quasar::gLogLevel < 4)
    {
LABEL_43:
      v28 = 0;
      goto LABEL_44;
    }
LABEL_42:
    v54 = 0u;
    memset(v55, 0, 144);
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Primary lattice contains no paths.", 34);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v47);
    goto LABEL_43;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v16 + 8 * v17) + 56) - *(_QWORD *)(*(_QWORD *)(v16 + 8 * v17) + 48);
  if (!v18)
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_43;
    goto LABEL_42;
  }
  std::vector<std::vector<quasar::NBestToken<0ul>>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * (v18 >> 4));
  v19 = *(_QWORD *)(*(_QWORD *)(v45 + 64) + 8 * *(int *)(v45 + 88));
  v21 = *(_QWORD *)(v19 + 48);
  v20 = *(_QWORD *)(v19 + 56);
  if (v20 == v21)
    v22 = 0;
  else
    v22 = *(float32x2_t **)(v19 + 48);
  if (v20 != v21)
  {
    if ((unint64_t)((v20 - v21) / 48) <= 1)
      v23 = 1;
    else
      v23 = (v20 - v21) / 48;
    v24 = (void *)vdup_n_s32(0x7F800000u);
    while (1)
    {
      quasar::NBestToken<0ul>::NBestToken((uint64_t)&v47);
      v39 = 0;
      memset(v38, 0, sizeof(v38));
      v25 = operator new(0x40uLL);
      v25[1] = &v47;
      *v25 = &unk_1E5D3DF60;
      v25[2] = &v39;
      v25[3] = &v46;
      *((_DWORD *)v25 + 8) = a6;
      v25[5] = a7;
      *((_BYTE *)v25 + 48) = a8;
      v25[7] = v38;
      *((_QWORD *)&v57 + 1) = v25;
      __p = v24;
      v36 = 0;
      v37 = 0;
      v35 = 0;
      quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()((uint64_t)(v25 + 1), (float32x2_t *)&__p, v22);
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>((uint64_t)&v44, v22[5].u32[0], (uint64_t)&v56))std::vector<std::vector<quasar::NBestToken<0ul>>>::emplace_back<std::vector<quasar::NBestToken<0ul>>>(a5, (uint64_t)v38);
      v26 = (__int128 *)*((_QWORD *)&v57 + 1);
      if (*((__int128 **)&v57 + 1) == &v56)
        break;
      if (*((_QWORD *)&v57 + 1))
      {
        v27 = 5;
LABEL_36:
        (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
      }
      *(_QWORD *)&v56 = v38;
      std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      if ((_QWORD)v48)
      {
        *((_QWORD *)&v48 + 1) = v48;
        operator delete((void *)v48);
      }
      v22 += 6;
      if (!--v23)
        goto LABEL_40;
    }
    v26 = &v56;
    v27 = 4;
    goto LABEL_36;
  }
LABEL_40:
  v28 = 1;
LABEL_44:
  v44 = &unk_1E5D25800;
  v29 = v45;
  if (v45)
  {
    v30 = *(_DWORD *)(v45 + 56) - 1;
    *(_DWORD *)(v45 + 56) = v30;
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  return v28;
}

void sub_1ADAD961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,uint64_t a26,char a27)
{
  int v28;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a27);
  if (a25)
  {
    v28 = a25[14] - 1;
    a25[14] = v28;
    if (!v28)
      (*(void (**)(_DWORD *))(*(_QWORD *)a25 + 8))(a25);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::NBestToken<0ul>>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::NBestToken<0ul>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADAD97EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState(uint64_t a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  char v15;

  if (*(_DWORD *)(a1 + 16) != a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (*(_DWORD *)(a1 + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
      if (v14 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a1 + 106) = 1;
    }
    v6 = *(_QWORD **)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 64);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8 * a2) + 48);
      if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * a2) + 56) == v8)
        v8 = 0;
      *v6 = v8;
      v9 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v7 + 8 * a2) + 56) - *(_QWORD *)(*(_QWORD *)(v7 + 8 * a2) + 48)) >> 4);
      v6[1] = v9;
      v6[2] = 0;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 168);
      if (v10)
      {
        *(_QWORD *)(a1 + 168) = v10[3];
      }
      else
      {
        v10 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Allocate((_QWORD *)(a1 + 120), 1);
        v10[3] = 0;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 64);
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 48);
      if (*(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 56) == v12)
        v12 = 0;
      *v10 = v12;
      v10[1] = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 56)
                        - *(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 48)) >> 4);
      v10[2] = 0;
      *(_QWORD *)(a1 + 24) = v10;
      v9 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 56) - *(_QWORD *)(*(_QWORD *)(v11 + 8 * a2) + 48)) >> 4);
    }
    *(_QWORD *)(a1 + 48) = v9;
    *(_DWORD *)(a1 + 96) = a2;
  }
}

void sub_1ADAD99A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _OWORD v15[17];
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD v19[3];
  _DWORD *v20;
  uint64_t v21;
  float v22;
  int v23;
  float v24;

  v21 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, a2, v19);
  v7 = a2;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v16, a1, v7);
    v24 = *((float *)&v16 + 1);
    LODWORD(v15[0]) = v16;
    v23 = 2139095040;
    v22 = INFINITY;
    v8.n128_u32[0] = v16;
    if (*(float *)&v16 != INFINITY || (v8.n128_f32[0] = v24, v24 != v22) || v18 != v17)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v7, v8))
      {
        *(_QWORD *)&v15[0] = 0;
        v9 = *(_QWORD *)(a3 + 24);
        if (!v9)
          std::__throw_bad_function_call[abi:ne180100]();
        v3 = (*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *))(*(_QWORD *)v9 + 48))(v9, &v16, v15);
        goto LABEL_11;
      }
      if (quasar::gLogLevel < 1)
      {
LABEL_8:
        v3 = 0;
LABEL_11:
        v10 = 1;
        goto LABEL_12;
      }
LABEL_7:
      memset(v15, 0, sizeof(v15));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"FST is not linear.", 18);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v15);
      goto LABEL_8;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, v7, v24) != 1)
    {
      if (quasar::gLogLevel < 1)
        goto LABEL_8;
      goto LABEL_7;
    }
    if ((_DWORD)v7 != (_DWORD)a2)
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v19, a1, v7);
    if (v19[0])
      v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19[0] + 32))(v19[0]);
    else
      v11 = v19[1] + 48 * v21;
    *(_QWORD *)&v15[0] = v11;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      std::__throw_bad_function_call[abi:ne180100]();
    v13 = (*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *))(*(_QWORD *)v12 + 48))(v12, &v16, v15);
    if (v13)
      v7 = *(unsigned int *)(v11 + 40);
    else
      v7 = v7;
    v10 = v13 ^ 1;
    v3 = v13 & v3;
LABEL_12:
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
  }
  while (!v10);
  if (v19[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 8))(v19[0]);
  }
  else if (v20)
  {
    --*v20;
  }
  return v3;
}

void sub_1ADAD9CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  uint64_t v12;
  _DWORD *v13;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  v11 = *(void **)(v9 - 168);
  if (v11)
  {
    *(_QWORD *)(v9 - 160) = v11;
    operator delete(v11);
  }
  v12 = *(_QWORD *)(v9 - 144);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v13 = *(_DWORD **)(v9 - 120);
    if (v13)
      --*v13;
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::NBestToken<0ul>>>::emplace_back<std::vector<quasar::NBestToken<0ul>>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::NBestToken<0ul>>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADAD9E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::CalculateJoinedNBest<1ul>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  return quasar::CalculateJoinedNBest<1ul>::operator()(a1, *(_QWORD *)(a2 + 8), a3, *(_QWORD *)a2, a4, *(_DWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 32));
}

uint64_t quasar::CalculateJoinedNBest<1ul>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, char a8)
{
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void *__p;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  int32x2_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[160];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (quasar::gLogLevel >= 6)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v68);
    kaldi::WriteCompactLattice(&v69, 0, a2);
    if (quasar::gLogLevel >= 6)
    {
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Primary lattice: ", 17);
      std::stringbuf::str();
      if (SHIBYTE(v55) >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (SHIBYTE(v55) >= 0)
        v14 = HIBYTE(v55);
      else
        v14 = (uint64_t)v54;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v14);
      if (SHIBYTE(v55) < 0)
        operator delete(__p);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
    }
    *(_QWORD *)&v68 = *MEMORY[0x1E0DE4F50];
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v68 + *(_QWORD *)(v68 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v69 = v15;
    *((_QWORD *)&v69 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v74) < 0)
      operator delete(*((void **)&v73 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](v76);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v66);
  v65 = 0;
  if ((*(int (**)(uint64_t))(*(_QWORD *)*a3 + 160))(*a3) >= 1)
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, 0x40000, 0);
    v17 = *a3;
    if ((v16 & 0x40000) != 0)
    {
      v18 = *(_QWORD *)(v17 + 8);
      ++*(_DWORD *)(v18 + 56);
      v19 = v67;
      if (v67)
      {
        v20 = *(_DWORD *)(v67 + 56) - 1;
        *(_DWORD *)(v67 + 56) = v20;
        if (!v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      v67 = v18;
    }
    else
    {
      kaldi::quasar::DeterminizeCompactLattice(v17, (uint64_t)&v66);
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a3 + 64))(*a3, 0x10000000, 1) & 0x10000000) == 0)
      fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)&v66);
  }
  v21 = operator new();
  fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher(v21, (uint64_t)&v66, 0, 1);
  v22 = v65;
  v65 = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (quasar::gLogLevel >= 6)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v68);
    kaldi::WriteCompactLattice(&v69, 0, (uint64_t)&v66);
    if (quasar::gLogLevel >= 6)
    {
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Secondary lattice ", 18);
      v23 = (_QWORD *)std::ostream::operator<<();
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)": ", 2);
      std::stringbuf::str();
      if (SHIBYTE(v55) >= 0)
        v25 = &__p;
      else
        v25 = __p;
      if (SHIBYTE(v55) >= 0)
        v26 = HIBYTE(v55);
      else
        v26 = (uint64_t)v54;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      if (SHIBYTE(v55) < 0)
        operator delete(__p);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v77);
    }
    *(_QWORD *)&v68 = *MEMORY[0x1E0DE4F50];
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v68 + *(_QWORD *)(v68 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v69 = v27;
    *((_QWORD *)&v69 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v74) < 0)
      operator delete(*((void **)&v73 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](v76);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v63);
  v59 = vdup_n_s32(0x7F800000u);
  v61 = 0;
  v62 = 0;
  v60 = 0;
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2, (uint64_t)&v63, a4, 0, 0, (uint64_t *)&v59, -1, 0);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  v28 = *(_QWORD *)(v64 + 64);
  if (((*(_QWORD *)(v64 + 72) - v28) & 0x7FFFFFFF8) == 0 || (v29 = *(int *)(v64 + 88), (_DWORD)v29 == -1))
  {
    if (quasar::gLogLevel < 4)
    {
LABEL_70:
      v43 = 0;
      goto LABEL_71;
    }
LABEL_69:
    v75 = 0u;
    memset(v76, 0, 144);
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Primary lattice contains no paths.", 34);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v68);
    goto LABEL_70;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v28 + 8 * v29) + 56) - *(_QWORD *)(*(_QWORD *)(v28 + 8 * v29) + 48);
  if (!v30)
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_70;
    goto LABEL_69;
  }
  std::vector<std::vector<quasar::NBestToken<1ul>>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * (v30 >> 4));
  v31 = *(_QWORD *)(*(_QWORD *)(v64 + 64) + 8 * *(int *)(v64 + 88));
  v33 = *(_QWORD *)(v31 + 48);
  v32 = *(_QWORD *)(v31 + 56);
  if (v32 == v33)
    v34 = 0;
  else
    v34 = *(float32x2_t **)(v31 + 48);
  if (v32 != v33)
  {
    if ((unint64_t)((v32 - v33) / 48) <= 1)
      v35 = 1;
    else
      v35 = (v32 - v33) / 48;
    v36 = (void *)vdup_n_s32(0x7F800000u);
    while (1)
    {
      v37 = v65;
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState(v37, v39);
      quasar::NBestToken<1ul>::NBestToken(&v68);
      v58 = 0;
      memset(v57, 0, sizeof(v57));
      v40 = operator new(0x40uLL);
      v40[1] = &v68;
      *v40 = &unk_1E5D3DFB8;
      v40[2] = &v58;
      v40[3] = &v65;
      *((_DWORD *)v40 + 8) = a6;
      v40[5] = a7;
      *((_BYTE *)v40 + 48) = a8;
      v40[7] = v57;
      *((_QWORD *)&v78 + 1) = v40;
      __p = v36;
      v55 = 0;
      v56 = 0;
      v54 = 0;
      quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()((uint64_t)(v40 + 1), (float32x2_t *)&__p, v34);
      if (v54)
      {
        v55 = v54;
        operator delete(v54);
      }
      if (quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>((uint64_t)&v63, v34[5].u32[0], (uint64_t)&v77))std::vector<std::vector<quasar::NBestToken<1ul>>>::emplace_back<std::vector<quasar::NBestToken<1ul>>>(a5, (uint64_t)v57);
      v41 = (__int128 *)*((_QWORD *)&v78 + 1);
      if (*((__int128 **)&v78 + 1) == &v77)
        break;
      if (*((_QWORD *)&v78 + 1))
      {
        v42 = 5;
LABEL_61:
        (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
      }
      *(_QWORD *)&v77 = v57;
      std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      if ((_QWORD)v72)
      {
        *((_QWORD *)&v72 + 1) = v72;
        operator delete((void *)v72);
      }
      if ((_QWORD)v69)
      {
        *((_QWORD *)&v69 + 1) = v69;
        operator delete((void *)v69);
      }
      v34 += 6;
      if (!--v35)
        goto LABEL_67;
    }
    v41 = &v77;
    v42 = 4;
    goto LABEL_61;
  }
LABEL_67:
  v43 = 1;
LABEL_71:
  v63 = &unk_1E5D25800;
  v44 = v64;
  if (v64)
  {
    v45 = *(_DWORD *)(v64 + 56) - 1;
    *(_DWORD *)(v64 + 56) = v45;
    if (!v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  v46 = v65;
  v65 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v66 = &unk_1E5D25800;
  v47 = v67;
  if (v67)
  {
    v48 = *(_DWORD *)(v67 + 56) - 1;
    *(_DWORD *)(v67 + 56) = v48;
    if (!v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  return v43;
}

void sub_1ADADA5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,uint64_t a26,uint64_t a27,_DWORD *a28,char a29)
{
  int v30;
  int v31;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a29);
  if (a25)
  {
    v30 = a25[14] - 1;
    a25[14] = v30;
    if (!v30)
      (*(void (**)(_DWORD *))(*(_QWORD *)a25 + 8))(a25);
  }
  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 8))(a26);
  if (a28)
  {
    v31 = a28[14] - 1;
    a28[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)a28 + 8))(a28);
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<quasar::NBestToken<1ul>>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<quasar::NBestToken<1ul>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1ADADA864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::NBestToken<1ul>>>::emplace_back<std::vector<quasar::NBestToken<1ul>>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::NBestToken<1ul>>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADADA9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::NBestToken<1ul>::~NBestToken(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void quasar::ExtractFirstAndSecondPassAcousticCostLatticeFromWordHypLattice(quasar *this@<X0>, _QWORD *a2@<X8>)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  void *__p;
  _BYTE *v36;
  uint64_t v37;
  float v38[2];
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  void *v44[2];
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;

  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(a2);
  v5 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState((uint64_t)a2);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
  v6 = a2[1];
  *(_DWORD *)(v6 + 88) = v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  *(_QWORD *)(v6 + 8) = v7 & 0xCCFFFFF0007 | (((v7 >> 35) & 1) << 37) | *(_QWORD *)(v6 + 8) & 4;
  LODWORD(v6) = *(_DWORD *)(a2[1] + 88);
  v8 = *((_QWORD *)this + 1);
  v9 = (char *)operator new(0x10uLL);
  v10 = v9 + 16;
  v47 = v9 + 16;
  v48 = v9 + 16;
  *(_DWORD *)v9 = v6;
  *((_QWORD *)v9 + 1) = v8;
  v46 = v9;
  do
  {
    v13 = *((_DWORD *)v10 - 4);
    v11 = v10 - 16;
    v12 = v13;
    v14 = *((_QWORD *)v11 + 1);
    v47 = v11;
    if (*(_QWORD *)(v14 + 80))
    {
      v15 = v14 + 64;
      for (i = *(_QWORD *)(v14 + 72); i != v15; i = *(_QWORD *)(i + 8))
      {
        v17 = *(_QWORD *)(i + 16);
        v18 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState((uint64_t)a2);
        v19 = *(_QWORD *)(v17 + 256);
        *(float *)&v20 = *(double *)(v17 + 128);
        *(float *)&v21 = *(double *)(v17 + 200);
        v34 = __PAIR64__(v21, v20);
        v36 = 0;
        v37 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, 0, 0, 0);
        LODWORD(v38[0]) = v19;
        LODWORD(v38[1]) = v19;
        v39 = v34;
        v41 = 0;
        v42 = 0;
        v40 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, __p, (uint64_t)v36, (v36 - (_BYTE *)__p) >> 2);
        v43 = v18;
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
        fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc((_QWORD *)a2[1], v12, v38);
        v22 = v47;
        if (v47 >= v48)
        {
          v24 = (v47 - v46) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v26 = v48 - v46;
          if ((v48 - v46) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v48, v27);
          v30 = &v28[16 * v24];
          *(_DWORD *)v30 = v18;
          *((_QWORD *)v30 + 1) = *(_QWORD *)(v17 + 8);
          v32 = v46;
          v31 = v47;
          v33 = v30;
          if (v47 != v46)
          {
            do
            {
              *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
              v33 -= 16;
              v31 -= 16;
            }
            while (v31 != v32);
            v31 = v46;
          }
          v23 = v30 + 16;
          v46 = v33;
          v47 = v30 + 16;
          v48 = &v28[16 * v29];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_DWORD *)v47 = v18;
          *((_QWORD *)v22 + 1) = *(_QWORD *)(v17 + 8);
          v23 = v22 + 16;
        }
        v47 = v23;
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }
      }
    }
    else
    {
      *(_OWORD *)v44 = 0u;
      v45 = 0u;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFinal((uint64_t)a2, v12, (uint64_t *)v44);
      if (v44[1])
      {
        *(void **)&v45 = v44[1];
        operator delete(v44[1]);
      }
    }
    v10 = v47;
  }
  while (v46 != v47);
  fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a2);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
}

void sub_1ADADACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _QWORD *v21;
  uint64_t v22;
  void *v24;
  _DWORD *v25;
  int v26;

  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  *v21 = &unk_1E5D25800;
  v25 = (_DWORD *)v21[1];
  if (v25)
  {
    v26 = v25[14] - 1;
    v25[14] = v26;
    if (!v26)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *(_QWORD *)a1 = &unk_1E5D1BEA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), 0, 0, 0);
  *(_DWORD *)(a1 + 96) = -1;
  *(_BYTE *)(a1 + 106) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::MemoryPool((_QWORD *)(a1 + 112), 1);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    if (v7 == 1)
    {
      *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
    }
    else if (v7 != 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      *(_DWORD *)(a1 + 32) = 3;
      *(_BYTE *)(a1 + 106) = 1;
    }
  }
  return a1;
}

void sub_1ADADAEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  void **v19;
  quasar::Bitmap *v20;
  void *v22;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v18[14] = &unk_1E5D196E8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(v18 + 15);
  quasar::Bitmap::~Bitmap(v20);
  v22 = *v19;
  if (*v19)
  {
    v18[10] = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D196E8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D196E8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADADB010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C403BFD1AB0);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 106))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104))
    return a1 + 56;
  else
    return **(_QWORD **)(a1 + 24) + 48 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 104))
    *(_BYTE *)(result + 104) = 0;
  else
    ++*(_QWORD *)(*(_QWORD *)(result + 24) + 16);
  return result;
}

_QWORD *fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Final_@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 64) + 8 * a2);
  *a3 = *(_QWORD *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 2);
}

unint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Priority_(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 64) + 8 * a2) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 64) + 8 * a2) + 48)) >> 4);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D196E8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADADB1D4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Size()
{
  return 24;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A6A0;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADADB2B8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A6A0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Size()
{
  return 32;
}

_QWORD *fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(_QWORD *a1)
{
  uint64_t v2;
  quasar::Bitmap *v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1BEA8;
  v2 = a1[3];
  v3 = (quasar::Bitmap *)(a1 + 14);
  if (v2)
  {
    *(_QWORD *)(v2 + 24) = a1[21];
    a1[21] = v2;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[14] = &unk_1E5D196E8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::~MemoryArena(a1 + 15);
  quasar::Bitmap::~Bitmap(v3);
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D1BEA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 72), *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::MemoryPool((_QWORD *)(a1 + 112), 1);
  return a1;
}

void sub_1ADADB4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;
  int v5;
  int **v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v10;
  int v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  _DWORD *v21;

  *(_BYTE *)(a1 + 105) = 1;
  if (*(_BYTE *)(a1 + 106))
  {
    result = 0;
    *(_BYTE *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  result = a2 == 0;
  *(_BYTE *)(a1 + 104) = result;
  if (a2 == -1)
    v4 = 0;
  else
    v4 = a2;
  *(_DWORD *)(a1 + 40) = v4;
  v5 = *(_DWORD *)(a1 + 32);
  if (v4 < *(_DWORD *)(a1 + 36))
  {
    v6 = *(int ***)(a1 + 24);
    v7 = v6[1];
    if (v7)
    {
      v8 = 0;
      v9 = *v6;
      while (1)
      {
        v10 = v9 + 1;
        if (!v5)
          v10 = v9;
        v11 = *v10;
        v12 = v11 == v4;
        v13 = v11 <= v4 ? 0 : 7;
        if (v12)
          v13 = 1;
        if (v13)
          break;
        ++v8;
        v9 += 12;
        if (v7 == (int *)v8)
        {
          v8 = (unint64_t)v6[1];
          goto LABEL_34;
        }
      }
      if (v13 == 1)
      {
        v6[2] = (int *)v8;
        return 1;
      }
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v6 = *(int ***)(a1 + 24);
  v8 = 0;
  if (!v14)
  {
LABEL_34:
    v6[2] = (int *)v8;
    return result;
  }
  v15 = *v6;
  while (1)
  {
    v16 = (v8 + v14) >> 1;
    v17 = &v15[12 * v16];
    if (v5)
      ++v17;
    v18 = *v17;
    if (v18 <= v4)
      break;
    v14 = (v8 + v14) >> 1;
LABEL_29:
    if (v8 >= v14)
      goto LABEL_34;
  }
  if (v18 < v4)
  {
    v8 = v16 + 1;
    goto LABEL_29;
  }
  v6[2] = (int *)v16;
  v19 = 48 * ((v14 + v8) >> 1) - 48;
  v20 = v15;
  while (v16 > v8)
  {
    v6[2] = (int *)--v16;
    v21 = (int *)((char *)v15 + v19);
    if (v5)
      v21 = (int *)((char *)v20 + v19 + 4);
    else
      v20 = v15;
    v19 -= 48;
    if (*v21 != v4)
    {
      v6[2] = (int *)(v16 + 1);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Done(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _DWORD *v4;

  if (*(_BYTE *)(a1 + 104))
    return 0;
  v2 = *(_QWORD **)(a1 + 24);
  v3 = v2[2];
  if (v3 >= v2[1])
    return 1;
  if (!*(_BYTE *)(a1 + 105))
    return 0;
  v4 = (_DWORD *)(*v2 + 48 * v3);
  if (*(_DWORD *)(a1 + 32))
    ++v4;
  return *v4 != *(_DWORD *)(a1 + 40);
}

uint64_t std::vector<std::vector<quasar::NBestToken<0ul>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<0ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<0ul>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::NBestToken<0ul>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::NBestToken<0ul>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 32 * a2;
  v4 = a1[1];
  if (v4 >= a2 << 7)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

uint64_t quasar::NBestToken<0ul>::NBestToken(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), 0, 0, 0);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

void sub_1ADADBA0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E5D3DF60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_1E5D3DF60;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t **a3)
{
  return quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(a1 + 8, a2, *a3);
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target_type()
{
}

uint64_t quasar::CalculateJoinedNBest<0ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,0ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<0ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  uint64_t v26;
  __int32 v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v4 = *(char **)a1;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a1 + 40);
  v8 = *(uint64_t **)(a1 + 48);
  if (a3)
  {
    if (a3->i32[1])
    {
      v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 != -1)
      {
        *((_QWORD *)v4 + 6) = v5;
        if (v10 == v6)
        {
          v11 = v8[1];
          if (*v8 != v11)
            *(_QWORD *)(v11 - 40) = v5;
          *(_DWORD *)v4 = -1;
          if (!v7)
            *((_QWORD *)v4 + 1) = 0;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
          *((_QWORD *)v4 + 5) = 0;
          *((_QWORD *)v4 + 6) = 0;
        }
        else
        {
          v15 = v8[1];
          if (v15 >= v8[2])
          {
            v16 = std::vector<quasar::NBestToken<0ul>>::__emplace_back_slow_path<quasar::NBestToken<0ul>>(v8, (int *)v4);
          }
          else
          {
            quasar::NBestToken<0ul>::NBestToken(v8[1], (int *)v4);
            v16 = v15 + 88;
            v8[1] = v15 + 88;
          }
          v8[1] = v16;
          *(_DWORD *)v4 = -1;
          *((_QWORD *)v4 + 1) = 0;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 40) = 0u;
        }
      }
      v4 = *(char **)a1;
      *(_DWORD *)v4 = a3->i32[1];
      *((_QWORD *)v4 + 5) = **(_QWORD **)(a1 + 8);
    }
    fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v4 + 1, a3 + 1, (int32x2_t *)__p);
    v19 = *(char **)a1;
    v20 = *(void ***)a1;
    v20[1] = __p[0];
    if (v20 + 1 != __p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v19 + 16, (char *)__p[1], v35, (uint64_t)(v35 - (unint64_t)__p[1]) >> 2);
    if (__p[1])
    {
      *(void **)&v35 = __p[1];
      operator delete(__p[1]);
    }
    v21 = *(_QWORD *)(a1 + 32);
    if (!v21)
      goto LABEL_43;
    v24 = *(_QWORD *)(v21 + 8);
    v22 = v21 + 8;
    v23 = v24;
    if (!v24)
      goto LABEL_43;
    v25 = a3->i32[1];
    v26 = v22;
    do
    {
      v27 = *(_DWORD *)(v23 + 28);
      v28 = v27 < v25;
      if (v27 >= v25)
        v29 = (uint64_t *)v23;
      else
        v29 = (uint64_t *)(v23 + 8);
      if (!v28)
        v26 = v23;
      v23 = *v29;
    }
    while (*v29);
    if (v26 != v22 && v25 >= *(_DWORD *)(v26 + 28))
      v30 = 0;
    else
LABEL_43:
      v30 = (uint64_t)(*(_QWORD *)&a3[3] - *(_QWORD *)&a3[2]) >> 2;
    **(_QWORD **)(a1 + 8) += v30;
    if (quasar::gLogLevel >= 6)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to state ", 32);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" with label ", 12);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)".", 1);
LABEL_51:
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
  }
  else
  {
    fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)v4 + 1, a2, (int32x2_t *)__p);
    v12 = *(char **)a1;
    v13 = *(void ***)a1;
    v13[1] = __p[0];
    if (v13 + 1 != __p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v12 + 16, (char *)__p[1], v35, (uint64_t)(v35 - (unint64_t)__p[1]) >> 2);
    if (__p[1])
    {
      *(void **)&v35 = __p[1];
      operator delete(__p[1]);
    }
    if (**(_DWORD **)a1 != -1)
    {
      *((_QWORD *)v4 + 6) = v5;
      if (*(_DWORD *)v4 == v6)
      {
        v14 = v8[1];
        if (*v8 != v14)
          *(_QWORD *)(v14 - 40) = v5;
        *(_DWORD *)v4 = -1;
        if (!v7)
          *((_QWORD *)v4 + 1) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
        *((_QWORD *)v4 + 5) = 0;
        *((_QWORD *)v4 + 6) = 0;
      }
      else
      {
        v17 = v8[1];
        if (v17 >= v8[2])
        {
          v18 = std::vector<quasar::NBestToken<0ul>>::__emplace_back_slow_path<quasar::NBestToken<0ul>>(v8, (int *)v4);
        }
        else
        {
          quasar::NBestToken<0ul>::NBestToken(v8[1], (int *)v4);
          v18 = v17 + 88;
          v8[1] = v17 + 88;
        }
        v8[1] = v18;
        *(_DWORD *)v4 = -1;
        *((_QWORD *)v4 + 1) = 0;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4 + 16, 0, 0, 0);
        *(_OWORD *)(v4 + 72) = 0u;
        *(_OWORD *)(v4 + 56) = 0u;
        *(_OWORD *)(v4 + 40) = 0u;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to final state.", 38);
      goto LABEL_51;
    }
  }
  return 1;
}

void sub_1ADADBF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::NBestToken<0ul>>::__emplace_back_slow_path<quasar::NBestToken<0ul>>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[88 * v4];
  v16 = &v10[88 * v9];
  quasar::NBestToken<0ul>::NBestToken((uint64_t)v14, a2);
  v15 = v14 + 88;
  std::vector<quasar::NBestToken<0ul>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::NBestToken<0ul>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADADC06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::NBestToken<0ul>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::NBestToken<0ul>::NBestToken(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *a2;
  *a2 = -1;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (char *)(a2 + 4);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 16), *((const void **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 2);
  *((_QWORD *)a2 + 1) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, 0, 0, 0);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 14);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 18);
  *(_OWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1ADADC12C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::NBestToken<0ul>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>,std::reverse_iterator<quasar::NBestToken<0ul>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 22;
      quasar::NBestToken<0ul>::NBestToken(v7 - 88, v9);
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADADC260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<0ul>>,std::reverse_iterator<quasar::NBestToken<0ul>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 88;
  }
}

uint64_t std::__split_buffer<quasar::NBestToken<0ul>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::NBestToken<0ul>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::NBestToken<0ul>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 88;
    v5 = *(void **)(v2 - 72);
    if (v5)
    {
      *(_QWORD *)(v2 - 64) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
}

uint64_t std::vector<std::vector<quasar::NBestToken<1ul>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::NBestToken<1ul>>>,std::reverse_iterator<std::vector<quasar::NBestToken<1ul>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::NBestToken<1ul>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::NBestToken<1ul>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *quasar::NBestToken<1ul>::NBestToken(_QWORD *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  quasar::NBestToken<1ul>::clear((uint64_t)a1, 0, 0);
  return a1;
}

void sub_1ADADC5D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 72) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

void quasar::NBestToken<1ul>::clear(uint64_t a1, char a2, int a3)
{
  uint64_t v5;
  const void *v6;
  void *__p;
  void *v8;
  uint64_t v9;

  *(_DWORD *)a1 = -1;
  if ((a2 & 1) == 0)
    *(_QWORD *)(a1 + 8) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), 0, 0, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (a3)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 64), 0, 0, 0);
  }
  else
  {
    v6 = *(const void **)(a1 + 64);
    v5 = a1 + 64;
    v8 = 0;
    v9 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v6, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - (_QWORD)v6) >> 2);
    *(_QWORD *)(v5 - 8) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v5, 0, 0, 0);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADADC6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E5D3DFB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &unk_1E5D3DFB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t **a3)
{
  return quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(a1 + 8, a2, *a3);
}

uint64_t std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1},std::allocator<quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}>,BOOL ()(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)>::target_type()
{
}

uint64_t quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t *v4;
  float32x2_t v5;
  __int32 v7;
  float32x2_t *v8;
  float32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  float32x2_t *v22;
  float32x2_t *v23;
  _QWORD *v25;
  _QWORD *v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  BOOL v44[8];
  float32x2_t v45;
  int v46;
  char v47;
  uint64_t v48;
  float32x2_t *v49;
  uint64_t v50;

  v44[0] = a3 == 0;
  v4 = *(float32x2_t **)a1;
  v5 = **(float32x2_t **)(a1 + 8);
  v45 = v5;
  v46 = *(_DWORD *)(a1 + 24);
  v47 = *(_BYTE *)(a1 + 40);
  v48 = *(_QWORD *)(a1 + 16);
  v49 = v4;
  v50 = *(_QWORD *)(a1 + 48);
  if (a3)
  {
    v7 = a3->i32[1];
    if (!v7)
    {
LABEL_7:
      fst::Times<fst::LatticeWeightTpl<float>,int>(v4 + 1, a3 + 1, (int32x2_t *)__p);
      v8 = *(float32x2_t **)a1;
      v9 = *(float32x2_t **)a1;
      v9[1] = (float32x2_t)__p[0];
      if (&v9[1] != (float32x2_t *)__p)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v8[2], (char *)__p[1], v28, (uint64_t)(v28 - (unint64_t)__p[1]) >> 2);
      if (__p[1])
      {
        *(void **)&v28 = __p[1];
        operator delete(__p[1]);
      }
      v10 = *(_QWORD *)(a1 + 32);
      if (!v10)
        goto LABEL_22;
      v13 = *(_QWORD *)(v10 + 8);
      v11 = v10 + 8;
      v12 = v13;
      if (!v13)
        goto LABEL_22;
      v14 = a3->i32[1];
      v15 = v11;
      do
      {
        v16 = *(_DWORD *)(v12 + 28);
        v17 = v16 < v14;
        if (v16 >= v14)
          v18 = (uint64_t *)v12;
        else
          v18 = (uint64_t *)(v12 + 8);
        if (!v17)
          v15 = v12;
        v12 = *v18;
      }
      while (*v18);
      if (v15 != v11 && v14 >= *(_DWORD *)(v15 + 28))
        v19 = 0;
      else
LABEL_22:
        v19 = (uint64_t)(*(_QWORD *)&a3[3] - *(_QWORD *)&a3[2]) >> 2;
      **(_QWORD **)(a1 + 8) += v19;
      if (quasar::gLogLevel < 6)
        return 1;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to state ", 32);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" with label ", 12);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
      goto LABEL_33;
    }
    if (v4->i32[0] == -1)
    {
LABEL_6:
      v4->i32[0] = v7;
      v4[5] = v5;
      goto LABEL_7;
    }
    if (quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator() const(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)::{lambda(void)#1}::operator()((uint64_t)v44))
    {
      v7 = a3->i32[1];
      v4 = *(float32x2_t **)a1;
      v5 = **(float32x2_t **)(a1 + 8);
      goto LABEL_6;
    }
    if (quasar::gLogLevel >= 2)
      goto LABEL_38;
  }
  else
  {
    fst::Times<fst::LatticeWeightTpl<float>,int>(v4 + 1, a2, (int32x2_t *)__p);
    v22 = *(float32x2_t **)a1;
    v23 = *(float32x2_t **)a1;
    v23[1] = (float32x2_t)__p[0];
    if (&v23[1] != (float32x2_t *)__p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v22[2], (char *)__p[1], v28, (uint64_t)(v28 - (unint64_t)__p[1]) >> 2);
    if (__p[1])
    {
      *(void **)&v28 = __p[1];
      operator delete(__p[1]);
    }
    if (**(_DWORD **)a1 == -1
      || quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator() const(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)::{lambda(void)#1}::operator()((uint64_t)v44))
    {
      if (quasar::gLogLevel < 6)
        return 1;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Primary lattice moving to final state.", 38);
LABEL_33:
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      return 1;
    }
    if (quasar::gLogLevel >= 2)
    {
LABEL_38:
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to process ", 18);
      v26 = quasar::operator<<<1ul>(v25, *(_QWORD *)a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; skipping hypothesis.",
        22);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
  }
  return 0;
}

void sub_1ADADCB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::CalculateJoinedNBest<1ul>::operator()(fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const&,std::array<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> const*,1ul> const&,unsigned long,std::vector<std::vector<quasar::NBestToken<1ul>>> *,int,std::set<int> const*,BOOL)::{lambda(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)#1}::operator() const(fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int> const&,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const*)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  float32x2_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  float32x2_t *v10;
  int32x2_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float32x2_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  float32x2_t v25;
  void *v26;
  void *v27;
  int32x2_t v28;
  void *__p;
  _BYTE *v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  int v49;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(a1 + 8);
  v3 = **(_QWORD **)(a1 + 24);
  v4 = fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Find(v3, *(_DWORD *)v2);
  if (v4)
  {
    if (*(_BYTE *)(v3 + 104))
      v5 = (float32x2_t *)(v3 + 56);
    else
      v5 = (float32x2_t *)(**(_QWORD **)(v3 + 24) + 48 * *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16));
    if (*(_BYTE *)a1)
    {
      if (quasar::gLogLevel >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Secondary FST ", 14);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" moving to final state.", 23);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 64) + 8 * v5[5].i32[0]);
      v31[0] = *(void **)v9;
      v32 = 0uLL;
      v31[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v31[1], *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2);
      v25.i32[0] = HIDWORD(v31[0]);
      v28.i32[0] = (__int32)v31[0];
      v49 = 2139095040;
      v48 = 2139095040;
      v10 = *(float32x2_t **)(a1 + 32);
      fst::Times<fst::LatticeWeightTpl<float>,int>(v5 + 1, (float32x2_t *)v31, (int32x2_t *)&v25);
      fst::Times<fst::LatticeWeightTpl<float>,int>(v10 + 7, &v25, &v28);
      v11 = *(int32x2_t **)(a1 + 32);
      v11[7] = v28;
      if (&v11[7] != &v28)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v11[8], (char *)__p, (uint64_t)v30, (v30 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      if (v31[1])
      {
        *(void **)&v32 = v31[1];
        operator delete(v31[1]);
      }
    }
    else
    {
      if (quasar::gLogLevel >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Secondary FST ", 14);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" moving to state ", 17);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
      }
      fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(*(_QWORD *)(a1 + 32) + 56), v5 + 1, (int32x2_t *)v31);
      v14 = *(_QWORD *)(a1 + 32);
      *(void **)(v14 + 56) = v31[0];
      if ((void **)(v14 + 56) != v31)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 + 64), (char *)v31[1], v32, (uint64_t)(v32 - (unint64_t)v31[1]) >> 2);
      if (v31[1])
      {
        *(void **)&v32 = v31[1];
        operator delete(v31[1]);
      }
      fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState(v3, v5[5].i32[0]);
    }
    v15 = *(float32x2_t **)(a1 + 32);
    v16 = *(_QWORD **)(a1 + 40);
    if (v15->i32[0] == *(_DWORD *)(a1 + 16))
    {
      v17 = v16[1];
      if (*v16 != v17)
      {
        *(float32x2_t *)(v17 - 40) = v15[6];
        if (*(_BYTE *)a1)
        {
          fst::Times<fst::LatticeWeightTpl<float>,int>((float32x2_t *)(v17 - 32), v15 + 7, (int32x2_t *)v31);
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          *(void **)(v18 - 32) = v31[0];
          if ((void **)(v18 - 32) != v31)
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v18 - 24), (char *)v31[1], v32, (uint64_t)(v32 - (unint64_t)v31[1]) >> 2);
          if (v31[1])
          {
            *(void **)&v32 = v31[1];
            operator delete(v31[1]);
          }
          v15 = *(float32x2_t **)(a1 + 32);
        }
      }
      v19 = (uint64_t)v15;
      v20 = *(_BYTE *)(a1 + 20);
      v21 = 1;
    }
    else
    {
      v22 = v16[1];
      if (v22 >= v16[2])
      {
        v23 = std::vector<quasar::NBestToken<1ul>>::__emplace_back_slow_path<quasar::NBestToken<1ul>>(*(uint64_t **)(a1 + 40), (int *)v15);
      }
      else
      {
        quasar::NBestToken<1ul>::NBestToken(v16[1], (int *)v15);
        v23 = v22 + 88;
        v16[1] = v22 + 88;
      }
      v16[1] = v23;
      v19 = *(_QWORD *)(a1 + 32);
      v20 = 0;
      v21 = 0;
    }
    quasar::NBestToken<1ul>::clear(v19, v20, v21);
  }
  else if (quasar::gLogLevel >= 2)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unable to find arc with label ", 30);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" in secondary FST ", 18);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v31);
  }
  return v4;
}

void sub_1ADADD040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::operator<<<1ul>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NBestToken(", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"labelId=", 8);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"weight=", 7);
  v8 = fst::operator<<<fst::LatticeWeightTpl<float>,int>(v7, a2 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"startFrame=", 11);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"endFrame=", 9);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"weights=[", 9);
  v13 = fst::operator<<<fst::LatticeWeightTpl<float>,int>(a1, a2 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"])", 2);
  return a1;
}

uint64_t std::vector<quasar::NBestToken<1ul>>::__emplace_back_slow_path<quasar::NBestToken<1ul>>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[88 * v4];
  v16 = &v10[88 * v9];
  quasar::NBestToken<1ul>::NBestToken((uint64_t)v14, a2);
  v15 = v14 + 88;
  std::vector<quasar::NBestToken<1ul>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::NBestToken<1ul>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADADD2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::NBestToken<1ul>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::NBestToken<1ul>::NBestToken(uint64_t a1, int *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *a2 = -1;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (char *)(a2 + 4);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 16), *((const void **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 2);
  *((_QWORD *)a2 + 1) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, 0, 0, 0);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v8 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 64), *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 2);
  return a1;
}

void sub_1ADADD3B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::NBestToken<1ul>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>,std::reverse_iterator<quasar::NBestToken<1ul>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 22;
      quasar::NBestToken<1ul>::NBestToken(v7 - 88, v9);
      v7 = *((_QWORD *)&v15 + 1) - 88;
      *((_QWORD *)&v15 + 1) -= 88;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADADD4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::NBestToken<1ul>>,std::reverse_iterator<quasar::NBestToken<1ul>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100](v3, v1);
      v1 += 11;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::NBestToken<1ul>>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::NBestToken<1ul>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::NBestToken<1ul>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::NBestToken<1ul>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 88));
  }
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

void **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  void **result;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void **v11;
  __int128 v12;

  result = (void **)a2;
  if (a1 != a2)
  {
    do
    {
      v7 = a1 + 24;
      if (a1 + 24 == a2)
        return (void **)a2;
      v8 = std::equal_to<std::string>::operator()[abi:ne180100](a3, a1, a1 + 24);
      a1 = v7;
    }
    while (!v8);
    v9 = v7 + 24;
    v10 = v7 - 24;
    if (v9 == a2)
    {
      v11 = (void **)v10;
    }
    else
    {
      do
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](a3, v10, v9) & 1) != 0)
        {
          v11 = (void **)v10;
        }
        else
        {
          v11 = (void **)(v10 + 24);
          if ((char)v10[47] < 0)
            operator delete(*v11);
          v12 = *(_OWORD *)v9;
          *((_QWORD *)v10 + 5) = *((_QWORD *)v9 + 2);
          *(_OWORD *)v11 = v12;
          v9[23] = 0;
          *v9 = 0;
          v10 += 24;
        }
        v9 += 24;
      }
      while (v9 != a2);
    }
    return v11 + 3;
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,int &,void>@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<int &,std::allocator<quasar::RecogAudioBuffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADADD7A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<int &,std::allocator<quasar::RecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42F00;
  a1[1] = 0;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,int &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADADD804(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,int &>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void *__p[2];
  char v11;

  v4 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v8);
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v4, 120, 0, 1, (__int128 *)__p, &v8, 120, 0, 4000);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_1ADADD8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::MultiAudioBuffer,std::allocator<quasar::MultiAudioBuffer>,std::shared_ptr<quasar::RecogAudioBuffer>,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogAudioBuffer>,std::allocator<quasar::MultiAudioBuffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADADD944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogAudioBuffer>,std::allocator<quasar::MultiAudioBuffer>,0>(_QWORD *a1, __int128 *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42E90;
  a1[1] = 0;
  std::allocator<quasar::MultiAudioBuffer>::construct[abi:ne180100]<quasar::MultiAudioBuffer,std::shared_ptr<quasar::RecogAudioBuffer>>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADADD9A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::MultiAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::MultiAudioBuffer>::construct[abi:ne180100]<quasar::MultiAudioBuffer,std::shared_ptr<quasar::RecogAudioBuffer>>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  quasar::MultiAudioBuffer::MultiAudioBuffer(a2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1ADADDA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::GenericPhraseBook::GenericPhraseBook(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E5D364F0;
  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  if (v4)
    quasar::RegularExpressionReplacer::read((uint64_t *)(a1 + 16));
  return a1;
}

void sub_1ADADDB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::GenericPhraseBook::lookup(void (***a1)(std::pair<std::string, std::string> **__return_ptr)@<X0>, int a2@<W2>, int a3@<W3>, std::vector<std::pair<std::string, std::string>> *a4@<X8>)
{
  std::pair<std::string, std::string> *v8;
  std::pair<std::string, std::string> *v9;
  std::pair<std::string, std::string> *v10;
  std::pair<std::string, std::string> *v11;
  std::pair<std::string, std::string> **v12;

  (**a1)(&v9);
  v8 = v10;
  if (!a2 || (v8 = v9, v9 == v10))
  {
    a4->__begin_ = v9;
    a4->__end_ = v8;
    a4->__end_cap_.__value_ = v11;
    v10 = 0;
    v11 = 0;
    v9 = 0;
  }
  else
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
    quasar::GenericPhraseBook::filterPhraseBookEntries((uint64_t)a1, (uint64_t)&v9, a4, a3);
  }
  v12 = &v9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1ADADDBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::GenericPhraseBook::filterPhraseBookEntries(uint64_t a1, uint64_t a2, std::vector<std::pair<std::string, std::string>> *a3, int a4)
{
  std::string *v6;
  _BOOL4 v10;
  std::string *v11;
  std::string *v12;
  int v13;
  std::string::size_type size;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  char v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  const void **v28;
  __int128 *v29;
  std::vector<std::string>::pointer end;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::string *v38;
  uint64_t *v39;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v41;
  unint64_t v42;
  uint64_t v43;
  std::string *p_first;
  __int128 *v45;
  __int128 *v46;
  _BYTE __v[48];
  void *__p[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;
  std::string v65;
  std::string v66;
  __int128 v67;
  uint64_t *v68;
  _QWORD *v69[2];
  std::vector<std::string> v70;
  uint64_t *v71;
  _QWORD *v72[3];

  v72[0] = 0;
  v72[1] = 0;
  v71 = (uint64_t *)v72;
  memset(&v70, 0, sizeof(v70));
  v69[0] = 0;
  v69[1] = 0;
  v68 = (uint64_t *)v69;
  v6 = *(std::string **)a2;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)"source";
    v66.__r_.__value_.__l.__size_ = 6;
    quasar::GenericPhraseBook::getMetaForKey((uint64_t)&v66, (uint64_t)v6, (std::string *)__v);
    if ((__v[23] & 0x80000000) != 0)
    {
      if (*(_QWORD *)&__v[8] != 7)
      {
        operator delete(*(void **)__v);
LABEL_103:
        if (a3 != (std::vector<std::pair<std::string, std::string>> *)a2)
          std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a3, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
        goto LABEL_105;
      }
      v10 = **(_DWORD **)__v != 1685221239 || *(_DWORD *)(*(_QWORD *)__v + 3) != 1952804452;
      operator delete(*(void **)__v);
      if (v10)
        goto LABEL_103;
    }
    else
    {
      if (__v[23] != 7)
        goto LABEL_103;
      if (*(_DWORD *)__v != 1685221239 || *(_DWORD *)&__v[3] != 1952804452)
        goto LABEL_103;
    }
    v11 = *(std::string **)a2;
    v12 = *(std::string **)(a2 + 8);
    if (*(std::string **)a2 != v12)
    {
      v13 = 0;
      while (1)
      {
        if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (std::string *)v11->__r_.__value_.__r.__words[0];
          size = v11->__r_.__value_.__l.__size_;
        }
        else
        {
          size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
          v15 = v11;
        }
        *(_QWORD *)&v67 = v15;
        *((_QWORD *)&v67 + 1) = size;
        if (std::__tree<std::string_view>::__count_unique<std::string_view>((uint64_t)&v71, (uint64_t)&v67))
          goto LABEL_87;
        std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view const&>(&v71, (uint64_t)&v67, &v67);
        *(_QWORD *)__v = "syn";
        *(_QWORD *)&__v[8] = 3;
        quasar::GenericPhraseBook::getMetaForKey((uint64_t)__v, (uint64_t)v11, &v66);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = v66.__r_.__value_.__l.__size_;
          if (!v66.__r_.__value_.__l.__size_)
          {
LABEL_33:
            if (quasar::gLogLevel >= 2)
            {
              v60 = 0u;
              v61 = 0u;
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              v50 = 0u;
              v51 = 0u;
              *(_OWORD *)__p = 0u;
              v49 = 0u;
              memset(__v, 0, sizeof(__v));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
              v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"found entry without 'syn' field in wordnet phrasebook for '", 59);
              v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v67, *((uint64_t *)&v67 + 1));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"'", 1);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__v);
            }
LABEL_82:
            v20 = 0;
            goto LABEL_83;
          }
          memset(&v65, 0, sizeof(v65));
          v63 = 0uLL;
          v64 = 0;
          v18 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        else
        {
          v17 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          if (!*((_BYTE *)&v66.__r_.__value_.__s + 23))
            goto LABEL_33;
          memset(&v65, 0, sizeof(v65));
          v63 = 0uLL;
          v18 = &v66;
          v64 = 0;
        }
        *(_QWORD *)__v = v18;
        *(_QWORD *)&__v[8] = v17;
        quasar::GenericPhraseBook::parseSynsetName(v16, (uint64_t *)__v, (uint64_t)&v65, (uint64_t)&v63);
        if (v69 == (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v68, (const void **)&v65.__r_.__value_.__l.__data_))break;
        if ((SHIBYTE(v64) & 0x80000000) == 0)
        {
          if (!HIBYTE(v64))
          {
            v19 = 0;
            v20 = 3;
            goto LABEL_80;
          }
LABEL_39:
          *(_QWORD *)__v = &v65;
          v23 = std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v68, (const void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__v)[7];
          v24 = *(unsigned __int8 *)(v23 + 71);
          v25 = *(_QWORD *)(v23 + 56);
          if ((v24 & 0x80u) == 0)
            v26 = *(unsigned __int8 *)(v23 + 71);
          else
            v26 = *(_QWORD *)(v23 + 56);
          v27 = HIBYTE(v64);
          if (v64 < 0)
            v27 = *((_QWORD *)&v63 + 1);
          if (v26 == v27)
          {
            v28 = (const void **)(v23 + 48);
            if (v64 >= 0)
              v29 = &v63;
            else
              v29 = (__int128 *)v63;
            if ((v24 & 0x80) != 0)
            {
              if (memcmp(*v28, v29, v25))
                goto LABEL_56;
            }
            else if ((_DWORD)v24)
            {
              while (*(unsigned __int8 *)v28 == *(unsigned __int8 *)v29)
              {
                v28 = (const void **)((char *)v28 + 1);
                v29 = (__int128 *)((char *)v29 + 1);
                if (!--v24)
                  goto LABEL_71;
              }
              goto LABEL_56;
            }
LABEL_71:
            *(_QWORD *)__v = &v65;
            v39 = std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v68, (const void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__v);
            std::pair<std::pair<std::string,std::string>,std::string>::pair[abi:ne180100]<std::pair<std::string,std::string> const&,std::string&,0>((std::string *)__v, (__int128 *)v11, &v63);
            std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](v39 + 7, (__int128 *)__v);
            if (SBYTE7(v49) < 0)
              operator delete(__p[0]);
            if ((__v[47] & 0x80000000) != 0)
              operator delete(*(void **)&__v[24]);
            if ((__v[23] & 0x80000000) != 0)
              operator delete(*(void **)__v);
            v20 = 0;
            ++v13;
            v19 = 1;
          }
          else
          {
LABEL_56:
            v19 = 0;
            v20 = 3;
          }
          goto LABEL_78;
        }
        if (*((_QWORD *)&v63 + 1))
          goto LABEL_39;
        v19 = 0;
        v20 = 3;
LABEL_79:
        operator delete((void *)v63);
LABEL_80:
        if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if ((v19 & 1) == 0)
            goto LABEL_83;
          goto LABEL_82;
        }
        operator delete(v65.__r_.__value_.__l.__data_);
        if ((v19 & 1) != 0)
          goto LABEL_82;
LABEL_83:
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        if (v20 != 3 && v20)
          goto LABEL_91;
LABEL_87:
        v11 += 2;
        if (v11 == v12)
          goto LABEL_91;
      }
      if (v13 < a4)
      {
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v62, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
        else
          v62 = v65;
        end = v70.__end_;
        if (v70.__end_ >= v70.__end_cap_.__value_)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
          v33 = v32 + 1;
          if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v33)
            v33 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555)
            v34 = 0xAAAAAAAAAAAAAAALL;
          else
            v34 = v33;
          *(_QWORD *)&__v[32] = &v70.__end_cap_;
          if (v34)
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v70.__end_cap_, v34);
          else
            v35 = 0;
          v36 = &v35[24 * v32];
          *(_QWORD *)__v = v35;
          *(_QWORD *)&__v[8] = v36;
          *(_QWORD *)&__v[24] = &v35[24 * v34];
          v37 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          *((_QWORD *)v36 + 2) = *((_QWORD *)&v62.__r_.__value_.__l + 2);
          *(_OWORD *)v36 = v37;
          memset(&v62, 0, sizeof(v62));
          *(_QWORD *)&__v[16] = v36 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(&v70, (std::__split_buffer<std::string> *)__v);
          v38 = v70.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
          v70.__end_ = v38;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
        }
        else
        {
          v31 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          v70.__end_->__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v31;
          v70.__end_ = end + 1;
        }
        goto LABEL_71;
      }
      v19 = 0;
      v20 = 2;
LABEL_78:
      if ((SHIBYTE(v64) & 0x80000000) == 0)
        goto LABEL_80;
      goto LABEL_79;
    }
  }
LABEL_91:
  begin = v70.__begin_;
  v41 = v70.__end_;
  if (v70.__begin_ != v70.__end_)
  {
    v42 = a4;
    do
    {
      v43 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v68, (const void **)&begin->__r_.__value_.__l.__data_);
      p_first = &a3->__end_->first;
      v45 = *(__int128 **)(v43 + 56);
      v46 = *(__int128 **)(v43 + 64);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)p_first - (char *)a3->__begin_) >> 4)
         - 0x71C71C71C71C71C7 * (((char *)v46 - (char *)v45) >> 3) > v42)
        break;
      while (v45 != v46)
      {
        if ((std::pair<std::string, std::string> *)p_first >= a3->__end_cap_.__value_)
        {
          p_first = (std::string *)std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string> const&>((uint64_t *)a3, v45);
        }
        else
        {
          std::pair<std::string,std::string>::pair[abi:ne180100](p_first, v45);
          p_first += 2;
          a3->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)p_first;
        }
        a3->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)p_first;
        v45 = (__int128 *)((char *)v45 + 72);
      }
      ++begin;
    }
    while (begin != v41);
  }
LABEL_105:
  std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy((uint64_t)&v68, v69[0]);
  *(_QWORD *)__v = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  std::__tree<int>::destroy((uint64_t)&v71, v72[0]);
}

void sub_1ADADE244(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::wstring> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__pa,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (a53 < 0)
    operator delete(__pa);
  if (*(char *)(v53 - 225) < 0)
    operator delete(*(void **)(v53 - 248));
  if (*(char *)(v53 - 201) < 0)
    operator delete(*(void **)(v53 - 224));
  if (*(char *)(v53 - 177) < 0)
    operator delete(*(void **)(v53 - 200));
  std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(v53 - 160, *(_QWORD **)(v53 - 152));
  *(_QWORD *)(v53 - 160) = v53 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  std::__tree<int>::destroy(v53 - 112, *(_QWORD **)(v53 - 104));
  _Unwind_Resume(a1);
}

double quasar::GenericPhraseBook::normalizeKey@<D0>(void *__src@<X1>, size_t __len@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  void *v8;
  size_t v9;
  size_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *p_str;
  std::string::size_type size;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::string __str;
  char v38;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a4 + 8) = __len;
    *(_QWORD *)(a4 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a4 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a4 + 23) = __len;
  v8 = (void *)a4;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  if (!*(_BYTE *)(a3 + 8))
  {
    quasar::utf8::convertToLowerCase((char *)__src, __len, (uint64_t)&__str);
    if (!v38)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unable to convert key: '", 24);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__src, __len);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"' to the lower case: ", 21);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_str, size);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v20);
    }
    std::string::operator=((std::string *)a4, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = (uint64_t *)(a3 + 16);
  if (v12 != v13)
  {
    quasar::RegularExpressionReplacer::apply(v14, a4, (std::string *)&v20);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    result = *(double *)&v20;
    *(_OWORD *)a4 = v20;
    *(_QWORD *)(a4 + 16) = v21;
  }
  return result;
}

void sub_1ADADE504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 73) < 0)
    operator delete(*(void **)(v2 - 96));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double quasar::GenericPhraseBook::parseSynsetName(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  size_t v5;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  const void *v14;
  __int128 *v15;
  _QWORD *v16;
  _QWORD *v17;
  double result;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v5 = a2[1];
  if (v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = (_BYTE *)*a2;
    do
    {
      if (v10[v8] == 46)
        ++v9;
      ++v8;
    }
    while (v5 != v8);
    if (v9 == 2)
    {
      if (v5 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v5 >= 0x17)
        {
          v27 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v5 | 7) != 0x17)
            v27 = v5 | 7;
          v28 = v27 + 1;
          v19 = (__int128 *)operator new(v27 + 1);
          *((_QWORD *)&v31 + 1) = v5;
          *(_QWORD *)&v32 = v28 | 0x8000000000000000;
          *(_QWORD *)&v31 = v19;
        }
        else
        {
          BYTE7(v32) = a2[1];
          v19 = &v31;
        }
        memmove(v19, v10, v5);
        *((_BYTE *)v19 + v5) = 0;
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(_OWORD *)a3 = v31;
        *(_QWORD *)(a3 + 16) = v32;
        JUMPOUT(0x1AF44C914);
      }
      goto LABEL_45;
    }
    if (v9 == 3)
    {
      v11 = std::string_view::find_last_of[abi:ne180100](a2, ".", 0xFFFFFFFFFFFFFFFFLL);
      if (a2[1] >= v11)
        v12 = v11;
      else
        v12 = a2[1];
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_45;
      v13 = v11;
      v14 = (const void *)*a2;
      if (v12 >= 0x17)
      {
        v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v20 = v12 | 7;
        v21 = v20 + 1;
        v15 = (__int128 *)operator new(v20 + 1);
        *((_QWORD *)&v31 + 1) = v12;
        *(_QWORD *)&v32 = v21 | 0x8000000000000000;
        *(_QWORD *)&v31 = v15;
      }
      else
      {
        BYTE7(v32) = v12;
        v15 = &v31;
        if (!v12)
        {
LABEL_24:
          *((_BYTE *)v15 + v12) = 0;
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          *(_OWORD *)a3 = v31;
          *(_QWORD *)(a3 + 16) = v32;
          v22 = v13 + 1;
          v23 = a2[1];
          v24 = v23 - (v13 + 1);
          if (v23 < v13 + 1)
            std::__throw_out_of_range[abi:ne180100]("string_view::substr");
          if (v24 <= 0x7FFFFFFFFFFFFFF7)
          {
            v25 = *a2;
            if (v24 >= 0x17)
            {
              v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17)
                v29 = v24 | 7;
              v30 = v29 + 1;
              v26 = (__int128 *)operator new(v29 + 1);
              *((_QWORD *)&v31 + 1) = v24;
              *(_QWORD *)&v32 = v30 | 0x8000000000000000;
              *(_QWORD *)&v31 = v26;
            }
            else
            {
              BYTE7(v32) = v23 - (v13 + 1);
              v26 = &v31;
              if (v23 == v22)
                goto LABEL_41;
            }
            memmove(v26, (const void *)(v25 + v22), v24);
LABEL_41:
            *((_BYTE *)v26 + v24) = 0;
            if (*(char *)(a4 + 23) < 0)
              operator delete(*(void **)a4);
            result = *(double *)&v31;
            *(_OWORD *)a4 = v31;
            *(_QWORD *)(a4 + 16) = v32;
            return result;
          }
LABEL_45:
          std::string::__throw_length_error[abi:ne180100]();
        }
      }
      memmove(v15, v14, v12);
      goto LABEL_24;
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"found invalid synset name '", 27);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *a2, a2[1]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"' in phrasebook", 15);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v31);
  }
  return result;
}

void sub_1ADADE85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

unint64_t std::string_view::find_last_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;

  v6 = *a1;
  v7 = strlen(__s);
  if (v7)
  {
    v8 = v7;
    if (a1[1] > a3)
      v9 = a3 + 1;
    else
      v9 = a1[1];
    while (v9)
    {
      if (memchr(__s, *(char *)(v6 - 1 + v9--), v8))
        return v9;
    }
  }
  return -1;
}

void quasar::GenericPhraseBook::getMetaForKey(uint64_t a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  size_t v6;
  const void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst[2];
  unint64_t v12;
  std::string v13;
  char v14;
  _BYTE v15[64];

  quasar::PTree::PTree((quasar::PTree *)v15);
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v13 = *(std::string *)(a2 + 24);
  quasar::json2Ptree((uint64_t)&v13, (uint64_t)v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = *(const void **)a1;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v6;
    v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v12) = v6;
  v8 = __dst;
  if (v6)
LABEL_13:
    memmove(v8, v7, v6);
  *((_BYTE *)v8 + v6) = 0;
  quasar::PTree::getStringOptional((uint64_t)v15, (uint64_t)__dst, &v13);
  if (v14)
  {
    *a3 = v13;
    memset(&v13, 0, sizeof(v13));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    if (v14 && SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  quasar::PTree::~PTree((quasar::PTree *)v15);
}

void sub_1ADADEA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v13;
    v21[4] = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)result, v15);
    else
      v16 = 0;
    v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = a2[3];
    *((_QWORD *)v17 + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__swap_out_circular_buffer(a1, v21);
    v11 = a1[1];
    result = std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = a2[3];
    *(_QWORD *)(v7 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_1ADADEC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::pair<std::string,std::string>,std::string>::pair[abi:ne180100]<std::pair<std::string,std::string> const&,std::string&,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = std::pair<std::string,std::string>::pair[abi:ne180100](a1, a2) + 2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1ADADECD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<std::string,std::string>::~pair(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__tree<std::string_view>::__count_unique<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if ((std::less<std::string_view>::operator()[abi:ne180100](v4, a2, (uint64_t)(v2 + 4)) & 1) == 0)
      {
        if (!std::less<std::string_view>::operator()[abi:ne180100](v4, (uint64_t)(v2 + 4), a2))
          return v5;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADADEF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::pair<std::pair<std::string,std::string>,std::string>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::vector<std::pair<std::pair<std::string,std::string>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<std::string,std::string>,std::string>>,std::reverse_iterator<std::pair<std::pair<std::string,std::string>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

char *quasar::PronTypeToString(unsigned int a1)
{
  _OWORD v2[17];

  if (a1 >= 8)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PronTypeToString unexpected type");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return off_1E5D47820[a1];
}

uint64_t quasar::StringToPronType(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _OWORD v14[17];

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 3:
        if (*(_WORD *)a1 != 12871 || *((_BYTE *)a1 + 2) != 80)
          goto LABEL_57;
        return 1;
      case 4:
        if (*(_DWORD *)a1 == 1701736270)
          return 0;
        goto LABEL_57;
      case 8:
        goto LABEL_55;
      case 9:
        if (*a1 == 0x5732505F50573247 && *((_BYTE *)a1 + 8) == 80)
          return 2;
        goto LABEL_54;
      case 0xA:
        if (*a1 == 0x68744F5F50573247 && *((_WORD *)a1 + 4) == 29285)
          return 3;
LABEL_54:
        if (*((_BYTE *)a1 + 23) != 8)
          goto LABEL_57;
LABEL_55:
        if (*a1 == 0x4D50535F50573247)
          return 4;
        goto LABEL_57;
      case 0xE:
        goto LABEL_35;
      default:
        goto LABEL_57;
    }
  }
  v4 = a1[1];
  if (v4 == 3)
  {
    if (*(_WORD *)*a1 == 12871 && *(_BYTE *)(*a1 + 2) == 80)
      return 1;
    v4 = a1[1];
  }
  else if (v4 == 4 && *(_DWORD *)*a1 == 1701736270)
  {
    return 0;
  }
  if (v4 == 9)
  {
    if (*(_QWORD *)*a1 == 0x5732505F50573247 && *(_BYTE *)(*a1 + 8) == 80)
      return 2;
    v4 = a1[1];
  }
  if (v4 == 10)
  {
    if (*(_QWORD *)*a1 == 0x68744F5F50573247 && *(_WORD *)(*a1 + 8) == 29285)
      return 3;
    v4 = a1[1];
  }
  if (v4 == 8)
  {
    if (*(_QWORD *)*a1 == 0x4D50535F50573247)
      return 4;
    v4 = a1[1];
  }
  if (v4 != 14)
    goto LABEL_57;
  v2 = (uint64_t *)*a1;
LABEL_35:
  v8 = *v2;
  v9 = *(uint64_t *)((char *)v2 + 6);
  if (v8 == 0x7478455F50573247 && v9 == 0x5057325061727478)
    return 5;
LABEL_57:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "G2EMB"))
    return 6;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "G2EMB_INT8"))
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "StringToPronType unexpected string");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  return 7;
}

BOOL quasar::isPronTypePhoneme(int a1)
{
  _QWORD v2[34];

  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "type != PronType::kNone");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return a1 == 1;
}

BOOL quasar::isPronTypeWordpiece(int a1)
{
  _BOOL4 v2;
  _QWORD v4[34];

  if (!a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "type != PronType::kNone");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  v2 = !quasar::isPronTypePhoneme(a1);
  return (a1 & 0xFFFFFFFE) != 6 && v2;
}

BOOL quasar::isPronTypeEmbedding(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

const char *quasar::PronTypeToSeparator(int a1)
{
  _OWORD v3[17];

  if (quasar::isPronTypePhoneme(a1))
    return ".";
  if (quasar::isPronTypeWordpiece(a1))
    return " ";
  if ((a1 & 0xFFFFFFFE) != 6)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "PronTypeToSeparator unexpected type");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return "";
}

BOOL quasar::pronTypeMatchesPronRequest(int a1, int a2)
{
  uint64_t v2;
  _OWORD v4[17];

  v2 = 1;
  switch(a2)
  {
    case 0:
      return quasar::isPronTypePhoneme(a1);
    case 1:
      return quasar::isPronTypeWordpiece(a1);
    case 2:
      return (a1 & 0xFFFFFFFE) == 6;
    case 3:
      return v2;
    default:
      memset(v4, 0, sizeof(v4));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unexpected PronRequest");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(v9 - 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  if ((unsigned int *)result != a2)
  {
    v4 = (_DWORD *)result;
    v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      v7 = 0;
      v8 = (unsigned int *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v9 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v10 + 8));
        if ((result & 0x80000000) != 0)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_DWORD *)((char *)v4 + v12 + 4) = *(_DWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v11 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)v4 + v12 - 4) + 8));
            v12 -= 4;
            if ((result & 0x80000000) == 0)
            {
              v13 = (_DWORD *)((char *)v4 + v12 + 4);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 4;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  if ((unsigned int *)result != a2)
  {
    v4 = (unsigned int *)result;
    for (i = (unsigned int *)(result + 4); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v8 + 8));
      if ((result & 0x80000000) != 0)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v9 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(v11 - 2) + 8));
        }
        while ((result & 0x80000000) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a2 + 8), *(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a1 + 8));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a3 + 8), *(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a2 + 8));
  if (v8 < 0)
  {
    v11 = *a1;
    if (v9 < 0)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a3 + 8), *(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * v11 + 8)) & 0x80000000) != 0)
      {
        v12 = *a2;
        *a2 = *a3;
        *a3 = v12;
        return 2;
      }
    }
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return 0;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a2 + 8), *(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
      return 2;
    }
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v4 = a2;
  v6 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8)) & 0x80000000) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v9 + 8)) & 0x80000000) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v8 = v7;
      if (v7 >= v4)
        break;
      ++v7;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v8 + 8)) & 0x80000000) == 0);
  }
  if (v8 < v4)
  {
    do
      v10 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v10 + 8)) & 0x80000000) != 0);
  }
  while (v8 < v4)
  {
    v11 = *v8;
    *v8 = *v4;
    *v4 = v11;
    do
    {
      v12 = v8[1];
      ++v8;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v12 + 8)) & 0x80000000) == 0);
    do
      v13 = *--v4;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v6 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8)) & 0x80000000) != 0);
  }
  if (v8 - 1 != a1)
    *a1 = *(v8 - 1);
  *(v8 - 1) = v6;
  return v8;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * a1[++v6] + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8));
  while (v8 < 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v12 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v11 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v16 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) != 0);
      do
        v17 = *--v14;
      while (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v17 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v7 + 8)) & 0x80000000) == 0);
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v10 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(_QWORD *)(*(_QWORD *)a5 + 8 + 16 * *a4 + 8), *(_QWORD *)(*(_QWORD *)a5 + 8 + 16 * *a3 + 8));
  if ((result & 0x80000000) != 0)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(_QWORD *)(*(_QWORD *)a5 + 8 + 16 * *a3 + 8), *(_QWORD *)(*(_QWORD *)a5 + 8 + 16 * *a2 + 8));
    if ((result & 0x80000000) != 0)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a5 + 16))(*(_QWORD *)(*(_QWORD *)a5 + 8 + 16 * *a2 + 8), *(_QWORD *)(*(_QWORD *)a5 + 8 + 16 * *a1 + 8));
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a5 + 8), *(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a4 + 8));
  if ((result & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a4 + 8), *(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a3 + 8));
    if ((result & 0x80000000) != 0)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a3 + 8), *(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a2 + 8));
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a6 + 16))(*(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a2 + 8), *(_QWORD *)(*(_QWORD *)a6 + 8 + 16 * *a1 + 8));
        if ((result & 0x80000000) != 0)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD))(a4 + 16))(*(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *v14 + 8), *(_QWORD *)(*(_QWORD *)a4 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      v10 = ((uint64_t)a4 - result) >> 1;
      v11 = v10 + 1;
      v12 = (unsigned int *)(result + 4 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * v12[1] + 8)) < 0)
      {
        ++v12;
        v11 = v13;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * *v5 + 8));
      if ((result & 0x80000000) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (unsigned int *)(v6 + 4 * v16);
          if (2 * v11 + 2 < a3
            && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * v12[1] + 8)) < 0)
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = (*(uint64_t (**)(_QWORD, _QWORD))(a2 + 16))(*(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * *v12 + 8), *(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * v14 + 8));
          v5 = v15;
          v11 = v16;
        }
        while ((result & 0x80000000) == 0);
        *v15 = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*(int (**)(_QWORD, _QWORD))(a2 + 16))(*(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * *v9 + 8), *(_QWORD *)(*(_QWORD *)a2 + 8 + 16 * a1[v6 + 2] + 8)) < 0)
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (_DWORD *)(result + 4 * (v4 >> 1));
    v9 = (_DWORD *)(a2 - 4);
    result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v8 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)(a2 - 4) + 8));
    if ((result & 0x80000000) != 0)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 4 * v7);
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v8 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v10 + 8));
        v9 = v11;
      }
      while ((result & 0x80000000) != 0);
      *v11 = v10;
    }
  }
  return result;
}

void sub_1ADAE09E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1ADAE0A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1ADAE0AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADAE0C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = v18;
  MEMORY[0x1AF44D190](v19, 0x20C40960023A9);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADAE0DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1ADAE0EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADAE1028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1ADAE1148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADAE1404(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *__pa, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__split_buffer<std::wstring> *a21,uint64_t a22)
{
  void *v22;

  __pa = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void **std::unique_ptr<quasar::Munger>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::Munger::~Munger(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t quasar::ExhaustiveEnumerator::ExhaustiveEnumerator(uint64_t a1, __int128 *a2, quasar::PTree *this)
{
  std::string *v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v18;
  uint64_t v19;
  quasar::PTree *Child;
  uint64_t v22;
  uint64_t v23;
  quasar::PTree *v24;
  const std::string *String;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  const std::string *v38;
  const std::string *v39;
  quasar::PTree *v41;
  uint64_t v42;
  int v43;
  std::string v44;
  __int128 *v45;
  __int128 *v46;
  __int128 __p;
  char *v48;
  char *v49;
  uint64_t v50;

  *(_QWORD *)a1 = off_1E5D35280;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = off_1E5D37920;
  *(_QWORD *)(a1 + 32) = 0x138800000007;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = quasar::PTree::begin(this);
  v41 = this;
  v42 = quasar::PTree::end(this);
  if (v8 != v42)
  {
    while (*(char *)(v8 + 23) < 0)
    {
      v13 = *(_QWORD *)(v8 + 8);
      if (v13 == 19)
      {
        v14 = **(_QWORD **)v8 == 0x6C2D657361726870 && *(_QWORD *)(*(_QWORD *)v8 + 8) == 0x696C2D6874676E65;
        if (v14 && *(_QWORD *)(*(_QWORD *)v8 + 11) == 0x74696D696C2D6874)
          goto LABEL_65;
      }
      if (v13 == 20)
      {
        if (**(_QWORD **)v8 == 0x2D6D756E2D78616DLL
          && *(_QWORD *)(*(_QWORD *)v8 + 8) == 0x746172656D756E65
          && *(_DWORD *)(*(_QWORD *)v8 + 16) == 1936617321)
        {
          goto LABEL_66;
        }
        v13 = *(_QWORD *)(v8 + 8);
      }
      if (v13 == 13)
      {
        v10 = *(uint64_t **)v8;
LABEL_36:
        v18 = *v10;
        v19 = *(uint64_t *)((char *)v10 + 5);
        if (v18 == 0x757165732D676174 && v19 == 0x7365636E65757165)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "tag-sequences");
          Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)v41, &__p);
          if (SHIBYTE(v48) < 0)
            operator delete((void *)__p);
          v22 = quasar::PTree::begin(Child);
          v23 = quasar::PTree::end(Child);
          while (v22 != v23)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, ":");
            quasar::split(v22, (uint64_t *)&__p, 0, (uint64_t)&v45);
            if (SHIBYTE(v48) < 0)
              operator delete((void *)__p);
            v24 = (quasar::PTree *)(v22 + 24);
            String = (const std::string *)quasar::PTree::getString(v24);
            v43 = std::stoi(String, 0, 10);
            memset(&v44, 0, sizeof(v44));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v44, v45, v46, 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)v45) >> 3));
            v26 = *(_QWORD *)(a1 + 48);
            v27 = *(_QWORD *)(a1 + 56);
            if (v26 >= v27)
            {
              v29 = (uint64_t)(v26 - *v7) >> 5;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 59)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v31 = v27 - *v7;
              if (v31 >> 4 > v30)
                v30 = v31 >> 4;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
                v32 = 0x7FFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              v50 = a1 + 56;
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 56, v32);
              v34 = &v33[32 * v29];
              *(_QWORD *)&__p = v33;
              *((_QWORD *)&__p + 1) = v34;
              v49 = &v33[32 * v35];
              *(_DWORD *)v34 = v43;
              *((_QWORD *)v34 + 2) = 0;
              *((_QWORD *)v34 + 3) = 0;
              *((_QWORD *)v34 + 1) = 0;
              *(std::string *)(v34 + 8) = v44;
              memset(&v44, 0, sizeof(v44));
              v48 = v34 + 32;
              std::vector<std::pair<int,std::vector<std::string>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 40), &__p);
              v28 = *(_QWORD *)(a1 + 48);
              std::__split_buffer<std::pair<int,std::vector<std::string>>>::~__split_buffer((void **)&__p);
            }
            else
            {
              *(_DWORD *)v26 = v43;
              *(_QWORD *)(v26 + 16) = 0;
              *(_QWORD *)(v26 + 24) = 0;
              *(_QWORD *)(v26 + 8) = 0;
              *(std::string *)(v26 + 8) = v44;
              memset(&v44, 0, sizeof(v44));
              v28 = v26 + 32;
            }
            *(_QWORD *)(a1 + 48) = v28;
            *(_QWORD *)&__p = &v44;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            *(_QWORD *)&__p = &v45;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v22 = (uint64_t)v24 + 64;
          }
        }
      }
LABEL_67:
      v8 += 88;
      if (v8 == v42)
        return a1;
    }
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = (uint64_t *)v8;
    if (v9 == 13)
      goto LABEL_36;
    if (v9 != 19)
    {
      if (v9 != 20)
        goto LABEL_67;
      v11 = *(_QWORD *)v8 == 0x2D6D756E2D78616DLL && *(_QWORD *)(v8 + 8) == 0x746172656D756E65;
      if (!v11 || *(_DWORD *)(v8 + 16) != 1936617321)
        goto LABEL_67;
LABEL_66:
      v39 = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v8 + 24));
      *(_DWORD *)(a1 + 36) = std::stoi(v39, 0, 10);
      goto LABEL_67;
    }
    if (*(_QWORD *)v8 != 0x6C2D657361726870
      || *(_QWORD *)(v8 + 8) != 0x696C2D6874676E65
      || *(_QWORD *)(v8 + 11) != 0x74696D696C2D6874)
    {
      goto LABEL_67;
    }
LABEL_65:
    v38 = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v8 + 24));
    *(_DWORD *)(a1 + 32) = std::stoi(v38, 0, 10);
    goto LABEL_67;
  }
  return a1;
}

void sub_1ADAE199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void **v25;

  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  quasar::NameEnumerator::~NameEnumerator(v25);
  _Unwind_Resume(a1);
}

void quasar::ExhaustiveEnumerator::addExhaustiveEnumerations(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__split_buffer<std::string>::pointer v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  std::__split_buffer<std::string>::pointer first;
  std::__split_buffer<std::string>::pointer begin;
  std::string *v14;
  std::string *v15;
  int v16;
  unint64_t v17;
  std::vector<std::string>::pointer end;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  int *v28;
  std::string *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  std::__split_buffer<std::string>::pointer v33;
  std::string *v34;
  std::__split_buffer<std::string>::pointer v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  std::string *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  std::__split_buffer<std::string>::pointer v52;
  __int128 v53;
  std::string *v54;
  uint64_t **v55;
  std::string v56;
  std::vector<std::string> v57;
  _BYTE v58[48];
  std::string v59;
  std::__split_buffer<std::string> __v;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4 && *(_QWORD *)(a3 + 16) <= (unint64_t)*(int *)(a1 + 36))
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4) <= *(int *)(a1 + 32))
    {
      v9 = 0;
      memset(v58, 0, sizeof(v58));
      do
      {
        memset(&__v, 0, 24);
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__v.__end_, 1uLL);
        first = __v.__first_;
        begin = __v.__begin_;
        *(_DWORD *)v11 = v9;
        v14 = (std::string *)(v11 + 4);
        v15 = (std::string *)v11;
        while (begin != first)
        {
          v16 = HIDWORD(begin[-1].__r_.__value_.__r.__words[2]);
          begin = (std::__split_buffer<std::string>::pointer)((char *)begin - 4);
          HIDWORD(v15[-1].__r_.__value_.__r.__words[2]) = v16;
          v15 = (std::string *)((char *)v15 - 4);
        }
        __v.__first_ = v15;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v11 + 4);
        __v.__end_ = (std::__split_buffer<std::string>::pointer)&v11[4 * v10];
        if (first)
          operator delete(first);
        __v.__begin_ = v14;
        std::deque<std::vector<int>>::push_back(v58, (uint64_t)&__v);
        if (__v.__first_)
        {
          __v.__begin_ = __v.__first_;
          operator delete(__v.__first_);
        }
        ++v9;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4) > v9);
      if (*(_QWORD *)&v58[40])
      {
        v55 = (uint64_t **)a3;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)&v58[8] + 8 * (*(_QWORD *)&v58[32] / 0xAAuLL))
              + 24 * (*(_QWORD *)&v58[32] % 0xAAuLL);
          memset(&v59, 0, sizeof(v59));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
          memset(&v57, 0, sizeof(v57));
          std::to_string(&v56, *(_DWORD *)(*a2 + 48));
          end = v57.__end_;
          if (v57.__end_ >= v57.__end_cap_.__value_)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) > v21)
              v21 = 0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v57.__end_cap_;
            if (v22)
              v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v57.__end_cap_, v22);
            else
              v23 = 0;
            v24 = v23 + v20;
            __v.__first_ = v23;
            __v.__begin_ = v24;
            __v.__end_cap_.__value_ = &v23[v22];
            v25 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
            v24->__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            memset(&v56, 0, sizeof(v56));
            __v.__end_ = v24 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v57, &__v);
            v26 = v57.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            v57.__end_ = v26;
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
          }
          else
          {
            v19 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
            v57.__end_->__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
            v57.__end_ = end + 1;
          }
          size = v59.__r_.__value_.__l.__size_;
          v28 = (int *)v59.__r_.__value_.__r.__words[0];
          if (v59.__r_.__value_.__r.__words[0] != v59.__r_.__value_.__l.__size_)
          {
            v29 = v57.__end_;
            do
            {
              v30 = *a2 + 80 * *v28;
              if (v29 >= v57.__end_cap_.__value_)
              {
                v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v57, (__int128 *)v30);
              }
              else
              {
                if (*(char *)(v30 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *(_QWORD *)(v30 + 8));
                }
                else
                {
                  v31 = *(_OWORD *)v30;
                  v29->__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
                  *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
                }
                ++v29;
              }
              v57.__end_ = v29;
              ++v28;
            }
            while (v28 != (int *)size);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(v55, &v57, (__int128 **)&v57);
          v32 = *(int *)(v59.__r_.__value_.__l.__size_ - 4);
          while (-1 - 0x3333333333333333 * ((uint64_t)(a2[1] - *a2) >> 4) > v32)
          {
            memset(&__v, 0, 24);
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__v, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_, (uint64_t)(v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0]) >> 2);
            ++v32;
            v33 = __v.__begin_;
            if (__v.__begin_ >= __v.__end_)
            {
              v35 = __v.__first_;
              v36 = ((char *)__v.__begin_ - (char *)__v.__first_) >> 2;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v38 = (char *)__v.__end_ - (char *)__v.__first_;
              if (((char *)__v.__end_ - (char *)__v.__first_) >> 1 > v37)
                v37 = v38 >> 1;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                v39 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__v.__end_, v39);
                v35 = __v.__first_;
                v33 = __v.__begin_;
              }
              else
              {
                v40 = 0;
              }
              v41 = (std::string *)&v40[4 * v36];
              LODWORD(v41->__r_.__value_.__l.__data_) = v32;
              v34 = (std::string *)((char *)v41->__r_.__value_.__r.__words + 4);
              while (v33 != v35)
              {
                v42 = HIDWORD(v33[-1].__r_.__value_.__r.__words[2]);
                v33 = (std::__split_buffer<std::string>::pointer)((char *)v33 - 4);
                HIDWORD(v41[-1].__r_.__value_.__r.__words[2]) = v42;
                v41 = (std::string *)((char *)v41 - 4);
              }
              __v.__first_ = v41;
              __v.__begin_ = v34;
              __v.__end_ = (std::__split_buffer<std::string>::pointer)&v40[4 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              LODWORD(__v.__begin_->__r_.__value_.__l.__data_) = v32;
              v34 = (std::string *)((char *)v33->__r_.__value_.__r.__words + 4);
            }
            __v.__begin_ = v34;
            std::deque<std::vector<int>>::push_back(v58, (uint64_t)&__v);
            if (__v.__first_)
            {
              __v.__begin_ = __v.__first_;
              operator delete(__v.__first_);
            }
          }
          std::deque<std::vector<float>>::pop_front(v58);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v57;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          if (v59.__r_.__value_.__r.__words[0])
          {
            v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
            operator delete(v59.__r_.__value_.__l.__data_);
          }
        }
        while (*(_QWORD *)&v58[40]);
      }
      std::deque<std::vector<int>>::~deque[abi:ne180100](v58);
    }
    else
    {
      memset(&__v, 0, 24);
      std::to_string(&v59, *(_DWORD *)(v3 + 48));
      v7 = __v.__begin_;
      if (__v.__begin_ >= __v.__end_)
      {
        v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3);
        v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)__v.__end_ - (char *)__v.__first_) >> 3) > v44)
          v44 = 0x5555555555555556 * (((char *)__v.__end_ - (char *)__v.__first_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__v.__end_ - (char *)__v.__first_) >> 3) >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v44;
        *(_QWORD *)&v58[32] = &__v.__end_;
        if (v45)
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__v.__end_, v45);
        else
          v46 = 0;
        v47 = &v46[24 * v43];
        *(_QWORD *)v58 = v46;
        *(_QWORD *)&v58[8] = v47;
        *(_QWORD *)&v58[24] = &v46[24 * v45];
        v48 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        *((_QWORD *)v47 + 2) = *((_QWORD *)&v59.__r_.__value_.__l + 2);
        *(_OWORD *)v47 = v48;
        memset(&v59, 0, sizeof(v59));
        *(_QWORD *)&v58[16] = v47 + 24;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__v, (std::__split_buffer<std::string> *)v58);
        v49 = __v.__begin_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)v58);
        __v.__begin_ = v49;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
      }
      else
      {
        v8 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        __v.__begin_->__r_.__value_.__r.__words[2] = v59.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        __v.__begin_ = v7 + 1;
      }
      v50 = *a2;
      v51 = a2[1];
      if (*a2 != v51)
      {
        v52 = __v.__begin_;
        do
        {
          if (v52 >= __v.__end_)
          {
            v54 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__v, (__int128 *)v50);
          }
          else
          {
            if (*(char *)(v50 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v50, *(_QWORD *)(v50 + 8));
            }
            else
            {
              v53 = *(_OWORD *)v50;
              v52->__r_.__value_.__r.__words[2] = *(_QWORD *)(v50 + 16);
              *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
            }
            v54 = v52 + 1;
          }
          __v.__begin_ = v54;
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>((uint64_t **)a3, &__v, (__int128 **)&__v);
          v52 = __v.__begin_ - 1;
          if (SHIBYTE(__v.__begin_[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52->__r_.__value_.__l.__data_);
          __v.__begin_ = v52;
          v50 += 80;
        }
        while (v50 != v51);
      }
      *(_QWORD *)v58 = &__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
    }
  }
}

void sub_1ADAE2080(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, uint64_t a10, void *a11, std::__split_buffer<std::wstring> *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__pa,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a17);
  if (a32 < 0)
    operator delete(__pa);
  __pa = (void *)(v32 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void quasar::ExhaustiveEnumerator::addEnumerations(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 **v5;
  __int128 **i;
  std::string v7;
  __int128 **v8;
  __int128 **v9;
  uint64_t v10;
  std::string *v11;

  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 48))
  {
    (*(void (**)(uint64_t, __int128 **, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    quasar::NameEnumerator::addSpecEnumerations(a1, (int **)(a1 + 40), a2, 1, (uint64_t *)&v8);
    v5 = v8;
    for (i = v9; v5 != i; v5 += 3)
    {
      memset(&v7, 0, sizeof(v7));
      std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(&v7, *v5, v5[1], 0xCCCCCCCCCCCCCCCDLL * (v5[1] - *v5));
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 40))(a1, &v7, a3);
      v11 = &v7;
      std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    }
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  }
}

void sub_1ADAE228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void quasar::ExhaustiveEnumerator::~ExhaustiveEnumerator(void **this)
{
  void **v2;

  *this = off_1E5D37920;
  v2 = this + 5;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
}

{
  void **v2;

  *this = off_1E5D37920;
  v2 = this + 5;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::NameEnumerator::~NameEnumerator(this);
  MEMORY[0x1AF44D190]();
}

uint64_t quasar::ExhaustiveEnumerator::isCalculatedInQuasar(quasar::ExhaustiveEnumerator *this)
{
  return 1;
}

uint64_t *std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::vector<std::string>>::__construct_node<std::vector<std::string> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__find_equal<std::vector<std::string>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        if (!quasar::NameEnumerator::EnumComparator::operator()(v7, a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!quasar::NameEnumerator::EnumComparator::operator()(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t quasar::NameEnumerator::EnumComparator::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  std::string v10;
  std::string v11;
  char v12;
  std::string *v13;

  v4 = (__int128 *)a2[1];
  v5 = (__int128 *)(*a2 + 24);
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v11, v5, v4, 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v5) >> 3));
  v6 = (__int128 *)a3[1];
  v7 = (__int128 *)(*a3 + 24);
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v10, v7, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3));
  v8 = std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((const void **)v11.__r_.__value_.__l.__data_, (const void **)v11.__r_.__value_.__l.__size_, (const void **)v10.__r_.__value_.__l.__data_, (const void **)v10.__r_.__value_.__l.__size_, (uint64_t)&v12);
  v13 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v8;
}

void sub_1ADAE2538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  *(_QWORD *)(v12 - 24) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 24));
  a9 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::string>>>,std::reverse_iterator<std::pair<int,std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 32;
  }
}

void **std::__split_buffer<std::pair<int,std::vector<std::string>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<int,std::vector<std::string>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<int,std::vector<std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v4 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t std::deque<std::vector<int>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t TCollation::setCollation(TCollation *this)
{
  uint64_t v2;
  char *v3;
  uint64_t result;

  v3 = (char *)this + 16;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 4) = *((_QWORD *)v3 + 1);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8052888210);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  result = *((_QWORD *)this + 1);
  if (result)
    result = MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  *((_QWORD *)this + 1) = 0;
  return result;
}

void TCollation::TCollation(TCollation *this)
{
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  TCollation::setCollation(this);
}

void TCollation::setCollation(TCollation *this, TInputStream *a2)
{
  std::exception_vtbl *v4;
  uint64_t Attribute;
  const TFileObject *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::exception_vtbl *v15;
  _QWORD *v16;
  std::exception_vtbl *v17;
  _QWORD *exception;
  const char *v19;
  _QWORD *v20;
  std::exception_vtbl *v21;
  _QWORD *v22;
  void *__p[2];
  char v24;
  std::exception v25[2];
  char v26;
  char v27;
  std::exception v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  std::exception v34[3];
  char v35;

  TCollation::setCollation(this);
  if (TInputStream::verifyHeader((uint64_t)a2, "Collation", (uint64_t)&pCollationVersion, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "");
    TException::TException(v34, (__int128 *)&v31);
    v34[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v35 >= 0)
      v17 = (std::exception_vtbl *)&v34[1];
    else
      v17 = v34[1].__vftable;
    conditionalAssert((const char *)v17, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 172);
    TException::~TException(v34);
    if (SHIBYTE(v32) < 0)
      operator delete(v31);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "");
    TException::TException(exception, (__int128 *)v34);
    *exception = &unk_1E5D16668;
  }
  TFileObjectParser::TFileObjectParser((TFileObjectParser *)v34, a2);
  v4 = v34[0].__vftable;
  v31 = dword_1AE15FCD0;
  v32 = xmmword_1AE144E70;
  v33 = -1;
  if (TFileObject::verify((uint64_t)v34[0].__vftable, (uint64_t)&v31, 1uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    TException::TException(&v28, (__int128 *)v25);
    v28.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
    if (v30 >= 0)
      v19 = (const char *)&v29;
    else
      v19 = (const char *)v29;
    conditionalAssert(v19, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 182);
    TException::~TException(&v28);
    if (v26 < 0)
      operator delete(v25[0].__vftable);
    v20 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v28, "");
    TException::TException(v20, (__int128 *)&v28);
    *v20 = &unk_1E5D16BC8;
  }
  Attribute = TFileObject::getAttribute((uint64_t)v4, dword_1AE15FCD0);
  v6 = (const TFileObject *)Attribute;
  if (Attribute)
  {
    v28.__vftable = (std::exception_vtbl *)&unk_1AE15FCC8;
    v29 = xmmword_1AE15FCA0;
    v30 = -1;
    if (TFileObject::verify(Attribute, (uint64_t)&v28, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v25, (__int128 *)__p);
      v25[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
      if (v27 >= 0)
        v21 = (std::exception_vtbl *)&v25[1];
      else
        v21 = v25[1].__vftable;
      conditionalAssert((const char *)v21, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 190);
      TException::~TException(v25);
      if (v24 < 0)
        operator delete(__p[0]);
      v22 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "");
      TException::TException(v22, (__int128 *)v25);
      *v22 = &unk_1E5D16BC8;
    }
    TCollation::initSerializedTable(this, v6);
    TCollation::initCharacterClasses(this);
    v8 = *(_QWORD *)this + 1;
    v9 = *((_QWORD *)this + 2);
    for (i = 4; i != 0x40000; i += 4)
    {
      if (!*(_DWORD *)(v9 + i))
      {
        if (v8 >= 0x10000)
        {
          tknPrintf("Error: Invalid collation table. Should have %llu classes of characters/string max.\n", v7, 0xFFFFLL);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          TException::TException(v25, (__int128 *)__p);
          v25[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v27 >= 0)
            v15 = (std::exception_vtbl *)&v25[1];
          else
            v15 = v25[1].__vftable;
          conditionalAssert((const char *)v15, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 209);
          TException::~TException(v25);
          if (v24 < 0)
            operator delete(__p[0]);
          v16 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v25, "");
          TException::TException(v16, (__int128 *)v25);
          *v16 = &unk_1E5D16BC8;
        }
        *(_DWORD *)(v9 + i) = v8++;
      }
    }
    v11 = *((_QWORD *)this + 3);
    v12 = (uint64_t *)*((_QWORD *)this + 4);
    v13 = 126 - 2 * __clz(((uint64_t)v12 - v11) >> 4);
    v25[0].__vftable = (std::exception_vtbl *)sortCollationPair;
    if (v12 == (uint64_t *)v11)
      v14 = 0;
    else
      v14 = v13;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(v11, v12, (uint64_t (**)(uint64_t *, uint64_t *))v25, v14, 1);
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v34);
}

void sub_1ADAE2DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::exception a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v37 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

void TCollation::~TCollation(TCollation *this)
{
  void *v2;

  TCollation::setCollation(this);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

__int32 *TCollation::initSerializedTable(TCollation *this, const TFileObject *a2)
{
  uint64_t i;
  uint64_t v4;
  TFileObject *j;
  uint64_t v6;
  int *v7;
  __int32 *v9;
  size_t v10;
  __int32 *v11;
  __int32 *result;
  std::exception_vtbl *v13;
  _QWORD *v14;
  std::exception_vtbl *v15;
  _QWORD *exception;
  std::exception_vtbl *v17;
  _QWORD *v18;
  void *__p[2];
  char v20;
  std::exception v21[3];
  char v22;
  void *v23;
  int64x2_t v24;
  uint64_t v25;
  __int32 *v26;
  __int128 v27;
  _BYTE v28[1024];
  char v29;

  v26 = (__int32 *)v28;
  v27 = xmmword_1AE1418C0;
  v29 = 1;
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    v23 = &unk_1AE15FCC8;
    v24 = vdupq_n_s64(1uLL);
    v25 = -1;
    if (TFileObject::verify(i, (uint64_t)&v23, 1uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v21, (__int128 *)__p);
      v21[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
      if (v22 >= 0)
        v15 = (std::exception_vtbl *)&v21[1];
      else
        v15 = v21[1].__vftable;
      conditionalAssert((const char *)v15, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 104);
      TException::~TException(v21);
      if (v20 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v21, "");
      TException::TException(exception, (__int128 *)v21);
      *exception = &unk_1E5D16BC8;
    }
    if (*(_QWORD *)this >= 0xFFFFuLL)
    {
      tknPrintf("Error: Invalid collation table. Should have %llu classes of characters/strings max.\n", v4, 0xFFFFLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v21, (__int128 *)__p);
      v21[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
      if (v22 >= 0)
        v17 = (std::exception_vtbl *)&v21[1];
      else
        v17 = v21[1].__vftable;
      conditionalAssert((const char *)v17, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 110);
      TException::~TException(v21);
      if (v20 < 0)
        operator delete(__p[0]);
      v18 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v21, "");
      TException::TException(v18, (__int128 *)v21);
      *v18 = &unk_1E5D16BC8;
    }
    for (j = *(TFileObject **)(i + 24); j; j = (TFileObject *)*((_QWORD *)j + 2))
    {
      if (TFileObject::verify(j, 0, 0))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v21, (__int128 *)__p);
        v21[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
        if (v22 >= 0)
          v13 = (std::exception_vtbl *)&v21[1];
        else
          v13 = v21[1].__vftable;
        conditionalAssert((const char *)v13, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/collation.cpp", 117);
        TException::~TException(v21);
        if (v20 < 0)
          operator delete(__p[0]);
        v14 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v21, "");
        TException::TException(v14, (__int128 *)v21);
        *v14 = &unk_1E5D16BC8;
      }
      v6 = 0;
      v7 = (int *)*((_QWORD *)j + 3);
      while (v7[v6++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), v7, v6 - 1);
      LODWORD(v21[0].__vftable) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), (int *)v21, 1uLL);
    }
    LODWORD(v21[0].__vftable) = 0;
    TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), (int *)v21, 1uLL);
    ++*(_QWORD *)this;
  }
  v9 = (__int32 *)operator new[]();
  *((_QWORD *)this + 1) = v9;
  v10 = *((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1) >= (unint64_t)v27)
  {
    if (v29)
    {
      LODWORD(v23) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), (int *)&v23, 1uLL);
      v11 = v26;
      v10 = --*((_QWORD *)&v27 + 1);
    }
    else
    {
      v11 = v26;
      if ((_QWORD)v27)
        v26[(_QWORD)v27 - 1] = 0;
    }
  }
  else
  {
    v11 = v26;
    v26[*((_QWORD *)&v27 + 1)] = 0;
  }
  result = wmemcpy(v9, v11, v10);
  if (v29)
  {
    result = v26;
    if (v26 != (__int32 *)v28)
    {
      if (v26)
        return (__int32 *)MEMORY[0x1AF44D160]();
    }
  }
  return result;
}

void sub_1ADAE33B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  int v25;
  uint64_t v26;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x478]))
      {
        if (a24 != v26 && a24 != 0)
          MEMORY[0x1AF44D160]();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void TCollation::initCharacterClasses(TCollation *this)
{
  void *v2;
  unint64_t v3;
  char **v4;
  const __int32 *v5;
  unint64_t v6;
  __int32 v7;
  unint64_t v8;
  const __int32 **v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  const __int32 **v16;
  char *v17;
  char *v18;
  const __int32 **v19;
  const __int32 *v20;
  __int32 v21;

  v2 = (void *)operator new[]();
  *((_QWORD *)this + 2) = v2;
  bzero(v2, 0x40000uLL);
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = (char **)((char *)this + 24);
    v5 = (const __int32 *)*((_QWORD *)this + 1);
    v6 = 1;
    do
    {
      v7 = *v5;
      if (*v5)
      {
        do
        {
          if (wcslen(v5) == 1)
          {
            *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v7) = v6;
          }
          else
          {
            v9 = (const __int32 **)*((_QWORD *)this + 4);
            v8 = *((_QWORD *)this + 5);
            if ((unint64_t)v9 >= v8)
            {
              v11 = ((char *)v9 - *v4) >> 4;
              v12 = v11 + 1;
              if ((unint64_t)(v11 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v13 = v8 - (_QWORD)*v4;
              if (v13 >> 3 > v12)
                v12 = v13 >> 3;
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
                v14 = 0xFFFFFFFFFFFFFFFLL;
              else
                v14 = v12;
              if (v14)
                v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 40, v14);
              else
                v15 = 0;
              v16 = (const __int32 **)&v15[16 * v11];
              *v16 = v5;
              v16[1] = (const __int32 *)v6;
              v18 = (char *)*((_QWORD *)this + 3);
              v17 = (char *)*((_QWORD *)this + 4);
              v19 = v16;
              if (v17 != v18)
              {
                do
                {
                  *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
                  v19 -= 2;
                  v17 -= 16;
                }
                while (v17 != v18);
                v17 = *v4;
              }
              v10 = v16 + 2;
              *((_QWORD *)this + 3) = v19;
              *((_QWORD *)this + 4) = v16 + 2;
              *((_QWORD *)this + 5) = &v15[16 * v14];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *v9 = v5;
              v9[1] = (const __int32 *)v6;
              v10 = v9 + 2;
            }
            *((_QWORD *)this + 4) = v10;
          }
          v20 = &v5[wcslen(v5)];
          v21 = v20[1];
          v5 = v20 + 1;
          v7 = v21;
        }
        while (v21);
        v3 = *(_QWORD *)this;
      }
      ++v5;
    }
    while (v3 > v6++);
  }
}

uint64_t sortCollationPair(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

uint64_t TCollation::collateCharSlow(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  unint64_t v20;

  *a3 = 1;
  result = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (WORD1(result))
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    result = *(unsigned int *)(v5 + 4 * result);
  v9 = a1 + 24;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 - v7;
  if (v8 != v7)
  {
    v11 = 0;
    v12 = v10 >> 4;
    if (v12 <= 1)
      v12 = 1;
    v13 = 1;
    do
    {
      v14 = *(int **)(v7 + 16 * v11);
      v15 = *v14;
      if (*v14)
      {
        v16 = v14 + 1;
        v17 = (int *)a2;
        do
        {
          v18 = *v17;
          if (!*v17)
            break;
          if (v15 != v18)
          {
            if (v15 > v18)
              return result;
            goto LABEL_20;
          }
          ++v17;
          v19 = *v16++;
          v15 = v19;
        }
        while (v19);
      }
      else
      {
        v17 = (int *)a2;
      }
      v20 = ((char *)v17 - (char *)a2) >> 2;
      if (v20 > v13)
      {
        *a3 = v20;
        result = *(unsigned int *)(v7 + 16 * v11 + 8);
        v13 = v20;
      }
LABEL_20:
      ++v11;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t TCollation::collprefixcmp(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  unint64_t v16;

  v6 = 0;
  while (1)
  {
    v8 = *a2++;
    v7 = v8;
    if (!v8)
      break;
    v16 = 1;
    v9 = (unsigned int *)(a3 + 4 * v6);
    v10 = *v9;
    v11 = a1[3] == a1[4] || (_DWORD)v10 == 0;
    if (v11 || !v9[1])
    {
      v13 = a1[2];
      if (WORD1(v10))
        v14 = 1;
      else
        v14 = v13 == 0;
      if (!v14)
        LODWORD(v10) = *(_DWORD *)(v13 + 4 * v10);
      v12 = 1;
    }
    else
    {
      LODWORD(v10) = TCollation::collateCharSlow((uint64_t)a1, v9, &v16);
      v12 = v16;
    }
    v6 += v12;
    result = (v7 - v10);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t TCollation::collate(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  result = *a2;
  if ((_DWORD)result)
  {
    v6 = a2;
    v7 = 0;
    do
    {
      v10 = 0;
      if (a1[3] == a1[4] || !a2[1])
      {
        if (!WORD1(result))
        {
          v9 = a1[2];
          if (v9)
            LODWORD(result) = *(_DWORD *)(v9 + 4 * result);
        }
        v8 = 1;
      }
      else
      {
        LODWORD(result) = TCollation::collateCharSlow((uint64_t)a1, a2, &v10);
        v8 = v10;
      }
      v11 = result;
      TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v11, 1uLL);
      v7 += v8;
      a2 = &v6[v7];
      result = *a2;
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 2, (uint64_t *)v9);
        if ((_DWORD)result)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(a2 - 2);
          *(a2 - 2) = v20;
          LODWORD(v20) = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)v9, (uint64_t *)(v9 + 16), a2 - 2, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2), a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 2), a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v9 + 16 * (v13 >> 1)), (uint64_t *)v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)v9, (uint64_t *)(v9 + 16 * (v13 >> 1)), a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v9 + 16), (uint64_t *)(v15 - 16), a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v9 + 32), (uint64_t *)(v9 + 16 + 16 * v14), a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)(v15 - 16), (uint64_t *)v15, (uint64_t *)(v9 + 16 + 16 * v14), a3);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            LODWORD(v16) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)((uint64_t *)(v9 - 16), (uint64_t *)v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>((uint64_t *)v9, (unint64_t)a2, (uint64_t (**)(__int128 *, uint64_t *))a3);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>((uint64_t *)v9, (unint64_t)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(v9, v17, a3);
          v9 = (uint64_t)(v17 + 2);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t)(v17 + 2), a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,std::pair<wchar_t const*,wchar_t>*>(v9, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if ((_OWORD *)result != a2)
  {
    v16 = v3;
    v17 = v4;
    v6 = result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *v10;
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 24) = *(_DWORD *)(v6 + v12 + 8);
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_QWORD *)v14 = v15;
          *(_DWORD *)(v14 + 8) = DWORD2(v15);
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_QWORD *)(v11 + 32) = *(_QWORD *)(v11 + 16);
            *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 24);
            result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 + 32) = v12;
          *(_DWORD *)(v11 + 40) = DWORD2(v12);
        }
        v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = (int *)(a3 + 1);
      result = 1;
      v12 = (int *)(a1 + 1);
LABEL_9:
      v14 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v16 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v16;
    if ((*a4)(a3, a2))
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v11 = (int *)(a3 + 1);
      result = 2;
      v12 = (int *)(a2 + 1);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v14 = (int *)(a2 + 1);
    LODWORD(v13) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v13;
    if ((*a4)(a2, a1))
    {
      v15 = *a1;
      *a1 = *a2;
      v12 = (int *)(a1 + 1);
      *a2 = v15;
      result = 2;
LABEL_10:
      v18 = *v12;
      *v12 = *v14;
      *v14 = v18;
      return result;
    }
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *))
{
  unint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  __int128 v11;

  v4 = a2;
  v11 = *(_OWORD *)a1;
  if (((*a3)(&v11, (uint64_t *)(a2 - 16)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 2;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 2;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v11, (uint64_t *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *v6;
    *v6 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)v6 + 2);
    *((_DWORD *)v6 + 2) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v4 + 8) = v9;
    do
      v6 += 2;
    while (!(*a3)(&v11, v6));
    do
      v4 -= 16;
    while (((*a3)(&v11, (uint64_t *)v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v6 - 2);
  }
  *(v6 - 2) = v11;
  *((_DWORD *)v6 - 2) = DWORD2(v11);
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *result;
  __int128 v12;

  v6 = 0;
  v12 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v12) & 1) != 0);
  v7 = (unint64_t)&a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 16;
    }
    while (((*a3)((uint64_t *)a2, &v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((uint64_t *)a2, &v12));
  }
  v8 = (__int128 *)&a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)v8;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)v9 = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = *(_DWORD *)(v9 + 8);
      *(_DWORD *)(v9 + 8) = v10;
      do
        ++v8;
      while (((*a3)((uint64_t *)v8, &v12) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((uint64_t *)v9, &v12));
    }
    while ((unint64_t)v8 < v9);
  }
  result = (uint64_t *)(v8 - 1);
  if (v8 - 1 != (__int128 *)a1)
  {
    *a1 = *((_QWORD *)v8 - 2);
    *((_DWORD *)a1 + 2) = *((_DWORD *)v8 - 2);
  }
  *((_QWORD *)v8 - 2) = v12;
  *((_DWORD *)v8 - 2) = DWORD2(v12);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, (uint64_t *)a1))
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2), a3);
      return 1;
    default:
      v9 = (uint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), a3);
      v10 = (uint64_t *)(a1 + 48);
      if ((uint64_t *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      v16 = *(_OWORD *)v10;
      v13 = v11;
      while (1)
      {
        v14 = a1 + v13;
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32)
          break;
        v13 -= 16;
        if (((*a3)((uint64_t *)&v16, (uint64_t *)(v14 + 16)) & 1) == 0)
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(_QWORD *)v15 = v16;
      *(_DWORD *)(v15 + 8) = DWORD2(v16);
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if ((_DWORD)result)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
      if ((_DWORD)result)
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a2, a3, a4, a6);
  result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if ((_DWORD)result)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
      if ((_DWORD)result)
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
        if ((_DWORD)result)
        {
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*,std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          LODWORD(v15) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v9, (__int128 *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a1 + 8);
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, a4, v16);
        if (v17 == v20)
        {
          *(_QWORD *)v20 = v18;
          *(_DWORD *)(v20 + 8) = v19;
        }
        else
        {
          *(_QWORD *)v20 = *(_QWORD *)v17;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v17 + 8);
          *(_QWORD *)v17 = v18;
          *(_DWORD *)(v17 + 8) = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(a1, v20 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v20 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = result + 16 * (v12 + 1);
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        v13 = v15;
      }
      result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_QWORD *)v7 = *(_QWORD *)v14;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v14 + 8);
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = v8 + 16 * v17;
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, &v19);
          v7 = (__int128 *)v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *(_QWORD *)v16 = v19;
        *(_DWORD *)(v16 + 8) = DWORD2(v19);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      v10 = v11;
    }
    *(_QWORD *)a1 = *(_QWORD *)v9;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 + 8);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t> const&,std::pair<wchar_t const*,wchar_t> const&),std::pair<wchar_t const*,wchar_t>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v14 = v4;
    v15 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 16 * (v6 >> 1);
    v11 = (__int128 *)(a2 - 16);
    result = (*a3)(v10, a2 - 16);
    if ((_DWORD)result)
    {
      v13 = *v11;
      do
      {
        v12 = v10;
        *(_QWORD *)v11 = *(_QWORD *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 16 * v9;
        result = (*a3)(v10, (uint64_t)&v13);
        v11 = (__int128 *)v12;
      }
      while ((result & 1) != 0);
      *(_QWORD *)v12 = v13;
      *(_DWORD *)(v12 + 8) = DWORD2(v13);
    }
  }
  return result;
}

uint64_t **kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::AddData(uint64_t a1, uint64_t ***a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  int v10;
  uint64_t **result;
  char v12;
  char v13;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)a1, *(int *)(a1 + 56));
  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  if (v4 >= 1)
  {
    v5 -= v4;
    if (v5 >= 1)
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v12, (uint64_t **)(*(_QWORD *)a1 + 24 * v4), (uint64_t **)(*(_QWORD *)a1 + 24 * v4 + 24 * v5), *(uint64_t ***)a1);
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 52) = v5;
  }
  v6 = *(_QWORD *)a1;
  v7 = *a2;
  v8 = a2[1];
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a2) + v5;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3) >= v9)
  {
    v10 = v5;
  }
  else
  {
    std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)a1, v9 + 1000);
    v7 = *a2;
    v8 = a2[1];
    v6 = *(_QWORD *)a1;
    v10 = *(_DWORD *)(a1 + 52);
  }
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v13, v7, v8, (uint64_t **)(v6 + 24 * v10));
  *(_DWORD *)(a1 + 52) -= 1431655765 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3);
  return result;
}

uint64_t kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Next(uint64_t result)
{
  *(_DWORD *)(result + 48) += *(_DWORD *)(result + 72);
  return result;
}

uint64_t kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Value(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  char v5;

  v2 = a1 + 24;
  std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)(a1 + 24), *(int *)(a1 + 72));
  v3 = (uint64_t **)(*(_QWORD *)a1 + 24 * *(int *)(a1 + 48));
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>((uint64_t)&v5, v3, &v3[3 * *(int *)(a1 + 72)], *(uint64_t ***)(a1 + 24));
  return v2;
}

uint64_t kaldi::nnet1::MatrixRandomizer::Next(uint64_t this)
{
  *(_DWORD *)(this + 144) += *(_DWORD *)(this + 172);
  return this;
}

uint64_t kaldi::nnet1::MatrixRandomizer::Value(kaldi::nnet1::MatrixRandomizer *this, unsigned int a2, void *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  void *v14;
  __int128 v15;
  __int128 v16;

  v6 = *((_QWORD *)this + 12) + 40 * a2;
  if (&v14 != (void **)v6)
  {
    v7 = *((_DWORD *)this + 43);
    v8 = *((_DWORD *)this + 4);
    v9 = *((_DWORD *)this + 6);
    v10 = *((_QWORD *)this + 4);
    v11 = v9 * *((_DWORD *)this + 36);
    v12 = *((_DWORD *)this + 7) - v11;
    *(_QWORD *)(v6 + 8) = *((_QWORD *)this + 1) + 4 * v11;
    *(_DWORD *)(v6 + 16) = v8;
    *(_DWORD *)(v6 + 20) = v7;
    *(_DWORD *)(v6 + 24) = v9;
    *(_DWORD *)(v6 + 28) = v12;
    *(_QWORD *)(v6 + 32) = v10;
  }
  v14 = &unk_1E5D29D40;
  v15 = 0u;
  v16 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v14);
  result = *((_QWORD *)this + 12) + 40 * a2;
  *(_QWORD *)(result + 32) = a3;
  return result;
}

void *kaldi::nnet1::VectorRandomizer::AddData(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  void *result;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v4)
  {
    kaldi::Vector<float>::Resize(a1, *((unsigned int *)a1 + 14), 0);
    v4 = *((unsigned int *)a1 + 2);
  }
  v5 = *((unsigned int *)a1 + 12);
  if ((int)v5 >= 1)
  {
    v6 = *((_DWORD *)a1 + 13) - v5;
    if (v6 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v7 = (char *)*a1;
      v13 = 0;
      v14 = (uint64_t)v7;
      LODWORD(v15) = v6;
      v11 = &v7[4 * v5];
      v12 = v6;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, (const void **)&v11);
      LODWORD(v4) = *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 12) = 0;
    *((_DWORD *)a1 + 13) = v6;
    v15 = 0;
    v16 = 0;
    v14 = (uint64_t)*a1 + 4 * v6;
    v15 = (v4 - v6);
    kaldi::VectorBase<float>::SetZero((uint64_t)&v14);
    v4 = *((unsigned int *)a1 + 2);
  }
  v8 = *((_DWORD *)a1 + 13);
  v9 = *(_DWORD *)(a2 + 8);
  if ((int)v4 < v9 + v8)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    kaldi::Vector<float>::Resize((void **)&v14, v4, 1);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, (const void **)a1);
    kaldi::Vector<float>::Resize(a1, (*((_DWORD *)a1 + 13) + *(_DWORD *)(a2 + 8) + 1000), 1);
    v12 = 0;
    v13 = 0;
    v11 = (char *)*a1;
    LODWORD(v12) = v15;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, (const void **)&v14);
    kaldi::Vector<float>::Destroy((uint64_t)&v14);
    v8 = *((_DWORD *)a1 + 13);
    v9 = *(_DWORD *)(a2 + 8);
  }
  v15 = 0;
  v16 = 0;
  v14 = (uint64_t)*a1 + 4 * v8;
  LODWORD(v15) = v9;
  result = kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, (const void **)a2);
  *((_DWORD *)a1 + 13) += *(_DWORD *)(a2 + 8);
  return result;
}

void sub_1ADAE4CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

char *kaldi::nnet1::VectorRandomizer::Value(void **this)
{
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (char *)(this + 3);
  kaldi::Vector<float>::Resize(this + 3, *((unsigned int *)this + 18), 1);
  v3 = *((int *)this + 12);
  v4 = *((_DWORD *)this + 18);
  v7 = 0;
  v8 = 0;
  v6 = (uint64_t)*this + 4 * v3;
  LODWORD(v7) = v4;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v2, (const void **)&v6);
  return v2;
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *,std::vector<std::pair<int,float>> *>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(a4, *v5, v5[1], v5[1] - *v5);
      v5 += 3;
      a4 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADAE4DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)v4, *v6, v6[1], v6[1] - *v6);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADAE4EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,float>>>,std::vector<std::pair<int,float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::SplitToVector(char *__s1, char *__s2, void **a3, int a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char **v19;
  char *v20;
  char *v21;
  char *v22;

  if (__s1)
  {
    v7 = __s1;
    v8 = (uint64_t)(a3 + 2);
    do
    {
      v9 = strpbrk(v7, __s2);
      v10 = v9;
      if (v9)
        *v9 = 0;
      if (!a4 || *v7)
      {
        v12 = (char **)a3[1];
        v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          v14 = ((char *)v12 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = v11 - (_QWORD)*a3;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v8, v17);
          else
            v18 = 0;
          v19 = (char **)&v18[8 * v14];
          *v19 = v7;
          v13 = v19 + 1;
          v21 = (char *)*a3;
          v20 = (char *)a3[1];
          if (v20 != *a3)
          {
            do
            {
              v22 = (char *)*((_QWORD *)v20 - 1);
              v20 -= 8;
              *--v19 = v22;
            }
            while (v20 != v21);
            v20 = (char *)*a3;
          }
          *a3 = v19;
          a3[1] = v13;
          a3[2] = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v12 = v7;
          v13 = v12 + 1;
        }
        a3[1] = v13;
      }
      v7 = v10 + 1;
    }
    while (v10);
  }
}

unint64_t fst::ConvertToLegalCSymbol(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 23);
  v3 = (_BYTE *)result;
  if (*(char *)(result + 23) < 0)
    v3 = *(_BYTE **)result;
  v4 = MEMORY[0x1E0C80978];
  while (1)
  {
    v5 = v1;
    if ((v2 & 0x80) != 0)
    {
      v5 = *(_QWORD *)v1;
      v2 = *(_QWORD *)(v1 + 8);
    }
    if (v3 == (_BYTE *)(v5 + v2))
      return result;
    v6 = (char)*v3;
    if ((v6 & 0x80000000) == 0)
    {
      result = *(_DWORD *)(v4 + 4 * v6 + 60) & 0x500;
      if ((_DWORD)result)
        goto LABEL_10;
LABEL_9:
      *v3 = 95;
      goto LABEL_10;
    }
    result = __maskrune(v6, 0x500uLL);
    if (!(_DWORD)result)
      goto LABEL_9;
LABEL_10:
    ++v3;
    v2 = *(unsigned __int8 *)(v1 + 23);
  }
}

uint64_t fst::AlignInput()
{
  int v0;
  _BYTE v2[2];
  void *__p[2];
  char v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2[1] = 0;
  v0 = 16;
  while (1)
  {
    std::istream::tellg();
    if (v5 < 0)
      break;
    if (v5 % 16)
    {
      std::istream::read();
      if (--v0)
        continue;
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)v2, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"AlignInput: can't determine stream position", 43);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v2);
  if (v4 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADAE51D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::AlignOutput(_QWORD *a1)
{
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char v7;
  void *__p[2];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = 16;
  while (1)
  {
    v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v3[32] & 5) != 0)
      break;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v3 + 5) + 32))(__p, *((_QWORD *)v3 + 5), 0, 1, 16);
    if (v10 < 0)
      break;
    if (v10 % 16)
    {
      std::ostream::write();
      if (--v2)
        continue;
    }
    v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v4[32] & 5) != 0)
    {
      v5 = -1;
    }
    else
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v4 + 5) + 32))(__p, *((_QWORD *)v4 + 5), 0, 1, 16);
      v5 = v10;
    }
    return v5 % 16 == 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"AlignOutput: can't determine stream position", 44);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v9 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADAE53A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a13);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::FstHeader::Read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string::value_type __c;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    std::istream::tellg();
    v6 = v24;
  }
  else
  {
    v6 = 0;
  }
  std::istream::read();
  std::string::basic_string[abi:ne180100]<0>(v22, "ERROR");
  fst::LogMessage::LogMessage((fst *)&__c, (uint64_t)v22);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"FstHeader::Read: Bad FST header: ", 33);
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = a3;
  else
    v9 = *(_QWORD *)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__c);
  if ((v23 & 0x80000000) == 0)
  {
    if (!a4)
      return 0;
    goto LABEL_14;
  }
  operator delete(v22[0]);
  if (a4)
  {
LABEL_14:
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v21 = v6;
    std::istream::seekg();
  }
  return 0;
}

void sub_1ADAE5738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  if (*(char *)(v13 - 185) < 0)
    operator delete(*(void **)(v13 - 208));
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstHeader::Write()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return 1;
}

std::string *fst::FstReadOptions::FstReadOptions(std::string *this, __int128 *a2, std::string::size_type a3, std::string::size_type a4, std::string::size_type a5)
{
  __int128 v9;
  void *__p[2];
  char v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  this[1].__r_.__value_.__r.__words[0] = a3;
  this[1].__r_.__value_.__l.__size_ = a4;
  this[1].__r_.__value_.__r.__words[2] = a5;
  WORD2(this[2].__r_.__value_.__r.__words[0]) = 257;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)FLAGS_fst_read_mode);
  LODWORD(this[2].__r_.__value_.__l.__data_) = fst::FstReadOptions::ReadMode((uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1ADAE5980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstReadOptions::ReadMode(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  char v15;

  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 != 3)
    {
      if (v4 == 4 && **(_DWORD **)a1 == 1684104562)
        return 0;
      goto LABEL_15;
    }
    v3 = *(_DWORD **)a1;
  }
  else
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    v3 = (_DWORD *)a1;
    if (v2 != 3)
    {
      if (v2 == 4 && *(_DWORD *)a1 == 1684104562)
        return 0;
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Unknown file read mode ", 23);
      v9 = *(char *)(a1 + 23);
      if (v9 >= 0)
        v10 = (_DWORD *)a1;
      else
        v10 = *(_DWORD **)a1;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
      if (v14 < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  v5 = *(unsigned __int16 *)v3;
  v6 = *((unsigned __int8 *)v3 + 2);
  if (v5 != 24941 || v6 != 112)
    goto LABEL_15;
  return 1;
}

void sub_1ADAE5AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::cout(fst *this)
{
  return MEMORY[0x1E0DE4A60];
}

uint64_t fst::cerr(fst *this)
{
  return MEMORY[0x1E0DE4A50];
}

uint64_t fst::cin(fst *this)
{
  return MEMORY[0x1E0DE4948];
}

UChar *quasar::UnicodeCharacterVectorFromUTF8@<X0>(quasar *this@<X0>, UChar **a2@<X8>)
{
  size_t v5;
  int32_t v6;
  UChar *result;
  _QWORD *v8;
  size_t v9;
  _OWORD v10[17];
  UErrorCode pErrorCode;

  v5 = strlen((const char *)this);
  v6 = v5 + 1;
  std::vector<unsigned short>::vector(a2, v5 + 1);
  pErrorCode = U_ZERO_ERROR;
  result = u_strFromUTF8(*a2, v6, 0, (const char *)this, -1, &pErrorCode);
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid UTF8 string:", 20);
    v9 = strlen((const char *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)this, v9);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  return result;
}

void sub_1ADAE5C18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::UTF8StringFromUnicodeCharacterArray(UChar *src@<X0>, int32_t srcLength@<W1>, _QWORD *a3@<X8>)
{
  char *begin;
  int end;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  std::vector<char> v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  UErrorCode pErrorCode[2];

  *(_QWORD *)pErrorCode = 0;
  u_strToUTF8(0, 0, (int32_t *)pErrorCode, src, srcLength, &pErrorCode[1]);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR && pErrorCode[1] != U_BUFFER_OVERFLOW_ERROR)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Could not extract UTF8 length: ", 31);
    v10 = (char *)u_errorName(pErrorCode[1]);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, v10);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  pErrorCode[1] = U_ZERO_ERROR;
  memset(&v14, 0, sizeof(v14));
  if (pErrorCode[0] == -1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<signed char>::__append(&v14, pErrorCode[0] + 1);
    begin = v14.__begin_;
    end = (int)v14.__end_;
  }
  u_strToUTF8(begin, end - (_DWORD)begin, (int32_t *)pErrorCode, src, srcLength, &pErrorCode[1]);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Could not extract UTF8 chars: ", 30);
    v12 = u_errorName(pErrorCode[1]);
    v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  std::string::basic_string[abi:ne180100](a3, v14.__begin_, pErrorCode[0]);
  if (v14.__begin_)
  {
    v14.__end_ = v14.__begin_;
    operator delete(v14.__begin_);
  }
}

uint64_t quasar::URegularExpressionWrapper::initWrappee(quasar::URegularExpressionWrapper *this, const char *__s)
{
  size_t v4;
  int32_t v5;
  size_t v6;
  void *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  UErrorCode pErrorCode;

  pErrorCode = U_ZERO_ERROR;
  v4 = strlen(__s);
  v5 = v4 + 1;
  if ((uint64_t)(v4 + 1) < 0)
    v6 = -1;
  else
    v6 = 2 * (v4 + 1);
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  u_strFromUTF8((UChar *)v7, v5, 0, __s, -1, &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(_QWORD *)this = uregex_open((const UChar *)v7, -1, 0, 0, &pErrorCode);
    if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR && quasar::gLogLevel >= 1)
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Failed to initialize regex: ", 28);
      v11 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__s, v11);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v14);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Invalid UTF8 string:", 20);
    v9 = strlen(__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__s, v9);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v14);
  }
  v12 = pErrorCode;
  MEMORY[0x1AF44D160](v7, 0x1000C80BDFB0063);
  return v12;
}

void sub_1ADAE6010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D160](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

quasar::URegularExpressionWrapper *quasar::URegularExpressionWrapper::URegularExpressionWrapper(quasar::URegularExpressionWrapper *this, const char *a2, UErrorCode *a3)
{
  *a3 = quasar::URegularExpressionWrapper::initWrappee(this, a2);
  return this;
}

quasar::URegularExpressionWrapper *quasar::URegularExpressionWrapper::URegularExpressionWrapper(quasar::URegularExpressionWrapper *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _OWORD v6[17];

  v2 = a2;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  if ((int)quasar::URegularExpressionWrapper::initWrappee(a1, (const char *)a2) >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Regex compilation failed for:", 29);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, v2);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return a1;
}

void quasar::URegularExpressionWrapper::~URegularExpressionWrapper(URegularExpression **this)
{
  URegularExpression *v1;

  v1 = *this;
  if (v1)
    uregex_close(v1);
}

void quasar::URegularExpressionWrapper::replaceAllUTextWithSpace(URegularExpression **this@<X0>, UText **a2@<X1>, UErrorCode *a3@<X2>, UText **a4@<X8>)
{
  _QWORD *v7;
  const char *v8;
  size_t v9;
  UText *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  UText *v14;
  UText *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  uregex_setUText(*this, *a2, a3);
  if (*(int *)a3 < 1)
  {
    v10 = utext_openUTF8(0, " ", -1, a3);
    v15 = v10;
    if (*(int *)a3 < 1)
    {
      v14 = uregex_replaceAllUText(*this, v10, 0, a3);
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Could not create space text: ", 29);
        v12 = u_errorName(*a3);
        v13 = strlen(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v16);
      }
      v14 = 0;
    }
    *a4 = v14;
    quasar::UTextWrapper::~UTextWrapper(&v15);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v16);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Could not set regext text: ", 27);
      v8 = u_errorName(*a3);
      v9 = strlen(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v16);
    }
    *a4 = 0;
  }
}

void sub_1ADAE6330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::UTextWrapper::~UTextWrapper((UText **)va);
  _Unwind_Resume(a1);
}

quasar::UTextWrapper *quasar::UTextWrapper::UTextWrapper(quasar::UTextWrapper *this, const char *a2, UErrorCode *status)
{
  *(_QWORD *)this = utext_openUTF8(0, a2, -1, status);
  return this;
}

void quasar::URegularExpressionWrapper::split(URegularExpression **a1@<X0>, char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  quasar *v5;
  int32_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  std::string *v20;
  int v21;
  _QWORD *v22;
  const char *v23;
  size_t v24;
  _QWORD *v25;
  const char *v26;
  size_t v27;
  void *__p[2];
  std::string::size_type v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  int32_t requiredCapacity;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE __v[48];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  UErrorCode status;
  UChar *v53;
  UChar *v54;

  if (a2[23] >= 0)
    v5 = (quasar *)a2;
  else
    v5 = *(quasar **)a2;
  quasar::UnicodeCharacterVectorFromUTF8(v5, &v53);
  status = U_ZERO_ERROR;
  uregex_setText(*a1, v53, -1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Could not set regext text: ", 27);
    v23 = u_errorName(status);
    v24 = strlen(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<unsigned short>::resize((uint64_t)&v34, v54 - v53 + 1);
  requiredCapacity = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)&v30, v54 - v53 + 1);
  v6 = uregex_split(*a1, (UChar *)v34, (unint64_t)(v35 - (_BYTE *)v34) >> 1, &requiredCapacity, (UChar **)v30, (unint64_t)(v31 - (_BYTE *)v30) >> 3, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Error getting capacity for splitting text: ", 43);
    v26 = u_errorName(status);
    v27 = strlen(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  v7 = v6;
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a3, v6);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = 8 * v7;
    do
    {
      quasar::UTF8StringFromUnicodeCharacterArray(*(UChar **)((char *)v30 + v8), -1, __p);
      end = a3->__end_;
      value = a3->__end_cap_.__value_;
      if (end >= value)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
        v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        *(_QWORD *)&__v[32] = &a3->__end_cap_;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&a3->__end_cap_, v16);
        else
          v17 = 0;
        v18 = &v17[24 * v13];
        *(_QWORD *)__v = v17;
        *(_QWORD *)&__v[8] = v18;
        *(_QWORD *)&__v[24] = &v17[24 * v16];
        v19 = *(_OWORD *)__p;
        *((_QWORD *)v18 + 2) = v29;
        *(_OWORD *)v18 = v19;
        __p[1] = 0;
        v29 = 0;
        __p[0] = 0;
        *(_QWORD *)&__v[16] = v18 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(a3, (std::__split_buffer<std::string> *)__v);
        v20 = a3->__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        v21 = SHIBYTE(v29);
        a3->__end_ = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        end->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
        a3->__end_ = end + 1;
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_1ADAE6710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::__split_buffer<std::wstring> *a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void quasar::URegularExpressionWrapper::trim(URegularExpression **a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  quasar *v5;
  unint64_t v6;
  int32_t v7;
  UBool Next;
  int32_t v9;
  int32_t v10;
  int32_t v11;
  int32_t v12;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  const char *v25;
  size_t v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  UErrorCode status;
  UChar *v48;
  UChar *v49;

  if (a2[23] >= 0)
    v5 = (quasar *)a2;
  else
    v5 = *(quasar **)a2;
  quasar::UnicodeCharacterVectorFromUTF8(v5, &v48);
  v6 = (unint64_t)((char *)v49 - (char *)v48) >> 1;
  do
    LODWORD(v6) = v6 - 1;
  while (!v48[(int)v6] && (v6 & 0x80000000) == 0);
  status = U_ZERO_ERROR;
  uregex_setText(*a1, v48, -1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not set regex text: ", 26);
    v25 = u_errorName(status);
    v26 = strlen(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v7 = v6 + 1;
  uregex_setRegion(*a1, 0, v6 + 1, &status);
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not set region: ", 22);
    v28 = u_errorName(status);
    v29 = strlen(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  Next = uregex_findNext(*a1, &status);
  v9 = 0;
  while (Next == 1)
  {
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not trim: ", 16);
      v22 = u_errorName(status);
      v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v10 = uregex_start(*a1, 0, &status);
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not trim: ", 16);
      v19 = u_errorName(status);
      v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v11 = v10;
    v12 = uregex_end(*a1, 0, &status);
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not trim: ", 16);
      v16 = u_errorName(status);
      v17 = strlen(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v12 > v9 && v11 == 0)
      v9 = v12;
    if (v11 < v7 && v12 >= (int)v6)
      v7 = v11;
    Next = uregex_findNext(*a1, &status);
  }
  if (v9 >= v7)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    __p[0] = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(__p, &v48[v9], (uint64_t)&v48[v7], v7 - (unint64_t)v9);
    quasar::UTF8StringFromUnicodeCharacterArray((UChar *)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 1, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1ADAE6C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::URegularExpressionWrapper::replaceAll(URegularExpression **a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  const char *v8;
  size_t v9;
  const char *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  UText *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  void *__p[2];
  uint64_t v25;
  UText *replacement;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  UText *v44;
  UErrorCode status;

  status = U_ZERO_ERROR;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v44 = utext_openUTF8(0, a2, -1, &status);
  if (status < U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (const char *)a3;
    else
      v10 = *(const char **)a3;
    replacement = utext_openUTF8(0, v10, -1, &status);
    if (status < U_ILLEGAL_ARGUMENT_ERROR)
    {
      uregex_setUText(*a1, v44, &status);
      if (status < U_ILLEGAL_ARGUMENT_ERROR)
      {
        v17 = uregex_replaceAllUText(*a1, replacement, 0, &status);
        if (status < U_ILLEGAL_ARGUMENT_ERROR)
        {
          *(_QWORD *)&v27 = v17;
          quasar::UTextWrapper::getUTF8String((UText **)&v27, &status, __p);
          quasar::UTextWrapper::~UTextWrapper((UText **)&v27);
          if (status < U_ILLEGAL_ARGUMENT_ERROR)
          {
            *(_OWORD *)a4 = *(_OWORD *)__p;
            a4[2] = v25;
          }
          else
          {
            if (quasar::gLogLevel >= 1)
            {
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              v38 = 0u;
              v39 = 0u;
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              v32 = 0u;
              v33 = 0u;
              v30 = 0u;
              v31 = 0u;
              v28 = 0u;
              v29 = 0u;
              v27 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
              v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not get utf-8 string: ", 28);
              v22 = u_errorName(status);
              v23 = strlen(v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
            }
            std::string::basic_string[abi:ne180100]<0>(a4, "");
            if (SHIBYTE(v25) < 0)
              operator delete(__p[0]);
          }
          goto LABEL_17;
        }
        if (quasar::gLogLevel >= 1)
        {
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v27 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not replace text with regex: ", 35);
          v19 = u_errorName(status);
          v20 = strlen(v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not set regex text: ", 26);
        v15 = u_errorName(status);
        v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not create to text: ", 26);
      v12 = u_errorName(status);
      v13 = strlen(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
    }
    std::string::basic_string[abi:ne180100]<0>(a4, "");
LABEL_17:
    quasar::UTextWrapper::~UTextWrapper(&replacement);
    goto LABEL_18;
  }
  if (quasar::gLogLevel >= 1)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Could not create input text: ", 29);
    v8 = u_errorName(status);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v27);
  }
  std::string::basic_string[abi:ne180100]<0>(a4, "");
LABEL_18:
  quasar::UTextWrapper::~UTextWrapper(&v44);
}

void sub_1ADAE7038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, UText *a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a14 < 0)
    operator delete(__p);
  quasar::UTextWrapper::~UTextWrapper(&a15);
  quasar::UTextWrapper::~UTextWrapper((UText **)(v18 - 48));
  _Unwind_Resume(a1);
}

void quasar::UTextWrapper::getUTF8String(UText **this@<X0>, UErrorCode *a2@<X1>, _QWORD *a3@<X8>)
{
  UText *v5;
  int64_t v7;
  int32_t v8;
  int32_t v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  int end;
  char *begin;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  const char *v23;
  size_t v24;
  std::vector<char> v25;
  int32_t pDestLength;
  UChar *src;
  UChar *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v5 = *this;
  if (v5)
  {
    v7 = utext_nativeLength(v5);
    v8 = utext_extract(*this, 0, v7, 0, 0, a2);
    if (*(int *)a2 < 1 || *a2 == U_BUFFER_OVERFLOW_ERROR)
    {
      v10 = v8;
      *a2 = U_ZERO_ERROR;
      src = 0;
      v28 = 0;
      v29 = 0;
      std::vector<unsigned short>::resize((uint64_t)&src, v8 + 2);
      utext_extract(*this, 0, v7, src, (unint64_t)((char *)v28 - (char *)src) >> 1, a2);
      if (*(int *)a2 >= 1 && quasar::gLogLevel >= 1)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF16 chars: ", 31);
        v12 = u_errorName(*a2);
        v13 = strlen(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      pDestLength = 0;
      u_strToUTF8(0, 0, &pDestLength, src, v10, a2);
      if (*(int *)a2 >= 1 && *a2 != U_BUFFER_OVERFLOW_ERROR && quasar::gLogLevel >= 1)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF8 length: ", 31);
        v15 = u_errorName(*a2);
        v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      *a2 = U_ZERO_ERROR;
      memset(&v25, 0, sizeof(v25));
      if (pDestLength == -1)
      {
        end = 0;
        begin = 0;
      }
      else
      {
        std::vector<signed char>::__append(&v25, pDestLength + 1);
        begin = v25.__begin_;
        end = (int)v25.__end_;
      }
      u_strToUTF8(begin, end - (_DWORD)begin, &pDestLength, src, v10, a2);
      if (*(int *)a2 >= 1 && quasar::gLogLevel >= 1)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF8 chars: ", 30);
        v23 = u_errorName(*a2);
        v24 = strlen(v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      std::string::basic_string[abi:ne180100](a3, v25.__begin_, pDestLength);
      if (v25.__begin_)
      {
        v25.__end_ = v25.__begin_;
        operator delete(v25.__begin_);
      }
      if (src)
      {
        v28 = src;
        operator delete(src);
      }
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Could not extract UTF16 length: ", 32);
        v20 = u_errorName(*a2);
        v21 = strlen(v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v30);
      }
      std::string::basic_string[abi:ne180100]<0>(a3, "");
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void sub_1ADAE74BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::URegularExpressionWrapper::isMatch(URegularExpression **a1, uint64_t a2)
{
  uint64_t v2;
  UText *v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  int v23;
  _BOOL8 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  UText *v43;
  UErrorCode status;

  v2 = a2;
  status = U_ZERO_ERROR;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  v4 = utext_openUTF8(0, (const char *)a2, -1, &status);
  v43 = v4;
  if (status < U_ILLEGAL_ARGUMENT_ERROR)
  {
    uregex_setUText(*a1, v4, &status);
    if (status < U_ILLEGAL_ARGUMENT_ERROR)
    {
      v18 = uregex_matches(*a1, -1, &status);
      if (status < U_ILLEGAL_ARGUMENT_ERROR)
      {
        v24 = v18 != 0;
        goto LABEL_29;
      }
      if (quasar::gLogLevel >= 1)
      {
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
        v20 = u_errorName(status);
        v21 = strlen(v20);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") Failed to apply regex: ", 25);
        v23 = *(char *)(v2 + 23);
        if (v23 >= 0)
          v11 = v2;
        else
          v11 = *(_QWORD *)v2;
        if (v23 >= 0)
          v12 = *(unsigned __int8 *)(v2 + 23);
        else
          v12 = *(_QWORD *)(v2 + 8);
        goto LABEL_27;
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
      v14 = u_errorName(status);
      v15 = strlen(v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") Could not set regex input: ", 29);
      v17 = *(char *)(v2 + 23);
      if (v17 >= 0)
        v11 = v2;
      else
        v11 = *(_QWORD *)v2;
      if (v17 >= 0)
        v12 = *(unsigned __int8 *)(v2 + 23);
      else
        v12 = *(_QWORD *)(v2 + 8);
      goto LABEL_27;
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"(", 1);
    v6 = u_errorName(status);
    v7 = strlen(v6);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") Could not decode UTF8: ", 25);
    v10 = *(char *)(v2 + 23);
    if (v10 >= 0)
      v11 = v2;
    else
      v11 = *(_QWORD *)v2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v2 + 23);
    else
      v12 = *(_QWORD *)(v2 + 8);
LABEL_27:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v26);
  }
  v24 = 0;
LABEL_29:
  quasar::UTextWrapper::~UTextWrapper(&v43);
  return v24;
}

void sub_1ADAE7814(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::UTextWrapper::~UTextWrapper((UText **)(v1 - 48));
  _Unwind_Resume(a1);
}

void quasar::UTextWrapper::~UTextWrapper(UText **this)
{
  UText *v1;

  v1 = *this;
  if (v1)
    utext_close(v1);
}

UText **quasar::UTextWrapper::operator=(UText **a1, UText **a2)
{
  UText *v4;

  v4 = *a1;
  if (v4)
    utext_close(v4);
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void quasar::getRegexCharSet(char *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  unsigned __int16 *v17;
  uint64_t **v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  _WORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int16 v40;
  _QWORD *v41;
  _QWORD v42[5];
  void *__p;
  char *v44;
  char *v45;
  void *v46[3];
  _BYTE v47[26];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(char **)a1;
  quasar::UnicodeCharacterVectorFromUTF8((quasar *)a1, (UChar **)v46);
  __p = 0;
  v44 = 0;
  v45 = 0;
  *(_OWORD *)v47 = *(_OWORD *)asc_1AE15FD00;
  *(_OWORD *)&v47[10] = *(_OWORD *)&asc_1AE15FD00[5];
  std::unordered_set<unsigned short>::unordered_set((uint64_t)v42, (unsigned __int16 *)v47, 13);
  ubrk_open();
  v41 = a2;
  v3 = ubrk_first();
  v4 = 0;
  v5 = 0;
  while (!v5)
  {
    LODWORD(v6) = v4;
    v4 = v3;
    if (v3 == -1)
      break;
    v7 = (char *)__p;
    v8 = v44;
    v9 = v44 - (_BYTE *)__p;
    if (v44 != __p)
    {
      if (v44 >= v45)
      {
        if (v9 <= -3)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v9 >> 1;
        if (v45 - (_BYTE *)__p <= (unint64_t)((v9 >> 1) + 1))
          v12 = v11 + 1;
        else
          v12 = v45 - (_BYTE *)__p;
        if ((unint64_t)(v45 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v45, v13);
          v7 = (char *)__p;
          v8 = v44;
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[2 * v11];
        *(_WORD *)v15 = 124;
        v10 = v15 + 2;
        while (v8 != v7)
        {
          v16 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *((_WORD *)v15 - 1) = v16;
          v15 -= 2;
        }
        __p = v15;
        v44 = v10;
        v45 = &v14[2 * v13];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_WORD *)v44 = 124;
        v10 = v8 + 2;
      }
      v44 = v10;
    }
    if ((int)v6 >= v4)
    {
      v5 = 0;
    }
    else
    {
      v6 = (int)v6;
      do
      {
        v17 = (unsigned __int16 *)((char *)v46[0] + 2 * v6);
        v5 = *v17 == 0;
        if (!*v17)
          break;
        v18 = std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(v42, v17);
        v20 = v44;
        v19 = v45;
        if (v18)
        {
          if (v44 >= v45)
          {
            v22 = (char *)__p;
            v23 = v44 - (_BYTE *)__p;
            if (v44 - (_BYTE *)__p <= -3)
              goto LABEL_73;
            v24 = v23 >> 1;
            if (v45 - (_BYTE *)__p <= (unint64_t)((v23 >> 1) + 1))
              v25 = v24 + 1;
            else
              v25 = v45 - (_BYTE *)__p;
            if ((unint64_t)(v45 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
              v26 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v45, v26);
              v22 = (char *)__p;
              v20 = v44;
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[2 * v24];
            *(_WORD *)v28 = 92;
            v21 = v28 + 2;
            while (v20 != v22)
            {
              v29 = *((_WORD *)v20 - 1);
              v20 -= 2;
              *((_WORD *)v28 - 1) = v29;
              v28 -= 2;
            }
            v19 = &v27[2 * v26];
            __p = v28;
            v44 = v21;
            v45 = v19;
            if (v22)
            {
              operator delete(v22);
              v19 = v45;
            }
          }
          else
          {
            *(_WORD *)v44 = 92;
            v21 = v20 + 2;
          }
          v44 = v21;
          v20 = v21;
        }
        v30 = v46[0];
        if (v20 >= v19)
        {
          v32 = (char *)__p;
          v33 = v20 - (_BYTE *)__p;
          if (v20 - (_BYTE *)__p < -2)
LABEL_73:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v34 = v33 >> 1;
          v35 = v19 - (_BYTE *)__p;
          v36 = v35 <= (v33 >> 1) + 1 ? v34 + 1 : v35;
          v37 = v35 >= 0x7FFFFFFFFFFFFFFELL ? 0x7FFFFFFFFFFFFFFFLL : v36;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v45, v37);
            v32 = (char *)__p;
            v20 = v44;
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[2 * v34];
          *(_WORD *)v39 = v30[v6];
          v31 = v39 + 2;
          while (v20 != v32)
          {
            v40 = *((_WORD *)v20 - 1);
            v20 -= 2;
            *((_WORD *)v39 - 1) = v40;
            v39 -= 2;
          }
          __p = v39;
          v44 = v31;
          v45 = &v38[2 * v37];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_WORD *)v20 = *((_WORD *)v46[0] + v6);
          v31 = v20 + 2;
        }
        v44 = v31;
        ++v6;
      }
      while (v4 != (_DWORD)v6);
    }
    v3 = ubrk_next();
  }
  ubrk_close();
  *((_WORD *)v44 - 1) = 0;
  quasar::UTF8StringFromUnicodeCharacterArray((UChar *)__p, -1, v41);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v42);
  if (__p)
  {
    v44 = (char *)__p;
    operator delete(__p);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
}

void sub_1ADAE7D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1ADAE7DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<unsigned short>::unordered_set(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 2 * a3;
    do
    {
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADAE7E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADAE8068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

quasar::Config *quasar::Config::Config(quasar::Config *this, quasar::SystemConfig *a2)
{
  char *v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;

  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *((_QWORD *)this + 1) = v4;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 5) = 0x3F7D70A400000001;
  *(_QWORD *)this = v4 + 24;
  *((_QWORD *)this + 6) = 0xBF800000FFFFFFFFLL;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 1;
  *(_QWORD *)((char *)this + 84) = 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 27) = 0x6400000064;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 56) = 1102382323;
  std::string::basic_string[abi:ne180100]<0>(__p, "embedding-retranslation-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 272, 0, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  quasar::QsrTextSymbolTable::Register(*(quasar::QsrTextSymbolTable **)this, a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "pDec model filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 56, (uint64_t)v6, 1, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Phone symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 16, (uint64_t)v6, 1, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-ctc-beam");
  std::string::basic_string[abi:ne180100]<0>(v6, "ctc shortlist beam");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 40, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-ctc-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist posterior mass threshold [0.5-1.0)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 44, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "beam");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default 1) how many paths to keep during search");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rs-beam");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default -1.0 => off) relative-score beam pruning");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 52, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default true) enable-memory-map for model-file");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 80, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-seq-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default 80) how many paths to keep during search");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 84, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "veto-factor");
  std::string::basic_string[abi:ne180100]<0>(v6, "(default 0.0) veto-factor to achieve min-decoding-length");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 88, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-prompt-list");
  std::string::basic_string[abi:ne180100]<0>(v6, "enforce a prompt in beam-decoding from the whitespace separated token list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 144, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist table specifier");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 192, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-cond-n");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist table specifier");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 216, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "shortlist-freq-n");
  std::string::basic_string[abi:ne180100]<0>(v6, "shortlist table specifier");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 220, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "retranslation-embed-scale");
  std::string::basic_string[abi:ne180100]<0>(v6, "pDec encoder embedding scale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 224, (uint64_t)v6, 0, 272, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1ADAE88AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void **v25;
  void **v26;
  void *v28;
  void *v29;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v24 + 215) < 0)
    operator delete(*v26);
  v28 = *(void **)(v24 + 168);
  if (v28)
  {
    *(_QWORD *)(v24 + 176) = v28;
    operator delete(v28);
  }
  if (*(char *)(v24 + 167) < 0)
    operator delete(*v25);
  v29 = *(void **)(v24 + 120);
  if (v29)
  {
    *(_QWORD *)(v24 + 128) = v29;
    operator delete(v29);
  }
  if (*(char *)(v24 + 119) < 0)
    operator delete(*a10);
  if (*(char *)(v24 + 79) < 0)
    operator delete(*a12);
  if (*(char *)(v24 + 39) < 0)
    operator delete(*a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(24 * (v4 - 1) + 32);
  v6 = 0;
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  do
  {
    v7 = *a1 + v6;
    *(_DWORD *)(v7 + 24) = -1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v6 += 24;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a1;
  if (v4)
  {
    BM_free(v4, 24 * ~(-1 << *(_DWORD *)v4) + 32);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(a1, a2);
  }
}

_QWORD *LHash<unsigned int,Trie<unsigned int,unsigned long>>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(a1, 0);
  return a1;
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(_QWORD *a1, unsigned int a2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v20;

  if (!*a1)
    LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(a1, 1u);
  v20 = 0;
  v6 = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(unsigned int *)v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<unsigned int,Trie<unsigned int,unsigned long>>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (unsigned int *)(v7 + 3);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12 != -1)
          {
            LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, *v12, &v20);
            v14 = *a1 + 24 * v20;
            v15 = *((_OWORD *)v12 - 1);
            *(_QWORD *)(v14 + 24) = *(_QWORD *)v12;
            *(_OWORD *)(v14 + 8) = v15;
          }
          v12 += 6;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 24 * v10);
      }
      BM_free(v7, 24 * (v9 - 1) + 32);
      LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate((_DWORD **)a1, a2, &v20);
      v7 = (_QWORD *)*a1;
    }
    LODWORD(v7[3 * v20 + 3]) = a2;
    v16 = 3 * v20;
    v17 = &v7[3 * v20 + 1];
    *v17 = 0;
    v17[1] = 0;
    v18 = *a1 + 8 * v16;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_DWORD *)*a1 += 32;
    v7 = (_QWORD *)*a1;
  }
  return (uint64_t)&v7[3 * v20 + 1];
}

uint64_t LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(unsigned int **a1, unsigned int a2, _OWORD *a3)
{
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unsigned int i;

  i = 0;
  result = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, a2, &i);
  if ((_DWORD)result)
  {
    v6 = *a1;
    (*a1)[6 * i + 6] = -1;
    if (a3)
    {
      *a3 = *(_OWORD *)&v6[6 * i + 2];
      v6 = *a1;
    }
    v7 = *v6;
    v8 = *v6 & 0x1F;
    if (v8 >= 3)
    {
      v10 = (i + 1) & ~(-1 << v8);
      v18 = 0;
      for (i = v10; ; i = v10)
      {
        v11 = v6[6 * v10 + 6];
        if (v11 == -1)
          break;
        v12 = LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v11, &v18);
        v6 = *a1;
        if (!v12)
        {
          v13 = v6 + 2;
          v14 = &v13[6 * v18];
          v15 = 3 * i;
          v16 = &v13[6 * i];
          v17 = *((_QWORD *)v16 + 2);
          *(_OWORD *)v14 = *(_OWORD *)v16;
          *((_QWORD *)v14 + 2) = v17;
          v6 = *a1;
          (*a1)[2 * v15 + 6] = -1;
        }
        v18 = 0;
        v10 = (i + 1) & ~(-1 << *v6);
      }
    }
    else
    {
      v9 = v7 >> 5;
      memmove(&v6[6 * i + 2], &v6[6 * i + 8], 24 * (~i + (v7 >> 5)));
      v6 = *a1;
      (*a1)[6 * v9] = -1;
    }
    *v6 -= 32;
    return 1;
  }
  return result;
}

_DWORD **LHash<unsigned int,Trie<unsigned int,unsigned long>>::memStats(_DWORD **result, uint64_t *a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *a2 + 8;
  *a2 = v2;
  v3 = *result;
  if (*result)
  {
    v4 = 1 << *v3;
    v5 = 24 * (v4 - 1) + 32;
    *a2 = v5 + v2;
    a2[1] += 24 * (v4 - (*v3 >> 5));
    v6 = 256;
    if (v5 < 0x100)
      v6 = 24 * (v4 - 1) + 32;
    ++*((_DWORD *)a2 + v6 + 4);
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 24);
  do
  {
    v8 = *v7;
    v7 += 6;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,unsigned long>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[6 * v16 + 6];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADAE909C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::init(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    *(_DWORD *)(a1 + 12) = **(_DWORD **)a1 >> 5;
    return LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 24 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 24);
  return result;
}

void sub_1ADAE91B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

_DWORD **Trie<unsigned int,unsigned long>::~Trie(_DWORD **a1)
{
  int v3;
  _BYTE v4[24];
  uint64_t v5;

  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v4, a1, 0);
  v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,unsigned long>::~Trie();
  if (v5)
    MEMORY[0x1AF44D160](v5, 0x1000C8052888210);
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(a1, 0);
  return a1;
}

_QWORD *Trie<unsigned int,unsigned long>::insertTrie(_QWORD *result, unsigned int *a2, _BYTE *a3)
{
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;

  if (!a2 || (v5 = *a2, v5 == -1))
  {
LABEL_6:
    *a3 = 1;
  }
  else
  {
    v6 = a2 + 1;
    while (1)
    {
      result = (_QWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(result, v5, a3);
      if (!*a3)
        break;
      v7 = *v6++;
      v5 = v7;
      if (v7 == -1)
        goto LABEL_6;
    }
    v8 = 0;
    return (_QWORD *)Trie<unsigned int,unsigned long>::insertTrie(result, v6, &v8);
  }
  return result;
}

uint64_t Trie<unsigned int,unsigned long>::remove(unsigned int **a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v6;

  v6 = 0uLL;
  v4 = Trie<unsigned int,unsigned long>::removeTrie(a1, a2, &v6);
  if (a3)
    *a3 = *((_QWORD *)&v6 + 1);
  Trie<unsigned int,unsigned long>::~Trie((_DWORD **)&v6);
  return v4;
}

void sub_1ADAE9310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  Trie<unsigned int,unsigned long>::~Trie(&a9);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,unsigned long>::removeTrie(unsigned int **a1, unsigned int *a2, _OWORD *a3)
{
  unsigned int v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v11;

  if (!a2)
    return 0;
  v4 = *a2;
  if (v4 == -1)
    return 0;
  v8 = a2[1];
  v7 = a2 + 1;
  if (v8 != -1)
  {
    LODWORD(v11) = 0;
    if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v4, &v11))
      return Trie<unsigned int,unsigned long>::removeTrie(&(*a1)[6 * v11 + 2], v7, a3);
    return 0;
  }
  if (!a3)
  {
    v11 = 0uLL;
    if (LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, &v11))
    {
      Trie<unsigned int,unsigned long>::~Trie((_DWORD **)&v11);
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    Trie<unsigned int,unsigned long>::~Trie((_DWORD **)&v11);
    return v9;
  }
  return LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, a3);
}

void sub_1ADAE940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  Trie<unsigned int,unsigned long>::~Trie(&a9);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,unsigned long>::memStats(_DWORD **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[24];
  uint64_t v8;

  *a2 += 8;
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::memStats(a1, a2);
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v7, a1, 0);
  v6 = 0;
  while (1)
  {
    v4 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v7, &v6);
    if (!v4)
      break;
    *a2 -= 16;
    Trie<unsigned int,unsigned long>::memStats(v4, a2);
  }
  result = v8;
  if (v8)
    return MEMORY[0x1AF44D160](v8, 0x1000C8052888210);
  return result;
}

void sub_1ADAE94B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t TrieIter2<unsigned int,unsigned long>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  _DWORD *v6;

  v6 = a3;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter(a1 + 32, a2, a5);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (!a4)
    goto LABEL_4;
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,unsigned long>::init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v2);
    MEMORY[0x1AF44D190](v3, 0x10F0C40A7879D68);
  }
  *(_QWORD *)(a1 + 64) = 0;
  result = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::init(a1 + 32);
  *(_BYTE *)(a1 + 72) = 0;
  return result;
}

uint64_t TrieIter2<unsigned int,unsigned long>::next(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      return LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (v4)
        goto LABEL_9;
      while (1)
      {
        result = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
        if (!result)
          break;
        v5 = (_DWORD **)result;
        v4 = operator new();
        TrieIter2<unsigned int,unsigned long>::TrieIter2(v4, v5, (_DWORD *)(*(_QWORD *)(a1 + 8) + 4), *(_DWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 64) = v4;
LABEL_9:
        result = TrieIter2<unsigned int,unsigned long>::next(v4);
        if (result)
          break;
        v6 = *(_QWORD *)(a1 + 64);
        if (v6)
        {
          v7 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v6);
          MEMORY[0x1AF44D190](v7, 0x10F0C40A7879D68);
        }
        *(_QWORD *)(a1 + 64) = 0;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
    return *(_QWORD *)a1;
  }
  return result;
}

void sub_1ADAE9690(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

void NgramCounts<unsigned long>::NgramCounts(LMStats *a1, Vocab *a2, int a3)
{
  uint64_t v4;

  LMStats::LMStats(a1, a2);
  *(_QWORD *)v4 = &unk_1E5D15AB8;
  *(_BYTE *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 156) = a3;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
}

void NgramCounts<unsigned long>::~NgramCounts(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_DWORD **NgramCounts<unsigned long>::findCount(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  _DWORD **result;
  char v5;

  v5 = 0;
  result = (_DWORD **)Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a1 + 160), a2, &v5);
  if (result)
    return (_DWORD **)Trie<unsigned int,unsigned int>::find(result, a3);
  return result;
}

_DWORD *NgramCounts<unsigned long>::insertCount(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  _QWORD *inserted;
  _DWORD *v5;
  char v7;
  char v8;

  v7 = 0;
  inserted = Trie<unsigned int,unsigned long>::insertTrie((_QWORD *)(a1 + 160), a2, &v7);
  v8 = 0;
  v5 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(inserted, a3, &v8);
  if (!v8)
    *v5 = 0;
  return v5 + 2;
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, 1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, 1);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;

  if (*a3 == 45)
    return 0;
  v6 = 0;
  if (sscanf(a3, "%lu", &v6) != 1)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, v6);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = (_QWORD *)_ZTW20countSentenceWidsTLS();
  v7 = (void *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *v8 = v7;
  }
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *v9;
  if (*(_BYTE *)(a1 + 32))
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 256))(*(_QWORD *)(a1 + 24), a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    v12 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v10 + 88))(*(_QWORD *)(a1 + 24));
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*v9 + 272))(v9, a2, (uint64_t)v7 + 4, 50001, *v12);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7, v11, a3);
}

{
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = (_QWORD *)_ZTW20countSentenceWidsTLS();
  v7 = (void *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *v8 = v7;
  }
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *v9;
  if (*(_BYTE *)(a1 + 32))
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 264))(*(_QWORD *)(a1 + 24), a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    v12 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v10 + 88))(*(_QWORD *)(a1 + 24));
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*v9 + 280))(v9, a2, (uint64_t)v7 + 4, 50001, *v12);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7, v11, a3);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)_ZTW20countSentenceWidsTLS();
  v5 = (_DWORD *)*v4;
  if (!*v4)
  {
    v6 = v4;
    v5 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *v6 = v5;
  }
  v7 = 0;
  v8 = *a2;
  v9 = (a2[1] - *a2) >> 2;
  while (v9 != v7)
  {
    v5[v7 + 1] = *(_DWORD *)(v8 + 4 * v7);
    if (++v7 == 50000)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  }
  v5[(v9 + 1)] = -1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t NgramCounts<unsigned long>::countSentenceHelper(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4)
{
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;

  if (a3 == 50001)
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v9 = 1;
  else
    v9 = a3 == 0;
  if (!v9)
  {
    v10 = 1;
    do
    {
      v11 = a2[v10];
      if (v11 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
        *(double *)(a1 + 72) = *(double *)(a1 + 72) + 1.0;
      ++v10;
    }
    while (v10 <= a3);
  }
  if (*(_BYTE *)(a1 + 33)
    && (v12 = a2[1],
        v12 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24))))
  {
    *a2 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
    v13 = a2;
  }
  else
  {
    v13 = a2 + 1;
  }
  if (*(_BYTE *)(a1 + 34))
  {
    v14 = a2[a3];
    if (v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24)))
    {
      a2[a3 + 1] = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
      a2[a3 + 2] = -1;
    }
  }
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v13, a4);
}

uint64_t NgramCounts<unsigned long>::countSentence(uint64_t a1, int *a2, uint64_t a3)
{
  int *v3;
  uint64_t v6;
  int v7;
  int v8;

  v3 = a2;
  if (*a2 == -1)
  {
    v6 = 0;
    v7 = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      NgramCounts<unsigned long>::incrementCounts(a1, (uint64_t)a2, 1u, a3);
      v6 = (v6 + 1);
      a2 = &v3[v6];
    }
    while (*a2 != -1);
    v7 = *v3;
  }
  *(double *)(a1 + 64) = *(double *)(a1 + 64) + (double)v6;
  if (v7 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24)))
    *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
  if ((_DWORD)v6)
  {
    v8 = v3[(v6 - 1)];
    if (v8 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24)))
      *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
  }
  *(double *)(a1 + 56) = *(double *)(a1 + 56) + 1.0;
  return v6;
}

uint64_t NgramCounts<unsigned long>::incrementCounts(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;

  if (*(_DWORD *)(result + 156))
  {
    v6 = result;
    v7 = 0;
    result += 160;
    v8 = a3;
    do
    {
      v9 = *(_DWORD *)(a2 + 4 * v7);
      if (v9 == -1)
        break;
      v10 = 0;
      result = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert((_QWORD *)result, v9, &v10);
      if (!v10)
        *(_DWORD *)result = 0;
      if (++v7 >= v8)
        *(_QWORD *)(result + 8) += a4;
    }
    while (v7 < *(unsigned int *)(v6 + 156));
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::read(uint64_t a1, File *a2)
{
  return NgramCounts<unsigned long>::read(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<unsigned long>::read(uint64_t a1, File *this, unsigned int a3, uint64_t a4)
{
  char *v8;
  unsigned int i;
  uint64_t Binary;
  _BYTE v12[104];
  char *v13;
  unsigned int v14[101];
  char v15[808];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = File::getline(this);
  if (v8)
  {
    memset(v15, 0, 512);
    v13 = 0;
    if (!strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
    {
      File::File((File *)v12, *(const char **)this, "rb", 1);
      Binary = NgramCounts<unsigned long>::readBinary(a1, (File *)v12, a3, a4);
      File::~File((File *)v12);
      return Binary;
    }
    File::ungetline((uint64_t)this);
    for (i = NgramCounts<unsigned long>::readNgram(this, v15, (const char **)0x65, &v13);
          i;
          i = NgramCounts<unsigned long>::readNgram(this, v15, (const char **)0x65, &v13))
    {
      NgramCounts<unsigned long>::updateCounts(a1, i, a3, a4, (uint64_t)v13, (uint64_t)v15, v14);
    }
  }
  return 1;
}

void sub_1ADAE9F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<unsigned long>::readBinary(uint64_t a1, File *this, int a3, uint64_t a4)
{
  char *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  _QWORD *v15;
  int *v16;
  char *v17;
  size_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  off_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  std::locale v26;

  v8 = File::getline(this);
  if (!v8 || strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
  {
    v9 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v10 = "bad binary format\n";
    v11 = 18;
LABEL_4:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    return 0;
  }
  v14 = File::getline(this);
  v25 = 0;
  if (sscanf(v14, "maxorder %u", &v25) != 1)
  {
    v9 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v10 = "could not read ngram order\n";
    v11 = 27;
    goto LABEL_4;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  if ((*(unsigned int (**)(_QWORD, File *, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 336))(*(_QWORD *)(a1 + 24), this, &v22, a4))
  {
    v21 = File::ftell(this);
    if ((v21 & 0x8000000000000000) == 0)
    {
      v12 = NgramCounts<unsigned long>::readBinaryNode(a1, (_DWORD **)(a1 + 160), a3, v25, this, &v21, a4, (int *)&v22);
      goto LABEL_13;
    }
    v15 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v16 = __error();
    v17 = srilm_ts_strerror(*v16);
    v18 = strlen(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
  }
  v12 = 0;
LABEL_13:
  if (v23)
    MEMORY[0x1AF44D160](v23, 0x1000C8052888210);
  return v12;
}

void sub_1ADAEA168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  std::locale::~locale((std::locale *)(v13 - 40));
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

Vocab *NgramCounts<unsigned long>::readNgram(File *a1, char *a2, const char **a3, char **a4)
{
  Vocab *result;
  _QWORD *v9;
  _QWORD *v10;

  result = (Vocab *)File::getline(a1);
  if (result)
  {
    result = (Vocab *)NgramCounts<unsigned long>::parseNgram(result, a2, a3, a4);
    if (!(_DWORD)result)
    {
      v9 = File::position((const char **)a1, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"malformed N-gram count or more than ", 36);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" words per line\n", 16);
      return 0;
    }
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::updateCounts(uint64_t result, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  _DWORD **v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 <= a3)
  {
    v19 = v7;
    v20 = v8;
    v12 = result;
    if (a4)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(result + 24) + 288))(*(_QWORD *)(result + 24), a6, a7, 100);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v13 = *(uint64_t **)(result + 24);
      v14 = *v13;
      if (*(_BYTE *)(result + 32))
      {
        (*(void (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(v14 + 256))(*(_QWORD *)(result + 24), a6, a7, 100);
      }
      else
      {
        v15 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v14 + 88))(*(_QWORD *)(result + 24));
        (*(void (**)(uint64_t *, uint64_t, unsigned int *, uint64_t, _QWORD))(*v13 + 272))(v13, a6, a7, 100, *v15);
      }
    }
    v16 = (_DWORD **)(v12 + 160);
    if (*(_BYTE *)(v12 + 152))
    {
      v17 = 0;
      result = Trie<unsigned int,unsigned int>::findTrie(v16, a7, &v17);
      if (!result)
        return result;
    }
    else
    {
      v18 = 0;
      result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v16, a7, &v18);
    }
    *(_QWORD *)(result + 8) += a5;
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::read(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int Ngram;
  char v11;
  uint64_t v12;
  uint64_t *v14;
  unsigned int v15[101];
  _OWORD v16[50];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, 512);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = *(uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v14 = v8;
    v9 = *v8;
    if (v8[10] == v8[11])
    {
      Ngram = NgramCounts<unsigned long>::readNgram(v8 + 4, (uint64_t ***)v16, 0x65u);
      if (!Ngram)
      {
        v11 = 0;
        goto LABEL_8;
      }
      NgramCounts<unsigned long>::updateCounts(a1, Ngram, a3, a4, v9, (uint64_t)v16, v15);
    }
    else
    {
      NgramCounts<unsigned long>::updateCounts(a1, a3, a4, *v8, v8 + 10, v15);
    }
    v11 = 1;
LABEL_8:
    v12 = (uint64_t)v14;
    v14 = 0;
    if (v12)
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    if ((v11 & 1) == 0)
      return 1;
  }
  return 1;
}

void sub_1ADAEA4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10;

  v10 = a9;
  a9 = 0;
  if (v10)
    std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&a9, v10);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::updateCounts(uint64_t result, unsigned int a2, int a3, uint64_t a4, _QWORD *a5, unsigned int *a6)
{
  uint64_t v8;
  _DWORD **v9;
  char v10;
  char v11;

  if (a2 >= (unint64_t)((uint64_t)(a5[1] - *a5) >> 2))
  {
    v8 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD *, unsigned int *, uint64_t, BOOL))(**(_QWORD **)(result + 24)
                                                                                        + 296))(*(_QWORD *)(result + 24), a5, a6, 100, a3 != 0);
    if ((_DWORD)result)
    {
      v9 = (_DWORD **)(v8 + 160);
      if (*(_BYTE *)(v8 + 152))
      {
        v10 = 0;
        result = Trie<unsigned int,unsigned int>::findTrie(v9, a6, &v10);
        if (!result)
          return result;
      }
      else
      {
        v11 = 0;
        result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v9, a6, &v11);
      }
      *(_QWORD *)(result + 8) += a4;
    }
  }
  return result;
}

int64_t NgramCounts<unsigned long>::readNgram(_QWORD *a1, uint64_t ***a2, unsigned int a3)
{
  int64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;

  if (!a1)
    return 0;
  v3 = a1[1] - *a1;
  if (v3)
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    if (v3 >= a3 || (_DWORD)v3 == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"malformed N-gram count or more than ", 36);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" words per line\n", 16);
      return 0;
    }
    else
    {
      v6 = 0;
      a2[v3] = 0;
      do
      {
        v7 = (uint64_t **)(*a1 + v6);
        if (*((char *)v7 + 23) < 0)
          v7 = (uint64_t **)*v7;
        *a2++ = v7;
        v6 += 24;
      }
      while (24 * v3 != v6);
    }
  }
  return v3;
}

uint64_t NgramCounts<unsigned long>::readGoogle(uint64_t a1, char *__s, unsigned int a3, unsigned int a4)
{
  size_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int i;
  char *v20;
  char *v21;
  uint64_t v22;
  char **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Vocab *v29;
  uint64_t v30;
  const char **v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  void ***v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  std::locale v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49[13];
  int v50;
  _BYTE v51[12];
  int v52;
  std::locale v53;

  v5 = strlen(__s);
  *(_DWORD *)&v51[8] = 0;
  v52 = 0;
  v6 = v5 + 20;
  v50 = 0;
  *(_QWORD *)v51 = (v5 + 20);
  if ((_DWORD)v5 == -20)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    Array<char>::alloc((uint64_t)&v50, v5 + 19, 0);
    v7 = *(_QWORD *)&v51[4];
    v8 = v50;
  }
  snprintf((char *)(v7 - v8), v6, "%s/1gms/vocab%s", __s, ".gz");
  File::File((File *)v49, (const char *)(*(_QWORD *)&v51[4] - v50), "r", 0);
  if (File::error((File *)v49))
  {
    snprintf((char *)(*(_QWORD *)&v51[4] - v50), v6, "%s/1gms/vocab", __s);
    File::reopen((File *)v49, (const char *)(*(_QWORD *)&v51[4] - v50), "r");
  }
  if (!File::error((File *)v49))
  {
    if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"reading ", 8);
      v11 = strlen((const char *)(*(_QWORD *)&v51[4] - v50));
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)&v51[4] - v50, v11);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
      v13 = std::locale::use_facet(&v45, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v45);
      std::ostream::put();
      std::ostream::flush();
    }
    v14 = NgramCounts<unsigned long>::read(a1, (File *)v49, 1u, a4);
    File::~File((File *)v49);
    if (!v14)
      goto LABEL_52;
    if (a3 < 2)
    {
      v15 = 1;
      goto LABEL_53;
    }
    v16 = 2;
    while (1)
    {
      snprintf((char *)(*(_QWORD *)&v51[4] - v50), v6, "%s/%dgms/%dgm.idx", __s, v16, v16);
      File::File((File *)v49, (const char *)(*(_QWORD *)&v51[4] - v50), "r", 0);
      if (File::error((File *)v49))
        break;
      v17 = 0;
      v18 = v16 + 1;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      for (i = -1; ; ++i)
      {
        v20 = File::getline((File *)v49);
        if (!v20)
          break;
        v21 = strdup(v20);
        v22 = operator new[]();
        *(_QWORD *)v22 = v21;
        if (Vocab::parseWords((Vocab *)v21, (char *)(v22 + 8), (const char **)(v16 + 2), v23) != v18)
        {
          v39 = File::position(v49, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"malformed index entry\n", 22);
          goto LABEL_43;
        }
        v24 = (_QWORD *)Array<char const**>::operator[]((int *)&v46, v17++);
        *v24 = v22;
      }
      if (File::error((File *)v49))
      {
        perror((const char *)(*(_QWORD *)&v51[4] - v50));
      }
      else
      {
        if (!v17)
        {
LABEL_38:
          v15 = 1;
          goto LABEL_44;
        }
        v25 = 0;
        while (1)
        {
          v26 = *(_QWORD *)&v51[4];
          v27 = v50;
          v28 = Array<char const**>::operator[]((int *)&v46, v25);
          snprintf((char *)(v26 - v27), v6, "%s/%dgms/%s", __s, v16, *(const char **)(*(_QWORD *)v28 + 8));
          File::File((File *)&v45, (const char *)(*(_QWORD *)&v51[4] - v50), "r", 0);
          if (File::error((File *)&v45))
            break;
          if (!a4
            || ((v29 = *(Vocab **)(a1 + 24), v30 = *(_QWORD *)Array<char const**>::operator[]((int *)&v46, v25),
                                             i != v25)
              ? (v31 = (const char **)(*(_QWORD *)Array<char const**>::operator[]((int *)&v46, v25 + 1) + 16))
              : (v31 = 0),
                Vocab::ngramsInRange(v29, (const char **)(v30 + 16), v31)))
          {
            if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
            {
              v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
              v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading ", 8);
              v34 = strlen((const char *)(*(_QWORD *)&v51[4] - v50));
              v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, *(_QWORD *)&v51[4] - v50, v34);
              std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
              v36 = std::locale::use_facet(&v53, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
              std::locale::~locale(&v53);
              std::ostream::put();
              std::ostream::flush();
            }
            if (!NgramCounts<unsigned long>::read(a1, (File *)&v45, v16, a4))
              goto LABEL_42;
          }
          if (File::error((File *)&v45))
            break;
          v37 = (void ***)Array<char const**>::operator[]((int *)&v46, v25);
          free(**v37);
          v38 = *(_QWORD *)Array<char const**>::operator[]((int *)&v46, v25);
          if (v38)
            MEMORY[0x1AF44D160](v38, 0x50C80EE9192B6);
          File::~File((File *)&v45);
          if (v17 == ++v25)
            goto LABEL_38;
        }
        perror((const char *)(*(_QWORD *)&v51[4] - v50));
LABEL_42:
        File::~File((File *)&v45);
      }
LABEL_43:
      v15 = 0;
LABEL_44:
      if (v47)
        MEMORY[0x1AF44D160](v47, 0x80C80B8603338);
      File::~File((File *)v49);
      if (v18 <= a3)
        v40 = v15;
      else
        v40 = 0;
      ++v16;
      if ((v40 & 1) == 0)
        goto LABEL_53;
    }
  }
  perror((const char *)(*(_QWORD *)&v51[4] - v50));
  File::~File((File *)v49);
LABEL_52:
  v15 = 0;
LABEL_53:
  if (*(_QWORD *)&v51[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v51[4], 0x1000C8077774924);
  return v15;
}

void sub_1ADAEAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;

  std::locale::~locale(&a15);
  File::~File((File *)&a31);
  v33 = *(_QWORD *)(v31 - 112);
  if (v33)
    MEMORY[0x1AF44D160](v33, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<unsigned long>::readMinCounts(_QWORD *a1, File *this, unsigned int a3, uint64_t a4, int a5)
{
  char *v10;
  _QWORD *v11;
  Vocab *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  _DWORD **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *i;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[404];
  _OWORD v35[51];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v10 = File::getline(this);
  if (v10)
  {
    if (!strcmp(v10, "SRILM_BINARY_COUNTS_001\n"))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"binary format not yet support in readMinCounts\n", 47);
      return 0;
    }
    File::ungetline((uint64_t)this);
    memset(v35, 0, 512);
    v11 = (_QWORD *)operator new[]();
    *v11 = 8;
    v13 = (uint64_t)(v11 + 2);
    v26 = v11;
    v11[1] = a3;
    v14 = v11 + 1;
    if (a3)
    {
      bzero(v11 + 2, 8 * a3);
      LODWORD(v31) = 0;
      HIDWORD(v31) = a3;
      v32 = 0;
      v33 = 0;
      Array<char>::alloc((uint64_t)&v31, a3 - 1, 0);
      LODWORD(v28) = 0;
      HIDWORD(v28) = a3;
      v29 = 0;
      v30 = 0;
      Array<unsigned int *>::alloc((uint64_t)&v28, a3 - 1, 0);
      v15 = 0;
      do
      {
        v16 = operator new[]();
        v17 = v15 - v28;
        *(_QWORD *)(v29 + 8 * (v15 - (int)v28)) = v16;
        **(_DWORD **)(v29 + 8 * v17) = -1;
        *(_BYTE *)(v32 + v15 - (int)v31) = 0;
        ++v15;
      }
      while (a3 != v15);
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
    }
    Vocab::setCompareVocab(0, v12);
    for (i = 0;
          ;
          NgramCounts<unsigned long>::updateCountsMinCounts(a1, v19, a3, a4, (const unsigned int *)i, a5, (uint64_t)v35, (Vocab *)v34, v29 - 8 * (int)v28, v32 - (int)v31, v13))
    {
      v19 = NgramCounts<unsigned long>::readNgram(this, (char *)v35, (const char **)0x65, &i);
      if (!v19)
        break;
    }
    if (a3)
    {
      v20 = a3 - 1;
      v21 = (_DWORD **)&v26[a3 + 1];
      do
      {
        v22 = v29;
        v23 = v28;
        if (*(_BYTE *)(v32 + (int)(v20 - v31)))
        {
          NgramCounts<unsigned long>::addCounts((uint64_t)a1, *(unsigned int **)(v29 + 8 * (int)(v20 - v28)), v21);
          v22 = v29;
          v23 = v28;
        }
        v24 = *(_QWORD *)(v22 + 8 * (int)(v20 - v23));
        if (v24)
          MEMORY[0x1AF44D160](v24, 0x1000C8052888210);
        --v21;
        --v20;
      }
      while (v20 != -1);
    }
    if (*v14)
    {
      v25 = *v14;
      do
        LHash<unsigned int,double>::clear(&v14[v25--], 0);
      while (v25 * 8);
    }
    MEMORY[0x1AF44D160](v26, 0x80C80B8603338);
    if (v29)
      MEMORY[0x1AF44D160](v29, 0x10C80436913F5);
    if (v32)
      MEMORY[0x1AF44D160](v32, 0x1000C8077774924);
  }
  return 1;
}

void sub_1ADAEB03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    MEMORY[0x1AF44D160](a18, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

_QWORD *NgramCounts<unsigned long>::updateCountsMinCounts(_QWORD *result, unsigned int a2, unsigned int a3, uint64_t a4, const unsigned int *a5, int a6, uint64_t a7, Vocab *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;

  if (a2 <= a3)
  {
    v16 = (uint64_t)result;
    if (*(_QWORD *)(a4 + 8 * (a2 - 1)) <= (unint64_t)a5)
    {
      v17 = -1;
      if (a6)
      {
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, Vocab *, uint64_t))(**(_QWORD **)(v16 + 24) + 288))(*(_QWORD *)(v16 + 24), a7, a8, 100);
        if (!(_DWORD)result)
          return result;
        return NgramCounts<unsigned long>::updateMinCountsHelper(v16, a2, a5, v17, a8, a9, a10, a11);
      }
    }
    else
    {
      if (!(_DWORD)a5)
        return result;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, const unsigned int *))(*(_QWORD *)result[3] + 240))(result[3], a5);
      v17 = result;
      if ((_DWORD)result == -1)
        return result;
      if (a6)
        goto LABEL_7;
    }
    v18 = *(uint64_t **)(v16 + 24);
    v19 = *v18;
    if (*(_BYTE *)(v16 + 32))
    {
      (*(void (**)(_QWORD, uint64_t, Vocab *, uint64_t))(v19 + 256))(*(_QWORD *)(v16 + 24), a7, a8, 100);
    }
    else
    {
      v20 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v19 + 88))(*(_QWORD *)(v16 + 24));
      (*(void (**)(uint64_t *, uint64_t, Vocab *, uint64_t, _QWORD))(*v18 + 272))(v18, a7, a8, 100, *v20);
    }
    return NgramCounts<unsigned long>::updateMinCountsHelper(v16, a2, a5, v17, a8, a9, a10, a11);
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::addCounts(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  int v4;
  _DWORD **v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE v12[24];
  uint64_t v13;
  char v14;

  v4 = *(unsigned __int8 *)(a1 + 152);
  v5 = (_DWORD **)(a1 + 160);
  v12[0] = 0;
  if (v4)
    result = Trie<unsigned int,unsigned int>::findTrie(v5, a2, v12);
  else
    result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v5, a2, v12);
  v7 = (_QWORD *)result;
  if (result)
  {
    LHashIter<unsigned int,unsigned long>::LHashIter((uint64_t)v12, a3, 0);
    v11 = 0;
    while (1)
    {
      v8 = (uint64_t *)LHashIter<unsigned int,unsigned long>::next((uint64_t)v12, &v11);
      if (!v8)
        break;
      v9 = *v8;
      v14 = 0;
      v10 = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(v7, v11, &v14);
      if (!v14)
        *(_DWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) += v9;
    }
    result = v13;
    if (v13)
      return MEMORY[0x1AF44D160](v13, 0x1000C8052888210);
  }
  return result;
}

void sub_1ADAEB2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::readMinCounts(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  Vocab *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const unsigned int *v20;
  unsigned int Ngram;
  char v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD **v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[404];
  _OWORD v40[51];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = 8 * a3;
  memset(v40, 0, 512);
  v12 = (_QWORD *)operator new[]();
  *v12 = 8;
  v14 = (uint64_t)(v12 + 2);
  v31 = v12;
  v12[1] = v10;
  v15 = v12 + 1;
  if (a3)
  {
    bzero(v12 + 2, v11);
    LODWORD(v36) = 0;
    HIDWORD(v36) = a3;
    v37 = 0;
    v38 = 0;
    Array<char>::alloc((uint64_t)&v36, a3 - 1, 0);
    LODWORD(v33) = 0;
    HIDWORD(v33) = a3;
    v34 = 0;
    v35 = 0;
    Array<unsigned int *>::alloc((uint64_t)&v33, a3 - 1, 0);
    v16 = 0;
    do
    {
      v17 = operator new[]();
      v18 = v16 - v33;
      *(_QWORD *)(v34 + 8 * (v16 - (int)v33)) = v17;
      **(_DWORD **)(v34 + 8 * v18) = -1;
      *(_BYTE *)(v37 + v16 - (int)v36) = 0;
      ++v16;
    }
    while (a3 != v16);
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
  }
  Vocab::setCompareVocab(0, v13);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v19 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v32 = v19;
    v20 = *(const unsigned int **)v19;
    if (*(_QWORD *)(v19 + 80) == *(_QWORD *)(v19 + 88))
    {
      Ngram = NgramCounts<unsigned long>::readNgram((_QWORD *)(v19 + 32), (uint64_t ***)v40, 0x65u);
      if (!Ngram)
      {
        v22 = 0;
        goto LABEL_13;
      }
      NgramCounts<unsigned long>::updateCountsMinCounts(a1, Ngram, a3, a4, v20, a5, (uint64_t)v40, (Vocab *)v39, v34 - 8 * (int)v33, v37 - (int)v36, v14);
    }
    else
    {
      NgramCounts<unsigned long>::updateCountsMinCounts(a1, a3, a4, v20, a5, (_QWORD *)(v19 + 80), (Vocab *)v39, v34 - 8 * (int)v33, v37 - (int)v36, v14);
    }
    v22 = 1;
LABEL_13:
    v23 = v32;
    v32 = 0;
    if (v23)
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v32, v23);
    if ((v22 & 1) == 0)
      break;
  }
  if (a3)
  {
    v24 = a3 - 1;
    v25 = (_DWORD **)&v31[a3 + 1];
    do
    {
      v26 = v34;
      v27 = v33;
      if (*(_BYTE *)(v37 + (int)(v24 - v36)))
      {
        NgramCounts<unsigned long>::addCounts((uint64_t)a1, *(unsigned int **)(v34 + 8 * (int)(v24 - v33)), v25);
        v26 = v34;
        v27 = v33;
      }
      v28 = *(_QWORD *)(v26 + 8 * (int)(v24 - v27));
      if (v28)
        MEMORY[0x1AF44D160](v28, 0x1000C8052888210);
      --v25;
      --v24;
    }
    while (v24 != -1);
  }
  if (*v15)
  {
    v29 = *v15;
    do
      LHash<unsigned int,double>::clear(&v15[v29--], 0);
    while (v29 * 8);
  }
  MEMORY[0x1AF44D160](v31, 0x80C80B8603338);
  if (v34)
    MEMORY[0x1AF44D160](v34, 0x10C80436913F5);
  if (v37)
    MEMORY[0x1AF44D160](v37, 0x1000C8077774924);
  return 1;
}

void sub_1ADAEB6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    MEMORY[0x1AF44D160](a18, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

_QWORD *NgramCounts<unsigned long>::updateCountsMinCounts(_QWORD *result, unsigned int a2, uint64_t a3, const unsigned int *a4, int a5, _QWORD *a6, Vocab *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10;
  uint64_t v16;
  unsigned int v17;

  v10 = (uint64_t)(a6[1] - *a6) >> 2;
  if (v10 <= a2)
  {
    v16 = (uint64_t)result;
    if (*(_QWORD *)(a3 + 8 * (v10 - 1)) <= (unint64_t)a4)
    {
      v17 = -1;
    }
    else
    {
      if (!(_DWORD)a4)
        return result;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, const unsigned int *))(*(_QWORD *)result[3] + 240))(result[3], a4);
      v17 = result;
      if ((_DWORD)result == -1)
        return result;
    }
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, Vocab *, uint64_t, BOOL))(**(_QWORD **)(v16 + 24)
                                                                                           + 296))(*(_QWORD *)(v16 + 24), a6, a7, 100, a5 != 0);
    if ((_DWORD)result)
      return NgramCounts<unsigned long>::updateMinCountsHelper(v16, (a6[1] - *a6) >> 2, a4, v17, a7, a8, a9, a10);
  }
  return result;
}

uint64_t NgramCounts<unsigned long>::write(uint64_t a1, File *a2)
{
  return NgramCounts<unsigned long>::write(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<unsigned long>::write(uint64_t a1, File *a2, unsigned int a3, unsigned int a4)
{
  char **v8;
  char *v9;
  char **v10;

  v8 = (char **)_ZTW14writeBufferTLS();
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = (char *)malloc_type_calloc(0x2710uLL, 1uLL, 0x100004077774924uLL);
    *v10 = v9;
  }
  return NgramCounts<unsigned long>::writeNode(a1, (_DWORD **)(a1 + 160), a2, v9, v9, 1u, a3, a4);
}

uint64_t NgramCounts<unsigned long>::writeNode(uint64_t a1, _DWORD **a2, File *a3, const char *a4, char *a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  uint64_t (*v14)(Vocab *, uint64_t);
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  char *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t result;
  int v30;
  _BYTE v31[24];
  uint64_t v32;
  unsigned int v33;

  if (a8)
    v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
  else
    v14 = 0;
  v33 = 0;
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v31, a2, (uint64_t)v14);
  if (a7)
    v15 = a6 == a7;
  else
    v15 = 1;
  v16 = v15;
  v30 = v16;
  while (!File::error(a3))
  {
    v17 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v31, &v33);
    if (!v17)
      break;
    v18 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v33);
    v19 = v18;
    if (v18)
    {
      v20 = &a5[strlen(v18)];
      if (v20 + 1 <= a4 + 10000)
      {
        strcpy(a5, v19);
        if (v30)
        {
          snprintf(ctsBuffer, 0x64uLL, "%lu", *(_QWORD *)(v17 + 8));
          File::fprintf(a3, "%s\t%s\n", a4, ctsBuffer);
        }
        if (a7 - 1 >= a6)
        {
          *v20 = 32;
          NgramCounts<unsigned long>::writeNode(a1, v17, a3, a4, v20 + 1, a6 + 1, a7, a8);
        }
      }
      else
      {
        *a5 = 48;
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"ngram [", 7);
        v22 = strlen(a4);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
        v24 = strlen(v19);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v19, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] exceeds write buffer\n", 23);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"undefined word index ", 21);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    }
  }
  result = v32;
  if (v32)
    return MEMORY[0x1AF44D160](v32, 0x1000C8052888210);
  return result;
}

void sub_1ADAEBB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    MEMORY[0x1AF44D160](a17, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::writeBinary(uint64_t a1, File *this, uint64_t a3)
{
  int v6;
  _QWORD *v8;
  int *v9;
  char *v10;
  size_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  off_t v14;
  std::locale v15;

  File::fprintf(this, "%s", "SRILM_BINARY_COUNTS_001\n");
  v6 = a3;
  if (!(_DWORD)a3)
    v6 = *(_DWORD *)(a1 + 156);
  File::fprintf(this, "maxorder %u\n", v6);
  (*(void (**)(_QWORD, File *, _QWORD))(**(_QWORD **)(a1 + 24) + 344))(*(_QWORD *)(a1 + 24), this, 0);
  v14 = File::ftell(this);
  if ((v14 & 0x8000000000000000) == 0)
    return NgramCounts<unsigned long>::writeBinaryNode(a1, (_DWORD **)(a1 + 160), 1u, a3, this, &v14);
  v8 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
  v9 = __error();
  v10 = srilm_ts_strerror(*v9);
  v11 = strlen(v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1ADAEBC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<unsigned long>::writeBinaryNode(uint64_t a1, _DWORD **a2, unsigned int a3, uint64_t a4, File *a5, off_t *a6)
{
  unsigned int v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  off_t v15;
  BOOL v16;
  char v17;
  off_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  char *v32;
  size_t v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  char v37;
  unsigned int v38;
  std::locale v39[3];
  uint64_t v40;

  v11 = a4;
  if (!(_DWORD)a4)
    v11 = *(_DWORD *)(a1 + 156);
  if (v11 < a3)
    return 1;
  if (v11 - a3 >= 4)
    v13 = 8;
  else
    v13 = 4;
  if (v11 == a3)
    v14 = 2;
  else
    v14 = v13;
  v15 = *a6;
  result = writeBinaryCount(a5, 0, v14);
  if ((_DWORD)result)
  {
    if ((_DWORD)a4)
      v16 = a3 > a4;
    else
      v16 = 0;
    v17 = v16;
    v37 = v17;
    while (1)
    {
      v18 = *a6 + result;
      *a6 = v18;
      if ((v37 & 1) == 0)
      {
        LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v39, a2, (uint64_t)SArray_compareKey<unsigned int>);
        v38 = 0;
        do
        {
          v19 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v39, &v38);
          if (!v19)
            break;
          v20 = writeBinaryCount(a5, v38, 0);
          if (!v20)
            break;
          *a6 += v20;
          v21 = a3 >= a4 ? *(_QWORD *)(v19 + 8) : 0;
          v22 = writeBinaryCount(a5, v21, 0);
          if (!v22)
            break;
          *a6 += v22;
        }
        while (NgramCounts<unsigned long>::writeBinaryNode(a1, v19, a3 + 1, a4, a5, a6));
        if (v40)
          MEMORY[0x1AF44D160](v40, 0x1000C8052888210);
        if (v19)
          return 0;
        v18 = *a6;
      }
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0)
        break;
      result = writeBinaryCount(a5, v18 - v15, v14);
      if (!(_DWORD)result)
        return result;
      v23 = result;
      if (result <= v14)
      {
        if ((File::fseek(a5, v18, 0) & 0x80000000) == 0)
          return 1;
        break;
      }
      v24 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"increasing offset bytes from ", 29);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (order ", 8);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" level ", 7);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")\n", 2);
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0)
        break;
      *a6 = v15;
      result = writeBinaryCount(a5, 0, v23);
      v14 = v23;
      if (!(_DWORD)result)
        return result;
    }
    v30 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
    v31 = __error();
    v32 = srilm_ts_strerror(*v31);
    v33 = strlen(v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v35 = std::locale::use_facet(v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(v39);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  return result;
}

void sub_1ADAEC0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<unsigned long>::parseNgram(Vocab *a1, char *a2, const char **a3, char **a4)
{
  int v5;
  int v7;
  uint64_t v8;
  const char *v9;

  v5 = (int)a3;
  v7 = Vocab::parseWords(a1, a2, a3, a4);
  if (v7 == v5)
    return 0;
  v8 = (v7 - 1);
  v9 = *(const char **)&a2[8 * v8];
  if (*v9 == 45 || sscanf(v9, "%lu", a4) != 1)
    return 0;
  *(_QWORD *)&a2[8 * v8] = 0;
  return v8;
}

uint64_t NgramCounts<unsigned long>::sumCounts(uint64_t a1, uint64_t a2)
{
  return NgramCounts<unsigned long>::sumNode(a1, a1 + 160, 1u, a2);
}

uint64_t NgramCounts<unsigned long>::sumNode(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;

  if (a3 > a4 || !*(_QWORD *)a2 || **(_DWORD **)a2 <= 0x1Fu)
    return *(_QWORD *)(a2 + 8);
  LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::LHashIter((uint64_t)v13, (_DWORD **)a2, 0);
  v5 = 0;
  v12 = 0;
  for (i = a3 + 1; ; v5 += NgramCounts<unsigned long>::sumNode(a1, v11, i, a4))
  {
    v11 = LHashIter<unsigned int,Trie<unsigned int,unsigned long>>::next((uint64_t)v13, &v12);
    if (!v11)
      break;
  }
  *(_QWORD *)(a2 + 8) = v5;
  if (v14)
    MEMORY[0x1AF44D160](v14, 0x1000C8052888210);
  return v5;
}

void sub_1ADAEC25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::setCounts(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[80];
  int v9;
  _BYTE v10[12];
  int v11;

  v4 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)&v10[8] = 0;
  v11 = 0;
  v9 = 0;
  *(_QWORD *)v10 = (v4 + 1);
  if (v4 == -1 || (Array<unsigned int>::alloc((uint64_t)&v9, v4, 0), *(_DWORD *)(a1 + 156)))
  {
    v5 = 1;
    do
    {
      TrieIter2<unsigned int,unsigned long>::TrieIter2((uint64_t)v8, (_DWORD **)(a1 + 160), (_DWORD *)(*(_QWORD *)&v10[4] - 4 * v9), v5, 0);
      while (1)
      {
        v6 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v8);
        if (!v6)
          break;
        *(_QWORD *)(v6 + 8) = a2;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v8);
      ++v5;
    }
    while (v5 <= *(_DWORD *)(a1 + 156));
  }
  result = *(_QWORD *)&v10[4];
  if (*(_QWORD *)&v10[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v10[4], 0x1000C8052888210);
  return result;
}

void sub_1ADAEC350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 48);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<unsigned long>::memStats(uint64_t a1, uint64_t *a2)
{
  *a2 += 64;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 352))(*(_QWORD *)(a1 + 24));
  return Trie<unsigned int,unsigned long>::memStats((_DWORD **)(a1 + 160), a2);
}

uint64_t LHashIter<unsigned int,unsigned long>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,double>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 16 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 16);
  return result;
}

uint64_t NgramCounts<unsigned long>::readBinaryNode(uint64_t a1, _DWORD **a2, int a3, int a4, File *a5, off_t *a6, uint64_t a7, int *a8)
{
  uint64_t result;
  off_t v17;
  off_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int locale;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  uint64_t v30;
  _QWORD *v31;
  int *v32;
  char *v33;
  size_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  unint64_t v38;
  std::locale v39;

  if (!a4)
    return 1;
  v38 = 0;
  result = readBinaryCount(a5, &v38);
  if (!(_DWORD)result)
    return result;
  v17 = v38 + *a6;
  v18 = *a6 + result;
  *a6 = v18;
  if (a3)
  {
    if (v18 < v17)
    {
      v19 = (a3 - 1);
      v20 = (a4 - 1);
      do
      {
        v39.__locale_ = 0;
        result = readBinaryCount(a5, (unint64_t *)&v39);
        if (!(_DWORD)result)
          return result;
        locale = v39.__locale_;
        *a6 += result;
        if (a8[1] <= locale)
        {
          v37 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"word index ", 11);
          v28 = (_QWORD *)std::ostream::operator<<();
          v29 = " out of range\n";
          v30 = 14;
          goto LABEL_28;
        }
        v22 = *(_DWORD *)Array<unsigned int>::operator[](a8, locale);
        if (v22 != -1)
        {
          if (*(_BYTE *)(a1 + 152))
          {
            LODWORD(v39.__locale_) = 0;
            if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a2, v22, &v39))
            {
              v23 = (uint64_t)&(*a2)[6 * LODWORD(v39.__locale_) + 2];
LABEL_17:
              v39.__locale_ = 0;
              result = readBinaryCount(a5, (unint64_t *)&v39);
              if (!(_DWORD)result)
                return result;
              *(_QWORD *)(v23 + 8) += v39.__locale_;
              *a6 += result;
              v25 = a1;
              v26 = (_DWORD **)v23;
              v27 = v19;
              goto LABEL_19;
            }
          }
          else
          {
            LOBYTE(v39.__locale_) = 0;
            v24 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(a2, v22, &v39);
            v23 = (uint64_t)v24;
            if (!LOBYTE(v39.__locale_))
            {
              *v24 = 0;
              goto LABEL_17;
            }
            if (v24)
              goto LABEL_17;
          }
        }
        v39.__locale_ = 0;
        result = readBinaryCount(a5, (unint64_t *)&v39);
        if (!(_DWORD)result)
          return result;
        *a6 += result;
        v25 = a1;
        v26 = a2;
        v27 = 0;
LABEL_19:
        result = NgramCounts<unsigned long>::readBinaryNode(v25, v26, v27, v20, a5, a6, a7, a8);
        if (!(_DWORD)result)
          return result;
        v18 = *a6;
      }
      while (*a6 < v17);
    }
    if (v18 != v17)
    {
      v28 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      v29 = "data misaligned\n";
      v30 = 16;
LABEL_28:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      return 0;
    }
    return 1;
  }
  if ((File::fseek(a5, v17, 0) & 0x80000000) == 0)
  {
    *a6 = v17;
    return 1;
  }
  v31 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
  v32 = __error();
  v33 = srilm_ts_strerror(*v32);
  v34 = strlen(v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v36 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1ADAEC738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *NgramCounts<unsigned long>::updateMinCountsHelper(uint64_t a1, int a2, const unsigned int *a3, unsigned int a4, Vocab *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  unsigned int v16;
  const unsigned int *v17;
  _QWORD *result;
  char v19;

  v15 = (a2 - 1);
  v16 = *((_DWORD *)this + v15);
  *((_DWORD *)this + v15) = -1;
  if (Vocab::compare(this, *(const unsigned int **)(a6 + 8 * v15), a3))
  {
    if (*(_BYTE *)(a7 + v15))
    {
      NgramCounts<unsigned long>::addCounts(a1, *(unsigned int **)(a6 + 8 * v15), (_DWORD **)(a8 + 8 * v15));
      *(_BYTE *)(a7 + v15) = 0;
    }
    LHash<unsigned int,double>::clear((_QWORD *)(a8 + 8 * v15), 0);
    Vocab::copy(*(_QWORD *)(a6 + 8 * v15), (unsigned int *)this, v17);
  }
  if (a4 != -1)
  {
    v19 = 0;
    result = (_QWORD *)LHash<unsigned int,double>::insert((_QWORD *)(a8 + 8 * v15), a4, &v19);
    ++*result;
    return result;
  }
  if (!*(_BYTE *)(a1 + 152))
  {
    result = NgramCounts<unsigned long>::insertCount(a1, (unsigned int *)this, v16);
    if (!result)
      goto LABEL_10;
    goto LABEL_9;
  }
  result = NgramCounts<unsigned long>::findCount(a1, (unsigned int *)this, v16);
  if (result)
LABEL_9:
    *result += a3;
LABEL_10:
  *(_BYTE *)(a7 + v15) = 1;
  return result;
}

uint64_t LHashIter<unsigned int,unsigned long>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,unsigned long>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,unsigned long>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 16);
  do
  {
    v8 = *v7;
    v7 += 4;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[4 * v16 + 4];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADAECA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(v9 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,unsigned long> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

quasar::TranslationPhrase *quasar::TranslationPhraseInternal::TranslationPhraseInternal(quasar::TranslationPhrase *a1, uint64_t a2)
{
  quasar::TranslationPhrase *v4;
  uint64_t *v5;
  quasar::MetaInfo *v6;
  const void *v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string v23;
  __int16 v24;
  void *v25[2];
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  uint64_t v34;

  v4 = quasar::TranslationPhrase::TranslationPhrase(a1, (const quasar::TranslationPhrase *)a2);
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = 0;
  v5 = (uint64_t *)((char *)v4 + 136);
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 21) = 0;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = 0;
  v6 = (quasar::TranslationPhrase *)((char *)v4 + 192);
  if (*(char *)(a2 + 63) < 0)
  {
    v7 = *(const void **)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
  }
  else
  {
    v7 = (const void *)(a2 + 40);
    v8 = *(unsigned __int8 *)(a2 + 63);
  }
  quasar::MetaInfo::fromJson(v7, v8, v6);
  v9 = *((_QWORD *)a1 + 2);
  for (i = *((_QWORD *)a1 + 3);
        i != v9;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100]((uint64_t)a1 + 32, i))
  {
    i -= 72;
  }
  *((_QWORD *)a1 + 3) = v9;
  v11 = *(_QWORD *)(a2 + 16);
  for (j = *(_QWORD *)(a2 + 24); v11 != j; v11 += 72)
  {
    quasar::TranslationTokenInternal::TranslationTokenInternal(&v23, (const quasar::TranslationToken *)v11);
    v13 = *((_QWORD *)a1 + 18);
    if (v13 >= *((_QWORD *)a1 + 19))
    {
      v17 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal>(v5, (__int128 *)&v23);
      v18 = __p[0];
      *((_QWORD *)a1 + 18) = v17;
      if (v18)
      {
        __p[1] = v18;
        operator delete(v18);
      }
    }
    else
    {
      v14 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
      *(_OWORD *)v13 = v14;
      memset(&v23, 0, sizeof(v23));
      *(_WORD *)(v13 + 24) = v24;
      *(_QWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 32) = 0;
      *(_OWORD *)(v13 + 32) = *(_OWORD *)v25;
      *(_QWORD *)(v13 + 48) = v26;
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      v15 = v27;
      *(_DWORD *)(v13 + 64) = v28;
      *(_QWORD *)(v13 + 56) = v15;
      v16 = v29;
      *(_QWORD *)(v13 + 88) = v30;
      *(_OWORD *)(v13 + 72) = v16;
      v30 = 0;
      v29 = 0uLL;
      *(_QWORD *)(v13 + 96) = v31;
      *(_QWORD *)(v13 + 104) = 0;
      *(_QWORD *)(v13 + 112) = 0;
      *(_QWORD *)(v13 + 120) = 0;
      *(_OWORD *)(v13 + 104) = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 120) = v33;
      __p[0] = 0;
      __p[1] = 0;
      v33 = 0;
      *(_QWORD *)(v13 + 128) = v34;
      *((_QWORD *)a1 + 18) = v13 + 136;
    }
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    *(_BYTE *)(*((_QWORD *)a1 + 18) - 112) = 1;
    if (*(char *)(v11 + 23) < 0)
    {
      v20 = *(_QWORD **)v11;
      v19 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      v19 = *(unsigned __int8 *)(v11 + 23);
      v20 = (_QWORD *)v11;
    }
    quasar::utf8::codepointsCtr(v20, v19, 0, v19, (unint64_t)&v23);
    if (!(_BYTE)v24 && SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  v21 = *((_QWORD *)a1 + 18);
  if (*((_QWORD *)a1 + 17) != v21)
    *(_BYTE *)(v21 - 112) = 0;
  return a1;
}

void sub_1ADAED1DC(_Unwind_Exception *a1, quasar::MetaInfo *a2, ...)
{
  char *v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (v2[191] < 0)
    operator delete(*v3);
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)v2);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhraseInternal::convertToExternal(__int128 **this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  uint64_t i;
  __int128 *v6;
  __int128 *j;
  quasar::MetaInfo::Impl **v8;
  void **v9;
  uint64_t AlternativeSelectionSpans;
  std::string __p;
  char v12;

  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)a2, (const quasar::TranslationPhrase *)this);
  v4 = *(std::string **)(a2 + 16);
  for (i = *(_QWORD *)(a2 + 24);
        (std::string *)i != v4;
        std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](a2 + 32, i))
  {
    i -= 72;
  }
  *(_QWORD *)(a2 + 24) = v4;
  v6 = this[17];
  for (j = this[18]; v6 != j; v6 = (__int128 *)((char *)v6 + 136))
  {
    if ((unint64_t)v4 >= *(_QWORD *)(a2 + 32))
    {
      v4 = (std::string *)std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken const&>((uint64_t *)(a2 + 16), v6);
    }
    else
    {
      std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken const&>(a2 + 32, v4, v6);
      v4 += 3;
      *(_QWORD *)(a2 + 24) = v4;
    }
    *(_QWORD *)(a2 + 24) = v4;
  }
  v8 = (quasar::MetaInfo::Impl **)(this + 24);
  quasar::MetaInfo::json(v8, (uint64_t)&__p);
  v9 = (void **)(a2 + 40);
  if (*(char *)(a2 + 63) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  quasar::MetaInfo::romanization(v8, &__p);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a2 + 64, (__n128 *)&__p);
  if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  AlternativeSelectionSpans = quasar::MetaInfo::getAlternativeSelectionSpans((quasar::MetaInfo *)v8);
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(a2 + 96, AlternativeSelectionSpans);
}

void sub_1ADAED384(_Unwind_Exception *a1)
{
  quasar::TranslationPhrase *v1;

  quasar::TranslationPhrase::~TranslationPhrase(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::TranslationPhraseInternal::convertTokensToString(quasar::TranslationPhraseInternal *this)
{
  return quasar::TranslationPhrase::convertTokensToString<quasar::TranslationTokenInternal>((uint64_t *)this + 17);
}

uint64_t quasar::TranslationPhrase::convertTokensToString<quasar::TranslationTokenInternal>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = v2 + v3;
      v6 = *(char *)(v5 + 23);
      if (v6 >= 0)
        v7 = v5;
      else
        v7 = *(_QWORD *)v5;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v5 + 23);
      else
        v8 = *(_QWORD *)(v5 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v7, v8);
      v2 = *a1;
      if (*(_BYTE *)(*a1 + v3 + 24))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
        v2 = *a1;
      }
      ++v4;
      v3 += 136;
    }
    while (v4 < 0xF0F0F0F0F0F0F0F1 * ((a1[1] - v2) >> 3));
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADAED508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::TranslationPhraseInternal::extractAlignmentProjections(quasar::TranslationPhraseInternal *this@<X0>, uint64_t *a2@<X8>)
{
  quasar::TranslationPhrase *v3;

  v3 = (quasar::TranslationPhrase *)quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)this + 192));
  quasar::TranslationPhrase::extractAlignmentProjections(v3, a2);
}

BOOL quasar::TranslationPhraseInternal::isFromPhrasebook(quasar::TranslationPhraseInternal *this)
{
  uint64_t v1;
  _BOOL8 v2;
  void *__p[2];
  char v5;
  std::string v6;
  char v7;

  v1 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)this + 192));
  std::string::basic_string[abi:ne180100]<0>(__p, "status");
  quasar::PTree::getStringOptional(v1, (uint64_t)__p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
  v2 = std::operator==[abi:ne180100]<std::string,char const*>((uint64_t)&v6, (const char **)quasar::MetaInfo::VALUES::STATUS_PHRASEBOOK_EXACT);
  if (v7 && SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1ADAED5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::string,char const*>(uint64_t a1, const char **a2)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = (_QWORD *)a1;
    v3 = *a2;
    v4 = strlen(*a2);
    if (*((char *)v2 + 23) < 0)
    {
      if (v4 == v2[1])
      {
        if (v4 == -1)
          goto LABEL_11;
        v2 = (_QWORD *)*v2;
        return memcmp(v2, v3, v4) == 0;
      }
    }
    else if (v4 == *((unsigned __int8 *)v2 + 23))
    {
      if (v4 == -1)
LABEL_11:
        std::string::__throw_out_of_range[abi:ne180100]();
      return memcmp(v2, v3, v4) == 0;
    }
  }
  return 0;
}

_QWORD *quasar::formatNBestlist(_QWORD *result, uint64_t a2, uint64_t a3)
{
  std::vector<std::string> *v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  std::string::size_type v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *p_v;
  uint64_t end_high;
  _QWORD *v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::string *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  int v51;
  uint64_t v52;
  std::allocator<std::string> *v53;
  uint64_t v54;
  _QWORD *v55;
  void **v57;
  uint64_t v58;
  uint64_t v60;
  void *__p[2];
  unsigned __int8 v62;
  void *v63[2];
  unsigned __int8 v64;
  void *v65[2];
  int64_t v66;
  _QWORD v67[2];
  _QWORD v68[11];
  char v69;
  uint64_t v70;
  void **v71[2];
  _QWORD v72[11];
  char v73;
  uint64_t v74;
  std::string v75;
  std::string v76[5];
  quasar::TranslationTokenInternal *v77;
  quasar::TranslationTokenInternal *v78;
  quasar::MetaInfo::Impl *v79;
  _QWORD v80[2];
  _QWORD v81[11];
  char v82;
  uint64_t v83;
  std::__split_buffer<std::string> __v;

  if (result[1] != *result)
  {
    v3 = (std::vector<std::string> *)a3;
    v4 = result;
    v5 = 0;
    v53 = (std::allocator<std::string> *)(a3 + 16);
    v6 = (void **)*MEMORY[0x1E0DE4F50];
    v57 = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
    v58 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v54 = MEMORY[0x1E0DE4FB8] + 16;
    v55 = result;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v80);
      quasar::TranslationPhraseInternal::TranslationPhraseInternal(v76, (const quasar::TranslationPhraseInternal *)(*v4 + 200 * v5));
      v7 = v5;
      memset(&v75, 0, sizeof(v75));
      std::vector<quasar::TranslationTokenInternal>::__init_with_size[abi:ne180100]<quasar::TranslationTokenInternal*,quasar::TranslationTokenInternal*>(&v75, v77, v78, 0xF0F0F0F0F0F0F0F1 * ((v78 - v77) >> 3));
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
      v8 = v75.__r_.__value_.__r.__words[0];
      if (v75.__r_.__value_.__l.__size_ != v75.__r_.__value_.__r.__words[0])
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)(v8 + 136 * v9 + 32) != *(_QWORD *)(v8 + 136 * v9 + 40))
          {
            v10 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"-", 1);
            std::ostream::operator<<();
            if (*(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 136 * v9 + 40)
               - *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 136 * v9 + 32) != 4)
            {
              v11 = 1;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
                v12 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"-", 1);
                std::ostream::operator<<();
                ++v11;
              }
              while (v11 != (uint64_t)(*(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 136 * v9 + 40)
                                     - *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 136 * v9 + 32)) >> 2);
            }
          }
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
          std::ostream::operator<<();
          v8 = v75.__r_.__value_.__r.__words[0];
          v14 = 0xF0F0F0F0F0F0F0F1
              * ((uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3);
          if (v9 < v14 - 1)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" ", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" ", 1);
            v8 = v75.__r_.__value_.__r.__words[0];
            v14 = 0xF0F0F0F0F0F0F0F1
                * ((uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3);
          }
          ++v9;
        }
        while (v9 != v14);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"_", 1);
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ||| ", 5);
      v17 = *(char *)(a2 + 23);
      if (v17 >= 0)
        v18 = a2;
      else
        v18 = *(_QWORD *)a2;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a2 + 23);
      else
        v19 = *(_QWORD *)(a2 + 8);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ||| ", 5);
      quasar::TranslationPhrase::convertTokensToString<quasar::TranslationTokenInternal>((uint64_t *)&v77);
      if (SHIBYTE(__v.__end_) >= 0)
        p_v = &__v;
      else
        p_v = __v.__first_;
      if (SHIBYTE(__v.__end_) >= 0)
        end_high = HIBYTE(__v.__end_);
      else
        end_high = (uint64_t)__v.__begin_;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)p_v, end_high);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ||| ", 5);
      std::stringbuf::str();
      if (v66 >= 0)
        v26 = v65;
      else
        v26 = (void **)v65[0];
      if (v66 >= 0)
        v27 = HIBYTE(v66);
      else
        v27 = (uint64_t)v65[1];
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ||| ", 5);
      std::stringbuf::str();
      if ((v64 & 0x80u) == 0)
        v30 = v63;
      else
        v30 = (void **)v63[0];
      if ((v64 & 0x80u) == 0)
        v31 = v64;
      else
        v31 = (uint64_t)v63[1];
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ||| ", 5);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ", 1);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" ", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"|||", 3);
      quasar::MetaInfo::json(&v79, (uint64_t)__p);
      if ((v62 & 0x80u) == 0)
        v38 = __p;
      else
        v38 = (void **)__p[0];
      if ((v62 & 0x80u) == 0)
        v39 = v62;
      else
        v39 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      if ((char)v62 < 0)
        operator delete(__p[0]);
      if ((char)v64 < 0)
        operator delete(v63[0]);
      if (SHIBYTE(v66) < 0)
        operator delete(v65[0]);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      std::stringbuf::str();
      end = v3->__end_;
      value = v3->__end_cap_.__value_;
      v60 = v7;
      if (end >= value)
      {
        v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v3->__begin_) >> 3);
        v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v3->__begin_) >> 3);
        if (2 * v45 > v44)
          v44 = 2 * v45;
        if (v45 >= 0x555555555555555)
          v46 = 0xAAAAAAAAAAAAAAALL;
        else
          v46 = v44;
        __v.__end_cap_.__value_ = v53;
        if (v46)
          v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v53, v46);
        else
          v47 = 0;
        v48 = v47 + v43;
        __v.__first_ = v47;
        __v.__begin_ = v48;
        __v.__end_cap_.__value_ = &v47[v46];
        v49 = *(_OWORD *)v65;
        v48->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
        v65[1] = 0;
        v66 = 0;
        v65[0] = 0;
        __v.__end_ = v48 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v3, &__v);
        v50 = v3->__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v51 = SHIBYTE(v66);
        v3->__end_ = v50;
        if (v51 < 0)
          operator delete(v65[0]);
      }
      else
      {
        v42 = *(_OWORD *)v65;
        end->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v42;
        v3->__end_ = end + 1;
      }
      v67[0] = v6;
      *(_QWORD *)((char *)v67 + (_QWORD)*(v6 - 3)) = v57;
      v68[0] = v58;
      v68[1] = v54;
      if (v69 < 0)
        operator delete((void *)v68[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](&v70);
      v71[0] = v6;
      *(void ***)((char *)v71 + (_QWORD)*(v6 - 3)) = v57;
      v52 = MEMORY[0x1E0DE4FB8] + 16;
      v72[0] = v58;
      v72[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v73 < 0)
        operator delete((void *)v72[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](&v74);
      v71[0] = (void **)&v75;
      std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100](v71);
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v76);
      v80[0] = v6;
      *(_QWORD *)((char *)v80 + (_QWORD)*(v6 - 3)) = v57;
      v81[0] = v58;
      v81[1] = v52;
      if (v82 < 0)
        operator delete((void *)v81[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = (_QWORD *)MEMORY[0x1AF44D094](&v83);
      v5 = v7 + 1;
      v4 = v55;
      v3 = (std::vector<std::string> *)a3;
    }
    while (0x8F5C28F5C28F5C29 * ((uint64_t)(v55[1] - *v55) >> 3) > v60 + 1);
  }
  return result;
}

void sub_1ADAEDDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  if (a38 < 0)
    operator delete(__p);
  a39 = v72;
  *(uint64_t *)((char *)&a39 + *(_QWORD *)(v72 - 24)) = a20;
  a41 = a21;
  a42 = MEMORY[0x1E0DE4FB8] + 16;
  if (a55 < 0)
    operator delete(a50);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](a17);
  a72 = v72;
  *(uint64_t *)((char *)&a72 + *(_QWORD *)(v72 - 24)) = a20;
  v74 = MEMORY[0x1E0DE4FB8] + 16;
  STACK[0x200] = a21;
  STACK[0x208] = v74;
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](a18);
  a72 = (uint64_t)&STACK[0x308];
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x320]);
  STACK[0x3E8] = v72;
  *(unint64_t *)((char *)&STACK[0x3E8] + *(_QWORD *)(v72 - 24)) = a20;
  v75 = MEMORY[0x1E0DE4FB8] + 16;
  STACK[0x3F8] = a21;
  STACK[0x400] = v75;
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](a19);
  _Unwind_Resume(a1);
}

uint64_t quasar::json2Ptree(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[12];
  char v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(result + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    std::istringstream::basic_istringstream[abi:ne180100](v4, (const std::string *)result, 8);
    quasar::PTree::readJson(a2, v4);
    v4[0] = *MEMORY[0x1E0DE4F58];
    *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    v4[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v5 < 0)
      operator delete((void *)v4[10]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    return MEMORY[0x1AF44D094](&v6);
  }
  return result;
}

uint64_t quasar::ptree2Json(quasar::PTreeHelper *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  quasar::PTree::writeJson(a1, v9, 0);
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)a2 + v4;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a2 + 23);
    v5 = a2 + v4;
  }
  if (*(_BYTE *)(v5 - 1) == 10)
    std::string::resize((std::string *)a2, v4 - 1, 0);
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v11);
}

void sub_1ADAEE284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::backupMetaInfo(quasar::PTree *a1, uint64_t a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v6 = quasar::PTree::begin(a1);
  v7 = quasar::PTree::end(a1);
  if (v6 != v7)
  {
    v8 = v7;
    do
    {
      if (a2 + 8 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v6))
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (const void **)v6, (uint64_t)&v10);
        if (*(char *)(v6 + 23) < 0)
          operator delete(*(void **)v6);
        v9 = v10;
        *(_QWORD *)(v6 + 16) = v11;
        *(_OWORD *)v6 = v9;
      }
      v6 += 88;
    }
    while (v6 != v8);
  }
}

void sub_1ADAEE550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::TranslationTokenInternal>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::TranslationTokenInternal>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADAEE634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[136 * v3];
  v13 = &v7[136 * v6];
  std::allocator<quasar::TranslationTokenInternal>::construct[abi:ne180100]<quasar::TranslationTokenInternal,quasar::TranslationTokenInternal>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 136;
  std::vector<quasar::TranslationTokenInternal>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADAEE7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationTokenInternal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[72 * v3];
  v13 = &v7[72 * v6];
  std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken const&>((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 3;
  std::vector<quasar::TranslationToken>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADAEE8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::TranslationToken>::construct[abi:ne180100]<quasar::TranslationToken,quasar::TranslationToken const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int16 v6;
  _QWORD *result;
  std::string::size_type v8;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_WORD *)a3 + 12);
  this[1].__r_.__value_.__l.__size_ = 0;
  LOWORD(this[1].__r_.__value_.__l.__data_) = v6;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a3 + 4), *((_QWORD *)a3 + 5), (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 2);
  v8 = *((_QWORD *)a3 + 7);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)a3 + 16);
  this[2].__r_.__value_.__l.__size_ = v8;
  return result;
}

void sub_1ADAEE98C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::TranslationToken>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>,std::reverse_iterator<quasar::TranslationToken*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      *(_WORD *)(v7 - 48) = *(_WORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationToken>,std::reverse_iterator<quasar::TranslationToken*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TranslationToken>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::TranslationToken>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::TranslationToken>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::TranslationToken>::destroy[abi:ne180100](v4, i - 72);
  }
}

_QWORD *quasar::joinToStream<std::vector<quasar::TranslationTokenInternal>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::operator<<(v6, v3);
      v7 = 0;
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

_BYTE *quasar::GeoMemoriesConfig::GeoMemoriesConfig(_BYTE *this)
{
  *this = 0;
  return this;
}

uint64_t quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::OnlineLASLmRescoringSpeculativeBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3B7A8;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_WORD *)(v3 + 496) = 257;
  *(_QWORD *)(v3 + 500) = 0x8000001F4;
  *(_DWORD *)(v3 + 508) = 0;
  *(_QWORD *)(v3 + 512) = 0x3C23D70A00000000;
  *(_OWORD *)(v3 + 520) = xmmword_1AE15FD50;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 536), "");
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(_BYTE *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 712) = 1;
  *(_OWORD *)(a1 + 720) = xmmword_1AE15FD60;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1065353216;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(a1 + 856) = v4 + 24;
  *(_QWORD *)(a1 + 864) = v4;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_QWORD *)(a1 + 1008) = 0x300000008;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 57) = 0;
  return a1;
}

void sub_1ADAEEDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16)
{
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  kaldi::quasar::CEStatelessEncoderNet **v21;

  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)(v16 + 848), 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v16 + 840), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)(v16 + 832), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100](v21, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 + 800);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 + 784);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 + 768);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 + 752);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 + 696);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 + 680);
  if (*(char *)(v16 + 679) < 0)
    operator delete(*(void **)(v16 + 656));
  if (*(char *)(v16 + 655) < 0)
    operator delete(*v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v19);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v16 + 559) < 0)
    operator delete(*v17);
  if (*(char *)(v16 + 495) < 0)
    operator delete(*(void **)(v16 + 472));
  if (*(char *)(v16 + 471) < 0)
    operator delete(*(void **)(v16 + 448));
  quasar::Decoder::~Decoder((void **)v16);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::~OnlineLASLmRescoringSpeculativeBeamSearchDecoder(quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E5D3B7A8;
  if (*((char *)this + 983) < 0)
    operator delete(*((void **)this + 120));
  if (*((char *)this + 959) < 0)
    operator delete(*((void **)this + 117));
  if (*((char *)this + 935) < 0)
    operator delete(*((void **)this + 114));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 896);
  if (*((char *)this + 895) < 0)
    operator delete(*((void **)this + 109));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 856);
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)this + 106, 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 105, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)this + 104, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessEncoderNet **)this + 103, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 800);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 784);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 768);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 752);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 736);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 696);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 680);
  if (*((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 655) < 0)
    operator delete(*((void **)this + 79));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 584);
  v2 = (void **)((char *)this + 560);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::~OnlineLASLmRescoringSpeculativeBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "las-lm-rescoring-speculative-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 211, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 62), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[107], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 532, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 67), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 70), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lexicon-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Lexicon FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 79), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-sym-table-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Subword symbol table");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 109), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LM FST (to be used for re-tokenization)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 82), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-scale");
  std::string::basic_string[abi:ne180100]<0>(v4, "Scaling factor to use for LM weights");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 102), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subword-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The subword OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 114), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "word-oov-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word-level OOV token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 117), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "word-boundary-symbol");
  std::string::basic_string[abi:ne180100]<0>(v4, "The word boundary subword token symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 120), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "mapping-cache-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Cache size to use for lazy FST mapping operations");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 91), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to decode beyond attention checks");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 126), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rollback-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to rollback before each speculative decoder");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1012, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-catchup");
  std::string::basic_string[abi:ne180100]<0>(v4, "Catch up at the end of utterance by returning speculative predictions");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 127), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "unchecked-attention-heads");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not perform checks for attention heads at these indexes");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 73), (uint64_t)v4, 0, 238, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADAEF8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::finishInit(quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder *this)
{
  char *v2;
  kaldi::quasar::CEStatelessEncoderNet *v3;
  kaldi::quasar::CEStatelessDecoderNet *v4;
  BOOL v5;
  _QWORD *v6;
  kaldi::BeamSearchDecoder *v7;
  uint64_t *i;
  int v9;
  kaldi::quasar::OnlineLASAttentionChecker *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *Text;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  _OWORD v54[2];
  int v55;
  void *__p[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  v2 = (char *)this + 448;
  v3 = (kaldi::quasar::CEStatelessEncoderNet *)operator new();
  kaldi::quasar::CEStatelessEncoderNet::CEStatelessEncoderNet(v3, v2);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessEncoderNet **)this + 103, v3);
  v4 = (kaldi::quasar::CEStatelessDecoderNet *)operator new();
  kaldi::quasar::CEStatelessDecoderNet::CEStatelessDecoderNet(v4, (char *)this + 472);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)this + 104, v4);
  LODWORD(v4) = *((_DWORD *)this + 133);
  if ((int)v4
     % (int)kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEStatelessEncoderNet **)this
                                                                         + 103)))
  {
    v5 = quasar::gLogLevel < 4;
  }
  else
  {
    v5 = 1;
  }
  if (!v5)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Batch size is not an integer multiple of the frame subsampling factor. ", 71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Encoder might drop frames.", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  v7 = (kaldi::BeamSearchDecoder *)operator new();
  kaldi::BeamSearchDecoder::BeamSearchDecoder(v7, (char *)this + 496);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 105, v7);
  memset(v54, 0, sizeof(v54));
  v55 = 1065353216;
  for (i = (uint64_t *)*((_QWORD *)this + 75); i; i = (uint64_t *)*i)
  {
    LODWORD(__p[0]) = std::stoi((const std::string *)(i + 2), 0, 10);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v54, (int *)__p, __p);
  }
  v9 = kaldi::quasar::CEStatelessDecoderNet::SilIndex(*((kaldi::quasar::CEStatelessDecoderNet **)this + 104));
  v10 = (kaldi::quasar::OnlineLASAttentionChecker *)operator new();
  kaldi::quasar::OnlineLASAttentionChecker::OnlineLASAttentionChecker((uint64_t)v10, *(_QWORD *)((char *)this + 516), *(_QWORD *)((char *)this + 524), v9, (uint64_t)v54);
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)this + 106, v10);
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 107), (quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  *((_QWORD *)this + 124) = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 107), (uint64_t)this + 936);
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(__p, *((_QWORD *)this + 46), (char *)this + 632);
  v11 = (uint64_t *)((char *)this + 680);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 680, (__int128 *)__p);
  v12 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v13 = (unint64_t *)((char *)__p[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v11 + 64))(*v11, 0x10000000, 0) != 0x10000000)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input FST ", 10);
    v44 = *((char *)this + 655);
    if (v44 >= 0)
      v45 = (char *)this + 632;
    else
      v45 = (char *)*((_QWORD *)this + 79);
    if (v44 >= 0)
      v46 = *((unsigned __int8 *)this + 655);
    else
      v46 = *((_QWORD *)this + 80);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" is not ilabel sorted", 21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v15 = *((_QWORD *)this + 91);
  *((_BYTE *)this + 712) = 1;
  *((_QWORD *)this + 90) = v15;
  v16 = operator new(0x20uLL);
  v16[2] = 0;
  *v16 = &unk_1E5D40FB8;
  v16[1] = 0;
  __p[0] = v16 + 3;
  __p[1] = v16;
  v17 = (uint64_t *)((char *)this + 736);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 736, (__int128 *)__p);
  v18 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>(*v11, *v17, (uint64_t)this + 712, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 768, (__int128 *)__p);
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (*((char *)this + 895) < 0)
  {
    if (*((_QWORD *)this + 110))
      goto LABEL_26;
LABEL_37:
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Subword symbol table must be provided", 37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (!*((_BYTE *)this + 895))
    goto LABEL_37;
LABEL_26:
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
  Text = fst::SymbolTable::ReadText((uint64_t)this + 872);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(&v53, (uint64_t)Text);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 896, &v53);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (SHIBYTE(v57) < 0)
    operator delete(__p[1]);
  *((_QWORD *)this + 123) = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 112) + 96))(*((_QWORD *)this + 112), (char *)this + 912);
  *((_QWORD *)this + 125) = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 112) + 96))(*((_QWORD *)this + 112), (char *)this + 960);
  if (*((char *)this + 679) < 0)
  {
    if (!*((_QWORD *)this + 83))
      return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v54);
  }
  else if (!*((_BYTE *)this + 679))
  {
    return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v54);
  }
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 46) + 16))(__p, *((_QWORD *)this + 46), (char *)this + 656);
  v28 = (uint64_t *)((char *)this + 696);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 696, (__int128 *)__p);
  v29 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v30 = (unint64_t *)((char *)__p[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v28 + 64))(*v28, 0x10000000, 0) != 0x10000000)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input FST ", 10);
    v49 = *((char *)this + 679);
    if (v49 >= 0)
      v50 = (char *)this + 656;
    else
      v50 = (char *)*((_QWORD *)this + 82);
    if (v49 >= 0)
      v51 = *((unsigned __int8 *)this + 679);
    else
      v51 = *((_QWORD *)this + 83);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" is not ilabel sorted", 21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v32 = operator new(0x20uLL);
  v32[2] = 0;
  *v32 = &unk_1E5D40F10;
  v32[1] = 0;
  *((_DWORD *)v32 + 6) = *((_DWORD *)this + 204);
  __p[0] = v32 + 3;
  __p[1] = v32;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 752, (__int128 *)__p);
  v33 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v34 = (unint64_t *)((char *)__p[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcScaleMapper&,void>(*v28, *((_DWORD **)this + 94), __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 800, (__int128 *)__p);
  v36 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v37 = (unint64_t *)((char *)__p[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>>,fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper> &,fst::StdToLatticeMapper<float>&,fst::ArcMapFstOptions &,void>(*((_QWORD *)this + 100), *v17, (uint64_t)this + 712, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 784, (__int128 *)__p);
  v39 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v40 = (unint64_t *)((char *)__p[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v54);
}

void sub_1ADAF0108()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10A0C40453F11E2);
  JUMPOUT(0x1ADAF01B0);
}

void sub_1ADAF0128()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10B0C40FD238674);
  JUMPOUT(0x1ADAF01B8);
}

void sub_1ADAF018C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADAF01B0);
}

void sub_1ADAF01AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

float quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::preProcessPath(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 isAscii;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  void *__p[2];
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  float v51;
  int v52;
  float v53;
  int v54;

  v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  if ((_DWORD)v4 != -1)
  {
    v6 = v4;
    v7 = 0xFFFFFFFFLL;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a2 + 32))(&v50, a2, v6);
      LODWORD(__p[0]) = HIDWORD(v50);
      LODWORD(v33) = v50;
      LODWORD(v30) = 2139095040;
      LODWORD(v24) = 2139095040;
      result = *(float *)&v50;
      if (*(float *)&v50 != INFINITY)
        break;
      result = *(float *)__p;
      if (*(float *)__p != *(float *)&v24)
        break;
      if ((*(uint64_t (**)(_QWORD *, uint64_t, float))(*a2 + 40))(a2, v6, *(float *)__p) != 1
        && quasar::gLogLevel >= 1)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Invalid path FST. State ", 24);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" has ", 5);
        (*(void (**)(_QWORD *, uint64_t))(*a2 + 40))(a2, v6);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" arcs", 5);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v33);
      }
      *(_QWORD *)&v33 = &unk_1E5D21340;
      *((_QWORD *)&v34 + 1) = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      v11 = a2[1];
      *((_QWORD *)&v33 + 1) = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * (int)v6);
      *(_QWORD *)&v34 = v11 + 8;
      v12 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 24) + 20 * *((_QWORD *)&v34 + 1);
      v30 = *(_QWORD *)v12;
      v13 = *(float *)(v12 + 8);
      v14 = *(float *)(v12 + 12);
      v32 = *(_DWORD *)(v12 + 16);
      LODWORD(v31) = 0;
      *((float *)&v31 + 1) = v13 + v14;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::SetValue((uint64_t)&v33, (uint64_t)&v30);
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 1000);
      HIDWORD(__p[0]) = __p[0];
      __p[1] = 0;
      v28 = v6;
      (*(void (**)(_QWORD *, uint64_t, void **))(*a2 + 208))(a2, v6, __p);
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 896) + 88))(__p, *(_QWORD *)(a1 + 896), (int)v30);
      v15 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), (unsigned __int8 **)__p);
      v16 = *(_QWORD *)(a1 + 568);
      (*(void (**)(unint64_t *__return_ptr, _QWORD *, _QWORD))(*a2 + 32))(&v24, a2, v32);
      v53 = *((float *)&v24 + 1);
      v54 = v24;
      v52 = 2139095040;
      v51 = INFINITY;
      v17 = *(float *)&v24 != INFINITY || v53 != v51;
      v18 = !quasar::isAscii((uint64_t *)__p);
      if (v15 != v16)
        v18 = 1;
      if (v18 || v17)
      {
        if ((_DWORD)v7 != -1)
        {
          v24 = __PAIR64__(*(_QWORD *)(a1 + 984), v30);
          v25 = v31;
          v26 = v32;
          (*(void (**)(_QWORD *, uint64_t, unint64_t *))(*a2 + 208))(a2, v7, &v24);
          v7 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        isAscii = quasar::isAscii((uint64_t *)__p);
        if ((_DWORD)v30)
          v20 = isAscii;
        else
          v20 = 0;
        if (v20)
        {
          v21 = (*(uint64_t (**)(_QWORD *))(*a2 + 200))(a2);
          v22 = v21;
          if ((_DWORD)v7 == -1)
            v23 = v6;
          else
            v23 = v7;
          v24 = v30;
          v25 = v31;
          v26 = v21;
          (*(void (**)(_QWORD *, uint64_t, unint64_t *))(*a2 + 208))(a2, v23, &v24);
          v7 = v22;
        }
      }
      v6 = v32;
      if (v29 < 0)
        operator delete(__p[0]);
    }
  }
  return result;
}

void sub_1ADAF0564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::composeNbestLatticePathsWithFst(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t Base;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int32x2_t v19;
  int32x2_t v20;
  char v21[8];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 224))(a3);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2, (uint64_t *)&v29);
  v6 = v29;
  v7 = v30;
  if (v29 != v30)
  {
    v8 = vdup_n_s32(0x7F800000u);
    do
    {
      quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::preProcessPath((uint64_t)a1, v6);
      fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)v6);
      v9 = a1[96];
      LOBYTE(v25) = FLAGS_fst_default_cache_gc;
      v26 = FLAGS_fst_default_cache_gc_limit;
      Base = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase((uint64_t)v6, v9, (uint64_t)&v25);
      v27 = (void **)&unk_1E5D191C0;
      v28 = Base;
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v25);
      if (a1[87])
      {
        v11 = a1[98];
        v21[0] = FLAGS_fst_default_cache_gc;
        v22 = FLAGS_fst_default_cache_gc_limit;
        v12 = fst::ComposeFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::CreateBase((uint64_t)&v27, v11, (uint64_t)v21);
        v23 = &unk_1E5D191C0;
        v24 = v12;
        v20 = v8;
        fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v23, (uint64_t)&v25, 1, 0, 0, (uint64_t *)&v20, -1, 0);
        v23 = &unk_1E5D26808;
        v13 = v24;
        if (v24)
        {
          v14 = *(_DWORD *)(v24 + 56) - 1;
          *(_DWORD *)(v24 + 56) = v14;
          if (!v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
      }
      else
      {
        v19 = v8;
        fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v27, (uint64_t)&v25, 1, 0, 0, (uint64_t *)&v19, -1, 0);
      }
      fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a3, (uint64_t)&v25);
      v25 = &unk_1E5D25580;
      v15 = v26;
      if (v26)
      {
        v16 = *(_DWORD *)(v26 + 56) - 1;
        *(_DWORD *)(v26 + 56) = v16;
        if (!v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      v27 = (void **)&unk_1E5D26808;
      v17 = v28;
      if (v28)
      {
        v18 = *(_DWORD *)(v28 + 56) - 1;
        *(_DWORD *)(v28 + 56) = v18;
        if (!v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  v27 = (void **)&v29;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v27);
}

void sub_1ADAF07E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  a18 = (void **)&a20;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, uint64_t a4)
{
  std::vector<std::wstring> **v4;
  uint64_t *value;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string::size_type v14;
  BOOL v15;
  kaldi::BeamSearchDecoder *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *size;
  std::string::size_type v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  std::vector<std::wstring> *v34;
  std::vector<std::wstring> *v35;
  std::vector<std::wstring> *v36;
  std::vector<std::wstring>::pointer end;
  unsigned __int8 *begin;
  unsigned __int8 *v39;
  std::vector<std::wstring>::pointer v40;
  uint64_t v41;
  void *v42;
  signed int v43;
  std::vector<std::wstring> *i;
  _BOOL4 IsValidFrame;
  BOOL v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::vector<std::wstring> *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void **v65;
  int *v66;
  int *v67;
  std::vector<std::string>::pointer v68;
  __int128 v69;
  char *v70;
  char *v71;
  std::vector<std::string>::pointer v72;
  __int128 v73;
  int *v74;
  int *v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string *v88;
  std::string *v89;
  __int128 *v90;
  __int128 *v91;
  std::string *v92;
  __int128 v93;
  std::string::size_type v94;
  char v95;
  std::vector<std::wstring>::pointer v96;
  float v97;
  double *v98;
  unint64_t v99;
  double *v100;
  double *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  double *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117[2];
  uint64_t *v118;
  void *__s2;
  uint64_t v120;
  std::vector<std::wstring> **v121;
  void **v123;
  std::string *v124;
  __int128 *v125;
  uint64_t v126[3];
  void *v127[3];
  void *v128[3];
  std::vector<std::string> v129;
  std::vector<std::string> v130;
  std::string *v131;
  std::string *v132;
  unint64_t v133;
  int32x2_t v134;
  int32x2_t v135;
  void *v136;
  uint64_t v137;
  _BYTE __p[32];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  void *v154;
  char *v155;
  uint64_t v156;
  void *v157;
  int *v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  std::vector<std::wstring> v163;
  void *v164;
  _DWORD *v165;
  uint64_t v166;
  void *__src;
  _BYTE *v168;
  uint64_t v169;
  _BYTE v170[208];
  unint64_t v171;
  std::__shared_weak_count *v172;
  std::string v173;
  unsigned __int8 v174[8];
  int v175[4];
  uint64_t v176;

  v4 = a3;
  v176 = *MEMORY[0x1E0C80C00];
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*v4)[19].__end_cap_.__value_;
  v8 = *(std::__shared_weak_count **)(a1 + 864);
  v171 = *(_QWORD *)(a1 + 856);
  v172 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(value, &v171, 0, -1);
  v11 = v172;
  if (v172)
  {
    v12 = (unint64_t *)&v172->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)v170, *(kaldi::quasar::CEStatelessEncoderNet **)(a1 + 824), *(kaldi::quasar::CEStatelessDecoderNet **)(a1 + 832), *(kaldi::OnlineFeatureMatrix **)a2, *(const kaldi::quasar::OnlineLASAttentionChecker **)(a1 + 848), *(_DWORD *)(a1 + 532), *(_DWORD *)(a1 + 1008), *(_DWORD *)(a1 + 1012), *(_BYTE *)(a1 + 1016));
  v168 = 0;
  __src = 0;
  v169 = 0;
  v165 = 0;
  v164 = 0;
  v166 = 0;
  memset(&v163, 0, sizeof(v163));
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 840));
  v14 = 0;
  v118 = (uint64_t *)(a1 + 560);
  __s2 = 0;
  v115 = a1 + 536;
  v120 = a1;
  v121 = v4;
  while (1)
  {
    v15 = kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 840));
    v16 = *(kaldi::BeamSearchDecoder **)(a1 + 840);
    if (v15)
      break;
    memset(&v173, 0, sizeof(v173));
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(v16, (uint64_t)v170, 1u) < 1)
    {
      if (*(int *)(a1 + 1008) >= 1
        && *(_BYTE *)(a1 + 1016)
        && kaldi::quasar::OnlineLASSpeculativeDecodable::EncodingFinished((kaldi::quasar::OnlineLASSpeculativeDecodable *)v170))
      {
        v19 = 3;
      }
      else
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v173, (char *)__src, (uint64_t)v168, (v168 - (_BYTE *)__src) >> 2);
        v20 = *(_QWORD *)(a1 + 840);
        if (&v164 != (void **)(v20 + 232))
          std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&v164, *(uint64_t **)(v20 + 232), *(uint64_t **)(v20 + 240), (uint64_t)(*(_QWORD *)(v20 + 240) - *(_QWORD *)(v20 + 232)) >> 3);
        v21 = v164;
        v22 = v165;
        size = (_DWORD *)v173.__r_.__value_.__l.__size_;
        while (v21 != v22)
        {
          if ((unint64_t)size >= v173.__r_.__value_.__r.__words[2])
          {
            v25 = (_DWORD *)v173.__r_.__value_.__r.__words[0];
            v26 = (uint64_t)((uint64_t)size - v173.__r_.__value_.__r.__words[0]) >> 2;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v28 = v173.__r_.__value_.__r.__words[2] - v173.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v173.__r_.__value_.__r.__words[2] - v173.__r_.__value_.__r.__words[0]) >> 1 > v27)
              v27 = v28 >> 1;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v173.__r_.__value_.__r.__words[2], v29);
              size = (_DWORD *)v173.__r_.__value_.__l.__size_;
              v25 = (_DWORD *)v173.__r_.__value_.__r.__words[0];
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[4 * v26];
            *(_DWORD *)v31 = *v21;
            v24 = (std::string::size_type)(v31 + 4);
            while (size != v25)
            {
              v32 = *--size;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v173.__r_.__value_.__l.__size_ = v24;
            v173.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30[4 * v29];
            if (v25)
              operator delete(v25);
          }
          else
          {
            *size = *v21;
            v24 = (std::string::size_type)(size + 1);
          }
          v173.__r_.__value_.__l.__size_ = v24;
          v21 += 2;
          size = (_DWORD *)v24;
        }
        if ((_DWORD *)((char *)size - v173.__r_.__value_.__r.__words[0]) != (_DWORD *)(v14 - (_QWORD)__s2)
          || memcmp(v173.__r_.__value_.__l.__data_, __s2, (size_t)size - v173.__r_.__value_.__r.__words[0]))
        {
          v33 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v170);
          a1 = v120;
          v4 = v121;
          v34 = *v121;
          LODWORD(v34[24].__begin_) = v33;
          quasar::SymbolTableList::lookup((uint64_t *)v34[19].__end_cap_.__value_, (int **)&v173, (uint64_t *)&v34[2], (char **)&v34[3], 1);
          if (*(_BYTE *)(a2 + 561))
          {
            if (*(_QWORD *)(v120 + 568) != *(_QWORD *)(v120 + 560))
            {
              quasar::formatResults((uint64_t *)&(*v121)[2], v118, v115, *(unsigned __int8 *)(v120 + 624), __p);
              v35 = *v121;
              std::vector<std::string>::__vdeallocate(*v121 + 2);
              *(_OWORD *)&v35[2].__begin_ = *(_OWORD *)__p;
              v35[2].__end_cap_.__value_ = *(std::wstring **)&__p[16];
              memset(__p, 0, 24);
              v160 = (void **)__p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v160);
            }
            v36 = *v121;
            end = v163.__end_;
            begin = (unsigned __int8 *)v163.__begin_;
            v39 = (unsigned __int8 *)(*v121)[2].__begin_;
            if ((char *)v163.__end_ - (char *)v163.__begin_ == (char *)(*v121)[2].__end_ - (char *)v39)
            {
              while (1)
              {
                if (begin == (unsigned __int8 *)end)
                {
                  a1 = v120;
                  v4 = v121;
                  goto LABEL_61;
                }
                if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)__p, begin, v39))
                  break;
                begin += 24;
                v39 += 24;
              }
              v36 = *v121;
            }
            v40 = v36[23].__end_;
            v41 = *(unsigned int *)(*(_QWORD *)a4 + 12);
            v161 = 0;
            v160 = 0;
            v162 = 0;
            v158 = 0;
            v157 = 0;
            v159 = 0;
            v155 = 0;
            v154 = 0;
            v156 = 0;
            __p[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p[8], "▁");
            LOWORD(v113) = 0;
            (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, void ***, void **, void **, int, _BYTE *))(v40->__r_.__value_.__r.__words[0] + 24))(v40, v36 + 2, v41, 1, 0, 0, &v160, &v157, &v154, v113, __p);
            a1 = v120;
            v4 = v121;
            if ((__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
            *(_QWORD *)__p = &v154;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            *(_QWORD *)__p = &v157;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            *(_QWORD *)__p = &v160;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (&v163 != &(*v121)[2])
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v163, (std::string *)(*v121)[2].__begin_, (__int128 *)(*v121)[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)(*v121)[2].__end_ - (char *)(*v121)[2].__begin_) >> 3));
          }
LABEL_61:
          if (__s2)
            operator delete(__s2);
          v19 = 0;
          v14 = v173.__r_.__value_.__l.__size_;
          __s2 = (void *)v173.__r_.__value_.__r.__words[0];
          goto LABEL_64;
        }
        v19 = 0;
        a1 = v120;
        v4 = v121;
      }
    }
    else
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v160);
      kaldi::BeamSearchDecoder::GetBestPath(*(_QWORD *)(a1 + 840), (uint64_t)&v160);
      memset(__p, 0, 24);
      v168 = __src;
      fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v160, (uint64_t)__p, (uint64_t)&__src, (int32x2_t *)&v157, 0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v160 = (void **)&unk_1E5D25580;
      v17 = v161;
      if (v161)
      {
        v18 = *(_DWORD *)(v161 + 56) - 1;
        *(_DWORD *)(v161 + 56) = v18;
        if (!v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      v19 = 2;
    }
    if (v173.__r_.__value_.__r.__words[0])
    {
      v173.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
      operator delete(v173.__r_.__value_.__l.__data_);
    }
LABEL_64:
    if (v19 == 3)
    {
      v16 = *(kaldi::BeamSearchDecoder **)(a1 + 840);
      break;
    }
  }
  v42 = __s2;
  kaldi::BeamSearchDecoder::FinalizeDecoding(v16);
  v43 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v170);
  for (i = *v4; ; v43 = LODWORD(i[24].__begin_) + 1)
  {
    LODWORD(i[24].__begin_) = v43;
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)a2, v43, 1);
    i = *v4;
    if (!IsValidFrame)
      break;
  }
  WORD2(i[24].__begin_) = 257;
  v46 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 840), -1);
  v47 = quasar::gLogLevel < 4 || v46;
  if ((v47 & 1) == 0)
  {
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[13].__end_, (__int128 *)__p);
  v48 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v49 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if ((kaldi::BeamSearchDecoder::GetRawLattice(*(_QWORD *)(a1 + 840), (uint64_t)(*v4)[13].__end_, -1) & 1) != 0)
  {
    kaldi::TopSortLatticeIfNeeded((uint64_t)(*v4)[13].__end_);
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v136);
    v51 = (uint64_t)(*v4)[13].__end_;
    v52 = *(unsigned int *)(*(_QWORD *)a4 + 16);
    v135 = vdup_n_s32(0x7F800000u);
    fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v51, (uint64_t)&v136, v52, 0, 0, (uint64_t *)&v135, -1, 0);
    quasar::OnlineLASLmRescoringSpeculativeBeamSearchDecoder::composeNbestLatticePathsWithFst((_QWORD *)a1, (uint64_t)&v136, (uint64_t)(*v4)[13].__end_);
    v53 = *v4;
    LODWORD(v53[21].__begin_) = 1065353216;
    HIDWORD(v53[21].__begin_) = *(_DWORD *)(a1 + 816);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[6].__end_, (__int128 *)__p);
    v54 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v55 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)(*v4)[13].__end_, (uint64_t)(*v4)[6].__end_, 1);
    kaldi::TopSortCompactLatticeIfNeeded((uint64_t)(*v4)[6].__end_);
    v161 = 0;
    v160 = 0;
    v162 = 0;
    fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)(*v4)[13].__end_, (uint64_t *)&v160);
    v57 = operator new(0x30uLL);
    v57[2] = 0;
    *v57 = &unk_1E5D456D0;
    v57[1] = 0;
    v57[4] = 0;
    v57[5] = 0;
    v57[3] = 0;
    *(_QWORD *)__p = v57 + 3;
    *(_QWORD *)&__p[8] = v57;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[14].__end_cap_, (__int128 *)__p);
    v58 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v59 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = operator new(0x30uLL);
    v61[2] = 0;
    *v61 = &unk_1E5D458C8;
    v61[1] = 0;
    v61[4] = 0;
    v61[5] = 0;
    v61[3] = 0;
    *(_QWORD *)__p = v61 + 3;
    *(_QWORD *)&__p[8] = v61;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[16].__end_, (__int128 *)__p);
    v62 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v63 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v160;
    *(_QWORD *)v117 = v161;
    if (v160 != (void **)v161)
    {
      v114 = (unsigned __int8 *)(a1 + 936);
      v116 = (unsigned __int8 *)(a1 + 960);
      do
      {
        v158 = 0;
        v157 = 0;
        v159 = 0;
        v155 = 0;
        v154 = 0;
        v156 = 0;
        v131 = 0;
        v132 = 0;
        v133 = 0;
        fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)v65, (uint64_t)&v157, (uint64_t)&v154, &v134, 1);
        std::vector<std::string>::vector(&v130, ((char *)v158 - (_BYTE *)v157) >> 2);
        std::vector<std::string>::vector(&v129, ((char *)v158 - (_BYTE *)v157) >> 2);
        v66 = (int *)v157;
        v67 = v158;
        if (v157 != v158)
        {
          v68 = v130.__begin_;
          do
          {
            (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 896) + 88))(__p, *(_QWORD *)(a1 + 896), *v66);
            if (SHIBYTE(v68->__r_.__value_.__r.__words[2]) < 0)
              operator delete(v68->__r_.__value_.__l.__data_);
            v69 = *(_OWORD *)__p;
            v68->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
            ++v68;
            ++v66;
          }
          while (v66 != v67);
        }
        v70 = (char *)v154;
        v71 = v155;
        if (v154 != v155)
        {
          v72 = v129.__begin_;
          do
          {
            quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(a1 + 856), __p);
            if (SHIBYTE(v72->__r_.__value_.__r.__words[2]) < 0)
              operator delete(v72->__r_.__value_.__l.__data_);
            v73 = *(_OWORD *)__p;
            v72->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
            *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
            ++v72;
            v70 += 4;
          }
          while (v70 != v71);
        }
        std::vector<BOOL>::vector(v128, ((char *)v158 - (_BYTE *)v157) >> 2);
        std::vector<BOOL>::vector(v127, ((char *)v158 - (_BYTE *)v157) >> 2);
        v74 = (int *)v157;
        v75 = v158;
        if (v157 != v158)
        {
          v76 = 0;
          v77 = (uint64_t *)v128[0];
          do
          {
            v78 = 1 << v76;
            if (*v74)
              v79 = *v77 & ~v78;
            else
              v79 = *v77 | v78;
            *v77 = v79;
            ++v74;
            v77 += v76 == 63;
            if (v76 == 63)
              v76 = 0;
            else
              ++v76;
          }
          while (v74 != v75);
        }
        v80 = (char *)v154;
        v81 = v155;
        if (v154 != v155)
        {
          v82 = 0;
          v83 = (uint64_t *)v127[0];
          do
          {
            v84 = 1 << v82;
            if (*(_DWORD *)v80)
              v85 = *v83 & ~v84;
            else
              v85 = *v83 | v84;
            *v83 = v85;
            v80 += 4;
            v83 += v82 == 63;
            if (v82 == 63)
              v82 = 0;
            else
              ++v82;
          }
          while (v80 != v81);
        }
        v123 = v65;
        quasar::formatWordResults(&v130, &v129, v128, v127, v118, v116, v114, v126);
        v87 = v126[0];
        v86 = v126[1];
        while (v87 != v86)
        {
          *(_DWORD *)__p = 0;
          LODWORD(v173.__r_.__value_.__l.__data_) = 0;
          LODWORD(v124) = 0;
          v175[0] = 1;
          v174[0] = 1;
          v88 = v132;
          if ((unint64_t)v132 >= v133)
          {
            v89 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v131, v87, (int *)__p, (int *)&v173, (int *)&v124, v175, v174);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v133, v132, v87, (int *)__p, (int *)&v173, (int *)&v124, v175, v174);
            v89 = (std::string *)((char *)v88 + 224);
          }
          v132 = v89;
          std::vector<std::pair<std::string,float>>::vector(&v124, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v87 + 32) - *(_QWORD *)(v87 + 24)) >> 3));
          v91 = *(__int128 **)(v87 + 24);
          v90 = *(__int128 **)(v87 + 32);
          if (v91 != v90)
          {
            v92 = v124 + 1;
            do
            {
              if (*((char *)v91 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v91, *((_QWORD *)v91 + 1));
              }
              else
              {
                v93 = *v91;
                v173.__r_.__value_.__r.__words[2] = *((_QWORD *)v91 + 2);
                *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v93;
              }
              if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)__p, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
              else
                *(std::string *)__p = v173;
              v94 = *(_QWORD *)__p;
              *(_QWORD *)v175 = *(_QWORD *)&__p[8];
              *(_QWORD *)((char *)&v175[1] + 3) = *(_QWORD *)&__p[15];
              v95 = __p[23];
              if (SHIBYTE(v92[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v92[-1].__r_.__value_.__l.__data_);
              v92[-1].__r_.__value_.__r.__words[0] = v94;
              v92[-1].__r_.__value_.__l.__size_ = *(_QWORD *)v175;
              *(std::string::size_type *)((char *)&v92[-1].__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v175[1] + 3);
              *((_BYTE *)&v92[-1].__r_.__value_.__s + 23) = v95;
              LODWORD(v92->__r_.__value_.__l.__data_) = 0;
              if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v173.__r_.__value_.__l.__data_);
              v91 = (__int128 *)((char *)v91 + 24);
              v92 = (std::string *)((char *)v92 + 32);
            }
            while (v91 != v90);
          }
          if (&v132[-5].__r_.__value_.__r.__words[2] != (std::string::size_type *)&v124)
            std::vector<std::pair<std::string,float>>::__assign_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>((uint64_t)&v132[-5].__r_.__value_.__r.__words[2], v124, v125, ((char *)v125 - (char *)v124) >> 5);
          *(_QWORD *)__p = &v124;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v87 += 48;
        }
        if (v131 != v132)
          v132[-8].__r_.__value_.__s.__data_[12] = 0;
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(*v121)[14].__end_cap_.__value_, (uint64_t)&v131);
        a1 = v120;
        v96 = (*v121)[16].__end_;
        v97 = *(float *)&v134.i32[1];
        v98 = (double *)v96->__r_.__value_.__l.__size_;
        v99 = v96->__r_.__value_.__r.__words[2];
        if ((unint64_t)v98 >= v99)
        {
          v101 = (double *)v96->__r_.__value_.__r.__words[0];
          v102 = (uint64_t)((uint64_t)v98 - v96->__r_.__value_.__r.__words[0]) >> 3;
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v104 = v99 - (_QWORD)v101;
          if (v104 >> 2 > v103)
            v103 = v104 >> 2;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
            v105 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v105 = v103;
          if (v105)
          {
            v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v96->__r_.__value_.__r.__words[2], v105);
            v101 = (double *)v96->__r_.__value_.__r.__words[0];
            v98 = (double *)v96->__r_.__value_.__l.__size_;
          }
          else
          {
            v106 = 0;
          }
          v107 = (double *)&v106[8 * v102];
          *v107 = v97;
          v100 = v107 + 1;
          while (v98 != v101)
          {
            v108 = *((_QWORD *)v98-- - 1);
            *((_QWORD *)v107-- - 1) = v108;
          }
          v96->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v107;
          v96->__r_.__value_.__l.__size_ = (std::wstring::size_type)v100;
          v96->__r_.__value_.__r.__words[2] = (std::wstring::size_type)&v106[8 * v105];
          if (v101)
            operator delete(v101);
        }
        else
        {
          *v98 = *(float *)&v134.i32[1];
          v100 = v98 + 1;
        }
        v96->__r_.__value_.__l.__size_ = (std::wstring::size_type)v100;
        *(_QWORD *)__p = v126;
        std::vector<std::pair<std::string,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v127[0])
          operator delete(v127[0]);
        if (v128[0])
          operator delete(v128[0]);
        *(_QWORD *)__p = &v129;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &v130;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(_QWORD *)__p = &v131;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v154)
        {
          v155 = (char *)v154;
          operator delete(v154);
        }
        if (v157)
        {
          v158 = (int *)v157;
          operator delete(v157);
        }
        v65 = v123 + 2;
      }
      while (v123 + 2 != *(void ***)v117);
    }
    *(_QWORD *)__p = &v160;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v136 = &unk_1E5D25580;
    v109 = v137;
    if (v137)
    {
      v110 = *(_DWORD *)(v137 + 56) - 1;
      *(_DWORD *)(v137 + 56) = v110;
      if (!v110)
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
    }
    v111 = 0;
    v42 = __s2;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get raw recognition lattice.", 38);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v111 = 2;
  }
  *(_QWORD *)__p = &v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (__src)
  {
    v168 = __src;
    operator delete(__src);
  }
  if (v42)
    operator delete(v42);
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)v170);
  return v111;
}

void sub_1ADAF1818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void *v49;
  void *v50;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a47);
  STACK[0x270] = (unint64_t)&STACK[0x288];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  v49 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v49;
    operator delete(v49);
  }
  v50 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v50;
    operator delete(v50);
  }
  if (v47)
    operator delete(v47);
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

kaldi::quasar::CEStatelessEncoderNet *std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100](kaldi::quasar::CEStatelessEncoderNet **a1, kaldi::quasar::CEStatelessEncoderNet *a2)
{
  kaldi::quasar::CEStatelessEncoderNet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEStatelessEncoderNet::~CEStatelessEncoderNet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

kaldi::quasar::CEStatelessDecoderNet *std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100](kaldi::quasar::CEStatelessDecoderNet **a1, kaldi::quasar::CEStatelessDecoderNet *a2)
{
  kaldi::quasar::CEStatelessDecoderNet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEStatelessDecoderNet::~CEStatelessDecoderNet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

kaldi::quasar::OnlineLASAttentionChecker *std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100](kaldi::quasar::OnlineLASAttentionChecker **a1, kaldi::quasar::OnlineLASAttentionChecker *a2)
{
  kaldi::quasar::OnlineLASAttentionChecker *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::OnlineLASAttentionChecker::~OnlineLASAttentionChecker(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void kaldi::ComplexFft<float>(uint64_t a1, uint64_t a2, void **a3)
{
  int v3;
  uint64_t v7;
  unsigned int *v8;
  void **v9;
  void *v10[3];
  void *__p;
  _BYTE *v12;
  uint64_t v13;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 2)
  {
    v7 = v3 >> 1;
    __p = 0;
    v12 = 0;
    v13 = 0;
    kaldi::Factorize<int>(v3 >> 1, (uint64_t)&__p);
    if (v12 == __p)
      v8 = 0;
    else
      v8 = (unsigned int *)__p;
    memset(v10, 0, sizeof(v10));
    if (a3)
      v9 = a3;
    else
      v9 = v10;
    kaldi::ComplexFftRecursive<float>(*(_QWORD *)a1, 1, v7, v8, (unsigned int *)((char *)v8 + v12 - (_BYTE *)__p), a2, (uint64_t)v9);
    kaldi::Vector<float>::Destroy((uint64_t)v10);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADAF1CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::Factorize<int>(int a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  int v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  int v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int *v25;
  int v26;

  v4 = 0;
  v5 = *(int **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = (_QWORD *)(a2 + 16);
  while (a1 != 1)
  {
    v7 = dword_1AE160068[v4];
    if (!(a1 % v7))
    {
      v8 = v5;
      do
      {
        if ((unint64_t)v8 >= *v6)
        {
          v9 = *(int **)a2;
          v10 = ((uint64_t)v8 - *(_QWORD *)a2) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
LABEL_46:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v12 = *v6 - (_QWORD)v9;
          if (v12 >> 1 > v11)
            v11 = v12 >> 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
            v13 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v13);
            v9 = *(int **)a2;
            v8 = *(int **)(a2 + 8);
          }
          else
          {
            v14 = 0;
          }
          v15 = (int *)&v14[4 * v10];
          *v15 = v7;
          v5 = v15 + 1;
          while (v8 != v9)
          {
            v16 = *--v8;
            *--v15 = v16;
          }
          *(_QWORD *)a2 = v15;
          *(_QWORD *)(a2 + 8) = v5;
          *(_QWORD *)(a2 + 16) = &v14[4 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v8 = v7;
          v5 = v8 + 1;
        }
        a1 /= v7;
        *(_QWORD *)(a2 + 8) = v5;
        v8 = v5;
      }
      while (!(a1 % v7));
    }
    if (++v4 == 10)
    {
      if (a1 != 1)
      {
        v17 = 31;
        do
        {
          if (a1 % v17)
          {
            v18 = v5;
          }
          else
          {
            do
            {
              if ((unint64_t)v5 >= *v6)
              {
                v19 = *(int **)a2;
                v20 = ((uint64_t)v5 - *(_QWORD *)a2) >> 2;
                v21 = v20 + 1;
                if ((unint64_t)(v20 + 1) >> 62)
                  goto LABEL_46;
                v22 = *v6 - (_QWORD)v19;
                if (v22 >> 1 > v21)
                  v21 = v22 >> 1;
                if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                  v23 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v23 = v21;
                if (v23)
                {
                  v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v23);
                  v19 = *(int **)a2;
                  v5 = *(int **)(a2 + 8);
                }
                else
                {
                  v24 = 0;
                }
                v25 = (int *)&v24[4 * v20];
                *v25 = v17;
                v18 = v25 + 1;
                while (v5 != v19)
                {
                  v26 = *--v5;
                  *--v25 = v26;
                }
                *(_QWORD *)a2 = v25;
                *(_QWORD *)(a2 + 8) = v18;
                *(_QWORD *)(a2 + 16) = &v24[4 * v23];
                if (v19)
                  operator delete(v19);
              }
              else
              {
                *v5 = v17;
                v18 = v5 + 1;
              }
              a1 /= v17;
              *(_QWORD *)(a2 + 8) = v18;
              v5 = v18;
            }
            while (!(a1 % v17));
          }
          v17 += 2;
          v5 = v18;
        }
        while (a1 != 1);
      }
      return;
    }
  }
}

void kaldi::ComplexFftRecursive<float>(uint64_t a1, int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  double v36;
  float v37;
  __float2 v38;
  float v39;
  __float2 v40;
  uint64_t v41;
  float *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  float v60;
  uint64_t v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  int *v68;
  int v69;
  int v70;
  float v71;

  if (a4 != a5)
  {
    v12 = a2;
    v14 = 2 * (int)a3;
    if (a2 < 2
      || 8 * (int)a3 * a2 <= 0x2000
      || ((0x2000 / (8 * (int)a3)) <= 1 ? (v15 = 1) : (v15 = 0x2000 / (8 * (int)a3)), v15 >= a2))
    {
      v18 = *a4;
      v19 = ((int)a3 / (int)v18);
      if ((int)v19 >= 2)
      {
        if (*(_DWORD *)(a7 + 8) < (int)a3)
          kaldi::Vector<float>::Resize((void **)a7, a3, 0);
        if (v12 >= 1)
        {
          v20 = 0;
          v21 = *(_DWORD **)a7;
          v22 = a1;
          do
          {
            v23 = 0;
            v24 = 1;
            do
            {
              v25 = 0;
              v26 = v24;
              v27 = v21;
              v28 = v23;
              do
              {
                v29 = ((int)a3 / (int)v18);
                v30 = v27;
                v31 = v28;
                do
                {
                  *v30++ = *(_DWORD *)(v22 + 4 * v31);
                  v31 += 2 * v18;
                  --v29;
                }
                while (v29);
                ++v25;
                v28 += 2;
                v27 += v19;
              }
              while (v25 != v18);
              if ((int)v19 * (int)v18 >= 1)
              {
                v32 = 4 * v23;
                v33 = (v19 * v18);
                v34 = v21;
                do
                {
                  v35 = *v34++;
                  *(_DWORD *)(v22 + v32) = v35;
                  v32 += 8;
                  --v33;
                }
                while (v33);
              }
              v24 = 0;
              v23 = 1;
            }
            while ((v26 & 1) != 0);
            ++v20;
            v22 += 4 * v14;
          }
          while (v20 != v12);
        }
      }
      kaldi::ComplexFftRecursive<float>(a1, (v18 * v12), ((int)a3 / (int)v18), a4 + 1, a5, a6, a7);
      if ((_DWORD)a6)
        v36 = -6.28318531;
      else
        v36 = 6.28318531;
      v37 = v36 / (double)(int)a3;
      v38 = __sincosf_stret(v37);
      v39 = v36 / (double)(int)v18;
      v40 = __sincosf_stret(v39);
      if (*(_DWORD *)(a7 + 8) < 2 * (int)v18)
        kaldi::Vector<float>::Resize((void **)a7, (2 * v18), 0);
      if ((_DWORD)v14 * v12)
      {
        v41 = a1 + 4 * (int)v14 * v12;
        v42 = *(float **)a7;
        v43 = 2 * v19;
        v44 = *(_QWORD *)a7 + 4;
        do
        {
          if ((int)v19 >= 1)
          {
            v45 = 0;
            v46 = 1.0;
            v47 = 0.0;
            v48 = 1;
            v49 = 4 * v19;
            do
            {
              v50 = 0;
              v51 = 2 * ((int)v19 + (int)v45);
              v52 = (2 * ((int)v19 + (int)v45)) | 1;
              v53 = v47;
              v54 = v46;
              do
              {
                v55 = *(float *)(a1 + 8 * v45);
                v56 = 2 * v50;
                v42[v56] = v55;
                v57 = *(float *)(a1 + 4 * ((2 * v45) | 1));
                v58 = (2 * v50) | 1;
                v42[v58] = v57;
                v59 = v55 + (float)((float)(*(float *)(a1 + 4 * v51) * v54) - (float)(*(float *)(a1 + 4 * v52) * v53));
                v42[v56] = v59;
                v60 = v57 + (float)((float)(v54 * *(float *)(a1 + 4 * v52)) + (float)(*(float *)(a1 + 4 * v51) * v53));
                v42[v58] = v60;
                if (v18 >= 3)
                {
                  v61 = v18 - 2;
                  v62 = v49;
                  v63 = v53;
                  v64 = v54;
                  do
                  {
                    v65 = -(float)(v63 * v53);
                    v63 = (float)(v54 * v63) + (float)(v64 * v53);
                    v64 = v65 + (float)(v64 * v54);
                    v59 = v59
                        + (float)((float)(*(float *)(a1 + 4 * v62) * v64)
                                - (float)(*(float *)(a1 + 4 * (v62 + 1)) * v63));
                    v42[2 * v50] = v59;
                    v60 = v60
                        + (float)((float)(v64 * *(float *)(a1 + 4 * (v62 + 1)))
                                + (float)(*(float *)(a1 + 4 * v62) * v63));
                    v42[v58] = v60;
                    v62 += v43;
                    --v61;
                  }
                  while (v61);
                }
                if (v50 != (_DWORD)v18 - 1)
                {
                  v66 = -(float)(v53 * v40.__sinval);
                  v53 = (float)(v40.__cosval * v53) + (float)(v54 * v40.__sinval);
                  v54 = v66 + (float)(v54 * v40.__cosval);
                }
                ++v50;
              }
              while (v50 != v18);
              v67 = v18;
              v68 = (int *)v44;
              v69 = v48;
              do
              {
                *(_DWORD *)(a1 + 4 * (v69 - 1)) = *(v68 - 1);
                v70 = *v68;
                v68 += 2;
                *(_DWORD *)(a1 + 4 * v69) = v70;
                v69 += v43;
                --v67;
              }
              while (v67);
              v71 = -(float)(v47 * v38.__sinval);
              v47 = (float)(v38.__cosval * v47) + (float)(v46 * v38.__sinval);
              ++v45;
              v46 = v71 + (float)(v46 * v38.__cosval);
              v49 += 2;
              v48 += 2;
            }
            while (v45 != v19);
          }
          a1 += 4 * v14;
        }
        while (a1 != v41);
      }
    }
    else
    {
      do
      {
        if (v15 >= v12)
          v16 = v12;
        else
          v16 = v15;
        kaldi::ComplexFftRecursive<float>(a1, v16, a3, a4, a5, a6, a7);
        a1 += 4 * (int)v14 * (int)v16;
        v17 = __OFSUB__(v12, (_DWORD)v16);
        v12 -= v16;
      }
      while (!((v12 < 0) ^ v17 | (v12 == 0)));
    }
  }
}

void kaldi::RealFft<float>(uint64_t a1, int a2)
{
  uint64_t v2;
  char v3;
  int v5;
  float *v6;
  float v7;
  __float2 v8;
  float v9;
  int v10;
  int v11;
  int v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = a2;
    if (a2)
    {
      kaldi::ComplexFft<float>(a1, 1, 0);
      v5 = -1;
    }
    else
    {
      v5 = 1;
    }
    v6 = *(float **)a1;
    v7 = 6.28318531 / (double)(int)v2 * (double)v5;
    v8 = __sincosf_stret(v7);
    if ((int)v2 >= 4)
    {
      v9 = (float)-v5;
      v10 = ((int)v2 >> 1) - 1;
      v11 = 2 * ((int)v2 >> 1) - 1;
      v12 = v2 - 1;
      v13 = &v6[v2 - 2];
      v14 = v6 + 3;
      v15 = 0.0;
      v16 = 2;
      v17 = 1;
      do
      {
        v18 = -(float)(v15 * v8.__sinval);
        v15 = (float)(v8.__cosval * v15) + (float)(v9 * v8.__sinval);
        v9 = v18 + (float)(v9 * v8.__cosval);
        v19 = *(v14 - 1);
        v20 = (float)(v19 + *v13) * 0.5;
        v21 = v6[v12];
        v22 = (float)(*v14 - v21) * 0.5;
        v23 = (float)(*v14 + v21) * 0.5;
        v24 = (float)(v19 - *v13) * -0.5;
        v25 = (float)(v15 * v23) + (float)(v9 * v24);
        *(v14 - 1) = v20 + (float)((float)(v9 * v23) - (float)(v15 * v24));
        *v14 = v22 + v25;
        if (v17 != v10)
        {
          v6[v11 - 1] = v20 + (float)((float)(v15 * v24) - (float)(v9 * v23));
          v6[v11] = v25 - v22;
        }
        ++v17;
        v16 += 2;
        --v10;
        v11 -= 2;
        v12 -= 2;
        v13 -= 2;
        v14 += 2;
      }
      while (v16 <= (int)v2 >> 1);
    }
    v26 = v6[1];
    v27 = *v6 + v26;
    v28 = *v6 - v26;
    *v6 = v27;
    v6[1] = v28;
    if ((v3 & 1) == 0)
    {
      *v6 = v27 * 0.5;
      v6[1] = v28 * 0.5;
      kaldi::ComplexFft<float>(a1, 0, 0);
      kaldi::VectorBase<float>::Scale(a1, 2.0);
    }
  }
}

void kaldi::ComputeDctMatrix<float>(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  double v5;
  float v6;
  uint64_t v7;
  float v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  float *v22;
  uint64x2_t v23;
  int64x2_t v24;
  float64x2_t v25;
  float v26;
  float v27;
  int64x2_t v28;
  float64x2_t v29;
  uint64x2_t v30;
  double v31;
  float64x2_t __x;
  long double v33;
  int32x2_t v34;
  int64x2_t v35;

  v2 = kaldi::MatrixBase<float>::NumRows(a1);
  v3 = kaldi::MatrixBase<float>::NumCols(a1);
  v4 = 0;
  v5 = (float)v3;
  v6 = sqrt(1.0 / v5);
  v7 = *(_QWORD *)a1;
  do
    *(float *)(v7 + 4 * v4++) = v6;
  while (v3 != v4);
  if (v2 >= 2)
  {
    v8 = sqrt(2.0 / v5);
    v9 = v8;
    v31 = 3.14159265 / (double)v3;
    v10 = *(int *)(a1 + 16);
    v11 = v2;
    v12 = (v3 + 1) & 0xFFFFFFFE;
    v30 = (uint64x2_t)vdupq_n_s64((unint64_t)v3 - 1);
    v13 = 4 * v10;
    v14 = v7 + 4 * v10 + 4;
    v15 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    v29 = _Q0;
    v28 = vdupq_n_s64(2uLL);
    do
    {
      v21 = 0;
      v22 = (float *)v14;
      v23 = (uint64x2_t)xmmword_1AE140A90;
      do
      {
        v34 = vmovn_s64((int64x2_t)vcgeq_u64(v30, v23));
        v35 = (int64x2_t)v23;
        v24.i64[0] = (int)v21;
        v24.i64[1] = (int)v21 + 1;
        __x = vmulq_n_f64(vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v24), v29), v31), (double)(int)v15);
        v33 = cos(__x.f64[1]);
        v25.f64[0] = cos(__x.f64[0]);
        v25.f64[1] = v33;
        if ((v34.i8[0] & 1) != 0)
        {
          v26 = v9 * v25.f64[0];
          *(v22 - 1) = v26;
        }
        if ((v34.i8[4] & 1) != 0)
        {
          v27 = vmuld_lane_f64(v9, v25, 1);
          *v22 = v27;
        }
        v21 += 2;
        v23 = (uint64x2_t)vaddq_s64(v35, v28);
        v22 += 2;
      }
      while (v12 != v21);
      ++v15;
      v14 += v13;
    }
    while (v15 != v11);
  }
}

void kaldi::CompressedMatrix::CopyFromMat<float>(uint64_t a1, float **a2)
{
  float v4;
  float v5;
  float v6;
  int v7;
  _OWORD *v8;
  uint64_t v9;
  float *v10;
  _WORD *v11;
  _BYTE *v12;
  int v13;
  __int128 v14;

  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      MEMORY[0x1AF44D160]();
    *(_QWORD *)a1 = 0;
  }
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)a2))
  {
    kaldi::MatrixBase<float>::Min((uint64_t)a2);
    v5 = v4;
    kaldi::MatrixBase<float>::Max((uint64_t)a2);
    if (v6 == v5)
      v6 = fabsf(v5) + 1.0 + v5;
    *(float *)&v14 = v5;
    *((float *)&v14 + 1) = v6 - v5;
    if ((float)(v6 - v5) <= 0.0)
      DWORD1(v14) = 925353388;
    DWORD2(v14) = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    HIDWORD(v14) = v7;
    v8 = (_OWORD *)operator new[]();
    *(_QWORD *)a1 = v8;
    *v8 = v14;
    if (v7 >= 1)
    {
      v9 = 0;
      v10 = *a2;
      v11 = v8 + 1;
      v12 = (char *)v8 + 8 * v7 + 16;
      do
      {
        v13 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
        kaldi::CompressedMatrix::CompressColumn<float>((float *)&v14, v10, v13, SDWORD2(v14), v11, v12);
        v11 += 4;
        v12 += SDWORD2(v14);
        ++v9;
        ++v10;
      }
      while (v9 < SHIDWORD(v14));
    }
  }
}

uint64_t kaldi::CompressedMatrix::Destroy(kaldi::CompressedMatrix *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    if (*((_BYTE *)this + 8))
      *((_BYTE *)this + 8) = 0;
    else
      result = MEMORY[0x1AF44D160]();
    *(_QWORD *)this = 0;
  }
  return result;
}

void kaldi::CompressedMatrix::CompressColumn<float>(float *a1, float *a2, int a3, signed int a4, _WORD *a5, _BYTE *a6)
{
  float *v10;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  double v23;
  unsigned int v24;
  double v25;
  double v26;
  unsigned int v27;
  char v28;

  v10 = a2;
  kaldi::CompressedMatrix::ComputeColHeader<float>(a1, a2, a3, a4, a5);
  if (a4 >= 1)
  {
    v14 = *a1;
    *(double *)&v15 = a1[1];
    v16 = 0x3EF000100010000ALL;
    v17 = *(double *)&v15 * 0.0000152590219;
    LOWORD(v15) = *a5;
    v18 = v14 + v17 * (double)v15;
    LOWORD(v16) = a5[1];
    v19 = v14 + v17 * (double)v16;
    LOWORD(v12) = a5[2];
    *(float *)&v12 = v14 + v17 * (double)v12;
    LOWORD(v13) = a5[3];
    *(float *)&v14 = v14 + v17 * (double)v13;
    v20 = *(float *)&v14 - *(float *)&v12;
    v21 = a4;
    do
    {
      v22 = *v10;
      if (*v10 >= v19)
      {
        v25 = (float)((float)((float)(v22 - *(float *)&v12) / v20) * 63.0) + 0.5;
        v24 = (int)v25 & ~((int)v25 >> 31);
        if (v24 >= 0x3F)
          LOBYTE(v24) = 63;
        LOBYTE(v24) = v24 | 0xC0;
        v26 = (float)((float)((float)(v22 - v19) / (float)(*(float *)&v12 - v19)) * 128.0) + 0.5;
        v27 = (int)v26 & ~((int)v26 >> 31);
        if (v27 >= 0x80)
          LOBYTE(v27) = 0x80;
        v28 = v27 + 64;
        if (v22 < *(float *)&v12)
          LOBYTE(v24) = v28;
      }
      else
      {
        v23 = (float)((float)((float)(v22 - v18) / (float)(v19 - v18)) * 64.0) + 0.5;
        v24 = (int)v23 & ~((int)v23 >> 31);
        if (v24 >= 0x40)
          LOBYTE(v24) = 64;
      }
      *a6++ = v24;
      v10 += a3;
      --v21;
    }
    while (v21);
  }
}

uint64_t kaldi::CompressedMatrix::CopyToMat<float>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  double v21;
  float v22;
  float v23;
  float *v24;
  uint64_t v25;
  int v26;
  double v27;
  BOOL v28;
  float v29;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 + 8);
    v4 = *(unsigned int *)(v3 + 12);
    kaldi::MatrixBase<float>::NumRows(a2);
    result = kaldi::MatrixBase<float>::NumCols(a2);
    if ((int)v4 >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = (_WORD *)(v3 + 16);
      v13 = v3 + 16 + 8 * v4;
      do
      {
        if ((int)v5 >= 1)
        {
          v14 = 0;
          v15 = *(float *)(v3 + 4) * 0.0000152590219;
          LOWORD(v7) = v12[3];
          v16 = *(float *)v3;
          v17 = v16 + v15 * (double)*(unint64_t *)&v7;
          LOWORD(v8) = v12[2];
          v8 = v16 + v15 * (double)*(unint64_t *)&v8;
          *(float *)&v8 = v8;
          LOWORD(v9) = v12[1];
          *(double *)&v18 = v16 + v15 * (double)*(unint64_t *)&v9;
          v19 = *(double *)&v18;
          LOWORD(v18) = *v12;
          v20 = v16 + v15 * (double)v18;
          v21 = *(float *)&v8;
          v22 = v17 - *(float *)&v8;
          v7 = v19;
          *(float *)&v8 = *(float *)&v8 - v19;
          v9 = v20;
          v23 = v19 - v20;
          v24 = (float *)(*(_QWORD *)a2 + v10);
          v25 = 4 * *(int *)(a2 + 16);
          do
          {
            result = *(unsigned __int8 *)(v13 + v14);
            v26 = result - 64;
            if (result > 0x40)
            {
              v28 = result >= 0xC0;
              result = (result - 192);
              if ((_DWORD)result != 0 && v28)
                v27 = v21 + (float)(v22 * (float)(int)result) * 0.0158730159;
              else
                v27 = v7 + (float)(*(float *)&v8 * (float)v26) * 0.0078125;
            }
            else
            {
              v27 = v9 + (float)(v23 * (float)result) * 0.015625;
            }
            v29 = v27;
            *v24 = v29;
            ++v14;
            v24 = (float *)((char *)v24 + v25);
          }
          while (v5 != v14);
          v13 += v14;
        }
        ++v11;
        v12 += 4;
        v10 += 4;
      }
      while (v11 != v4);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumRows(a2);
    return kaldi::MatrixBase<float>::NumCols(a2);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CopyToMat<double>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  double v25;
  float v26;
  double *v27;
  uint64_t v28;
  int v29;
  double v30;
  BOOL v31;
  float v32;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 + 8);
    v4 = *(unsigned int *)(v3 + 12);
    kaldi::MatrixBase<float>::NumRows(a2);
    result = kaldi::MatrixBase<float>::NumCols(a2);
    if ((int)v4 >= 1)
    {
      v8 = 0;
      v9 = 0;
      v10 = (_WORD *)(v3 + 16);
      v11 = v3 + 16 + 8 * v4;
      v12 = *(float *)v3;
      v13 = *(float *)(v3 + 4) * 0.0000152590219;
      do
      {
        if ((int)v5 >= 1)
        {
          v14 = 0;
          LOWORD(v7) = v10[3];
          *(double *)&v15 = v12 + v13 * (double)*(unint64_t *)&v7;
          v16 = *(double *)&v15;
          LOWORD(v15) = v10[2];
          *(double *)&v17 = v12 + v13 * (double)v15;
          v18 = *(double *)&v17;
          LOWORD(v17) = v10[1];
          *(double *)&v19 = v12 + v13 * (double)v17;
          v20 = *(double *)&v19;
          LOWORD(v19) = *v10;
          v21 = v12 + v13 * (double)v19;
          v7 = v18;
          v22 = v16 - v18;
          v23 = v20;
          v24 = v18 - v20;
          v25 = v21;
          v26 = v20 - v21;
          v27 = (double *)(*(_QWORD *)a2 + v8);
          v28 = 8 * *(int *)(a2 + 16);
          do
          {
            result = *(unsigned __int8 *)(v11 + v14);
            v29 = result - 64;
            if (result > 0x40)
            {
              v31 = result >= 0xC0;
              result = (result - 192);
              if ((_DWORD)result != 0 && v31)
                v30 = v7 + (float)(v22 * (float)(int)result) * 0.0158730159;
              else
                v30 = v23 + (float)(v24 * (float)v29) * 0.0078125;
            }
            else
            {
              v30 = v25 + (float)(v26 * (float)result) * 0.015625;
            }
            v32 = v30;
            *v27 = v32;
            ++v14;
            v27 = (double *)((char *)v27 + v28);
          }
          while (v5 != v14);
          v11 += v14;
        }
        ++v9;
        v10 += 4;
        v8 += 8;
      }
      while (v9 != v4);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumRows(a2);
    return kaldi::MatrixBase<float>::NumCols(a2);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CopyRowsFromVec<float>(uint64_t *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8[5];

  v4 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v8, v5, v6, 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v8, a2);
  kaldi::CompressedMatrix::CopyFromMat<float>((uint64_t)a1, (float **)v8);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v8);
}

void sub_1ADAF2D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::CopyColToVec<float>(uint64_t *a1, unsigned int a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  double v16;
  _WORD *v17;
  double v18;
  float v19;
  unint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  double v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  double v30;
  BOOL v31;
  int v32;
  float v33;

  v8 = *a1;
  v9 = *(unsigned int *)(*a1 + 8);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = *(int *)(v8 + 12);
    v14 = *(float *)v8;
    v13 = *(float *)(v8 + 4);
    v12 = v8 + 16;
    v15 = 0x3EF000100010000ALL;
    v16 = v13 * 0.0000152590219;
    v17 = (_WORD *)(v12 + 8 * a2);
    LOWORD(v15) = v17[3];
    v18 = v14;
    *(float *)&v15 = v18 + v16 * (double)v15;
    LOWORD(a7) = v17[2];
    v19 = v18 + v16 * (double)*(unint64_t *)&a7;
    LOWORD(a8) = v17[1];
    *(double *)&v20 = v18 + v16 * (double)*(unint64_t *)&a8;
    v21 = *(double *)&v20;
    LOWORD(v20) = *v17;
    v22 = v18 + v16 * (double)v20;
    v23 = v12 + 8 * v11 + (int)(v9 * a2);
    a4 = v19;
    v24 = *(float *)&v15 - v19;
    v25 = v21;
    *(float *)&a7 = v19 - v21;
    v26 = v21 - v22;
    v27 = *a3;
    do
    {
      v28 = *(unsigned __int8 *)(v23 + v10);
      v29 = v28 - 64;
      if (v28 > 0x40)
      {
        v31 = v28 >= 0xC0;
        v32 = v28 - 192;
        if (v32 != 0 && v31)
          v30 = a4 + (float)(v24 * (float)v32) * 0.0158730159;
        else
          v30 = v25 + (float)(*(float *)&a7 * (float)v29) * 0.0078125;
      }
      else
      {
        v30 = v22 + (float)(v26 * (float)v28) * 0.015625;
      }
      v33 = v30;
      *(float *)(v27 + 4 * v10++) = v33;
    }
    while (v9 != v10);
  }
  return *(float *)&a4;
}

float kaldi::CompressedMatrix::CopyRowToVec<float>(uint64_t *a1, unsigned int a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  float result;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  int v21;
  float v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  int v27;
  double v28;
  double v29;
  float v30;
  float v31;

  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 12);
  if ((int)v10 >= 1)
  {
    v11 = 0;
    v12 = *(int *)(v9 + 8);
    v13 = *a3;
    v14 = (_WORD *)(v9 + 22);
    v15 = 8 * v10 + a2 + 16;
    LODWORD(result) = 1048586;
    do
    {
      v17 = *(float *)v9;
      v18 = *(float *)(v9 + 4) * 0.0000152590219;
      LOWORD(a8) = *(v14 - 2);
      v19 = v17 + v18 * (double)*(unint64_t *)&a8;
      *(float *)&v19 = v19;
      v20 = *(unsigned __int8 *)(v9 + v15);
      v21 = v20 - 64;
      if (v20 > 0x40)
      {
        LOWORD(a9) = *(v14 - 1);
        a9 = v17 + v18 * (double)*(unint64_t *)&a9;
        *(float *)&a9 = a9;
        v26 = v20 >= 0xC0;
        v27 = v20 - 192;
        if (v27 != 0 && v26)
        {
          LOWORD(v19) = *v14;
          a8 = (double)*(unint64_t *)&v19;
          v30 = v17 + v18 * a8;
          *(float *)&a8 = (float)v27;
          v25 = *(float *)&a9 + (float)((float)(v30 - *(float *)&a9) * (float)v27) * 0.0158730159;
        }
        else
        {
          v28 = *(float *)&v19;
          v29 = (float)((float)(*(float *)&a9 - *(float *)&v19) * (float)v21);
          a8 = 0.0078125;
          v25 = v28 + v29 * 0.0078125;
        }
      }
      else
      {
        LOWORD(a9) = *(v14 - 3);
        a9 = (double)*(unint64_t *)&a9;
        v22 = v17 + v18 * a9;
        v23 = v22;
        v24 = (float)((float)(*(float *)&v19 - v22) * (float)v20);
        a8 = 0.015625;
        v25 = v23 + v24 * 0.015625;
      }
      v31 = v25;
      *(float *)(v13 + 4 * v11++) = v31;
      v15 += v12;
      v14 += 4;
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::Write(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[34];

  if (a3)
  {
    if (a4)
      v7 = "CN";
    else
      v7 = "CM";
    kaldi::WriteToken(a2, 1, v7);
    if (a4 && !fst::AlignOutput(a2))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Could not align output");
LABEL_18:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    if (!*a1)
    {
      v12[0] = 0;
      v12[1] = 0;
    }
    result = std::ostream::write();
  }
  else
  {
    v8 = *a1;
    if (*a1)
    {
      v9 = *(unsigned int *)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 12);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v12, v9, v10, 1, 0);
    kaldi::CompressedMatrix::CopyToMat<float>(a1, (uint64_t)v12);
    kaldi::MatrixBase<float>::Write(v12, a2, 0, 0);
    result = kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Error writing compressed matrix to stream.");
    goto LABEL_18;
  }
  return result;
}

void sub_1ADAF3100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::CompressedMatrix::Read(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  char *v8;
  int v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *p_p;
  void **p_s1;
  uint64_t v16;
  double v17;
  double v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  _OWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  size_t v30;
  _QWORD *v31;
  __int128 v32;
  void *__s1;
  size_t __n;
  uint64_t v35;
  void *__p;
  uint64_t v37;
  unsigned __int8 v38;
  float *v39[35];

  v39[34] = *(float **)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      MEMORY[0x1AF44D160]();
    *(_QWORD *)a1 = 0;
  }
  if (!a3)
  {
    v17 = kaldi::Matrix<float>::Matrix((uint64_t)v39);
    kaldi::Matrix<float>::Read(v39, a2, 0, 0, 0, v17);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, v39);
LABEL_28:
    kaldi::Matrix<float>::~Matrix((uint64_t)v39);
LABEL_29:
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Failed to read data.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
    }
    return;
  }
  if (kaldi::Peek(a2, 1) != 67)
  {
    v18 = kaldi::Matrix<float>::Matrix((uint64_t)v39);
    kaldi::Matrix<float>::Read(v39, a2, 1, a4 != 0, 0, v18);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, v39);
    goto LABEL_28;
  }
  if (a4)
    v8 = "CN";
  else
    v8 = "CM";
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  __s1 = 0;
  __n = 0;
  v35 = 0;
  kaldi::ReadToken(a2, 1, (uint64_t)&__s1);
  v9 = SHIBYTE(v35);
  v10 = __n;
  if (v35 >= 0)
    v11 = HIBYTE(v35);
  else
    v11 = __n;
  v12 = v38;
  v13 = (char)v38;
  if ((v38 & 0x80u) != 0)
    v12 = v37;
  if (v11 != v12)
    goto LABEL_31;
  if ((v38 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if (v35 < 0)
  {
    if (memcmp(__s1, p_p, __n))
      goto LABEL_35;
LABEL_45:
    if (!a4)
      goto LABEL_49;
    goto LABEL_46;
  }
  if (!HIBYTE(v35))
    goto LABEL_45;
  p_s1 = &__s1;
  v16 = HIBYTE(v35);
  while (*(unsigned __int8 *)p_s1 == *p_p)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++p_p;
    if (!--v16)
      goto LABEL_45;
  }
LABEL_31:
  if ((v35 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v35) != 2)
      goto LABEL_61;
    v19 = (unsigned __int8 *)&__s1;
    goto LABEL_37;
  }
LABEL_35:
  if (v10 != 2)
    goto LABEL_61;
  v19 = (unsigned __int8 *)__s1;
LABEL_37:
  v20 = *v19;
  v21 = (unsigned __int8 *)__p;
  if (v13 >= 0)
    v21 = (unsigned __int8 *)&__p;
  if (v20 != *v21)
    goto LABEL_61;
  v22 = __s1;
  if (v9 >= 0)
    v22 = &__s1;
  if (v22[1] != 78)
  {
LABEL_61:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Expected token ", 15);
    if ((v38 & 0x80u) == 0)
      v25 = &__p;
    else
      v25 = __p;
    if ((v38 & 0x80u) == 0)
      v26 = v38;
    else
      v26 = v37;
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", got ", 6);
    if (v35 >= 0)
      v29 = &__s1;
    else
      v29 = __s1;
    if (v35 >= 0)
      v30 = HIBYTE(v35);
    else
      v30 = __n;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Reading aligned matrix as a stream", 34);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v39);
  }
LABEL_46:
  fst::AlignInput();
  if (a4)
  {
    std::istream::tellg();
    *(_QWORD *)a1 = (char *)v39[16] + a4;
    *(_BYTE *)(a1 + 8) = 1;
    std::istream::seekg();
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Seeking for aligned data failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
    }
    goto LABEL_52;
  }
LABEL_49:
  std::istream::read();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Failed to read header", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  if (HIDWORD(v32))
  {
    v23 = (_OWORD *)operator new[]();
    *v23 = v32;
    std::istream::read();
    *(_QWORD *)a1 = v23;
    *(_BYTE *)(a1 + 8) = 0;
LABEL_52:
    if (SHIBYTE(v35) < 0)
      operator delete(__s1);
    if ((char)v38 < 0)
      operator delete(__p);
    goto LABEL_29;
  }
  if (SHIBYTE(v35) < 0)
    operator delete(__s1);
  if ((char)v38 < 0)
    operator delete(__p);
}

void sub_1ADAF365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::Sum(kaldi::CompressedMatrix *this)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  signed int v8;
  float v9;
  uint64_t v10;
  void *v12[3];

  if (*(_QWORD *)this)
    v2 = *(unsigned int *)(*(_QWORD *)this + 8);
  else
    v2 = 0;
  memset(v12, 0, sizeof(v12));
  kaldi::Vector<float>::Resize(v12, v2, 0);
  v8 = 0;
  v9 = 0.0;
  while (1)
  {
    v10 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      LODWORD(v10) = *(_DWORD *)(v10 + 12);
    if (v8 >= (int)v10)
      break;
    kaldi::CompressedMatrix::CopyColToVec<float>((uint64_t *)this, v8, (uint64_t *)v12, v3, v4, v5, v6, v7);
    *(float *)&v3 = kaldi::VectorBase<float>::Sum((uint64_t)v12);
    v9 = v9 + *(float *)&v3;
    ++v8;
  }
  kaldi::Vector<float>::Destroy((uint64_t)v12);
  return v9;
}

void sub_1ADAF3730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::operator=(uint64_t a1, const void **a2)
{
  size_t v4;
  void *v5;

  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      MEMORY[0x1AF44D160]();
    *(_QWORD *)a1 = 0;
  }
  if (*a2)
  {
    v4 = ((*((_DWORD *)*a2 + 2) + 8) * *((_DWORD *)*a2 + 3) + 16);
    v5 = (void *)operator new[]();
    memcpy(v5, *a2, v4);
    *(_QWORD *)a1 = v5;
  }
  return a1;
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix(uint64_t this, const void **a2)
{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) = 0;
  return kaldi::CompressedMatrix::operator=(this, a2);
}

void kaldi::CompressedMatrix::ComputeColHeader<float>(float *a1, float *a2, int a3, unsigned int a4, _WORD *a5)
{
  float v10;
  float *v11;
  float *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  float *v16;
  float v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  int v28;
  float v29;
  float v30;
  unsigned int v31;
  float v32;
  float v33;
  unsigned int v34;
  float v35;
  double v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *__p;
  float *v48;

  std::vector<float>::vector(&__p, a4);
  v11 = (float *)__p;
  v12 = v48;
  if (v48 != __p)
  {
    v13 = ((char *)v48 - (_BYTE *)__p) >> 2;
    if (v13 <= 1)
      v13 = 1;
    v14 = __p;
    do
    {
      v10 = *a2;
      *v14++ = *(_DWORD *)a2;
      a2 += a3;
      --v13;
    }
    while (v13);
  }
  if (a4 <= 4)
  {
    std::__sort<std::__less<float,float> &,float *>();
    v21 = (float *)__p;
    v37 = *a1;
    v38 = a1[1];
    v39 = 1.0;
    if ((float)((float)(*(float *)__p - *a1) / v38) <= 1.0)
      v40 = (float)(*(float *)__p - *a1) / v38;
    else
      v40 = 1.0;
    if (v40 >= 0.0)
      v41 = v40 * 65535.0;
    else
      v41 = 0.0;
    v34 = (int)(v41 + 0.499);
    *a5 = v34;
    if (a4 <= 1)
    {
      LOWORD(v34) = v34 + 1;
      a5[1] = v34;
    }
    else
    {
      if ((float)((float)(v21[1] - v37) / v38) <= 1.0)
        v39 = (float)(v21[1] - v37) / v38;
      if (v39 >= 0.0)
        v42 = v39 * 65535.0;
      else
        v42 = 0.0;
      v34 = (unsigned __int16)(v34 + 1);
      if (v34 <= (unsigned __int16)(int)(v42 + 0.499))
        LOWORD(v34) = (int)(v42 + 0.499);
      a5[1] = v34;
      if (a4 != 2)
      {
        v43 = (float)(v21[2] - v37) / v38;
        if (v43 > 1.0)
          v43 = 1.0;
        v44 = v43 * 65535.0;
        if (v43 < 0.0)
          v44 = 0.0;
        v34 = (unsigned __int16)(v34 + 1);
        if (v34 <= (unsigned __int16)(int)(v44 + 0.499))
          LOWORD(v34) = (int)(v44 + 0.499);
        a5[2] = v34;
        if (a4 >= 4)
        {
          v45 = (float)(v21[3] - v37) / v38;
          if (v45 > 1.0)
            v45 = 1.0;
          if (v45 >= 0.0)
            v46 = v45 * 65535.0;
          else
            v46 = 0.0;
          v36 = v46 + 0.499;
          goto LABEL_34;
        }
LABEL_66:
        LOWORD(v34) = v34 + 1;
        goto LABEL_67;
      }
    }
    LOWORD(v34) = v34 + 1;
    a5[2] = v34;
    goto LABEL_66;
  }
  v15 = a4 >> 2;
  v16 = &v11[v15];
  if (v16 != v12)
  {
    v10 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v16, v12, v10);
    v11 = (float *)__p;
  }
  v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v11, &v11[v15], v10);
  v18 = (3 * v15);
  v19 = (float *)__p;
  v20 = (float *)((char *)__p + 4 * v18);
  if (v20 != v48)
  {
    v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p + v15 + 1, (float *)__p + v18, v48, v17);
    v19 = (float *)__p;
    v20 = v48;
  }
  std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&v19[v18 + 1], v20 - 1, v20, v17);
  v21 = (float *)__p;
  v22 = *a1;
  v23 = a1[1];
  v24 = (float)(*(float *)__p - *a1) / v23;
  if (v24 > 1.0)
    v24 = 1.0;
  v25 = v24 * 65535.0;
  v26 = v24 < 0.0;
  v27 = 0.0;
  if (v26)
    v25 = 0.0;
  v28 = (int)(v25 + 0.499);
  *a5 = v28;
  v29 = (float)(v21[v15] - v22) / v23;
  if (v29 > 1.0)
    v29 = 1.0;
  if (v29 >= 0.0)
    v30 = v29 * 65535.0;
  else
    v30 = 0.0;
  v31 = (unsigned __int16)(v28 + 1);
  if (v31 <= (unsigned __int16)(int)(v30 + 0.499))
    LOWORD(v31) = (int)(v30 + 0.499);
  a5[1] = v31;
  v32 = (float)(v21[v18] - v22) / v23;
  if (v32 > 1.0)
    v32 = 1.0;
  if (v32 >= 0.0)
    v33 = v32 * 65535.0;
  else
    v33 = 0.0;
  v34 = (unsigned __int16)(v31 + 1);
  if (v34 <= (unsigned __int16)(int)(v33 + 0.499))
    LOWORD(v34) = (int)(v33 + 0.499);
  a5[2] = v34;
  v35 = (float)(v21[a4 - 1] - v22) / v23;
  if (v35 > 1.0)
    v35 = 1.0;
  if (v35 >= 0.0)
    v27 = v35 * 65535.0;
  v36 = v27 + 0.499;
LABEL_34:
  v34 = (unsigned __int16)(v34 + 1);
  if (v34 <= (unsigned __int16)(int)v36)
    LOWORD(v34) = (int)v36;
LABEL_67:
  a5[3] = v34;
  v48 = v21;
  operator delete(v21);
}

void sub_1ADAF3B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelFileMap(kaldi::quasar::Encdec *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    kaldi::quasar::Encdec::ModelFileMap(void)::model_file_map = (uint64_t)v3;
  }
  return kaldi::quasar::Encdec::ModelFileMap(void)::model_file_map;
}

void sub_1ADAF3C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::ComputeEngineFileMap(kaldi::quasar::Encdec *this)
{
  uint64_t **v1;
  unsigned __int8 v3;
  _QWORD *v4;

  v1 = (uint64_t **)*((_QWORD *)this + 67);
  if (v1)
    return kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::ComputeEngineItf>(v1);
  if ((v3 & 1) == 0)
  {
    {
      v4 = (_QWORD *)operator new();
      v4[2] = 0;
      v4[1] = 0;
      *v4 = v4 + 1;
      kaldi::quasar::Encdec::ComputeEngineFileMap(void)::compute_engine_file_map = (uint64_t)v4;
    }
  }
  return kaldi::quasar::Encdec::ComputeEngineFileMap(void)::compute_engine_file_map;
}

void sub_1ADAF3CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::ComputeEngineItf>(uint64_t **a1)
{
  _QWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  void *__p[2];
  char v8;
  uint64_t *v9;
  void **v10;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)((unint64_t)"N5kaldi6quasar16ComputeEngineItfE" & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (_QWORD *)operator new();
  v2[3] = 0;
  v2[2] = 0;
  *v2 = &unk_1E5CFEFC0;
  v2[1] = v2 + 2;
  v6 = v2;
  v10 = __p;
  v9 = (uint64_t *)&v6;
  v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<std::unique_ptr<kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>> &&>>(a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10, &v9);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if (v8 < 0)
    operator delete(__p[0]);
  return *((_QWORD *)v3 + 7) + 8;
}

void sub_1ADAF3DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::Encdec(uint64_t a1, char *a2, char a3, char a4)
{
  std::__fs::filesystem::path *v7;
  std::__fs::filesystem::path *v8;
  __int128 v9;
  clockid_t v10;
  std::string v12;

  v7 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v12, a2);
  v8 = std::__fs::filesystem::path::remove_filename[abi:ne180100](v7);
  if (SHIBYTE(v8->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, v8->__pn_.__r_.__value_.__l.__data_, v8->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v9 = *(_OWORD *)&v8->__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)&v8->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v9;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_BYTE *)(a1 + 25) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = a1 + 472;
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v12, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 568, 1, (__int128 *)&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 808) = 953267991;
  *(_QWORD *)(a1 + 812) = -1;
  *(_QWORD *)(a1 + 820) = -1;
  *(_QWORD *)(a1 + 828) = -1;
  *(_QWORD *)(a1 + 836) = 0x100000004;
  *(_BYTE *)(a1 + 844) = 0;
  *(_DWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_DWORD *)(a1 + 904) = 1024;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 912), "main");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 936), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 960), "CPU");
  *(_QWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1056), "CPU");
  *(_OWORD *)(a1 + 1080) = xmmword_1AE1600B0;
  *(_QWORD *)(a1 + 1096) = 0x100000002;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 1104) = a1 + 1112;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1128));
  *(_WORD *)(a1 + 1508) = 0;
  *(_DWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1510) = 0x100000100000001;
  *(_DWORD *)(a1 + 1518) = 256;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_QWORD *)(a1 + 1624) = a1 + 1632;
  *(_QWORD *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1648) = a1 + 1656;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1672), "encoder_out");
  *(_QWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1720), "log_softmax");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1744), "src_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1768), "prev_output_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1792), "positions");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1816), "input_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1840), "position");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1864), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1888), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1912), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1936), "embedding");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1960), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1984), "readout_idx");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 2008), "word_embedding");
  *(_QWORD *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_QWORD *)(a1 + 2120) = 1;
  *(_BYTE *)(a1 + 2128) = 1;
  *(_DWORD *)(a1 + 2148) = 0;
  *(_OWORD *)(a1 + 2132) = 0u;
  *(_QWORD *)(a1 + 2152) = 1;
  *(_DWORD *)(a1 + 2160) = 2;
  *(_WORD *)(a1 + 2164) = 0;
  *(_QWORD *)(a1 + 2168) = 0;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_QWORD *)(a1 + 2192) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 2232) = 0;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_BYTE *)(a1 + 2280) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 2256), v10);
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2361) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_QWORD *)(a1 + 2448) = 0;
  *(_DWORD *)(a1 + 2456) = 512;
  *(_WORD *)(a1 + 2460) = 0;
  return a1;
}

void sub_1ADAF42E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27,_QWORD **a28,_QWORD **a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(v29 + 2248), 0);
  v40 = *(_QWORD *)(v29 + 2240);
  *(_QWORD *)(v29 + 2240) = 0;
  if (v40)
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](v37, v40);
  kaldi::CuMatrix<float>::~CuMatrix(v30);
  v41 = *v32;
  if (*v32)
  {
    *(_QWORD *)(v29 + 2176) = v41;
    operator delete(v41);
  }
  *(_QWORD *)(v39 - 112) = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(_QWORD *)(v39 - 112) = v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(_QWORD *)(v39 - 112) = v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  if (*(char *)(v29 + 2031) < 0)
    operator delete(*v36);
  if (*(char *)(v29 + 2007) < 0)
    operator delete(*v34);
  if (*(char *)(v29 + 1983) < 0)
    operator delete(*a10);
  if (*(char *)(v29 + 1959) < 0)
    operator delete(*a11);
  if (*(char *)(v29 + 1935) < 0)
    operator delete(*a12);
  if (*(char *)(v29 + 1911) < 0)
    operator delete(*a13);
  if (*(char *)(v29 + 1887) < 0)
    operator delete(*a14);
  if (*(char *)(v29 + 1863) < 0)
    operator delete(*a15);
  if (*(char *)(v29 + 1839) < 0)
    operator delete(*a16);
  if (*(char *)(v29 + 1815) < 0)
    operator delete(*a17);
  if (*(char *)(v29 + 1791) < 0)
    operator delete(*a18);
  if (*(char *)(v29 + 1767) < 0)
    operator delete(*a19);
  if (*(char *)(v29 + 1743) < 0)
    operator delete(*a20);
  *(_QWORD *)(v39 - 112) = v29 + 1696;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  if (*(char *)(v29 + 1695) < 0)
    operator delete(*a21);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v29 + 1648, *a28);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v29 + 1624, *a29);
  *(_QWORD *)(v39 - 112) = v29 + 1600;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(_QWORD *)(v39 - 112) = v29 + 1576;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(_QWORD *)(v39 - 112) = v29 + 1552;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  *(_QWORD *)(v39 - 112) = a27;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  kaldi::nnet1::Nnet::~Nnet(*(kaldi::nnet1::Nnet **)(v39 - 152));
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v29 + 1104, *(_QWORD **)(v29 + 1112));
  if (*(char *)(v29 + 1079) < 0)
    operator delete(*a22);
  if (*(char *)(v29 + 1055) < 0)
    operator delete(*(void **)(v29 + 1032));
  if (*(char *)(v29 + 1031) < 0)
    operator delete(*(void **)(v29 + 1008));
  if (*(char *)(v29 + 1007) < 0)
    operator delete(*a23);
  if (*(char *)(v29 + 983) < 0)
    operator delete(*a24);
  if (*(char *)(v29 + 959) < 0)
    operator delete(*a25);
  if (*(char *)(v29 + 935) < 0)
    operator delete(*a26);
  *(_QWORD *)(v39 - 112) = v29 + 880;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  v42 = **(void ***)(v39 - 144);
  if (v42)
  {
    *(_QWORD *)(v29 + 864) = v42;
    operator delete(v42);
  }
  kaldi::quasar::BPE::~BPE(*(kaldi::quasar::BPE **)(v39 - 136));
  *(_QWORD *)(v39 - 144) = v38 + 17;
  *(_QWORD *)(v39 - 136) = v38 + 15;
  *(_QWORD *)(v39 - 152) = v38 + 19;
  v43 = *(_QWORD *)(v29 + 560);
  *(_QWORD *)(v29 + 560) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(v29 + 552);
  *(_QWORD *)(v29 + 552) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 63));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(v39 - 128));
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)(v38 + 58), *(_QWORD **)(v29 + 504));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v38 + 54), *(_QWORD **)(v29 + 472));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v38 + 51), *(_QWORD **)(v29 + 448));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v38 + 48), *(_QWORD **)(v29 + 424));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v38 + 45), *(_QWORD **)(v29 + 400));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v38 + 42), *(_QWORD **)(v29 + 376));
  *(_QWORD *)(v39 - 112) = v38 + 39;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 112));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)(v38 + 36), *(_QWORD **)(v29 + 328));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)(v38 + 33), *(_QWORD **)(v29 + 304));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)(v38 + 30), *(_QWORD **)(v29 + 280));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(*(_QWORD *)(v39 - 120), *(_QWORD **)(v29 + 256));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 25));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 23));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 21));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(v39 - 152));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(v39 - 144));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](*(_QWORD *)(v39 - 136));
  if (*(char *)(v29 + 151) < 0)
    operator delete(*(void **)(v29 + 128));
  if (*(char *)(v29 + 127) < 0)
    operator delete(*(void **)(v29 + 104));
  if (*(char *)(v29 + 103) < 0)
    operator delete(*(void **)(v29 + 80));
  if (*(char *)(v29 + 79) < 0)
    operator delete(*(void **)(v29 + 56));
  if (*(char *)(v29 + 55) < 0)
    operator delete(*v38);
  if (*(char *)(v29 + 23) < 0)
    operator delete(*(void **)v29);
  _Unwind_Resume(a1);
}

void sub_1ADAF477C()
{
  JUMPOUT(0x1ADAF442CLL);
}

void sub_1ADAF4784()
{
  JUMPOUT(0x1ADAF4440);
}

void sub_1ADAF478C()
{
  JUMPOUT(0x1ADAF4454);
}

void sub_1ADAF4794()
{
  JUMPOUT(0x1ADAF4468);
}

void sub_1ADAF479C()
{
  JUMPOUT(0x1ADAF447CLL);
}

void sub_1ADAF47A4()
{
  JUMPOUT(0x1ADAF44A0);
}

void sub_1ADAF47AC()
{
  JUMPOUT(0x1ADAF450CLL);
}

void sub_1ADAF47B4()
{
  JUMPOUT(0x1ADAF452CLL);
}

void sub_1ADAF47BC()
{
  JUMPOUT(0x1ADAF4574);
}

void sub_1ADAF47C4()
{
  JUMPOUT(0x1ADAF4588);
}

void sub_1ADAF47CC()
{
  JUMPOUT(0x1ADAF459CLL);
}

void sub_1ADAF47D4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1ADAF45C8);
}

void sub_1ADAF47EC()
{
  JUMPOUT(0x1ADAF45C8);
}

void sub_1ADAF47F4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x1ADAF4770);
  JUMPOUT(0x1ADAF4774);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::remove_filename[abi:ne180100](std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v2;
  std::string::size_type v3;

  v2 = std::__fs::filesystem::path::__filename(a1);
  if (v2.__size_)
  {
    v3 = (std::string::size_type)a1;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      v3 = a1->__pn_.__r_.__value_.__r.__words[0];
    std::string::erase(&a1->__pn_, (std::string::size_type)&v2.__data_[-v3], 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

uint64_t kaldi::quasar::Encdec::ModelCompilationSpec::Compile(kaldi::quasar::Encdec::ModelCompilationSpec *this)
{
  uint64_t v2;
  std::string *v4;
  std::string *v5;
  unsigned __int16 *v6;
  std::string **v7;
  char v8;
  std::string v9;
  __int128 v10;

  *(_QWORD *)&v10 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Pre-compilation only supported for E5 models!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v4);
  }
  if (*((char *)this + 63) < 0)
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  else
    v9 = *(std::string *)((char *)this + 40);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = &v4;
  v8 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = (unsigned __int16 *)&v4[1];
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v9, &v10, v4);
  v2 = kaldi::quasar::onDeviceCompile((uint64_t)this + 16, (unsigned __int16 **)&v4, (uint64_t *)this + 8);
  v7 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1ADAF4998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelCompilationSpec::IsCompileRequired(kaldi::quasar::Encdec::ModelCompilationSpec *this)
{
  const void **v2;
  const void **i;
  size_t v4;
  char *p_p;
  const void *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  _QWORD *v24;
  _QWORD *v25;
  const char *v26;
  uint64_t v27;
  void *__p;
  void *v30;
  char *v31;
  std::string v32;
  void **v33;
  char v34;
  std::string v35;
  __int128 v36;

  *(_QWORD *)&v36 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 2) != 1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  v2 = (const void **)*((_QWORD *)this + 8);
  for (i = (const void **)*((_QWORD *)this + 9); v2 != i; v2 += 3)
  {
    if (*((char *)v2 + 23) >= 0)
      v4 = *((unsigned __int8 *)v2 + 23);
    else
      v4 = (size_t)v2[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
    if (SHIBYTE(v31) >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (v4)
    {
      if (*((char *)v2 + 23) >= 0)
        v6 = v2;
      else
        v6 = *v2;
      memmove(p_p, v6, v4);
    }
    *(_WORD *)&p_p[v4] = 32;
    if (SHIBYTE(v31) >= 0)
      v7 = (const std::string::value_type *)&__p;
    else
      v7 = (const std::string::value_type *)__p;
    if (SHIBYTE(v31) >= 0)
      v8 = HIBYTE(v31);
    else
      v8 = (std::string::size_type)v30;
    std::string::append(&v32, v7, v8);
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
  }
  if (*((char *)this + 63) < 0)
    std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  else
    v35 = *(std::string *)((char *)this + 40);
  __p = 0;
  v30 = 0;
  v31 = 0;
  v33 = &__p;
  v34 = 0;
  __p = operator new(0x18uLL);
  v30 = __p;
  v31 = (char *)__p + 24;
  v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (__int128 *)&v35, &v36, (std::string *)__p);
  v10 = kaldi::quasar::checkCompiledCacheWithProgramLibrary((uint64_t)this + 16, (unsigned __int16 **)&__p, (uint64_t *)this + 8);
  v33 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v33);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Checking if need compile: ", 26);
    v12 = *((char *)this + 39);
    if (v12 >= 0)
      v13 = (char *)this + 16;
    else
      v13 = (char *)*((_QWORD *)this + 2);
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)this + 39);
    else
      v14 = *((_QWORD *)this + 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    v17 = *((char *)this + 63);
    if (v17 >= 0)
      v18 = (char *)this + 40;
    else
      v18 = (char *)*((_QWORD *)this + 5);
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)this + 63);
    else
      v19 = *((_QWORD *)this + 6);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v32;
    else
      v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      size = v32.__r_.__value_.__l.__size_;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)": ", 2);
    if (v10)
      v26 = "NO!";
    else
      v26 = "YES!";
    if (v10)
      v27 = 3;
    else
      v27 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  v9 = v10 ^ 1u;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1ADAF4CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 129) < 0)
    operator delete(*(void **)(v14 - 152));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelCompilationSpec::PurgeCompiledModel(kaldi::quasar::Encdec::ModelCompilationSpec *this)
{
  if (*((_DWORD *)this + 2) == 1)
    return kaldi::quasar::purgeE5BundlesForMil((uint64_t)this + 16);
  else
    return 1;
}

BOOL kaldi::quasar::Encdec::ModelCompilationSpec::Compare(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  _BOOL8 v14;
  int v15;
  BOOL v16;
  int v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  const void *v37;
  unint64_t v38;
  const void *v39;
  size_t v40;
  int v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  _QWORD v45[35];

  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, "Mismatched comparison!");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v4 = v3;
  v5 = *((char *)v3 + 39);
  v6 = *(char *)(a1 + 39);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 39);
  else
    v7 = *(_QWORD *)(a1 + 24);
  if (v6 >= 0)
    v8 = (const void *)(a1 + 16);
  else
    v8 = *(const void **)(a1 + 16);
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)v3 + 39);
  else
    v9 = v3[3];
  if (v5 >= 0)
    v10 = v3 + 2;
  else
    v10 = (const void *)v3[2];
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return 0;
  v18 = *((char *)v4 + 63);
  v19 = *(char *)(a1 + 63);
  if (v19 >= 0)
    v20 = *(unsigned __int8 *)(a1 + 63);
  else
    v20 = *(_QWORD *)(a1 + 48);
  if (v19 >= 0)
    v21 = (const void *)(a1 + 40);
  else
    v21 = *(const void **)(a1 + 40);
  if (v18 >= 0)
    v22 = *((unsigned __int8 *)v4 + 63);
  else
    v22 = v4[6];
  if (v18 >= 0)
    v23 = v4 + 5;
  else
    v23 = (const void *)v4[5];
  if (v22 >= v20)
    v24 = v20;
  else
    v24 = v22;
  v25 = memcmp(v21, v23, v24);
  v26 = v20 < v22;
  if (v25)
    v26 = v25 < 0;
  if (v26)
    return 1;
  v27 = memcmp(v23, v21, v24);
  v28 = v22 < v20;
  if (v27)
    v28 = v27 < 0;
  if (v28)
    return 0;
  v29 = *(_QWORD *)(a1 + 64);
  v30 = v4[8];
  v31 = (v4[9] - v30) >> 3;
  v32 = 0xAAAAAAAAAAAAAAABLL * v31;
  v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v29) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * v31 >= v44)
    v33 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v29) >> 3);
  else
    v33 = 0xAAAAAAAAAAAAAAABLL * v31;
  if (!v33)
    return v44 < v32;
  while (1)
  {
    v34 = *(char *)(v30 + 23);
    v35 = *(char *)(v29 + 23);
    v36 = v35 >= 0 ? *(unsigned __int8 *)(v29 + 23) : *(_QWORD *)(v29 + 8);
    v37 = v35 >= 0 ? (const void *)v29 : *(const void **)v29;
    v38 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 23) : *(_QWORD *)(v30 + 8);
    v39 = v34 >= 0 ? (const void *)v30 : *(const void **)v30;
    v40 = v38 >= v36 ? v36 : v38;
    v41 = memcmp(v37, v39, v40);
    v14 = v41 ? v41 < 0 : v36 < v38;
    if (v14)
      break;
    v42 = memcmp(v39, v37, v40);
    v43 = v38 < v36;
    if (v42)
      v43 = v42 < 0;
    if (v43)
      break;
    v30 += 24;
    v29 += 24;
    if (!--v33)
      return v44 < v32;
  }
  return v14;
}

void kaldi::quasar::Encdec::CreateEspressoModel(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, std::vector<std::wstring> *a6@<X5>, char a7@<W6>, __int128 *a8@<X8>)
{
  char *v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t **v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  kaldi::quasar::ESNetworkPlan *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::vector<std::wstring>::pointer v37;
  std::wstring *end;
  size_t size;
  std::string *v40;
  std::vector<std::wstring>::pointer v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  char *v46;
  char v47;
  std::vector<std::string>::pointer v48;
  std::string *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::string *v53;
  std::string *v54;
  size_t v55;
  std::string *v56;
  const void *v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  char *v62;
  char v63;
  std::vector<std::string>::pointer v64;
  std::string *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  __int128 *v72;
  uint64_t v73;
  std::string *v74;
  const std::string *v75;
  kaldi::quasar::EspressoV2Plan *v76;
  std::string::size_type v77;
  uint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  std::string::size_type v86;
  std::string::size_type v87;
  __int128 v88;
  int64x2_t v89;
  std::string::size_type v90;
  std::string *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  std::string::size_type v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  const std::string::value_type **v114;
  int v115;
  std::string::size_type v116;
  const std::string::value_type *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  std::string v122;
  std::string v123;
  std::string v124[3];
  std::vector<std::wstring> v125[2];
  std::vector<std::string> v126;
  std::vector<std::wstring> v127;
  void *v128;
  uint64_t v129;
  unsigned __int8 v130;
  std::string v131;
  std::string *v132;
  std::string *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  std::__split_buffer<std::string> __p[2];
  std::string v141[8];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v137 = 0;
  v138 = a3;
  v135 = 0;
  v136 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  kaldi::SplitStringToVector(a2, ",", 1, (uint64_t)&v135);
  v14 = v135;
  v13 = v136;
  while (v14 != v13)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v123, (char *)a1);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v131, v14);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v131, (uint64_t)&v123, (std::__fs::filesystem::path *)__p);
    v15 = v133;
    if ((unint64_t)v133 >= v134)
    {
      v17 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v132, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(__p[0].__end_) < 0)
      {
        std::string::__init_copy_ctor_external(v133, (const std::string::value_type *)__p[0].__first_, (std::string::size_type)__p[0].__begin_);
      }
      else
      {
        v16 = *(_OWORD *)&__p[0].__first_;
        v133->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[0].__end_;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v17 = v15 + 1;
    }
    v133 = v17;
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    v14 += 24;
  }
  if ((char *)v133 - (char *)v132 == 24)
  {
    if (SHIBYTE(v132->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v131, v132->__r_.__value_.__l.__data_, v132->__r_.__value_.__l.__size_);
    }
    else
    {
      v18 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v18;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v131, "");
  }
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v132, ",");
  *(_QWORD *)a8 = 0;
  *((_QWORD *)a8 + 1) = 0;
  v19 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)a1);
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
  v20 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (const void **)&v128, (uint64_t)&std::piecewise_construct, (__int128 **)&v122);
  __p[0].__first_ = 0;
  __p[0].__begin_ = 0;
  v21 = (std::__shared_weak_count *)v20[8];
  if (v21)
  {
    __p[0].__begin_ = (std::__split_buffer<std::string>::pointer)std::__shared_weak_count::lock(v21);
    if (__p[0].__begin_)
      __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v20[7];
  }
  v22 = *(_QWORD *)std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a8, (__int128 *)__p);
  begin = (std::__shared_weak_count *)__p[0].__begin_;
  if (__p[0].__begin_)
  {
    p_size = &__p[0].__begin_->__r_.__value_.__l.__size_;
    do
      v25 = __ldaxr(p_size);
    while (__stlxr(v25 - 1, p_size));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
      std::__shared_weak_count::__release_weak(begin);
    }
  }
  if (v22)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reusing already loaded: ", 24);
      if ((v130 & 0x80u) == 0)
        v27 = &v128;
      else
        v27 = v128;
      if ((v130 & 0x80u) == 0)
        v28 = v130;
      else
        v28 = v129;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    goto LABEL_176;
  }
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading: ", 9);
    if ((v130 & 0x80u) == 0)
      v30 = &v128;
    else
      v30 = v128;
    if ((v130 & 0x80u) == 0)
      v31 = v130;
    else
      v31 = v129;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if ((_DWORD)v138 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(&v123, __p);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&__p[0].__first_ = *(_OWORD *)a4;
      __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(a4 + 16);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v125, (std::string *)__p, (__int128 *)&__p[0].__end_cap_, 1uLL);
    v118 = a7;
    v119 = a4;
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    v36 = *a5;
    v120 = a5[1];
    if (*a5 != v120)
    {
      do
      {
        v37 = a6->__begin_;
        end = a6->__end_;
        if (a6->__begin_ == end)
        {
          if (*(char *)(a1 + 935) >= 0)
            v55 = *(unsigned __int8 *)(a1 + 935);
          else
            v55 = *(_QWORD *)(a1 + 920);
          std::string::basic_string[abi:ne180100]((uint64_t)&v122, v55 + 1);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v122;
          else
            v56 = (std::string *)v122.__r_.__value_.__r.__words[0];
          if (v55)
          {
            if (*(char *)(a1 + 935) >= 0)
              v57 = (const void *)(a1 + 912);
            else
              v57 = *(const void **)(a1 + 912);
            memmove(v56, v57, v55);
          }
          *(_WORD *)((char *)&v56->__r_.__value_.__l.__data_ + v55) = 95;
          v58 = *(char *)(v36 + 23);
          if (v58 >= 0)
            v59 = (const std::string::value_type *)v36;
          else
            v59 = *(const std::string::value_type **)v36;
          if (v58 >= 0)
            v60 = *(unsigned __int8 *)(v36 + 23);
          else
            v60 = *(_QWORD *)(v36 + 8);
          v61 = std::string::append(&v122, v59, v60);
          v62 = (char *)v61->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v139 = v61->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v139 + 7) = *(std::string::size_type *)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
          v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          v64 = v126.__end_;
          if (v126.__end_ >= v126.__end_cap_.__value_)
          {
            v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_ - (char *)v126.__begin_) >> 3);
            v67 = v66 + 1;
            if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3) > v67)
              v67 = 0x5555555555555556 * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3) >= 0x555555555555555)
              v68 = 0xAAAAAAAAAAAAAAALL;
            else
              v68 = v67;
            __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v126.__end_cap_;
            if (v68)
              v69 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v126.__end_cap_, v68);
            else
              v69 = 0;
            v70 = v69 + v66;
            __p[0].__first_ = v69;
            __p[0].__begin_ = v70;
            __p[0].__end_cap_.__value_ = &v69[v68];
            v70->__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
            v70->__r_.__value_.__l.__size_ = v139;
            *(std::string::size_type *)((char *)&v70->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v139 + 7);
            *((_BYTE *)&v70->__r_.__value_.__s + 23) = v63;
            __p[0].__end_ = v70 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v126, __p);
            v65 = v126.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
          }
          else
          {
            v126.__end_->__r_.__value_.__l.__data_ = v62;
            v64->__r_.__value_.__l.__size_ = v139;
            *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v139 + 7);
            *((_BYTE *)&v64->__r_.__value_.__s + 23) = v63;
            v65 = v64 + 1;
          }
          v126.__end_ = v65;
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
        }
        else
        {
          do
          {
            if ((v37->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v37->__r_.__value_.__r.__words[2]);
            else
              size = v37->__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v122, size + 1);
            if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v40 = &v122;
            else
              v40 = (std::string *)v122.__r_.__value_.__r.__words[0];
            if (size)
            {
              if ((v37->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v41 = v37;
              else
                v41 = (std::vector<std::wstring>::pointer)v37->__r_.__value_.__r.__words[0];
              memmove(v40, v41, size);
            }
            *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + size) = 95;
            v42 = *(char *)(v36 + 23);
            if (v42 >= 0)
              v43 = (const std::string::value_type *)v36;
            else
              v43 = *(const std::string::value_type **)v36;
            if (v42 >= 0)
              v44 = *(unsigned __int8 *)(v36 + 23);
            else
              v44 = *(_QWORD *)(v36 + 8);
            v45 = std::string::append(&v122, v43, v44);
            v46 = (char *)v45->__r_.__value_.__r.__words[0];
            *(_QWORD *)&v139 = v45->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)&v139 + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
            v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            v48 = v126.__end_;
            if (v126.__end_ >= v126.__end_cap_.__value_)
            {
              v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_ - (char *)v126.__begin_) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3) > v51)
                v51 = 0x5555555555555556 * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v126.__end_cap_.__value_ - (char *)v126.__begin_) >> 3) >= 0x555555555555555)
                v52 = 0xAAAAAAAAAAAAAAALL;
              else
                v52 = v51;
              __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v126.__end_cap_;
              if (v52)
                v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v126.__end_cap_, v52);
              else
                v53 = 0;
              v54 = v53 + v50;
              __p[0].__first_ = v53;
              __p[0].__begin_ = v54;
              __p[0].__end_cap_.__value_ = &v53[v52];
              v54->__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
              v54->__r_.__value_.__l.__size_ = v139;
              *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v139 + 7);
              *((_BYTE *)&v54->__r_.__value_.__s + 23) = v47;
              __p[0].__end_ = v54 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v126, __p);
              v49 = v126.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
            }
            else
            {
              v126.__end_->__r_.__value_.__l.__data_ = v46;
              v48->__r_.__value_.__l.__size_ = v139;
              *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v139 + 7);
              *((_BYTE *)&v48->__r_.__value_.__s + 23) = v47;
              v49 = v48 + 1;
            }
            v126.__end_ = v49;
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v122.__r_.__value_.__l.__data_);
            ++v37;
          }
          while (v37 != end);
        }
        v36 += 24;
      }
      while (v36 != v120);
    }
    if ((v118 & 1) != 0)
    {
      v71 = v126.__begin_;
      v72 = (__int128 *)v126.__end_;
      v73 = v119;
LABEL_131:
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v127, v71, v72, 0xAAAAAAAAAAAAAAABLL * (((char *)v72 - (char *)v71) >> 3));
      goto LABEL_132;
    }
    v71 = (std::string *)a6->__begin_;
    v72 = (__int128 *)a6->__end_;
    if ((__int128 *)a6->__begin_ != v72)
    {
      v73 = v119;
      if (&v127 == a6)
        goto LABEL_132;
      goto LABEL_131;
    }
    v114 = (const std::string::value_type **)(a1 + 912);
    v115 = *(char *)(a1 + 935);
    if (v115 < 0)
    {
      v116 = *(_QWORD *)(a1 + 920);
      v73 = v119;
      if (v116 == 4)
      {
        v117 = *v114;
        if (*(_DWORD *)*v114 == 1852399981)
          goto LABEL_132;
      }
      else
      {
        v117 = *v114;
      }
      std::string::__init_copy_ctor_external((std::string *)__p, v117, v116);
    }
    else
    {
      v73 = v119;
      if (v115 == 4 && *(_DWORD *)v114 == 1852399981)
        goto LABEL_132;
      *(_OWORD *)&__p[0].__first_ = *(_OWORD *)v114;
      __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(a1 + 928);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v127, (std::string *)__p, (__int128 *)&__p[0].__end_cap_, 1uLL);
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
LABEL_132:
    memset(&v122, 0, sizeof(v122));
    v75 = v132;
    v74 = v133;
    if (v132 == v133)
    {
      v101 = 0;
      v102 = 0;
    }
    else
    {
      do
      {
        std::string::operator=(v124, v75);
        v76 = (kaldi::quasar::EspressoV2Plan *)operator new();
        kaldi::quasar::EspressoV2Plan::EspressoV2Plan(v76, (const kaldi::quasar::EspressoV2NetworkConfig *)&v123, 0);
        std::shared_ptr<kaldi::quasar::EspressoV2Plan>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Plan,void>(&v139, (uint64_t)v76);
        v77 = v122.__r_.__value_.__l.__size_;
        if (v122.__r_.__value_.__l.__size_ >= v122.__r_.__value_.__r.__words[2])
        {
          v78 = (uint64_t)(v122.__r_.__value_.__l.__size_ - v122.__r_.__value_.__r.__words[0]) >> 4;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v80 = v122.__r_.__value_.__r.__words[2] - v122.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v122.__r_.__value_.__r.__words[2] - v122.__r_.__value_.__r.__words[0]) >> 3 > v79)
            v79 = v80 >> 3;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
            v81 = 0xFFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v122.__r_.__value_.__r.__words[2];
          v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v122.__r_.__value_.__r.__words[2], v81);
          v84 = &v82[16 * v78];
          *(_OWORD *)v84 = v139;
          v139 = 0uLL;
          v85 = (_QWORD *)v122.__r_.__value_.__l.__size_;
          v86 = v122.__r_.__value_.__r.__words[0];
          if (v122.__r_.__value_.__l.__size_ == v122.__r_.__value_.__r.__words[0])
          {
            v89 = vdupq_n_s64(v122.__r_.__value_.__l.__size_);
            v87 = (std::string::size_type)&v82[16 * v78];
          }
          else
          {
            v87 = (std::string::size_type)&v82[16 * v78];
            do
            {
              v88 = *((_OWORD *)v85 - 1);
              v85 -= 2;
              *(_OWORD *)(v87 - 16) = v88;
              v87 -= 16;
              *v85 = 0;
              v85[1] = 0;
            }
            while (v85 != (_QWORD *)v86);
            v89 = *(int64x2_t *)&v122.__r_.__value_.__l.__data_;
          }
          v90 = (std::string::size_type)(v84 + 16);
          v122.__r_.__value_.__r.__words[0] = v87;
          v122.__r_.__value_.__l.__size_ = (std::string::size_type)(v84 + 16);
          *(int64x2_t *)&__p[0].__begin_ = v89;
          v91 = (std::string *)v122.__r_.__value_.__r.__words[2];
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)&v82[16 * v83];
          __p[0].__end_cap_.__value_ = v91;
          __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v89.i64[0];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)__p);
          v92 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v122.__r_.__value_.__l.__size_ = v90;
          v73 = v119;
          if (*((_QWORD *)&v139 + 1))
          {
            v93 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
        }
        else
        {
          *(_OWORD *)v122.__r_.__value_.__l.__size_ = v139;
          v122.__r_.__value_.__l.__size_ = v77 + 16;
        }
        std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,void>(&v138, (uint64_t)v75, v73, (__int128 **)&v127, &v139);
        *(_OWORD *)&__p[0].__first_ = v139;
        v139 = 0uLL;
        std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t **)(a1 + 1104), __p, (uint64_t)__p);
        v95 = (std::__shared_weak_count *)__p[0].__begin_;
        if (__p[0].__begin_)
        {
          v96 = &__p[0].__begin_->__r_.__value_.__l.__size_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v98 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
        if (*((_QWORD *)&v139 + 1))
        {
          v99 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        ++v75;
      }
      while (v75 != v74);
      v102 = v122.__r_.__value_.__l.__size_;
      v101 = (uint64_t *)v122.__r_.__value_.__r.__words[0];
    }
    if (v102 - (_QWORD)v101 == 16)
    {
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a8, v101);
      if (kaldi::g_kaldi_verbose_level < 5)
      {
LABEL_175:
        __p[0].__first_ = &v122;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig((void **)&v123.__r_.__value_.__l.__data_);
        goto LABEL_176;
      }
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded single E5ML model", 24);
    }
    else
    {
      v103 = operator new();
      kaldi::quasar::EspressoV2Chain::EspressoV2Chain(v103, &v122, a6, 0);
      std::shared_ptr<kaldi::quasar::EspressoV2Chain>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Chain,void>(__p, v103);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a8, (__int128 *)__p);
      v104 = (std::__shared_weak_count *)__p[0].__begin_;
      if (__p[0].__begin_)
      {
        v105 = &__p[0].__begin_->__r_.__value_.__l.__size_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      if (kaldi::g_kaldi_verbose_level < 5)
        goto LABEL_175;
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded E5ML model chain", 23);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    goto LABEL_175;
  }
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig(__p, &v128);
  std::string::operator=(v141, (const std::string *)a4);
  v32 = (kaldi::quasar::ESNetworkPlan *)operator new();
  kaldi::quasar::ESNetworkPlan::ESNetworkPlan(v32, (const kaldi::quasar::ESNetworkConfig *)__p);
  *(_QWORD *)v32 = &unk_1E5D33200;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v32 + 44, "");
  std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::shared_ptr[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,void>(&v123, (uint64_t)v32);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a8, (__int128 *)&v123);
  v33 = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
  if (v123.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)&__p[0].__first_);
LABEL_176:
  if (!*(_BYTE *)(a1 + 24))
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(a1 + 344), a8);
  if (*(_BYTE *)(a1 + 25))
  {
    v107 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)a1);
    __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v128;
    v108 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v107, (const void **)&v128, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v110 = *(_QWORD *)a8;
    v109 = *((_QWORD *)a8 + 1);
    if (v109)
    {
      v111 = (unint64_t *)(v109 + 16);
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    v113 = (std::__shared_weak_count *)v108[8];
    v108[7] = v110;
    v108[8] = v109;
    if (v113)
      std::__shared_weak_count::__release_weak(v113);
  }
  if ((char)v130 < 0)
    operator delete(v128);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v135;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADAF5D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig((void **)&a20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a15);
  if (a51 < 0)
    operator delete(__p);
  if (a57 < 0)
    operator delete(a52);
  a20 = &a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = &a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::RegisterEspressoModelForCompilation(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t *a5, std::vector<std::string> *a6, int a7)
{
  uint64_t v7;
  std::string *begin;
  std::string *end;
  size_t size;
  std::string *v11;
  std::string *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  char *v17;
  char v18;
  std::vector<std::string>::pointer v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  size_t v26;
  std::string *v27;
  const void *v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  char *v33;
  char v34;
  std::vector<std::string>::pointer v35;
  std::string *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  __int128 *v42;
  const std::string::value_type **v43;
  int v44;
  std::string::size_type v45;
  const std::string::value_type *v46;
  std::__split_buffer<std::string>::pointer i;
  std::__split_buffer<std::string>::pointer first;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const void *v57;
  std::vector<std::string> *v59;
  uint64_t v60;
  std::__fs::filesystem::path v61;
  std::string v62;
  std::string pn;
  std::vector<std::string> v64;
  uint64_t v65;
  std::__fs::filesystem::path __p;
  std::__split_buffer<std::string> __v;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v65 = a3;
  if ((_DWORD)a3 != 1)
    return;
  memset(&v64, 0, sizeof(v64));
  if (a7)
  {
    v7 = *a5;
    v60 = a5[1];
    if (*a5 != v60)
    {
      v57 = (const void *)(a1 + 912);
      v59 = a6;
      do
      {
        begin = a6->__begin_;
        end = a6->__end_;
        if (a6->__begin_ == end)
        {
          if (*(char *)(a1 + 935) >= 0)
            v26 = *(unsigned __int8 *)(a1 + 935);
          else
            v26 = *(_QWORD *)(a1 + 920);
          std::string::basic_string[abi:ne180100]((uint64_t)&pn, v26 + 1);
          if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &pn;
          else
            v27 = (std::string *)pn.__r_.__value_.__r.__words[0];
          if (v26)
          {
            if (*(char *)(a1 + 935) >= 0)
              v28 = v57;
            else
              v28 = *(const void **)(a1 + 912);
            memmove(v27, v28, v26);
          }
          *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 95;
          v29 = *(char *)(v7 + 23);
          if (v29 >= 0)
            v30 = (const std::string::value_type *)v7;
          else
            v30 = *(const std::string::value_type **)v7;
          if (v29 >= 0)
            v31 = *(unsigned __int8 *)(v7 + 23);
          else
            v31 = *(_QWORD *)(v7 + 8);
          v32 = std::string::append(&pn, v30, v31);
          v33 = (char *)v32->__r_.__value_.__r.__words[0];
          __p.__pn_.__r_.__value_.__r.__words[0] = v32->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
          v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          v35 = v64.__end_;
          if (v64.__end_ >= v64.__end_cap_.__value_)
          {
            v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
            v38 = v37 + 1;
            if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v38)
              v38 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555)
              v39 = 0xAAAAAAAAAAAAAAALL;
            else
              v39 = v38;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
            if (v39)
              v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v64.__end_cap_, v39);
            else
              v40 = 0;
            v41 = v40 + v37;
            __v.__first_ = v40;
            __v.__begin_ = v41;
            __v.__end_cap_.__value_ = &v40[v39];
            v41->__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            v41->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v41->__r_.__value_.__s + 23) = v34;
            __v.__end_ = v41 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v64, &__v);
            v36 = v64.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          }
          else
          {
            v64.__end_->__r_.__value_.__l.__data_ = v33;
            v35->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v35->__r_.__value_.__s + 23) = v34;
            v36 = v35 + 1;
          }
          v64.__end_ = v36;
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
            operator delete(pn.__r_.__value_.__l.__data_);
        }
        else
        {
          do
          {
            if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
            else
              size = begin->__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&pn, size + 1);
            if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v11 = &pn;
            else
              v11 = (std::string *)pn.__r_.__value_.__r.__words[0];
            if (size)
            {
              if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v12 = begin;
              else
                v12 = (std::string *)begin->__r_.__value_.__r.__words[0];
              memmove(v11, v12, size);
            }
            *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + size) = 95;
            v13 = *(char *)(v7 + 23);
            if (v13 >= 0)
              v14 = (const std::string::value_type *)v7;
            else
              v14 = *(const std::string::value_type **)v7;
            if (v13 >= 0)
              v15 = *(unsigned __int8 *)(v7 + 23);
            else
              v15 = *(_QWORD *)(v7 + 8);
            v16 = std::string::append(&pn, v14, v15);
            v17 = (char *)v16->__r_.__value_.__r.__words[0];
            __p.__pn_.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
            v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            v19 = v64.__end_;
            if (v64.__end_ >= v64.__end_cap_.__value_)
            {
              v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
              v22 = v21 + 1;
              if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v22)
                v22 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555)
                v23 = 0xAAAAAAAAAAAAAAALL;
              else
                v23 = v22;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
              if (v23)
                v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v64.__end_cap_, v23);
              else
                v24 = 0;
              v25 = v24 + v21;
              __v.__first_ = v24;
              __v.__begin_ = v25;
              __v.__end_cap_.__value_ = &v24[v23];
              v25->__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
              v25->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&v25->__r_.__value_.__s + 23) = v18;
              __v.__end_ = v25 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v64, &__v);
              v20 = v64.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            }
            else
            {
              v64.__end_->__r_.__value_.__l.__data_ = v17;
              v19->__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&v19->__r_.__value_.__s + 23) = v18;
              v20 = v19 + 1;
            }
            v64.__end_ = v20;
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
              operator delete(pn.__r_.__value_.__l.__data_);
            ++begin;
          }
          while (begin != end);
        }
        v7 += 24;
        a6 = v59;
      }
      while (v7 != v60);
    }
    goto LABEL_86;
  }
  v42 = (__int128 *)a6->__end_;
  if ((__int128 *)a6->__begin_ != v42)
  {
    if (&v64 != a6)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&v64, a6->__begin_, v42, 0xAAAAAAAAAAAAAAABLL * (((char *)v42 - (char *)a6->__begin_) >> 3));
    goto LABEL_86;
  }
  v43 = (const std::string::value_type **)(a1 + 912);
  v44 = *(char *)(a1 + 935);
  if (v44 < 0)
  {
    v45 = *(_QWORD *)(a1 + 920);
    if (v45 == 4)
    {
      v46 = *v43;
      if (*(_DWORD *)*v43 == 1852399981)
        goto LABEL_86;
    }
    else
    {
      v46 = *v43;
    }
    std::string::__init_copy_ctor_external((std::string *)&__v, v46, v45);
LABEL_84:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::wstring> *)&v64, (std::string *)&__v, (__int128 *)&__v.__end_cap_, 1uLL);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    goto LABEL_86;
  }
  if (v44 != 4 || *(_DWORD *)v43 != 1852399981)
  {
    *(_OWORD *)&__v.__first_ = *(_OWORD *)v43;
    __v.__end_ = *(std::__split_buffer<std::string>::pointer *)(a1 + 928);
    goto LABEL_84;
  }
LABEL_86:
  kaldi::SplitStringToVector(a2, ",", &__v);
  first = __v.__first_;
  for (i = __v.__begin_; first != i; ++first)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v62, (char *)a1);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v61.__pn_, (char *)first);
    std::__fs::filesystem::operator/[abi:ne180100](&v61, (uint64_t)&v62, &__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    else
    {
      pn = __p.__pn_;
    }
    if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,void>(&v65, (uint64_t)&pn, a4, (__int128 **)&v64, &v62);
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = 0uLL;
    std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t **)(a1 + 1104), &__p, (uint64_t)&__p);
    v49 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__l.__size_;
    if (__p.__pn_.__r_.__value_.__l.__size_)
    {
      v50 = (unint64_t *)(__p.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)v62.__r_.__value_.__l.__size_;
    if (v62.__r_.__value_.__l.__size_)
    {
      v53 = (unint64_t *)(v62.__r_.__value_.__l.__size_ + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&pn);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1ADAF6688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  a29 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::ReadSymbolTable@<X0>(_QWORD *a1@<X0>, int a2@<W1>, const std::string *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type size;
  std::locale::__imp *locale;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  std::string *p_s1;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  char v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __s1;
  char v32;
  std::string v33;
  std::locale v34[2];
  int64_t v35;
  _QWORD v36[2];
  _QWORD v37[11];
  char v38;
  uint64_t v39;

  if (a2)
  {
    result = fst::SymbolTable::Read(a1, a3);
    *a4 = result;
    return result;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v36);
  memset(&__s1, 0, sizeof(__s1));
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v8 = std::locale::use_facet(v34, v7);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v34);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1, v9);
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    kaldi::Trim(&__s1);
    std::operator+<char>();
    v11 = std::string::append(&v33, ">");
    v35 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34[0].__locale_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    locale = (std::locale::__imp *)HIBYTE(v35);
    v14 = SHIBYTE(v35);
    if (v35 < 0)
      locale = v34[1].__locale_;
    if ((std::locale::__imp *)size != locale)
    {
      v24 = 0;
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_23;
LABEL_34:
      operator delete(v34[0].__locale_);
      goto LABEL_23;
    }
    if (v35 >= 0)
      v15 = (unsigned __int8 *)v34;
    else
      v15 = (unsigned __int8 *)v34[0].__locale_;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v24 = memcmp(__s1.__r_.__value_.__l.__data_, v15, __s1.__r_.__value_.__l.__size_) == 0;
      if (v14 < 0)
        goto LABEL_34;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v19 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v18 = v19;
        v21 = *v15++;
        v20 = v21;
        v23 = v16-- != 0;
        v24 = v18 == v20;
      }
      while (v18 == v20 && v23);
      if (SHIBYTE(v35) < 0)
        goto LABEL_34;
    }
    else
    {
      v24 = 1;
      if (SHIBYTE(v35) < 0)
        goto LABEL_34;
    }
LABEL_23:
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if (v24)
      goto LABEL_40;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__s1;
    else
      v26 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v27 = __s1.__r_.__value_.__l.__size_;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
  }
  v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
LABEL_40:
  if (v25 < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__s1);
  *a4 = fst::SymbolTable::ReadText();
  if (v32 < 0)
    operator delete((void *)__s1.__r_.__value_.__l.__size_);
  v36[0] = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v37[0] = v29;
  v37[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v38 < 0)
    operator delete((void *)v37[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x1AF44D094](&v39);
}

void sub_1ADAF6A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a19 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::ReadMapped(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  fst::MappedFile *v3;
  _QWORD v4[34];

  if (*(_QWORD *)(a1 + 520))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Nnet already mapped from a file");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  v2 = (_QWORD *)(a1 + 520);
  v3 = kaldi::ReadMapped<kaldi::quasar::Encdec>(a2, a1);
  std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v2, (uint64_t)v3);
}

void std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

fst::MappedFile *kaldi::ReadMapped<kaldi::quasar::Encdec>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  fst::MappedFile *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  _BYTE v17[17];
  __int128 v18;
  uint64_t v19[2];
  __int128 v20;
  uint64_t v21[2];
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26[35];

  v26[34] = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  kaldi::Input::Input(v16, a1, v17);
  if (!v17[0])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  v4 = kaldi::Input::Stream((kaldi::Input *)v16);
  std::istream::seekg();
  std::istream::tellg();
  v25 = 0;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  *(_OWORD *)&v17[1] = 0u;
  v18 = 0u;
  std::istream::seekg();
  v5 = fst::MappedFile::Map(v4, a1, v26[16]);
  kaldi::Input::~Input((kaldi::Input *)v16);
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "Memory mapping failed. mapped_file_ is NULL");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  v17[0] = 0;
  kaldi::Input::Input(v16, a1, v17);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v16);
  kaldi::quasar::Encdec::Read(a2, v6, v17[0], *((_QWORD *)v5 + 1), 0);
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"memory mapped file ", 19);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v26);
  }
  kaldi::Input::~Input((kaldi::Input *)v16);
  return v5;
}

void sub_1ADAF6DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  _QWORD v2[35];

  if (*(_QWORD *)(a1 + 520))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2);
    }
  }
  else
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 520), a2);
  }
}

void sub_1ADAF6E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::Read(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  unsigned __int8 v6;
  void *v7[2];
  char v8;
  int v9;

  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(v7, a2, 0, 0, 0);
    v9 = 2;
    kaldi::quasar::Encdec::ReadMapped(a1, (uint64_t)v7);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    v6 = 0;
    kaldi::Input::Input(v7, a2, &v6);
    v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v7);
    kaldi::quasar::Encdec::Read(a1, v4, v6, 0, 0);
    kaldi::Input::~Input((kaldi::Input *)v7);
  }
  return 1;
}

void sub_1ADAF6F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  BOOL v11;
  void *v12;
  BOOL v13;
  uint64_t v35;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *Text;
  uint64_t v45;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  BOOL v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  void *v55;
  uint64_t v56;
  fst::SymbolTable *v57;
  uint64_t v58;
  unsigned int i;
  uint64_t v60;
  uint64_t Word;
  uint64_t v62;
  fst::SymbolTable *v63;
  uint64_t v64;
  unsigned int j;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  BOOL v71;
  std::__split_buffer<std::string>::pointer v73;
  BOOL v74;
  BOOL v75;
  const std::string *k;
  std::string::size_type size;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  std::string::size_type v87;
  uint64_t v88;
  uint64_t v89;
  std::__split_buffer<std::string>::pointer v90;
  uint64_t *v91;
  std::string::size_type v92;
  uint64_t v93;
  uint64_t v94;
  std::__split_buffer<std::string>::pointer first;
  uint64_t *v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  _BOOL4 v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  _BOOL4 v108;
  BOOL v109;
  BOOL v110;
  _BOOL4 v111;
  _QWORD *v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  std::__split_buffer<std::string>::pointer end_high;
  std::__split_buffer<std::string>::pointer v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  std::string *v123;
  std::string *v124;
  __int128 *v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  __int128 *v129;
  __int128 *v130;
  __int128 v131;
  std::string::size_type v132;
  std::string *p_s;
  std::string *v134;
  unint64_t v135;
  unint64_t v136;
  __int128 v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  std::string *v142;
  std::string *v143;
  __int128 v144;
  uint64_t v145;
  int v146;
  _QWORD *v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  std::string *v152;
  __int128 *v153;
  __int128 v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  void **v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  _QWORD *v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v170;
  _QWORD *v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  _QWORD *v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  void *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t **v205;
  uint64_t v207;
  uint64_t **v208;
  __int128 *v209;
  uint64_t **v210;
  __int128 *v211;
  char v212;
  std::string *v213;
  std::string *v214;
  std::string *__str;
  std::vector<std::wstring> v217;
  uint64_t v218[3];
  std::vector<std::wstring> v219;
  uint64_t v220[3];
  std::vector<std::wstring> v221;
  uint64_t v222[3];
  std::string v223;
  std::string v224;
  std::string v225;
  _BYTE v226[15];
  unsigned __int8 v227;
  std::string v228;
  char v229;
  void *v230;
  char v231;
  void *v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  std::string v238;
  std::string v239;
  std::string v240;
  std::__fs::filesystem::path v241;
  std::string exception_object;
  std::string __s;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  void *v247[2];
  uint64_t v248;
  void *v249[2];
  uint64_t v250;
  void *v251[3];
  std::__split_buffer<std::string> __p[14];
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  memset(v251, 0, sizeof(v251));
  v249[1] = 0;
  v249[0] = 0;
  v250 = 0;
  v247[1] = 0;
  v247[0] = 0;
  v248 = 0;
  v245 = 0;
  v244 = 0;
  v246 = 0;
  *(_WORD *)(a1 + 1507) = 0;
  v8 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v212 = 0;
  v204 = (uint64_t *)(a1 + 2240);
  v205 = (uint64_t **)(a1 + 1128);
  v209 = (__int128 *)(a1 + 1912);
  v211 = (__int128 *)(a1 + 1720);
  v207 = a1 + 568;
  v208 = (uint64_t **)(a1 + 440);
  v210 = (uint64_t **)(a1 + 392);
  v213 = (std::string *)(a1 + 1008);
  v214 = (std::string *)(a1 + 984);
  __str = (std::string *)(a1 + 960);
  while ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v251);
    if ((SHIBYTE(v251[2]) & 0x80000000) == 0)
    {
      v10 = v251;
      switch(HIBYTE(v251[2]))
      {
        case 0xA:
LABEL_9:
          v11 = v251[0] == (void *)0x636F567475706E49 && LOWORD(v251[1]) == 25185;
          if (!v11)
            goto LABEL_200;
          goto LABEL_159;
        case 0xB:
LABEL_134:
          if (v251[0] != (void *)0x6F5674757074754FLL || *(void **)((char *)v251 + 3) != (void *)0x6261636F56747570)
            goto LABEL_200;
          goto LABEL_139;
        case 0xC:
          goto LABEL_196;
        case 0xE:
LABEL_141:
          if (v251[0] != (void *)0x6F73736572707345 || *(void **)((char *)v251 + 6) != (void *)0x656E69676E456F73)
            goto LABEL_145;
          goto LABEL_161;
        case 0x12:
LABEL_110:
          if (v251[0] != (void *)0x79537475706E493CLL
            || v251[1] != (void *)0x6C6261546C6F626DLL
            || LOWORD(v251[2]) != 15973)
          {
            v10 = v251;
            switch(HIBYTE(v251[2]))
            {
              case 0xA:
                goto LABEL_9;
              case 0xB:
                goto LABEL_134;
              case 0xC:
                goto LABEL_196;
              case 0xE:
                goto LABEL_141;
              default:
                goto LABEL_200;
            }
          }
          goto LABEL_120;
        case 0x13:
LABEL_126:
          if (v251[0] != (void *)0x5374757074754F3CLL
            || v251[1] != (void *)0x6261546C6F626D79
            || *(void **)((char *)&v251[1] + 3) != (void *)0x3E656C6261546C6FLL)
          {
            v10 = v251;
            switch(HIBYTE(v251[2]))
            {
              case 0xA:
                goto LABEL_9;
              case 0xB:
                goto LABEL_134;
              case 0xC:
                goto LABEL_196;
              case 0xE:
                goto LABEL_141;
              default:
                goto LABEL_200;
            }
          }
          goto LABEL_153;
        case 0x14:
          if (v251[0] != (void *)0x6D79537475706E49
            || v251[1] != (void *)0x656C6261546C6F62
            || LODWORD(v251[2]) != 1701603654)
          {
            goto LABEL_200;
          }
          goto LABEL_100;
        case 0x15:
          if (v251[0] != (void *)0x795374757074754FLL
            || v251[1] != (void *)0x6C6261546C6F626DLL
            || *(void **)((char *)&v251[1] + 5) != (void *)0x656C6946656C6261)
          {
            v10 = v251;
            switch(HIBYTE(v251[2]))
            {
              case 0xA:
                goto LABEL_9;
              case 0xB:
                goto LABEL_134;
              case 0xC:
                goto LABEL_196;
              case 0xE:
                goto LABEL_141;
              case 0x12:
                goto LABEL_110;
              case 0x13:
                goto LABEL_126;
              case 0x15:
                if (v251[0] == (void *)0x457265646F636E45
                  && v251[1] == (void *)0x456F737365727073
                  && *(void **)((char *)&v251[1] + 5) == (void *)0x656E69676E456F73)
                {
                  goto LABEL_300;
                }
                if (HIBYTE(v251[2]) == 12)
                  goto LABEL_152;
                if (HIBYTE(v251[2]) == 14)
                  goto LABEL_147;
                if (HIBYTE(v251[2]) != 21)
                  goto LABEL_200;
                v71 = v251[0] == (void *)0x457265646F636544 && v251[1] == (void *)0x456F737365727073;
                if (!v71 || *(void **)((char *)&v251[1] + 5) != (void *)0x656E69676E456F73)
                  goto LABEL_200;
                goto LABEL_298;
              default:
                goto LABEL_200;
            }
          }
          goto LABEL_118;
        default:
          goto LABEL_200;
      }
    }
    v12 = v251[1];
    if (v251[1] == (void *)20)
    {
      v13 = *(_QWORD *)v251[0] == 0x6D79537475706E49 && *((_QWORD *)v251[0] + 1) == 0x656C6261546C6F62;
      if (v13 && *((_DWORD *)v251[0] + 4) == 1701603654)
      {
LABEL_100:
        kaldi::ReadToken(a2, a3, (uint64_t)v249);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v241.__pn_, (char *)v249);
        std::__fs::filesystem::operator/[abi:ne180100](&v241, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v228, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v228 = __s;
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
        Text = fst::SymbolTable::ReadText((uint64_t)&v228);
        v45 = *(_QWORD *)(a1 + 552);
        *(_QWORD *)(a1 + 552) = Text;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
          operator delete(__p[0].__begin_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        *(_DWORD *)(a1 + 812) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 552) + 104))(*(_QWORD *)(a1 + 552), "<s>");
        *(_DWORD *)(a1 + 816) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 552) + 104))(*(_QWORD *)(a1 + 552), "</s>");
        *(_DWORD *)(a1 + 820) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 552) + 104))(*(_QWORD *)(a1 + 552), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
LABEL_192:
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input symbol table size ", 24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 552) + 120))(*(_QWORD *)(a1 + 552));
          std::ostream::operator<<();
          goto LABEL_193;
        }
        goto LABEL_316;
      }
    }
    if (v251[1] == (void *)21)
    {
      if (*(_QWORD *)v251[0] == 0x795374757074754FLL
        && *((_QWORD *)v251[0] + 1) == 0x6C6261546C6F626DLL
        && *(_QWORD *)((char *)v251[0] + 13) == 0x656C6946656C6261)
      {
LABEL_118:
        kaldi::ReadToken(a2, a3, (uint64_t)v247);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v241.__pn_, (char *)v247);
        std::__fs::filesystem::operator/[abi:ne180100](&v241, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v228, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v228 = __s;
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
        v42 = fst::SymbolTable::ReadText((uint64_t)&v228);
        v43 = *(_QWORD *)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v42;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
          operator delete(__p[0].__begin_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        *(_DWORD *)(a1 + 824) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 560) + 104))(*(_QWORD *)(a1 + 560), "<s>");
        *(_DWORD *)(a1 + 828) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 560) + 104))(*(_QWORD *)(a1 + 560), "</s>");
        *(_DWORD *)(a1 + 832) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 560) + 104))(*(_QWORD *)(a1 + 560), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
LABEL_158:
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output symbol table size ", 25);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 120))(*(_QWORD *)(a1 + 560));
          std::ostream::operator<<();
LABEL_193:
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          goto LABEL_316;
        }
        goto LABEL_316;
      }
      v12 = v251[1];
    }
    if (v12 == (void *)18)
    {
      if (*(_QWORD *)v251[0] == 0x79537475706E493CLL
        && *((_QWORD *)v251[0] + 1) == 0x6C6261546C6F626DLL
        && *((_WORD *)v251[0] + 8) == 15973)
      {
LABEL_120:
        std::string::basic_string[abi:ne180100]<0>(__p, "InputSymbolTable");
        kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)__p, &v228);
        v35 = *(_QWORD *)(a1 + 552);
        *(_QWORD *)(a1 + 552) = v228.__r_.__value_.__r.__words[0];
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        *(_DWORD *)(a1 + 812) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 552) + 104))(*(_QWORD *)(a1 + 552), "<s>");
        *(_DWORD *)(a1 + 816) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 552) + 104))(*(_QWORD *)(a1 + 552), "</s>");
        *(_DWORD *)(a1 + 820) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 552) + 104))(*(_QWORD *)(a1 + 552), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 1)
          goto LABEL_192;
        goto LABEL_316;
      }
      v12 = v251[1];
    }
    if (v12 == (void *)19)
    {
      if (*(_QWORD *)v251[0] == 0x5374757074754F3CLL
        && *((_QWORD *)v251[0] + 1) == 0x6261546C6F626D79
        && *(_QWORD *)((char *)v251[0] + 11) == 0x3E656C6261546C6FLL)
      {
LABEL_153:
        std::string::basic_string[abi:ne180100]<0>(__p, "OutputSymbolTable");
        kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)__p, &v228);
        v41 = *(_QWORD *)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v228.__r_.__value_.__r.__words[0];
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        *(_DWORD *)(a1 + 824) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 560) + 104))(*(_QWORD *)(a1 + 560), "<s>");
        *(_DWORD *)(a1 + 828) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 560) + 104))(*(_QWORD *)(a1 + 560), "</s>");
        *(_DWORD *)(a1 + 832) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 560) + 104))(*(_QWORD *)(a1 + 560), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 1)
          goto LABEL_158;
        goto LABEL_316;
      }
      v12 = v251[1];
    }
    if (v12 == (void *)10)
    {
      if (*(_QWORD *)v251[0] == 0x636F567475706E49 && *((_WORD *)v251[0] + 4) == 25185)
      {
LABEL_159:
        kaldi::ReadToken(a2, a3, (uint64_t)v249);
        v226[0] = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v249);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&v228);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&v228.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v228.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(&v241, __p, v226);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v56 = kaldi::Input::Stream((kaldi::Input *)&v241);
        kaldi::quasar::Vocab::Vocab(&v228, v56, v226[0], 1);
        v57 = (fst::SymbolTable *)operator new();
        fst::SymbolTable::SymbolTable(v57);
        v58 = *(_QWORD *)(a1 + 552);
        *(_QWORD *)(a1 + 552) = v57;
        if (v58)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          v57 = *(fst::SymbolTable **)(a1 + 552);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
        (*(void (**)(fst::SymbolTable *, std::__split_buffer<std::string> *))(*(_QWORD *)v57 + 32))(v57, __p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        for (i = 0; i != kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)&v228); ++i)
        {
          v60 = *(_QWORD *)(a1 + 552);
          Word = kaldi::quasar::Vocab::GetWord((kaldi::quasar::Vocab *)&v228, i);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(v60, Word);
        }
        kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&v228, (std::string *)__p);
        *(_DWORD *)(a1 + 820) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v228, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::BosWord((kaldi::quasar::Vocab *)&v228, (std::string *)__p);
        *(_DWORD *)(a1 + 812) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v228, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::EosWord((kaldi::quasar::Vocab *)&v228, (std::string *)__p);
        *(_DWORD *)(a1 + 816) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v228, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input vocab size ", 17);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 552) + 120))(*(_QWORD *)(a1 + 552));
          std::ostream::operator<<();
          goto LABEL_260;
        }
LABEL_261:
        if (v236)
        {
          v237 = v236;
          operator delete(v236);
        }
        __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v235;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v234);
        if (v233 < 0)
          operator delete(v232);
        if (v231 < 0)
          operator delete(v230);
        if (v229 < 0)
          operator delete((void *)v228.__r_.__value_.__l.__size_);
        kaldi::Input::~Input((kaldi::Input *)&v241);
        goto LABEL_316;
      }
      v12 = v251[1];
    }
    if (v12 == (void *)11)
    {
      if (*(_QWORD *)v251[0] == 0x6F5674757074754FLL && *(_QWORD *)((char *)v251[0] + 3) == 0x6261636F56747570)
      {
LABEL_139:
        kaldi::ReadToken(a2, a3, (uint64_t)v247);
        v226[0] = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v247);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&v228);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&v228.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v228.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(&v241, __p, v226);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v62 = kaldi::Input::Stream((kaldi::Input *)&v241);
        kaldi::quasar::Vocab::Vocab(&v228, v62, v226[0], 1);
        v63 = (fst::SymbolTable *)operator new();
        fst::SymbolTable::SymbolTable(v63);
        v64 = *(_QWORD *)(a1 + 560);
        *(_QWORD *)(a1 + 560) = v63;
        if (v64)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
          v63 = *(fst::SymbolTable **)(a1 + 560);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
        (*(void (**)(fst::SymbolTable *, std::__split_buffer<std::string> *))(*(_QWORD *)v63 + 32))(v63, __p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        for (j = 0; j != kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)&v228); ++j)
        {
          v66 = *(_QWORD *)(a1 + 560);
          v67 = kaldi::quasar::Vocab::GetWord((kaldi::quasar::Vocab *)&v228, j);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 32))(v66, v67);
        }
        kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&v228, (std::string *)__p);
        *(_DWORD *)(a1 + 832) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v228, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::BosWord((kaldi::quasar::Vocab *)&v228, (std::string *)__p);
        *(_DWORD *)(a1 + 824) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v228, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::EosWord((kaldi::quasar::Vocab *)&v228, (std::string *)__p);
        *(_DWORD *)(a1 + 828) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v228, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output vocab size ", 18);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 120))(*(_QWORD *)(a1 + 560));
          std::ostream::operator<<();
LABEL_260:
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        goto LABEL_261;
      }
      v12 = v251[1];
    }
    if (v12 == (void *)14)
    {
      if (*(_QWORD *)v251[0] == 0x6F73736572707345 && *(_QWORD *)((char *)v251[0] + 6) == 0x656E69676E456F73)
      {
LABEL_161:
        memset(&v228, 0, sizeof(v228));
        kaldi::ReadToken(a2, a3, (uint64_t)&v228);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v240, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
        else
          v240 = v228;
        kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v240, (uint64_t *)__p);
        *(_QWORD *)(a1 + 1080) = __p[0].__first_;
        if (*(char *)(a1 + 983) < 0)
          operator delete(__str->__r_.__value_.__l.__data_);
        *(_OWORD *)&__str->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__begin_;
        *(_QWORD *)(a1 + 976) = __p[0].__end_cap_.__value_;
        HIBYTE(__p[0].__end_cap_.__value_) = 0;
        LOBYTE(__p[0].__begin_) = 0;
        if ((SHIBYTE(v240.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_313;
        v55 = (void *)v240.__r_.__value_.__r.__words[0];
        goto LABEL_312;
      }
      v12 = v251[1];
    }
    if (v12 != (void *)21)
      goto LABEL_85;
    if (*(_QWORD *)v251[0] == 0x457265646F636E45
      && *((_QWORD *)v251[0] + 1) == 0x456F737365727073
      && *(_QWORD *)((char *)v251[0] + 13) == 0x656E69676E456F73)
    {
LABEL_300:
      memset(&v228, 0, sizeof(v228));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v239, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
      else
        v239 = v228;
      kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v239, (uint64_t *)__p);
      *(_QWORD *)(a1 + 1088) = __p[0].__first_;
      if (*(char *)(a1 + 1007) < 0)
        operator delete(v214->__r_.__value_.__l.__data_);
      *(_OWORD *)&v214->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__begin_;
      *(_QWORD *)(a1 + 1000) = __p[0].__end_cap_.__value_;
      HIBYTE(__p[0].__end_cap_.__value_) = 0;
      LOBYTE(__p[0].__begin_) = 0;
      if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_313;
      v55 = (void *)v239.__r_.__value_.__r.__words[0];
LABEL_312:
      operator delete(v55);
      goto LABEL_313;
    }
    v12 = v251[1];
    if (v251[1] != (void *)21)
      goto LABEL_85;
    if (*(_QWORD *)v251[0] == 0x457265646F636544
      && *((_QWORD *)v251[0] + 1) == 0x456F737365727073
      && *(_QWORD *)((char *)v251[0] + 13) == 0x656E69676E456F73)
    {
LABEL_298:
      memset(&v228, 0, sizeof(v228));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v238, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
      else
        v238 = v228;
      kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v238, (uint64_t *)__p);
      *(_QWORD *)(a1 + 1096) = __p[0].__first_;
      if (*(char *)(a1 + 1031) < 0)
        operator delete(v213->__r_.__value_.__l.__data_);
      *(_OWORD *)&v213->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__begin_;
      *(_QWORD *)(a1 + 1024) = __p[0].__end_cap_.__value_;
      HIBYTE(__p[0].__end_cap_.__value_) = 0;
      LOBYTE(__p[0].__begin_) = 0;
      if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_313;
      v55 = (void *)v238.__r_.__value_.__r.__words[0];
      goto LABEL_312;
    }
    if ((HIBYTE(v251[2]) & 0x80) != 0)
    {
LABEL_85:
      if (v12 == (void *)14)
      {
        if (*(_QWORD *)v251[0] == 0x6E69646465626D45 && *(_QWORD *)((char *)v251[0] + 6) == 0x6870617247676E69)
        {
LABEL_275:
          *(_BYTE *)(a1 + 1508) = 1;
          v52 = a1 + 56;
          goto LABEL_276;
        }
        v12 = v251[1];
      }
      if (v12 != (void *)12)
        goto LABEL_200;
      v10 = (void **)v251[0];
      goto LABEL_196;
    }
LABEL_145:
    if (HIBYTE(v251[2]) == 12)
    {
LABEL_152:
      v10 = v251;
LABEL_196:
      if (*v10 == (void *)0x4774756F64616552 && *((_DWORD *)v10 + 2) == 1752195442)
      {
        *(_BYTE *)(a1 + 1507) = 1;
        v52 = a1 + 128;
LABEL_276:
        kaldi::ReadToken(a2, a3, v52);
        goto LABEL_316;
      }
      goto LABEL_200;
    }
    if (HIBYTE(v251[2]) == 14)
    {
LABEL_147:
      if (v251[0] == (void *)0x6E69646465626D45 && *(void **)((char *)v251 + 6) == (void *)0x6870617247676E69)
        goto LABEL_275;
    }
LABEL_200:
    v47 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ReadoutStartIdx");
    v48 = a1 + 2124;
    if (v47)
      goto LABEL_201;
    v49 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ReadoutWithSoftmax");
    v50 = (char *)(a1 + 2128);
    if (v49)
      goto LABEL_203;
    v51 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ReadoutInputStr");
    v52 = a1 + 1984;
    if (v51)
      goto LABEL_276;
    v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ReadoutOutputStr");
    v52 = a1 + 2008;
    if (v53)
      goto LABEL_276;
    v54 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "EncoderGraph");
    v52 = a1 + 80;
    if (v54)
      goto LABEL_276;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "EncoderLangGraph"))
    {
      memset(&v228, 0, sizeof(v228));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v228, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 368), (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_209;
    }
    v68 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "DecoderGraph");
    v52 = a1 + 104;
    if (v68)
      goto LABEL_276;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "DecoderLangGraph"))
    {
      memset(&v228, 0, sizeof(v228));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v228, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v210, (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_209;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "HandoverLangGraph"))
    {
      memset(&v228, 0, sizeof(v228));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v228, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 416), (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_209;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "InputLangGraph"))
    {
      memset(&v228, 0, sizeof(v228));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v228, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v208, (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_209;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "EncoderLangFunc"))
    {
      memset(&v228, 0, sizeof(v228));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v228);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v228, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 464), (const void **)&__p[0].__first_, (uint64_t)__p);
LABEL_209:
      std::pair<std::string,std::string>::~pair((uint64_t)__p);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        v55 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_312;
      }
LABEL_313:
      if ((SHIBYTE(v228.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_316;
      v73 = (std::__split_buffer<std::string>::pointer)v228.__r_.__value_.__r.__words[0];
LABEL_315:
      operator delete(v73);
      goto LABEL_316;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "Mmap"))
    {
      LOBYTE(__p[0].__first_) = 0;
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)__p);
      goto LABEL_316;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "AddSrcBos"))
    {
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 1510));
      v212 = 1;
      goto LABEL_316;
    }
    v74 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "AddSrcEos");
    v50 = (char *)(a1 + 1511);
    if (v74)
      goto LABEL_203;
    v75 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "PadSrc");
    v48 = a1 + 848;
    if (v75)
      goto LABEL_201;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "PadSrcConfigs"))
    {
      memset(__p, 0, 24);
      memset(&v228, 0, sizeof(v228));
      kaldi::ReadToken(a2, a3, (uint64_t)__p);
      kaldi::SplitStringToVector((const std::string *)__p, ",", 1, (uint64_t)&v228);
      size = v228.__r_.__value_.__l.__size_;
      for (k = (const std::string *)v228.__r_.__value_.__r.__words[0]; k != (const std::string *)size; ++k)
      {
        LODWORD(__s.__r_.__value_.__l.__data_) = std::stoi(k, 0, 10);
        std::vector<int>::push_back[abi:ne180100](a1 + 856, &__s);
      }
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ConfigNames"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(a2, a3, (uint64_t)__p);
      kaldi::SplitStringToVector((const std::string *)__p, ",", 1, a1 + 880);
    }
    else
    {
      v78 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "MaxSrcTokens");
      v48 = a1 + 904;
      if (v78)
        goto LABEL_201;
      v79 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "Reverse");
      v50 = (char *)(a1 + 1504);
      if (v79)
        goto LABEL_203;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "IsRNN"))
      {
        v228.__r_.__value_.__s.__data_[0] = 0;
        kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v228);
        if (v228.__r_.__value_.__s.__data_[0])
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "UseAttention"))
      {
        v228.__r_.__value_.__s.__data_[0] = 0;
        kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v228);
        if (v228.__r_.__value_.__s.__data_[0])
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "UseTopK"))
      {
        v228.__r_.__value_.__s.__data_[0] = 0;
        kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v228);
        if (v228.__r_.__value_.__s.__data_[0])
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ModelBatchSize"))
      {
        kaldi::ReadBasicType<int>(a2, a3, a1 + 840);
        *(_BYTE *)(a1 + 844) = 1;
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "BPEEncoder"))
      {
        kaldi::ReadToken(a2, a3, (uint64_t)&v244);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v241.__pn_, (char *)&v244);
        std::__fs::filesystem::operator/[abi:ne180100](&v241, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v228, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v228 = __s;
        std::ifstream::basic_ifstream(__p);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if ((kaldi::quasar::BPE::Read(v207, (uint64_t *)__p, 1) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v228);
          v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v228, (uint64_t)"Failed to read BPE model from : ", 32);
          if (v246 >= 0)
            v202 = &v244;
          else
            v202 = v244;
          if (v246 >= 0)
            v203 = HIBYTE(v246);
          else
            v203 = v245;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)v202, v203);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v228);
        }
        *(_BYTE *)(a1 + 1505) = 1;
        std::ifstream::~ifstream(__p);
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "<BPE>"))
      {
        if ((kaldi::quasar::BPE::Read(v207, a2, a3) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read embedded BPE model", 33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE read - entries: ", 20);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        *(_BYTE *)(a1 + 1505) = 1;
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "AddTag"))
      {
        kaldi::ReadToken(a2, a3, a1 + 2384);
LABEL_374:
        *(_BYTE *)(a1 + 2376) = 1;
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "TagFormat"))
      {
        kaldi::ReadToken(a2, a3, a1 + 2408);
        goto LABEL_374;
      }
      v80 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "IsEspresso");
      v50 = (char *)(a1 + 1512);
      if (v80)
        goto LABEL_203;
      v81 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "SourceInputStr");
      v52 = a1 + 1744;
      if (v81)
        goto LABEL_276;
      v82 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "TargetInputStr");
      v52 = a1 + 1768;
      if (v82)
        goto LABEL_276;
      v83 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "EncoderValuesStr");
      v52 = a1 + 1672;
      if (v83)
        goto LABEL_276;
      v84 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "InputNetValuesStr");
      v52 = a1 + 1960;
      if (v84)
        goto LABEL_276;
      v85 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ScoresStr");
      v52 = a1 + 1720;
      if (v85)
        goto LABEL_276;
      v86 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ShortlistStr");
      v52 = a1 + 1888;
      if (v86)
        goto LABEL_276;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ShortlistFile"))
      {
        memset(&v228, 0, sizeof(v228));
        kaldi::ReadToken(a2, a3, (uint64_t)&v228);
        v227 = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v241.__pn_, (char *)&v228);
        std::__fs::filesystem::operator/[abi:ne180100](&v241, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(v226, __p, &v227);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading Shortlist file...", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        v91 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v226);
        kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataInOneFile(v91, v227, 0, __p);
        std::make_unique[abi:ne180100]<kaldi::quasar::Shortlist,std::unique_ptr<kaldi::quasar::ShortlistData>>((uint64_t *)__p, (uint64_t *)&__s);
        v92 = __s.__r_.__value_.__r.__words[0];
        __s.__r_.__value_.__r.__words[0] = 0;
        v93 = *v204;
        *v204 = v92;
        if (v93)
        {
          std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)v204, v93);
          v94 = __s.__r_.__value_.__r.__words[0];
          __s.__r_.__value_.__r.__words[0] = 0;
          if (v94)
            std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)&__s, v94);
        }
        first = __p[0].__first_;
        __p[0].__first_ = 0;
        if (first)
          (*(void (**)(std::__split_buffer<std::string>::pointer))(first->__r_.__value_.__r.__words[0] + 64))(first);
LABEL_432:
        kaldi::Input::~Input((kaldi::Input *)v226);
        goto LABEL_313;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "<Shortlist>"))
      {
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading Shortlist...", 20);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v225, (char *)a1);
        kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataBasedOnTagInInput(a2, a3, a4, (uint64_t)&v225, (std::__split_buffer<std::wstring>::pointer *)__p);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v225.__r_.__value_.__l.__data_);
        std::make_unique[abi:ne180100]<kaldi::quasar::Shortlist,std::unique_ptr<kaldi::quasar::ShortlistData>>((uint64_t *)__p, (uint64_t *)&v228);
        v87 = v228.__r_.__value_.__r.__words[0];
        v228.__r_.__value_.__r.__words[0] = 0;
        v88 = *v204;
        *v204 = v87;
        if (v88)
        {
          std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)v204, v88);
          v89 = v228.__r_.__value_.__r.__words[0];
          v228.__r_.__value_.__r.__words[0] = 0;
          if (v89)
            std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)&v228, v89);
        }
        v90 = __p[0].__first_;
        __p[0].__first_ = 0;
        if (v90)
          (*(void (**)(std::__split_buffer<std::string>::pointer))(v90->__r_.__value_.__r.__words[0] + 64))(v90);
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ReadoutNnetFile"))
      {
        memset(&v228, 0, sizeof(v228));
        kaldi::ReadToken(a2, a3, (uint64_t)&v228);
        v227 = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v241.__pn_, (char *)&v228);
        std::__fs::filesystem::operator/[abi:ne180100](&v241, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(v226, __p, &v227);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v241.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading readout Nnet file...", 28);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        v96 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v226);
        kaldi::nnet1::Nnet::Read(v205, v96, v227, 0);
        *(_BYTE *)(a1 + 1506) = 1;
        goto LABEL_432;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "<ReadoutNnet>"))
      {
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading readout Nnet...", 23);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        kaldi::nnet1::Nnet::Read(v205, a2, a3, a4);
        *(_BYTE *)(a1 + 1506) = 1;
        goto LABEL_316;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "AlignmentLayerStr"))
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v209);
        *(_BYTE *)(a1 + 2164) = 1;
        goto LABEL_316;
      }
      v97 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "AlignmentHeads");
      v48 = a1 + 2152;
      if (v97)
        goto LABEL_201;
      v98 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ShiftedAlignments");
      v50 = (char *)(a1 + 2165);
      if (v98)
        goto LABEL_203;
      v99 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "TransposeSourceInput");
      v50 = (char *)(a1 + 1513);
      if (v99)
        goto LABEL_203;
      v100 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "TwoDimSourceInput");
      v50 = (char *)(a1 + 1514);
      if (v100)
        goto LABEL_203;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "HandoverStrings"))
      {
        memset(__p, 0, 24);
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        kaldi::SplitStringToVector((const std::string *)__p, ",", 1, a1 + 2056);
      }
      else
      {
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "StateStrings"))
        {
          v101 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "StateWidth");
          v48 = a1 + 2456;
          if (v101)
          {
LABEL_201:
            kaldi::ReadBasicType<int>(a2, a3, v48);
            goto LABEL_316;
          }
          v102 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "StateLayoutND");
          v50 = (char *)(a1 + 2460);
          if (v102)
            goto LABEL_203;
          v103 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "NeedsPosition");
          v50 = (char *)(a1 + 1515);
          if (v103)
            goto LABEL_203;
          v104 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "NeedsEncoderPositions");
          v50 = (char *)(a1 + 1516);
          if (v104)
            goto LABEL_203;
          v105 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "NeedsEncoderOut");
          v50 = (char *)(a1 + 1517);
          if (v105)
            goto LABEL_203;
          v106 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "PositionZeroBased");
          v50 = (char *)(a1 + 1518);
          if (v106)
            goto LABEL_203;
          v107 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "ApplyLog");
          v50 = (char *)(a1 + 1519);
          if (v107)
            goto LABEL_203;
          v108 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "PositionScaleStr");
          v52 = a1 + 1864;
          if (!v108)
          {
            v109 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "NoSymbolTables");
            v50 = (char *)(a1 + 2461);
            if (!v109)
            {
              v110 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "EncoderExplicitConfigFunctions");
              v50 = (char *)(a1 + 1520);
              if (!v110)
              {
                v111 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v251, "EncoderLangSrcOnly");
                v50 = (char *)(a1 + 1521);
                if (!v111)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                  if (SHIBYTE(v251[2]) >= 0)
                    v113 = v251;
                  else
                    v113 = (void **)v251[0];
                  if (SHIBYTE(v251[2]) >= 0)
                    v114 = HIBYTE(v251[2]);
                  else
                    v114 = (uint64_t)v251[1];
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)v113, v114);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
                }
              }
            }
LABEL_203:
            kaldi::ReadBasicType<BOOL>(a2, a3, v50);
            goto LABEL_316;
          }
          goto LABEL_276;
        }
        memset(__p, 0, 24);
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        kaldi::SplitStringToVector((const std::string *)__p, ",", 1, a1 + 2080);
      }
    }
    if (SHIBYTE(__p[0].__end_) < 0)
    {
      v73 = __p[0].__first_;
      goto LABEL_315;
    }
LABEL_316:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((a5 & 1) != 0)
    goto LABEL_460;
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_474;
    goto LABEL_475;
  }
  if (*(_BYTE *)(a1 + 103))
    goto LABEL_475;
LABEL_474:
  if (!*(_QWORD *)(a1 + 456))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      goto LABEL_484;
    goto LABEL_483;
  }
LABEL_475:
  if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 127))
      goto LABEL_479;
    goto LABEL_484;
  }
  if (*(_QWORD *)(a1 + 112))
    goto LABEL_484;
LABEL_479:
  if (!*(_QWORD *)(a1 + 408) && kaldi::g_kaldi_verbose_level > -2)
  {
LABEL_483:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Both EncoderGraph (or at least one InputLangGraph) and DecoderGraph (or at least one DecoderLangGraph) must be specified in model file", 134);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
LABEL_484:
  if (!*(_QWORD *)(a1 + 552))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input symbol table must be specified", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    goto LABEL_460;
  }
  if (!*(_QWORD *)(a1 + 560))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output symbol table must be specified", 37);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    goto LABEL_460;
  }
  if ((v212 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"AddSrcBos must be set in model config file", 42);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
LABEL_460:
    v115 = 0;
    goto LABEL_461;
  }
  if (*(_BYTE *)(a1 + 1517) || (v117 = *(_QWORD *)(a1 + 432)) != 0)
  {
    if (*(char *)(a1 + 1695) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(a1 + 1672), *(_QWORD *)(a1 + 1680));
    }
    else
    {
      *(_OWORD *)&__p[0].__first_ = *(_OWORD *)(a1 + 1672);
      __p[0].__end_ = *(std::__split_buffer<std::string>::pointer *)(a1 + 1688);
    }
    if (*(_DWORD *)(a1 + 1088) == 1)
    {
      end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__p[0].__end_);
      v119 = (std::__split_buffer<std::string>::pointer)__p;
      if (SHIBYTE(__p[0].__end_) < 0)
      {
        v119 = __p[0].__first_;
        end_high = __p[0].__begin_;
      }
      for (; end_high; end_high = (std::__split_buffer<std::string>::pointer)((char *)end_high - 1))
      {
        if (v119->__r_.__value_.__s.__data_[0] == 46)
          v119->__r_.__value_.__s.__data_[0] = 95;
        v119 = (std::__split_buffer<std::string>::pointer)((char *)v119 + 1);
      }
    }
    v120 = *(_QWORD *)(a1 + 1704);
    if (v120 >= *(_QWORD *)(a1 + 1712))
    {
      v122 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1696), (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(__p[0].__end_) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a1 + 1704), (const std::string::value_type *)__p[0].__first_, (std::string::size_type)__p[0].__begin_);
      }
      else
      {
        v121 = *(_OWORD *)&__p[0].__first_;
        *(_QWORD *)(v120 + 16) = __p[0].__end_;
        *(_OWORD *)v120 = v121;
      }
      v122 = v120 + 24;
      *(_QWORD *)(a1 + 1704) = v120 + 24;
    }
    *(_QWORD *)(a1 + 1704) = v122;
    if (SHIBYTE(__p[0].__end_) < 0)
      operator delete(__p[0].__first_);
    v117 = *(_QWORD *)(a1 + 432);
  }
  v123 = *(std::string **)(a1 + 1704);
  *(_DWORD *)(a1 + 2104) = -1431655765 * (((unint64_t)v123 - *(_QWORD *)(a1 + 1696)) >> 3);
  if (!v117)
  {
    v124 = *(std::string **)(a1 + 2056);
    v125 = *(__int128 **)(a1 + 2064);
    if (v124 != (std::string *)v125)
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)(a1 + 1696), v123, v124, v125, 0xAAAAAAAAAAAAAAABLL * (((char *)v125 - (char *)v124) >> 3));
  }
  v126 = (_QWORD *)(a1 + 2032);
  v127 = *(_QWORD *)(a1 + 2040);
  if (v127 >= *(_QWORD *)(a1 + 2048))
  {
    v128 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 2032), v211);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 2032, v211);
    v128 = v127 + 24;
  }
  *(_QWORD *)(a1 + 2040) = v128;
  *(_DWORD *)(a1 + 2156) = 0;
  if (*(_BYTE *)(a1 + 2164))
  {
    if (v128 >= *(_QWORD *)(a1 + 2048))
    {
      v128 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 2032), v209);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 2032, v209);
      v128 += 24;
    }
    *(_QWORD *)(a1 + 2040) = v128;
    *(_DWORD *)(a1 + 2148) = 1;
  }
  v129 = *(__int128 **)(a1 + 2080);
  v130 = *(__int128 **)(a1 + 2088);
  if (v129 == v130)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model: Missing required StateStrings field!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  *(_DWORD *)(a1 + 2108) = -1431655765 * ((v128 - *(_QWORD *)(a1 + 2032)) >> 3);
  do
  {
    if (*((char *)v129 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)v129, *((_QWORD *)v129 + 1));
    }
    else
    {
      v131 = *v129;
      v228.__r_.__value_.__r.__words[2] = *((_QWORD *)v129 + 2);
      *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v131;
    }
    if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
    else
      v132 = v228.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v132 + 5);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v132)
    {
      if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = &v228;
      else
        v134 = (std::string *)v228.__r_.__value_.__r.__words[0];
      memmove(p_s, v134, v132);
    }
    strcpy((char *)p_s + v132, ".next");
    v135 = *(_QWORD *)(a1 + 2040);
    v136 = *(_QWORD *)(a1 + 2048);
    if (v135 >= v136)
    {
      v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v126) >> 3);
      v139 = v138 + 1;
      if (v138 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v140 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - *v126) >> 3);
      if (2 * v140 > v139)
        v139 = 2 * v140;
      if (v140 >= 0x555555555555555)
        v141 = 0xAAAAAAAAAAAAAAALL;
      else
        v141 = v139;
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2048);
      if (v141)
        v142 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 2048, v141);
      else
        v142 = 0;
      v143 = v142 + v138;
      __p[0].__first_ = v142;
      __p[0].__begin_ = v143;
      __p[0].__end_cap_.__value_ = &v142[v141];
      v144 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v143->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143->__r_.__value_.__l.__data_ = v144;
      memset(&__s, 0, sizeof(__s));
      __p[0].__end_ = v143 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 2032), __p);
      v145 = *(_QWORD *)(a1 + 2040);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
      v146 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a1 + 2040) = v145;
      if (v146 < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      v137 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(_QWORD *)(v135 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
      *(_OWORD *)v135 = v137;
      *(_QWORD *)(a1 + 2040) = v135 + 24;
    }
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
    v129 = (__int128 *)((char *)v129 + 24);
  }
  while (v129 != v130);
  if (*(char *)(a1 + 1007) < 0)
  {
    if (!*(_QWORD *)(a1 + 992))
    {
LABEL_561:
      if (*(_DWORD *)(a1 + 1088) == 2)
      {
        std::string::operator=(v214, __str);
        *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a1 + 1080);
      }
    }
  }
  else if (!*(_BYTE *)(a1 + 1007))
  {
    goto LABEL_561;
  }
  if (*(char *)(a1 + 1031) < 0)
  {
    if (!*(_QWORD *)(a1 + 1016))
    {
LABEL_567:
      if (*(_DWORD *)(a1 + 1096) == 2)
      {
        std::string::operator=(v213, __str);
        *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a1 + 1080);
      }
    }
  }
  else if (!*(_BYTE *)(a1 + 1031))
  {
    goto LABEL_567;
  }
  if (*(_BYTE *)(a1 + 1506) && *(_BYTE *)(a1 + 1507))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Either Readout Espresso Graph or Readout Nnet is supported", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (!*(_BYTE *)(a1 + 1512))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"TensorFlow not supported", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_608;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
    goto LABEL_608;
  }
  if (!*(_BYTE *)(a1 + 24) || !*(_QWORD *)(a1 + 408))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading ENCODER ", 16);
      v148 = *(_BYTE *)(a1 + 103);
      if (v148 >= 0)
        v149 = a1 + 80;
      else
        v149 = *(_QWORD *)(a1 + 80);
      if (v148 >= 0)
        v150 = *(unsigned __int8 *)(a1 + 103);
      else
        v150 = *(_QWORD *)(a1 + 88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, v149, v150);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    memset(__p, 0, 24);
    v151 = *(_QWORD **)(a1 + 464);
    if (v151 != (_QWORD *)(a1 + 472))
    {
      v152 = 0;
      do
      {
        v153 = (__int128 *)(v151 + 7);
        if (v152 >= __p[0].__end_)
        {
          v152 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, v153);
        }
        else
        {
          if (*((char *)v151 + 79) < 0)
          {
            std::string::__init_copy_ctor_external(v152, (const std::string::value_type *)v151[7], v151[8]);
          }
          else
          {
            v154 = *v153;
            v152->__r_.__value_.__r.__words[2] = v151[9];
            *(_OWORD *)&v152->__r_.__value_.__l.__data_ = v154;
          }
          ++v152;
        }
        __p[0].__begin_ = v152;
        v155 = (_QWORD *)v151[1];
        if (v155)
        {
          do
          {
            v156 = v155;
            v155 = (_QWORD *)*v155;
          }
          while (v155);
        }
        else
        {
          do
          {
            v156 = (_QWORD *)v151[2];
            v11 = *v156 == (_QWORD)v151;
            v151 = v156;
          }
          while (!v11);
        }
        v151 = v156;
      }
      while (v156 != (_QWORD *)(a1 + 472));
    }
    v157 = *(_QWORD *)(a1 + 1088);
    memset(&v224, 0, sizeof(v224));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v224, *(__int128 **)(a1 + 880), *(__int128 **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3));
    memset(&v223, 0, sizeof(v223));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v223, (__int128 *)__p[0].__first_, (__int128 *)__p[0].__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__p[0].__begin_ - (char *)__p[0].__first_) >> 3));
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(a1 + 80), v157, (uint64_t)v214, (uint64_t *)&v224, (std::vector<std::wstring> *)&v223, *(_BYTE *)(a1 + 1520), (__int128 *)&v228);
    v158 = (void **)(a1 + 152);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 152, (__int128 *)&v228);
    v159 = (std::__shared_weak_count *)v228.__r_.__value_.__l.__size_;
    if (v228.__r_.__value_.__l.__size_)
    {
      v160 = (unint64_t *)(v228.__r_.__value_.__l.__size_ + 8);
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    v162 = *v158;
    if (*v158)
    *(_BYTE *)(a1 + 488) = v162 != 0;
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  }
LABEL_608:
  if (*(_BYTE *)(a1 + 1508))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading EMBEDDING ", 18);
      v164 = *(_BYTE *)(a1 + 79);
      if (v164 >= 0)
        v165 = a1 + 56;
      else
        v165 = *(_QWORD *)(a1 + 56);
      if (v164 >= 0)
        v166 = *(unsigned __int8 *)(a1 + 79);
      else
        v166 = *(_QWORD *)(a1 + 64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, v165, v166);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    v167 = *(_QWORD *)(a1 + 1096);
    memset(v222, 0, sizeof(v222));
    memset(&v221, 0, sizeof(v221));
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(a1 + 56), v167, (uint64_t)v213, v222, &v221, 0, (__int128 *)__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 168, (__int128 *)__p);
    begin = (std::__shared_weak_count *)__p[0].__begin_;
    if (__p[0].__begin_)
    {
      p_size = &__p[0].__begin_->__r_.__value_.__l.__size_;
      do
        v170 = __ldaxr(p_size);
      while (__stlxr(v170 - 1, p_size));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
        std::__shared_weak_count::__release_weak(begin);
      }
    }
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v221;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  }
  if (*(_BYTE *)(a1 + 1507))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading READOUT ", 16);
      v172 = *(_BYTE *)(a1 + 151);
      if (v172 >= 0)
        v173 = a1 + 128;
      else
        v173 = *(_QWORD *)(a1 + 128);
      if (v172 >= 0)
        v174 = *(unsigned __int8 *)(a1 + 151);
      else
        v174 = *(_QWORD *)(a1 + 136);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, v173, v174);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    v175 = *(_QWORD *)(a1 + 1096);
    memset(v220, 0, sizeof(v220));
    memset(&v219, 0, sizeof(v219));
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(a1 + 128), v175, (uint64_t)v213, v220, &v219, 0, (__int128 *)__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 200, (__int128 *)__p);
    v176 = (std::__shared_weak_count *)__p[0].__begin_;
    if (__p[0].__begin_)
    {
      v177 = &__p[0].__begin_->__r_.__value_.__l.__size_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v219;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  }
  if (*(_QWORD *)(a1 + 408))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      __p[0].__begin_ = 0;
      __p[0].__first_ = 0;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)__p);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      __p[0].__begin_ = 0;
      __p[0].__first_ = 0;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)__p);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      __p[0].__begin_ = 0;
      __p[0].__first_ = 0;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 232, (__int128 *)__p);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    }
    else
    {
      if (*(_QWORD *)(a1 + 456))
      {
        v187 = *v208;
        if (*((char *)*v208 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v187[4], v187[5]);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *((_OWORD *)v187 + 2);
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v187[6];
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
      }
      v188 = *(_QWORD **)(a1 + 392);
      if (v188 != (_QWORD *)(a1 + 400))
      {
        do
        {
          kaldi::quasar::Encdec::LoadSubmodels(a1, (std::string::size_type)__p, (std::string::size_type)(v188 + 4));
          v189 = (_QWORD *)v188[1];
          if (v189)
          {
            do
            {
              v190 = v189;
              v189 = (_QWORD *)*v189;
            }
            while (v189);
          }
          else
          {
            do
            {
              v190 = (_QWORD *)v188[2];
              v11 = *v190 == (_QWORD)v188;
              v188 = v190;
            }
            while (!v11);
          }
          v188 = v190;
        }
        while (v190 != (_QWORD *)(a1 + 400));
      }
      v191 = *(_QWORD *)(a1 + 272);
      *(_OWORD *)&v228.__r_.__value_.__l.__data_ = 0uLL;
      v192 = *(std::__shared_weak_count **)(v191 + 64);
      if (v192)
      {
        v228.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v192);
        if (v228.__r_.__value_.__l.__size_)
          v228.__r_.__value_.__r.__words[0] = *(_QWORD *)(v191 + 56);
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)&v228);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v228);
      if (*(_QWORD *)(a1 + 312))
      {
        v193 = *(_QWORD *)(a1 + 296);
        *(_OWORD *)&v228.__r_.__value_.__l.__data_ = 0uLL;
        v194 = *(std::__shared_weak_count **)(v193 + 64);
        if (v194)
        {
          v228.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v194);
          if (v228.__r_.__value_.__l.__size_)
            v228.__r_.__value_.__r.__words[0] = *(_QWORD *)(v193 + 56);
        }
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)&v228);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v228);
      }
      if (*(_QWORD *)(a1 + 456))
      {
        v195 = *v210;
        if (*((char *)*v210 + 55) < 0)
          std::string::__init_copy_ctor_external(&v228, (const std::string::value_type *)v195[4], v195[5]);
        else
          v228 = *(std::string *)(v195 + 4);
        v196 = *(_QWORD **)(a1 + 440);
        if (v196 != (_QWORD *)(a1 + 448))
        {
          do
          {
            kaldi::quasar::Encdec::LoadSubmodels(a1, (std::string::size_type)(v196 + 4), (std::string::size_type)&v228);
            v197 = (_QWORD *)v196[1];
            if (v197)
            {
              do
              {
                v198 = v197;
                v197 = (_QWORD *)*v197;
              }
              while (v197);
            }
            else
            {
              do
              {
                v198 = (_QWORD *)v196[2];
                v11 = *v198 == (_QWORD)v196;
                v196 = v198;
              }
              while (!v11);
            }
            v196 = v198;
          }
          while (v198 != (_QWORD *)(a1 + 448));
        }
        v199 = *(_QWORD *)(a1 + 320);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
        v200 = *(std::__shared_weak_count **)(v199 + 64);
        if (v200)
        {
          __s.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v200);
          if (__s.__r_.__value_.__l.__size_)
            __s.__r_.__value_.__r.__words[0] = *(_QWORD *)(v199 + 56);
        }
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 232, (__int128 *)&__s);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__s);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
    }
    if (*(_QWORD *)(a1 + 432))
      *(_DWORD *)(a1 + 2104) = 0;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading DECODER ", 16);
      v180 = *(_BYTE *)(a1 + 127);
      if (v180 >= 0)
        v181 = a1 + 104;
      else
        v181 = *(_QWORD *)(a1 + 104);
      if (v180 >= 0)
        v182 = *(unsigned __int8 *)(a1 + 127);
      else
        v182 = *(_QWORD *)(a1 + 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, v181, v182);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    v183 = *(_QWORD *)(a1 + 1096);
    memset(v218, 0, sizeof(v218));
    memset(&v217, 0, sizeof(v217));
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(a1 + 104), v183, (uint64_t)v213, v218, &v217, 0, (__int128 *)__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)__p);
    v184 = (std::__shared_weak_count *)__p[0].__begin_;
    if (__p[0].__begin_)
    {
      v185 = &__p[0].__begin_->__r_.__value_.__l.__size_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
  }
  v115 = 1;
LABEL_461:
  if (SHIBYTE(v246) < 0)
    operator delete(v244);
  if (SHIBYTE(v248) < 0)
    operator delete(v247[0]);
  if (SHIBYTE(v250) < 0)
    operator delete(v249[0]);
  if (SHIBYTE(v251[2]) < 0)
    operator delete(v251[0]);
  return v115;
}

void sub_1ADAFA564(_Unwind_Exception *a1)
{
  unint64_t v1;
  unint64_t v2;

  STACK[0x2C0] = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1ADAFA60C(_Unwind_Exception *a1)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x4D0]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1ADAFA624(_Unwind_Exception *a1)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x4D0]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1ADAFA638()
{
  unint64_t v0;

  STACK[0x4D8] = v0;
  JUMPOUT(0x1ADAFA6ACLL);
}

void sub_1ADAFA644()
{
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete((void *)STACK[0x3D0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  JUMPOUT(0x1ADAFA95CLL);
}

void sub_1ADAFA664()
{
  std::pair<std::string,std::string>::~pair((uint64_t)&STACK[0x4D0]);
  JUMPOUT(0x1ADAFA72CLL);
}

void sub_1ADAFA678(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADAFA99CLL);
}

void sub_1ADAFA690()
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  JUMPOUT(0x1ADAFA864);
}

void sub_1ADAFA6C8()
{
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  JUMPOUT(0x1ADAFA95CLL);
}

void sub_1ADAFA6E4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x487]) < 0)
      operator delete((void *)STACK[0x470]);
    if (SLOBYTE(STACK[0x49F]) < 0)
      operator delete((void *)STACK[0x488]);
    if (SLOBYTE(STACK[0x4B7]) < 0)
      operator delete((void *)STACK[0x4A0]);
    if (SLOBYTE(STACK[0x4CF]) < 0)
      operator delete((void *)STACK[0x4B8]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1ADAFA8F8);
}

void sub_1ADAFA6F8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if ((SLOBYTE(STACK[0x457]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x487]) < 0)
      operator delete((void *)STACK[0x470]);
    if (SLOBYTE(STACK[0x49F]) < 0)
      operator delete((void *)STACK[0x488]);
    if (SLOBYTE(STACK[0x4B7]) < 0)
      operator delete((void *)STACK[0x4A0]);
    if (SLOBYTE(STACK[0x4CF]) < 0)
      operator delete((void *)STACK[0x4B8]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1ADAFA8F8);
}

void sub_1ADAFA718()
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&STACK[0x4D0]);
  JUMPOUT(0x1ADAFA72CLL);
}

void sub_1ADAFA728(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1ADAFA744()
{
  if (SLOBYTE(STACK[0x427]) < 0)
    JUMPOUT(0x1ADAFA754);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  JUMPOUT(0x1ADAFA95CLL);
}

void sub_1ADAFA75C()
{
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  if (SLOBYTE(STACK[0x46F]) < 0)
    JUMPOUT(0x1ADAFA8F8);
  JUMPOUT(0x1ADAFA95CLL);
}

void sub_1ADAFA860(_Unwind_Exception *a1)
{
  if ((SLOBYTE(STACK[0x4E7]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x487]) < 0)
      operator delete((void *)STACK[0x470]);
    if (SLOBYTE(STACK[0x49F]) < 0)
      operator delete((void *)STACK[0x488]);
    if (SLOBYTE(STACK[0x4B7]) < 0)
      operator delete((void *)STACK[0x4A0]);
    if (SLOBYTE(STACK[0x4CF]) < 0)
      operator delete((void *)STACK[0x4B8]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1ADAFA8F8);
}

void sub_1ADAFA878()
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x457]) < 0)
    JUMPOUT(0x1ADAFA8F8);
  JUMPOUT(0x1ADAFA95CLL);
}

void sub_1ADAFA880()
{
  JUMPOUT(0x1ADAFA8D8);
}

void sub_1ADAFA888()
{
  JUMPOUT(0x1ADAFA8C8);
}

void sub_1ADAFA894()
{
  if (SLOBYTE(STACK[0x4EF]) < 0)
    operator delete((void *)STACK[0x4D8]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  JUMPOUT(0x1ADAFA8B8);
}

void sub_1ADAFA900()
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x4D0]);
  JUMPOUT(0x1ADAFA94CLL);
}

void sub_1ADAFA92C(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x4D0]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1ADAFA93C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Unwind_Resume(a1);
}

void sub_1ADAFA948()
{
  kaldi::quasar::Vocab::~Vocab((kaldi::quasar::Vocab *)&STACK[0x2C0]);
  kaldi::Input::~Input((kaldi::Input *)&STACK[0x428]);
  JUMPOUT(0x1ADAFA95CLL);
}

void kaldi::quasar::Encdec::ParseEnginePlatform(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void **v37[34];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  kaldi::SplitStringToVector((const std::string *)a1, ":", 1, (uint64_t)&v38);
  v4 = v38;
  switch(0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3))
  {
    case 0uLL:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid empty platform spec.", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    case 1uLL:
      *a2 = 0x100000000;
      v5 = (std::string *)(a2 + 1);
      if ((*(char *)(v4 + 23) & 0x80000000) == 0)
        goto LABEL_49;
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      goto LABEL_50;
    case 2uLL:
      if (*(char *)(v38 + 23) < 0)
      {
        v8 = *(_QWORD *)(v38 + 8);
        if (v8 != 2 || **(_WORD **)v38 != 13637)
        {
          if (v8 != 10)
            goto LABEL_60;
          v6 = *(_WORD **)v38;
          goto LABEL_16;
        }
      }
      else
      {
        if (*(_BYTE *)(v38 + 23) != 2)
        {
          v6 = (_WORD *)v38;
          if (*(_BYTE *)(v38 + 23) != 10)
            goto LABEL_60;
LABEL_16:
          v9 = *(_QWORD *)v6;
          v10 = (unsigned __int16)v6[4];
          if (v9 != 0x6F73736572707345 || v10 != 12630)
          {
LABEL_60:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
            v26 = *(char *)(v38 + 23);
            if (v26 >= 0)
              v27 = v38;
            else
              v27 = *(_QWORD *)v38;
            if (v26 >= 0)
              v28 = *(unsigned __int8 *)(v38 + 23);
            else
              v28 = *(_QWORD *)(v38 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
          }
          *a2 = 0x100000000;
          v5 = (std::string *)(a2 + 1);
          if (*(char *)(v4 + 47) < 0)
            goto LABEL_22;
          goto LABEL_35;
        }
        if (*(_WORD *)v38 != 13637)
          goto LABEL_60;
      }
      *a2 = 0x100000001;
      v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 47) < 0)
      {
LABEL_22:
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
        goto LABEL_50;
      }
LABEL_35:
      v4 += 24;
      goto LABEL_49;
    case 3uLL:
      if ((*(char *)(v38 + 23) & 0x80000000) == 0)
      {
        if (*(_BYTE *)(v38 + 23) != 2)
        {
          v7 = v38;
          if (*(_BYTE *)(v38 + 23) != 10)
            goto LABEL_67;
          goto LABEL_27;
        }
        if (*(_WORD *)v38 != 13637)
          goto LABEL_67;
LABEL_37:
        v16 = 1;
        goto LABEL_38;
      }
      v12 = *(_QWORD *)(v38 + 8);
      if (v12 == 2 && **(_WORD **)v38 == 13637)
        goto LABEL_37;
      if (v12 != 10)
        goto LABEL_67;
      v7 = *(_QWORD *)v38;
LABEL_27:
      v13 = *(_QWORD *)v7;
      v14 = *(unsigned __int16 *)(v7 + 8);
      if (v13 != 0x6F73736572707345 || v14 != 12630)
      {
LABEL_67:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
        v30 = *(char *)(v38 + 23);
        if (v30 >= 0)
          v31 = v38;
        else
          v31 = *(_QWORD *)v38;
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(v38 + 23);
        else
          v32 = *(_QWORD *)(v38 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      v16 = 0;
LABEL_38:
      v17 = (_QWORD *)(v38 + 24);
      v18 = *(char *)(v38 + 47);
      if (v18 < 0)
      {
        if (*(_QWORD *)(v38 + 32) != 4)
          goto LABEL_53;
        v17 = (_QWORD *)*v17;
      }
      else if (v18 != 4)
      {
LABEL_53:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported precision: ", 23);
        v22 = *(char *)(v38 + 47);
        if (v22 >= 0)
          v23 = v38 + 24;
        else
          v23 = *(_QWORD *)(v38 + 24);
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v38 + 47);
        else
          v24 = *(_QWORD *)(v38 + 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      if (*(_DWORD *)v17 == 909201478)
      {
        v19 = 0;
      }
      else
      {
        if (*(_DWORD *)v17 != 842223686)
          goto LABEL_53;
        v19 = 0x100000000;
      }
      *a2 = v19 | v16;
      v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
      }
      else
      {
        v4 += 48;
LABEL_49:
        v20 = *(_OWORD *)v4;
        v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v20;
      }
LABEL_50:
      v37[0] = (void **)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
      return;
    default:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid platform spec: ", 23);
      v34 = *(char *)(a1 + 23);
      if (v34 >= 0)
        v35 = a1;
      else
        v35 = *(_QWORD *)a1;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(a1 + 23);
      else
        v36 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
}

void sub_1ADAFADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::~Vocab(kaldi::quasar::Vocab *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t kaldi::quasar::BPE::Read(uint64_t a1, uint64_t *a2, int a3)
{
  int v6;
  void **v7;
  void *v8;
  int v9;
  void **v11;
  void *v12;
  int v13;
  void **v15;
  void *v16;
  int v17;
  void **v19;
  int v20;
  std::locale::id *v21;
  const std::locale::facet *v22;
  unsigned __int8 v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *locale;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  std::locale v47;
  uint64_t v48;
  unsigned __int8 v49;
  int v50;
  void *__p[2];
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;

  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 24);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 64));
  v53 = 0;
  v54 = 0;
  v55 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v53);
  v6 = HIBYTE(v55);
  if (SHIBYTE(v55) < 0)
  {
    if (v54 != 9)
      goto LABEL_16;
    v7 = v53;
  }
  else
  {
    if (HIBYTE(v55) != 9)
    {
LABEL_11:
      if (v6 != 10)
      {
LABEL_23:
        if (v6 != 9)
        {
LABEL_33:
          if (v6 != 8)
            goto LABEL_79;
          v19 = (void **)&v53;
          goto LABEL_38;
        }
        v15 = (void **)&v53;
        goto LABEL_28;
      }
      v11 = (void **)&v53;
      goto LABEL_18;
    }
    v7 = (void **)&v53;
  }
  v8 = *v7;
  v9 = *((unsigned __int8 *)v7 + 8);
  if (v8 == (void *)0x65646F4D6B6E553CLL && v9 == 62)
  {
    __p[0] = 0;
    __p[1] = 0;
    v52 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)__p);
    *(_DWORD *)(a1 + 184) = kaldi::quasar::BPE::StringToUnkMode((uint64_t)__p);
    kaldi::ReadToken(a2, a3, (uint64_t)&v53);
    if (SHIBYTE(v52) < 0)
      operator delete(__p[0]);
    v6 = HIBYTE(v55);
    if ((v55 & 0x8000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((v55 & 0x8000000000000000) == 0)
  {
    goto LABEL_11;
  }
LABEL_16:
  if (v54 != 10)
    goto LABEL_26;
  v11 = v53;
LABEL_18:
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x656B6F546B6E553CLL && v13 == 15982)
  {
    kaldi::ReadToken(a2, a3, a1 + 192);
    kaldi::ReadToken(a2, a3, (uint64_t)&v53);
    v6 = HIBYTE(v55);
    if ((v55 & 0x8000000000000000) == 0)
      goto LABEL_23;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_23;
  }
LABEL_26:
  if (v54 != 9)
    goto LABEL_36;
  v15 = v53;
LABEL_28:
  v16 = *v15;
  v17 = *((unsigned __int8 *)v15 + 8);
  if (v16 == (void *)0x6E6F69737265563CLL && v17 == 62)
  {
    kaldi::ReadToken(a2, a3, a1 + 216);
    kaldi::ReadToken(a2, a3, (uint64_t)&v53);
    v6 = HIBYTE(v55);
    if ((v55 & 0x8000000000000000) == 0)
      goto LABEL_33;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_33;
  }
LABEL_36:
  if (v54 != 8)
    goto LABEL_79;
  v19 = v53;
LABEL_38:
  if (*v19 != (void *)0x3E6570426D754E3CLL)
  {
LABEL_79:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected to read number of BPE units now, but got ", 50);
    if (v55 >= 0)
      v45 = (void **)&v53;
    else
      v45 = v53;
    if (v55 >= 0)
      v46 = HIBYTE(v55);
    else
      v46 = v54;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v50 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v50);
  if ((a3 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if (v50)
  {
    v20 = 0;
    v21 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v52 = 0;
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v22 = std::locale::use_facet(&v47, v21);
      v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v47);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)__p, v23);
      v24 = *(_QWORD *)(a1 + 72);
      if (v24 >= *(_QWORD *)(a1 + 80))
      {
        v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 64), (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v52) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 72), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v25 = *(_OWORD *)__p;
          *(_QWORD *)(v24 + 16) = v52;
          *(_OWORD *)v24 = v25;
        }
        v26 = v24 + 24;
        *(_QWORD *)(a1 + 72) = v24 + 24;
      }
      *(_QWORD *)(a1 + 72) = v26;
      kaldi::quasar::BPE::ProcessLine(a1, (uint64_t)__p, (float)v20);
      if (SHIBYTE(v52) < 0)
        operator delete(__p[0]);
      ++v20;
    }
    while (v20 != v50);
  }
  kaldi::quasar::BPE::GetUniqueChars((kaldi::quasar::BPE *)a1);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model version: ", 19);
    v28 = *(char *)(a1 + 239);
    v29 = v28 >= 0 ? a1 + 216 : *(_QWORD *)(a1 + 216);
    v30 = v28 >= 0 ? *(unsigned __int8 *)(a1 + 239) : *(_QWORD *)(a1 + 224);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of BPE model entries : ", 25);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" # of chars ", 12);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model unk mode = ", 21);
        kaldi::quasar::BPE::UnkModeToString(*(_DWORD *)(a1 + 184), &v47);
        if ((v49 & 0x80u) == 0)
          locale = &v47;
        else
          locale = v47.__locale_;
        if ((v49 & 0x80u) == 0)
          v34 = v49;
        else
          v34 = v48;
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)locale, v34);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", unk token = ", 14);
        v39 = *(_QWORD *)(a1 + 192);
        v38 = a1 + 192;
        v37 = v39;
        v40 = *(char *)(v38 + 23);
        if (v40 >= 0)
          v41 = v38;
        else
          v41 = v37;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(v38 + 23);
        else
          v42 = *(_QWORD *)(v38 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v41, v42);
        if ((char)v49 < 0)
          operator delete(v47.__locale_);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
    }
  }
  if (SHIBYTE(v55) < 0)
    operator delete(v53);
  return 1;
}

void sub_1ADAFB3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (*(char *)(v6 - 65) < 0)
    operator delete(*(void **)(v6 - 88));
  _Unwind_Resume(a1);
}

void sub_1ADAFB3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1ADAFB3C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 72) = v1;
  JUMPOUT(0x1ADAFB3E0);
}

void sub_1ADAFB3CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  JUMPOUT(0x1ADAFB3E0);
}

uint64_t std::make_unique[abi:ne180100]<kaldi::quasar::Shortlist,std::unique_ptr<kaldi::quasar::ShortlistData>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = operator new();
  v5 = *a1;
  *a1 = 0;
  v7 = v5;
  kaldi::quasar::Shortlist::Shortlist(v4, &v7);
  *a2 = v4;
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void sub_1ADAFB484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 64))(a10);
  MEMORY[0x1AF44D190](v10, 0x1030C40AC6CB4BDLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::LoadSubmodels(uint64_t a1, std::string::size_type a2, std::string::size_type a3)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  const std::string::value_type *v39;
  uint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  int v53;
  const void *v54;
  uint64_t v55;
  uint64_t *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  int v63;
  const void *v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  const void **v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  const void *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  _QWORD *v92;
  __int128 *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  std::string *v101;
  __int128 *v102;
  __int128 v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  BOOL v116;
  _QWORD *v117;
  int v118;
  const std::string::value_type *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  _QWORD *v137;
  int v138;
  const std::string::value_type *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t *v156;
  _QWORD *v157;
  std::string v159;
  std::string v160;
  std::vector<std::wstring> v161;
  uint64_t v162[3];
  std::vector<std::wstring> v163;
  uint64_t v164[3];
  std::vector<std::wstring> v165;
  uint64_t v166[3];
  std::string v167;
  std::string v168;
  __int128 v169;
  std::string v170;
  __int128 v171;
  int64_t v172;
  __int128 *v173[2];

  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 45, (uint64_t)&v170);
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a3;
  else
    v7 = *(const std::string::value_type **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = std::string::append(&v170, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v172 = v9->__r_.__value_.__r.__words[2];
  v171 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v170.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_44;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
    goto LABEL_44;
  }
  v11 = (void **)(a1 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Loading ENCODER ", 16);
      v13 = *(char *)(a1 + 103);
      if (v13 >= 0)
        v14 = a1 + 80;
      else
        v14 = *(_QWORD *)(a1 + 80);
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a1 + 103);
      else
        v15 = *(_QWORD *)(a1 + 88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
    }
    memset(&v170, 0, sizeof(v170));
    v16 = *(_QWORD **)(a1 + 464);
    if (v16 != (_QWORD *)(a1 + 472))
    {
      v17 = 0;
      do
      {
        v18 = (__int128 *)(v16 + 7);
        if ((unint64_t)v17 >= v170.__r_.__value_.__r.__words[2])
        {
          v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v170, v18);
        }
        else
        {
          if (*((char *)v16 + 79) < 0)
          {
            std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v16[7], v16[8]);
          }
          else
          {
            v19 = *v18;
            v17->__r_.__value_.__r.__words[2] = v16[9];
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
          }
          ++v17;
        }
        v170.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
        v20 = (_QWORD *)v16[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v16[2];
            v22 = *v21 == (_QWORD)v16;
            v16 = v21;
          }
          while (!v22);
        }
        v16 = v21;
      }
      while (v21 != (_QWORD *)(a1 + 472));
    }
    v23 = *(_QWORD *)(a1 + 1088);
    memset(&v168, 0, sizeof(v168));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v168, *(__int128 **)(a1 + 880), *(__int128 **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3));
    memset(&v167, 0, sizeof(v167));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v167, (__int128 *)v170.__r_.__value_.__l.__data_, (__int128 *)v170.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170.__r_.__value_.__l.__size_ - v170.__r_.__value_.__r.__words[0]) >> 3));
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(a1 + 80), v23, a1 + 984, (uint64_t *)&v168, (std::vector<std::wstring> *)&v167, *(_BYTE *)(a1 + 1520), &v169);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 152, &v169);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    if (*((_QWORD *)&v169 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v173[0] = (__int128 *)&v167;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
    v173[0] = (__int128 *)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
    v27 = *v11;
    if (*v11)
    *(_BYTE *)(a1 + 488) = v27 != 0;
    v173[0] = &v171;
    v28 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)&v171, (uint64_t)&std::piecewise_construct, v173);
    v29 = v28 + 8;
    std::__tree<std::string>::destroy((uint64_t)(v28 + 7), (char *)v28[8]);
    *(v29 - 1) = v29;
    *v29 = 0;
    v29[1] = 0;
    *(_QWORD *)&v169 = &v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
  }
LABEL_44:
  if (*(_QWORD *)(a1 + 408))
  {
    v30 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 392, (const void **)a3);
    if (a1 + 400 == v30)
    {
      v67 = 0;
      goto LABEL_242;
    }
    *(_QWORD *)&v169 = a3;
    v31 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v169);
    *(_OWORD *)&v170.__r_.__value_.__l.__data_ = 0uLL;
    v32 = (std::__shared_weak_count *)v31[8];
    if (v32)
    {
      v170.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v32);
      if (v170.__r_.__value_.__l.__size_)
        v170.__r_.__value_.__r.__words[0] = v31[7];
    }
    v33 = *(_QWORD *)std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)&v170);
    size = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
    if (!v170.__r_.__value_.__l.__size_)
      goto LABEL_53;
    v35 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if (v33)
        goto LABEL_54;
    }
    else
    {
LABEL_53:
      if (v33)
      {
LABEL_54:
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Using loaded decoder net for: ", 30);
          v38 = *(char *)(a3 + 23);
          if (v38 >= 0)
            v39 = (const std::string::value_type *)a3;
          else
            v39 = *(const std::string::value_type **)a3;
          if (v38 >= 0)
            v40 = *(unsigned __int8 *)(a3 + 23);
          else
            v40 = *(_QWORD *)(a3 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
        }
        if (a1 + 424 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 416, (const void **)a3))
        {
          *(_QWORD *)&v169 = a3;
          v41 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v169);
          *(_OWORD *)&v170.__r_.__value_.__l.__data_ = 0uLL;
          v42 = (std::__shared_weak_count *)v41[8];
          if (v42)
          {
            v170.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v42);
            if (v170.__r_.__value_.__l.__size_)
              v170.__r_.__value_.__r.__words[0] = v41[7];
          }
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)&v170);
          v43 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v44 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (!*(_QWORD *)(a1 + 216))
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v170);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Handover plan required but not loaded!", 38);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v170);
          }
        }
      }
    }
    if (a1 + 448 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 440, (const void **)a2))
    {
      *(_QWORD *)&v169 = a2;
      v46 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 320), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v169);
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = 0uLL;
      v47 = (std::__shared_weak_count *)v46[8];
      if (v47)
      {
        v170.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v47);
        if (v170.__r_.__value_.__l.__size_)
          v170.__r_.__value_.__r.__words[0] = v46[7];
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 232, (__int128 *)&v170);
      v48 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
      if (v170.__r_.__value_.__l.__size_)
      {
        v49 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if (*(_QWORD *)(a1 + 232))
        v51 = kaldi::g_kaldi_verbose_level < 1;
      else
        v51 = 1;
      if (!v51)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Using loaded input net for: ", 28);
        v53 = *(char *)(a2 + 23);
        if (v53 >= 0)
          v54 = (const void *)a2;
        else
          v54 = *(const void **)a2;
        if (v53 >= 0)
          v55 = *(unsigned __int8 *)(a2 + 23);
        else
          v55 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
      }
    }
    if (a1 + 376 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 368, (const void **)&v171))
    {
      *(_QWORD *)&v169 = &v171;
      v56 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)&v171, (uint64_t)&std::piecewise_construct, (__int128 **)&v169);
      *(_OWORD *)&v170.__r_.__value_.__l.__data_ = 0uLL;
      v57 = (std::__shared_weak_count *)v56[8];
      if (v57)
      {
        v170.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v57);
        if (v170.__r_.__value_.__l.__size_)
          v170.__r_.__value_.__r.__words[0] = v56[7];
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 152, (__int128 *)&v170);
      v58 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
      if (v170.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (*(_QWORD *)(a1 + 152))
        v61 = kaldi::g_kaldi_verbose_level < 1;
      else
        v61 = 1;
      if (!v61)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Using loaded encoder for: ", 26);
        v63 = *(char *)(a2 + 23);
        if (v63 >= 0)
          v64 = (const void *)a2;
        else
          v64 = *(const void **)a2;
        if (v63 >= 0)
          v65 = *(unsigned __int8 *)(a2 + 23);
        else
          v65 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v64, v65);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
      }
    }
    if (*(_QWORD *)(a1 + 456))
      v66 = *(_QWORD *)(a1 + 232) == 0;
    else
      v66 = 0;
    v68 = *(_QWORD *)(a1 + 184);
    v69 = (const void **)(a1 + 152);
    v70 = *(_QWORD *)(a1 + 152);
    if (v66 || !v68 || !v70)
    {
      if (!v68)
      {
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
          v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Loading DECODER for '", 21);
          v118 = *(char *)(a3 + 23);
          if (v118 >= 0)
            v119 = (const std::string::value_type *)a3;
          else
            v119 = *(const std::string::value_type **)a3;
          if (v118 >= 0)
            v120 = *(unsigned __int8 *)(a3 + 23);
          else
            v120 = *(_QWORD *)(a3 + 8);
          v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v119, v120);
          v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)": ", 2);
          v123 = *(char *)(v30 + 79);
          if (v123 >= 0)
            v124 = v30 + 56;
          else
            v124 = *(_QWORD *)(v30 + 56);
          if (v123 >= 0)
            v125 = *(unsigned __int8 *)(v30 + 79);
          else
            v125 = *(_QWORD *)(v30 + 64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, v124, v125);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
        }
        v126 = *(_QWORD *)(a1 + 1096);
        memset(v166, 0, sizeof(v166));
        memset(&v165, 0, sizeof(v165));
        kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(v30 + 56), v126, a1 + 1008, v166, &v165, 0, (__int128 *)&v170);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)&v170);
        v127 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
        if (v170.__r_.__value_.__l.__size_)
        {
          v128 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        *(_QWORD *)&v169 = &v165;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
        *(_QWORD *)&v169 = v166;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
        v170.__r_.__value_.__r.__words[0] = a3;
        v130 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v170);
        v132 = *(_QWORD *)(a1 + 184);
        v131 = *(_QWORD *)(a1 + 192);
        if (v131)
        {
          v133 = (unint64_t *)(v131 + 16);
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        v135 = (std::__shared_weak_count *)v130[8];
        v130[7] = v132;
        v130[8] = v131;
        if (v135)
          std::__shared_weak_count::__release_weak(v135);
        v136 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 416, (const void **)a3);
        if (a1 + 424 != v136)
        {
          if (kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
            v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Loading HANDOVER for '", 22);
            v138 = *(char *)(a3 + 23);
            if (v138 >= 0)
              v139 = (const std::string::value_type *)a3;
            else
              v139 = *(const std::string::value_type **)a3;
            if (v138 >= 0)
              v140 = *(unsigned __int8 *)(a3 + 23);
            else
              v140 = *(_QWORD *)(a3 + 8);
            v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v139, v140);
            v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)": ", 2);
            v143 = *(char *)(v136 + 79);
            if (v143 >= 0)
              v144 = v136 + 56;
            else
              v144 = *(_QWORD *)(v136 + 56);
            if (v143 >= 0)
              v145 = *(unsigned __int8 *)(v136 + 79);
            else
              v145 = *(_QWORD *)(v136 + 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v144, v145);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
          }
          v146 = *(_QWORD *)(a1 + 1096);
          memset(v164, 0, sizeof(v164));
          memset(&v163, 0, sizeof(v163));
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(v136 + 56), v146, a1 + 1008, v164, &v163, 0, (__int128 *)&v170);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)&v170);
          v147 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v148 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          *(_QWORD *)&v169 = &v163;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
          *(_QWORD *)&v169 = v164;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
          v170.__r_.__value_.__r.__words[0] = a3;
          v150 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v170);
          v152 = *(_QWORD *)(a1 + 216);
          v151 = *(_QWORD *)(a1 + 224);
          if (v151)
          {
            v153 = (unint64_t *)(v151 + 16);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          v155 = (std::__shared_weak_count *)v150[8];
          v150[7] = v152;
          v150[8] = v151;
          if (v155)
            std::__shared_weak_count::__release_weak(v155);
        }
      }
      if (v66)
      {
        v71 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 440, (const void **)a2);
        if (a1 + 448 != v71)
        {
          if (kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Loading INPUT NET for '", 23);
            v73 = *(char *)(a2 + 23);
            if (v73 >= 0)
              v74 = (const void *)a2;
            else
              v74 = *(const void **)a2;
            if (v73 >= 0)
              v75 = *(unsigned __int8 *)(a2 + 23);
            else
              v75 = *(_QWORD *)(a2 + 8);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v74, v75);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"': ", 3);
            v78 = *(char *)(v71 + 79);
            if (v78 >= 0)
              v79 = v71 + 56;
            else
              v79 = *(_QWORD *)(v71 + 56);
            if (v78 >= 0)
              v80 = *(unsigned __int8 *)(v71 + 79);
            else
              v80 = *(_QWORD *)(v71 + 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
          }
          v81 = *(_QWORD *)(a1 + 1096);
          memset(v162, 0, sizeof(v162));
          memset(&v161, 0, sizeof(v161));
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(v71 + 56), v81, a1 + 1008, v162, &v161, 0, (__int128 *)&v170);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 232, (__int128 *)&v170);
          v82 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
          if (v170.__r_.__value_.__l.__size_)
          {
            v83 = (unint64_t *)(v170.__r_.__value_.__l.__size_ + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          *(_QWORD *)&v169 = &v161;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
          *(_QWORD *)&v169 = v162;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
          v170.__r_.__value_.__r.__words[0] = a2;
          v85 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 320), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v170);
          v87 = *(_QWORD *)(a1 + 232);
          v86 = *(_QWORD *)(a1 + 240);
          if (v86)
          {
            v88 = (unint64_t *)(v86 + 16);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v90 = (std::__shared_weak_count *)v85[8];
          v85[7] = v87;
          v85[8] = v86;
          if (v90)
            std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (!v70)
      {
        v91 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 368, (const void **)&v171);
        if (a1 + 376 != v91)
        {
          if (kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170, 1);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v170, (uint64_t)"Loading ENCODER for '", 21);
            if (v172 >= 0)
              v93 = &v171;
            else
              v93 = (__int128 *)v171;
            if (v172 >= 0)
              v94 = HIBYTE(v172);
            else
              v94 = *((_QWORD *)&v171 + 1);
            v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v93, v94);
            v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"': ", 3);
            v97 = *(char *)(v91 + 79);
            if (v97 >= 0)
              v98 = v91 + 56;
            else
              v98 = *(_QWORD *)(v91 + 56);
            if (v97 >= 0)
              v99 = *(unsigned __int8 *)(v91 + 79);
            else
              v99 = *(_QWORD *)(v91 + 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, v98, v99);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v170);
          }
          memset(&v170, 0, sizeof(v170));
          v100 = *(_QWORD **)(a1 + 464);
          if (v100 != (_QWORD *)(a1 + 472))
          {
            v101 = 0;
            do
            {
              v102 = (__int128 *)(v100 + 7);
              if ((unint64_t)v101 >= v170.__r_.__value_.__r.__words[2])
              {
                v101 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v170, v102);
              }
              else
              {
                if (*((char *)v100 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)v100[7], v100[8]);
                }
                else
                {
                  v103 = *v102;
                  v101->__r_.__value_.__r.__words[2] = v100[9];
                  *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v103;
                }
                ++v101;
              }
              v170.__r_.__value_.__l.__size_ = (std::string::size_type)v101;
              v104 = (_QWORD *)v100[1];
              if (v104)
              {
                do
                {
                  v105 = v104;
                  v104 = (_QWORD *)*v104;
                }
                while (v104);
              }
              else
              {
                do
                {
                  v105 = (_QWORD *)v100[2];
                  v22 = *v105 == (_QWORD)v100;
                  v100 = v105;
                }
                while (!v22);
              }
              v100 = v105;
            }
            while (v105 != (_QWORD *)(a1 + 472));
          }
          v106 = *(_QWORD *)(a1 + 1088);
          memset(&v160, 0, sizeof(v160));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v160, *(__int128 **)(a1 + 880), *(__int128 **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3));
          memset(&v159, 0, sizeof(v159));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v159, (__int128 *)v170.__r_.__value_.__l.__data_, (__int128 *)v170.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170.__r_.__value_.__l.__size_ - v170.__r_.__value_.__r.__words[0]) >> 3));
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (const std::string *)(v91 + 56), v106, a1 + 984, (uint64_t *)&v160, (std::vector<std::wstring> *)&v159, *(_BYTE *)(a1 + 1520), &v169);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 152, &v169);
          v107 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
          if (*((_QWORD *)&v169 + 1))
          {
            v108 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          v173[0] = (__int128 *)&v159;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
          v173[0] = (__int128 *)&v160;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v173);
          v173[0] = &v171;
          v110 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)&v171, (uint64_t)&std::piecewise_construct, v173);
          v112 = *(_QWORD *)(a1 + 152);
          v111 = *(_QWORD *)(a1 + 160);
          if (v111)
          {
            v113 = (unint64_t *)(v111 + 16);
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          v115 = (std::__shared_weak_count *)v110[8];
          v110[7] = v112;
          v110[8] = v111;
          if (v115)
            std::__shared_weak_count::__release_weak(v115);
          if (*v69)
          else
            v116 = 0;
          *(_BYTE *)(a1 + 488) = v116;
          v173[0] = &v171;
          v156 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)&v171, (uint64_t)&std::piecewise_construct, v173);
          v157 = v156 + 8;
          std::__tree<std::string>::destroy((uint64_t)(v156 + 7), (char *)v156[8]);
          *(v157 - 1) = v157;
          *v157 = 0;
          v157[1] = 0;
          *(_QWORD *)&v169 = &v170;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
        }
      }
    }
  }
  v67 = 1;
LABEL_242:
  if (SHIBYTE(v172) < 0)
    operator delete((void *)v171);
  return v67;
}

void sub_1ADAFC410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 96) = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 96));
  *(_QWORD *)(v18 - 96) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 96));
  JUMPOUT(0x1ADAFC560);
}

void sub_1ADAFC514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a46);
  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  _Unwind_Resume(a1);
}

void sub_1ADAFC534(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1ADAFC53C()
{
  JUMPOUT(0x1ADAFC560);
}

void sub_1ADAFC548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
    JUMPOUT(0x1ADAFC57CLL);
  JUMPOUT(0x1ADAFC580);
}

void sub_1ADAFC55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44,uint64_t a45,char a46)
{
  a44 = (void **)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a44);
  JUMPOUT(0x1ADAFC570);
}

BOOL kaldi::quasar::Encdec::SelectSubmodelsToCompile(uint64_t a1, const void **a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  __int128 *v35;
  __int128 *v36;
  unint64_t v37;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  v6 = *(_QWORD **)(a1 + 464);
  v7 = (_QWORD *)(a1 + 472);
  if (v6 != (_QWORD *)(a1 + 472))
  {
    v8 = 0;
    do
    {
      v9 = (__int128 *)(v6 + 7);
      if ((unint64_t)v8 >= v37)
      {
        v8 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v35, v9);
      }
      else
      {
        if (*((char *)v6 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v6[7], v6[8]);
        }
        else
        {
          v10 = *v9;
          v8->__r_.__value_.__r.__words[2] = v6[9];
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
        }
        ++v8;
      }
      v36 = (__int128 *)v8;
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != v7);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (*(_QWORD *)(a1 + 88))
      goto LABEL_17;
  }
  else if (*(_BYTE *)(a1 + 103))
  {
LABEL_17:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting compilation spec for ENCODER ", 37);
      v15 = *(char *)(a1 + 103);
      if (v15 >= 0)
        v16 = a1 + 80;
      else
        v16 = *(_QWORD *)(a1 + 80);
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a1 + 103);
      else
        v17 = *(_QWORD *)(a1 + 88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    v18 = *(_QWORD *)(a1 + 1088);
    memset(&v32, 0, sizeof(v32));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, *(__int128 **)(a1 + 880), *(__int128 **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3));
    memset(&v31, 0, sizeof(v31));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
    kaldi::quasar::Encdec::RegisterEspressoModelForCompilation(a1, (const std::string *)(a1 + 80), v18, a1 + 984, (uint64_t *)&v32, (std::vector<std::string> *)&v31, *(unsigned __int8 *)(a1 + 1520));
    __p[0] = &v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v19 = 1;
    goto LABEL_39;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, 45, (uint64_t)&v30);
  v20 = *(char *)(a3 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a3;
  else
    v21 = *(const std::string::value_type **)a3;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a3 + 23);
  else
    v22 = *(_QWORD *)(a3 + 8);
  v23 = std::string::append(&v30, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v34 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v25 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 368, (const void **)__p);
  v19 = a1 + 376 != v25;
  if (a1 + 376 != v25)
  {
    v26 = *(_QWORD *)(a1 + 1088);
    memset(&v29, 0, sizeof(v29));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, *(__int128 **)(a1 + 880), *(__int128 **)(a1 + 888), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3));
    memset(&v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v35, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3));
    kaldi::quasar::Encdec::RegisterEspressoModelForCompilation(a1, (const std::string *)(v25 + 56), v26, a1 + 984, (uint64_t *)&v29, (std::vector<std::string> *)&v28, *(unsigned __int8 *)(a1 + 1520));
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
LABEL_39:
  __p[0] = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v19;
}

void sub_1ADAFC8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a33 < 0)
    operator delete(__p);
  __p = (void *)(v33 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BPE::StringToUnkMode(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD v7[34];

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (v1 != 4)
    {
      if (v1 != 8)
        goto LABEL_25;
      if (*(_QWORD *)a1 != 0x6B6E753272616863)
      {
        if (*(_QWORD *)a1 != 0x6B6E753264726F77)
        {
          v2 = (_QWORD *)a1;
          if (*(_QWORD *)a1 == 0x72616863706F7264)
            return 3;
LABEL_18:
          if (*v2 == 0x64726F77706F7264)
            return 4;
LABEL_25:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
          v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown unk mode : ", 19);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, a1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
        }
        return 2;
      }
      return 1;
    }
    if (*(_DWORD *)a1 != 1885693291)
      goto LABEL_25;
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == 4 && **(_DWORD **)a1 == 1885693291)
    return 0;
  if (v3 != 8)
    goto LABEL_25;
  if (**(_QWORD **)a1 == 0x6B6E753272616863)
    return 1;
  if (*(_QWORD *)(a1 + 8) != 8)
    goto LABEL_25;
  if (**(_QWORD **)a1 == 0x6B6E753264726F77)
    return 2;
  if (*(_QWORD *)(a1 + 8) != 8)
    goto LABEL_25;
  v2 = *(_QWORD **)a1;
  if (**(_QWORD **)a1 != 0x72616863706F7264)
  {
    if ((v1 & 0x80) == 0)
    {
      v2 = (_QWORD *)a1;
      if (v1 != 8)
        goto LABEL_25;
    }
    goto LABEL_18;
  }
  return 3;
}

uint64_t kaldi::quasar::Encdec::Symbolize(uint64_t a1, __int128 **a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::string __p[12];

  v5 = 552;
  if (a4)
    v5 = 560;
  v6 = 820;
  if (a4)
    v6 = 832;
  v7 = *(_DWORD *)(a1 + v6);
  if (v7 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Unknown label not described in the model");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
    return 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + v5);
  v14 = a3 + 16;
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v15 = *v8;
      __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
    }
    v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 96))(v13, __p);
    if (v16 == -1)
      v17 = v7;
    else
      v17 = v16;
    if (v17 != v7 || (v12 = (v12 + 1), (a5 & 1) == 0))
    {
      v19 = *(_DWORD **)(a3 + 8);
      v18 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *(_DWORD **)a3;
        v22 = ((uint64_t)v19 - *(_QWORD *)a3) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v25);
          v21 = *(_DWORD **)a3;
          v19 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = v17;
        v20 = v27 + 4;
        while (v19 != v21)
        {
          v28 = *--v19;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *(_QWORD *)a3 = v27;
        *(_QWORD *)(a3 + 8) = v20;
        *(_QWORD *)(a3 + 16) = &v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v19 = v17;
        v20 = v19 + 1;
      }
      *(_QWORD *)(a3 + 8) = v20;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v8 = (__int128 *)((char *)v8 + 24);
  }
  while (v8 != v9);
  return v12;
}

void sub_1ADAFCD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::ResetHistoryState(kaldi::quasar::Encdec *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;

  v2 = (_QWORD *)*((_QWORD *)this + 192);
  v3 = (_QWORD *)*((_QWORD *)this + 191);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 192) = v3;
  v6 = *((_QWORD *)this + 195);
  v7 = *((_QWORD *)this + 194);
  while (v6 != v7)
  {
    v6 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1568, v6);
  }
  *((_QWORD *)this + 195) = v7;
  v8 = *((_QWORD *)this + 198);
  v9 = *((_QWORD *)this + 197);
  while (v8 != v9)
  {
    v8 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1592, v8);
  }
  *((_QWORD *)this + 198) = v9;
  v10 = (_QWORD *)*((_QWORD *)this + 201);
  v11 = (_QWORD *)*((_QWORD *)this + 200);
  while (v10 != v11)
  {
    v13 = *--v10;
    v12 = v13;
    *v10 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  *((_QWORD *)this + 201) = v11;
  v14 = (void **)*((_QWORD *)this + 305);
  v15 = (void **)*((_QWORD *)this + 304);
  if (v14 != v15)
  {
    do
    {
      v14 -= 3;
      v16 = v14;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
    while (v14 != v15);
    v14 = (void **)*((_QWORD *)this + 304);
  }
  *((_QWORD *)this + 305) = v15;
  while (v15 != v14)
  {
    v15 -= 3;
    v16 = v15;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
  *((_QWORD *)this + 305) = v14;
}

void kaldi::quasar::Encdec::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  double *v6;
  uint64_t v7;
  clockid_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  void *__p[2];
  char v13;
  _BYTE v14[48];

  v6 = (double *)(a1 + 2256);
  v7 = a1 + 2336;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v14, v6, v7, (__int128 *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 2432);
  v10 = (uint64_t **)(v9 + 24 * a3);
  if (v10 != (uint64_t **)a2)
  {
    v11 = *(uint64_t **)(v9 + 24 * a3 + 8);
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(a2, *v10, v11, ((char *)v11 - (char *)*v10) >> 4);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v14, v8);
}

void sub_1ADAFCF4C(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a16, a2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::SetHistoryState(uint64_t a1, uint64_t **a2, int a3, int a4)
{
  uint64_t result;

  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2432), a4);
  result = *(_QWORD *)(a1 + 2432) + 24 * a3;
  if ((uint64_t **)result != a2)
    return std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void kaldi::quasar::Encdec::Start(uint64_t a1, int a2, const std::string *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t i;
  clockid_t v29;
  _OWORD *v30;
  _OWORD *j;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  _QWORD *v42;
  char v43;
  void **v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 836) = a2;
  v5 = *(std::__shared_weak_count **)(a1 + 160);
  v44 = *(void ***)(a1 + 152);
  v45 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a1 + 176);
  v46 = *(_QWORD *)(a1 + 168);
  v47 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a1 + 192);
  v48 = *(_QWORD *)(a1 + 184);
  v49 = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 208);
  v50 = *(_QWORD *)(a1 + 200);
  v51 = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(a1 + 224);
  v52 = *(_QWORD *)(a1 + 216);
  v53 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a1 + 240);
  v54 = *(_QWORD *)(a1 + 232);
  v55 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = &v39;
  v43 = 0;
  v23 = operator new(0x60uLL);
  v24 = 0;
  v39 = v23;
  v40 = v23;
  v41 = v23 + 6;
  do
  {
    v25 = *(_OWORD *)&(&v44)[2 * v24];
    *v23 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    ++v24;
    ++v23;
  }
  while (v24 != 6);
  v40 = v23;
  for (i = 10; i != -2; i -= 2)
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&(&v44)[i]);
  v30 = v39;
  for (j = v40; v30 != j; ++v30)
  {
    if (*(_QWORD *)v30)
    {
      if (v32)
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)v30 + 1);
        v44 = (void **)v32;
        v45 = v33;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        std::string::operator=((std::string *)(v32 + 352), a3);
        v36 = v45;
        if (v45)
        {
          v37 = (unint64_t *)&v45->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
    }
  }
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 2256), v29);
  v44 = (void **)&v39;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v44);
}

void sub_1ADAFD2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::StartFeedforward(uint64_t a1, uint64_t a2, int a3, int a4)
{
  double *v7;
  _QWORD *v8;
  uint64_t v9;
  kaldi::quasar::ComputeEngineItf **v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _QWORD *v14;
  _OWORD *v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  std::string::size_type v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  clockid_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  std::string::size_type v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  clockid_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string::size_type v100;
  uint64_t v101;
  _QWORD **v102;
  kaldi::quasar::ComputeEngineBufferItf *v103;
  _QWORD *v104;
  std::string *v105;
  std::string::size_type size;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  int v119;
  void **v120;
  int64x2_t *v121;
  int64x2_t v122;
  uint64_t v123;
  int64x2_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  clockid_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  __int128 v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  char *v157;
  char *v158;
  void *v159;
  uint64_t v160;
  _QWORD *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  unint64_t v171;
  __int128 v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  __int128 v180;
  char *v181;
  char *v182;
  void *v183;
  uint64_t v184;
  _QWORD *v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  __int128 v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  __int128 v199;
  char *v200;
  char *v201;
  void *v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  __int128 v208;
  char *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  __int128 v219;
  char *v220;
  char *v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  unint64_t v227;
  unint64_t v228;
  __int128 v229;
  char *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  __int128 v239;
  char *v240;
  char *v241;
  void *v242;
  std::string::size_type v243;
  unint64_t v244;
  unint64_t v245;
  __int128 v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  char *v257;
  char *v258;
  std::string::size_type v259;
  uint64_t *v260;
  uint64_t j;
  uint64_t v262;
  __int128 *v263;
  __int128 *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int64x2_t *v268;
  __int128 v269;
  uint64_t v270;
  unint64_t v271;
  __int128 v272;
  void **v273;
  unint64_t v274;
  unint64_t v275;
  __int128 v276;
  char *v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  __int128 v286;
  char *v287;
  char *v288;
  void **v289;
  char **v290;
  uint64_t v291;
  uint64_t v292;
  int64x2_t *v293;
  void **v294;
  void **v295;
  void **v296;
  unint64_t v297;
  void ***v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  void ***v306;
  char *v307;
  char *v308;
  char *v309;
  __int128 v310;
  char *v311;
  char *v312;
  unint64_t v313;
  unint64_t v314;
  __int128 v315;
  char *v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  __int128 v325;
  char *v326;
  char *v327;
  void *v328;
  char **v329;
  uint64_t v330;
  unint64_t v331;
  void *v332;
  _QWORD *v333;
  void *v334;
  unint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  __int128 v348;
  char *v349;
  char *v350;
  void **v351;
  uint64_t v352;
  void *v353;
  char *v354;
  void *v355;
  char **v356;
  uint64_t v357;
  _DWORD *v358;
  void *v359;
  _QWORD *v360;
  void *v361;
  uint64_t v362;
  _DWORD *v363;
  void *v364;
  unint64_t v365;
  char *v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  uint64_t v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  __int128 v377;
  unint64_t v378;
  char *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  char *v384;
  __int128 v385;
  char *v386;
  char *v387;
  void *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  int v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  int v402;
  int v403;
  uint64_t v404;
  __int128 v405;
  __int128 *v406;
  __int128 v407;
  std::string::size_type v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  std::string::size_type v415;
  unint64_t v416;
  __int128 v417;
  char *v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  char *v422;
  char *v423;
  uint64_t v424;
  __int128 v425;
  char *v426;
  char *v427;
  std::string::size_type v428;
  clockid_t v429;
  _QWORD *v430;
  _QWORD *v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  _QWORD *v436;
  int64x2_t v437;
  kaldi::quasar::ComputeEngineItf **v438;
  uint64_t *v439;
  __int128 __p;
  char *v441;
  char *v442;
  unint64_t *v443;
  std::string v444;
  char *v445;
  unint64_t *v446;
  uint64_t v447;
  std::__shared_weak_count *v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  void *v451;
  int64x2_t *v452;
  int64x2_t *v453;
  int v454;
  void *v455;
  _BYTE *v456;
  int v457;
  void *v458[2];
  char v459;
  char v460;
  char v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  _BYTE v465[48];
  void **v466;
  std::string v467;
  __int128 v468;
  uint64_t v469;

  v469 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Model does not support n-best inputs");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v7 = (double *)(a1 + 2256);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v465, (double *)(a1 + 2256), a1 + 2304, &__p);
  if (SHIBYTE(v441) < 0)
    operator delete((void *)__p);
  v8 = (_QWORD *)(a1 + 152);
  if (*(_QWORD *)(a1 + 152))
    v9 = 152;
  else
    v9 = 232;
  if (*(_QWORD *)(a1 + 152))
    v10 = (kaldi::quasar::ComputeEngineItf **)(a1 + 152);
  else
    v10 = (kaldi::quasar::ComputeEngineItf **)(a1 + 232);
  if (a4)
    kaldi::quasar::Encdec::prepareInputsUsingCustomEmbedding(a1, v10, a2, (uint64_t)&v454);
  else
    kaldi::quasar::Encdec::prepareInputsAndRunEmbeddingPlan(a1, v10, a2, (uint64_t)&v454);
  if (v454)
  {
    v11 = *(_QWORD *)(a1 + v9);
    v13 = v455;
    v12 = v456;
    v14 = operator new(0x10uLL);
    v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 2);
    v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 2);
    *v14 = (int)((v12 - v13) >> 2);
    v14[1] = 1;
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v11 + 56))(&v451, v11, &v467);
    v15 = (_OWORD *)(a1 + 1816);
    if (*(char *)(a1 + 1839) < 0)
    {
      std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1816), *(_QWORD *)(a1 + 1824));
    }
    else
    {
      *(_OWORD *)&v444.__r_.__value_.__l.__data_ = *v15;
      v444.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1832);
    }
    v16 = (char *)v451;
    v451 = 0;
    v445 = v16;
    v17 = v463;
    if (v463 >= v464)
    {
      v21 = (uint64_t)(v463 - v462) >> 5;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v23 = v464 - v462;
      if ((uint64_t)(v464 - v462) >> 4 > v22)
        v22 = v23 >> 4;
      v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v22;
      v443 = &v464;
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v464, v24);
      v26 = &v25[32 * v21];
      *(_QWORD *)&__p = v25;
      *((_QWORD *)&__p + 1) = v26;
      v442 = &v25[32 * v27];
      v28 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *((_QWORD *)v26 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v26 = v28;
      memset(&v444, 0, sizeof(v444));
      v29 = v445;
      v445 = 0;
      *((_QWORD *)v26 + 3) = v29;
      v441 = v26 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v462, &__p);
      v20 = v463;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v18 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *(_QWORD *)(v463 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v17 = v18;
      memset(&v444, 0, sizeof(v444));
      v19 = v445;
      v445 = 0;
      *(_QWORD *)(v17 + 24) = v19;
      v20 = v17 + 32;
    }
    v463 = v20;
    v30 = v445;
    v445 = 0;
    if (v30)
      (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v444.__r_.__value_.__l.__data_);
    v31 = v451;
    v451 = 0;
    if (v31)
      (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
    if (v467.__r_.__value_.__r.__words[0])
    {
      v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
      operator delete(v467.__r_.__value_.__l.__data_);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v463 - 8) + 88))(*(_QWORD *)(v463 - 8));
    if (!*(_DWORD *)(a1 + 1092))
    {
      if (*(_BYTE *)(a1 + 488))
      {
        if (!v460)
        {
          v36 = *(_QWORD *)(a1 + 152);
          v37 = *(_QWORD *)(v463 - 8);
          *(_QWORD *)&__p = v458;
          v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)v458, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v36 + 72))(v36, v37, *(_QWORD *)(*(_QWORD *)v38[7] + 56));
          goto LABEL_60;
        }
        *(_QWORD *)&__p = v458;
        v32 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)v458, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[7];
        (*(void (**)(std::string *__return_ptr, kaldi::quasar::ComputeEngineItf *, _QWORD))(*(_QWORD *)*v10 + 80))(&v467, *v10, *(_QWORD *)(v463 - 8));
        if (*(char *)(a1 + 1839) < 0)
        {
          std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1816), *(_QWORD *)(a1 + 1824));
        }
        else
        {
          *(_OWORD *)&v444.__r_.__value_.__l.__data_ = *v15;
          v444.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1832);
        }
        v39 = v467.__r_.__value_.__r.__words[0];
        v467.__r_.__value_.__r.__words[0] = 0;
        v445 = (char *)v39;
        v40 = v32[2];
        v41 = v32[1];
        if (v41 >= v40)
        {
          v45 = (uint64_t)(v41 - *v32) >> 5;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v47 = v40 - *v32;
          if (v47 >> 4 > v46)
            v46 = v47 >> 4;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
            v48 = 0x7FFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          v443 = (unint64_t *)(v32 + 2);
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v32 + 2), v48);
          v50 = &v49[32 * v45];
          *(_QWORD *)&__p = v49;
          *((_QWORD *)&__p + 1) = v50;
          v442 = &v49[32 * v51];
          v52 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
          *((_QWORD *)v50 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
          *(_OWORD *)v50 = v52;
          memset(&v444, 0, sizeof(v444));
          v53 = v445;
          v445 = 0;
          *((_QWORD *)v50 + 3) = v53;
          v441 = v50 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v32, &__p);
          v44 = v32[1];
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          v42 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
          *(_QWORD *)(v41 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
          *(_OWORD *)v41 = v42;
          v43 = v445;
          v445 = 0;
          memset(&v444, 0, sizeof(v444));
          *(_QWORD *)(v41 + 24) = v43;
          v44 = v41 + 32;
          v32[1] = v41 + 32;
        }
        v32[1] = v44;
        v54 = v445;
        v445 = 0;
        if (v54)
          (*(void (**)(char *))(*(_QWORD *)v54 + 8))(v54);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v444.__r_.__value_.__l.__data_);
        v35 = v467.__r_.__value_.__r.__words[0];
        v467.__r_.__value_.__r.__words[0] = 0;
        if (v35)
          goto LABEL_59;
      }
      else
      {
        (*(void (**)(__int128 *__return_ptr, kaldi::quasar::ComputeEngineItf *, _QWORD))(*(_QWORD *)*v10
                                                                                                  + 80))(&__p, *v10, *(_QWORD *)(v463 - 8));
        v33 = __p;
        *(_QWORD *)&__p = 0;
        v34 = *(_QWORD *)(v463 - 8);
        *(_QWORD *)(v463 - 8) = v33;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        v35 = __p;
        *(_QWORD *)&__p = 0;
        if (v35)
LABEL_59:
          (*(void (**)(std::string::size_type))(*(_QWORD *)v35 + 8))(v35);
      }
    }
  }
LABEL_60:
  if (*(_QWORD *)(a1 + 336))
  {
    if (*(_BYTE *)(a1 + 488))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cannot use ModelChain prepare run with input net", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v444, "");
    v438 = v10;
    v55 = v9;
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, (double *)(a1 + 2256), a1 + 2320, (__int128 *)&v444);
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v444.__r_.__value_.__l.__data_);
    v56 = *(_QWORD *)(a1 + 232);
    v57 = (_OWORD *)(a1 + 1960);
    if (*(char *)(a1 + 1983) < 0)
    {
      std::string::__init_copy_ctor_external(&v467, *(const std::string::value_type **)(a1 + 1960), *(_QWORD *)(a1 + 1968));
    }
    else
    {
      *(_OWORD *)&v467.__r_.__value_.__l.__data_ = *v57;
      v467.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1976);
    }
    memset(&v444, 0, sizeof(v444));
    v451 = &v444;
    LOBYTE(v452) = 0;
    v444.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v444.__r_.__value_.__l.__size_ = v444.__r_.__value_.__r.__words[0];
    v444.__r_.__value_.__r.__words[2] = v444.__r_.__value_.__r.__words[0] + 24;
    v444.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v444.__r_.__value_.__r.__words[2], (__int128 *)&v467, &v468, (std::string *)v444.__r_.__value_.__l.__data_);
    v451 = 0;
    v452 = 0;
    v453 = 0;
    (*(void (**)(uint64_t, uint64_t *, std::string *, void **, uint64_t))(*(_QWORD *)v56 + 120))(v56, &v462, &v444, &v451, a1 + 1528);
    v466 = &v451;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v466);
    v451 = &v444;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v451);
    if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v467.__r_.__value_.__l.__data_);
    if (*v8)
    {
      v60 = v462;
      for (i = v463;
            i != v60;
            std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v464, i))
      {
        i -= 32;
      }
      v463 = v60;
      v61 = *(uint64_t **)(a1 + 1528);
      if (*(char *)(a1 + 1983) < 0)
      {
        std::string::__init_copy_ctor_external(&v467, *(const std::string::value_type **)(a1 + 1960), *(_QWORD *)(a1 + 1968));
      }
      else
      {
        *(_OWORD *)&v467.__r_.__value_.__l.__data_ = *v57;
        v467.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1976);
      }
      v62 = *v61;
      *v61 = 0;
      *(_QWORD *)&v468 = v62;
      v63 = v463;
      if (v463 >= v464)
      {
        v67 = (uint64_t)(v463 - v462) >> 5;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v69 = v464 - v462;
        if ((uint64_t)(v464 - v462) >> 4 > v68)
          v68 = v69 >> 4;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFE0)
          v70 = 0x7FFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        v446 = &v464;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v464, v70);
        v72 = (std::string::size_type)&v71[32 * v67];
        v444.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
        v444.__r_.__value_.__l.__size_ = v72;
        v445 = &v71[32 * v73];
        v74 = *(_OWORD *)&v467.__r_.__value_.__l.__data_;
        *(_QWORD *)(v72 + 16) = *((_QWORD *)&v467.__r_.__value_.__l + 2);
        *(_OWORD *)v72 = v74;
        memset(&v467, 0, sizeof(v467));
        v75 = v468;
        *(_QWORD *)&v468 = 0;
        *(_QWORD *)(v72 + 24) = v75;
        v444.__r_.__value_.__r.__words[2] = v72 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v462, &v444);
        v66 = v463;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v444.__r_.__value_.__l.__data_);
      }
      else
      {
        v64 = *(_OWORD *)&v467.__r_.__value_.__l.__data_;
        *(_QWORD *)(v463 + 16) = *((_QWORD *)&v467.__r_.__value_.__l + 2);
        *(_OWORD *)v63 = v64;
        memset(&v467, 0, sizeof(v467));
        v65 = v468;
        *(_QWORD *)&v468 = 0;
        *(_QWORD *)(v63 + 24) = v65;
        v66 = v63 + 32;
      }
      v463 = v66;
      v76 = v468;
      *(_QWORD *)&v468 = 0;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v467.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v58);
    v9 = v55;
    v10 = v438;
    v7 = (double *)(a1 + 2256);
  }
  if (*v8)
  {
    if (*(_QWORD *)(a1 + 880) == *(_QWORD *)(a1 + 888))
    {
      std::string::basic_string[abi:ne180100]<0>(&v444, "");
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v7, a1 + 2312, (__int128 *)&v444);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v444.__r_.__value_.__l.__data_);
      v98 = *(_QWORD *)(a1 + v9);
      memset(&v444, 0, sizeof(v444));
      (*(void (**)(uint64_t, uint64_t *, uint64_t, std::string *, uint64_t))(*(_QWORD *)v98 + 120))(v98, &v462, a1 + 1696, &v444, a1 + 1528);
    }
    else
    {
      if (*(_BYTE *)(a1 + 488))
      {
        if (v460)
        {
          v77 = operator new(0x30uLL);
          v77[2] = 0;
          *v77 = &unk_1E5D457E8;
          v77[1] = 0;
          v77[4] = 0;
          v77[5] = 0;
          v77[3] = 0;
          *(_QWORD *)&__p = v77 + 3;
          *((_QWORD *)&__p + 1) = v77;
          v444.__r_.__value_.__r.__words[0] = (std::string::size_type)v458;
          v78 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1648), (const void **)v458, (uint64_t)&std::piecewise_construct, (__int128 **)&v444);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v78 + 7), &__p);
          v79 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
        }
        if (v461)
        {
          v82 = *(_QWORD *)(a1 + v9);
          *(_QWORD *)&__p = v458;
          v83 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)v458, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          v84 = v83[8];
          v449 = v83[7];
          v450 = (std::__shared_weak_count *)v84;
          if (v84)
          {
            v85 = (unint64_t *)(v84 + 8);
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          __p = 0uLL;
          v441 = 0;
          v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v458;
          v87 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1648), (const void **)v458, (uint64_t)&std::piecewise_construct, (__int128 **)&v467);
          v88 = v87[8];
          v447 = v87[7];
          v448 = (std::__shared_weak_count *)v88;
          if (v88)
          {
            v89 = (unint64_t *)(v88 + 8);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          (*(void (**)(uint64_t, void **, uint64_t *, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v82 + 160))(v82, v458, &v449, a1 + 1696, &__p, &v447);
          v91 = v448;
          if (v448)
          {
            p_shared_owners = (unint64_t *)&v448->__shared_owners_;
            do
              v93 = __ldaxr(p_shared_owners);
            while (__stlxr(v93 - 1, p_shared_owners));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v444.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v444);
          v94 = v450;
          if (v450)
          {
            v95 = (unint64_t *)&v450->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v444, "");
        kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v7, a1 + 2312, (__int128 *)&v444);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v444.__r_.__value_.__l.__data_);
        (*(void (**)(kaldi::quasar::ComputeEngineItf *, void **))(*(_QWORD *)*v10 + 168))(*v10, v458);
        goto LABEL_125;
      }
      std::string::basic_string[abi:ne180100]<0>(&v444, "");
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v7, a1 + 2312, (__int128 *)&v444);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v444.__r_.__value_.__l.__data_);
      v99 = *(_QWORD *)(a1 + v9);
      memset(&v444, 0, sizeof(v444));
      (*(void (**)(uint64_t, void **, uint64_t *, uint64_t, std::string *, uint64_t))(*(_QWORD *)v99 + 144))(v99, v458, &v462, a1 + 1696, &v444, a1 + 1528);
    }
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v467);
LABEL_125:
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v97);
  }
  if (*(_QWORD *)(a1 + 312))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v444, v7, a1 + 2328, &__p);
    if (SHIBYTE(v441) < 0)
      operator delete((void *)__p);
    v100 = 0;
    v451 = 0;
    v452 = 0;
    v453 = 0;
    if (*(_DWORD *)(a1 + 1092)
      || ((v101 = *(_QWORD *)(a1 + v9), !*(_BYTE *)(a1 + 488))
        ? (v102 = (_QWORD **)(a1 + 1528))
        : (*(_QWORD *)&__p = v458,
           v102 = (_QWORD **)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1648), (const void **)v458, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[7]), (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v101 + 88))(&v467, v101, **v102), v100 = v467.__r_.__value_.__r.__words[0], v103 = (kaldi::quasar::ComputeEngineBufferItf *)v467.__r_.__value_.__r.__words[0], *(_DWORD *)(a1 + 1092)))
    {
      v103 = **(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 1528);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encoder Out: ", 13);
      kaldi::quasar::ComputeEngineBufferItf::GetShapeString(v103, &v467);
      if ((v467.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = &v467;
      else
        v105 = (std::string *)v467.__r_.__value_.__r.__words[0];
      if ((v467.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v467.__r_.__value_.__r.__words[2]);
      else
        size = v467.__r_.__value_.__l.__size_;
      v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v105, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" [ ", 3);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)v103 + 112))(v103, 0);
      v108 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v103 + 112))(v103, 1);
      v109 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v103 + 112))(v103, 2);
      v110 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)" ...", 4);
      if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v467.__r_.__value_.__l.__data_);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if ((*(unsigned int (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v103 + 152))(v103) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v103 + 152))(v103);
      v436 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v436, (uint64_t)" for encoder output", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    v111 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)v103 + 160))(v103, 0);
    v112 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v103 + 160))(v103, 1);
    v113 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v103 + 160))(v103, 2);
    v114 = *(_QWORD *)(a1 + 216);
    v115 = v457;
    v116 = operator new(0x18uLL);
    *((_QWORD *)&__p + 1) = v116 + 3;
    v441 = (char *)(v116 + 3);
    *v116 = v111;
    v116[1] = v115;
    v116[2] = v113;
    *(_QWORD *)&__p = v116;
    (*(void (**)(void ***__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v114 + 56))(&v466, v114, &__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v111 >= 1)
    {
      v117 = 0;
      v118 = 0;
      v119 = 0;
      do
      {
        (*((void (**)(void **, kaldi::quasar::ComputeEngineBufferItf *, uint64_t, _QWORD, _QWORD))*v466 + 9))(v466, v103, v117, ((v118 + v457) * v113), (v119 * v457));
        v119 += v113;
        v118 += v112;
        v117 = (v117 + v112 * v113);
        --v111;
      }
      while (v111);
    }
    if (*(char *)(a1 + 1695) < 0)
      std::string::__init_copy_ctor_external(&v467, *(const std::string::value_type **)(a1 + 1672), *(_QWORD *)(a1 + 1680));
    else
      v467 = *(std::string *)(a1 + 1672);
    v120 = v466;
    v466 = 0;
    *(_QWORD *)&v468 = v120;
    v121 = v452;
    if (v452 >= v453)
    {
      v125 = ((char *)v452 - (_BYTE *)v451) >> 5;
      v126 = v125 + 1;
      if ((unint64_t)(v125 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v127 = (char *)v453 - (_BYTE *)v451;
      if (((char *)v453 - (_BYTE *)v451) >> 4 > v126)
        v126 = v127 >> 4;
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFE0)
        v128 = 0x7FFFFFFFFFFFFFFLL;
      else
        v128 = v126;
      v443 = (unint64_t *)&v453;
      v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v453, v128);
      v130 = &v129[32 * v125];
      *(_QWORD *)&__p = v129;
      *((_QWORD *)&__p + 1) = v130;
      v442 = &v129[32 * v131];
      v132 = *(_OWORD *)&v467.__r_.__value_.__l.__data_;
      *((_QWORD *)v130 + 2) = *((_QWORD *)&v467.__r_.__value_.__l + 2);
      *(_OWORD *)v130 = v132;
      memset(&v467, 0, sizeof(v467));
      v133 = v468;
      *(_QWORD *)&v468 = 0;
      *((_QWORD *)v130 + 3) = v133;
      v441 = v130 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v451, &__p);
      v124 = v452;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v122 = *(int64x2_t *)&v467.__r_.__value_.__l.__data_;
      v452[1].i64[0] = v467.__r_.__value_.__r.__words[2];
      *v121 = v122;
      memset(&v467, 0, sizeof(v467));
      v123 = v468;
      *(_QWORD *)&v468 = 0;
      v121[1].i64[1] = v123;
      v124 = v121 + 2;
    }
    v452 = v124;
    v134 = v468;
    *(_QWORD *)&v468 = 0;
    if (v134)
      (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
    if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v467.__r_.__value_.__l.__data_);
    v135 = *(_QWORD *)(a1 + 216);
    __p = 0uLL;
    v441 = 0;
    (*(void (**)(uint64_t, void **, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v135 + 120))(v135, &v451, a1 + 2056, &__p, a1 + 1528);
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v467);
    v136 = v466;
    v466 = 0;
    if (v136)
      (*((void (**)(void **))*v136 + 1))(v136);
    if (v100)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v100 + 8))(v100);
    *(_QWORD *)&__p = &v451;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v444, v137);
  }
  v439 = (uint64_t *)(a1 + 1552);
  *(_DWORD *)(a1 + 2132) = (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552)) >> 5;
  if (!*(_BYTE *)(a1 + 1508))
  {
    v140 = *(_QWORD *)(a1 + 184);
    v141 = operator new(8uLL);
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
    *v141 = 1;
    v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v141 + 1);
    v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v141 + 1);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v140 + 56))(&v451, v140, &v467);
    if (*(char *)(a1 + 1791) < 0)
      std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1768), *(_QWORD *)(a1 + 1776));
    else
      v444 = *(std::string *)(a1 + 1768);
    v170 = (char *)v451;
    v451 = 0;
    v445 = v170;
    v163 = *(_QWORD *)(a1 + 1560);
    v171 = *(_QWORD *)(a1 + 1568);
    if (v163 >= v171)
    {
      v165 = (uint64_t)(v163 - *v439) >> 5;
      v175 = v165 + 1;
      if ((unint64_t)(v165 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v167 = a1 + 1568;
      v176 = v171 - *v439;
      if (v176 >> 4 > v175)
        v175 = v176 >> 4;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFE0)
        v169 = 0x7FFFFFFFFFFFFFFLL;
      else
        v169 = v175;
      goto LABEL_214;
    }
LABEL_207:
    v172 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
    *(_QWORD *)(v163 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
    *(_OWORD *)v163 = v172;
    memset(&v444, 0, sizeof(v444));
    v173 = v445;
    v445 = 0;
    *(_QWORD *)(v163 + 24) = v173;
    v174 = v163 + 32;
    *(_QWORD *)(a1 + 1560) = v163 + 32;
    goto LABEL_215;
  }
  v138 = *(_QWORD *)(a1 + 184);
  v139 = operator new(8uLL);
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
  *v139 = 1;
  v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v139 + 1);
  v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v139 + 1);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v138 + 56))(&v451, v138, &v467);
  if (*(char *)(a1 + 1767) < 0)
    std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1744), *(_QWORD *)(a1 + 1752));
  else
    v444 = *(std::string *)(a1 + 1744);
  v142 = (char *)v451;
  v451 = 0;
  v445 = v142;
  v143 = *(_QWORD *)(a1 + 1584);
  v144 = *(_QWORD *)(a1 + 1592);
  if (v143 >= v144)
  {
    v148 = *(_QWORD *)(a1 + 1576);
    v149 = (uint64_t)(v143 - v148) >> 5;
    v150 = v149 + 1;
    if ((unint64_t)(v149 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v151 = v144 - v148;
    if (v151 >> 4 > v150)
      v150 = v151 >> 4;
    if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFE0)
      v152 = 0x7FFFFFFFFFFFFFFLL;
    else
      v152 = v150;
    v443 = (unint64_t *)(a1 + 1592);
    v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1592, v152);
    v154 = &v153[32 * v149];
    *(_QWORD *)&__p = v153;
    *((_QWORD *)&__p + 1) = v154;
    v442 = &v153[32 * v155];
    v156 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
    *((_QWORD *)v154 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
    *(_OWORD *)v154 = v156;
    memset(&v444, 0, sizeof(v444));
    v157 = v445;
    v445 = 0;
    *((_QWORD *)v154 + 3) = v157;
    v441 = v154 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1576), &__p);
    v147 = *(_QWORD *)(a1 + 1584);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    v145 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
    *(_QWORD *)(v143 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
    *(_OWORD *)v143 = v145;
    memset(&v444, 0, sizeof(v444));
    v146 = v445;
    v445 = 0;
    *(_QWORD *)(v143 + 24) = v146;
    v147 = v143 + 32;
    *(_QWORD *)(a1 + 1584) = v143 + 32;
  }
  *(_QWORD *)(a1 + 1584) = v147;
  v158 = v445;
  v445 = 0;
  if (v158)
    (*(void (**)(char *))(*(_QWORD *)v158 + 8))(v158);
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v444.__r_.__value_.__l.__data_);
  v159 = v451;
  v451 = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  if (v467.__r_.__value_.__r.__words[0])
  {
    v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
    operator delete(v467.__r_.__value_.__l.__data_);
  }
  v160 = *(_QWORD *)(a1 + 184);
  v161 = operator new(8uLL);
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
  *v161 = 1;
  v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v161 + 1);
  v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v161 + 1);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v160 + 56))(&v451, v160, &v467);
  if (*(char *)(a1 + 1959) < 0)
    std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1936), *(_QWORD *)(a1 + 1944));
  else
    v444 = *(std::string *)(a1 + 1936);
  v162 = (char *)v451;
  v451 = 0;
  v445 = v162;
  v163 = *(_QWORD *)(a1 + 1560);
  v164 = *(_QWORD *)(a1 + 1568);
  if (v163 < v164)
    goto LABEL_207;
  v165 = (uint64_t)(v163 - *v439) >> 5;
  v166 = v165 + 1;
  if ((unint64_t)(v165 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v167 = a1 + 1568;
  v168 = v164 - *v439;
  if (v168 >> 4 > v166)
    v166 = v168 >> 4;
  if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFE0)
    v169 = 0x7FFFFFFFFFFFFFFLL;
  else
    v169 = v166;
LABEL_214:
  v443 = (unint64_t *)(a1 + 1568);
  v177 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v167, v169);
  v178 = &v177[32 * v165];
  *(_QWORD *)&__p = v177;
  *((_QWORD *)&__p + 1) = v178;
  v442 = &v177[32 * v179];
  v180 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
  *((_QWORD *)v178 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
  *(_OWORD *)v178 = v180;
  memset(&v444, 0, sizeof(v444));
  v181 = v445;
  v445 = 0;
  *((_QWORD *)v178 + 3) = v181;
  v441 = v178 + 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
  v174 = *(_QWORD *)(a1 + 1560);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
LABEL_215:
  *(_QWORD *)(a1 + 1560) = v174;
  v182 = v445;
  v445 = 0;
  if (v182)
    (*(void (**)(char *))(*(_QWORD *)v182 + 8))(v182);
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v444.__r_.__value_.__l.__data_);
  v183 = v451;
  v451 = 0;
  if (v183)
    (*(void (**)(void *))(*(_QWORD *)v183 + 8))(v183);
  if (v467.__r_.__value_.__r.__words[0])
  {
    v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
    operator delete(v467.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 2136) = (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552)) >> 5;
  if (*(_BYTE *)(a1 + 1515))
  {
    v184 = *(_QWORD *)(a1 + 184);
    v185 = operator new(8uLL);
    v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
    *v185 = 1;
    v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v185 + 1);
    v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v185 + 1);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v184 + 56))(&v451, v184, &v467);
    if (*(char *)(a1 + 1863) < 0)
      std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1840), *(_QWORD *)(a1 + 1848));
    else
      v444 = *(std::string *)(a1 + 1840);
    v186 = (char *)v451;
    v451 = 0;
    v445 = v186;
    v187 = *(_QWORD *)(a1 + 1560);
    v188 = *(_QWORD *)(a1 + 1568);
    if (v187 >= v188)
    {
      v192 = (uint64_t)(v187 - *v439) >> 5;
      v193 = v192 + 1;
      if ((unint64_t)(v192 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v194 = v188 - *v439;
      if (v194 >> 4 > v193)
        v193 = v194 >> 4;
      if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFE0)
        v195 = 0x7FFFFFFFFFFFFFFLL;
      else
        v195 = v193;
      v443 = (unint64_t *)(a1 + 1568);
      v196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v195);
      v197 = &v196[32 * v192];
      *(_QWORD *)&__p = v196;
      *((_QWORD *)&__p + 1) = v197;
      v442 = &v196[32 * v198];
      v199 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *((_QWORD *)v197 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v197 = v199;
      memset(&v444, 0, sizeof(v444));
      v200 = v445;
      v445 = 0;
      *((_QWORD *)v197 + 3) = v200;
      v441 = v197 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
      v191 = *(_QWORD *)(a1 + 1560);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v189 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *(_QWORD *)(v187 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v187 = v189;
      memset(&v444, 0, sizeof(v444));
      v190 = v445;
      v445 = 0;
      *(_QWORD *)(v187 + 24) = v190;
      v191 = v187 + 32;
      *(_QWORD *)(a1 + 1560) = v187 + 32;
    }
    *(_QWORD *)(a1 + 1560) = v191;
    v201 = v445;
    v445 = 0;
    if (v201)
      (*(void (**)(char *))(*(_QWORD *)v201 + 8))(v201);
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v444.__r_.__value_.__l.__data_);
    v202 = v451;
    v451 = 0;
    if (v202)
      (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
    if (v467.__r_.__value_.__r.__words[0])
    {
      v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
      operator delete(v467.__r_.__value_.__l.__data_);
    }
    if (*(_BYTE *)(a1 + 1508))
    {
      v203 = *(_QWORD *)(a1 + 184);
      v204 = operator new(8uLL);
      v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
      *v204 = 1;
      v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v204 + 1);
      v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v204 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v203 + 56))(&v451, v203, &v467);
      if (*(char *)(a1 + 1815) < 0)
        std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1792), *(_QWORD *)(a1 + 1800));
      else
        v444 = *(std::string *)(a1 + 1792);
      v205 = (char *)v451;
      v451 = 0;
      v445 = v205;
      v206 = *(_QWORD *)(a1 + 1584);
      v207 = *(_QWORD *)(a1 + 1592);
      if (v206 >= v207)
      {
        v211 = *(_QWORD *)(a1 + 1576);
        v212 = (uint64_t)(v206 - v211) >> 5;
        v213 = v212 + 1;
        if ((unint64_t)(v212 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v214 = v207 - v211;
        if (v214 >> 4 > v213)
          v213 = v214 >> 4;
        if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFE0)
          v215 = 0x7FFFFFFFFFFFFFFLL;
        else
          v215 = v213;
        v443 = (unint64_t *)(a1 + 1592);
        v216 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1592, v215);
        v217 = &v216[32 * v212];
        *(_QWORD *)&__p = v216;
        *((_QWORD *)&__p + 1) = v217;
        v442 = &v216[32 * v218];
        v219 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
        *((_QWORD *)v217 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
        *(_OWORD *)v217 = v219;
        memset(&v444, 0, sizeof(v444));
        v220 = v445;
        v445 = 0;
        *((_QWORD *)v217 + 3) = v220;
        v441 = v217 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1576), &__p);
        v210 = *(_QWORD *)(a1 + 1584);
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
      }
      else
      {
        v208 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
        *(_QWORD *)(v206 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
        *(_OWORD *)v206 = v208;
        memset(&v444, 0, sizeof(v444));
        v209 = v445;
        v445 = 0;
        *(_QWORD *)(v206 + 24) = v209;
        v210 = v206 + 32;
        *(_QWORD *)(a1 + 1584) = v206 + 32;
      }
      *(_QWORD *)(a1 + 1584) = v210;
      v221 = v445;
      v445 = 0;
      if (v221)
        (*(void (**)(char *))(*(_QWORD *)v221 + 8))(v221);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v444.__r_.__value_.__l.__data_);
      v222 = v451;
      v451 = 0;
      if (v222)
        (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
      if (v467.__r_.__value_.__r.__words[0])
      {
        v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
        operator delete(v467.__r_.__value_.__l.__data_);
      }
    }
  }
  v223 = (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552)) >> 5;
  *(_DWORD *)(a1 + 2144) = v223;
  if (*(char *)(a1 + 1887) < 0)
  {
    if (!*(_QWORD *)(a1 + 1872))
      goto LABEL_290;
  }
  else if (!*(_BYTE *)(a1 + 1887))
  {
    goto LABEL_290;
  }
  v224 = *(_QWORD *)(a1 + 184);
  v225 = operator new(8uLL);
  v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v225;
  *v225 = 1;
  v467.__r_.__value_.__l.__size_ = (std::string::size_type)(v225 + 1);
  v467.__r_.__value_.__r.__words[2] = (std::string::size_type)(v225 + 1);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v224 + 56))(&v451, v224, &v467);
  if (*(char *)(a1 + 1887) < 0)
    std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1864), *(_QWORD *)(a1 + 1872));
  else
    v444 = *(std::string *)(a1 + 1864);
  v226 = (char *)v451;
  v451 = 0;
  v445 = v226;
  v227 = *(_QWORD *)(a1 + 1560);
  v228 = *(_QWORD *)(a1 + 1568);
  if (v227 >= v228)
  {
    v232 = (uint64_t)(v227 - *v439) >> 5;
    v233 = v232 + 1;
    if ((unint64_t)(v232 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v234 = v228 - *v439;
    if (v234 >> 4 > v233)
      v233 = v234 >> 4;
    if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFE0)
      v235 = 0x7FFFFFFFFFFFFFFLL;
    else
      v235 = v233;
    v443 = (unint64_t *)(a1 + 1568);
    v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v235);
    v237 = &v236[32 * v232];
    *(_QWORD *)&__p = v236;
    *((_QWORD *)&__p + 1) = v237;
    v442 = &v236[32 * v238];
    v239 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
    *((_QWORD *)v237 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
    *(_OWORD *)v237 = v239;
    memset(&v444, 0, sizeof(v444));
    v240 = v445;
    v445 = 0;
    *((_QWORD *)v237 + 3) = v240;
    v441 = v237 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
    v231 = *(_QWORD *)(a1 + 1560);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    v229 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
    *(_QWORD *)(v227 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
    *(_OWORD *)v227 = v229;
    memset(&v444, 0, sizeof(v444));
    v230 = v445;
    v445 = 0;
    *(_QWORD *)(v227 + 24) = v230;
    v231 = v227 + 32;
    *(_QWORD *)(a1 + 1560) = v227 + 32;
  }
  *(_QWORD *)(a1 + 1560) = v231;
  v241 = v445;
  v445 = 0;
  if (v241)
    (*(void (**)(char *))(*(_QWORD *)v241 + 8))(v241);
  if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v444.__r_.__value_.__l.__data_);
  v242 = v451;
  v451 = 0;
  if (v242)
    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
  if (v467.__r_.__value_.__r.__words[0])
  {
    v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
    operator delete(v467.__r_.__value_.__l.__data_);
  }
  v223 = (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552)) >> 5;
LABEL_290:
  *(_DWORD *)(a1 + 2140) = v223;
  if (*(_QWORD *)(a1 + 2240) && !*(_BYTE *)(a1 + 1506) && !*(_BYTE *)(a1 + 1507))
  {
    if (!*(_BYTE *)(a1 + 1509))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso shortlist models require active shortlist!", 51);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 184) + 16))(&v467);
    if (*(char *)(a1 + 1911) < 0)
      std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)(a1 + 1888), *(_QWORD *)(a1 + 1896));
    else
      v444 = *(std::string *)(a1 + 1888);
    v243 = v467.__r_.__value_.__r.__words[0];
    v467.__r_.__value_.__r.__words[0] = 0;
    v445 = (char *)v243;
    v244 = *(_QWORD *)(a1 + 1560);
    v245 = *(_QWORD *)(a1 + 1568);
    if (v244 >= v245)
    {
      v249 = (uint64_t)(v244 - *v439) >> 5;
      v250 = v249 + 1;
      if ((unint64_t)(v249 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v251 = v245 - *v439;
      if (v251 >> 4 > v250)
        v250 = v251 >> 4;
      if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFE0)
        v252 = 0x7FFFFFFFFFFFFFFLL;
      else
        v252 = v250;
      v443 = (unint64_t *)(a1 + 1568);
      v253 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v252);
      v254 = &v253[32 * v249];
      *(_QWORD *)&__p = v253;
      *((_QWORD *)&__p + 1) = v254;
      v442 = &v253[32 * v255];
      v256 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *((_QWORD *)v254 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v254 = v256;
      memset(&v444, 0, sizeof(v444));
      v257 = v445;
      v445 = 0;
      *((_QWORD *)v254 + 3) = v257;
      v441 = v254 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
      v248 = *(_QWORD *)(a1 + 1560);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v246 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *(_QWORD *)(v244 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v244 = v246;
      memset(&v444, 0, sizeof(v444));
      v247 = v445;
      v445 = 0;
      *(_QWORD *)(v244 + 24) = v247;
      v248 = v244 + 32;
      *(_QWORD *)(a1 + 1560) = v244 + 32;
    }
    *(_QWORD *)(a1 + 1560) = v248;
    v258 = v445;
    v445 = 0;
    if (v258)
      (*(void (**)(char *))(*(_QWORD *)v258 + 8))(v258);
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v444.__r_.__value_.__l.__data_);
    v259 = v467.__r_.__value_.__r.__words[0];
    v467.__r_.__value_.__r.__words[0] = 0;
    if (v259)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v259 + 8))(v259);
  }
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2432), 1uLL);
  v260 = *(uint64_t **)(a1 + 2432);
  v262 = *v260;
  for (j = v260[1]; j != v262; j = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](j - 16))
    ;
  v260[1] = v262;
  *(_DWORD *)(a1 + 2112) = (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552)) >> 5;
  v263 = *(__int128 **)(a1 + 2080);
  v264 = *(__int128 **)(a1 + 2088);
  if (v263 != v264)
  {
    v437 = vdupq_n_s64(1uLL);
    do
    {
      if (*(_BYTE *)(a1 + 2460))
      {
        v265 = *(int *)(a1 + 2456);
        LODWORD(__p) = 0;
        std::vector<float>::vector(&v467, v265, &__p);
        v266 = *(_QWORD *)(a1 + 184);
        v267 = *(int *)(a1 + 2456);
        v268 = (int64x2_t *)operator new(0x20uLL);
        v452 = v268 + 2;
        v453 = v268 + 2;
        v268->i64[0] = 1;
        v268->i64[1] = v267;
        v268[1] = v437;
        v451 = v268;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)v266 + 56))(&v466, v266, &v451);
        if (*((char *)v263 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)v263, *((_QWORD *)v263 + 1));
        }
        else
        {
          v269 = *v263;
          v444.__r_.__value_.__r.__words[2] = *((_QWORD *)v263 + 2);
          *(_OWORD *)&v444.__r_.__value_.__l.__data_ = v269;
        }
        v273 = v466;
        v466 = 0;
        v445 = (char *)v273;
        v274 = *(_QWORD *)(a1 + 1560);
        v275 = *(_QWORD *)(a1 + 1568);
        if (v274 >= v275)
        {
          v279 = (uint64_t)(v274 - *v439) >> 5;
          v280 = v279 + 1;
          if ((unint64_t)(v279 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v281 = v275 - *v439;
          if (v281 >> 4 > v280)
            v280 = v281 >> 4;
          if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFE0)
            v282 = 0x7FFFFFFFFFFFFFFLL;
          else
            v282 = v280;
          v443 = (unint64_t *)(a1 + 1568);
          v283 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v282);
          v284 = &v283[32 * v279];
          *(_QWORD *)&__p = v283;
          *((_QWORD *)&__p + 1) = v284;
          v442 = &v283[32 * v285];
          v286 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
          *((_QWORD *)v284 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
          *(_OWORD *)v284 = v286;
          memset(&v444, 0, sizeof(v444));
          v287 = v445;
          v445 = 0;
          *((_QWORD *)v284 + 3) = v287;
          v441 = v284 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
          v278 = *(_QWORD *)(a1 + 1560);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          v276 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
          *(_QWORD *)(v274 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
          *(_OWORD *)v274 = v276;
          memset(&v444, 0, sizeof(v444));
          v277 = v445;
          v445 = 0;
          *(_QWORD *)(v274 + 24) = v277;
          v278 = v274 + 32;
          *(_QWORD *)(a1 + 1560) = v274 + 32;
        }
        *(_QWORD *)(a1 + 1560) = v278;
        v288 = v445;
        v445 = 0;
        if (v288)
          (*(void (**)(char *))(*(_QWORD *)v288 + 8))(v288);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v444.__r_.__value_.__l.__data_);
        v289 = v466;
        v466 = 0;
        if (v289)
          (*((void (**)(void **))*v289 + 1))(v289);
        if (v451)
        {
          v452 = (int64x2_t *)v451;
          operator delete(v451);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1560) - 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 1560) - 8));
        v290 = *(char ***)(a1 + 2432);
        v291 = *(_QWORD *)(a1 + 184);
        v292 = *(int *)(a1 + 2456);
        v293 = (int64x2_t *)operator new(0x20uLL);
        v444.__r_.__value_.__l.__size_ = (std::string::size_type)&v293[2];
        v444.__r_.__value_.__r.__words[2] = (std::string::size_type)&v293[2];
        v293->i64[0] = 1;
        v293->i64[1] = v292;
        v293[1] = vdupq_n_s64(1uLL);
        v444.__r_.__value_.__r.__words[0] = (std::string::size_type)v293;
        (*(void (**)(void ***__return_ptr, uint64_t, std::string *))(*(_QWORD *)v291 + 56))(&v466, v291, &v444);
        v294 = v466;
        v451 = v466;
        if (v466)
        {
          v295 = (void **)operator new();
          v296 = v466;
          *v295 = &unk_1E5D45D98;
          v295[1] = 0;
          v295[2] = 0;
          v295[3] = v296;
        }
        else
        {
          v295 = 0;
        }
        v452 = (int64x2_t *)v295;
        v466 = 0;
        v297 = (unint64_t)v290[2];
        v298 = (void ***)v290[1];
        if ((unint64_t)v298 >= v297)
        {
          v300 = ((char *)v298 - *v290) >> 4;
          v301 = v300 + 1;
          if ((unint64_t)(v300 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v302 = v297 - (_QWORD)*v290;
          if (v302 >> 3 > v301)
            v301 = v302 >> 3;
          if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFF0)
            v303 = 0xFFFFFFFFFFFFFFFLL;
          else
            v303 = v301;
          v443 = (unint64_t *)(v290 + 2);
          v304 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v290 + 2), v303);
          v306 = (void ***)&v304[16 * v300];
          *v306 = v294;
          v306[1] = v295;
          v451 = 0;
          v452 = 0;
          v308 = *v290;
          v307 = v290[1];
          if (v307 == *v290)
          {
            v311 = v290[1];
            v309 = &v304[16 * v300];
          }
          else
          {
            v309 = &v304[16 * v300];
            do
            {
              v310 = *((_OWORD *)v307 - 1);
              v307 -= 16;
              *((_OWORD *)v309 - 1) = v310;
              v309 -= 16;
              *(_QWORD *)v307 = 0;
              *((_QWORD *)v307 + 1) = 0;
            }
            while (v307 != v308);
            v311 = *v290;
            v307 = v290[1];
          }
          v299 = (char *)(v306 + 2);
          *v290 = v309;
          *(_QWORD *)&__p = v311;
          *((_QWORD *)&__p + 1) = v311;
          v290[1] = (char *)(v306 + 2);
          v441 = v307;
          v350 = v290[2];
          v290[2] = &v304[16 * v305];
          v442 = v350;
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *v298 = v294;
          v298[1] = v295;
          v299 = (char *)(v298 + 2);
        }
        v290[1] = v299;
        v351 = v466;
        v466 = 0;
        if (v351)
          (*((void (**)(void **))*v351 + 1))(v351);
        if (v444.__r_.__value_.__r.__words[0])
        {
          v444.__r_.__value_.__l.__size_ = v444.__r_.__value_.__r.__words[0];
          operator delete(v444.__r_.__value_.__l.__data_);
        }
        v352 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + 8) - 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v352 + 88))(v352);
        v353 = (void *)v467.__r_.__value_.__r.__words[0];
        if (!v467.__r_.__value_.__r.__words[0])
          goto LABEL_403;
        v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
      }
      else
      {
        v270 = *(_QWORD *)(a1 + 184);
        v271 = *(int *)(a1 + 2456);
        LODWORD(v466) = 0;
        std::vector<float>::vector(&v467, v271, &v466);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v270 + 24))(&v451, v270, &v467, 0);
        if (*((char *)v263 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)v263, *((_QWORD *)v263 + 1));
        }
        else
        {
          v272 = *v263;
          v444.__r_.__value_.__r.__words[2] = *((_QWORD *)v263 + 2);
          *(_OWORD *)&v444.__r_.__value_.__l.__data_ = v272;
        }
        v312 = (char *)v451;
        v451 = 0;
        v445 = v312;
        v313 = *(_QWORD *)(a1 + 1560);
        v314 = *(_QWORD *)(a1 + 1568);
        if (v313 >= v314)
        {
          v318 = (uint64_t)(v313 - *v439) >> 5;
          v319 = v318 + 1;
          if ((unint64_t)(v318 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v320 = v314 - *v439;
          if (v320 >> 4 > v319)
            v319 = v320 >> 4;
          if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFE0)
            v321 = 0x7FFFFFFFFFFFFFFLL;
          else
            v321 = v319;
          v443 = (unint64_t *)(a1 + 1568);
          v322 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 1568, v321);
          v323 = &v322[32 * v318];
          *(_QWORD *)&__p = v322;
          *((_QWORD *)&__p + 1) = v323;
          v442 = &v322[32 * v324];
          v325 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
          *((_QWORD *)v323 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
          *(_OWORD *)v323 = v325;
          memset(&v444, 0, sizeof(v444));
          v326 = v445;
          v445 = 0;
          *((_QWORD *)v323 + 3) = v326;
          v441 = v323 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
          v317 = *(_QWORD *)(a1 + 1560);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          v315 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
          *(_QWORD *)(v313 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
          *(_OWORD *)v313 = v315;
          memset(&v444, 0, sizeof(v444));
          v316 = v445;
          v445 = 0;
          *(_QWORD *)(v313 + 24) = v316;
          v317 = v313 + 32;
          *(_QWORD *)(a1 + 1560) = v313 + 32;
        }
        *(_QWORD *)(a1 + 1560) = v317;
        v327 = v445;
        v445 = 0;
        if (v327)
          (*(void (**)(char *))(*(_QWORD *)v327 + 8))(v327);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v444.__r_.__value_.__l.__data_);
        v328 = v451;
        v451 = 0;
        if (v328)
          (*(void (**)(void *))(*(_QWORD *)v328 + 8))(v328);
        if (v467.__r_.__value_.__r.__words[0])
        {
          v467.__r_.__value_.__l.__size_ = v467.__r_.__value_.__r.__words[0];
          operator delete(v467.__r_.__value_.__l.__data_);
        }
        v329 = *(char ***)(a1 + 2432);
        v330 = *(_QWORD *)(a1 + 184);
        v331 = *(int *)(a1 + 2456);
        LODWORD(v466) = 0;
        std::vector<float>::vector(&v444, v331, &v466);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v330 + 24))(&v451, v330, &v444, 0);
        v332 = v451;
        v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v451;
        if (v451)
        {
          v333 = (_QWORD *)operator new();
          v334 = v451;
          *v333 = &unk_1E5D45D98;
          v333[1] = 0;
          v333[2] = 0;
          v333[3] = v334;
        }
        else
        {
          v333 = 0;
        }
        v467.__r_.__value_.__l.__size_ = (std::string::size_type)v333;
        v451 = 0;
        v335 = (unint64_t)v329[2];
        v336 = v329[1];
        if ((unint64_t)v336 >= v335)
        {
          v338 = (v336 - *v329) >> 4;
          v339 = v338 + 1;
          if ((unint64_t)(v338 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v340 = v335 - (_QWORD)*v329;
          if (v340 >> 3 > v339)
            v339 = v340 >> 3;
          if ((unint64_t)v340 >= 0x7FFFFFFFFFFFFFF0)
            v341 = 0xFFFFFFFFFFFFFFFLL;
          else
            v341 = v339;
          v443 = (unint64_t *)(v329 + 2);
          v342 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v329 + 2), v341);
          v344 = &v342[16 * v338];
          *(_QWORD *)v344 = v332;
          *((_QWORD *)v344 + 1) = v333;
          *(_OWORD *)&v467.__r_.__value_.__l.__data_ = 0uLL;
          v346 = *v329;
          v345 = v329[1];
          if (v345 == *v329)
          {
            v349 = v329[1];
            v347 = &v342[16 * v338];
          }
          else
          {
            v347 = &v342[16 * v338];
            do
            {
              v348 = *((_OWORD *)v345 - 1);
              v345 -= 16;
              *((_OWORD *)v347 - 1) = v348;
              v347 -= 16;
              *(_QWORD *)v345 = 0;
              *((_QWORD *)v345 + 1) = 0;
            }
            while (v345 != v346);
            v349 = *v329;
            v345 = v329[1];
          }
          v337 = v344 + 16;
          *v329 = v347;
          *(_QWORD *)&__p = v349;
          *((_QWORD *)&__p + 1) = v349;
          v329[1] = v344 + 16;
          v441 = v345;
          v354 = v329[2];
          v329[2] = &v342[16 * v343];
          v442 = v354;
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v336 = v332;
          *((_QWORD *)v336 + 1) = v333;
          v337 = v336 + 16;
        }
        v329[1] = v337;
        v355 = v451;
        v451 = 0;
        if (v355)
          (*(void (**)(void *))(*(_QWORD *)v355 + 8))(v355);
        v353 = (void *)v444.__r_.__value_.__r.__words[0];
        if (!v444.__r_.__value_.__r.__words[0])
          goto LABEL_403;
        v444.__r_.__value_.__l.__size_ = v444.__r_.__value_.__r.__words[0];
      }
      operator delete(v353);
LABEL_403:
      v263 = (__int128 *)((char *)v263 + 24);
    }
    while (v263 != v264);
  }
  if (*(_BYTE *)(a1 + 1515))
  {
    v356 = *(char ***)(a1 + 2432);
    if (*(_BYTE *)(a1 + 1518))
    {
      v357 = *(_QWORD *)(a1 + 184);
      v358 = operator new(4uLL);
      v444.__r_.__value_.__r.__words[0] = (std::string::size_type)v358;
      *v358 = 0;
      v444.__r_.__value_.__l.__size_ = (std::string::size_type)(v358 + 1);
      v444.__r_.__value_.__r.__words[2] = (std::string::size_type)(v358 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v357 + 16))(&v451, v357, &v444, 0);
      v359 = v451;
      v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v451;
      if (v451)
      {
        v360 = (_QWORD *)operator new();
        v361 = v451;
        *v360 = &unk_1E5D45D98;
        v360[1] = 0;
        v360[2] = 0;
        v360[3] = v361;
      }
      else
      {
        v360 = 0;
      }
      v467.__r_.__value_.__l.__size_ = (std::string::size_type)v360;
      v451 = 0;
      v365 = (unint64_t)v356[2];
      v366 = v356[1];
      if ((unint64_t)v366 >= v365)
      {
        v367 = (v366 - *v356) >> 4;
        v368 = v367 + 1;
        if ((unint64_t)(v367 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v369 = v365 - (_QWORD)*v356;
        if (v369 >> 3 > v368)
          v368 = v369 >> 3;
        if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF0)
          v370 = 0xFFFFFFFFFFFFFFFLL;
        else
          v370 = v368;
        v443 = (unint64_t *)(v356 + 2);
        v371 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v356 + 2), v370);
        v373 = &v371[16 * v367];
        *(_QWORD *)v373 = v359;
        *((_QWORD *)v373 + 1) = v360;
        *(_OWORD *)&v467.__r_.__value_.__l.__data_ = 0uLL;
        v375 = *v356;
        v374 = v356[1];
        if (v374 != *v356)
        {
          v376 = &v371[16 * v367];
          do
          {
            v377 = *((_OWORD *)v374 - 1);
            v374 -= 16;
            *((_OWORD *)v376 - 1) = v377;
            v376 -= 16;
            *(_QWORD *)v374 = 0;
            *((_QWORD *)v374 + 1) = 0;
          }
          while (v374 != v375);
LABEL_434:
          v386 = *v356;
          v374 = v356[1];
LABEL_436:
          v379 = v373 + 16;
          *v356 = v376;
          *(_QWORD *)&__p = v386;
          *((_QWORD *)&__p + 1) = v386;
          v356[1] = v373 + 16;
          v441 = v374;
          v387 = v356[2];
          v356[2] = &v371[16 * v372];
          v442 = v387;
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&__p);
          goto LABEL_437;
        }
        goto LABEL_435;
      }
    }
    else
    {
      v362 = *(_QWORD *)(a1 + 184);
      v363 = operator new(4uLL);
      v444.__r_.__value_.__r.__words[0] = (std::string::size_type)v363;
      *v363 = 1;
      v444.__r_.__value_.__l.__size_ = (std::string::size_type)(v363 + 1);
      v444.__r_.__value_.__r.__words[2] = (std::string::size_type)(v363 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v362 + 16))(&v451, v362, &v444, 0);
      v359 = v451;
      v467.__r_.__value_.__r.__words[0] = (std::string::size_type)v451;
      if (v451)
      {
        v360 = (_QWORD *)operator new();
        v364 = v451;
        *v360 = &unk_1E5D45D98;
        v360[1] = 0;
        v360[2] = 0;
        v360[3] = v364;
      }
      else
      {
        v360 = 0;
      }
      v467.__r_.__value_.__l.__size_ = (std::string::size_type)v360;
      v451 = 0;
      v378 = (unint64_t)v356[2];
      v366 = v356[1];
      if ((unint64_t)v366 >= v378)
      {
        v380 = (v366 - *v356) >> 4;
        v381 = v380 + 1;
        if ((unint64_t)(v380 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v382 = v378 - (_QWORD)*v356;
        if (v382 >> 3 > v381)
          v381 = v382 >> 3;
        if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFF0)
          v383 = 0xFFFFFFFFFFFFFFFLL;
        else
          v383 = v381;
        v443 = (unint64_t *)(v356 + 2);
        v371 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v356 + 2), v383);
        v373 = &v371[16 * v380];
        *(_QWORD *)v373 = v359;
        *((_QWORD *)v373 + 1) = v360;
        *(_OWORD *)&v467.__r_.__value_.__l.__data_ = 0uLL;
        v384 = *v356;
        v374 = v356[1];
        if (v374 != *v356)
        {
          v376 = &v371[16 * v380];
          do
          {
            v385 = *((_OWORD *)v374 - 1);
            v374 -= 16;
            *((_OWORD *)v376 - 1) = v385;
            v376 -= 16;
            *(_QWORD *)v374 = 0;
            *((_QWORD *)v374 + 1) = 0;
          }
          while (v374 != v384);
          goto LABEL_434;
        }
LABEL_435:
        v386 = v374;
        v376 = v373;
        goto LABEL_436;
      }
    }
    *(_QWORD *)v366 = v359;
    *((_QWORD *)v366 + 1) = v360;
    v379 = v366 + 16;
LABEL_437:
    v356[1] = v379;
    v388 = v451;
    v451 = 0;
    if (v388)
      (*(void (**)(void *))(*(_QWORD *)v388 + 8))(v388);
    if (v444.__r_.__value_.__r.__words[0])
    {
      v444.__r_.__value_.__l.__size_ = v444.__r_.__value_.__r.__words[0];
      operator delete(v444.__r_.__value_.__l.__data_);
    }
  }
  v389 = *(_QWORD *)(a1 + 2056);
  if (v389 != *(_QWORD *)(a1 + 2064))
  {
    v390 = 0;
    v391 = a1 + 1568;
    do
    {
      if (v454 <= 0)
      {
        v392 = *(_DWORD *)(a1 + 2104);
        v393 = *(_QWORD *)(a1 + 1528);
      }
      else
      {
        v392 = *(_DWORD *)(a1 + 2104);
        v393 = *(_QWORD *)(a1 + 1528);
        if (!*(_QWORD *)(a1 + 432))
        {
          v394 = *(_QWORD *)(v393 + 8 * (v392 + (int)v390));
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v394 + 152))(v394) != 3)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
            (*(void (**)(uint64_t))(*(_QWORD *)v394 + 152))(v394);
            v430 = (_QWORD *)std::ostream::operator<<();
            v431 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v430, (uint64_t)" for handover ", 14);
            v432 = *(_QWORD *)(a1 + 2056) + 24 * v390;
            v433 = *(char *)(v432 + 23);
            if (v433 >= 0)
              v434 = *(_QWORD *)(a1 + 2056) + 24 * v390;
            else
              v434 = *(_QWORD *)v432;
            if (v433 >= 0)
              v435 = *(unsigned __int8 *)(v432 + 23);
            else
              v435 = *(_QWORD *)(v432 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v431, v434, v435);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v395 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v394 + 160))(v394, 0);
          v396 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v394 + 160))(v394, 1);
          v397 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v394 + 160))(v394, 2);
          v398 = *(_QWORD *)(a1 + 184);
          v399 = v457;
          v400 = operator new(0x18uLL);
          *((_QWORD *)&__p + 1) = v400 + 3;
          v441 = (char *)(v400 + 3);
          *v400 = v395;
          v400[1] = v399;
          v400[2] = v397;
          *(_QWORD *)&__p = v400;
          (*(void (**)(std::string *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v398 + 56))(&v467, v398, &__p);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v395 >= 1)
          {
            v401 = 0;
            v402 = 0;
            v403 = 0;
            do
            {
              (*(void (**)(std::string::size_type, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v467.__r_.__value_.__l.__data_
                                                                                               + 72))(v467.__r_.__value_.__r.__words[0], v394, v401, ((v402 + v457) * v397), (v403 * v457));
              v403 += v397;
              v402 += v396;
              v401 = (v401 + v396 * v397);
              --v395;
            }
            while (v395);
          }
          v404 = *(_QWORD *)(a1 + 2056) + 24 * v390;
          if (*(char *)(v404 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)v404, *(_QWORD *)(v404 + 8));
          }
          else
          {
            v405 = *(_OWORD *)v404;
            v444.__r_.__value_.__r.__words[2] = *(_QWORD *)(v404 + 16);
            *(_OWORD *)&v444.__r_.__value_.__l.__data_ = v405;
          }
          v391 = a1 + 1568;
          v415 = v467.__r_.__value_.__r.__words[0];
          v467.__r_.__value_.__r.__words[0] = 0;
          v445 = (char *)v415;
          v409 = *(_QWORD *)(a1 + 1560);
          v416 = *(_QWORD *)(a1 + 1568);
          if (v409 >= v416)
          {
            v411 = (uint64_t)(v409 - *v439) >> 5;
            v420 = v411 + 1;
            if ((unint64_t)(v411 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v421 = v416 - *v439;
            if (v421 >> 4 > v420)
              v420 = v421 >> 4;
            if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFE0)
              v414 = 0x7FFFFFFFFFFFFFFLL;
            else
              v414 = v420;
LABEL_473:
            v443 = (unint64_t *)v391;
            v422 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v391, v414);
            v423 = &v422[32 * v411];
            *(_QWORD *)&__p = v422;
            *((_QWORD *)&__p + 1) = v423;
            v442 = &v422[32 * v424];
            v425 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
            *((_QWORD *)v423 + 2) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
            *(_OWORD *)v423 = v425;
            memset(&v444, 0, sizeof(v444));
            v426 = v445;
            v445 = 0;
            *((_QWORD *)v423 + 3) = v426;
            v441 = v423 + 32;
            std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v439, &__p);
            v419 = *(_QWORD *)(a1 + 1560);
            std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
            goto LABEL_474;
          }
          goto LABEL_466;
        }
      }
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v393 + 8 * (v392 + (int)v390)) + 16))(&v467);
      v406 = (__int128 *)(v389 + 24 * v390);
      if (*((char *)v406 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v444, *(const std::string::value_type **)v406, *((_QWORD *)v406 + 1));
      }
      else
      {
        v407 = *v406;
        v444.__r_.__value_.__r.__words[2] = *((_QWORD *)v406 + 2);
        *(_OWORD *)&v444.__r_.__value_.__l.__data_ = v407;
      }
      v408 = v467.__r_.__value_.__r.__words[0];
      v467.__r_.__value_.__r.__words[0] = 0;
      v445 = (char *)v408;
      v409 = *(_QWORD *)(a1 + 1560);
      v410 = *(_QWORD *)(a1 + 1568);
      if (v409 >= v410)
      {
        v411 = (uint64_t)(v409 - *v439) >> 5;
        v412 = v411 + 1;
        if ((unint64_t)(v411 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v413 = v410 - *v439;
        if (v413 >> 4 > v412)
          v412 = v413 >> 4;
        if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFE0)
          v414 = 0x7FFFFFFFFFFFFFFLL;
        else
          v414 = v412;
        goto LABEL_473;
      }
LABEL_466:
      v417 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
      *(_QWORD *)(v409 + 16) = *((_QWORD *)&v444.__r_.__value_.__l + 2);
      *(_OWORD *)v409 = v417;
      memset(&v444, 0, sizeof(v444));
      v418 = v445;
      v445 = 0;
      *(_QWORD *)(v409 + 24) = v418;
      v419 = v409 + 32;
      *(_QWORD *)(a1 + 1560) = v409 + 32;
LABEL_474:
      *(_QWORD *)(a1 + 1560) = v419;
      v427 = v445;
      v445 = 0;
      if (v427)
        (*(void (**)(char *))(*(_QWORD *)v427 + 8))(v427);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v444.__r_.__value_.__l.__data_);
      v428 = v467.__r_.__value_.__r.__words[0];
      v467.__r_.__value_.__r.__words[0] = 0;
      if (v428)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v428 + 8))(v428);
      ++v390;
      v389 = *(_QWORD *)(a1 + 2056);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 2064) - v389) >> 3) > v390);
  }
  *(_QWORD *)&__p = &v462;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v459 < 0)
    operator delete(v458[0]);
  if (v455)
  {
    v456 = v455;
    operator delete(v455);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v465, v429);
}

void sub_1ADB00150(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB00408);
}

void sub_1ADB00160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  clockid_t v61;

  if (*(char *)(v60 - 121) < 0)
    operator delete(*(void **)(v60 - 144));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a14);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  *(_QWORD *)(v60 - 144) = &a59;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 144));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a49, v61);
  JUMPOUT(0x1ADB003F8);
}

void sub_1ADB00194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v59 - 144);
  if (a59)
    (*(void (**)(uint64_t))(*(_QWORD *)a59 + 8))(a59);
  if (a49)
    JUMPOUT(0x1ADB003D4);
  JUMPOUT(0x1ADB003F8);
}

void sub_1ADB001A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  if (a54 < 0)
    operator delete(__p);
  if (a62)
    (*(void (**)(uint64_t))(*(_QWORD *)a62 + 8))(a62);
  JUMPOUT(0x1ADB003C8);
}

void sub_1ADB00200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    JUMPOUT(0x1ADB003D4);
  JUMPOUT(0x1ADB003F8);
}

void sub_1ADB00238(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  uint64_t v63;
  uint64_t v64;

  v64 = *(_QWORD *)(v63 - 152);
  *(_QWORD *)(v63 - 152) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADB003C8);
}

void sub_1ADB002D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  JUMPOUT(0x1ADB002ECLL);
}

void sub_1ADB002E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t v65;
  uint64_t v67;
  clockid_t v68;

  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  if (a54 < 0)
    operator delete(__p);
  v67 = *(_QWORD *)(v65 - 144);
  *(_QWORD *)(v65 - 144) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  kaldi::quasar::Encdec::EmbeddingRunOutput::~EmbeddingRunOutput(&a65);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v65 - 200), v68);
  _Unwind_Resume(a1);
}

void sub_1ADB003BC()
{
  JUMPOUT(0x1ADB003F8);
}

void sub_1ADB003C4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 144);
  if (v1)
  {
    *(_QWORD *)(v0 - 136) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1ADB003F8);
}

void kaldi::quasar::Encdec::prepareInputsUsingCustomEmbedding(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(void ***__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(&v13, *a2, a3);
  v7 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v10, (__int128 *)(a1 + 1936), (uint64_t *)&v13);
  v8 = v13;
  v11 = v7;
  v13 = 0;
  if (v8)
  {
    (*((void (**)(void **))*v8 + 1))(v8);
    v7 = v11;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a3 + 20);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 64) = 0;
  v9 = v12;
  *(_QWORD *)(a4 + 72) = v10;
  *(_QWORD *)(a4 + 80) = v7;
  *(_QWORD *)(a4 + 88) = v9;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v13 = (void **)&v10;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v13);
}

void sub_1ADB0052C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void **v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::prepareInputsAndRunEmbeddingPlan(uint64_t a1@<X0>, kaldi::quasar::ComputeEngineItf **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int *v8;
  uint64_t v9;
  std::vector<int>::pointer end;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  std::vector<int>::pointer begin;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  std::vector<int>::pointer v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  int *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  int *v40;
  int v41;
  int *v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  kaldi::quasar::ComputeEngineItf **v54;
  kaldi::quasar::ComputeEngineItf *v55;
  std::vector<int>::pointer v56;
  std::vector<int>::pointer v57;
  _QWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  std::string::size_type v66;
  uint64_t v67;
  std::string::size_type v68;
  _DWORD *v69;
  std::string::size_type size;
  int v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::string::size_type v76;
  uint64_t v77;
  _OWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void **v94;
  std::string *v95;
  void **v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  std::string::size_type v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  void **v114[3];
  uint64_t *v115[3];
  __int128 v116;
  unint64_t v117;
  std::string v118;
  void *v119;
  _BYTE *v120;
  uint64_t v121;
  std::vector<int> __p;
  std::string v123;
  char *v124;
  uint64_t *v125;
  void ***v126;
  std::string v127;
  __int128 v128;

  *((_QWORD *)&v128 + 1) = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  if (*(_BYTE *)(a1 + 1510))
  {
    v7 = *(_DWORD *)(a1 + 812);
    v8 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, 1uLL);
    *v8 = v7 - 1;
    end = v8 + 1;
    __p.__begin_ = v8;
    __p.__end_cap_.__value_ = &v8[v9];
    __p.__end_ = v8 + 1;
    v11 = *(unsigned __int8 *)(a1 + 1510);
  }
  else
  {
    end = 0;
    v11 = 0;
  }
  v12 = *(unsigned __int8 *)(a1 + 1511);
  v13 = *(_DWORD *)(a1 + 904) - (v12 + v11);
  if (v13 >= *(_DWORD *)(a3 + 20))
    v13 = *(_DWORD *)(a3 + 20);
  if (v13 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (int)*(float *)(*(_QWORD *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * v14);
      if (end >= __p.__end_cap_.__value_)
      {
        begin = __p.__begin_;
        v17 = end - __p.__begin_;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
        if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v20);
          begin = __p.__begin_;
          end = __p.__end_;
        }
        else
        {
          v21 = 0;
        }
        v22 = (int *)&v21[4 * v17];
        *v22 = v15;
        v23 = v22 + 1;
        while (end != begin)
        {
          v24 = *--end;
          *--v22 = v24;
        }
        __p.__begin_ = v22;
        __p.__end_ = v23;
        __p.__end_cap_.__value_ = (int *)&v21[4 * v20];
        if (begin)
          operator delete(begin);
        end = v23;
      }
      else
      {
        *end++ = v15;
      }
      __p.__end_ = end;
      ++v14;
      v25 = *(_DWORD *)(a3 + 20);
      v12 = *(unsigned __int8 *)(a1 + 1511);
      if (*(_DWORD *)(a1 + 904) - (v12 + *(unsigned __int8 *)(a1 + 1510)) < v25)
        v25 = *(_DWORD *)(a1 + 904) - (v12 + *(unsigned __int8 *)(a1 + 1510));
    }
    while (v14 < v25);
  }
  if (v12)
  {
    v26 = *(_DWORD *)(a1 + 816) - 1;
    if (end >= __p.__end_cap_.__value_)
    {
      v28 = __p.__begin_;
      v29 = end - __p.__begin_;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v31 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
      if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__end_cap_, v32);
        v28 = __p.__begin_;
        end = __p.__end_;
      }
      else
      {
        v33 = 0;
      }
      v34 = (int *)&v33[4 * v29];
      v35 = (int *)&v33[4 * v32];
      *v34 = v26;
      v27 = v34 + 1;
      while (end != v28)
      {
        v36 = *--end;
        *--v34 = v36;
      }
      __p.__begin_ = v34;
      __p.__end_ = v27;
      __p.__end_cap_.__value_ = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *end = v26;
      v27 = end + 1;
    }
    __p.__end_ = v27;
    end = v27;
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v37 = (char *)end - (char *)__p.__begin_;
  v38 = (unint64_t)((char *)end - (char *)__p.__begin_) >> 2;
  v39 = *(int **)(a1 + 856);
  v40 = *(int **)(a1 + 864);
  if (v39 == v40)
  {
    v41 = 0;
    v43 = *(_DWORD *)(a1 + 848);
  }
  else
  {
    v41 = 0;
    v42 = *(int **)(a1 + 856);
    do
    {
      v43 = *v42;
      if (*v42 >= (int)v38)
        break;
      ++v41;
      ++v42;
    }
    while (v42 != v40);
  }
  v44 = v41 == v40 - v39;
  if (*(_QWORD *)(a1 + 880) == *(_QWORD *)(a1 + 888))
  {
    if (*(char *)(a1 + 935) < 0)
      std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(a1 + 912), *(_QWORD *)(a1 + 920));
    else
      v118 = *(std::string *)(a1 + 912);
  }
  else
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 912), 95, (uint64_t)&v123);
    v45 = *(_QWORD *)(a1 + 880) + 24 * (v41 - v44);
    v46 = *(char *)(v45 + 23);
    if (v46 >= 0)
      v47 = (const std::string::value_type *)(*(_QWORD *)(a1 + 880) + 24 * (v41 - v44));
    else
      v47 = *(const std::string::value_type **)v45;
    if (v46 >= 0)
      v48 = *(unsigned __int8 *)(v45 + 23);
    else
      v48 = *(_QWORD *)(v45 + 8);
    v49 = std::string::append(&v123, v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a1 + 488))
    v112 = std::__tree<std::string>::__count_unique<std::string>(a1 + 1624, (const void **)&v118.__r_.__value_.__l.__data_) == 0;
  else
    v112 = 0;
  v123.__r_.__value_.__r.__words[0] = a1 + 936;
  v51 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)(a1 + 936), (uint64_t)&std::piecewise_construct, (__int128 **)&v123);
  v52 = std::__tree<std::string>::__count_unique<std::string>((uint64_t)(v51 + 7), (const void **)&v118.__r_.__value_.__l.__data_);
  v123.__r_.__value_.__r.__words[0] = a1 + 936;
  v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 496), (const void **)(a1 + 936), (uint64_t)&std::piecewise_construct, (__int128 **)&v123);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v53 + 7, (const void **)&v118.__r_.__value_.__l.__data_, (uint64_t)&v118);
  if (v43)
  {
    LODWORD(v123.__r_.__value_.__l.__data_) = 0;
    std::vector<float>::resize((uint64_t)&v119, (int)(v37 >> 2), &v123);
    if (v43 >= 1)
    {
      if (v43 < (int)v38)
        LODWORD(v38) = v43;
      std::vector<float>::resize((uint64_t)&v119, v43, &kaldi::quasar::kSmallLogProb);
      LODWORD(v123.__r_.__value_.__l.__data_) = 0;
      std::vector<int>::resize(&__p, v43, (std::vector<int>::const_reference)&v123);
    }
  }
  if (*(_QWORD *)(a1 + 168))
    v54 = (kaldi::quasar::ComputeEngineItf **)(a1 + 168);
  else
    v54 = a2;
  v116 = 0uLL;
  v117 = 0;
  if (*(_BYTE *)(a1 + 1513))
  {
    v55 = *v54;
    v57 = __p.__begin_;
    v56 = __p.__end_;
    v58 = operator new(0x10uLL);
    v123.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 2);
    v123.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 2);
    *v58 = (int)(v56 - v57);
    v58[1] = 1;
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    (*(void (**)(std::string *__return_ptr, kaldi::quasar::ComputeEngineItf *, std::string *))(*(_QWORD *)v55 + 48))(&v127, v55, &v123);
    v59 = (__int128 *)(a1 + 1744);
    v60 = *((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1) >= v117)
    {
      v65 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v116, v59, (uint64_t *)&v127);
      v66 = v127.__r_.__value_.__r.__words[0];
      *((_QWORD *)&v116 + 1) = v65;
      v127.__r_.__value_.__r.__words[0] = 0;
      if (v66)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v66 + 8))(v66);
    }
    else
    {
      if (*(char *)(a1 + 1767) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v116 + 1), *(const std::string::value_type **)(a1 + 1744), *(_QWORD *)(a1 + 1752));
      }
      else
      {
        v61 = *v59;
        *(_QWORD *)(*((_QWORD *)&v116 + 1) + 16) = *(_QWORD *)(a1 + 1760);
        *(_OWORD *)v60 = v61;
      }
      *(_QWORD *)(v60 + 24) = v127.__r_.__value_.__r.__words[0];
      *((_QWORD *)&v116 + 1) = v60 + 32;
      v127.__r_.__value_.__r.__words[0] = 0;
    }
    if (v123.__r_.__value_.__r.__words[0])
    {
      v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
      operator delete(v123.__r_.__value_.__l.__data_);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)&v116 + 1) - 8) + 80))(*(_QWORD *)(*((_QWORD *)&v116 + 1) - 8));
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, kaldi::quasar::ComputeEngineItf *, std::vector<int> *, _QWORD))(*(_QWORD *)*v54 + 16))(&v123, *v54, &__p, *(unsigned __int8 *)(a1 + 1514));
    v62 = (__int128 *)(a1 + 1744);
    v63 = *((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1) >= v117)
    {
      v67 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v116, v62, (uint64_t *)&v123);
      v68 = v123.__r_.__value_.__r.__words[0];
      *((_QWORD *)&v116 + 1) = v67;
      v123.__r_.__value_.__r.__words[0] = 0;
      if (v68)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v68 + 8))(v68);
    }
    else
    {
      if (*(char *)(a1 + 1767) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v116 + 1), *(const std::string::value_type **)(a1 + 1744), *(_QWORD *)(a1 + 1752));
      }
      else
      {
        v64 = *v62;
        *(_QWORD *)(*((_QWORD *)&v116 + 1) + 16) = *(_QWORD *)(a1 + 1760);
        *(_OWORD *)v63 = v64;
      }
      *(_QWORD *)(v63 + 24) = v123.__r_.__value_.__r.__words[0];
      *((_QWORD *)&v116 + 1) = v63 + 32;
    }
  }
  if (*(_BYTE *)(a1 + 1516))
  {
    std::vector<int>::vector((std::vector<int> *)&v123, __p.__end_ - __p.__begin_);
    size = v123.__r_.__value_.__l.__size_;
    v69 = (_DWORD *)v123.__r_.__value_.__r.__words[0];
    if (v123.__r_.__value_.__r.__words[0] != v123.__r_.__value_.__l.__size_)
    {
      v71 = 0;
      do
        *v69++ = v71++;
      while (v69 != (_DWORD *)size);
    }
    (*(void (**)(std::string *__return_ptr, kaldi::quasar::ComputeEngineItf *, std::string *, _QWORD))(*(_QWORD *)*v54 + 16))(&v127, *v54, &v123, 0);
    v72 = (__int128 *)(a1 + 1792);
    v73 = *((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1) >= v117)
    {
      v75 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v116, v72, (uint64_t *)&v127);
      v76 = v127.__r_.__value_.__r.__words[0];
      *((_QWORD *)&v116 + 1) = v75;
      v127.__r_.__value_.__r.__words[0] = 0;
      if (v76)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v76 + 8))(v76);
    }
    else
    {
      if (*(char *)(a1 + 1815) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)&v116 + 1), *(const std::string::value_type **)(a1 + 1792), *(_QWORD *)(a1 + 1800));
      }
      else
      {
        v74 = *v72;
        *(_QWORD *)(*((_QWORD *)&v116 + 1) + 16) = *(_QWORD *)(a1 + 1808);
        *(_OWORD *)v73 = v74;
      }
      *(_QWORD *)(v73 + 24) = v127.__r_.__value_.__r.__words[0];
      *((_QWORD *)&v116 + 1) = v73 + 32;
    }
    if (v123.__r_.__value_.__r.__words[0])
    {
      v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
      operator delete(v123.__r_.__value_.__l.__data_);
    }
  }
  if (*(_BYTE *)(a1 + 1508))
  {
    memset(v115, 0, sizeof(v115));
    v77 = *(_QWORD *)(a1 + 168);
    v78 = (_OWORD *)(a1 + 1936);
    if (*(char *)(a1 + 1959) < 0)
    {
      std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a1 + 1936), *(_QWORD *)(a1 + 1944));
    }
    else
    {
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *v78;
      v127.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1952);
    }
    memset(&v123, 0, sizeof(v123));
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
    v123.__r_.__value_.__r.__words[2] = v123.__r_.__value_.__r.__words[0] + 24;
    v123.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v123.__r_.__value_.__r.__words[2], (__int128 *)&v127, &v128, (std::string *)v123.__r_.__value_.__l.__data_);
    memset(v114, 0, sizeof(v114));
    (*(void (**)(uint64_t, __int128 *, std::string *, void ***, uint64_t **))(*(_QWORD *)v77 + 120))(v77, &v116, &v123, v114, v115);
    v126 = v114;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    v114[0] = (void **)&v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v114);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    v80 = *((_QWORD *)&v116 + 1);
    v79 = v116;
    while (v80 != v79)
    {
      v80 -= 32;
      std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v117, v80);
    }
    *((_QWORD *)&v116 + 1) = v79;
    if (*(_DWORD *)(a1 + 1092))
    {
      if (*(_DWORD *)(a1 + 1088) == *(_DWORD *)(a1 + 1096))
      {
        if (v79 >= v117)
        {
          v81 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v116, (__int128 *)(a1 + 1936), v115[0]);
        }
        else
        {
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__construct_one_at_end[abi:ne180100]<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t)&v116, (__int128 *)(a1 + 1936), v115[0]);
          v81 = v79 + 32;
        }
        *((_QWORD *)&v116 + 1) = v81;
        goto LABEL_140;
      }
      kaldi::quasar::ComputeEngineItf::CreateCopyFloat(*a2, *(const kaldi::quasar::ComputeEngineBufferItf **)v115[0], &v123);
      v88 = *((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1) < v117)
      {
        if (*(char *)(a1 + 1959) < 0)
        {
LABEL_129:
          std::string::__init_copy_ctor_external(*((std::string **)&v116 + 1), *(const std::string::value_type **)(a1 + 1936), *(_QWORD *)(a1 + 1944));
LABEL_136:
          *(_QWORD *)(v88 + 24) = v123.__r_.__value_.__r.__words[0];
          *((_QWORD *)&v116 + 1) = v88 + 32;
LABEL_140:
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          goto LABEL_141;
        }
LABEL_135:
        v89 = *v78;
        *(_QWORD *)(v88 + 16) = *(_QWORD *)(a1 + 1952);
        *(_OWORD *)v88 = v89;
        goto LABEL_136;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 488))
      {
        if (!v112)
        {
          v90 = *(_QWORD *)(a1 + 152);
          v91 = *v115[0];
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
          v92 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)&v118.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v123);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v90 + 72))(v90, v91, *(_QWORD *)(*(_QWORD *)v92[7] + 24));
          goto LABEL_140;
        }
        v82 = operator new(0x30uLL);
        v82[2] = 0;
        *v82 = &unk_1E5D45890;
        v82[1] = 0;
        v82[3] = 0;
        v82[4] = 0;
        v82[5] = 0;
        v123.__r_.__value_.__r.__words[0] = (std::string::size_type)(v82 + 3);
        v123.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
        v114[0] = (void **)&v118;
        v83 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)&v118.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v114);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v83 + 7), (__int128 *)&v123);
        v84 = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
        if (v123.__r_.__value_.__l.__size_)
        {
          v85 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        v87 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1624), (const void **)&v118.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v123)[7];
        (*(void (**)(void ***__return_ptr, kaldi::quasar::ComputeEngineItf *, _QWORD))(*(_QWORD *)*a2 + 80))(v114, *a2, *v115[0]);
        if (*(char *)(a1 + 1959) < 0)
        {
          std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a1 + 1936), *(_QWORD *)(a1 + 1944));
        }
        else
        {
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = *v78;
          v127.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1952);
        }
        v96 = v114[0];
        v114[0] = 0;
        *(_QWORD *)&v128 = v96;
        v97 = v87[2];
        v98 = v87[1];
        if (v98 >= v97)
        {
          v102 = (uint64_t)(v98 - *v87) >> 5;
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v104 = v97 - *v87;
          if (v104 >> 4 > v103)
            v103 = v104 >> 4;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0)
            v105 = 0x7FFFFFFFFFFFFFFLL;
          else
            v105 = v103;
          v125 = v87 + 2;
          v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v87 + 2), v105);
          v107 = (std::string::size_type)&v106[32 * v102];
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
          v123.__r_.__value_.__l.__size_ = v107;
          v124 = &v106[32 * v108];
          v109 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
          *(_QWORD *)(v107 + 16) = *((_QWORD *)&v127.__r_.__value_.__l + 2);
          *(_OWORD *)v107 = v109;
          memset(&v127, 0, sizeof(v127));
          v110 = v128;
          *(_QWORD *)&v128 = 0;
          *(_QWORD *)(v107 + 24) = v110;
          v123.__r_.__value_.__r.__words[2] = v107 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v87, &v123);
          v101 = v87[1];
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v123.__r_.__value_.__l.__data_);
        }
        else
        {
          v99 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
          *(_QWORD *)(v98 + 16) = *((_QWORD *)&v127.__r_.__value_.__l + 2);
          *(_OWORD *)v98 = v99;
          v100 = v128;
          *(_QWORD *)&v128 = 0;
          memset(&v127, 0, sizeof(v127));
          *(_QWORD *)(v98 + 24) = v100;
          v101 = v98 + 32;
          v87[1] = v98 + 32;
        }
        v87[1] = v101;
        v111 = v128;
        *(_QWORD *)&v128 = 0;
        if (v111)
          (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        v94 = v114[0];
        v114[0] = 0;
        if (!v94)
          goto LABEL_140;
LABEL_139:
        (*((void (**)(void **))*v94 + 1))(v94);
        goto LABEL_140;
      }
      (*(void (**)(std::string *__return_ptr, kaldi::quasar::ComputeEngineItf *, _QWORD))(*(_QWORD *)*a2 + 80))(&v123, *a2, *v115[0]);
      v88 = *((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1) < v117)
      {
        if (*(char *)(a1 + 1959) < 0)
          goto LABEL_129;
        goto LABEL_135;
      }
    }
    v93 = std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>((uint64_t *)&v116, (__int128 *)(a1 + 1936), (uint64_t *)&v123);
    v94 = (void **)v123.__r_.__value_.__r.__words[0];
    *((_QWORD *)&v116 + 1) = v93;
    v123.__r_.__value_.__r.__words[0] = 0;
    if (!v94)
      goto LABEL_140;
    goto LABEL_139;
  }
LABEL_141:
  *(_DWORD *)a4 = v43;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a4 + 8), v119, (uint64_t)v120, (v120 - (_BYTE *)v119) >> 2);
  *(_DWORD *)(a4 + 32) = v38;
  v95 = (std::string *)(a4 + 40);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v95, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v95->__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
    *(_QWORD *)(a4 + 56) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
  }
  *(_BYTE *)(a4 + 64) = v112;
  *(_BYTE *)(a4 + 65) = v52 == 0;
  *(_OWORD *)(a4 + 72) = v116;
  *(_QWORD *)(a4 + 88) = v117;
  v116 = 0uLL;
  v117 = 0;
  v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1ADB0128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void *v41;

  v41 = a34;
  a34 = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  *(_QWORD *)(v39 - 128) = &a14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 128));
  *(_QWORD *)(v39 - 128) = &a17;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 128));
  if (a26 < 0)
    operator delete(__p);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::EmbeddingRunOutput::~EmbeddingRunOutput(void **this)
{
  void *v2;
  void **v3;

  v3 = this + 9;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

void kaldi::quasar::Encdec::EncFeedforward()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Model does not support stream-decoding");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::Encdec::Feedforward(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6;
  clockid_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  clockid_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  clockid_t v41;
  int32x2_t *v42;
  int v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  BOOL v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  std::string *v92;
  std::string::size_type size;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  std::string *v106;
  std::string::size_type v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  void *v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  _BYTE *v121;
  unint64_t v122;
  int v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  std::string *v130;
  std::string::size_type v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  void *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  void *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  BOOL v176;
  BOOL v177;
  _QWORD *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  std::string *v184;
  std::string::size_type v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  std::string *v198;
  std::string::size_type v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  clockid_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  std::string *v217;
  std::string::size_type v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int64x2_t *v229;
  char *v230;
  void **v231;
  void *v232;
  int64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  void ***v237;
  char *v238;
  void **v239;
  _QWORD *v240;
  _QWORD *v241;
  void **v242;
  int64x2_t v243;
  void *v244;
  void **v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  clockid_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  void *v262;
  int v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  float v271;
  int v272;
  float v273;
  std::vector<unsigned int>::pointer begin;
  uint64_t v275;
  std::vector<unsigned int> *v276;
  uint64_t v277;
  int32x2_t *v278;
  double *v279;
  uint64_t v280;
  uint64_t *v281;
  int64x2_t v282;
  void **p_p;
  uint64_t v284;
  uint64_t v285;
  void **v286[2];
  uint64_t v287;
  uint64_t v288;
  void *v289[3];
  __int128 v290;
  char v291;
  void *__p;
  void *__src[4];
  char v294;
  _BYTE v295[48];
  std::string v296;
  __int128 v297;
  char v298;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v279 = (double *)(a1 + 2256);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v295, (double *)(a1 + 2256), a1 + 2352, (__int128 *)&__p);
  if (SHIBYTE(__src[1]) < 0)
    operator delete(__p);
  v280 = *(int *)(a2 + 20);
  if (*(_BYTE *)(a1 + 1509))
    v6 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 2240) + 8) - **(_QWORD **)(a1 + 2240)) >> 2;
  else
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 120))(*(_QWORD *)(a1 + 560)) - 1;
  kaldi::CuMatrix<float>::Resize(a3, v280, v6, 0, 0);
  v8 = v280;
  v278 = a3;
  if (*(_DWORD *)(a1 + 836) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam batched, batch size: ", 26);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (*(_BYTE *)(a1 + 1508))
    {
      v57 = *(int *)(a1 + 2116);
      v58 = *(_QWORD *)(a1 + 1576);
      v59 = *(_QWORD *)(a1 + 168);
      v60 = operator new(8uLL);
      __p = v60;
      *v60 = v280;
      __src[0] = v60 + 1;
      __src[1] = v60 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v59 + 56))(v289, v59, &__p);
      v61 = (_QWORD *)(v58 + 32 * v57 + 24);
      v62 = v289[0];
      v289[0] = 0;
      v63 = *v61;
      *v61 = v62;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      v64 = v289[0];
      v289[0] = 0;
      if (v64)
        (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
      if (__p)
      {
        __src[0] = __p;
        operator delete(__p);
      }
      if ((int)v280 >= 1)
      {
        v65 = 0;
        do
        {
          (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v61 + 104))(*v61, v65, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v65));
          v65 = (v65 + 1);
        }
        while ((_DWORD)v280 != (_DWORD)v65);
      }
      v66 = *(int *)(a1 + 2120);
      v67 = *(_QWORD *)(a1 + 1576);
      v68 = *(_QWORD *)(a1 + 168);
      v69 = operator new(8uLL);
      __p = v69;
      *v69 = v280;
      __src[0] = v69 + 1;
      __src[1] = v69 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v68 + 56))(v289, v68, &__p);
      v70 = (uint64_t *)(v67 + 32 * v66 + 24);
      v71 = v289[0];
      v289[0] = 0;
      v72 = *v70;
      *v70 = (uint64_t)v71;
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      v73 = v289[0];
      v289[0] = 0;
      if (v73)
        (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
      if (__p)
      {
        __src[0] = __p;
        operator delete(__p);
      }
      if ((int)v280 >= 1)
      {
        v74 = 0;
        v75 = 8;
        do
        {
          v76 = *v70;
          v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + v75) - 16);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 112))(v77, 0);
          if (*(_BYTE *)(a1 + 1518))
            v79 = 0.0;
          else
            v79 = 1.0;
          (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v76 + 104))(v76, v74++, v78 - v79);
          v75 += 24;
        }
        while (v280 != v74);
      }
      memset(v289, 0, sizeof(v289));
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Inputs:", 17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        v80 = *(_QWORD *)(a1 + 1576);
        v81 = *(_QWORD *)(a1 + 1584);
        while (v80 != v81)
        {
          if (*(char *)(v80 + 23) < 0)
          {
            v83 = *(_QWORD *)(v80 + 8);
            if (v83 == 8)
            {
              v82 = *(_QWORD **)v80;
              goto LABEL_115;
            }
            if (v83 != 18
              || (**(_QWORD **)v80 == 0x74756F5F76657270
                ? (v84 = *(_QWORD *)(*(_QWORD *)v80 + 8) == 0x656B6F745F747570)
                : (v84 = 0),
                  v84 ? (v85 = *(unsigned __int16 *)(*(_QWORD *)v80 + 16) == 29550) : (v85 = 0),
                  !v85))
            {
LABEL_116:
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
                v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
                v87 = *(char *)(v80 + 23);
                if (v87 >= 0)
                  v88 = v80;
                else
                  v88 = *(_QWORD *)v80;
                if (v87 >= 0)
                  v89 = *(unsigned __int8 *)(v80 + 23);
                else
                  v89 = *(_QWORD *)(v80 + 8);
                v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v88, v89);
                v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)": ", 2);
                kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v80 + 24), &v296);
                if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v92 = &v296;
                else
                  v92 = (std::string *)v296.__r_.__value_.__r.__words[0];
                if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v296.__r_.__value_.__r.__words[2]);
                else
                  size = v296.__r_.__value_.__l.__size_;
                v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v92, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" [ ", 3);
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v80 + 24) + 112))(*(_QWORD *)(v80 + 24), 0);
                v95 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v80 + 24) + 112))(*(_QWORD *)(v80 + 24), 1);
                v96 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" ", 1);
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v80 + 24) + 112))(*(_QWORD *)(v80 + 24), 2);
                v97 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" ...", 4);
LABEL_152:
                if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v296.__r_.__value_.__l.__data_);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                goto LABEL_155;
              }
              goto LABEL_155;
            }
          }
          else
          {
            if (*(_BYTE *)(v80 + 23) != 18)
            {
              v82 = (_QWORD *)v80;
              if (*(_BYTE *)(v80 + 23) != 8)
                goto LABEL_116;
LABEL_115:
              if (*v82 != 0x6E6F697469736F70)
                goto LABEL_116;
              goto LABEL_138;
            }
            if (*(_QWORD *)v80 != 0x74756F5F76657270
              || *(_QWORD *)(v80 + 8) != 0x656B6F745F747570
              || *(_WORD *)(v80 + 16) != 29550)
            {
              goto LABEL_116;
            }
          }
LABEL_138:
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
            v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            v101 = *(char *)(v80 + 23);
            if (v101 >= 0)
              v102 = v80;
            else
              v102 = *(_QWORD *)v80;
            if (v101 >= 0)
              v103 = *(unsigned __int8 *)(v80 + 23);
            else
              v103 = *(_QWORD *)(v80 + 8);
            v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, v102, v103);
            v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v80 + 24), &v296);
            if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = &v296;
            else
              v106 = (std::string *)v296.__r_.__value_.__r.__words[0];
            if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v107 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
            else
              v107 = v296.__r_.__value_.__l.__size_;
            v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v106, v107);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)" [ ", 3);
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v80 + 24) + 112))(*(_QWORD *)(v80 + 24), 0);
            v109 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" ...", 4);
            goto LABEL_152;
          }
LABEL_155:
          v80 += 32;
        }
      }
      v110 = *(_QWORD *)(a1 + 168);
      if (*(char *)(a1 + 1959) < 0)
        std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a1 + 1936), *(_QWORD *)(a1 + 1944));
      else
        v296 = *(std::string *)(a1 + 1936);
      __p = 0;
      __src[0] = 0;
      __src[1] = 0;
      __p = operator new(0x18uLL);
      __src[0] = __p;
      __src[1] = (char *)__p + 24;
      __src[0] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__src[1], (__int128 *)&v296, &v297, (std::string *)__p);
      p_p = 0;
      v284 = 0;
      v285 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(_QWORD *)v110 + 120))(v110, a1 + 1576, &__p, &p_p, v289);
      v286[0] = (void **)&p_p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v286);
      p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v296.__r_.__value_.__l.__data_);
      if (kaldi::g_kaldi_verbose_level <= 2)
      {
        v120 = v289[0];
      }
      else
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Outputs:", 18);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        v120 = v289[0];
        v121 = v289[1];
        if (v289[1] == v289[0])
        {
          v120 = v289[1];
        }
        else
        {
          v122 = 0;
          v123 = kaldi::g_kaldi_verbose_level;
          do
          {
            if (v123 >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
              v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              v125 = *(char *)(a1 + 1959);
              if (v125 >= 0)
                v126 = a1 + 1936;
              else
                v126 = *(_QWORD *)(a1 + 1936);
              if (v125 >= 0)
                v127 = *(unsigned __int8 *)(a1 + 1959);
              else
                v127 = *(_QWORD *)(a1 + 1944);
              v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, v126, v127);
              v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*((kaldi::quasar::ComputeEngineBufferItf **)v289[0] + v122), &v296);
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v130 = &v296;
              else
                v130 = (std::string *)v296.__r_.__value_.__r.__words[0];
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v131 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
              else
                v131 = v296.__r_.__value_.__l.__size_;
              v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" [ ", 3);
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v289[0] + v122) + 112))(*((_QWORD *)v289[0] + v122), 0);
              v133 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v289[0] + v122) + 112))(*((_QWORD *)v289[0] + v122), 1);
              v134 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v289[0] + v122) + 112))(*((_QWORD *)v289[0] + v122), 2);
              v135 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" ...", 4);
              if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v296.__r_.__value_.__l.__data_);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              v123 = kaldi::g_kaldi_verbose_level;
              v120 = v289[0];
              v121 = v289[1];
            }
            ++v122;
          }
          while (v122 < (v121 - (_BYTE *)v120) >> 3);
        }
      }
      v136 = *(_QWORD *)(a1 + 1552);
      v137 = *v120;
      *v120 = 0;
      v138 = *(_QWORD *)(v136 + 24);
      *(_QWORD *)(v136 + 24) = v137;
      if (v138)
        (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
      __p = v289;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v8 = v280;
    }
    else
    {
      v111 = *(int *)(a1 + 2132);
      v112 = *(_QWORD *)(a1 + 1552);
      v113 = *(_QWORD *)(a1 + 184);
      v114 = operator new(8uLL);
      __p = v114;
      *v114 = v280;
      __src[0] = v114 + 1;
      __src[1] = v114 + 1;
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v113 + 56))(v289, v113, &__p);
      v115 = (_QWORD *)(v112 + 32 * v111 + 24);
      v116 = v289[0];
      v289[0] = 0;
      v117 = *v115;
      *v115 = v116;
      if (v117)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
      v118 = v289[0];
      v289[0] = 0;
      if (v118)
        (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
      if (__p)
      {
        __src[0] = __p;
        operator delete(__p);
      }
      if ((int)v280 >= 1)
      {
        v119 = 0;
        do
        {
          (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v115 + 104))(*v115, v119, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v119));
          v119 = (v119 + 1);
        }
        while ((_DWORD)v280 != (_DWORD)v119);
      }
    }
    if (*(_QWORD *)(a1 + 2088) != *(_QWORD *)(a1 + 2080))
    {
      v139 = 0;
      do
      {
        v140 = *(int *)(a1 + 2112);
        v141 = *(_QWORD *)(a1 + 1552);
        v142 = *(_QWORD *)(a1 + 184);
        v143 = *(int *)(a1 + 2456);
        v144 = operator new(0x18uLL);
        __src[0] = v144 + 3;
        __src[1] = v144 + 3;
        *v144 = 1;
        v144[1] = v280;
        v144[2] = v143;
        __p = v144;
        (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v142 + 56))(v289, v142, &__p);
        v145 = (_QWORD *)(v141 + 32 * (v140 + (int)v139) + 24);
        v146 = v289[0];
        v289[0] = 0;
        v147 = *v145;
        *v145 = v146;
        if (v147)
          (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
        v148 = v289[0];
        v289[0] = 0;
        if (v148)
          (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
        if (__p)
        {
          __src[0] = __p;
          operator delete(__p);
        }
        if ((int)v8 >= 1)
        {
          v149 = 0;
          v150 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v145 + 72))(*v145, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + v149) + 16 * v139), 0, *(unsigned int *)(a1 + 2456), (*(_DWORD *)(a1 + 2456) * v150++));
            v149 += 24;
          }
          while (24 * v8 != v149);
        }
        ++v139;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 2088) - *(_QWORD *)(a1 + 2080)) >> 3) > v139);
    }
    if (!*(_BYTE *)(a1 + 1515))
      goto LABEL_234;
    v151 = *(int *)(a1 + 2136);
    v152 = *(_QWORD *)(a1 + 1552);
    v153 = *(_QWORD *)(a1 + 184);
    v154 = operator new(8uLL);
    __p = v154;
    *v154 = v280;
    __src[0] = v154 + 1;
    __src[1] = v154 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v153 + 56))(v289, v153, &__p);
    v155 = (uint64_t *)(v152 + 32 * v151 + 24);
    v156 = v289[0];
    v289[0] = 0;
    v157 = *v155;
    *v155 = (uint64_t)v156;
    if (v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
    v158 = v289[0];
    v289[0] = 0;
    if (v158)
      (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
    if (__p)
    {
      __src[0] = __p;
      operator delete(__p);
    }
    if (*(char *)(a1 + 1887) < 0)
    {
      if (!*(_QWORD *)(a1 + 1872))
        goto LABEL_226;
    }
    else if (!*(_BYTE *)(a1 + 1887))
    {
      goto LABEL_226;
    }
    v159 = *(_QWORD *)(a1 + 184);
    v160 = operator new(8uLL);
    __p = v160;
    *v160 = v280;
    __src[0] = v160 + 1;
    __src[1] = v160 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v159 + 56))(v289, v159, &__p);
    v161 = *(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2144);
    v162 = v289[0];
    v289[0] = 0;
    v163 = *(_QWORD *)(v161 + 24);
    *(_QWORD *)(v161 + 24) = v162;
    if (v163)
      (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
    v164 = v289[0];
    v289[0] = 0;
    if (v164)
      (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
    if (__p)
    {
      __src[0] = __p;
      operator delete(__p);
    }
LABEL_226:
    if ((int)v280 >= 1)
    {
      v165 = 0;
      v166 = 8;
      while (1)
      {
        v167 = *v155;
        v168 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + v166) - 16);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 112))(v168, 0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v167 + 104))(v167, v165);
        if ((*(char *)(a1 + 1887) & 0x80000000) == 0)
          break;
        if (*(_QWORD *)(a1 + 1872))
          goto LABEL_232;
LABEL_233:
        ++v165;
        v166 += 24;
        if (v8 == v165)
          goto LABEL_234;
      }
      if (!*(_BYTE *)(a1 + 1887))
        goto LABEL_233;
LABEL_232:
      v169 = *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2136) + 24);
      v170 = 1.0 / ((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v169 + 112))(v169, v165) + 1.0);
      v171 = *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2144) + 24);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v171 + 104))(v171, v165, v170);
      goto LABEL_233;
    }
LABEL_234:
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v289, v279, a1 + 2360, (__int128 *)&__p);
    if (SHIBYTE(__src[1]) < 0)
      operator delete(__p);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Inputs:", 7);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      v172 = *(_QWORD *)(a1 + 1552);
      v173 = *(_QWORD *)(a1 + 1560);
      while (v172 != v173)
      {
        if (*(char *)(v172 + 23) < 0)
        {
          v175 = *(_QWORD *)(v172 + 8);
          if (v175 == 8)
          {
            v174 = *(_QWORD **)v172;
            goto LABEL_253;
          }
          if (v175 != 18
            || (**(_QWORD **)v172 == 0x74756F5F76657270
              ? (v176 = *(_QWORD *)(*(_QWORD *)v172 + 8) == 0x656B6F745F747570)
              : (v176 = 0),
                v176 ? (v177 = *(unsigned __int16 *)(*(_QWORD *)v172 + 16) == 29550) : (v177 = 0),
                !v177))
          {
LABEL_254:
            if (kaldi::g_kaldi_verbose_level >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
              v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              v179 = *(char *)(v172 + 23);
              if (v179 >= 0)
                v180 = v172;
              else
                v180 = *(_QWORD *)v172;
              if (v179 >= 0)
                v181 = *(unsigned __int8 *)(v172 + 23);
              else
                v181 = *(_QWORD *)(v172 + 8);
              v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, v180, v181);
              v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v172 + 24), &v296);
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v184 = &v296;
              else
                v184 = (std::string *)v296.__r_.__value_.__r.__words[0];
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v185 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
              else
                v185 = v296.__r_.__value_.__l.__size_;
              v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)v184, v185);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)" [ ", 3);
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v172 + 24) + 112))(*(_QWORD *)(v172 + 24), 0);
              v187 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v172 + 24) + 112))(*(_QWORD *)(v172 + 24), 1);
              v188 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v172 + 24) + 112))(*(_QWORD *)(v172 + 24), 2);
              v189 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)" ...", 4);
LABEL_290:
              if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v296.__r_.__value_.__l.__data_);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              goto LABEL_293;
            }
            goto LABEL_293;
          }
        }
        else
        {
          if (*(_BYTE *)(v172 + 23) != 18)
          {
            v174 = (_QWORD *)v172;
            if (*(_BYTE *)(v172 + 23) != 8)
              goto LABEL_254;
LABEL_253:
            if (*v174 != 0x6E6F697469736F70)
              goto LABEL_254;
            goto LABEL_276;
          }
          if (*(_QWORD *)v172 != 0x74756F5F76657270
            || *(_QWORD *)(v172 + 8) != 0x656B6F745F747570
            || *(_WORD *)(v172 + 16) != 29550)
          {
            goto LABEL_254;
          }
        }
LABEL_276:
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
          v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
          v193 = *(char *)(v172 + 23);
          if (v193 >= 0)
            v194 = v172;
          else
            v194 = *(_QWORD *)v172;
          if (v193 >= 0)
            v195 = *(unsigned __int8 *)(v172 + 23);
          else
            v195 = *(_QWORD *)(v172 + 8);
          v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, v194, v195);
          v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)": ", 2);
          kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v172 + 24), &v296);
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v198 = &v296;
          else
            v198 = (std::string *)v296.__r_.__value_.__r.__words[0];
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v199 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
          else
            v199 = v296.__r_.__value_.__l.__size_;
          v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)v198, v199);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)" [ ", 3);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v172 + 24) + 112))(*(_QWORD *)(v172 + 24), 0);
          v201 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)" ...", 4);
          goto LABEL_290;
        }
LABEL_293:
        v172 += 32;
      }
    }
    v202 = *(_QWORD *)(a1 + 184);
    __p = 0;
    __src[0] = 0;
    __src[1] = 0;
    v203 = (_QWORD *)(a1 + 1600);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v202 + 120))(v202, a1 + 1552, a1 + 2032, &__p, a1 + 1600);
    v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v296);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Outputs:", 8);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      v205 = *(_QWORD *)(a1 + 1608);
      v206 = *(_QWORD *)(a1 + 1600);
      if (v205 != v206)
      {
        v207 = 0;
        v208 = 0;
        v209 = kaldi::g_kaldi_verbose_level;
        do
        {
          if (v209 >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
            v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            v211 = *(_QWORD *)(a1 + 2032) + v207;
            v212 = *(char *)(v211 + 23);
            if (v212 >= 0)
              v213 = *(_QWORD *)(a1 + 2032) + v207;
            else
              v213 = *(_QWORD *)v211;
            if (v212 >= 0)
              v214 = *(unsigned __int8 *)(v211 + 23);
            else
              v214 = *(_QWORD *)(v211 + 8);
            v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v213, v214);
            v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(*v203 + 8 * v208), &v296);
            if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v217 = &v296;
            else
              v217 = (std::string *)v296.__r_.__value_.__r.__words[0];
            if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v218 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
            else
              v218 = v296.__r_.__value_.__l.__size_;
            v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)v217, v218);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)" [ ", 3);
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*v203 + 8 * v208) + 112))(*(_QWORD *)(*v203 + 8 * v208), 0);
            v220 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)" ", 1);
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*v203 + 8 * v208) + 112))(*(_QWORD *)(*v203 + 8 * v208), 1);
            v221 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)" ", 1);
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*v203 + 8 * v208) + 112))(*(_QWORD *)(*v203 + 8 * v208), 2);
            v222 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)" ...", 4);
            if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v296.__r_.__value_.__l.__data_);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            v209 = kaldi::g_kaldi_verbose_level;
            v205 = *(_QWORD *)(a1 + 1608);
            v206 = *(_QWORD *)(a1 + 1600);
          }
          ++v208;
          v207 += 24;
        }
        while (v208 < (v205 - v206) >> 3);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v289, v204);
    if (*(_QWORD *)(a1 + 2088) != *(_QWORD *)(a1 + 2080))
    {
      v223 = 0;
      v282 = vdupq_n_s64(1uLL);
      do
      {
        v224 = 0;
        v225 = *(_QWORD *)(a1 + 1600);
        v226 = *(int *)(a1 + 2108) + (uint64_t)(int)v223;
        memset(v289, 0, sizeof(v289));
        while (v224 != (v280 & ~((int)v280 >> 31)))
        {
          v227 = *(_QWORD *)(a1 + 184);
          v228 = *(int *)(a1 + 2456);
          v229 = (int64x2_t *)operator new(0x18uLL);
          v296.__r_.__value_.__l.__size_ = (std::string::size_type)&v229[1].u64[1];
          v296.__r_.__value_.__r.__words[2] = (std::string::size_type)&v229[1].u64[1];
          *v229 = v282;
          v229[1].i64[0] = v228;
          v296.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
          (*(void (**)(void ***__return_ptr, uint64_t, std::string *))(*(_QWORD *)v227 + 56))(&p_p, v227, &v296);
          v230 = (char *)v289[1];
          if (v289[1] >= v289[2])
          {
            v233 = ((char *)v289[1] - (char *)v289[0]) >> 3;
            if ((unint64_t)(v233 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v234 = ((char *)v289[2] - (char *)v289[0]) >> 2;
            if (v234 <= v233 + 1)
              v234 = v233 + 1;
            if ((void *)((char *)v289[2] - (char *)v289[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
              v235 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v235 = v234;
            __src[3] = &v289[2];
            if (v235)
              v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v289[2], v235);
            else
              v236 = 0;
            v237 = (void ***)&v236[8 * v233];
            v238 = &v236[8 * v235];
            __src[2] = v238;
            v239 = p_p;
            p_p = 0;
            *v237 = v239;
            v232 = v237 + 1;
            __src[1] = v237 + 1;
            v241 = v289[0];
            v240 = v289[1];
            if (v289[1] == v289[0])
            {
              v243 = vdupq_n_s64((unint64_t)v289[1]);
            }
            else
            {
              do
              {
                v242 = (void **)*--v240;
                *v240 = 0;
                *--v237 = v242;
              }
              while (v240 != v241);
              v243 = *(int64x2_t *)v289;
              v232 = __src[1];
              v238 = (char *)__src[2];
            }
            v289[0] = v237;
            v289[1] = v232;
            *(int64x2_t *)__src = v243;
            v244 = v289[2];
            v289[2] = v238;
            __src[2] = v244;
            __p = (void *)v243.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            v231 = p_p;
            p_p = 0;
            *(_QWORD *)v289[1] = v231;
            v232 = v230 + 8;
          }
          v289[1] = v232;
          v245 = p_p;
          p_p = 0;
          if (v245)
            (*((void (**)(void **))*v245 + 1))(v245);
          if (v296.__r_.__value_.__r.__words[0])
          {
            v296.__r_.__value_.__l.__size_ = v296.__r_.__value_.__r.__words[0];
            operator delete(v296.__r_.__value_.__l.__data_);
          }
          v246 = *(_DWORD *)(a1 + 2456);
          v247 = (v246 * v224++);
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)v289[1] - 1) + 72))(*((_QWORD *)v289[1] - 1), *(_QWORD *)(v225 + 8 * v226), v247, (v246 * v224), 0);
        }
        if ((int)v280 >= 1)
        {
          v248 = 0;
          do
          {
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + 24 * v248) + 16 * v223), (uint64_t *)v289[0] + v248);
            ++v248;
          }
          while (v248 != v280);
        }
        __p = v289;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        ++v223;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 2088) - *(_QWORD *)(a1 + 2080)) >> 3) > v223);
    }
    if (!*(_BYTE *)(a1 + 1506) && !*(_BYTE *)(a1 + 1507))
    {
      v277 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
      (*(void (**)(uint64_t, int32x2_t *))(*(_QWORD *)v277 + 32))(v277, v278);
LABEL_352:
      if (!*(_BYTE *)(a1 + 2164))
      {
LABEL_361:
        if (*(_BYTE *)(a1 + 1515) && (int)v280 >= 1)
        {
          v265 = 0;
          do
          {
            v266 = *(_QWORD *)(*(_QWORD *)(a1 + 2432) + v265 + 8);
            v268 = *(_QWORD *)(v266 - 16);
            v267 = (uint64_t *)(v266 - 16);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v268 + 16))(&__p);
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(v267, (uint64_t *)&__p);
            v269 = __p;
            __p = 0;
            if (v269)
              (*(void (**)(void *))(*(_QWORD *)v269 + 8))(v269);
            v270 = *v267;
            v271 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v270 + 112))(v270, 0);
            (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v270 + 104))(v270, 0, v271 + 1.0);
            v265 += 24;
          }
          while (24 * v280 != v265);
        }
        goto LABEL_367;
      }
      v289[2] = 0;
      *(_QWORD *)&v290 = 0;
      v289[0] = &unk_1E5D341C8;
      v289[1] = 0;
      v252 = *(int *)(a1 + 2148);
      v253 = *(_QWORD *)(a1 + 1600);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v253 + 8 * v252) + 40))(*(_QWORD *)(v253 + 8 * v252), v289);
      v254 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v253 + 8 * v252) + 160))(*(_QWORD *)(v253 + 8 * v252), 2);
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 2192), v280, v254, 1, 0);
      v255 = v254 * v280;
      __p = &unk_1E5D29D70;
      __src[0] = v289[1];
      __src[2] = (void *)v290;
      __src[1] = (void *)(v254 * v280);
      kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1 + 2192, (uint64_t)&__p);
      if (*(int *)(a1 + 2152) >= 2)
      {
        v256 = 1;
        v257 = (int)v255;
        v258 = 4 * (int)v255;
        do
        {
          kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, v280, v254, 1, 0, 0);
          v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D29D70;
          v296.__r_.__value_.__l.__size_ = (std::string::size_type)v289[1] + v258;
          *(_QWORD *)&v297 = v290;
          v296.__r_.__value_.__r.__words[2] = v255;
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&__p, (uint64_t)&v296);
          kaldi::CuMatrixBase<float>::AddMat(a1 + 2192, (uint64_t)&__p, 111, 1.0, 1.0);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          ++v256;
          v258 += 4 * (int)v255;
          v257 += (int)v255;
        }
        while (v256 < *(int *)(a1 + 2152));
      }
      v259 = *(unsigned __int8 *)(a1 + 1510);
      v260 = *(unsigned __int8 *)(a1 + 1511);
      if (!*(_BYTE *)(a1 + 1510))
      {
        if (!*(_BYTE *)(a1 + 1511))
        {
LABEL_360:
          v289[0] = &unk_1E5D341C8;
          kaldi::CuVector<float>::Destroy((uint64_t)v289);
          goto LABEL_361;
        }
        v260 = 1;
      }
      v261 = v254 - v260 - v259;
      v262 = (void *)(*(_QWORD *)(a1 + 2200) + 4 * v259);
      v263 = *(_DWORD *)(a1 + 2220) - v259;
      v264 = *(void **)(a1 + 2224);
      *(void **)((char *)&__src[1] + 4) = *(void **)(a1 + 2212);
      LODWORD(__src[1]) = v261;
      HIDWORD(__src[2]) = v263;
      __src[3] = v264;
      __p = &unk_1E5D29D40;
      __src[0] = v262;
      kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 2192), (int32x2_t *)&__p);
      __p = &unk_1E5D29D40;
      memset(__src, 0, sizeof(__src));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
      goto LABEL_360;
    }
    v290 = 0u;
    *(_OWORD *)&v289[1] = 0u;
    v289[0] = &unk_1E5D34170;
    v291 = 0;
    v249 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v249 + 32))(v249, v289);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v296, v279, a1 + 2368, (__int128 *)&__p);
    if (SHIBYTE(__src[1]) < 0)
      operator delete(__p);
    v251 = *(uint64_t **)(a1 + 2248);
    if (!v251)
    {
      if (!*(_BYTE *)(a1 + 1506))
      {
        if (*(_BYTE *)(a1 + 1507))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        goto LABEL_351;
      }
      v251 = (uint64_t *)(a1 + 1128);
    }
    kaldi::nnet1::Nnet::Feedforward(v251, (uint64_t)v289, v278, -1, 0);
LABEL_351:
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v296, v250);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v289);
    goto LABEL_352;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Iterating over batch, batch size: ", 34);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if ((_DWORD)v280)
  {
    v9 = 0;
    v281 = (uint64_t *)(a1 + 1552);
    while (1)
    {
      if (*(_BYTE *)(a1 + 1508))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 1576) + 32 * *(int *)(a1 + 2116) + 24);
        (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v10 + 104))(v10, 0, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v9));
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1576) + 32 * *(int *)(a1 + 2120) + 24);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + 24 * v9 + 8) - 16);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 112))(v12, 0);
        if (*(_BYTE *)(a1 + 1518))
          v14 = 0.0;
        else
          v14 = 1.0;
        (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v11 + 104))(v11, 0, v13 - v14);
        __p = 0;
        __src[0] = 0;
        __src[1] = 0;
        v15 = *(_QWORD *)(a1 + 168);
        if (*(char *)(a1 + 1959) < 0)
          std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(a1 + 1936), *(_QWORD *)(a1 + 1944));
        else
          v296 = *(std::string *)(a1 + 1936);
        memset(v289, 0, sizeof(v289));
        p_p = v289;
        LOBYTE(v284) = 0;
        v289[0] = operator new(0x18uLL);
        v289[1] = v289[0];
        v289[2] = (char *)v289[0] + 24;
        v289[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v289[2], (__int128 *)&v296, &v297, (std::string *)v289[0]);
        p_p = 0;
        v284 = 0;
        v285 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(_QWORD *)v15 + 120))(v15, a1 + 1576, v289, &p_p, &__p);
        v286[0] = (void **)&p_p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v286);
        p_p = v289;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
        if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v296.__r_.__value_.__l.__data_);
        v17 = *v281;
        v18 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        v19 = *(_QWORD *)(v17 + 24);
        *(_QWORD *)(v17 + 24) = v18;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v289[0] = &__p;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v289);
      }
      else
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2132) + 24);
        (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v16 + 104))(v16, 0, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v9));
      }
      if (*(_QWORD *)(a1 + 2088) != *(_QWORD *)(a1 + 2080))
      {
        v20 = 0;
        v21 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + 24 * v9) + v20)
                                                      + 16))(&__p);
          v22 = *(_QWORD *)(a1 + 1552) + 32 * ((int)v21 + *(_DWORD *)(a1 + 2112));
          v23 = __p;
          __p = 0;
          v24 = *(_QWORD *)(v22 + 24);
          *(_QWORD *)(v22 + 24) = v23;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v25 = __p;
          __p = 0;
          if (v25)
            (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
          ++v21;
          v20 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 2088) - *(_QWORD *)(a1 + 2080)) >> 3) > v21);
      }
      if (!*(_BYTE *)(a1 + 1515))
        goto LABEL_43;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + 24 * v9 + 8)
                                                                - 16)
                                                  + 16))(&__p);
      v26 = *(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2136);
      v27 = __p;
      __p = 0;
      v28 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v26 + 24) = v27;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v29 = __p;
      __p = 0;
      if (v29)
        (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
      if (*(char *)(a1 + 1887) < 0)
        break;
      if (*(_BYTE *)(a1 + 1887))
        goto LABEL_40;
LABEL_41:
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Position input: ", 16);
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2136) + 24);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 112))(v33, 0);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
LABEL_43:
      std::string::basic_string[abi:ne180100]<0>(v289, "");
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v279, a1 + 2360, (__int128 *)v289);
      if (SHIBYTE(v289[2]) < 0)
        operator delete(v289[0]);
      v34 = *(_QWORD *)(a1 + 184);
      memset(v289, 0, sizeof(v289));
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **, uint64_t))(*(_QWORD *)v34 + 120))(v34, v281, a1 + 2032, v289, a1 + 1600);
      v296.__r_.__value_.__r.__words[0] = (std::string::size_type)v289;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v296);
      kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v35);
      if (*(_QWORD *)(a1 + 2088) != *(_QWORD *)(a1 + 2080))
      {
        v36 = 0;
        v37 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 1600)
                                                                    + 8 * ((int)v37 + *(_DWORD *)(a1 + 2108)))
                                                      + 16))(&__p);
          std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2432) + 24 * v9) + v36), (uint64_t *)&__p);
          v38 = __p;
          __p = 0;
          if (v38)
            (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
          ++v37;
          v36 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 2088) - *(_QWORD *)(a1 + 2080)) >> 3) > v37);
      }
      v286[1] = 0;
      v287 = 0;
      v288 = 0;
      v286[0] = (void **)&unk_1E5D341C8;
      if (*(_BYTE *)(a1 + 1506) || *(_BYTE *)(a1 + 1507))
      {
        *(_OWORD *)&v289[1] = 0u;
        v290 = 0u;
        v289[0] = &unk_1E5D34170;
        v291 = 0;
        *(_OWORD *)&v296.__r_.__value_.__r.__words[1] = 0u;
        v297 = 0u;
        v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D34170;
        v298 = 0;
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v39 + 32))(v39, v289);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&p_p, v279, a1 + 2368, (__int128 *)&__p);
        if (SHIBYTE(__src[1]) < 0)
          operator delete(__p);
        v40 = *(uint64_t **)(a1 + 2248);
        if (v40 || (v40 = (uint64_t *)(a1 + 1128), *(_BYTE *)(a1 + 1506)))
        {
          kaldi::nnet1::Nnet::Feedforward(v40, (uint64_t)v289, (int32x2_t *)&v296, -1, 0);
        }
        else if (*(_BYTE *)(a1 + 1507))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        __p = &unk_1E5D29D70;
        __src[0] = (void *)v296.__r_.__value_.__l.__size_;
        __src[2] = *((void **)&v297 + 1);
        __src[1] = (void *)LODWORD(v296.__r_.__value_.__r.__words[2]);
        kaldi::CuVector<float>::operator=((uint64_t)v286, (uint64_t)&__p);
        kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&p_p, v41);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v296);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v289);
      }
      else
      {
        v56 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 8 * *(int *)(a1 + 2156));
        (*(void (**)(uint64_t, void ***))(*(_QWORD *)v56 + 40))(v56, v286);
      }
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"readout layer size: ", 20);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
      v42 = a3;
      v43 = a3[2].i32[0];
      if (v43 < (int)v287)
      {
        kaldi::CuMatrix<float>::Resize(a3, v280, v287, 2, 0);
        v42 = a3;
        v43 = a3[2].i32[0];
      }
      v44 = (void *)(*(_QWORD *)&v42[1] + 4 * v42[3].i32[0] * (int)v9);
      v45 = (void *)v42[4];
      __p = &unk_1E5D29D70;
      __src[0] = v44;
      __src[2] = v45;
      __src[1] = (void *)v43;
      kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)v286);
      if (*(_BYTE *)(a1 + 2164))
      {
        memset(__src, 0, sizeof(__src));
        __p = &unk_1E5D34170;
        v294 = 0;
        v46 = *(_QWORD *)(*(_QWORD *)(a1 + 1600) + 8 * *(int *)(a1 + 2148));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v46 + 32))(v46, &__p);
        v47 = *(unsigned __int8 *)(a1 + 1510);
        v48 = LODWORD(__src[1]) - *(unsigned __int8 *)(a1 + 1511);
        v49 = v48 - v47;
        if (*(_QWORD *)(a1 + 2208) != __PAIR64__(v280, v49))
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 2192), v280, v49, 2, 0);
          LODWORD(v49) = *(_DWORD *)(a1 + 2208);
        }
        v50 = (void *)(*(_QWORD *)(a1 + 2200) + 4 * *(_DWORD *)(a1 + 2216) * (int)v9);
        v51 = *(_QWORD *)(a1 + 2224);
        v289[0] = &unk_1E5D29D70;
        v289[1] = v50;
        *(_QWORD *)&v290 = v51;
        v289[2] = (void *)v49;
        v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D29D70;
        v296.__r_.__value_.__l.__size_ = (std::string::size_type)__src[0] + 4 * v47;
        *(void **)&v297 = __src[3];
        v296.__r_.__value_.__r.__words[2] = v48;
        kaldi::CuVectorBase<float>::CopyFromVec(v289, (uint64_t)&v296);
        if (*(int *)(a1 + 2152) >= 2)
        {
          v52 = 1;
          do
          {
            v53 = (void *)(*(_QWORD *)(a1 + 2200) + 4 * *(_DWORD *)(a1 + 2216) * (int)v9);
            v54 = *(_DWORD *)(a1 + 2208);
            v55 = *(_QWORD *)(a1 + 2224);
            v289[0] = &unk_1E5D29D70;
            v289[1] = v53;
            *(_QWORD *)&v290 = v55;
            v289[2] = (void *)v54;
            v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D29D70;
            v296.__r_.__value_.__l.__size_ = (std::string::size_type)__src[0] + 4 * LODWORD(__src[2]) * v52 + 4 * v47;
            *(void **)&v297 = __src[3];
            v296.__r_.__value_.__r.__words[2] = v48;
            kaldi::CuVectorBase<float>::AddVec((uint64_t)v289, (uint64_t)&v296, 1.0, 1.0);
            ++v52;
          }
          while (v52 < *(_DWORD *)(a1 + 2152));
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      }
      v286[0] = (void **)&unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v286);
      if (++v9 == v280)
        goto LABEL_361;
    }
    if (!*(_QWORD *)(a1 + 1872))
      goto LABEL_41;
LABEL_40:
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2136) + 24);
    v31 = 1.0 / ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 112))(v30, 0) + 1.0);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 1552) + 32 * *(int *)(a1 + 2144) + 24);
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v32 + 104))(v32, 0, v31);
    goto LABEL_41;
  }
LABEL_367:
  if (*(_BYTE *)(a1 + 2164))
  {
    v272 = *(_DWORD *)(a1 + 2152);
    if (v272 >= 2)
    {
      v273 = 1.0 / (double)v272;
      kaldi::CuMatrixBase<float>::Scale(a1 + 2192, v273);
    }
    __p = 0;
    __src[0] = 0;
    __src[1] = 0;
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 2192, (int *)&__p);
    begin = *(std::vector<unsigned int>::pointer *)(a1 + 2168);
    v275 = (*(_QWORD *)(a1 + 2176) - (_QWORD)begin) >> 2;
    if ((_DWORD)__p != (_DWORD)v275)
    {
      v276 = (std::vector<unsigned int> *)(a1 + 2168);
      std::vector<int>::resize(v276, (int)__p);
      begin = v276->__begin_;
      LODWORD(v275) = (_DWORD)__p;
    }
    memcpy(begin, __src[0], 4 * (int)v275);
    if (__src[0])
      free(__src[0]);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v295, v7);
}

void sub_1ADB039B4(int a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t v49;

  if (a49)
    free(a49);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v49 - 240), a2);
  JUMPOUT(0x1ADB03CD0);
}

void sub_1ADB039C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1ADB039E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1ADB039EC()
{
  JUMPOUT(0x1ADB03BE4);
}

void sub_1ADB03A0C()
{
  JUMPOUT(0x1ADB03C18);
}

void sub_1ADB03A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  a41 = &a48;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a41);
  JUMPOUT(0x1ADB03CC8);
}

void sub_1ADB03A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t v48;
  clockid_t v49;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  a48 = (void **)&a41;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v49);
  JUMPOUT(0x1ADB03CD0);
}

void sub_1ADB03A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  clockid_t v42;

  kaldi::CuVector<float>::~CuVector(&a41);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v41 - 240), v42);
  JUMPOUT(0x1ADB03CD0);
}

void sub_1ADB03A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a48);
  JUMPOUT(0x1ADB03A4CLL);
}

void sub_1ADB03A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  clockid_t v49;
  clockid_t v50;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a41, v49);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v50);
  JUMPOUT(0x1ADB03CD0);
}

void sub_1ADB03A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void ***a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  a37 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a31 = (void **)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a31);
  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  a41 = &a48;
  JUMPOUT(0x1ADB03C98);
}

void sub_1ADB03B14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADB03B40);
}

void sub_1ADB03B2C(uint64_t a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a31, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v41 - 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a41);
  JUMPOUT(0x1ADB03C5CLL);
}

void sub_1ADB03B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  clockid_t v49;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v49);
  JUMPOUT(0x1ADB03CD0);
}

void sub_1ADB03B68(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1ADB03B78()
{
  JUMPOUT(0x1ADB03C58);
}

void sub_1ADB03B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  JUMPOUT(0x1ADB03C58);
}

void sub_1ADB03B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 < 0)
    JUMPOUT(0x1ADB03BA4);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240));
  JUMPOUT(0x1ADB03CD0);
}

void sub_1ADB03BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  *(_QWORD *)(v41 - 192) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 192));
  JUMPOUT(0x1ADB03C1CLL);
}

void sub_1ADB03BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t *a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  a48 = &a41;
  JUMPOUT(0x1ADB03C98);
}

void sub_1ADB03BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  clockid_t v49;

  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a41, v49);
  JUMPOUT(0x1ADB03CC8);
}

void sub_1ADB03C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  void *v42;

  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  v42 = *(void **)(v41 - 192);
  if (v42)
  {
    *(_QWORD *)(v41 - 184) = v42;
    operator delete(v42);
  }
  *(_QWORD *)(v41 - 192) = &a41;
  JUMPOUT(0x1ADB03C98);
}

void sub_1ADB03C4C()
{
  JUMPOUT(0x1ADB03C54);
}

void sub_1ADB03C64()
{
  JUMPOUT(0x1ADB03C8CLL);
}

void sub_1ADB03CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240));
  JUMPOUT(0x1ADB03CD0);
}

_QWORD *std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45D98;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

double kaldi::quasar::Encdec::Finish(kaldi::quasar::Encdec *this, clockid_t a2)
{
  double result;

  result = *((double *)this + 287) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 282);
  *((double *)this + 287) = result;
  return result;
}

void kaldi::quasar::Encdec::ConstrainSoftmax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 **a5, __int128 **a6)
{
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD **v15;
  _QWORD *v16[2];
  void *__p;
  _DWORD *v18;
  uint64_t v19;
  void *v20;
  _DWORD *v21;
  uint64_t v22;

  if (*(_QWORD *)(a1 + 2240))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    kaldi::quasar::Encdec::Symbolize(a1, a5, (uint64_t)&v20, 0, 0);
    __p = 0;
    v18 = 0;
    v19 = 0;
    kaldi::quasar::Encdec::Symbolize(a1, a6, (uint64_t)&__p, 1, 0);
    v11 = v20;
    v12 = v21;
    while (v11 != v12)
      --*v11++;
    v13 = __p;
    v14 = v18;
    while (v13 != v14)
      --*v13++;
    v16[0] = 0;
    v16[1] = 0;
    v15 = v16;
    kaldi::quasar::Encdec::ConstrainSoftmax(a1, a2, a3, a4, (int **)&v20, (int **)&__p, &v15);
    std::__tree<int>::destroy((uint64_t)&v15, v16[0]);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
  }
}

void sub_1ADB03ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::ConstrainSoftmax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int **a5, int **a6, _QWORD *a7)
{
  std::vector<int> *v8;
  int v13;
  kaldi::nnet1::Nnet *v14;
  int v15;
  int v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  kaldi::nnet1::Nnet *v22;
  std::string::size_type v23;
  unint64_t v24;
  __int128 v25;
  std::string::size_type v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  kaldi::nnet1::Nnet *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string::size_type v38;
  kaldi::nnet1::Nnet *v39;
  kaldi::nnet1::Nnet *v40;
  void **v41[3];
  std::string v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE v47[40];
  void *__p;
  _BYTE *v49;
  uint64_t v50;
  kaldi::nnet1::Nnet *v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t *v55;
  void ***v56;
  std::string v57;
  __int128 v58;

  *(_QWORD *)&v58 = *MEMORY[0x1E0C80C00];
  v8 = *(std::vector<int> **)(a1 + 2240);
  if (v8)
  {
    if (*(_BYTE *)(a1 + 1506))
    {
      v13 = kaldi::quasar::Shortlist::MapShortlist(v8, a2, *(_DWORD *)(a1 + 828) - 1, *(_DWORD *)(a1 + 832) - 1, a3, a4, a5, a6, a7, 0);
      *(_BYTE *)(a1 + 1509) = v13;
      if (v13)
      {
        kaldi::quasar::ShortlistNnetBuilder::ConstrainSoftmax((kaldi::nnet1::Nnet *)(a1 + 1128), *(_QWORD **)(a1 + 2240), &v51);
        v14 = v51;
      }
      else
      {
        v14 = 0;
      }
      v51 = 0;
      std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 2248), v14);
      v22 = v51;
      v51 = 0;
      if (v22)
      {
        kaldi::nnet1::Nnet::~Nnet(v22);
        MEMORY[0x1AF44D190]();
      }
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 828) - 1;
      v16 = *(_DWORD *)(a1 + 832) - 1;
      if (*(_BYTE *)(a1 + 1507))
      {
        if ((kaldi::quasar::Shortlist::MapShortlist(v8, a2, v15, v16, a3, a4, a5, a6, a7, 1) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v51, "Map shortlist error!");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
        }
        v17 = *(_QWORD *)(a1 + 2240);
        v49 = 0;
        v50 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2);
        v18.n128_f64[0] = kaldi::Matrix<float>::Matrix((uint64_t)v47);
        v19 = *(_QWORD *)(a1 + 200);
        v44 = 0;
        v45 = 0;
        v46 = 0;
        if (*(_DWORD *)(a1 + 2124))
        {
          v20 = __p;
          if (v49 != __p)
          {
            v21 = (v49 - (_BYTE *)__p) >> 2;
            if (v21 <= 1)
              v21 = 1;
            do
            {
              *v20++ += *(_DWORD *)(a1 + 2124);
              --v21;
            }
            while (v21);
          }
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, void **, _QWORD, __n128))(*(_QWORD *)v19 + 16))(&v57, v19, &__p, 0, v18);
        if (*(char *)(a1 + 2007) < 0)
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 1984), *(_QWORD *)(a1 + 1992));
        else
          v42 = *(std::string *)(a1 + 1984);
        v23 = v57.__r_.__value_.__r.__words[0];
        v57.__r_.__value_.__r.__words[0] = 0;
        v43 = v23;
        v24 = v45;
        if (v45 >= v46)
        {
          v28 = (uint64_t)(v45 - v44) >> 5;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = v46 - v44;
          if ((uint64_t)(v46 - v44) >> 4 > v29)
            v29 = v30 >> 4;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
            v31 = 0x7FFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          v55 = &v46;
          v32 = (kaldi::nnet1::Nnet *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v46, v31);
          v33 = (char *)v32 + 32 * v28;
          v51 = v32;
          v52 = v33;
          v54 = (char *)v32 + 32 * v34;
          v35 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
          *((_QWORD *)v33 + 2) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
          *(_OWORD *)v33 = v35;
          memset(&v42, 0, sizeof(v42));
          v36 = v43;
          v43 = 0;
          *((_QWORD *)v33 + 3) = v36;
          v53 = v33 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v44, &v51);
          v27 = v45;
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v51);
        }
        else
        {
          v25 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
          *(_QWORD *)(v45 + 16) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
          *(_OWORD *)v24 = v25;
          memset(&v42, 0, sizeof(v42));
          v26 = v43;
          v43 = 0;
          *(_QWORD *)(v24 + 24) = v26;
          v27 = v24 + 32;
        }
        v45 = v27;
        v37 = v43;
        v43 = 0;
        if (v37)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v37 + 8))(v37);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        v38 = v57.__r_.__value_.__r.__words[0];
        v57.__r_.__value_.__r.__words[0] = 0;
        if (v38)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v38 + 8))(v38);
        (*(void (**)(_QWORD))(**(_QWORD **)(v45 - 8) + 80))(*(_QWORD *)(v45 - 8));
        v51 = 0;
        v52 = 0;
        v53 = 0;
        if (*(char *)(a1 + 2031) < 0)
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a1 + 2008), *(_QWORD *)(a1 + 2016));
        else
          v57 = *(std::string *)(a1 + 2008);
        memset(&v42, 0, sizeof(v42));
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v42.__r_.__value_.__l.__size_ = v42.__r_.__value_.__r.__words[0];
        v42.__r_.__value_.__r.__words[2] = v42.__r_.__value_.__r.__words[0] + 24;
        v42.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42.__r_.__value_.__r.__words[2], (__int128 *)&v57, &v58, (std::string *)v42.__r_.__value_.__l.__data_);
        memset(v41, 0, sizeof(v41));
        (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, kaldi::nnet1::Nnet **))(*(_QWORD *)v19 + 120))(v19, &v44, &v42, v41, &v51);
        v56 = v41;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
        v41[0] = (void **)&v42;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v41);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)v51 + 24))(*(_QWORD *)v51, v47);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        v51 = (kaldi::nnet1::Nnet *)&v44;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
        kaldi::quasar::ShortlistNnetBuilder::ConstructNnet((uint64_t)v47, *(unsigned __int8 *)(a1 + 2128), *(_QWORD **)(a1 + 2240), &v51);
        v39 = v51;
        v51 = 0;
        std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 2248), v39);
        v40 = v51;
        v51 = 0;
        if (v40)
        {
          kaldi::nnet1::Nnet::~Nnet(v40);
          MEMORY[0x1AF44D190]();
        }
        *(_BYTE *)(a1 + 1509) = 1;
        kaldi::Matrix<float>::~Matrix((uint64_t)v47);
        if (__p)
        {
          v49 = __p;
          operator delete(__p);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 1509) = kaldi::quasar::Shortlist::MapShortlist(v8, a2, v15, v16, a3, a4, a5, a6, a7, 0);
      }
    }
  }
}

void sub_1ADB0440C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::GetSoftmaxEosId(kaldi::quasar::Encdec *this)
{
  if (*((_BYTE *)this + 1509))
    return *(unsigned int *)(*((_QWORD *)this + 280) + 24);
  else
    return (*((_DWORD *)this + 207) - 1);
}

uint64_t kaldi::quasar::Encdec::GetVocabWordIdx(kaldi::quasar::Encdec *this, uint64_t a2)
{
  if (*((_BYTE *)this + 1509))
    return *(unsigned int *)(**((_QWORD **)this + 280) + 4 * (int)a2);
  return a2;
}

unint64_t kaldi::quasar::Encdec::GetSoftmaxIdx(kaldi::quasar::Shortlist **this, uint64_t a2)
{
  if (*((_BYTE *)this + 1509))
    return kaldi::quasar::Shortlist::GetSoftmaxIdx(this[280], a2);
  else
    return a2;
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat(kaldi::quasar::ComputeEngineItf *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *__p[3];

  v6 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 152))(a2);
  std::vector<long long>::vector(__p, v6);
  if (v6 < 1)
  {
    v9 = 1;
  }
  else
  {
    v7 = 0;
    v8 = v6;
    LODWORD(v9) = 1;
    do
    {
      v10 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v7);
      *((_QWORD *)__p[0] + v7) = v10;
      v9 = (v10 * v9);
      ++v7;
    }
    while (v8 != v7);
  }
  (*(void (**)(kaldi::quasar::ComputeEngineItf *, void **))(*(_QWORD *)this + 56))(this, __p);
  (*(void (**)(_QWORD, const kaldi::quasar::ComputeEngineBufferItf *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a3 + 72))(*a3, a2, 0, v9, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADB04670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v13;

  v13 = *v11;
  *v11 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::ModelCompilationSpec::~ModelCompilationSpec(void **this)
{
  void **v2;

  *this = off_1E5D34088;
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  void **v2;

  *this = off_1E5D34088;
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  MEMORY[0x1AF44D190](this, 0x10B3C4071281136);
}

uint64_t kaldi::quasar::BPE::BPE(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_DWORD *)(a1 + 128) = 2139095039;
  *(_QWORD *)(a1 + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "@@");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "</w>");
  *(_DWORD *)(a1 + 184) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 192) = v6;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 216), "0.1");
  return a1;
}

void sub_1ADB04880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 183) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 159) < 0)
    operator delete(*v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v2 + 8));
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(void **this)
{
  void **v2;

  *this = &off_1E5D33C60;
  v2 = this + 23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 11), this[12]);
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::MTESNetworkPlan::~MTESNetworkPlan(void **this)
{
  *this = &unk_1E5D33200;
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
}

{
  *this = &unk_1E5D33200;
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::ComputeEngineItf::CreateZeroedDataFloat16()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::CopyFloat16(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2, kaldi::quasar::ComputeEngineBufferItf *a3)
{
  _QWORD v3[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat16(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat32(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::MTESNetworkPlan::Run(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t **a5)
{
  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

{
  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

void kaldi::quasar::ComputeEngineItf::RunFunction()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::PrepareRun()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::GetSharedInputOutputNames(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t kaldi::quasar::MTESNetworkPlan::prepare_network(uint64_t this)
{
  _QWORD v1[34];

  if ((*(char *)(this + 375) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(this + 375))
      return this;
LABEL_5:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  if (*(_QWORD *)(this + 360))
    goto LABEL_5;
  return this;
}

void kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(void **this)
{
  *this = &off_1E5D330B0;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(this);
  JUMPOUT(0x1AF44D190);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADB04E34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BPE::ProcessLine(uint64_t a1, uint64_t a2, float a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, " ", 1, (uint64_t)&v12);
  if (v13 - (_QWORD)v12 == 48)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v12 + 3, (uint64_t)__p);
    v15 = __p;
    *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 10) = a3;
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Wrong number of fields, ignoring : ", 35);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADB04F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  __p = (void *)(v15 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetUniqueChars(kaldi::quasar::BPE *this)
{
  const std::string *v1;
  const std::string *i;
  const void **v4;
  const void **v5;
  const void **v6;
  const void **v7;
  uint64_t v8;
  std::string __p;
  const void ***v10;

  v1 = (const std::string *)*((_QWORD *)this + 8);
  for (i = (const std::string *)*((_QWORD *)this + 9); v1 != i; ++v1)
  {
    kaldi::quasar::BPE::StripSeparator((uint64_t)this, v1, &__p);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    kaldi::quasar::BPE::SplitUtfString((int)this, &__p, (uint64_t)&v6);
    v4 = v6;
    v5 = v7;
    while (v4 != v5)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this, v4, (uint64_t)v4);
      v4 += 3;
    }
    v10 = &v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1ADB05070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::BPE::UnkModeToString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD v3[34];

  if (a1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Unknown BPE unknown mode");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5D47888[a1]);
}

void kaldi::quasar::BPE::StripSeparator(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  std::string::size_type v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  size_t v12;
  const std::string *v13;
  const void *v15;
  int v16;
  char v18;

  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0)
    v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v7 = a2->__r_.__value_.__l.__size_;
  v8 = *(char *)(a1 + 159);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 159);
  else
    v9 = *(_QWORD *)(a1 + 144);
  v10 = v7 - v9;
  if (v7 < v9)
    goto LABEL_34;
  if ((v5 & 0x80) != 0)
  {
    if (v9 == -1 || size < v10)
LABEL_39:
      std::string::__throw_out_of_range[abi:ne180100]();
    v12 = size - v10 >= v9 ? v9 : size - v10;
    v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v9 == -1 || v5 < v10)
      goto LABEL_39;
    v12 = v5 - v10 >= v9 ? v9 : v5 - v10;
    v13 = a2;
  }
  v15 = v8 >= 0 ? (const void *)(a1 + 136) : *(const void **)(a1 + 136);
  v16 = memcmp((char *)v13 + v10, v15, v12);
  if (v12 == v9 && v16 == 0)
  {
    std::string::basic_string(a3, a2, 0, v10, (std::allocator<char> *)&v18);
  }
  else
  {
LABEL_34:
    if ((v5 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(a3, a2->__r_.__value_.__l.__data_, size);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    }
  }
}

unint64_t kaldi::quasar::BPE::SplitUtfString(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type v4;
  BOOL v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v9;
  std::string *v10;
  std::string::value_type v11;
  uint64_t v12;
  BOOL v13;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  std::string::size_type v27;
  std::string __p;
  std::__split_buffer<std::string> __v;

  v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v7 = __str->__r_.__value_.__l.__size_;
  if (v7)
  {
    v9 = 0;
    do
    {
      v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!v5)
        v10 = __str;
      v11 = v10->__r_.__value_.__s.__data_[v9];
      if ((v11 & 0xF8) == 0xF0)
      {
        v12 = 4;
      }
      else if ((v11 & 0xF0) == 0xE0)
      {
        v12 = 3;
      }
      else
      {
        v13 = (v11 & 0xE0) == 192;
        v12 = 1;
        if (v13)
          v12 = 2;
      }
      if (v5)
        v4 = size;
      if (v9 + v12 > v4)
        v14 = 1;
      else
        v14 = v12;
      std::string::basic_string(&__p, __str, v9, v14, (std::allocator<char> *)&__v);
      v16 = *(_QWORD *)(a3 + 8);
      v15 = *(_QWORD *)(a3 + 16);
      if (v16 >= v15)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a3) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v21);
        else
          v22 = 0;
        v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v25 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v25;
        if (v26 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v17;
        *(_QWORD *)(a3 + 8) = v16 + 24;
      }
      v9 += v14;
      v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      else
        v27 = __str->__r_.__value_.__l.__size_;
    }
    while (v9 < v27);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

void sub_1ADB0545C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::wstring> *a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TimeBlock::TimeBlock(uint64_t a1, double *a2, uint64_t a3, __int128 *a4)
{
  __int128 v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(double *)(a1 + 16) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2) - *a2;
  return a1;
}

void sub_1ADB054FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TimeBlock::~TimeBlock(kaldi::quasar::TimeBlock *this, clockid_t a2)
{
  double *v3;
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  clockid_t v10;
  _QWORD *v11;
  _QWORD *v12;
  clockid_t v13;
  _QWORD v14[34];

  v3 = *(double **)this;
  **((double **)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2)
                          - *v3
                          - *((double *)this + 2)
                          + **((double **)this + 1);
  v4 = *((char *)this + 47);
  if (v4 < 0)
    v5 = *((_QWORD *)this + 4);
  else
    v5 = *((unsigned __int8 *)this + 47);
  if (v5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    v6 = *((char *)this + 47);
    if (v6 >= 0)
      v7 = (char *)this + 24;
    else
      v7 = (char *)*((_QWORD *)this + 3);
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)this + 47);
    else
      v8 = *((_QWORD *)this + 4);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v10);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" diff ", 6);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    LOBYTE(v4) = *((_BYTE *)this + 47);
  }
  if ((v4 & 0x80) != 0)
    operator delete(*((void **)this + 3));
}

uint64_t kaldi::quasar::TMTools::ModelCache<kaldi::quasar::ComputeEngineItf>::~ModelCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5CFEFC0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void kaldi::quasar::TMTools::ModelCache<kaldi::quasar::ComputeEngineItf>::~ModelCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5CFEFC0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::shared_ptr<kaldi::quasar::EspressoV2Plan>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Plan,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5CFFEA8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADB05744(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Plan *,std::shared_ptr<kaldi::quasar::EspressoV2Plan>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Plan,kaldi::quasar::EspressoV2Plan>,std::allocator<kaldi::quasar::EspressoV2Plan>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Plan *,std::shared_ptr<kaldi::quasar::EspressoV2Plan>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Plan,kaldi::quasar::EspressoV2Plan>,std::allocator<kaldi::quasar::EspressoV2Plan>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Plan *,std::shared_ptr<kaldi::quasar::EspressoV2Plan>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Plan,kaldi::quasar::EspressoV2Plan>,std::allocator<kaldi::quasar::EspressoV2Plan>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __int128 **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADB05848(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &,std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, __int128 **a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D421A8;
  a1[1] = 0;
  std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>::construct[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1ADB058B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D421A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D421A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Encdec::ModelCompilationSpec>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<kaldi::quasar::Encdec::ModelCompilationSpec>::construct[abi:ne180100]<kaldi::quasar::Encdec::ModelCompilationSpec,kaldi::quasar::Encdec::InferenceEngine const&,std::string &,std::string const&,std::vector<std::string> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, __int128 **a6)
{
  uint64_t v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string *v13;

  v9 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v12 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v11 = *(std::string *)a5;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  *(_QWORD *)a2 = off_1E5D34088;
  *(_QWORD *)(a2 + 8) = v9;
  *(std::string *)(a2 + 16) = v12;
  memset(&v12, 0, sizeof(v12));
  *(std::string *)(a2 + 40) = v11;
  memset(&v11, 0, sizeof(v11));
  *(std::string *)(a2 + 64) = v10;
  memset(&v10, 0, sizeof(v10));
  v13 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1ADB05A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    v9[1] = a1 + 1;
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, v4[4]))
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v7[4] + 40))(v7[4], *a3))
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::shared_ptr<kaldi::quasar::EspressoV2Chain>::shared_ptr[abi:ne180100]<kaldi::quasar::EspressoV2Chain,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5CFFEE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADB05C64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Chain *,std::shared_ptr<kaldi::quasar::EspressoV2Chain>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Chain,kaldi::quasar::EspressoV2Chain>,std::allocator<kaldi::quasar::EspressoV2Chain>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Chain *,std::shared_ptr<kaldi::quasar::EspressoV2Chain>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Chain,kaldi::quasar::EspressoV2Chain>,std::allocator<kaldi::quasar::EspressoV2Chain>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::EspressoV2Chain *,std::shared_ptr<kaldi::quasar::EspressoV2Chain>::__shared_ptr_default_delete<kaldi::quasar::EspressoV2Chain,kaldi::quasar::EspressoV2Chain>,std::allocator<kaldi::quasar::EspressoV2Chain>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::shared_ptr[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5CFFF18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADB05D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::MTESNetworkPlan *,std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_default_delete<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::MTESNetworkPlan>,std::allocator<kaldi::quasar::MTESNetworkPlan>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::MTESNetworkPlan *,std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_default_delete<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::MTESNetworkPlan>,std::allocator<kaldi::quasar::MTESNetworkPlan>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::MTESNetworkPlan *,std::shared_ptr<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_default_delete<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::MTESNetworkPlan>,std::allocator<kaldi::quasar::MTESNetworkPlan>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

__n128 std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADB05F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v15);
  }
}

void sub_1ADB0607C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__shared_ptr_emplace<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D457E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D457E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__construct_one_at_end[abi:ne180100]<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(a1 + 8) = v5 + 32;
}

void sub_1ADB06400(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t kaldi::EndPointer::EndPointer(uint64_t result, _OWORD *a2)
{
  float v2;
  _QWORD v4[34];

  *(_OWORD *)result = *a2;
  v2 = *(float *)(result + 12);
  if (v2 < 0.0 || v2 > 1.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "opts_.eos_probability_threshold >= 0.0 && opts_.eos_probability_threshold <= 1.0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::EndPointer::Enabled(kaldi::EndPointer *this)
{
  return *(unsigned __int8 *)this;
}

BOOL kaldi::EndPointer::IsEndPoint(kaldi::EndPointer *this, float a2, float a3, int a4, int a5, int a6)
{
  float v6;

  if (!*(_BYTE *)this)
    return 0;
  if (*((_DWORD *)this + 1) <= a4)
    return 1;
  if (a5 < 1)
    return 0;
  if (*((_DWORD *)this + 2) <= a6)
    return 1;
  v6 = *((float *)this + 3);
  if (v6 < a2)
    return 1;
  return v6 < a3;
}

void sub_1ADB065FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADB06F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{

  STACK[0x228] = (unint64_t)&a51;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);

  STACK[0x228] = (unint64_t)&a54;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  STACK[0x228] = (unint64_t)&a63;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x228]);

  _Unwind_Resume(a1);
}

id EARHelpers::MultiArrayFromJaggedVec(uint64_t **a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v16;
  id v17;
  _QWORD v18[5];
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v16 = *MEMORY[0x1E0C99768];
    do
    {
      v5 = (uint64_t *)operator new();
      v6 = *v4;
      *v4 = 0;
      *v5 = v6;
      v7 = v4[1];
      v4[1] = 0;
      v5[1] = v7;
      v8 = v4[2];
      v4[2] = 0;
      v5[2] = v8;
      v9 = objc_alloc(MEMORY[0x1E0C9E978]);
      v10 = *v5;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (v5[1] - *v5) >> 2);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 0;
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = ___ZN10EARHelpers23MultiArrayFromJaggedVecERNSt3__16vectorINS1_IfNS0_9allocatorIfEEEENS2_IS4_EEEE_block_invoke;
      v18[3] = &__block_descriptor_40_e9_v16__0_v8l;
      v18[4] = v5;
      v13 = (void *)objc_msgSend(v9, "initWithDataPointer:shape:dataType:strides:deallocator:error:", v10, v12, 65568, &unk_1E5D5BF30, v18, &v17);
      v14 = v17;

      if (!v13)
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v16, CFSTR("%@"), v14);
      objc_msgSend(v2, "addObject:", v13);

      v4 += 3;
    }
    while (v4 != v3);
  }
  return v2;
}

void sub_1ADB073F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

kaldi::nnet1::GradientNormalizationParams *kaldi::nnet1::GradientNormalizationParams::GradientNormalizationParams(kaldi::nnet1::GradientNormalizationParams *this)
{
  int v2;
  void *__p[2];
  char v5;

  *(_DWORD *)this = -1082130432;
  std::string::basic_string[abi:ne180100]<0>(__p, "NoGradNorm");
  v2 = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  *((_DWORD *)this + 1) = v2;
  *((_WORD *)this + 4) = 0;
  return this;
}

void sub_1ADB0749C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10EARHelpers23MultiArrayFromJaggedVecERNSt3__16vectorINS1_IfNS0_9allocatorIfEEEENS2_IS4_EEEE_block_invoke(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void **std::vector<std::vector<std::vector<std::pair<int,float>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::pair<int,float>>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADB07630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::pair<int,float>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,float>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<std::pair<int,float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::pair<int,float>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADB078B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB0792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB079E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::vector<std::vector<std::pair<int,float>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*>(_QWORD *result, uint64_t ***a2, uint64_t ***a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADB07A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*,std::vector<std::vector<std::pair<int,float>>>*>(uint64_t a1, uint64_t ***a2, uint64_t ***a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t ***v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADB07B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,float>>>>,std::vector<std::vector<std::pair<int,float>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t Array<unsigned int *>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 8 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(uint64_t **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x10C80436913F5);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

void RefList_freeThread(void)
{
  _QWORD **v0;
  _QWORD *v1;

  v0 = (_QWORD **)idFromFilenameResult();
  v1 = *v0;
  if (!*v0)
  {
    v1 = malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
    *v0 = v1;
  }
  if (!*v1 || (free((void *)*v1), (v1 = *v0) != 0))
  {
    free(v1);
    *v0 = 0;
  }
}

_QWORD *quasar::tennessee::operator<<(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD v8[2];
  std::string __p;

  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v8[0] = v4;
  v8[1] = v3;
  quasar::tennessee::ConvertWideCharacterToMultibyteString((uint64_t)v8, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADB07D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::ConvertWideCharacterToMultibyteString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _BYTE v5[192];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v5);
  std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes((uint64_t)v5, *(char **)a1, (char *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8)), a2);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v5);
}

void sub_1ADB07E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::ConvertMultibyteStringToWideCharacter@<X0>(quasar::tennessee *this@<X0>, std::wstring *a2@<X8>)
{
  size_t v5;
  _BYTE v7[192];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100]((uint64_t)v7);
  v5 = strlen((const char *)this);
  std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes((uint64_t)v7, (int *)this, (int *)((char *)this + v5), a2);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v7);
}

void sub_1ADB07EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::wstring_convert[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  std::codecvt<wchar_t,char,__mbstate_t>::codecvt((std::codecvt<wchar_t, char, mbstate_t> *)v2, 0);
  *(_QWORD *)(v2 + 24) = 1114111;
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = &unk_1E5D402A0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1ADB07F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string::size_type v40;
  char *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_62;
  v7 = a2;
  std::string::basic_string[abi:ne180100](a4, (a3 - a2) >> 1, 0);
  if (a3 == v7)
  {
    v23 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a1 + 104);
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[size];
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a1 + 184) += (v47 - v7) >> 2;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(a4, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a3)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = (char *)a4;
      else
        v27 = (char *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v15 - v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = a4;
      else
        v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = a4;
  else
    v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = a4->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)(v43 + v42))
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = (std::string::size_type)a4;
    else
      v40 = a4->__r_.__value_.__r.__words[0];
    v41 = &v47[-v40];
    std::string::resize(a4, 2 * (_QWORD)&v47[-v40], 0);
    v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = (std::string::size_type)a4;
    else
      v43 = a4->__r_.__value_.__r.__words[0];
    v36 = &v41[v43];
    if ((v42 & 0x80u) != 0)
      v42 = a4->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = (std::string::size_type)a4;
    else
      v45 = a4->__r_.__value_.__r.__words[0];
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a1 + 8);
  if (!v44)
    goto LABEL_73;
  std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, v44);
}

void sub_1ADB0832C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::DecodeBytesToString<char>@<X0>(char *__s@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, __s);
}

void std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x1AF44D190);
}

void std::wstring_convert<std::codecvt_utf8<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, std::wstring *a4@<X8>)
{
  int *v7;
  std::wstring::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::wstring::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::wstring *v19;
  uint64_t v20;
  std::wstring::size_type v21;
  char v22;
  std::wstring *v23;
  const std::wstring::value_type **v24;
  char *v25;
  std::wstring::size_type v26;
  std::wstring *v27;
  uint64_t v28;
  int *v29;
  _OWORD v30[8];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_23;
  v7 = a2;
  std::basic_string<char32_t>::basic_string[abi:ne180100](a4, 2 * ((char *)a3 - (char *)a2), 0);
  if (a3 != v7)
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 4;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::wstring::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v30[4] = *(_OWORD *)(a1 + 120);
    v30[5] = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v30[6] = *(_OWORD *)(a1 + 152);
    v30[7] = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v30[0] = *(_OWORD *)(a1 + 56);
    v30[1] = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[4 * size];
    v30[2] = *(_OWORD *)(a1 + 88);
    v30[3] = v13;
    do
    {
      v17 = (*(uint64_t (**)(_QWORD, _OWORD *, int *, int *, int **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v30, v7, a3, &v29, v15, v16, &v28, v12);
      v18 = v29 == v7;
      *(_QWORD *)(a1 + 184) += (char *)v29 - (char *)v7;
      if (v18)
        goto LABEL_34;
      if (v17 != 1)
      {
        if (v17)
        {
          if (v17 != 3)
          {
LABEL_34:
            if ((*((_BYTE *)&a4->__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_35;
            goto LABEL_23;
          }
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = (char *)a4;
          else
            v25 = (char *)a4->__r_.__value_.__r.__words[0];
          std::wstring::resize(a4, (v15 - v25) >> 2, 0);
          std::wstring::append[abi:ne180100]<wchar_t const*,0>(a4, v7, a3);
        }
        else
        {
          if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = a4;
          else
            v27 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
          std::wstring::resize(a4, (v28 - (uint64_t)v27) >> 2, 0);
        }
        return;
      }
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      v20 = v28 - (_QWORD)v19;
      std::wstring::resize(a4, (v28 - (uint64_t)v19) >> 1, 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      v22 = v21;
      v23 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
      if ((v21 & 0x80u) == 0)
        v23 = a4;
      v15 = (char *)v23 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v23 + 4 * v21;
      v7 = v29;
    }
    while (v29 < a3);
    if ((v22 & 0x80) == 0)
      goto LABEL_23;
LABEL_35:
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_23:
    v24 = (const std::wstring::value_type **)(a1 + 24);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a1 + 47))
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
        a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
        return;
      }
LABEL_41:
      std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
    }
    v26 = *(_QWORD *)(a1 + 32);
    if (!v26)
      goto LABEL_41;
    std::basic_string<char32_t>::__init_copy_ctor_external(a4, *v24, v26);
  }
}

void sub_1ADB08614(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::rescoring::Rescorer::Rescorer(uint64_t *a1, quasar::rescoring::RescorerConfig *a2)
{
  quasar::rescoring::RescorerConfig *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD v23[3];
  char v24;

  v4 = (quasar::rescoring::RescorerConfig *)quasar::rescoring::RescorerConfig::RescorerConfig(a1, a2);
  quasar::rescoring::RescorerConfig::loadAdapterModelMultiplexer(v4, (_QWORD *)v4 + 220);
  quasar::rescoring::RescorerConfig::createSimpleFstLmRescorerOptions(a2, (uint64_t)v23);
  std::make_unique[abi:ne180100]<quasar::SimpleFstLmRescorer,quasar::SimpleFstLmRescorerOptions,std::shared_ptr<quasar::QsrTextSymbolTable const> const&,std::shared_ptr<quasar::OnlineLmRescoringDecoder const> const&>((uint64_t)v23, a1 + 211, a1 + 213, a1 + 224);
  if (v24 < 0)
    operator delete((void *)v23[1]);
  quasar::rescoring::RescorerConfig::loadTokenizer((quasar::rescoring::RescorerConfig *)a1, v23);
  v5 = (std::__shared_weak_count *)v23[0];
  a1[225] = v23[0];
  if (v5)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = (std::__shared_weak_count_vtbl *)v23[0];
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D46000;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v6;
  }
  a1[226] = (uint64_t)v5;
  v7 = a1[212];
  v21 = a1[211];
  v22 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v5 = (std::__shared_weak_count *)a1[226];
  }
  v19 = a1[225];
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  quasar::rescoring::PreItnTokenExtractor::PreItnTokenExtractor(a1 + 227, &v21, &v19);
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_1ADB087E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  quasar::rescoring::RescorerConfig *v19;
  quasar::rescoring::AdapterModelMultiplexer *v20;
  uint64_t *v21;
  uint64_t v23;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  v23 = *v21;
  *v21 = 0;
  if (v23)
    std::default_delete<quasar::SimpleFstLmRescorer>::operator()[abi:ne180100]((uint64_t)v21, v23);
  quasar::rescoring::AdapterModelMultiplexer::~AdapterModelMultiplexer(v20);
  quasar::rescoring::RescorerConfig::~RescorerConfig(v19);
  _Unwind_Resume(a1);
}

void sub_1ADB08870()
{
  JUMPOUT(0x1ADB08860);
}

void std::make_unique[abi:ne180100]<quasar::SimpleFstLmRescorer,quasar::SimpleFstLmRescorerOptions,std::shared_ptr<quasar::QsrTextSymbolTable const> const&,std::shared_ptr<quasar::OnlineLmRescoringDecoder const> const&>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v8 = operator new();
  v9 = v8;
  v10 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a3[1];
  v22 = *a3;
  v23 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  quasar::SimpleFstLmRescorer::SimpleFstLmRescorer(v8, a1, &v24, &v22);
  *a4 = v9;
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1ADB089A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1AF44D190](v11, 0x1072C40140BB7A5);
  _Unwind_Resume(a1);
}

void quasar::rescoring::AdapterModelMultiplexer::~AdapterModelMultiplexer(quasar::rescoring::AdapterModelMultiplexer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__tree<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<quasar::rescoring::AdapterModel>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

BOOL quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(uint64_t a1, int *a2, int a3, int32x2_t *a4, int32x2_t *a5, int32x2_t *a6, int32x2_t *a7, int32x2_t *a8, _QWORD *a9)
{
  _BOOL4 v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t i;
  int *v34;
  unint64_t v35;
  const std::string **v36;
  const std::string **v37;
  uint64_t v38;
  const std::string *v39;
  const std::string *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  int *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  uint64_t *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float *v87;
  float v88;
  float **v89;
  float *v90;
  float **v91;
  unint64_t v92;
  _QWORD *v93;
  float *v94;
  float *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  float *v101;
  int v102;
  char **v103;
  _QWORD *v104;
  void **v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char **j;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  int v120;
  char *v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  char **v125;
  char *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  float v132;
  _QWORD *v133;
  _QWORD *v134;
  int v135;
  uint64_t v136;
  float *v137;
  int32x2_t v138;
  __int32 v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  int32x2_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int32x2_t v148;
  __int32 v149;
  float v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  float v159;
  _QWORD *v160;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  int32x2_t *v178;
  unint64_t v179;
  int32x2_t *v180;
  uint64_t v182;
  int32x2_t *v184;
  uint64_t v185;
  int v186;
  _QWORD *v187;
  uint64_t v188;
  _BOOL4 v190;
  uint64_t v191;
  _QWORD *v192;
  float *v193;
  uint64_t v194;
  void *v195;
  _QWORD *v196;
  _BYTE *v197;
  void *v198;
  char v199;
  void *v200;
  void *v201;
  uint64_t v202[3];
  const std::string **v203;
  char *v204;
  uint64_t v205;
  void *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD v212[3];
  _QWORD v213[3];
  char **v214;
  char **v215;
  void *__dst[2];
  unsigned __int8 v217;
  __int128 __p;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;

  v14 = a3 != 7 || *(_BYTE *)(a1 + 139) != 0;
  v190 = v14;
  v15 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  std::string::basic_string[abi:ne180100](__dst, (char *)v15 + *v15 + 4, *(unsigned int *)((char *)v15 + *v15));
  v16 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
  v17 = *(unsigned int *)((char *)v16 + *v16);
  if ((_DWORD)v17)
  {
    v18 = *(int *)(a1 + 1744);
    if (quasar::gLogLevel >= 4)
    {
      v233 = 0u;
      v234 = 0u;
      v231 = 0u;
      v232 = 0u;
      v229 = 0u;
      v230 = 0u;
      v227 = 0u;
      v228 = 0u;
      v225 = 0u;
      v226 = 0u;
      v223 = 0u;
      v224 = 0u;
      v221 = 0u;
      v222 = 0u;
      v219 = 0u;
      v220 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Rescoring n-best list with ", 27);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" entries.", 9);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    std::vector<std::vector<float>>::vector(&v214, v18);
    LODWORD(v195) = 0;
    std::vector<float>::vector(&__p, v17, &v195);
    std::vector<std::vector<float>>::vector(v213, v18, (uint64_t)&__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v180 = a7;
    v212[0] = v213;
    v212[1] = v17;
    v212[2] = v18;
    v20 = *(float *)(a1 + 80);
    kaldi::Matrix<float>::Resize(a4, v17, 1, 0, 0);
    if (a5)
      kaldi::Matrix<float>::Resize(a5, v17, 1, 0, 0);
    if (a6)
      kaldi::Matrix<float>::Resize(a6, v17, 1, 0, 0);
    if (a8)
      kaldi::Matrix<float>::Resize(a8, 1, v18, 0, 0);
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v203 = 0;
    v204 = 0;
    v205 = 0;
    v21 = *(_QWORD *)(a1 + 1688);
    v188 = *(_QWORD *)(v21 + 120);
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 96) + 112))(*(_QWORD *)(v21 + 96));
    v186 = a3;
    v184 = a5;
    v178 = a4;
    if ((v22 & 0x8000000000000000) == 0)
      v22 += *(_QWORD *)(v21 + 120);
    v191 = v22;
    v23 = 0;
    v182 = a1 + 1816;
    v187 = (_QWORD *)(a1 + 1728);
    v193 = (float *)(a1 + 84);
    v194 = a1;
    v179 = v17;
    if (v17 <= 1)
      v24 = 1;
    else
      v24 = v17;
    v185 = v24;
    while (1)
    {
      v25 = (unsigned __int16 *)((char *)a2 - *a2);
      if (*v25 < 7u)
      {
        v26 = 0;
        v27 = v186;
      }
      else
      {
        v26 = v25[3];
        v27 = v186;
        if (v26)
          v26 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v26);
      }
      v28 = v26 + 4 * v23;
      v31 = *(_DWORD *)(v28 + 4);
      v29 = v28 + 4;
      v30 = v31;
      v202[0] = v18;
      v202[1] = v23;
      v202[2] = (uint64_t)v212;
      if (v190)
      {
        v32 = v209;
        for (i = v210; i != v32; i -= 24)
        {
          if (*(char *)(i - 1) < 0)
            operator delete(*(void **)(i - 24));
        }
        v210 = v32;
        v24 = v185;
      }
      else
      {
        v207 = (char *)v206;
      }
      v34 = (int *)(v29 + v30);
      if (v27 == 5)
      {
        quasar::rescoring::extractPostItnFromNBestListEntry(v34, &v195);
        if (SHIBYTE(v197) >= 0)
          v35 = HIBYTE(v197);
        else
          v35 = (unint64_t)v196;
        if (v35)
        {
          v36 = v203;
          v37 = (const std::string **)v204;
          while (v37 != v36)
          {
            v37 -= 4;
            *(_QWORD *)&__p = v37;
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          }
          v204 = (char *)v36;
          if (((*(uint64_t (**)(_QWORD, void **, const std::string ***))(**(_QWORD **)(v194 + 1800) + 16))(*(_QWORD *)(v194 + 1800), &v195, &v203) & 1) == 0)
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tokenizer failed to tokenize '", 30);
            if (SHIBYTE(v197) >= 0)
              v166 = &v195;
            else
              v166 = v195;
            if (SHIBYTE(v197) >= 0)
              v167 = HIBYTE(v197);
            else
              v167 = (uint64_t)v196;
            v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)v166, v167);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"'.", 2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
          }
          if (v204 - (char *)v203 != 32)
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tokenizer returned ", 19);
            v169 = (_QWORD *)std::ostream::operator<<();
            v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)" hypotheses, ", 13);
            v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"instead of expected singleton for '", 35);
            if (SHIBYTE(v197) >= 0)
              v172 = &v195;
            else
              v172 = v195;
            if (SHIBYTE(v197) >= 0)
              v173 = HIBYTE(v197);
            else
              v173 = (uint64_t)v196;
            v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)v172, v173);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"'.", 2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
          }
          v40 = *v203;
          v39 = v203[1];
          while (v40 != v39)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, " ");
            quasar::splitAndTrimNoEmpty(v40, (char *)&__p, (uint64_t)&v209);
            if (SBYTE7(v219) < 0)
              operator delete((void *)__p);
            v40 = (const std::string *)((char *)v40 + 32);
          }
          if (quasar::gLogLevel > 5)
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Hypothesis ", 11);
            v41 = (_QWORD *)std::ostream::operator<<();
            v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" has post-ITN text \"", 20);
            if (SHIBYTE(v197) >= 0)
              v43 = &v195;
            else
              v43 = v195;
            if (SHIBYTE(v197) >= 0)
              v44 = HIBYTE(v197);
            else
              v44 = (uint64_t)v196;
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\" ", 2);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"and tokenized post-ITN tokens ", 30);
            v48 = quasar::lm::operator<<<std::string>(v47, &v209);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
          }
        }
        else
        {
          quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
        }
        if (SHIBYTE(v197) < 0)
        {
          operator delete(v195);
          if (v35)
            goto LABEL_123;
        }
        else if (v35)
        {
          goto LABEL_123;
        }
        goto LABEL_143;
      }
      if (v27 != 7)
      {
        v233 = 0u;
        v234 = 0u;
        v231 = 0u;
        v232 = 0u;
        v229 = 0u;
        v230 = 0u;
        v227 = 0u;
        v228 = 0u;
        v225 = 0u;
        v226 = 0u;
        v223 = 0u;
        v224 = 0u;
        v221 = 0u;
        v222 = 0u;
        v219 = 0u;
        v220 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown language model feature.", 31);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
      }
      if (*(_BYTE *)(v194 + 139))
      {
        quasar::rescoring::extractPreItnFromNBestListEntry(v34, &__p);
        if ((SBYTE7(v219) & 0x80u) == 0)
          v38 = BYTE7(v219);
        else
          v38 = *((_QWORD *)&__p + 1);
        if (v38)
          quasar::rescoring::PreItnTokenExtractor::operator()(v182, (uint64_t)&__p, (uint64_t)&v209);
        else
          quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
        if (SBYTE7(v219) < 0)
        {
          operator delete((void *)__p);
          if (v38)
            goto LABEL_123;
        }
        else if (v38)
        {
          goto LABEL_123;
        }
        goto LABEL_143;
      }
      v49 = (unsigned int *)((char *)v34 + *(unsigned __int16 *)((char *)v34 - *v34 + 8));
      v50 = *v49;
      v52 = (unsigned int *)((char *)v49 + v50 + 4);
      v51 = *(unsigned int *)((char *)v49 + v50);
      if (!(_DWORD)v51)
        goto LABEL_123;
      v53 = &v52[v51];
      while (1)
      {
        v54 = (int *)((char *)v52 + *v52);
        v55 = (unsigned __int16 *)((char *)v54 - *v54);
        if (*v55 >= 9u && (v56 = v55[4]) != 0)
        {
          v57 = *(int *)((char *)v54 + v56);
          if (v57 == -1)
          {
            if (quasar::gLogLevel >= 2)
            {
              v233 = 0u;
              v234 = 0u;
              v231 = 0u;
              v232 = 0u;
              v229 = 0u;
              v230 = 0u;
              v227 = 0u;
              v228 = 0u;
              v225 = 0u;
              v226 = 0u;
              v223 = 0u;
              v224 = 0u;
              v221 = 0u;
              v222 = 0u;
              v219 = 0u;
              v220 = 0u;
              __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered OOV in pre-ITN input tokens. This is unexpected and may indicate a problem.", 87);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
            }
            goto LABEL_92;
          }
          v58 = v57;
        }
        else
        {
          v58 = 0;
          v57 = 0;
        }
        if (v191 <= v58)
        {
          if (quasar::gLogLevel >= 4)
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered pre-ITN input token with identifier that exceeds the symbol table. ", 79);
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"If the system which generated the pre-ITN uses the same symbol table as the rescoring system, ", 94);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"then this indicates that we're dealing with a personalized tokens. Substituing by OOV.", 86);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
          }
LABEL_92:
          v58 = -1;
LABEL_93:
          v66 = v207;
          if (v207 >= v208)
          {
            v68 = (char *)v206;
            v69 = (v207 - (_BYTE *)v206) >> 3;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v71 = v208 - (_BYTE *)v206;
            if ((v208 - (_BYTE *)v206) >> 2 > v70)
              v70 = v71 >> 2;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
              v72 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v72 = v70;
            if (v72)
            {
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v208, v72);
              v68 = (char *)v206;
              v66 = v207;
            }
            else
            {
              v73 = 0;
            }
            v74 = (uint64_t *)&v73[8 * v69];
            *v74 = v58;
            v67 = (char *)(v74 + 1);
            while (v66 != v68)
            {
              v75 = *((_QWORD *)v66 - 1);
              v66 -= 8;
              *--v74 = v75;
            }
            v206 = v74;
            v207 = v67;
            v208 = &v73[8 * v72];
            if (v68)
              operator delete(v68);
          }
          else
          {
            *(_QWORD *)v207 = v58;
            v67 = v66 + 8;
          }
          v207 = v67;
          goto LABEL_110;
        }
        if (v188 > v58)
          break;
        if (!*(_QWORD *)(v194 + 1736))
          goto LABEL_93;
        v59 = v187;
        v60 = *v187;
        if (!*v187)
          goto LABEL_93;
        do
        {
          v61 = *(_DWORD *)(v60 + 28);
          v62 = v61 < v57;
          if (v61 >= v57)
            v63 = (uint64_t *)v60;
          else
            v63 = (uint64_t *)(v60 + 8);
          if (!v62)
            v59 = (_QWORD *)v60;
          v60 = *v63;
        }
        while (*v63);
        if (v59 == v187 || v57 < *((_DWORD *)v59 + 7))
          goto LABEL_93;
        if (quasar::gLogLevel >= 6)
        {
          v233 = 0u;
          v234 = 0u;
          v231 = 0u;
          v232 = 0u;
          v229 = 0u;
          v230 = 0u;
          v227 = 0u;
          v228 = 0u;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v221 = 0u;
          v222 = 0u;
          v219 = 0u;
          v220 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Found unpronounced token in hypothesis; filtering token for LM scoring.",
            71);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
        }
LABEL_110:
        if (++v52 == v53)
          goto LABEL_123;
      }
      if (quasar::gLogLevel >= 1)
      {
        v233 = 0u;
        v234 = 0u;
        v231 = 0u;
        v232 = 0u;
        v229 = 0u;
        v230 = 0u;
        v227 = 0u;
        v228 = 0u;
        v225 = 0u;
        v226 = 0u;
        v223 = 0u;
        v224 = 0u;
        v221 = 0u;
        v222 = 0u;
        v219 = 0u;
        v220 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered a pre-ITN token out of bounds for the symbol table. This may indicate a serious error. ", 99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Skipping utterance.", 19);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
      }
      v207 = (char *)v206;
LABEL_123:
      if (v190)
      {
        v77 = 0xAAAAAAAAAAAAAAABLL * ((v210 - v209) >> 3);
        if (v77)
          goto LABEL_125;
LABEL_132:
        if (quasar::gLogLevel >= 2)
        {
          v233 = 0u;
          v234 = 0u;
          v231 = 0u;
          v232 = 0u;
          v229 = 0u;
          v230 = 0u;
          v227 = 0u;
          v228 = 0u;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v221 = 0u;
          v222 = 0u;
          v219 = 0u;
          v220 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encountered empty hypothesis. Is there another error above that may explain it? If not, then this is an odd edge-case.", 118);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
        }
        quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
      }
      else
      {
        v77 = (v207 - (_BYTE *)v206) >> 3;
        if (!v77)
          goto LABEL_132;
LABEL_125:
        v78 = v77 + 1;
        if (v184)
          *(float *)(*(_QWORD *)v184 + 4 * v184[2].i32[0] * (int)v23) = (float)v78;
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        quasar::LmInfo::LmInfo((uint64_t)&v195, 1, &__p);
        if (SBYTE7(v219) < 0)
          operator delete((void *)__p);
        v79 = *(_QWORD *)(v194 + 1792);
        if (v190)
          v80 = quasar::SimpleFstLmRescorer::computeLmScore(v79, &v209, (uint64_t)&v195);
        else
          v80 = quasar::SimpleFstLmRescorer::computeLmScore(v79, (uint64_t *)&v206, (uint64_t)&v195, 0);
        if (v80)
        {
          quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(v202);
        }
        else
        {
          v81 = v196;
          if (v78 != 0x2E8BA2E8BA2E8BA3 * ((v197 - (_BYTE *)v196) >> 3))
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Number of token infos (", 23);
            v175 = (_QWORD *)std::ostream::operator<<();
            v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)") ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"exceeds expected number of tokens (", 35);
            v177 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)").", 2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
          }
          if (v196 != (_QWORD *)v197)
          {
            v192 = v197;
            v82 = 0;
            do
            {
              v83 = v81[5];
              v84 = v81[6];
              v85 = v18;
              if (v18 != (v84 - v83) >> 2)
              {
                v233 = 0u;
                v234 = 0u;
                v231 = 0u;
                v232 = 0u;
                v229 = 0u;
                v230 = 0u;
                v227 = 0u;
                v228 = 0u;
                v225 = 0u;
                v226 = 0u;
                v223 = 0u;
                v224 = 0u;
                v221 = 0u;
                v222 = 0u;
                v219 = 0u;
                v220 = 0u;
                __p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"FstLmScorer returned scores for ", 32);
                v162 = (_QWORD *)std::ostream::operator<<();
                v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" models, ", 9);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"whereas ", 8);
                v164 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" were expected.", 15);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
              }
              if (v84 != v83)
              {
                v86 = 0;
                do
                {
                  if (!*((_BYTE *)v81 + 36) || (v87 = v193, !*(_BYTE *)(v194 + 88)))
                    v87 = (float *)(v83 + 4 * v86);
                  v88 = *v87;
                  v89 = (float **)&v214[3 * v86];
                  v91 = v89 + 1;
                  v90 = v89[1];
                  v93 = v89 + 2;
                  v92 = (unint64_t)v89[2];
                  if ((unint64_t)v90 >= v92)
                  {
                    v95 = *v89;
                    v96 = v90 - *v89;
                    v97 = v96 + 1;
                    if ((unint64_t)(v96 + 1) >> 62)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v98 = v92 - (_QWORD)v95;
                    if (v98 >> 1 > v97)
                      v97 = v98 >> 1;
                    if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
                      v99 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v99 = v97;
                    if (v99)
                    {
                      v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v93, v99);
                      v90 = *v91;
                      v95 = *v89;
                    }
                    else
                    {
                      v100 = 0;
                    }
                    v101 = (float *)&v100[4 * v96];
                    *v101 = v88;
                    v94 = v101 + 1;
                    while (v90 != v95)
                    {
                      v102 = *((_DWORD *)v90-- - 1);
                      *((_DWORD *)v101-- - 1) = v102;
                    }
                    *v89 = v101;
                    *v91 = v94;
                    *v93 = &v100[4 * v99];
                    if (v95)
                      operator delete(v95);
                  }
                  else
                  {
                    *v90 = v88;
                    v94 = v90 + 1;
                  }
                  *v91 = v94;
                  *(float *)(*(_QWORD *)(*(_QWORD *)v212[0] + 24 * v86) + 4 * v23) = v88
                                                                                   + *(float *)(*(_QWORD *)(*(_QWORD *)v212[0] + 24 * v86)
                                                                                              + 4 * v23);
                  ++v86;
                  v83 = v81[5];
                }
                while (v86 < (v81[6] - v83) >> 2);
              }
              v82 += *((unsigned __int8 *)v81 + 36);
              v81 += 11;
              v18 = v85;
            }
            while (v81 != v192);
            v24 = v185;
            if (a6 && v82)
              *(float *)(*(_QWORD *)a6 + 4 * a6[2].i32[0] * (int)v23) = (float)v82;
          }
        }
        if (v200)
        {
          v201 = v200;
          operator delete(v200);
        }
        if (v199 < 0)
          operator delete(v198);
        *(_QWORD *)&__p = &v196;
        std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      }
LABEL_143:
      if (++v23 == v24)
      {
        v103 = v214;
        LODWORD(v17) = v179;
        if (*v214 == v214[1])
        {
          if (quasar::gLogLevel >= 2)
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to rescore any hypotheses for utterance ", 47);
            if ((v217 & 0x80u) == 0)
              v105 = __dst;
            else
              v105 = (void **)__dst[0];
            if ((v217 & 0x80u) == 0)
              v106 = v217;
            else
              v106 = (uint64_t)__dst[1];
            v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)v105, v106);
            v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" ", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"due to missing token scores.", 28);
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
            v103 = v214;
          }
          for (j = v215; v103 != j; v103 += 3)
          {
            v110 = (unint64_t)v103[2];
            v111 = v103[1];
            if ((unint64_t)v111 >= v110)
            {
              v113 = *v103;
              v114 = (v111 - *v103) >> 2;
              v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v116 = v110 - (_QWORD)v113;
              if (v116 >> 1 > v115)
                v115 = v116 >> 1;
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
                v117 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v117 = v115;
              if (v117)
              {
                v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v103 + 2), v117);
                v113 = *v103;
                v111 = v103[1];
              }
              else
              {
                v118 = 0;
              }
              v119 = &v118[4 * v114];
              *(_DWORD *)v119 = *(_DWORD *)(v194 + 80);
              v112 = v119 + 4;
              while (v111 != v113)
              {
                v120 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *((_DWORD *)v119 - 1) = v120;
                v119 -= 4;
              }
              *v103 = v119;
              v103[1] = v112;
              v103[2] = &v118[4 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_DWORD *)v111 = *(_DWORD *)(v194 + 80);
              v112 = v111 + 4;
            }
            v103[1] = v112;
          }
        }
        if (a9)
        {
          v122 = *v214;
          v121 = v214[1];
          v123 = (v121 - *v214) >> 2;
          kaldi::Matrix<double>::Matrix((uint64_t)&v195, v18, v123, 0, 0);
          if ((_DWORD)v18)
          {
            v124 = 0;
            v125 = v214;
            v126 = (char *)v195;
            v127 = (int)v197;
            if (v123 <= 1)
              v128 = 1;
            else
              v128 = v123;
            do
            {
              if (v121 != v122)
              {
                v129 = 0;
                v130 = 0;
                v131 = v125[3 * v124];
                do
                {
                  *(double *)&v126[8 * v127 * (int)v124 + (v129 >> 29)] = *(float *)&v131[4 * v130++];
                  v129 += 0x100000000;
                }
                while (v128 != v130);
              }
              ++v124;
            }
            while (v124 != v18);
          }
          kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>>::CheckImpl(a9);
          if (((*(uint64_t (**)(_QWORD, void **, void **))(*(_QWORD *)*a9 + 8))(*a9, __dst, &v195) & 1) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error in TableWriter::Write", 27);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&v195);
        }
        if (v18 <= 1)
        {
          v145 = 0;
          v146 = 0;
          v147 = *(_QWORD *)v213[0];
          v148 = *v178;
          v149 = v178[2].i32[0];
          do
          {
            v150 = *(float *)(v147 + 4 * v146);
            if ((LODWORD(v150) & 0x7FFFFFFFu) >= 0x7F800000)
              v150 = v20;
            *(float *)(*(_QWORD *)&v148 + 4 * v145) = v150;
            if (a8)
              *(_DWORD *)a8->i32[0] = 1065353216;
            ++v146;
            v145 += v149;
          }
          while (v185 != v146);
        }
        else
        {
          v132 = 1.0 / (double)v18;
          *(float *)&__p = v132;
          std::vector<float>::vector(&v195, v18, &__p);
          kaldi::quasar::EstimateLinearWeights((uint64_t)&v214, (float **)&v195, 20, 0.00097656);
          if (quasar::gLogLevel >= 6)
          {
            v233 = 0u;
            v234 = 0u;
            v231 = 0u;
            v232 = 0u;
            v229 = 0u;
            v230 = 0u;
            v227 = 0u;
            v228 = 0u;
            v225 = 0u;
            v226 = 0u;
            v223 = 0u;
            v224 = 0u;
            v221 = 0u;
            v222 = 0u;
            v219 = 0u;
            v220 = 0u;
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Rescoring estimated weights ", 28);
            v134 = quasar::lm::operator<<<float>(v133, (uint64_t *)&v195);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
          }
          LODWORD(v202[0]) = 0;
          std::vector<float>::vector(&__p, v179, v202);
          kaldi::quasar::InterpolateLogScoresLinearly((uint64_t)v213, (uint64_t)&v195, (uint64_t *)&__p);
          v135 = 0;
          v136 = 0;
          v137 = (float *)__p;
          v138 = *v178;
          v139 = v178[2].i32[0];
          do
          {
            v140 = v137[v136];
            if ((LODWORD(v140) & 0x7FFFFFFFu) >= 0x7F800000)
              v140 = v20;
            *(float *)(*(_QWORD *)&v138 + 4 * v135) = v140;
            ++v136;
            v135 += v139;
          }
          while (v185 != v136);
          if (!a8)
            goto LABEL_224;
          v141 = 0;
          v142 = 0;
          v143 = v195;
          v144 = *a8;
          do
          {
            *(_DWORD *)(*(_QWORD *)&v144 + (v141 >> 30)) = v143[v142++];
            v141 += 0x100000000;
          }
          while (v18 != v142);
          if (v137)
          {
LABEL_224:
            *((_QWORD *)&__p + 1) = v137;
            operator delete(v137);
          }
          if (v195)
          {
            v196 = v195;
            operator delete(v195);
          }
        }
        if (v180)
        {
          kaldi::Matrix<float>::Resize(v180, v179, v18, 0, 0);
          v151 = 0;
          v152 = (uint64_t *)v213[0];
          if (v18 <= 1)
            v153 = 1;
          else
            v153 = v18;
          do
          {
            if ((_DWORD)v18)
            {
              v154 = 0;
              v155 = 0;
              v156 = *(_QWORD *)v180 + 4 * v180[2].i32[0] * (int)v151;
              v157 = v152;
              do
              {
                v158 = *v157;
                v157 += 3;
                v159 = *(float *)(v158 + 4 * v151);
                if ((LODWORD(v159) & 0x7FFFFFFFu) >= 0x7F800000)
                  v159 = v20;
                *(float *)(v156 + (v154 >> 30)) = v159;
                ++v155;
                v154 += 0x100000000;
              }
              while (v153 != v155);
            }
            ++v151;
          }
          while (v151 != v185);
        }
        if (quasar::gLogLevel >= 6)
        {
          v233 = 0u;
          v234 = 0u;
          v231 = 0u;
          v232 = 0u;
          v229 = 0u;
          v230 = 0u;
          v227 = 0u;
          v228 = 0u;
          v225 = 0u;
          v226 = 0u;
          v223 = 0u;
          v224 = 0u;
          v221 = 0u;
          v222 = 0u;
          v219 = 0u;
          v220 = 0u;
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Rescored hypothesis log-probabilities: ", 39);
          kaldi::MatrixBase<float>::Write(v178, v160, 0, 0);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
        }
        *(_QWORD *)&__p = &v203;
        std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (v206)
        {
          v207 = (char *)v206;
          operator delete(v206);
        }
        *(_QWORD *)&__p = &v209;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(_QWORD *)&__p = v213;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        *(_QWORD *)&__p = &v214;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_250;
      }
    }
  }
  if (quasar::gLogLevel >= 2)
  {
    v233 = 0u;
    v234 = 0u;
    v231 = 0u;
    v232 = 0u;
    v229 = 0u;
    v230 = 0u;
    v227 = 0u;
    v228 = 0u;
    v225 = 0u;
    v226 = 0u;
    v223 = 0u;
    v224 = 0u;
    v221 = 0u;
    v222 = 0u;
    v219 = 0u;
    v220 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to rescore n-best list due to lack of hypotheses.", 56);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  }
LABEL_250:
  if ((char)v217 < 0)
    operator delete(__dst[0]);
  return (_DWORD)v17 != 0;
}

void sub_1ADB0A1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a67);
  JUMPOUT(0x1ADB0A214);
}

void sub_1ADB0A1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  void *v72;
  char v73;

  if (a72 < 0)
    operator delete(__p);
  if (v73 < 0)
    operator delete(v72);
  JUMPOUT(0x1ADB0A214);
}

void sub_1ADB0A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;

  quasar::LmInfo::~LmInfo((quasar::LmInfo *)&a30);
  a30 = (uint64_t)&a46;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (__p)
  {
    a50 = (uint64_t)__p;
    operator delete(__p);
  }
  a30 = (uint64_t)&a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = (uint64_t)&a58;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = (uint64_t)&a61;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (a69 < 0)
    operator delete(a64);
  _Unwind_Resume(a1);
}

float quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(quasar::rescoring::NBestList const&,quasar::rescoring::FeatureType,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::Matrix<float> *,kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>> *)const::$_2::operator()(uint64_t *a1)
{
  _QWORD *v2;
  float result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _OWORD v8[17];

  if (quasar::gLogLevel >= 2)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unable to compute LM scores for hypothesis ", 43);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
  }
  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = **(uint64_t ***)a1[2];
    do
    {
      v7 = *v6;
      v6 += 3;
      result = *(float *)(v7 + 4 * v5) + -INFINITY;
      *(float *)(v7 + 4 * v5) = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1ADB0A34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LmInfo::~LmInfo(quasar::LmInfo *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  v3 = (void **)((char *)this + 8);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_QWORD *quasar::lm::operator<<<float>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v4 += 4;
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

BOOL quasar::rescoring::Rescorer::rescoreHypotheses(uint64_t a1, int *a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  quasar::rescoring::AdapterModel *Model;
  quasar::rescoring::AdapterModel *v11;
  uint64_t Featurizer;
  _BOOL8 v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t i;
  int v17;
  int v19;
  _QWORD *v20[3];

  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (!*(int *)((char *)a2 + v3[3] + *(unsigned int *)((char *)a2 + v3[3])))
    return 0;
  v7 = a1 + 1760;
  if (*v3 >= 9u && (v8 = v3[4]) != 0)
    v9 = (int *)((char *)a2 + v8 + *(unsigned int *)((char *)a2 + v8));
  else
    v9 = 0;
  Model = (quasar::rescoring::AdapterModel *)quasar::rescoring::AdapterModelMultiplexer::getModel(v7, v9);
  if (!Model)
    return 0;
  v11 = Model;
  Featurizer = quasar::rescoring::AdapterModel::getFeaturizer(Model);
  quasar::rescoring::Rescorer::computeFeatureValues(a1, Featurizer, a2, 0, (uint64_t)&v19);
  v13 = v19 == 1;
  if (v19 == 1)
  {
    v14 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
    v15 = *(unsigned int *)((char *)v14 + *v14);
    std::vector<float>::resize((uint64_t)a3, v15);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        (*(void (**)(quasar::rescoring::AdapterModel *, int *, _QWORD **, unint64_t))(*(_QWORD *)v11 + 16))(v11, a2, v20, i);
        if (i >= (uint64_t)(a3[1] - *a3) >> 2)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        *(_DWORD *)(*a3 + 4 * i) = v17;
      }
    }
  }
  std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy((uint64_t)v20, v20[1]);
  return v13;
}

void sub_1ADB0A598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void quasar::rescoring::Rescorer::computeFeatureValues(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int *v7;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD *v37;
  unint64_t i;
  uint64_t v39;
  uint64_t j;
  float AtomicFeatureValue;
  void *v42;
  _QWORD *v43;
  unsigned int *v44;
  void *p_dst;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  void *v51;
  void *v52;
  _BYTE *v53;
  int32x2_t v54[5];
  int32x2_t v55[5];
  void *v56;
  void *v57;
  uint64_t v58;
  void *__dst;
  void *v60;
  _BYTE *v61;
  uint64_t *v62;
  _QWORD v63[2];
  void *__p;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  _BYTE *v69;
  void *v70[2];
  void *v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - *a3 + 6));
  v50 = *(unsigned int *)((char *)v7 + *v7);
  if ((_DWORD)v50)
  {
    v11 = *(unsigned int *)(a1 + 1744);
    v12 = v63;
    v63[0] = 0;
    v63[1] = 0;
    v62 = v63;
    if (*(_BYTE *)(a1 + 138))
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&__dst);
      kaldi::Matrix<float>::Matrix((uint64_t)&v56);
      kaldi::Matrix<float>::Matrix((uint64_t)v55);
      kaldi::Matrix<float>::Matrix((uint64_t)v54);
      kaldi::Matrix<float>::Matrix((uint64_t)&v51);
      if (!quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(a1, a3, 5, (int32x2_t *)&__dst, (int32x2_t *)&v56, v55, v54, (int32x2_t *)&v51, 0))
      {
        if (quasar::gLogLevel >= 2)
        {
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          *(_OWORD *)v71 = 0u;
          v72 = 0u;
          *(_OWORD *)v70 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Unable to score hypotheses by re-tokenizing post-ITN.", 53);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v70);
        }
        kaldi::Matrix<float>::Resize((int32x2_t *)&__dst, v50, 1, 0, 0);
        kaldi::Matrix<float>::Resize((int32x2_t *)&v56, v50, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v55, v50, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v54, v50, v11, 0, 0);
        kaldi::Matrix<float>::Resize((int32x2_t *)&v51, 1, v11, 0, 0);
      }
      v13 = operator new(1uLL);
      v66 = 0;
      v67 = v13;
      *v13 = 5;
      v68 = v13 + 1;
      v69 = v13 + 1;
      __p = 0;
      v65 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v67, (uint64_t)&__p);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)&__dst);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v14 = operator new(1uLL);
      v66 = 0;
      v67 = v14;
      *v14 = 4;
      v68 = v14 + 1;
      v69 = v14 + 1;
      __p = 0;
      v65 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v67, (uint64_t)&__p);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)&v56);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v15 = operator new(1uLL);
      v66 = 0;
      v67 = v15;
      *v15 = 19;
      v68 = v15 + 1;
      v69 = v15 + 1;
      __p = 0;
      v65 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v67, (uint64_t)&__p);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)v55);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v16 = operator new(1uLL);
      v66 = 0;
      v67 = v16;
      *v16 = 13;
      v68 = v16 + 1;
      v69 = v16 + 1;
      __p = 0;
      v65 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v67, (uint64_t)&__p);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)v54);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v17 = operator new(1uLL);
      v66 = 0;
      v67 = v17;
      *v17 = 14;
      v68 = v17 + 1;
      v69 = v17 + 1;
      __p = 0;
      v65 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v67, (uint64_t)&__p);
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)&v51);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)&v51);
      kaldi::Matrix<float>::~Matrix((uint64_t)v54);
      kaldi::Matrix<float>::~Matrix((uint64_t)v55);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v56);
      kaldi::Matrix<float>::~Matrix((uint64_t)&__dst);
    }
    if (*(_BYTE *)(a1 + 137))
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&__dst);
      kaldi::Matrix<float>::Matrix((uint64_t)&v56);
      kaldi::Matrix<float>::Matrix((uint64_t)v55);
      kaldi::Matrix<float>::Matrix((uint64_t)v54);
      if (!quasar::rescoring::Rescorer::scoreHypothesesWithLanguageModels(a1, a3, 7, (int32x2_t *)&__dst, 0, (int32x2_t *)&v56, v55, v54, 0))
      {
        if (quasar::gLogLevel >= 2)
        {
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          *(_OWORD *)v71 = 0u;
          v72 = 0u;
          *(_OWORD *)v70 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Unable to score hypotheses by using device-generated pre-ITN.", 61);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v70);
        }
        kaldi::Matrix<float>::Resize((int32x2_t *)&__dst, v50, 1, 0, 0);
        kaldi::Matrix<float>::Resize((int32x2_t *)&v56, v50, 1, 0, 0);
        kaldi::Matrix<float>::Resize(v55, v50, v11, 0, 0);
        kaldi::Matrix<float>::Resize(v54, 1, v11, 0, 0);
      }
      v18 = operator new(1uLL);
      v51 = v18;
      *v18 = 7;
      v52 = v18 + 1;
      v53 = v18 + 1;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v51, (uint64_t)&v67);
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)&__dst);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v19 = operator new(1uLL);
      v51 = v19;
      *v19 = 18;
      v52 = v19 + 1;
      v53 = v19 + 1;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v51, (uint64_t)&v67);
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)&v56);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v20 = operator new(1uLL);
      v51 = v20;
      *v20 = 11;
      v52 = v20 + 1;
      v53 = v20 + 1;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v51, (uint64_t)&v67);
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)v55);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      v21 = operator new(1uLL);
      v51 = v21;
      *v21 = 12;
      v52 = v21 + 1;
      v53 = v21 + 1;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&v51, (uint64_t)&v67);
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)v54);
      if (v71[1])
      {
        *(void **)&v72 = v71[1];
        operator delete(v71[1]);
      }
      if (v70[0])
      {
        v70[1] = v70[0];
        operator delete(v70[0]);
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)v54);
      kaldi::Matrix<float>::~Matrix((uint64_t)v55);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v56);
      kaldi::Matrix<float>::~Matrix((uint64_t)&__dst);
    }
    quasar::rescoring::GetDefaultTransformedFeatureDescs(v55);
    if ((quasar::rescoring::GenerateTransformedFeatureValues(a3, a2, (char ***)v55, &v62) & 1) != 0)
    {
      if (a4)
      {
        v22 = 0;
        v23 = &unk_1EED87000;
        while (1)
        {
          v24 = quasar::rescoring::EnumValuesFeatureType(void)::values[v22];
          if ((v25 & 1) == 0
          {
            v42 = (void *)operator new();
            v70[0] = (void *)0xB12070E0D130405;
            LOBYTE(v70[1]) = 12;
            std::set<quasar::rescoring::FeatureType>::set[abi:ne180100]((uint64_t)v42, (char *)v70, 9);
            v23 = &unk_1EED87000;
            quasar::rescoring::GetLmFeatureTypes(void)::featureTypes = v42;
          }
          v26 = v23[206];
          v29 = *(_QWORD *)(v26 + 8);
          v27 = v26 + 8;
          v28 = v29;
          if (v29)
          {
            v30 = v27;
            do
            {
              v31 = *(char *)(v28 + 25);
              v32 = v31 < (char)v24;
              if (v31 >= (char)v24)
                v33 = (uint64_t *)v28;
              else
                v33 = (uint64_t *)(v28 + 8);
              if (!v32)
                v30 = v28;
              v28 = *v33;
            }
            while (*v33);
            if (v30 != v27 && (char)v24 >= *(char *)(v30 + 25))
              goto LABEL_123;
          }
          v34 = operator new(1uLL);
          __dst = v34;
          *v34 = v24;
          v60 = v34 + 1;
          v61 = v34 + 1;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v70, (uint64_t)&__dst, (uint64_t)&v56);
          if (v56)
          {
            v57 = v56;
            operator delete(v56);
          }
          if (__dst)
          {
            v60 = __dst;
            operator delete(__dst);
          }
          if (v22 == 20)
            break;
          if (((char)v24 - 11) < 4 || (char)v24 == 20)
          {
            v35 = *(int *)(a2 + 20);
            if (v22)
              goto LABEL_112;
          }
          else
          {
            v35 = 1;
            if (v22)
              goto LABEL_112;
          }
LABEL_119:
          if (v71[1])
          {
            *(void **)&v72 = v71[1];
            operator delete(v71[1]);
          }
          if (v70[0])
          {
            v70[1] = v70[0];
            operator delete(v70[0]);
          }
LABEL_123:
          if (++v22 == 22)
            goto LABEL_141;
        }
        v35 = *(int *)(a2 + 16);
LABEL_112:
        if (v12 == (_QWORD *)std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::find<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>((uint64_t)&v62, (char **)v70))
        {
          v37 = v12;
          kaldi::Matrix<float>::Matrix((uint64_t)&__dst, v50, v35, 0, 0);
          for (i = 0; i != v50; ++i)
          {
            if (v35)
            {
              v39 = 0;
              for (j = 0; j != v35; ++j)
              {
                AtomicFeatureValue = quasar::rescoring::Featurizer::GetAtomicFeatureValue(a2, a3, (uint64_t)&v62, i, v24 + v39);
                *(float *)((char *)__dst + 4 * (int)v61 * (int)i + (v39 >> 30)) = AtomicFeatureValue;
                v39 += 0x100000000;
              }
            }
          }
          quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(&v62, (uint64_t)v70, (uint64_t)&__dst);
          kaldi::Matrix<float>::~Matrix((uint64_t)&__dst);
          v12 = v37;
          v23 = (_QWORD *)&unk_1EED87000;
        }
        goto LABEL_119;
      }
LABEL_141:
      *(_DWORD *)a5 = 1;
      std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>::map[abi:ne180100]((uint64_t *)(a5 + 8), (uint64_t)&v62);
    }
    else
    {
      v70[1] = 0;
      v71[0] = 0;
      v70[0] = &v70[1];
      *(_DWORD *)a5 = 4;
      std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>::map[abi:ne180100]((uint64_t *)(a5 + 8), (uint64_t)v70);
      std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy((uint64_t)v70, (_QWORD *)v70[1]);
    }
    v70[0] = v55;
    std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
    v48 = (_QWORD *)v63[0];
    v49 = (void **)&v62;
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      *(_OWORD *)v71 = 0u;
      v72 = 0u;
      *(_OWORD *)v70 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Utterance ", 10);
      v44 = (unsigned int *)((char *)a3 + *(unsigned __int16 *)((char *)a3 - *a3 + 4));
      std::string::basic_string[abi:ne180100](&__dst, (char *)v44 + *v44 + 4, *(unsigned int *)((char *)v44 + *v44));
      if (SHIBYTE(v61) >= 0)
        p_dst = &__dst;
      else
        p_dst = __dst;
      if (SHIBYTE(v61) >= 0)
        v46 = HIBYTE(v61);
      else
        v46 = (uint64_t)v60;
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)p_dst, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" has no hypotheses.", 19);
      if (SHIBYTE(v61) < 0)
        operator delete(__dst);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v70);
    }
    v70[1] = 0;
    v71[0] = 0;
    v70[0] = &v70[1];
    *(_DWORD *)a5 = 2;
    std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>::map[abi:ne180100]((uint64_t *)(a5 + 8), (uint64_t)v70);
    v48 = v70[1];
    v49 = v70;
  }
  std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy((uint64_t)v49, v48);
}

void sub_1ADB0B144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,_QWORD *a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char *a50,uint64_t a51)
{
  uint64_t v51;

  MEMORY[0x1AF44D190](v51, 0x1020C4062D53EE8);
  a50 = &a23;
  std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy((uint64_t)&a41, a42);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  quasar::lm *v4;
  _QWORD *Featurizer;
  _QWORD *v6;
  _BYTE v7[16];

  v4 = (quasar::lm *)quasar::lm::InsertIfNotPresent<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(a1, a2, a3);
  if ((_DWORD)v4)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v7, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v7);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    quasar::rescoring::operator<<(v6, a2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v7);
  }
}

void sub_1ADB0B448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

float quasar::rescoring::Featurizer::GetAtomicFeatureValue(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  float v20;
  float v21;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  int v27;
  unsigned __int16 *v28;
  unsigned int *v29;
  _DWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  void **v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  void **v50;
  char *v51;
  size_t v52;
  BOOL v53;
  char *v54;
  BOOL v55;
  size_t v56;
  char *v57;
  size_t v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  void **v67;
  char *v68;
  uint64_t v69;
  int v70;
  unsigned int *v71;
  unsigned __int16 *v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  void **v79;
  char *v80;
  size_t v81;
  BOOL v82;
  char *v83;
  BOOL v84;
  size_t v85;
  char *v86;
  size_t v87;
  float v88;
  uint64_t v89;
  _QWORD *v90;
  const char *v91;
  size_t v92;
  _QWORD *v93;
  void *__p[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111[3];
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  _QWORD v117[3];
  _QWORD *v118;
  _QWORD v119[3];
  _QWORD *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 < 7u)
  {
    v11 = 0;
  }
  else
  {
    v11 = v10[3];
    if (v11)
      v11 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v11);
  }
  v12 = (unsigned int *)(v11 + 4 * a4 + 4);
  v13 = *v12;
  v14 = operator new(1uLL);
  __p[0] = v14;
  *v14 = v9;
  __p[1] = v14 + 1;
  *(_QWORD *)&v95 = v14 + 1;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v111, (uint64_t)__p, (uint64_t)&v114);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (a3 + 8 != std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::find<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>(a3, v111))
  {
    v15 = quasar::lm::FindOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(a3, v111);
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v15) == 1)
      v16 = *(_QWORD *)v15;
    else
      v16 = *(_QWORD *)v15 + 4 * *((_DWORD *)v15 + 4) * (int)a4;
    v21 = *(float *)(v16 + 4 * (a5 >> 32));
    goto LABEL_18;
  }
  v17 = (int *)((char *)v12 + v13);
  switch(v9)
  {
    case 1u:
      v18 = (unsigned __int16 *)((char *)v17 - *v17);
      v19 = *v18;
      if (v19 < 0xF)
      {
        v20 = 0.0;
        v88 = 0.0;
        if (v19 < 0xD)
          goto LABEL_141;
      }
      else if (v18[7])
      {
        v20 = *(float *)((char *)v17 + v18[7]);
      }
      else
      {
        v20 = 0.0;
      }
      v89 = v18[6];
      if (v89)
        v88 = *(float *)((char *)v17 + v89);
      else
        v88 = 0.0;
LABEL_141:
      v21 = v20 + v88;
      goto LABEL_18;
    case 2u:
      v43 = (unsigned __int16 *)((char *)v17 - *v17);
      v21 = 0.0;
      if (*v43 < 0xFu)
        goto LABEL_18;
      v24 = v43[7];
      if (!v24)
        goto LABEL_18;
      goto LABEL_100;
    case 3u:
      v59 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      v60 = (unsigned int *)((char *)v59 + *v59);
      v117[0] = &unk_1E5D3CE30;
      v117[1] = quasar::rescoring::NBestListToken::text;
      v31 = v117;
      v117[2] = 0;
      v118 = v117;
      v63 = *v60;
      v62 = v60 + 1;
      v61 = v63;
      if (!v63)
      {
        v21 = 1.0;
        goto LABEL_134;
      }
      v64 = 0;
      v65 = &v62[v61];
      do
      {
        if (!v118)
          std::__throw_bad_function_call[abi:ne180100]();
        v66 = (unsigned int *)(*(uint64_t (**)(_QWORD *, char *))(*v118 + 48))(v118, (char *)v62 + *v62);
        if (v66)
        {
          std::string::basic_string[abi:ne180100](__p, v66 + 1, *v66);
          if (SBYTE7(v95) < 0)
          {
            v67 = (void **)__p[0];
            v68 = (char *)__p[1];
            if (!__p[1])
              goto LABEL_92;
          }
          else
          {
            if (!BYTE7(v95))
              goto LABEL_93;
            v67 = __p;
            v68 = (char *)BYTE7(v95);
          }
          v69 = 0;
          do
          {
            v70 = *(unsigned __int8 *)v67;
            v67 = (void **)((char *)v67 + 1);
            if (v70 == 32)
              ++v69;
            --v68;
          }
          while (v68);
          v64 += v69 + 1;
          if ((BYTE7(v95) & 0x80) != 0)
          {
            v67 = (void **)__p[0];
LABEL_92:
            operator delete(v67);
          }
        }
LABEL_93:
        ++v62;
      }
      while (v62 != v65);
      v31 = v118;
      v21 = (float)(unint64_t)(v64 + 1);
      if (v118 != v117)
        goto LABEL_95;
      v42 = 4;
      v31 = v117;
LABEL_136:
      (*(void (**)(void))(*v31 + 8 * v42))();
LABEL_18:
      if (v112)
      {
        v113 = v112;
        operator delete(v112);
      }
      if (v111[0])
      {
        v111[1] = v111[0];
        operator delete(v111[0]);
      }
      return v21;
    case 6u:
      v72 = (unsigned __int16 *)((char *)v17 - *v17);
      v21 = 0.0;
      if (*v72 >= 0xDu)
      {
        v24 = v72[6];
        if (v24)
          goto LABEL_100;
      }
      goto LABEL_18;
    case 8u:
      v29 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      v30 = (unsigned int *)((char *)v29 + *v29);
      v119[0] = &unk_1E5D3CE30;
      v119[1] = quasar::rescoring::NBestListToken::phones;
      v31 = v119;
      v119[2] = 0;
      v120 = v119;
      v34 = *v30;
      v33 = (char *)(v30 + 1);
      v32 = v34;
      if (!v34)
      {
        v21 = 0.0;
LABEL_134:
        v42 = 4;
        goto LABEL_136;
      }
      v35 = 0;
      v36 = (unsigned int *)&v33[4 * v32];
      while (1)
      {
        if (!v120)
          std::__throw_bad_function_call[abi:ne180100]();
        v37 = (unsigned int *)(*(uint64_t (**)(_QWORD *, char *))(*v120 + 48))(v120, &v33[*(unsigned int *)v33]);
        if (!v37)
          goto LABEL_48;
        std::string::basic_string[abi:ne180100](__p, v37 + 1, *v37);
        if (SBYTE7(v95) < 0)
          break;
        if (BYTE7(v95))
        {
          v38 = __p;
          v39 = (char *)BYTE7(v95);
LABEL_41:
          v40 = 0;
          do
          {
            v41 = *(unsigned __int8 *)v38;
            v38 = (void **)((char *)v38 + 1);
            if (v41 == 32)
              ++v40;
            --v39;
          }
          while (v39);
          v35 += v40 + 1;
          if ((BYTE7(v95) & 0x80) == 0)
            goto LABEL_48;
          v38 = (void **)__p[0];
LABEL_47:
          operator delete(v38);
        }
LABEL_48:
        v33 += 4;
        if (v33 == (char *)v36)
        {
          v31 = v120;
          v21 = (float)v35;
          if (v120 == v119)
          {
            v42 = 4;
            v31 = v119;
            goto LABEL_136;
          }
LABEL_95:
          if (v31)
          {
            v42 = 5;
            goto LABEL_136;
          }
          goto LABEL_18;
        }
      }
      v38 = (void **)__p[0];
      v39 = (char *)__p[1];
      if (__p[1])
        goto LABEL_41;
      goto LABEL_47;
    case 9u:
      v44 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      v45 = *v44;
      v47 = (unsigned int *)((char *)v44 + v45 + 4);
      v46 = *(unsigned int *)((char *)v44 + v45);
      v21 = 0.0;
      if (!(_DWORD)v46)
        goto LABEL_18;
      v48 = &v47[v46];
      while (1)
      {
        v49 = (unsigned int *)((char *)v47
                             + *v47
                             + *(unsigned __int16 *)((char *)v47 + *v47 - *(unsigned int *)((char *)v47 + *v47) + 4));
        std::string::basic_string[abi:ne180100](__p, (char *)v49 + *v49 + 4, *(unsigned int *)((char *)v49 + *v49));
        v50 = (SBYTE7(v95) & 0x80u) == 0 ? __p : (void **)__p[0];
        v51 = (SBYTE7(v95) & 0x80u) == 0 ? (char *)BYTE7(v95) : (char *)__p[1];
        v52 = strlen("\\CS-");
        v53 = !v51 || v52 == 0;
        v54 = "\\CS-";
        if (v53)
          break;
        v56 = v52 - 1;
        v57 = v51 - 1;
        v54 = "\\CS-";
        while (*(unsigned __int8 *)v50 == *v54)
        {
          ++v54;
          if (v57)
          {
            v50 = (void **)((char *)v50 + 1);
            v58 = v56--;
            --v57;
            if (v58)
              continue;
          }
          goto LABEL_67;
        }
        v55 = 0;
        if (SBYTE7(v95) < 0)
          goto LABEL_68;
LABEL_69:
        if (v55)
          goto LABEL_129;
        if (++v47 == v48)
          goto LABEL_18;
      }
LABEL_67:
      v55 = v54 == &aCs[v52];
      if ((SBYTE7(v95) & 0x80000000) == 0)
        goto LABEL_69;
LABEL_68:
      operator delete(__p[0]);
      goto LABEL_69;
    case 0xAu:
      v73 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      v74 = *v73;
      v76 = (unsigned int *)((char *)v73 + v74 + 4);
      v75 = *(unsigned int *)((char *)v73 + v74);
      v21 = 0.0;
      if (!(_DWORD)v75)
        goto LABEL_18;
      v77 = &v76[v75];
      break;
    case 0xFu:
      v71 = (unsigned int *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 8));
      v21 = (float)quasar::rescoring::Featurizer::NbestListEntryContainsLMEToken(a1, (unsigned int *)((char *)v71 + *v71));
      goto LABEL_18;
    case 0x10u:
      v28 = (unsigned __int16 *)((char *)v17 - *v17);
      v21 = 0.0;
      if (*v28 < 0x11u)
        goto LABEL_18;
      v24 = v28[8];
      if (!v24)
        goto LABEL_18;
      goto LABEL_100;
    case 0x11u:
      v23 = (unsigned __int16 *)((char *)v17 - *v17);
      v21 = 0.0;
      if (*v23 < 0x13u)
        goto LABEL_18;
      v24 = v23[9];
      if (!v24)
        goto LABEL_18;
LABEL_100:
      v21 = *(float *)((char *)v17 + v24);
      goto LABEL_18;
    case 0x14u:
      v25 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v25 >= 5u && (v26 = v25[2]) != 0)
        v27 = *(int *)((char *)v17 + v26);
      else
        v27 = 0;
      if (v27 == HIDWORD(a5))
        v21 = 1.0;
      else
        v21 = 0.0;
      goto LABEL_18;
    case 0x15u:
      v21 = (float)a4;
      goto LABEL_18;
    default:
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to compute value for feature ", 36);
      if (v9 <= 0x15)
        v91 = quasar::rescoring::EnumNamesFeatureType(void)::names[a5];
      else
        v91 = "";
      v92 = strlen(v91);
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)".", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  while (1)
  {
    v78 = (unsigned int *)((char *)v76
                         + *v76
                         + *(unsigned __int16 *)((char *)v76 + *v76 - *(unsigned int *)((char *)v76 + *v76) + 4));
    std::string::basic_string[abi:ne180100](__p, (char *)v78 + *v78 + 4, *(unsigned int *)((char *)v78 + *v78));
    v79 = (SBYTE7(v95) & 0x80u) == 0 ? __p : (void **)__p[0];
    v80 = (SBYTE7(v95) & 0x80u) == 0 ? (char *)BYTE7(v95) : (char *)__p[1];
    v81 = strlen("\\PM-");
    v82 = !v80 || v81 == 0;
    v83 = "\\PM-";
    if (v82)
      break;
    v85 = v81 - 1;
    v86 = v80 - 1;
    v83 = "\\PM-";
    while (*(unsigned __int8 *)v79 == *v83)
    {
      ++v83;
      if (v86)
      {
        v79 = (void **)((char *)v79 + 1);
        v87 = v85--;
        --v86;
        if (v87)
          continue;
      }
      goto LABEL_114;
    }
    v84 = 0;
    if (SBYTE7(v95) < 0)
      goto LABEL_115;
LABEL_116:
    if (v84)
    {
LABEL_129:
      v21 = 1.0;
      goto LABEL_18;
    }
    if (++v76 == v77)
      goto LABEL_18;
  }
LABEL_114:
  v84 = v83 == &aPm[v81];
  if ((SBYTE7(v95) & 0x80000000) == 0)
    goto LABEL_116;
LABEL_115:
  operator delete(__p[0]);
  goto LABEL_116;
}

void sub_1ADB0BC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmInfo::LmInfo(uint64_t a1, int a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  v4 = (std::string *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 64) = -1;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_1ADB0BD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *> *,long>>>(a1, *(char ***)a2, (char **)(a2 + 8));
  return a1;
}

void sub_1ADB0BDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *> *,long>>>(uint64_t *result, char **a2, char **a3)
{
  char **v4;
  uint64_t **v5;
  uint64_t *v6;
  char *v7;
  char **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__emplace_hint_unique_key_args<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (char **)v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char **)v4[2];
          v9 = *v8 == (char *)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__emplace_hint_unique_key_args<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>(uint64_t **a1, uint64_t *a2, char **a3, uint64_t a4)
{
  char **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  char **v12;

  v6 = std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__find_equal<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__construct_node<std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

char **std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__find_equal<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>(_QWORD *a1, uint64_t *a2, char ***a3, uint64_t *a4, char **a5)
{
  char **v9;
  char **v11;
  char **v12;
  uint64_t v13;
  char *v14;
  char **v15;
  char *v16;
  BOOL v17;
  char **v18;

  v9 = (char **)(a1 + 1);
  if (a1 + 1 == a2
    || std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (char **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (char **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (char **)a2;
        return (char **)a2;
      }
    }
    v11 = (char **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (char **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = (char *)a2;
      do
      {
        v12 = (char **)*((_QWORD *)v16 + 2);
        v17 = *v12 == v16;
        v16 = (char *)v12;
      }
      while (v17);
    }
    if (std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))goto LABEL_16;
    return (char **)std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__find_equal<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (char **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (char *)a2[1];
      do
      {
        v15 = (char **)v14;
        v14 = *(char **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (char **)a2;
      do
      {
        v15 = (char **)v18[2];
        v17 = *v15 == (char *)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))return (char **)std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__find_equal<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (char **)a2;
    }
    return (char **)a4;
  }
  *a3 = (char **)a2;
  *a4 = (uint64_t)a2;
  return (char **)a4;
}

_QWORD *std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__construct_node<std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x78uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>::pair[abi:ne180100](v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADB0C0F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__find_equal<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>(uint64_t a1, _QWORD *a2, char **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  char **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (char **)(v4 + 32);
        if (!std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100](v7, a3, (char **)(v4 + 32)))break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100](v7, v9, a3))break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100](uint64_t a1, char **a2, char **a3)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  char *v12;
  int v13;
  int v14;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  int v21;

  v3 = *a3;
  v4 = a3[1];
  v6 = *a2;
  v5 = a2[1];
  if (*a3 != v4)
  {
    v7 = v3 + 1;
    v8 = *a2;
    while (v8 != v5)
    {
      v9 = *v8;
      v10 = *(v7 - 1);
      if (v9 < v10)
        break;
      ++v8;
      if (v10 < v9 || v7++ == v4)
        goto LABEL_10;
    }
    return 1;
  }
LABEL_10:
  if (v6 != v5)
  {
    v12 = v6 + 1;
    while (v3 != v4)
    {
      v13 = *v3;
      v14 = *(v12 - 1);
      if (v13 < v14)
        break;
      ++v3;
      if (v14 < v13 || v12++ == v5)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v17 = a3[3];
  v16 = a3[4];
  if (v17 == v16)
    return 0;
  v18 = a2[3];
  v19 = v17 + 1;
  while (v18 != a2[4])
  {
    v20 = *v18;
    v21 = *(v19 - 1);
    if (v20 < v21)
      break;
    ++v18;
    if (v21 < v20 || v19++ == v16)
      return 0;
  }
  return 1;
}

_QWORD *std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100](a1, a2);
  kaldi::Matrix<float>::Matrix(v4 + 6, a2 + 48);
  return a1;
}

void sub_1ADB0C2A8(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState *v1;

  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  kaldi::Matrix<float>::~Matrix(a1 + 48);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;

  kaldi::Matrix<float>::~Matrix(a1 + 48);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  return a1;
}

void sub_1ADB0C430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<quasar::rescoring::FeatureType>::set[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a3;
    do
    {
      std::__tree<quasar::rescoring::FeatureType>::__emplace_hint_unique_key_args<quasar::rescoring::FeatureType,quasar::rescoring::FeatureType const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADB0C4B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<quasar::rescoring::FeatureType>::__emplace_hint_unique_key_args<quasar::rescoring::FeatureType,quasar::rescoring::FeatureType const&>(uint64_t **a1, uint64_t *a2, char *a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<quasar::rescoring::FeatureType>::__find_equal<quasar::rescoring::FeatureType>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v7 + 25) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<quasar::rescoring::FeatureType>::__find_equal<quasar::rescoring::FeatureType>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((char *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((char *)v10 + 25) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(char *)(v16 + 25);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 25))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(char *)(v20 + 25);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t quasar::rescoring::NBestListToken::phones(quasar::rescoring::NBestListToken *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 7u && (v2 = v1[3]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

uint64_t quasar::rescoring::NBestListToken::text(quasar::rescoring::NBestListToken *this)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 >= 5u && (v2 = v1[2]) != 0)
    return (uint64_t)this + v2 + *(unsigned int *)((char *)this + v2);
  else
    return 0;
}

char *quasar::lm::FindOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(uint64_t a1, char **a2)
{
  quasar::lm *v4;
  quasar::lm *v5;
  _QWORD *Featurizer;
  _QWORD *v7;
  _BYTE v9[16];

  v4 = (quasar::lm *)std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::find<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>(a1, a2);
  v5 = v4;
  if ((quasar::lm *)(a1 + 8) == v4)
  {
    quasar::lm::LogMessage::LogMessage(v9, 5, "FindOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 104);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v9);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"missing key ", 12);
    quasar::rescoring::operator<<(v7, (uint64_t)a2);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v9);
  }
  else
  {
    quasar::lm::nullstream(v4);
  }
  return (char *)v5 + 80;
}

void sub_1ADB0C7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::find<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>(uint64_t a1, char **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100](v5, (char **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::operator()[abi:ne180100](v5, a2, (char **)(v6 + 32)))
  {
    return v2;
  }
  return v6;
}

void std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E5D3CE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3CE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v2 = *(uint64_t (**)(_QWORD *))(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(a2 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

uint64_t std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const,std::allocator<flatbuffers_2_0_6::String const* (quasar::rescoring::NBestListToken::*)(void)const>,flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::target_type()
{
}

_QWORD *kaldi::TableWriter<kaldi::KaldiObjectHolder<kaldi::Matrix<double>>>::CheckImpl(_QWORD *result)
{
  _QWORD *v1;
  _QWORD v2[34];

  if (!*result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Trying to use empty TableWriter (perhaps you ", 45);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "passed the empty string as an argument to a program?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t quasar::lm::InsertIfNotPresent<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  char v4;
  char v5;
  void *v7[3];
  void *__p;
  void *v9;
  uint64_t v10;

  std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>::pair[abi:ne180100]<true,0>(v7, a2, a3);
  std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__emplace_unique_key_args<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>(a1, (char **)v7, (uint64_t)v7);
  v5 = v4;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v10);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  return v5 & 1;
}

void sub_1ADB0CA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__emplace_unique_key_args<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>(uint64_t **a1, char **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__find_equal<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::__map_value_compare<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,std::less<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,true>,std::allocator<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>>::__construct_node<std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::pair<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const,kaldi::Matrix<float>>::pair[abi:ne180100]<true,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100](a1, a2);
  kaldi::Matrix<float>::Matrix(v5 + 6, a3);
  return a1;
}

void sub_1ADB0CB20(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState *v1;

  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void sub_1ADB0CCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADB0CF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char *a47)
{
  a47 = &a22;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  _Unwind_Resume(a1);
}

void sub_1ADB0D0F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADB0D170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADB0D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  uint64_t v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v18, 0x10B2C40E0D2C62ELL);

  _Unwind_Resume(a1);
}

void sub_1ADB0D960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{

  _Unwind_Resume(a1);
}

void EARHelpers::ArrayToVector2<std::vector<quasar::Token>,std::vector<quasar::Token> (*)(NSArray<_EARSpeechRecognitionToken *> *)>(void *a1@<X0>, void (*a2)(_QWORD *__return_ptr)@<X1>, uint64_t *a3@<X8>)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v6);
        v10 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * v9);
        EARHelpers::ArrayToVector<std::vector<quasar::Token>,std::vector<quasar::Token> (*)(NSArray<_EARSpeechRecognitionToken *> *)>(v10, a2, v11);
        std::vector<std::vector<std::vector<quasar::Token>>>::push_back[abi:ne180100](a3, (uint64_t)v11);
        v16 = (void **)v11;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v16);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    }
    while (v7);
  }

}

void sub_1ADB0DC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::KeywordFinder::KeywordFinderRetValue::~KeywordFinderRetValue(void **this)
{
  void **v2;
  void **v3;

  v2 = this + 6;
  v3 = this + 9;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 3;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t quasar::G2P::TokenProns::TokenProns(uint64_t a1, const std::string *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 48) = 0u;
  v7 = a1 + 48;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v8 = a1 + 24;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  if ((uint64_t *)v8 != a3)
    std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v8, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  if ((uint64_t *)v7 != a4)
    std::vector<quasar::PronChoice>::__assign_with_size[abi:ne180100]<quasar::PronChoice*,quasar::PronChoice*>(v7, *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3));
  return a1;
}

void sub_1ADB0DDD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  a1[1] = v2;
}

void std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::default_delete<quasar::KeywordFinder>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    quasar::Sanitizer::~Sanitizer((quasar::Sanitizer *)(a2 + 1696));
    if (*(char *)(a2 + 1695) < 0)
      operator delete(*(void **)(a2 + 1672));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 1648);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 1632);
    if (*(char *)(a2 + 1623) < 0)
      operator delete(*(void **)(a2 + 1600));
    if (*(char *)(a2 + 1599) < 0)
      operator delete(*(void **)(a2 + 1576));
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(a2 + 32));
    std::__tree<int>::destroy(a2 + 8, *(_QWORD **)(a2 + 16));
    JUMPOUT(0x1AF44D190);
  }
}

void quasar::G2P::TokenProns::~TokenProns(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::vector<quasar::G2P::TokenProns>::__push_back_slow_path<quasar::G2P::TokenProns>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[72 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v16[2] = v11 + 72;
  std::vector<quasar::G2P::TokenProns>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<quasar::G2P::TokenProns>::~__split_buffer(v16);
  return v14;
}

void sub_1ADB0E188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::G2P::TokenProns>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::G2P::TokenProns>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>,std::reverse_iterator<quasar::G2P::TokenProns*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 72;
      *((_QWORD *)&v14 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::G2P::TokenProns>,std::reverse_iterator<quasar::G2P::TokenProns*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 24);
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **std::__split_buffer<quasar::G2P::TokenProns>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::G2P::TokenProns>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::G2P::TokenProns>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100](v4, i - 72);
  }
}

void std::vector<quasar::G2P::TokenProns>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::G2P::TokenProns>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EARHelpers::ArrayToVector<std::vector<quasar::Token>,std::vector<quasar::Token> (*)(NSArray<_EARSpeechRecognitionToken *> *)>(void *a1@<X0>, void (*a2)(_QWORD *__return_ptr)@<X1>, uint64_t *a3@<X8>)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v6);
        v10 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * v9);
        a2(v11);
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a3, (uint64_t)v11);
        v16 = (void **)v11;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v16);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    }
    while (v7);
  }

}

void sub_1ADB0E5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TensorFstCreator::Build(uint64_t a1, uint64_t *a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  _QWORD *v38;
  int v39;
  char **v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  _DWORD *v52;
  BOOL v53;
  float v54;
  char *v55;
  float *v56;
  float *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  float *v63;
  int v64;
  float v65;
  float *v66;
  float *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  float *v73;
  int v74;
  float v75;
  float *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  float *v82;
  int v83;
  float v84;
  char *v85;
  char *v86;
  float *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  float v97;
  float *v98;
  float *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  float *v105;
  int v106;
  float v107;
  float *v108;
  float *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  float *v115;
  int v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  int v128;
  char *v129;
  int *v130;
  int *v131;
  char **v132;
  int *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  int *v139;
  int v140;
  int v141;
  int *v142;
  int *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  int *v149;
  int v150;
  int *v151;
  int *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  int *v158;
  int v159;
  int v160;
  _DWORD *v161;
  int *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  int *v168;
  int v169;
  _DWORD *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  int v179;
  char **v180;
  int v181;
  _QWORD *v182;
  unint64_t v183;
  void **v184;
  _QWORD *v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  int v191;
  int v192;
  void **v193;
  __int128 v194;
  char *v195;
  void *__p;
  __int128 v197;
  char *v198;
  char **v199;
  int v200;

  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  v4 = (void **)(a1 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 152);
  v193 = (void **)(a1 + 152);
  *(_QWORD *)&v194 = 0;
  *(_QWORD *)(a1 + 160) = v5;
  v184 = (void **)(a1 + 104);
  v6 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
  *((_QWORD *)&v194 + 1) = 0;
  v195 = 0;
  std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve((char **)&v194, v6);
  v7 = *(_QWORD **)(a1 + 56);
  v8 = *(_QWORD **)(a1 + 64);
  v186 = v4;
  if (v7 != v8)
  {
    do
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 88))(*v7, 0);
      kaldi::quasar::TensorFstCreator::PreprocessFst((uint64_t)v9, v9);
      v10 = (_QWORD *)*((_QWORD *)&v194 + 1);
      if (*((_QWORD *)&v194 + 1) >= (unint64_t)v195)
      {
        v12 = (_QWORD *)v194;
        v13 = (uint64_t)(*((_QWORD *)&v194 + 1) - v194) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = (uint64_t)&v195[-v194];
        if ((uint64_t)&v195[-v194] >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v199 = &v195;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v195, v16);
          v10 = (_QWORD *)*((_QWORD *)&v194 + 1);
          v12 = (_QWORD *)v194;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        v198 = v19;
        *(_QWORD *)v18 = v9;
        *((_QWORD *)&v197 + 1) = v18 + 8;
        if (v10 == v12)
        {
          v11 = v18 + 8;
        }
        else
        {
          do
          {
            v20 = *--v10;
            *v10 = 0;
            *((_QWORD *)v18 - 1) = v20;
            v18 -= 8;
          }
          while (v10 != v12);
          v11 = (_QWORD *)*((_QWORD *)&v197 + 1);
          v19 = v198;
        }
        v21 = v194;
        *(_QWORD *)&v194 = v18;
        *((_QWORD *)&v194 + 1) = v11;
        v197 = v21;
        v22 = v195;
        v195 = v19;
        v198 = v22;
        __p = (void *)v21;
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        **((_QWORD **)&v194 + 1) = v9;
        v11 = v10 + 1;
      }
      *((_QWORD *)&v194 + 1) = v11;
      ++v7;
    }
    while (v7 != v8);
    v23 = *(uint64_t **)(a1 + 56);
    for (i = *(uint64_t **)(a1 + 64); v23 != i; ++v23)
    {
      v25 = *v23;
      __p = 0;
      v197 = 0uLL;
      fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v25, a2, (uint64_t *)&__p);
      if (__p)
      {
        *(_QWORD *)&v197 = __p;
        operator delete(__p);
      }
    }
  }
  v26 = *(_QWORD *)(a1 + 144);
  v185 = (_QWORD *)(a1 + 144);
  v27 = *(char **)(a1 + 136);
  if ((unint64_t)v27 >= v26)
  {
    v29 = (char *)*v4;
    v30 = (v27 - (_BYTE *)*v4) >> 2;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v32 = v26 - (_QWORD)v29;
    if (v32 >> 1 > v31)
      v31 = v32 >> 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
      v33 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v185, v33);
      v29 = *(char **)(a1 + 128);
      v27 = *(char **)(a1 + 136);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[4 * v30];
    v36 = &v34[4 * v33];
    *(_DWORD *)v35 = 0;
    v28 = v35 + 4;
    while (v27 != v29)
    {
      v37 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *((_DWORD *)v35 - 1) = v37;
      v35 -= 4;
    }
    *(_QWORD *)(a1 + 128) = v35;
    *(_QWORD *)(a1 + 136) = v28;
    *(_QWORD *)(a1 + 144) = v36;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_DWORD *)v27 = 0;
    v28 = v27 + 4;
  }
  *(_QWORD *)(a1 + 136) = v28;
  v182 = (_QWORD *)*((_QWORD *)&v194 + 1);
  v38 = (_QWORD *)v194;
  if ((_QWORD)v194 == *((_QWORD *)&v194 + 1))
  {
    v39 = 0;
    v192 = 1;
  }
  else
  {
    v187 = 0;
    v181 = 0;
    v39 = 0;
    v40 = (char **)(a1 + 168);
    v192 = 1;
    v180 = (char **)(a1 + 120);
    do
    {
      v41 = *(_QWORD *)(*(_QWORD *)(*v38 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(*v38 + 8) + 64);
      if ((int)(v41 >> 3) < 1)
      {
        ++v181;
      }
      else
      {
        v183 = v41 >> 3;
        v42 = 0;
        v43 = 0;
        v188 = (v41 >> 3);
        v189 = v38;
        do
        {
          v44 = *v38;
          v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v38 + 8) + 64) + 8 * v42);
          v47 = *(_QWORD *)(v45 + 24);
          v46 = *(_QWORD *)(v45 + 32);
          if (v46 == v47)
            v48 = 0;
          else
            v48 = *(_QWORD *)(v45 + 24);
          if (v46 == v47)
          {
            LODWORD(v50) = 0;
            v38 = v189;
          }
          else
          {
            v190 = v42;
            v191 = v39;
            v49 = 0;
            if ((unint64_t)((v46 - v47) >> 4) <= 1)
              v50 = 1;
            else
              v50 = (v46 - v47) >> 4;
            v51 = *(float **)(a1 + 160);
            do
            {
              v52 = (_DWORD *)(v48 + 16 * v49);
              v53 = *v52 == 0;
              v54 = (float)(v52[3] + v192);
              v55 = *v40;
              if (v51 >= (float *)*v40)
              {
                v57 = (float *)*v193;
                v58 = ((char *)v51 - (_BYTE *)*v193) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v60 = v55 - (char *)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v61);
                  v57 = *(float **)(a1 + 152);
                  v51 = *(float **)(a1 + 160);
                }
                else
                {
                  v62 = 0;
                }
                v63 = (float *)&v62[4 * v58];
                *v63 = v54;
                v56 = v63 + 1;
                while (v51 != v57)
                {
                  v64 = *((_DWORD *)v51-- - 1);
                  *((_DWORD *)v63-- - 1) = v64;
                }
                v55 = &v62[4 * v61];
                *(_QWORD *)(a1 + 152) = v63;
                *(_QWORD *)(a1 + 160) = v56;
                *(_QWORD *)(a1 + 168) = v55;
                if (v57)
                {
                  operator delete(v57);
                  v55 = *v40;
                }
              }
              else
              {
                *v51 = v54;
                v56 = v51 + 1;
              }
              *(_QWORD *)(a1 + 160) = v56;
              v65 = (float)(*v52 - 1);
              if (v56 >= (float *)v55)
              {
                v67 = (float *)*v193;
                v68 = ((char *)v56 - (_BYTE *)*v193) >> 2;
                v69 = v68 + 1;
                if ((unint64_t)(v68 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v70 = v55 - (char *)v67;
                if (v70 >> 1 > v69)
                  v69 = v70 >> 1;
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
                  v71 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v71 = v69;
                if (v71)
                {
                  v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v71);
                  v67 = *(float **)(a1 + 152);
                  v56 = *(float **)(a1 + 160);
                }
                else
                {
                  v72 = 0;
                }
                v73 = (float *)&v72[4 * v68];
                *v73 = v65;
                v66 = v73 + 1;
                while (v56 != v67)
                {
                  v74 = *((_DWORD *)v56-- - 1);
                  *((_DWORD *)v73-- - 1) = v74;
                }
                v55 = &v72[4 * v71];
                *(_QWORD *)(a1 + 152) = v73;
                *(_QWORD *)(a1 + 160) = v66;
                *(_QWORD *)(a1 + 168) = v55;
                if (v67)
                {
                  operator delete(v67);
                  v55 = *v40;
                }
              }
              else
              {
                *v56 = v65;
                v66 = v56 + 1;
              }
              *(_QWORD *)(a1 + 160) = v66;
              v75 = -*(float *)(v48 + 16 * v49 + 8);
              if (v66 >= (float *)v55)
              {
                v76 = (float *)*v193;
                v77 = ((char *)v66 - (_BYTE *)*v193) >> 2;
                v78 = v77 + 1;
                if ((unint64_t)(v77 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v79 = v55 - (char *)v76;
                if (v79 >> 1 > v78)
                  v78 = v79 >> 1;
                if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
                  v80 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v80 = v78;
                if (v80)
                {
                  v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v80);
                  v76 = *(float **)(a1 + 152);
                  v66 = *(float **)(a1 + 160);
                }
                else
                {
                  v81 = 0;
                }
                v82 = (float *)&v81[4 * v77];
                *v82 = v75;
                v51 = v82 + 1;
                while (v66 != v76)
                {
                  v83 = *((_DWORD *)v66-- - 1);
                  *((_DWORD *)v82-- - 1) = v83;
                }
                *(_QWORD *)(a1 + 152) = v82;
                *(_QWORD *)(a1 + 160) = v51;
                *(_QWORD *)(a1 + 168) = &v81[4 * v80];
                if (v76)
                  operator delete(v76);
              }
              else
              {
                *v66 = v75;
                v51 = v66 + 1;
              }
              v43 |= v53;
              *(_QWORD *)(a1 + 160) = v51;
              ++v49;
            }
            while (v49 != v50);
            v38 = v189;
            v42 = v190;
            v44 = *v189;
            v39 = v191;
          }
          v84 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, v42);
          *(float *)&__p = v84;
          v200 = 2139095040;
          if (v84 != INFINITY)
          {
            v86 = *(char **)(a1 + 160);
            v85 = *(char **)(a1 + 168);
            if (v86 >= v85)
            {
              v88 = (char *)*v193;
              v89 = (v86 - (_BYTE *)*v193) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v91 = v85 - v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v92);
                v88 = *(char **)(a1 + 152);
                v86 = *(char **)(a1 + 160);
              }
              else
              {
                v93 = 0;
              }
              v94 = &v93[4 * v89];
              *(_DWORD *)v94 = 0;
              v87 = (float *)(v94 + 4);
              while (v86 != v88)
              {
                v95 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              v85 = &v93[4 * v92];
              *(_QWORD *)(a1 + 152) = v94;
              *(_QWORD *)(a1 + 160) = v87;
              *(_QWORD *)(a1 + 168) = v85;
              if (v88)
              {
                operator delete(v88);
                v85 = *v40;
              }
            }
            else
            {
              *(_DWORD *)v86 = 0;
              v87 = (float *)(v86 + 4);
            }
            v96 = v42;
            *(_QWORD *)(a1 + 160) = v87;
            v97 = (float)(*(_DWORD *)(*(_QWORD *)a1 + 8 * v187 + 4) - 1);
            if (v87 >= (float *)v85)
            {
              v99 = (float *)*v193;
              v100 = ((char *)v87 - (_BYTE *)*v193) >> 2;
              v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v102 = v85 - (char *)v99;
              if (v102 >> 1 > v101)
                v101 = v102 >> 1;
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                v103 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v103 = v101;
              if (v103)
              {
                v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v103);
                v99 = *(float **)(a1 + 152);
                v87 = *(float **)(a1 + 160);
              }
              else
              {
                v104 = 0;
              }
              v105 = (float *)&v104[4 * v100];
              *v105 = v97;
              v98 = v105 + 1;
              while (v87 != v99)
              {
                v106 = *((_DWORD *)v87-- - 1);
                *((_DWORD *)v105-- - 1) = v106;
              }
              v85 = &v104[4 * v103];
              *(_QWORD *)(a1 + 152) = v105;
              *(_QWORD *)(a1 + 160) = v98;
              *(_QWORD *)(a1 + 168) = v85;
              if (v99)
              {
                operator delete(v99);
                v85 = *v40;
              }
            }
            else
            {
              *v87 = v97;
              v98 = v87 + 1;
            }
            *(_QWORD *)(a1 + 160) = v98;
            v107 = -v84;
            if (v98 >= (float *)v85)
            {
              v109 = (float *)*v193;
              v110 = ((char *)v98 - (_BYTE *)*v193) >> 2;
              v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v112 = v85 - (char *)v109;
              if (v112 >> 1 > v111)
                v111 = v112 >> 1;
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                v113 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v113 = v111;
              if (v113)
              {
                v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v113);
                v109 = *(float **)(a1 + 152);
                v98 = *(float **)(a1 + 160);
              }
              else
              {
                v114 = 0;
              }
              v115 = (float *)&v114[4 * v110];
              *v115 = v107;
              v108 = v115 + 1;
              while (v98 != v109)
              {
                v116 = *((_DWORD *)v98-- - 1);
                *((_DWORD *)v115-- - 1) = v116;
              }
              *(_QWORD *)(a1 + 152) = v115;
              *(_QWORD *)(a1 + 160) = v108;
              *(_QWORD *)(a1 + 168) = &v114[4 * v113];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *v98 = v107;
              v108 = v98 + 1;
            }
            v42 = v96;
            *(_QWORD *)(a1 + 160) = v108;
            LODWORD(v50) = v50 + 1;
          }
          v118 = *(char **)(a1 + 136);
          v117 = *(_QWORD *)(a1 + 144);
          if ((unint64_t)v118 >= v117)
          {
            v120 = (char *)*v186;
            v121 = (v118 - (_BYTE *)*v186) >> 2;
            v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v123 = v117 - (_QWORD)v120;
            if (v123 >> 1 > v122)
              v122 = v123 >> 1;
            if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
              v124 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v124 = v122;
            if (v124)
            {
              v125 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v185, v124);
              v120 = *(char **)(a1 + 128);
              v118 = *(char **)(a1 + 136);
            }
            else
            {
              v125 = 0;
            }
            v126 = &v125[4 * v121];
            *(_DWORD *)v126 = v39;
            v119 = v126 + 4;
            while (v118 != v120)
            {
              v127 = *((_DWORD *)v118 - 1);
              v118 -= 4;
              *((_DWORD *)v126 - 1) = v127;
              v126 -= 4;
            }
            *(_QWORD *)(a1 + 128) = v126;
            *(_QWORD *)(a1 + 136) = v119;
            *(_QWORD *)(a1 + 144) = &v125[4 * v124];
            if (v120)
              operator delete(v120);
          }
          else
          {
            *(_DWORD *)v118 = v39;
            v119 = v118 + 4;
          }
          *(_QWORD *)(a1 + 136) = v119;
          v39 += v50;
          ++v42;
        }
        while (v42 != v188);
        v128 = *(_DWORD *)(*(_QWORD *)a1 + 8 * v187) - 1;
        v130 = *(int **)(a1 + 112);
        v129 = *(char **)(a1 + 120);
        if (v130 >= (int *)v129)
        {
          v133 = (int *)*v184;
          v134 = ((char *)v130 - (_BYTE *)*v184) >> 2;
          v135 = v134 + 1;
          v132 = (char **)(a1 + 120);
          if ((unint64_t)(v134 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v136 = v129 - (char *)v133;
          if (v136 >> 1 > v135)
            v135 = v136 >> 1;
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
            v137 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v137 = v135;
          if (v137)
          {
            v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v180, v137);
            v133 = *(int **)(a1 + 104);
            v130 = *(int **)(a1 + 112);
          }
          else
          {
            v138 = 0;
          }
          v139 = (int *)&v138[4 * v134];
          *v139 = v128;
          v131 = v139 + 1;
          while (v130 != v133)
          {
            v140 = *--v130;
            *--v139 = v140;
          }
          v129 = &v138[4 * v137];
          *(_QWORD *)(a1 + 104) = v139;
          *(_QWORD *)(a1 + 112) = v131;
          *(_QWORD *)(a1 + 120) = v129;
          if (v133)
          {
            operator delete(v133);
            v129 = *v180;
          }
        }
        else
        {
          *v130 = v128;
          v131 = v130 + 1;
          v132 = (char **)(a1 + 120);
        }
        *(_QWORD *)(a1 + 112) = v131;
        v141 = *(_DWORD *)(*(_QWORD *)a1 + 8 * v187 + 4) - 1;
        if (v131 >= (int *)v129)
        {
          v143 = (int *)*v184;
          v144 = ((char *)v131 - (_BYTE *)*v184) >> 2;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v146 = v129 - (char *)v143;
          if (v146 >> 1 > v145)
            v145 = v146 >> 1;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
            v147 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          if (v147)
          {
            v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v132, v147);
            v143 = *(int **)(a1 + 104);
            v131 = *(int **)(a1 + 112);
          }
          else
          {
            v148 = 0;
          }
          v149 = (int *)&v148[4 * v144];
          *v149 = v141;
          v142 = v149 + 1;
          while (v131 != v143)
          {
            v150 = *--v131;
            *--v149 = v150;
          }
          v129 = &v148[4 * v147];
          *(_QWORD *)(a1 + 104) = v149;
          *(_QWORD *)(a1 + 112) = v142;
          *(_QWORD *)(a1 + 120) = v129;
          if (v143)
          {
            operator delete(v143);
            v129 = *v132;
          }
        }
        else
        {
          *v131 = v141;
          v142 = v131 + 1;
        }
        *(_QWORD *)(a1 + 112) = v142;
        if (v142 >= (int *)v129)
        {
          v152 = (int *)*v184;
          v153 = ((char *)v142 - (_BYTE *)*v184) >> 2;
          v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v155 = v129 - (char *)v152;
          if (v155 >> 1 > v154)
            v154 = v155 >> 1;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
            v156 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          if (v156)
          {
            v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v132, v156);
            v152 = *(int **)(a1 + 104);
            v142 = *(int **)(a1 + 112);
          }
          else
          {
            v157 = 0;
          }
          v158 = (int *)&v157[4 * v153];
          *v158 = v192;
          v151 = v158 + 1;
          while (v142 != v152)
          {
            v159 = *--v142;
            *--v158 = v159;
          }
          v129 = &v157[4 * v156];
          *(_QWORD *)(a1 + 104) = v158;
          *(_QWORD *)(a1 + 112) = v151;
          *(_QWORD *)(a1 + 120) = v129;
          if (v152)
          {
            operator delete(v152);
            v129 = *v132;
          }
        }
        else
        {
          *v142 = v192;
          v151 = v142 + 1;
        }
        *(_QWORD *)(a1 + 112) = v151;
        v160 = v43 & 1;
        if (v151 >= (int *)v129)
        {
          v162 = (int *)*v184;
          v163 = ((char *)v151 - (_BYTE *)*v184) >> 2;
          v164 = v163 + 1;
          if ((unint64_t)(v163 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v165 = v129 - (char *)v162;
          if (v165 >> 1 > v164)
            v164 = v165 >> 1;
          if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
            v166 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v166 = v164;
          if (v166)
          {
            v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v132, v166);
            v162 = *(int **)(a1 + 104);
            v151 = *(int **)(a1 + 112);
          }
          else
          {
            v167 = 0;
          }
          v168 = (int *)&v167[4 * v163];
          *v168 = v160;
          v161 = v168 + 1;
          while (v151 != v162)
          {
            v169 = *--v151;
            *--v168 = v169;
          }
          *(_QWORD *)(a1 + 104) = v168;
          *(_QWORD *)(a1 + 112) = v161;
          *(_QWORD *)(a1 + 120) = &v167[4 * v166];
          if (v162)
            operator delete(v162);
        }
        else
        {
          *v151 = v160;
          v161 = v151 + 1;
        }
        v192 += v183;
        *(_QWORD *)(a1 + 112) = v161;
      }
      ++v187;
      ++v38;
    }
    while (v38 != v182);
    v28 = *(char **)(a1 + 136);
    v4 = v186;
  }
  if ((unint64_t)v28 >= *v185)
  {
    v171 = (char *)*v4;
    v172 = (v28 - (_BYTE *)*v4) >> 2;
    v173 = v172 + 1;
    if ((unint64_t)(v172 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v174 = *v185 - (_QWORD)v171;
    if (v174 >> 1 > v173)
      v173 = v174 >> 1;
    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
      v175 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v175 = v173;
    if (v175)
    {
      v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v185, v175);
      v171 = *(char **)(a1 + 128);
      v28 = *(char **)(a1 + 136);
    }
    else
    {
      v176 = 0;
    }
    v177 = &v176[4 * v172];
    v178 = &v176[4 * v175];
    *(_DWORD *)v177 = v39;
    v170 = v177 + 4;
    while (v28 != v171)
    {
      v179 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *((_DWORD *)v177 - 1) = v179;
      v177 -= 4;
    }
    *(_QWORD *)(a1 + 128) = v177;
    *(_QWORD *)(a1 + 136) = v170;
    *(_QWORD *)(a1 + 144) = v178;
    if (v171)
      operator delete(v171);
  }
  else
  {
    *(_DWORD *)v28 = v39;
    v170 = v28 + 4;
  }
  *(_QWORD *)(a1 + 136) = v170;
  *(_DWORD *)(a1 + 48) = v192 - 1;
  *(_DWORD *)(a1 + 52) = v39;
  __p = &v194;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADB0F38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  *(_QWORD *)(v27 - 112) = &a23;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

void kaldi::quasar::TensorFstCreator::PreprocessFst(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;

  v4 = 1;
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)a2, &v4);
  v3 = (*(uint64_t (**)(_QWORD *))(*a2 + 112))(a2);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 288))(a2, v3);
  fst::DeterminizeStarInLog(a2, 0, -1, 0.00097656);
  fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2, 0.00097656);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
}

uint64_t fst::Relabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  fst *v18;
  _QWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v25;
  void *__p[2];
  char v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  unsigned int v33;
  _OWORD v34[2];
  int v35;
  _OWORD v36[2];
  int v37;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *(_DWORD *)(v7 + v8 + 4);
      *(_QWORD *)&v34[0] = v7 + v8;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v36, (int *)(v7 + v8), (uint64_t)&std::piecewise_construct, (_DWORD **)v34)+ 5) = v10;
      ++v9;
      v7 = *a2;
      v8 += 8;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  v11 = *a3;
  if (a3[1] != *a3)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(_DWORD *)(v11 + v12 + 4);
      v31 = (_DWORD *)(v11 + v12);
      *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v34, (int *)(v11 + v12), (uint64_t)&std::piecewise_construct, &v31)+ 5) = v14;
      ++v13;
      v11 = *a3;
      v12 += 8;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  v33 = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)a1 + 128))(a1, &v31);
  while (1)
  {
    if (!v31)
    {
      if ((int)v33 >= v32)
        goto LABEL_45;
LABEL_13:
      v15 = v33;
      goto LABEL_14;
    }
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31) & 1) != 0)
      break;
    if (!v31)
      goto LABEL_13;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v31 + 24))();
LABEL_14:
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v15, &v30);
    while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30) & 1) == 0)
    {
      v29 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
      v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v36, (int *)&v29);
      if (v16)
      {
        if (*((_DWORD *)v16 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v18 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
          v19 = (_QWORD *)fst::cerr(v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input symbol id ", 16);
          v22 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" missing from target vocabulary", 31);
          goto LABEL_36;
        }
        LODWORD(v29) = *((_DWORD *)v16 + 5);
      }
      v17 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v34, (int *)&v29 + 1);
      if (v17)
      {
        if (*((_DWORD *)v17 + 5) == -1)
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v20 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
          v21 = (_QWORD *)fst::cerr(v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Output symbol id ", 17);
          v23 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" missing from target vocabulary", 31);
LABEL_36:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
          if (v27 < 0)
            operator delete(__p[0]);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          if (v31)
            (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
          goto LABEL_42;
        }
        DWORD1(v29) = *((_DWORD *)v17 + 5);
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v30 + 88))(v30, &v29);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    }
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    if (v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 32))(v31);
    else
      ++v33;
  }
  if (v31)
    (*(void (**)(void))(*(_QWORD *)v31 + 8))();
LABEL_45:
  v25 = fst::RelabelProperties(v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v25, 0x3FFFFFFF0007);
LABEL_42:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v34);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v36);
}

void sub_1ADB0F994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a31);
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::TensorFstCreator::Make@<Q0>(kaldi::quasar::TensorFstCreator *this@<X0>, const kaldi::quasar::ComputeEngineItf *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;

  (*(void (**)(uint64_t *__return_ptr, const kaldi::quasar::ComputeEngineItf *, char *, _QWORD))(*(_QWORD *)a2 + 16))(&v19, a2, (char *)this + 104, 0);
  v6 = v19;
  v19 = 0;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v19;
    v19 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  (*(void (**)(uint64_t *__return_ptr, const kaldi::quasar::ComputeEngineItf *, char *, _QWORD))(*(_QWORD *)a2 + 16))(&v19, a2, (char *)this + 128, 0);
  v9 = v19;
  v19 = 0;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v19;
    v19 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  (*(void (**)(uint64_t *__return_ptr, const kaldi::quasar::ComputeEngineItf *, char *, _QWORD))(*(_QWORD *)a2 + 24))(&v19, a2, (char *)this + 152, 0);
  v12 = v19;
  v19 = 0;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)a3 = v15;
  v16 = *((_QWORD *)this + 5);
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v17;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)this + 56);
  *(_QWORD *)(a3 + 48) = *((_QWORD *)this + 9);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  result = *((__n128 *)this + 5);
  *(__n128 *)(a3 + 56) = result;
  *(_QWORD *)(a3 + 72) = *((_QWORD *)this + 12);
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t fst::GetLinearSymbolSequence<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>(uint64_t a1, char *a2, uint64_t a3, float *a4, int a5)
{
  uint64_t v10;
  float i;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  int v18;
  BOOL v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  float v41;
  uint64_t v43;
  float *v45;
  char *v46;
  _QWORD v47[3];
  _DWORD *v48;
  uint64_t v49;
  void *v50;
  _DWORD *v51;
  unint64_t v52;
  void *__p;
  _DWORD *v54;
  unint64_t v55;
  int v56;

  __p = 0;
  v54 = 0;
  v55 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v10 == -1)
  {
    if (a2)
      *((_QWORD *)a2 + 1) = *(_QWORD *)a2;
    if (a3)
      *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
    if (a4)
      *a4 = INFINITY;
  }
  else
  {
    v46 = a2;
    v45 = a4;
    for (i = 0.0; ; i = v15)
    {
      v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v10);
      *(float *)v47 = v12;
      v56 = 2139095040;
      if (v12 != INFINITY)
        break;
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v10) != 1)
        goto LABEL_76;
      v49 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v10, v47);
      if (v47[0])
        v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47[0] + 32))(v47[0]);
      else
        v13 = v47[1] + 16 * v49;
      v14 = *(float *)(v13 + 8);
      v15 = NAN;
      if (v14 != -INFINITY && i != -INFINITY)
      {
        v16 = v14 == INFINITY || i == INFINITY;
        v17 = i + v14;
        if (v16)
          v15 = INFINITY;
        else
          v15 = v17;
      }
      v18 = *(_DWORD *)v13;
      if (*(_DWORD *)v13)
        v19 = 0;
      else
        v19 = a5 == 0;
      if (!v19)
      {
        v20 = v54;
        if ((unint64_t)v54 >= v55)
        {
          v22 = __p;
          v23 = ((char *)v54 - (_BYTE *)__p) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            goto LABEL_91;
          v25 = v55 - (_QWORD)__p;
          if ((uint64_t)(v55 - (_QWORD)__p) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v55, v26);
            v22 = __p;
            v20 = v54;
            v18 = *(_DWORD *)v13;
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v18;
          v21 = v28 + 4;
          while (v20 != v22)
          {
            v29 = *--v20;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __p = v28;
          v54 = v21;
          v55 = (unint64_t)&v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v54 = v18;
          v21 = v20 + 1;
        }
        v54 = v21;
      }
      v30 = *(_DWORD *)(v13 + 4);
      if (v30 || a5)
      {
        v31 = v51;
        if ((unint64_t)v51 >= v52)
        {
          v33 = v50;
          v34 = ((char *)v51 - (_BYTE *)v50) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
LABEL_91:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v52 - (_QWORD)v50;
          if ((uint64_t)(v52 - (_QWORD)v50) >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v52, v37);
            v33 = v50;
            v31 = v51;
            v30 = *(_DWORD *)(v13 + 4);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v30;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *--v31;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          v50 = v39;
          v51 = v32;
          v52 = (unint64_t)&v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v51 = v30;
          v32 = v31 + 1;
        }
        v51 = v32;
      }
      v10 = *(unsigned int *)(v13 + 12);
      if (v47[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v47[0] + 8))(v47[0]);
      }
      else if (v48)
      {
        --*v48;
      }
    }
    v41 = NAN;
    if (v12 != -INFINITY && i != -INFINITY)
    {
      if (v12 == INFINITY || i == INFINITY)
        v41 = INFINITY;
      else
        v41 = i + v12;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v10))
    {
LABEL_76:
      v43 = 0;
      goto LABEL_86;
    }
    if (v46 && &__p != (void **)v46)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v46, (char *)__p, (uint64_t)v54, ((char *)v54 - (_BYTE *)__p) >> 2);
    if (a3 && &v50 != (void **)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a3, (char *)v50, (uint64_t)v51, ((char *)v51 - (_BYTE *)v50) >> 2);
    if (v45)
      *v45 = v41;
  }
  v43 = 1;
LABEL_86:
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  return v43;
}

void sub_1ADB10024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);
  uint64_t (***v7)(_QWORD);
  uint64_t (**v8)(_QWORD);
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 4;
  if (a2 > v4)
    return std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 16 * a2;
    if (v3 != v5)
    {
      v6 = (uint64_t (***)(_QWORD))(v3 - 16);
      v7 = (uint64_t (***)(_QWORD))(v3 - 16);
      do
      {
        v8 = *v7;
        v7 -= 2;
        result = (uint64_t *)(*v8)(v6);
        v9 = v6 == (uint64_t (***)(_QWORD))v5;
        v6 = v7;
      }
      while (!v9);
    }
    v2[1] = v5;
  }
  return result;
}

_QWORD *std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__append(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  _QWORD *v22;

  v6 = a1[2];
  result = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(result - 1);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = &v7[2 * a2];
      do
      {
        result = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v7);
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = &v16[16 * a2];
    do
    {
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v16);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    v20 = v18;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v19);
    return (_QWORD *)std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1ADB10228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double quasar::TokenInfo::TokenInfo(std::string *this, const quasar::Token *a2)
{
  std::string *v2;
  double result;

  v2 = quasar::Token::Token(this, a2);
  LODWORD(v2[9].__r_.__value_.__r.__words[2]) = 0;
  v2[9].__r_.__value_.__l.__size_ = 0;
  result = 0.0;
  *(_OWORD *)&v2[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v2[10].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v2[11].__r_.__value_.__r.__words[1] = 0u;
  return result;
}

void quasar::TokenInfo::ptree(quasar::TokenInfo *this@<X0>, quasar::PTree *a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  quasar *v8;
  float v9;
  quasar *v10;
  int *v11;
  int *i;
  int v13;
  quasar *v14;
  float *v15;
  float *j;
  float v17;
  int v18;
  std::string v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  std::string v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int Type;
  std::string v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  quasar::PTree::PTree(a2);
  quasar::PTree::PTree(&Type, this);
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  v4 = *((_DWORD *)this + 7);
  Type = quasar::getType((quasar *)v4);
  std::to_string(&v31, v4);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  v5 = *((_DWORD *)this + 8);
  Type = quasar::getType((quasar *)v5);
  std::to_string(&v31, v5);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  v6 = *((_DWORD *)this + 9);
  Type = quasar::getType((quasar *)v6);
  std::to_string(&v31, v6);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  quasar::PTree::PTree(&Type, (char *)this + 48);
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  v7 = *((float *)this + 57);
  Type = quasar::getType(v8, v7);
  std::to_string(&v31, v7);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  v9 = *((float *)this + 58);
  Type = quasar::getType(v10, v9);
  std::to_string(&v31, v9);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  quasar::PTree::PTree((quasar::PTree *)&Type);
  v11 = (int *)*((_QWORD *)this + 30);
  for (i = (int *)*((_QWORD *)this + 31); v11 != i; ++v11)
  {
    v13 = *v11;
    v24 = quasar::getType((quasar *)*v11);
    std::to_string(&v25, v13);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 1;
    quasar::PTree::addChild((quasar::PTree *)&Type, (const quasar::PTree *)&v24);
    quasar::PTree::~PTree((quasar::PTree *)&v24);
  }
  quasar::PTree::addChild(a2, (const quasar::PTree *)&Type);
  quasar::PTree::PTree((quasar::PTree *)&v24);
  v15 = (float *)*((_QWORD *)this + 33);
  for (j = (float *)*((_QWORD *)this + 34); v15 != j; ++v15)
  {
    v17 = *v15;
    v18 = quasar::getType(v14, *v15);
    std::to_string(&v19, v17);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    quasar::PTree::addChild((quasar::PTree *)&v24, (const quasar::PTree *)&v18);
    quasar::PTree::~PTree((quasar::PTree *)&v18);
  }
  quasar::PTree::addChild(a2, (const quasar::PTree *)&v24);
  quasar::PTree::~PTree((quasar::PTree *)&v24);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1ADB10568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  quasar::PTree *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  quasar::PTree::~PTree((quasar::PTree *)va);
  quasar::PTree::~PTree((quasar::PTree *)va1);
  quasar::PTree::~PTree(v9);
  _Unwind_Resume(a1);
}

void quasar::ChoiceInfo::finalize(quasar::ChoiceInfo *this, const quasar::DecoderPassData *a2, const quasar::SpeechRequestData *a3, quasar::FstLmScorer *a4)
{
  quasar::Location *v8;
  double Latitude;
  double Weight;
  uint64_t v11;
  _QWORD **LmeDataStreams;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  _DWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  const quasar::SpeechRequestData *v67;
  void *__p[2];
  __int128 v69;
  __int128 v70;
  void *v71[2];
  __int128 v72;
  __int128 v73;
  void *v74[2];
  __int128 v75;
  __int128 v76;
  void *v77[2];
  __int128 v78;
  void *v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83[2];
  void *v84[2];
  __int128 v85;
  __int128 *v86[3];
  void *v87[2];
  char v88;
  int64x2_t v89;
  __int128 v90;
  void *v91;
  char *v92;
  char *v93;
  void *v94;
  char *v95;
  char *v96;
  std::string *v97;
  std::string *v98;
  unint64_t v99;
  _QWORD v100[3];
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char v104[8];
  uint64_t v105;
  uint64_t v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  void *v111;
  __int128 **v112;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::LmInfo::LmInfo((uint64_t)v104, 1, (__int128 *)__p);
  if (SBYTE7(v69) < 0)
    operator delete(__p[0]);
  v8 = (const quasar::DecoderPassData *)((char *)a2 + 232);
  Latitude = quasar::Location::getLatitude(v8);
  Weight = quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight(v8);
  v11 = *((_QWORD *)a3 + 3);
  v102 = 0;
  v103 = 0;
  v101 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::LmHandle>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::LmHandle>*,std::shared_ptr<kaldi::quasar::LmHandle>*>((char *)&v101, *(_QWORD **)(v11 + 272), *(_QWORD **)(v11 + 280), (uint64_t)(*(_QWORD *)(v11 + 280) - *(_QWORD *)(v11 + 272)) >> 4);
  std::vector<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>,std::__wrap_iter<std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>*>>((uint64_t *)&v101, v102, *(uint64_t **)(*((_QWORD *)a3 + 3) + 296), *(uint64_t **)(*((_QWORD *)a3 + 3) + 304), (uint64_t)(*(_QWORD *)(*((_QWORD *)a3 + 3) + 304) - *(_QWORD *)(*((_QWORD *)a3 + 3) + 296)) >> 4);
  LmeDataStreams = (_QWORD **)quasar::SpeechRequestData::getLmeDataStreams(a3);
  memset(v100, 0, sizeof(v100));
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::LmeContainer>*,std::shared_ptr<quasar::LmeContainer>*>((char *)v100, *LmeDataStreams, LmeDataStreams[1], ((char *)LmeDataStreams[1] - (char *)*LmeDataStreams) >> 4);
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v14 = *(_QWORD *)this;
  v13 = *((_QWORD *)this + 1);
  if (v13 != *(_QWORD *)this)
  {
    v67 = a3;
    v15 = 0;
    do
    {
      v16 = v14 + 288 * v15;
      if (*(int *)(v16 + 224) >= 1)
      {
        v17 = v98;
        if ((unint64_t)v98 >= v99)
        {
          v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v97, (__int128 *)v16);
        }
        else
        {
          if (*(char *)(v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
          }
          else
          {
            v18 = *(_OWORD *)v16;
            v98->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          v19 = v17 + 1;
        }
        v98 = v19;
        v20 = (_DWORD *)(*(_QWORD *)this + 288 * v15 + 224);
        v21 = v95;
        if (v95 >= v96)
        {
          v23 = (char *)v94;
          v24 = (v95 - (_BYTE *)v94) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            goto LABEL_115;
          v26 = v96 - (_BYTE *)v94;
          if ((v96 - (_BYTE *)v94) >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v96, v27);
            v23 = (char *)v94;
            v21 = v95;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[4 * v24];
          *(_DWORD *)v29 = *v20;
          v22 = v29 + 4;
          while (v21 != v23)
          {
            v30 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          v94 = v29;
          v95 = v22;
          v96 = &v28[4 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_DWORD *)v95 = *v20;
          v22 = v21 + 4;
        }
        v95 = v22;
        v31 = v92;
        if (v92 >= v93)
        {
          v33 = (char *)v91;
          v34 = (v92 - (_BYTE *)v91) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
LABEL_115:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v93 - (_BYTE *)v91;
          if ((v93 - (_BYTE *)v91) >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v93, v37);
            v33 = (char *)v91;
            v31 = v92;
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = v15;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          v91 = v39;
          v92 = v32;
          v93 = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v92 = v15;
          v32 = v31 + 4;
        }
        v92 = v32;
        v14 = *(_QWORD *)this;
        v13 = *((_QWORD *)this + 1);
      }
      ++v15;
    }
    while (0x8E38E38E38E38E39 * ((v13 - v14) >> 5) > v15);
    if (v97 != v98)
    {
      v89 = vdupq_n_s64(0x4076800000000000uLL);
      *(_QWORD *)&v90 = quasar::Location::knownOrFallback((uint64_t)&v89, Latitude, Weight);
      *((_QWORD *)&v90 + 1) = v41;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      std::string::basic_string[abi:ne180100]<0>(v87, "");
      v42 = *((_DWORD *)v67 + 4);
      memset(v86, 0, sizeof(v86));
      BYTE2(v66) = 1;
      LOWORD(v66) = 257;
      v43 = quasar::FstLmScorer::computeLmScore((uint64_t)a4, (uint64_t)v100, &v90, (__int128 *)__p, (__int128 **)&v97, 1, (uint64_t)v104, &v101, 0, (__int128 *)v87, (int **)&v94, v66, v42, v86, 1);
      v112 = v86;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
      if (v88 < 0)
        operator delete(v87[0]);
      if (SBYTE7(v69) < 0)
        operator delete(__p[0]);
      if (v107)
        v44 = v43;
      else
        v44 = 0;
      if (v44)
      {
        v45 = 0x2E8BA2E8BA2E8BA3 * ((v106 - v105) >> 3);
        v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 3);
        v47 = v46 + 1;
        if (v45 == v46 || v45 == v47)
        {
          if (v98 == v97)
          {
LABEL_77:
            if (v45 == v47 && *(_QWORD *)(v106 - 64))
            {
              if (quasar::gLogLevel >= 2)
              {
                *(_OWORD *)v83 = 0u;
                *(_OWORD *)v84 = 0u;
                v81 = 0u;
                v82 = 0u;
                *(_OWORD *)v79 = 0u;
                v80 = 0u;
                *(_OWORD *)v77 = 0u;
                v78 = 0u;
                v75 = 0u;
                v76 = 0u;
                v73 = 0u;
                *(_OWORD *)v74 = 0u;
                *(_OWORD *)v71 = 0u;
                v72 = 0u;
                v69 = 0u;
                v70 = 0u;
                *(_OWORD *)__p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmScorer wrong last result token", 32);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
              }
            }
            else
            {
              if (v98 != v97)
              {
                v53 = 0;
                v54 = 0;
                do
                {
                  v55 = v105;
                  v56 = (char **)(v105 + v53 + 40);
                  v57 = *((_DWORD *)v91 + v54);
                  v58 = *(_QWORD *)this;
                  v59 = (char *)(*(_QWORD *)this + 288 * v57 + 264);
                  if (v56 != (char **)v59)
                  {
                    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v59, *v56, *(_QWORD *)(v105 + v53 + 48), (uint64_t)(*(_QWORD *)(v105 + v53 + 48) - (_QWORD)*v56) >> 2);
                    v55 = v105;
                    v57 = *((_DWORD *)v91 + v54);
                    v58 = *(_QWORD *)this;
                  }
                  v60 = v55 + v53;
                  v61 = (char *)(v58 + 288 * v57 + 240);
                  if ((char *)(v60 + 64) != v61)
                    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v61, *(char **)(v60 + 64), *(_QWORD *)(v60 + 72), (uint64_t)(*(_QWORD *)(v60 + 72) - *(_QWORD *)(v60 + 64)) >> 2);
                  ++v54;
                  v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v98 - (char *)v97) >> 3);
                  v53 += 88;
                }
                while (v62 > v54);
                v45 = 0x2E8BA2E8BA2E8BA3 * ((v106 - v105) >> 3);
                v47 = v62 + 1;
              }
              if (v45 == v47)
              {
                quasar::Token::Token((quasar::Token *)__p);
                DWORD2(v82) = 0;
                *(_QWORD *)&v82 = 0;
                *(_OWORD *)v83 = 0u;
                *(_OWORD *)v84 = 0u;
                v85 = 0u;
                v63 = v106;
                if (&v84[1] != (void **)(v106 - 48))
                {
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v84[1], *(char **)(v106 - 48), *(_QWORD *)(v106 - 40), (uint64_t)(*(_QWORD *)(v106 - 40) - *(_QWORD *)(v106 - 48)) >> 2);
                  v63 = v106;
                }
                if (v83 != (void **)(v63 - 24))
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v83, *(char **)(v63 - 24), *(_QWORD *)(v63 - 16), (uint64_t)(*(_QWORD *)(v63 - 16) - *(_QWORD *)(v63 - 24)) >> 2);
                v64 = *((_QWORD *)this + 1);
                if (*(_QWORD *)this != v64)
                {
                  HIDWORD(v69) = *(_DWORD *)(v64 - 256);
                  LODWORD(v70) = HIDWORD(v69);
                  DWORD1(v70) = HIDWORD(v69);
                }
                if (v64 >= *((_QWORD *)this + 2))
                {
                  v65 = std::vector<quasar::TokenInfo>::__emplace_back_slow_path<quasar::TokenInfo>((uint64_t *)this, (__int128 *)__p);
                }
                else
                {
                  std::allocator<quasar::TokenInfo>::construct[abi:ne180100]<quasar::TokenInfo,quasar::TokenInfo>((uint64_t)this + 16, v64, (__int128 *)__p);
                  v65 = v64 + 288;
                }
                *((_QWORD *)this + 1) = v65;
                if (v84[1])
                {
                  *(void **)&v85 = v84[1];
                  operator delete(v84[1]);
                }
                if (v83[0])
                {
                  v83[1] = v83[0];
                  operator delete(v83[0]);
                }
                if (SBYTE7(v80) < 0)
                  operator delete(v79[0]);
                if (SBYTE7(v78) < 0)
                  operator delete(v77[0]);
                v87[0] = (char *)&v75 + 8;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
                if (SBYTE7(v75) < 0)
                  operator delete(v74[0]);
                v87[0] = (char *)&v72 + 8;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
                if (SBYTE7(v72) < 0)
                  operator delete(v71[0]);
                if (SBYTE7(v69) < 0)
                  operator delete(__p[0]);
              }
            }
          }
          else
          {
            v48 = (int *)v94;
            if (v46 <= 1)
              v46 = 1;
            v49 = (uint64_t *)(v105 + 24);
            while (1)
            {
              v51 = *v49;
              v49 += 11;
              v50 = v51;
              v52 = *v48++;
              if (v50 != v52)
                break;
              if (!--v46)
                goto LABEL_77;
            }
            if (quasar::gLogLevel >= 2)
            {
              *(_OWORD *)v83 = 0u;
              *(_OWORD *)v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              *(_OWORD *)v79 = 0u;
              v80 = 0u;
              *(_OWORD *)v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              *(_OWORD *)v74 = 0u;
              *(_OWORD *)v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmScorer wrong result token", 27);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
            }
          }
        }
        else if (quasar::gLogLevel >= 2)
        {
          *(_OWORD *)v83 = 0u;
          *(_OWORD *)v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          *(_OWORD *)v79 = 0u;
          v80 = 0u;
          *(_OWORD *)v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          *(_OWORD *)v74 = 0u;
          *(_OWORD *)v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmScorer wrong number of results", 32);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
      }
      else if (quasar::gLogLevel >= 2)
      {
        *(_OWORD *)v83 = 0u;
        *(_OWORD *)v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        *(_OWORD *)v79 = 0u;
        v80 = 0u;
        *(_OWORD *)v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        *(_OWORD *)v74 = 0u;
        *(_OWORD *)v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmScorer failed", 15);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
    }
    if (v91)
    {
      v92 = (char *)v91;
      operator delete(v91);
    }
  }
  if (v94)
  {
    v95 = (char *)v94;
    operator delete(v94);
  }
  __p[0] = &v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v100;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v101;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v109 < 0)
    operator delete(v108);
  __p[0] = &v105;
  std::vector<quasar::TokenLmInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADB10EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  uint64_t a64;
  void *a66;
  uint64_t a67;
  char a69;
  char a72;
  uint64_t v72;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a17);
  if (__p)
  {
    a64 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  a17 = &a69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a72;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (void *)(v72 - 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  quasar::LmInfo::~LmInfo((quasar::LmInfo *)(v72 - 216));
  _Unwind_Resume(a1);
}

void quasar::ChoiceInfo::ptree(quasar::ChoiceInfo *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::TokenInfo *v4;
  quasar::TokenInfo *v5;
  quasar *v6;
  float v7;
  quasar *v8;
  float v9;
  void *v10[2];
  char v11;
  void *__p;
  std::string v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[64];

  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v18);
  v4 = *(quasar::TokenInfo **)this;
  v5 = (quasar::TokenInfo *)*((_QWORD *)this + 1);
  while (v4 != v5)
  {
    quasar::TokenInfo::ptree(v4, (quasar::PTree *)&__p);
    quasar::PTree::addChild((quasar::PTree *)v18, (const quasar::PTree *)&__p);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    v4 = (quasar::TokenInfo *)((char *)v4 + 288);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "tokens");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&__p, (uint64_t)v18, 1);
  if (v13.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v10, "graphCost");
  v7 = *((float *)this + 6);
  LODWORD(__p) = quasar::getType(v6, v7);
  std::to_string(&v13, v7);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0)
    operator delete(v10[0]);
  v8 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v10, "acousticCost");
  v9 = *((float *)this + 7);
  LODWORD(__p) = quasar::getType(v8, v9);
  std::to_string(&v13, v9);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0)
    operator delete(v10[0]);
  quasar::PTree::~PTree((quasar::PTree *)v18);
}

void sub_1ADB111D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree *v27;

  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::ResultInfo::ptree(quasar::ChoiceInfo **this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::ChoiceInfo *v4;
  quasar::ChoiceInfo *v5;
  quasar *v6;
  void *v7[2];
  char v8;
  void *__p;
  std::string v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[64];

  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v15);
  v4 = *this;
  v5 = this[1];
  while (v4 != v5)
  {
    quasar::ChoiceInfo::ptree(v4, (quasar::PTree *)&__p);
    quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)&__p);
    quasar::PTree::~PTree((quasar::PTree *)&__p);
    v4 = (quasar::ChoiceInfo *)((char *)v4 + 32);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "choices");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&__p, (uint64_t)v15, 1);
  if (v10.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v7, "aligned");
  v6 = (quasar *)*((unsigned __int8 *)this + 24);
  LODWORD(__p) = quasar::getType(v6);
  std::to_string(&v10, (int)v6);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v7, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v8 < 0)
    operator delete(v7[0]);
  quasar::PTree::~PTree((quasar::PTree *)v15);
}

void sub_1ADB11378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree *v27;

  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::UttInfo::addResult(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, int a5)
{
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  const void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39[17];
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  uint64_t *v43;
  std::__shared_weak_count *v44;

  v10 = (char *)operator new(0x38uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &unk_1E5D42448;
  *(_OWORD *)(v10 + 40) = 0u;
  v44 = (std::__shared_weak_count *)v10;
  *(_OWORD *)(v10 + 24) = 0u;
  v43 = (uint64_t *)(v10 + 24);
  *(_QWORD *)&v39[0] = a2;
  v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v39);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v11 + 7, (uint64_t *)&v43);
  if (a4[19])
  {
    v12 = (char *)operator new(0x198uLL);
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &unk_1E5D440B8;
    *((_QWORD *)v12 + 1) = 0;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_OWORD *)(v12 + 248) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 264) = 0u;
    *(_OWORD *)(v12 + 280) = 0u;
    *(_OWORD *)(v12 + 296) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 344) = 0u;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    quasar::SpeechRequestResultData::SpeechRequestResultData((quasar::SpeechRequestResultData *)(v12 + 24));
    *(_QWORD *)&v39[0] = v13;
    *((_QWORD *)&v39[0] + 1) = v12;
    std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,void>(a4 + 59, v39, v42);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v39[0] + 1);
    if (*((_QWORD *)&v39[0] + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v39[0] + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v42[0] + 488), a4 + 61);
    if (a3[27])
    {
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v40);
      v17 = kaldi::WordAlignLattice(a4[19], a3[10], a3[27], 0, v40);
      v18 = v42[0];
      *(_BYTE *)(v42[0] + 145) = v17;
      if (v17)
      {
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v18 + 152), &v40);
      }
      else if (quasar::gLogLevel >= 4)
      {
        memset(v39, 0, sizeof(v39));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Word alignment failed: ", 23);
        v20 = *(char *)(a2 + 23);
        if (v20 >= 0)
          v21 = (const void *)a2;
        else
          v21 = *(const void **)a2;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a2 + 23);
        else
          v22 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v39);
      }
      v23 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v26 = v42[0] + 152;
    if (!*(_QWORD *)(v42[0] + 152))
    {
      v33 = a4[19];
      v34 = operator new(0x28uLL);
      v34[2] = 0;
      *v34 = &unk_1E5D413E0;
      v34[1] = 0;
      v35 = *(_QWORD *)(v33 + 8);
      v34[4] = v35;
      ++*(_DWORD *)(v35 + 56);
      v34[3] = &unk_1E5D28AB0;
      *(_QWORD *)&v39[0] = v34 + 3;
      *((_QWORD *)&v39[0] + 1) = v34;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v26, v39);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v39[0] + 1);
      if (*((_QWORD *)&v39[0] + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v39[0] + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    quasar::Decoder::populateResultInfo(a3, (uint64_t)v42, a5, v43);
    v27 = (std::__shared_weak_count *)v42[1];
    *((_BYTE *)v43 + 24) = *(_BYTE *)(v42[0] + 145);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v30 = v44;
  if (v44)
  {
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1ADB1179C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void quasar::UttInfo::finalize(quasar::UttInfo *this, const quasar::DecoderPassData *a2, const quasar::DecoderChainOutput *a3, const quasar::SpeechRequestData *a4, quasar::FstLmScorer *a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  quasar::ChoiceInfo **v17;
  quasar::ChoiceInfo *v18;
  quasar::ChoiceInfo *v19;
  char *v20;
  char *v21;
  BOOL v22;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  v11 = *((_DWORD *)a4 + 2);
  v12 = v11 * v10;
  v13 = (*((_DWORD *)a3 + 144) + v11) * v10;
  *((_DWORD *)this + 6) = v12;
  *((_DWORD *)this + 7) = v13;
  v16 = *(char **)this;
  v14 = (char *)this + 8;
  v15 = v16;
  if (v16 != v14)
  {
    do
    {
      v17 = (quasar::ChoiceInfo **)*((_QWORD *)v15 + 7);
      v18 = *v17;
      v19 = v17[1];
      while (v18 != v19)
      {
        quasar::ChoiceInfo::finalize(v18, a2, a4, a5);
        v18 = (quasar::ChoiceInfo *)((char *)v18 + 32);
      }
      v20 = (char *)*((_QWORD *)v15 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (char *)*((_QWORD *)v15 + 2);
          v22 = *(_QWORD *)v21 == (_QWORD)v15;
          v15 = v21;
        }
        while (!v22);
      }
      v15 = v21;
    }
    while (v21 != v14);
  }
}

void quasar::UttInfo::ptree(quasar::UttInfo *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::UttInfo *v4;
  quasar::UttInfo *v5;
  quasar::UttInfo *v6;
  BOOL v7;
  unsigned int v8;
  quasar *v9;
  void *v10[2];
  char v11;
  void *__p;
  std::string v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[64];

  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v18);
  v4 = *(quasar::UttInfo **)this;
  if (*(quasar::UttInfo **)this != (quasar::UttInfo *)((char *)this + 8))
  {
    do
    {
      quasar::ResultInfo::ptree(*((quasar::ChoiceInfo ***)v4 + 7), (quasar::PTree *)&__p);
      quasar::PTree::putChild((uint64_t)v18, (uint64_t)v4 + 32, (uint64_t)&__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      v5 = (quasar::UttInfo *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(quasar::UttInfo **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (quasar::UttInfo *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (quasar::UttInfo *)((char *)this + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "results");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)&__p, (uint64_t)v18, 1);
  if (v13.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v10, "startMillis");
  v8 = *((_DWORD *)this + 6);
  LODWORD(__p) = quasar::getType((quasar *)v8);
  std::to_string(&v13, v8);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "endMillis");
  v9 = (quasar *)*((unsigned int *)this + 7);
  LODWORD(__p) = quasar::getType(v9);
  std::to_string(&v13, v9);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v10, (uint64_t)&__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if (v11 < 0)
    operator delete(v10[0]);
  quasar::PTree::~PTree((quasar::PTree *)v18);
}

void sub_1ADB11AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::PTree *v27;

  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (a15 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a27);
  quasar::PTree::~PTree(v27);
  _Unwind_Resume(a1);
}

void quasar::UttInfo::ptreeBatch(quasar::UttInfo ***a1@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::UttInfo **v4;
  quasar::UttInfo **v5;
  _BYTE v6[64];

  quasar::PTree::PTree(a2);
  v5 = *a1;
  v4 = a1[1];
  while (v5 != v4)
  {
    quasar::UttInfo::ptree(*v5, (quasar::PTree *)v6);
    quasar::PTree::addChild(a2, (const quasar::PTree *)v6);
    quasar::PTree::~PTree((quasar::PTree *)v6);
    v5 += 2;
  }
}

void sub_1ADB11B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree *v9;

  quasar::PTree::~PTree((quasar::PTree *)&a9);
  quasar::PTree::~PTree(v9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ResultInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ResultInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::ResultInfo>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<quasar::ChoiceInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<quasar::ChoiceInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<quasar::TokenInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,void>@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x4A8uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADB11CE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>,std::allocator<quasar::DecoderChainOutput>,0>(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43248;
  a1[1] = 0;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADB11D4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> const&,std::shared_ptr<quasar::SpeechRequestResultData>>(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)a3[1];
  v14 = *a3;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v13 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v14, &v13);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1ADB11E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiAudioBuffer::MultiAudioBuffer(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (_QWORD *)quasar::RecogAudioBufferBase::RecogAudioBufferBase(a1, 0);
  v4[3] = 0;
  v4[2] = v4 + 3;
  *v4 = &off_1E5D35F28;
  v4[4] = 0;
  v5 = a2[1];
  v12 = *a2;
  v13 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  quasar::MultiAudioBuffer::addBuffer(a1, 0, &v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1ADB11F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap *v9;
  uint64_t v10;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(v10, *((_QWORD **)v9 + 3));
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::MultiAudioBuffer::addBuffer(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t **v4;
  int v6;
  int *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>((uint64_t **)(a1 + 16), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v4 + 5, a3);
}

uint64_t quasar::MultiAudioBuffer::getBuffer@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  result = a1 + 24;
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = result;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
  {
    v11 = *(_QWORD *)(v6 + 40);
    v10 = *(_QWORD *)(v6 + 48);
    *a3 = v11;
    a3[1] = v10;
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t quasar::MultiAudioBuffer::addAudio(quasar::MultiAudioBuffer *this, const __int16 *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  BOOL v11;

  v3 = (char *)*((_QWORD *)this + 2);
  v4 = (char *)this + 24;
  if (v3 == (char *)this + 24)
    return 0;
  LODWORD(v7) = 0;
  do
  {
    v8 = (*(uint64_t (**)(_QWORD, const __int16 *, uint64_t))(**((_QWORD **)v3 + 5) + 16))(*((_QWORD *)v3 + 5), a2, a3);
    if (*((_DWORD *)v3 + 8))
      v7 = v7;
    else
      v7 = v8;
    v9 = (char *)*((_QWORD *)v3 + 1);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = *(char **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (char *)*((_QWORD *)v3 + 2);
        v11 = *(_QWORD *)v10 == (_QWORD)v3;
        v3 = v10;
      }
      while (!v11);
    }
    v3 = v10;
  }
  while (v10 != v4);
  return v7;
}

uint64_t quasar::MultiAudioBuffer::addAudio(quasar::MultiAudioBuffer *this, const float *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  char *v10;
  BOOL v11;

  v3 = (char *)*((_QWORD *)this + 2);
  v4 = (char *)this + 24;
  if (v3 == (char *)this + 24)
    return 0;
  LODWORD(v7) = 0;
  do
  {
    v8 = (*(uint64_t (**)(_QWORD, const float *, uint64_t))(**((_QWORD **)v3 + 5) + 24))(*((_QWORD *)v3 + 5), a2, a3);
    if (*((_DWORD *)v3 + 8))
      v7 = v7;
    else
      v7 = v8;
    v9 = (char *)*((_QWORD *)v3 + 1);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = *(char **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (char *)*((_QWORD *)v3 + 2);
        v11 = *(_QWORD *)v10 == (_QWORD)v3;
        v3 = v10;
      }
      while (!v11);
    }
    v3 = v10;
  }
  while (v10 != v4);
  return v7;
}

uint64_t quasar::MultiAudioBuffer::endAudio(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(this + 16);
  v2 = (_QWORD *)(this + 24);
  if (v1 != (_QWORD *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[5] + 32))(v1[5]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t quasar::MultiAudioBuffer::setServerSideEndPointing(uint64_t this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(this + 16);
  v3 = (_QWORD *)(this + 24);
  if (v2 != (_QWORD *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], a2);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

uint64_t quasar::MultiAudioBuffer::triggerServerSideEndPointer(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(this + 16);
  v2 = (_QWORD *)(this + 24);
  if (v1 != (_QWORD *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[5] + 48))(v1[5]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t quasar::MultiAudioBuffer::stopAudioDecoding(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(this + 16);
  v2 = (_QWORD *)(this + 24);
  if (v1 != (_QWORD *)(this + 24))
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[5] + 56))(v1[5]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

float quasar::MultiAudioBuffer::audioLeftSeconds(quasar::MultiAudioBuffer *this)
{
  char *v1;
  char *v2;
  float v3;
  float v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  v3 = 0.0;
  if (v1 != (char *)this + 24)
  {
    do
    {
      v4 = (*(float (**)(_QWORD))(**((_QWORD **)v1 + 5) + 64))(*((_QWORD *)v1 + 5));
      if (v3 < v4)
        v3 = v4;
      v5 = (char *)*((_QWORD *)v1 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v1 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
  return v3;
}

float quasar::MultiAudioBuffer::audioReadSeconds(quasar::MultiAudioBuffer *this)
{
  char *v1;
  char *v2;
  float v3;
  float v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  v3 = 0.0;
  if (v1 != (char *)this + 24)
  {
    do
    {
      v4 = (*(float (**)(_QWORD))(**((_QWORD **)v1 + 5) + 72))(*((_QWORD *)v1 + 5));
      if (v3 < v4)
        v3 = v4;
      v5 = (char *)*((_QWORD *)v1 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v1 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
  return v3;
}

uint64_t quasar::MultiAudioBuffer::packetArrivalTimestampFromAudioTime(uint64_t **this, float a2)
{
  uint64_t **v3;
  int v5;
  int *v6;

  v5 = 0;
  v6 = &v5;
  v3 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 2, &v5, (uint64_t)&std::piecewise_construct, &v6);
  return (*(uint64_t (**)(uint64_t *, float))(*v3[5] + 80))(v3[5], a2);
}

void quasar::MultiAudioBuffer::setLeadBuffer(uint64_t a1, uint64_t *a2)
{
  int *v2;
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int *v14;
  int *v15;
  BOOL v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  _DWORD *v19;

  v2 = *(int **)(a1 + 16);
  v3 = (int *)(a1 + 24);
  if (v2 != (int *)(a1 + 24))
  {
    do
    {
      v5 = *((_QWORD *)v2 + 5);
      v6 = *a2;
      if (*a2)
      {
        v19 = v2 + 8;
        v7 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>((uint64_t **)(v6 + 16), v2 + 8, (uint64_t)&std::piecewise_construct, &v19);
        v8 = v7[6];
        v17 = v7[5];
        v18 = (std::__shared_weak_count *)v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 1);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      quasar::RecogAudioBuffer::setLeadBuffer(v5, (uint64_t *)&v17);
      v11 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (int *)*((_QWORD *)v2 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(int **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (int *)*((_QWORD *)v2 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v16);
      }
      v2 = v15;
    }
    while (v15 != v3);
  }
}

void sub_1ADB125A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::MultiAudioBuffer::emptyAudioBuffer(quasar::MultiAudioBuffer *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  if (v1 != (char *)this + 24)
  {
    do
    {
      quasar::RecogAudioBuffer::emptyAudioBuffer(*((quasar::RecogAudioBuffer **)v1 + 5));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void quasar::MultiAudioBuffer::startCountingAudioDuration(uint64_t **this)
{
  uint64_t **v1;
  int v2;
  int *v3;

  v2 = 0;
  v3 = &v2;
  v1 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 2, &v2, (uint64_t)&std::piecewise_construct, &v3);
  quasar::RecogAudioBuffer::startCountingAudioDuration((quasar::RecogAudioBuffer *)v1[5]);
}

float quasar::MultiAudioBuffer::stopCountingAudioDuration(uint64_t **this)
{
  uint64_t **v1;
  int v3;
  int *v4;

  v3 = 0;
  v4 = &v3;
  v1 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 2, &v3, (uint64_t)&std::piecewise_construct, &v4);
  return quasar::RecogAudioBuffer::stopCountingAudioDuration((quasar::RecogAudioBuffer *)v1[5]);
}

double quasar::MultiChainMultiAudioBuffer::MultiChainMultiAudioBuffer(quasar::MultiChainMultiAudioBuffer *this)
{
  uint64_t v1;
  double result;

  v1 = quasar::RecogAudioBufferBase::RecogAudioBufferBase((uint64_t)this, 0);
  *(_QWORD *)v1 = off_1E5D39DA8;
  *(_QWORD *)(v1 + 16) = 850045863;
  result = 0.0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = v1 + 88;
  *(_BYTE *)(v1 + 132) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  return result;
}

void quasar::MultiChainMultiAudioBuffer::addBuffer(uint64_t a1, std::string *a2, uint64_t *a3, int a4)
{
  std::mutex *v8;
  uint64_t *v9;
  _QWORD *v10;
  _OWORD v11[17];

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  *(_QWORD *)&v11[0] = a2;
  v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v9 + 7, a3);
  if (a4)
  {
    if (*(char *)(a1 + 127) < 0)
    {
      if (!*(_QWORD *)(a1 + 112))
        goto LABEL_4;
    }
    else if (!*(_BYTE *)(a1 + 127))
    {
LABEL_4:
      std::string::operator=((std::string *)(a1 + 104), a2);
      goto LABEL_5;
    }
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Multiple primary buffers are not allowed! ", 42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Hint: Only one decoder chain can do system combination.", 55);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
LABEL_5:
  quasar::MultiChainMultiAudioBuffer::updateLeadBuffersUnlocked((const void **)a1);
  std::mutex::unlock(v8);
}

void sub_1ADB12830(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::updateLeadBuffersUnlocked(const void **this)
{
  unsigned __int8 **v2;
  __int128 **v3;
  const void **v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  std::string::size_type size;
  const void *v12;
  int v13;
  unsigned __int8 *v14;
  std::string *p_s1;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24[2];
  std::string __s1;
  uint64_t v26;
  std::__shared_weak_count *v27;
  const void *v28;
  std::__shared_weak_count *v29;

  v2 = (unsigned __int8 **)(this + 13);
  v3 = (__int128 **)(this + 10);
  v4 = (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(this + 10), this + 13);
  v5 = (char *)(this + 11);
  if (this + 11 == v4)
  {
    v6 = 0;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v6 = (std::__shared_weak_count *)v4[8];
    v28 = v4[7];
    v29 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  v9 = *v3;
  if (v9 != (__int128 *)v5)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__s1, v9 + 2);
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v12 = (const void *)*((unsigned __int8 *)this + 127);
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = this[14];
      if ((const void *)size != v12)
        goto LABEL_24;
      if (v13 >= 0)
        v14 = (unsigned __int8 *)v2;
      else
        v14 = *v2;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v14, __s1.__r_.__value_.__l.__size_))
          goto LABEL_24;
      }
      else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        while (p_s1->__r_.__value_.__s.__data_[0] == *v14)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          ++v14;
          if (!--v10)
            goto LABEL_25;
        }
LABEL_24:
        quasar::MultiAudioBuffer::setLeadBuffer(v26, (uint64_t *)&v28);
        goto LABEL_26;
      }
LABEL_25:
      v24[0] = 0;
      v24[1] = 0;
      quasar::MultiAudioBuffer::setLeadBuffer(v26, v24);
LABEL_26:
      v16 = v27;
      if (v27)
      {
        v17 = (unint64_t *)&v27->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      v19 = (char *)*((_QWORD *)v9 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v9 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v9;
          v9 = (__int128 *)v20;
        }
        while (!v21);
      }
      v9 = (__int128 *)v20;
      if (v20 == v5)
      {
        v6 = v29;
        break;
      }
    }
  }
  if (v6)
  {
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADB12A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::removeBuffer(uint64_t a1, unsigned __int8 *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD v14[17];

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = a2[23];
  if ((v5 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = *(unsigned __int8 *)(a1 + 127);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 112);
  if (v6 != v7)
    goto LABEL_17;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a1 + 104);
  else
    v9 = *(unsigned __int8 **)(a1 + 104);
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v9, *((_QWORD *)a2 + 1)))
      goto LABEL_17;
LABEL_15:
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Cannot remove the primary buffer", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  if (!a2[23])
    goto LABEL_15;
  v10 = a2;
  while (*v10 == *v9)
  {
    ++v10;
    ++v9;
    if (!--v5)
      goto LABEL_15;
  }
LABEL_17:
  v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)a2);
  v12 = (uint64_t *)v11;
  if (a1 + 88 != v11)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 56) + 32))(*(_QWORD *)(v11 + 56));
    v13 = v12[7];
    v14[0] = 0uLL;
    quasar::MultiAudioBuffer::setLeadBuffer(v13, (uint64_t *)v14);
    std::__tree<std::string>::__remove_node_pointer((uint64_t **)(a1 + 80), v12);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v12 + 4));
    operator delete(v12);
  }
  std::mutex::unlock(v4);
}

const void **quasar::MultiChainMultiAudioBuffer::getPrimaryBufferUnlocked@<X0>(const void **this@<X0>, _QWORD *a2@<X8>)
{
  const void **result;
  char *v5;
  unint64_t *v6;
  unint64_t v7;

  result = (const void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(this + 10), this + 13);
  if (this + 11 == result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = (char *)result[8];
    *a2 = result[7];
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  return result;
}

void quasar::MultiChainMultiAudioBuffer::getBuffer(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, a2);
  if (a1 + 88 == v7)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 64);
    *a3 = *(_QWORD *)(v7 + 56);
    a3[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  std::mutex::unlock(v6);
}

void sub_1ADB12CE8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::getPrimaryBuffer(const void **this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  quasar::MultiChainMultiAudioBuffer::getPrimaryBufferUnlocked(this, a2);
  std::mutex::unlock(v4);
}

void sub_1ADB12D40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::addAudio<short>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void **v22;
  unsigned __int8 *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _OWORD v30[17];
  int v31[3];

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (_QWORD *)(a1 + 80);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)(a1 + 104));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *(std::__shared_weak_count **)(v8 + 64);
  *(_QWORD *)&v30[0] = v9;
  *((_QWORD *)&v30[0] + 1) = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2, a3);
  v14 = v13;
  if (!v10)
    goto LABEL_8;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((_DWORD)v14)
      goto LABEL_38;
  }
  else
  {
LABEL_8:
    if ((_DWORD)v13)
      goto LABEL_38;
  }
  v17 = (_QWORD *)*v7;
  if (*v7 != a1 + 88)
  {
    do
    {
      v18 = *((unsigned __int8 *)v17 + 55);
      if ((v18 & 0x80u) == 0)
        v19 = *((unsigned __int8 *)v17 + 55);
      else
        v19 = v17[5];
      v20 = *(unsigned __int8 *)(a1 + 127);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *(_QWORD *)(a1 + 112);
      if (v19 != v20)
        goto LABEL_25;
      v22 = (const void **)(v17 + 4);
      if (v21 >= 0)
        v23 = (unsigned __int8 *)(a1 + 104);
      else
        v23 = *(unsigned __int8 **)(a1 + 104);
      if ((v18 & 0x80) != 0)
      {
        if (memcmp(*v22, v23, v17[5]))
          goto LABEL_25;
      }
      else if (*((_BYTE *)v17 + 55))
      {
        while (*(unsigned __int8 *)v22 == *v23)
        {
          v22 = (const void **)((char *)v22 + 1);
          ++v23;
          if (!--v18)
            goto LABEL_30;
        }
LABEL_25:
        v31[0] = 0;
        v31[0] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v17[7] + 16))(v17[7], a2, a3);
        if (v31[0])
          v24 = quasar::gLogLevel < 5;
        else
          v24 = 1;
        if (!v24)
        {
          memset(v30, 0, sizeof(v30));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Secondary chain rejected audio, probably waiting for primary: ", 62);
          quasar::operator<<(v25, v31);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v30);
        }
      }
LABEL_30:
      v26 = (_QWORD *)v17[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v17[2];
          v28 = *v27 == (_QWORD)v17;
          v17 = v27;
        }
        while (!v28);
      }
      v17 = v27;
    }
    while (v27 != (_QWORD *)(a1 + 88));
  }
LABEL_38:
  std::mutex::unlock(v6);
  return v14;
}

void sub_1ADB12FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::addAudio<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void **v22;
  unsigned __int8 *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _OWORD v30[17];
  int v31[3];

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (_QWORD *)(a1 + 80);
  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)(a1 + 104));
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *(std::__shared_weak_count **)(v8 + 64);
  *(_QWORD *)&v30[0] = v9;
  *((_QWORD *)&v30[0] + 1) = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3);
  v14 = v13;
  if (!v10)
    goto LABEL_8;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((_DWORD)v14)
      goto LABEL_38;
  }
  else
  {
LABEL_8:
    if ((_DWORD)v13)
      goto LABEL_38;
  }
  v17 = (_QWORD *)*v7;
  if (*v7 != a1 + 88)
  {
    do
    {
      v18 = *((unsigned __int8 *)v17 + 55);
      if ((v18 & 0x80u) == 0)
        v19 = *((unsigned __int8 *)v17 + 55);
      else
        v19 = v17[5];
      v20 = *(unsigned __int8 *)(a1 + 127);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *(_QWORD *)(a1 + 112);
      if (v19 != v20)
        goto LABEL_25;
      v22 = (const void **)(v17 + 4);
      if (v21 >= 0)
        v23 = (unsigned __int8 *)(a1 + 104);
      else
        v23 = *(unsigned __int8 **)(a1 + 104);
      if ((v18 & 0x80) != 0)
      {
        if (memcmp(*v22, v23, v17[5]))
          goto LABEL_25;
      }
      else if (*((_BYTE *)v17 + 55))
      {
        while (*(unsigned __int8 *)v22 == *v23)
        {
          v22 = (const void **)((char *)v22 + 1);
          ++v23;
          if (!--v18)
            goto LABEL_30;
        }
LABEL_25:
        v31[0] = 0;
        v31[0] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v17[7] + 24))(v17[7], a2, a3);
        if (v31[0])
          v24 = quasar::gLogLevel < 5;
        else
          v24 = 1;
        if (!v24)
        {
          memset(v30, 0, sizeof(v30));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Secondary chain rejected audio, probably waiting for primary: ", 62);
          quasar::operator<<(v25, v31);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v30);
        }
      }
LABEL_30:
      v26 = (_QWORD *)v17[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v17[2];
          v28 = *v27 == (_QWORD)v17;
          v17 = v27;
        }
        while (!v28);
      }
      v17 = v27;
    }
    while (v27 != (_QWORD *)(a1 + 88));
  }
LABEL_38:
  std::mutex::unlock(v6);
  return v14;
}

void sub_1ADB13228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::endAudio(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v3 + 7) + 32))(*((_QWORD *)v3 + 7));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1ADB132F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::endAudioForSecondaryBuffers(quasar::MultiChainMultiAudioBuffer *this, int a2)
{
  std::mutex *v4;
  quasar::MultiChainMultiAudioBuffer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  quasar::MultiChainMultiAudioBuffer *v16;
  quasar::MultiChainMultiAudioBuffer *v17;
  BOOL v18;
  quasar::RecogAudioBuffer *v19;
  std::__shared_weak_count *v20;

  v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((_QWORD *)this + 12) != 1)
  {
    v5 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)this + 10);
    if (v5 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88))
    {
      do
      {
        v6 = *((unsigned __int8 *)v5 + 55);
        if ((v6 & 0x80u) == 0)
          v7 = *((unsigned __int8 *)v5 + 55);
        else
          v7 = *((_QWORD *)v5 + 5);
        v8 = *((unsigned __int8 *)this + 127);
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *((_QWORD *)this + 14);
        if (v7 != v8)
          goto LABEL_18;
        v10 = (const void **)((char *)v5 + 32);
        if (v9 >= 0)
          v11 = (unsigned __int8 *)this + 104;
        else
          v11 = (unsigned __int8 *)*((_QWORD *)this + 13);
        if ((v6 & 0x80) != 0)
        {
          if (memcmp(*v10, v11, *((_QWORD *)v5 + 5)))
            goto LABEL_18;
        }
        else if (*((_BYTE *)v5 + 55))
        {
          while (*(unsigned __int8 *)v10 == *v11)
          {
            v10 = (const void **)((char *)v10 + 1);
            ++v11;
            if (!--v6)
              goto LABEL_22;
          }
LABEL_18:
          quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)v5 + 7), 0, &v19);
          quasar::RecogAudioBuffer::endAudioToLeadBuffer(v19);
          v12 = v20;
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
LABEL_25:
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
            goto LABEL_27;
          }
          goto LABEL_27;
        }
LABEL_22:
        quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)v5 + 7), 0, &v19);
        quasar::RecogAudioBuffer::setWaitingForFollowers(v19, 1);
        v12 = v20;
        if (v20)
        {
          v15 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v15);
          while (__stlxr(v14 - 1, v15));
          goto LABEL_25;
        }
LABEL_27:
        v16 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)v5 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(quasar::MultiChainMultiAudioBuffer **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)v5 + 2);
            v18 = *(_QWORD *)v17 == (_QWORD)v5;
            v5 = v17;
          }
          while (!v18);
        }
        v5 = v17;
      }
      while (v17 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88));
    }
    *((_DWORD *)this + 32) = a2;
    *((_BYTE *)this + 132) = 1;
  }
  std::mutex::unlock(v4);
}

void sub_1ADB134BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::synchronizeSecondaryBuffersToPrimary(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  quasar::MultiChainMultiAudioBuffer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  quasar::MultiChainMultiAudioBuffer *v14;
  quasar::MultiChainMultiAudioBuffer *v15;
  BOOL v16;
  quasar::RecogAudioBuffer *v17;
  std::__shared_weak_count *v18;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)this + 10);
  if (v3 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88))
  {
    do
    {
      v4 = *((unsigned __int8 *)v3 + 55);
      if ((v4 & 0x80u) == 0)
        v5 = *((unsigned __int8 *)v3 + 55);
      else
        v5 = *((_QWORD *)v3 + 5);
      v6 = *((unsigned __int8 *)this + 127);
      v7 = (char)v6;
      if ((v6 & 0x80u) != 0)
        v6 = *((_QWORD *)this + 14);
      if (v5 != v6)
        goto LABEL_17;
      v8 = (const void **)((char *)v3 + 32);
      if (v7 >= 0)
        v9 = (unsigned __int8 *)this + 104;
      else
        v9 = (unsigned __int8 *)*((_QWORD *)this + 13);
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*v8, v9, *((_QWORD *)v3 + 5)))
          goto LABEL_17;
      }
      else if (*((_BYTE *)v3 + 55))
      {
        while (*(unsigned __int8 *)v8 == *v9)
        {
          v8 = (const void **)((char *)v8 + 1);
          ++v9;
          if (!--v4)
            goto LABEL_21;
        }
LABEL_17:
        quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)v3 + 7), 0, &v17);
        quasar::RecogAudioBuffer::synchronizeToLeadBuffer(v17);
        v10 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
LABEL_24:
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          goto LABEL_26;
        }
        goto LABEL_26;
      }
LABEL_21:
      quasar::MultiAudioBuffer::getBuffer(*((_QWORD *)v3 + 7), 0, &v17);
      quasar::RecogAudioBuffer::setWaitingForFollowers(v17, 0);
      v10 = v18;
      if (v18)
      {
        v13 = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(v13);
        while (__stlxr(v12 - 1, v13));
        goto LABEL_24;
      }
LABEL_26:
      v14 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)v3 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(quasar::MultiChainMultiAudioBuffer **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (quasar::MultiChainMultiAudioBuffer *)*((_QWORD *)v3 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v16);
      }
      v3 = v15;
    }
    while (v15 != (quasar::MultiChainMultiAudioBuffer *)((char *)this + 88));
  }
  if (*((_BYTE *)this + 132))
    *((_BYTE *)this + 132) = 0;
  std::mutex::unlock(v2);
}

void sub_1ADB1367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::setServerSideEndPointing(quasar::MultiChainMultiAudioBuffer *this, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;

  v4 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v5 = (char *)*((_QWORD *)this + 10);
  v6 = (char *)this + 88;
  if (v5 != v6)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v5 + 7) + 40))(*((_QWORD *)v5 + 7), a2);
      v7 = (char *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  std::mutex::unlock(v4);
}

void sub_1ADB13730(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::triggerServerSideEndPointer(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v3 + 7) + 48))(*((_QWORD *)v3 + 7));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1ADB137D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::stopAudioDecoding(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v3 + 7) + 56))(*((_QWORD *)v3 + 7));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1ADB13870(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float quasar::MultiChainMultiAudioBuffer::audioLeftSeconds(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  float v5;
  float v6;
  char *v7;
  char *v8;
  BOOL v9;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 88;
  v5 = 0.0;
  if (v3 != v4)
  {
    do
    {
      v6 = (*(float (**)(_QWORD))(**((_QWORD **)v3 + 7) + 64))(*((_QWORD *)v3 + 7));
      if (v5 < v6)
        v5 = v6;
      v7 = (char *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
  }
  std::mutex::unlock(v2);
  return v5;
}

void sub_1ADB1392C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float quasar::MultiChainMultiAudioBuffer::audioReadSeconds(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  float v5;
  float v6;
  char *v7;
  char *v8;
  BOOL v9;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 88;
  v5 = 0.0;
  if (v3 != v4)
  {
    do
    {
      v6 = (*(float (**)(_QWORD))(**((_QWORD **)v3 + 7) + 72))(*((_QWORD *)v3 + 7));
      if (v5 < v6)
        v5 = v6;
      v7 = (char *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
  }
  std::mutex::unlock(v2);
  return v5;
}

void sub_1ADB139E8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::packetArrivalTimestampFromAudioTime(uint64_t **this, float a2)
{
  std::mutex *v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 *v8;

  v4 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  v8 = (__int128 *)(this + 13);
  v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 10, (const void **)this + 13, (uint64_t)&std::piecewise_construct, &v8);
  v6 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v5[7] + 80))(v5[7], a2);
  std::mutex::unlock(v4);
  return v6;
}

void sub_1ADB13A7C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MultiChainMultiAudioBuffer::getPrimaryAudioEndMs(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = *((_QWORD *)this + 16);
  std::mutex::unlock(v2);
  return v3;
}

void quasar::MultiChainMultiAudioBuffer::emptyAudioBuffer(quasar::MultiChainMultiAudioBuffer *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (char *)*((_QWORD *)this + 10);
  v4 = (char *)this + 88;
  if (v3 != v4)
  {
    do
    {
      quasar::MultiAudioBuffer::emptyAudioBuffer(*((quasar::MultiAudioBuffer **)v3 + 7));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::mutex::unlock(v2);
}

void sub_1ADB13B4C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiChainMultiAudioBuffer::startCountingAudioDuration(uint64_t **this)
{
  std::mutex *v2;
  uint64_t *v3;
  __int128 *v4;

  v2 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  v4 = (__int128 *)(this + 13);
  v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 10, (const void **)this + 13, (uint64_t)&std::piecewise_construct, &v4);
  quasar::MultiAudioBuffer::startCountingAudioDuration((uint64_t **)v3[7]);
  std::mutex::unlock(v2);
}

void sub_1ADB13BC0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float quasar::MultiChainMultiAudioBuffer::stopCountingAudioDuration(uint64_t **this)
{
  std::mutex *v2;
  uint64_t *v3;
  float v4;
  __int128 *v6;

  v2 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  v6 = (__int128 *)(this + 13);
  v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 10, (const void **)this + 13, (uint64_t)&std::piecewise_construct, &v6);
  v4 = quasar::MultiAudioBuffer::stopCountingAudioDuration((uint64_t **)v3[7]);
  std::mutex::unlock(v2);
  return v4;
}

void sub_1ADB13C44(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::MultiAudioBuffer::~MultiAudioBuffer(quasar::MultiAudioBuffer *this)
{
  *(_QWORD *)this = &off_1E5D35F28;
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  quasar::Bitmap::~Bitmap(this);
}

{
  *(_QWORD *)this = &off_1E5D35F28;
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::MultiChainMultiAudioBuffer::~MultiChainMultiAudioBuffer(quasar::MultiChainMultiAudioBuffer *this)
{
  *(_QWORD *)this = off_1E5D39DA8;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  quasar::Bitmap::~Bitmap(this);
}

{
  *(_QWORD *)this = off_1E5D39DA8;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t **std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1ADB13EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::LexiconFST::removeAuxSymbols(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  char v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if ((int)(v3 >> 3) >= 1)
  {
    v6 = 0;
    v7 = (v3 >> 3);
    do
    {
      v17 = &unk_1E5D213B0;
      v20 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(a2);
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * v6);
      v18 = v9;
      v19 = v8 + 8;
      for (i = v20; ; i = ++v20)
      {
        v12 = v9 + 24;
        v11 = *(_QWORD *)(v9 + 24);
        if (i >= (*(_QWORD *)(v12 + 8) - v11) >> 4)
          break;
        v16 = *(__n128 *)(v11 + 16 * i);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(v14, a3, v16.n128_i32[0]);
        if ((v15 & 0x80000000) == 0)
        {
          if (v15)
            goto LABEL_8;
LABEL_7:
          v16.n128_u32[0] = 0;
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v17, &v16);
          goto LABEL_8;
        }
        v13 = v14[1];
        operator delete(v14[0]);
        if (!v13)
          goto LABEL_7;
LABEL_8:
        v9 = v18;
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

void quasar::LexiconFST::readLexicon(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  std::string::size_type size;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 *v33[3];
  std::string v34;
  __int128 *v35[2];

  memset(&v34, 0, sizeof(v34));
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v6 = std::locale::use_facet((const std::locale *)__p, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)__p);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v34, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&v34);
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v34.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\t");
      quasar::splitAndTrimNoEmpty(&v34, (char *)__p, v33);
      if (SBYTE7(v17) < 0)
        operator delete(__p[0]);
      if ((unsigned __int8 *)(v33[1] - v33[0]) == (unsigned __int8 *)48)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, v33[0]))
        {
          *(_OWORD *)__p = 0u;
          v17 = 0u;
          LODWORD(v18) = 1065353216;
          v35[0] = (__int128 *)v33[0];
          v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, v33[0], (uint64_t)&std::piecewise_construct, v35);
          if (v10 + 40 != (unsigned __int8 *)__p)
          {
            *((_DWORD *)v10 + 18) = v18;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)v10 + 5, (uint64_t *)v17, 0);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
        }
        v35[0] = (__int128 *)v33[0];
        v11 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, v33[0], (uint64_t)&std::piecewise_construct, v35);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v11 + 40), v33[0] + 24, (uint64_t)(v33[0] + 24));
      }
      else if (quasar::gLogLevel >= 5)
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid line in lexicon: '", 26);
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v34;
        else
          v13 = (std::string *)v34.__r_.__value_.__r.__words[0];
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        else
          v14 = v34.__r_.__value_.__l.__size_;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      __p[0] = v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_1ADB14290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  __p = (void *)(v14 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v14 - 105) < 0)
    operator delete(*(void **)(v14 - 128));
  _Unwind_Resume(a1);
}

uint64_t quasar::LexiconFST::loadAdditionalLexicon(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[17];
  _QWORD v11[2];
  _QWORD v12[51];
  _QWORD v13[20];

  v13[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v11);
  if (v12[15])
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::clear(a1 + 1600);
    quasar::LexiconFST::readLexicon(v4, v11, (_QWORD *)(a1 + 1600));
  }
  else if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unable to load additional lexicon from: ", 40);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  v11[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v12);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v13);
  return 0;
}

void sub_1ADB14460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::ifstream::~ifstream(&a44);
  _Unwind_Resume(a1);
}

uint64_t quasar::LexiconFST::createFstWithAuxSyms(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v7 = (std::__shared_weak_count *)a3[1];
  v13[0] = *a3;
  v13[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::LexiconFST::_createFst(a1, a2, v13, a4, a5, a6, 1, a7);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1ADB14518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LexiconFST::_createFst(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, _QWORD *a6, int a7, uint64_t a8)
{
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  quasar::QsrText *v40;
  uint64_t v41;
  BOOL v42;
  std::string *p_str;
  int data;
  int v45;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  std::string::size_type v51;
  std::string *v52;
  std::string *v53;
  std::vector<std::string>::pointer v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  std::string::size_type size;
  _BOOL4 v61;
  char *v62;
  __int128 v63;
  std::string *v64;
  unsigned __int8 *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  void **v73;
  std::string::size_type v74;
  std::string *v75;
  char *v76;
  char v77;
  std::vector<std::string>::pointer v78;
  std::string::size_type v79;
  std::string *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  int v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  std::string::size_type v106;
  void **v107;
  std::string *v108;
  std::vector<std::string>::pointer end;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  __int128 v116;
  std::string *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  std::ios_base *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v128;
  std::locale::id *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  const std::locale::facet *v134;
  _QWORD *v137;
  _QWORD *v138;
  unsigned int v139;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v145;
  uint64_t v146[2];
  void *v147[2];
  unsigned __int8 v148;
  std::string v149;
  void *v150[2];
  int64_t v151;
  __int128 v152;
  unint64_t v153;
  __int128 **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::string v160;
  std::string __str;
  _QWORD v162[5];
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  void *__p[2];
  char v168;
  char *v169[3];
  void (**v170)(fst::SymbolTable *__hidden);
  uint64_t v171;
  std::vector<std::string> v172;
  _BYTE __v[48];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188[19];
  _QWORD v189[5];

  v189[2] = *MEMORY[0x1E0C80C00];
  memset(&v172, 0, sizeof(v172));
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(__v);
  v13 = *(_DWORD **)&__v[8];
  ++*(_DWORD *)(*(_QWORD *)&__v[8] + 56);
  v14 = (_DWORD *)a5[1];
  if (v14 && (v15 = v14[14] - 1, (v14[14] = v15) == 0))
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    v17 = *(_DWORD **)&__v[8];
    a5[1] = v13;
    *(_QWORD *)__v = &unk_1E5D256C0;
    v13 = v17;
    if (!v17)
      goto LABEL_7;
  }
  else
  {
    a5[1] = v13;
    *(_QWORD *)__v = &unk_1E5D256C0;
  }
  v16 = v13[14] - 1;
  v13[14] = v16;
  if (!v16)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
LABEL_7:
  v18 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 120))(*a3) + 8);
  *(_QWORD *)__v = &off_1E5D1AD68;
  *(_QWORD *)&__v[8] = v18;
  ++*(_DWORD *)(v18 + 168);
  fst::SymbolTable::operator=((uint64_t)a6, (uint64_t)__v);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__v);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v19)
  {
    v21 = v20;
    v22 = 0;
    while (1)
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(__v, a2, v21);
      std::string::basic_string[abi:ne180100]<0>(__p, "$");
      v23 = quasar::startsWith(__v, (unsigned __int8 *)__p);
      v24 = v23;
      if ((v168 & 0x80000000) == 0)
        break;
      operator delete(__p[0]);
      if (v24)
        goto LABEL_13;
LABEL_14:
      if ((__v[23] & 0x80000000) != 0)
        operator delete(*(void **)__v);
      if (++v22 < v19)
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v22);
      if (v19 == v22)
        goto LABEL_19;
    }
    if (!v23)
      goto LABEL_14;
LABEL_13:
    (*(void (**)(_QWORD *, _BYTE *))(*a6 + 32))(a6, __v);
    goto LABEL_14;
  }
LABEL_19:
  v25 = a6[1];
  v170 = &off_1E5D1AD68;
  v171 = v25;
  ++*(_DWORD *)(v25 + 168);
  quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)__p);
  v26 = *(std::__shared_weak_count **)(a1 + 32);
  v165 = *(_QWORD *)(a1 + 24);
  v166 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  v29 = *(std::__shared_weak_count **)(a1 + 48);
  v163 = *(_QWORD *)(a1 + 40);
  v164 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  quasar::QuasarG2PFactory::createQuasarG2P(&v165, &v163, (__int128 *)a1, (quasar::SystemConfig *)(a1 + 56), 4, (void **)__v);
  v138 = *(_QWORD **)__v;
  *(_QWORD *)__v = 0;
  v32 = v164;
  if (v164)
  {
    v33 = (unint64_t *)&v164->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v166;
  if (v166)
  {
    v36 = (unint64_t *)&v166->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (*(uint64_t (**)(_QWORD *))(*a5 + 200))(a5);
  (*(void (**)(_QWORD *, uint64_t))(*a5 + 176))(a5, v38);
  (*(void (**)(_QWORD *, uint64_t, float))(*a5 + 184))(a5, v38, 0.0);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v162, *a4, a4[1]);
  v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v145 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v143)
  {
    v39 = 0;
    v137 = (_QWORD *)(a1 + 1600);
    v139 = v38;
    do
    {
      v40 = (quasar::QsrText *)(*(_QWORD *(**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(&__str, a2, v145);
      if (!(_DWORD)v145)
        goto LABEL_98;
      v41 = quasar::QsrText::SingletonInstance(v40);
      if (!quasar::QsrText::isValidToken(v41, (uint64_t)&__str))
        goto LABEL_59;
      std::string::basic_string[abi:ne180100]<0>(__v, "//");
      if (quasar::startsWith((unsigned __int8 *)&__str, __v))
      {
        v42 = 1;
        goto LABEL_57;
      }
      std::string::basic_string[abi:ne180100]<0>(&v160, "\\PM-");
      if (quasar::startsWith((unsigned __int8 *)&__str, (unsigned __int8 *)&v160))
      {
        v42 = 1;
        goto LABEL_55;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 5)
        {
LABEL_54:
          v42 = 0;
          goto LABEL_55;
        }
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_54;
        p_str = &__str;
      }
      data = (int)p_str->__r_.__value_.__l.__data_;
      v45 = p_str->__r_.__value_.__s.__data_[4];
      v42 = data == 1936745788 && v45 == 62;
LABEL_55:
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
LABEL_57:
      if ((__v[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__v);
        if (!v42)
        {
LABEL_90:
          std::string::basic_string[abi:ne180100]<0>(__v, "$");
          if (quasar::startsWith((unsigned __int8 *)&__str, __v))
          {
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __str.__r_.__value_.__l.__size_;
            std::string::basic_string(&v160, &__str, 1uLL, size - 1, (std::allocator<char> *)&v157);
            v61 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v162, (unsigned __int8 *)&v160) != 0;
            if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v160.__r_.__value_.__l.__data_);
          }
          else
          {
            v61 = 0;
          }
          if ((__v[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__v);
            if (!v61)
            {
LABEL_109:
              memset(&v160, 0, sizeof(v160));
              std::string::operator=(&v160, &__str);
              v157 = 0;
              v158 = 0;
              v159 = 0;
              v158 = std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>(&v157, (__int128 *)&v160);
              v154 = 0;
              v155 = 0;
              v156 = 0;
              v155 = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>((uint64_t *)&v154, (uint64_t)&v157);
              v65 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v137, (unsigned __int8 *)&__str);
              v152 = 0uLL;
              v153 = 0;
              if (v65)
              {
                v66 = (_QWORD *)*((_QWORD *)v65 + 7);
                if (v66)
                {
                  v67 = 0;
                  do
                  {
                    LODWORD(v150[0]) = 1;
                    *(_QWORD *)__v = 0;
                    if (v67 >= v153)
                    {
                      v67 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,double>((uint64_t *)&v152, (int *)v150, (uint64_t)(v66 + 2), (double *)__v);
                    }
                    else
                    {
                      std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>((uint64_t)&v153, v67, (int *)v150, (uint64_t)(v66 + 2), (double *)__v);
                      v67 += 40;
                    }
                    *((_QWORD *)&v152 + 1) = v67;
                    v66 = (_QWORD *)*v66;
                  }
                  while (v66);
                }
                else
                {
                  v67 = 0;
                }
              }
              else
              {
                quasar::G2P::getProns(v138, &v154, __p, 0, (uint64_t *)__v);
                std::vector<quasar::PronChoice>::__vdeallocate((uint64_t *)&v152);
                v152 = *(_OWORD *)__v;
                v153 = *(_QWORD *)&__v[16];
                memset(__v, 0, 24);
                v150[0] = __v;
                std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
                v67 = *((_QWORD *)&v152 + 1);
              }
              v68 = v67;
              v69 = v152;
              v141 = v68;
              v142 = v39;
              if ((_QWORD)v152 == v68)
              {
                if (a7)
                {
                  v104 = (*(uint64_t (**)(_QWORD *))(*a5 + 200))(a5);
                  LODWORD(v150[0]) = 0;
                  HIDWORD(v150[0]) = v145;
                  LODWORD(v150[1]) = 0;
                  HIDWORD(v150[1]) = v104;
                  (*(void (**)(_QWORD *, uint64_t, void **))(*a5 + 208))(a5, v38, v150);
                  std::operator+<char>();
                  fst::SymbolTable::MutateCheck((std::string *)&v170);
                  v105 = fst::SymbolTableImpl::AddSymbol(v171, (uint64_t)__v, *(_QWORD *)(v171 + 24));
                  if ((__v[23] & 0x80000000) != 0)
                    operator delete(*(void **)__v);
                  *(_QWORD *)__v = v105;
                  *(_DWORD *)&__v[8] = 0;
                  *(_DWORD *)&__v[12] = v38;
                  (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v104, __v);
                }
                else
                {
                  *(_DWORD *)__v = 0;
                  *(_QWORD *)&__v[4] = v145;
                  *(_DWORD *)&__v[12] = v38;
                  (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v38, __v);
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v106 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                else
                  v106 = __str.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)v150, v106 + 6);
                if (v151 >= 0)
                  v107 = v150;
                else
                  v107 = (void **)v150[0];
                if (v106)
                {
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v108 = &__str;
                  else
                    v108 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  memmove(v107, v108, v106);
                }
                strcpy((char *)v107 + v106, "\t<eps>");
                end = v172.__end_;
                if (v172.__end_ >= v172.__end_cap_.__value_)
                {
                  v111 = 0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_ - (char *)v172.__begin_) >> 3);
                  v112 = v111 + 1;
                  if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3) > v112)
                    v112 = 0x5555555555555556 * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3) >= 0x555555555555555)
                    v113 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v113 = v112;
                  *(_QWORD *)&__v[32] = &v172.__end_cap_;
                  if (v113)
                    v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v172.__end_cap_, v113);
                  else
                    v114 = 0;
                  v115 = &v114[24 * v111];
                  *(_QWORD *)__v = v114;
                  *(_QWORD *)&__v[8] = v115;
                  *(_QWORD *)&__v[24] = &v114[24 * v113];
                  v116 = *(_OWORD *)v150;
                  *((_QWORD *)v115 + 2) = v151;
                  *(_OWORD *)v115 = v116;
                  v150[1] = 0;
                  v151 = 0;
                  v150[0] = 0;
                  *(_QWORD *)&__v[16] = v115 + 24;
                  std::vector<std::string>::__swap_out_circular_buffer(&v172, (std::__split_buffer<std::string> *)__v);
                  v117 = v172.__end_;
                  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
                  v172.__end_ = v117;
                  if (SHIBYTE(v151) < 0)
                    operator delete(v150[0]);
                }
                else
                {
                  v110 = *(_OWORD *)v150;
                  v172.__end_->__r_.__value_.__r.__words[2] = v151;
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v110;
                  v172.__end_ = end + 1;
                }
              }
              else
              {
                do
                {
                  std::string::basic_string[abi:ne180100]<0>(__v, ".");
                  quasar::splitStringSimple(v69 + 8, (uint64_t *)__v, (uint64_t *)v150);
                  if ((__v[23] & 0x80000000) != 0)
                    operator delete(*(void **)__v);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  else
                    v70 = __str.__r_.__value_.__l.__size_;
                  std::string::basic_string[abi:ne180100]((uint64_t)&v149, v70 + 1);
                  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v71 = &v149;
                  else
                    v71 = (std::string *)v149.__r_.__value_.__r.__words[0];
                  if (v70)
                  {
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v72 = &__str;
                    else
                      v72 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    memmove(v71, v72, v70);
                  }
                  *(_WORD *)((char *)&v71->__r_.__value_.__l.__data_ + v70) = 9;
                  v146[0] = (uint64_t)" ";
                  v146[1] = 1;
                  quasar::join<std::vector<std::string>>((uint64_t *)v150, v146);
                  if ((v148 & 0x80u) == 0)
                    v73 = v147;
                  else
                    v73 = (void **)v147[0];
                  if ((v148 & 0x80u) == 0)
                    v74 = v148;
                  else
                    v74 = (std::string::size_type)v147[1];
                  v75 = std::string::append(&v149, (const std::string::value_type *)v73, v74);
                  v76 = (char *)v75->__r_.__value_.__r.__words[0];
                  v189[0] = v75->__r_.__value_.__l.__size_;
                  *(_QWORD *)((char *)v189 + 7) = *(std::string::size_type *)((char *)&v75->__r_.__value_.__r.__words[1]
                                                                            + 7);
                  v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
                  v75->__r_.__value_.__l.__size_ = 0;
                  v75->__r_.__value_.__r.__words[2] = 0;
                  v75->__r_.__value_.__r.__words[0] = 0;
                  v78 = v172.__end_;
                  if (v172.__end_ >= v172.__end_cap_.__value_)
                  {
                    v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_ - (char *)v172.__begin_) >> 3);
                    v82 = v81 + 1;
                    if (v81 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    if (0x5555555555555556 * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3) > v82)
                      v82 = 0x5555555555555556 * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3) >= 0x555555555555555)
                      v83 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v83 = v82;
                    *(_QWORD *)&__v[32] = &v172.__end_cap_;
                    if (v83)
                      v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v172.__end_cap_, v83);
                    else
                      v84 = 0;
                    v85 = &v84[24 * v81];
                    *(_QWORD *)__v = v84;
                    *(_QWORD *)&__v[8] = v85;
                    *(_QWORD *)&__v[24] = &v84[24 * v83];
                    v86 = v189[0];
                    *(_QWORD *)v85 = v76;
                    *((_QWORD *)v85 + 1) = v86;
                    *(_QWORD *)(v85 + 15) = *(_QWORD *)((char *)v189 + 7);
                    v85[23] = v77;
                    v189[0] = 0;
                    *(_QWORD *)((char *)v189 + 7) = 0;
                    *(_QWORD *)&__v[16] = v85 + 24;
                    std::vector<std::string>::__swap_out_circular_buffer(&v172, (std::__split_buffer<std::string> *)__v);
                    v80 = v172.__end_;
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
                  }
                  else
                  {
                    v79 = v189[0];
                    v172.__end_->__r_.__value_.__l.__data_ = v76;
                    v78->__r_.__value_.__l.__size_ = v79;
                    *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v189 + 7);
                    *((_BYTE *)&v78->__r_.__value_.__s + 23) = v77;
                    v80 = v78 + 1;
                  }
                  v172.__end_ = v80;
                  if ((char)v148 < 0)
                    operator delete(v147[0]);
                  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v149.__r_.__value_.__l.__data_);
                  v87 = (uint64_t *)v150[0];
                  v88 = (uint64_t *)v150[1];
                  if (v150[0] != v150[1])
                  {
                    v89 = 0;
                    v90 = 0;
                    do
                    {
                      v91 = (*(uint64_t (**)(_QWORD *))(*a5 + 200))(a5);
                      v92 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a6 + 96))(a6, v87);
                      if (v92 == -1)
                      {
                        if (quasar::gLogLevel >= 5)
                        {
                          v186 = 0u;
                          v187 = 0u;
                          v184 = 0u;
                          v185 = 0u;
                          v182 = 0u;
                          v183 = 0u;
                          v180 = 0u;
                          v181 = 0u;
                          v178 = 0u;
                          v179 = 0u;
                          v176 = 0u;
                          v177 = 0u;
                          v174 = 0u;
                          v175 = 0u;
                          memset(__v, 0, sizeof(__v));
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
                          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"Unsupported phoneme '", 21);
                          v94 = *((char *)v87 + 23);
                          if (v94 >= 0)
                            v95 = (uint64_t)v87;
                          else
                            v95 = *v87;
                          if (v94 >= 0)
                            v96 = *((unsigned __int8 *)v87 + 23);
                          else
                            v96 = v87[1];
                          v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, v95, v96);
                          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"' observed, skipping the pron ", 30);
                          v99 = *(_BYTE *)(v69 + 31);
                          if (v99 >= 0)
                            v100 = v69 + 8;
                          else
                            v100 = *(_QWORD *)(v69 + 8);
                          if (v99 >= 0)
                            v101 = *(unsigned __int8 *)(v69 + 31);
                          else
                            v101 = *(_QWORD *)(v69 + 16);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, v100, v101);
                          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__v);
                        }
                        v90 = 1;
                      }
                      if (v89)
                        v102 = 0;
                      else
                        v102 = v145;
                      *(_QWORD *)__v = __PAIR64__(v102, v92);
                      *(_DWORD *)&__v[8] = 0;
                      *(_DWORD *)&__v[12] = v91;
                      (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v38, __v);
                      v87 += 3;
                      --v89;
                      v38 = v91;
                    }
                    while (v87 != v88);
                    v38 = v139;
                    if ((v90 & 1) == 0)
                    {
                      if (a7)
                      {
                        std::operator+<char>();
                        fst::SymbolTable::MutateCheck((std::string *)&v170);
                        v103 = fst::SymbolTableImpl::AddSymbol(v171, (uint64_t)__v, *(_QWORD *)(v171 + 24));
                        if ((__v[23] & 0x80000000) != 0)
                          operator delete(*(void **)__v);
                        *(_QWORD *)__v = v103;
                        *(_DWORD *)&__v[8] = 0;
                        *(_DWORD *)&__v[12] = v139;
                        (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v91, __v);
                      }
                      else
                      {
                        *(_QWORD *)__v = 0;
                        *(_DWORD *)&__v[8] = 0;
                        *(_DWORD *)&__v[12] = v139;
                        (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v91, __v);
                      }
                    }
                  }
                  *(_QWORD *)__v = v150;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
                  v69 += 40;
                  v39 = v142;
                }
                while (v69 != v141);
              }
              *(_QWORD *)__v = &v152;
              std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
              *(_QWORD *)__v = &v154;
              std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
              *(_QWORD *)__v = &v157;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
              if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_98;
LABEL_97:
              operator delete(v160.__r_.__value_.__l.__data_);
              goto LABEL_98;
            }
          }
          else if (!v61)
          {
            goto LABEL_109;
          }
          v47 = 1;
          goto LABEL_60;
        }
      }
      else if (!v42)
      {
        goto LABEL_90;
      }
LABEL_59:
      v47 = 0;
LABEL_60:
      if (a7)
      {
        v48 = (*(uint64_t (**)(_QWORD *))(*a5 + 200))(a5);
        if (v47)
          v49 = (*(uint64_t (**)(_QWORD *, std::string *))(*a6 + 96))(a6, &__str);
        else
          v49 = 0;
        LODWORD(v160.__r_.__value_.__l.__data_) = v49;
        *(std::string::size_type *)((char *)v160.__r_.__value_.__r.__words + 4) = v145;
        HIDWORD(v160.__r_.__value_.__r.__words[1]) = v48;
        (*(void (**)(_QWORD *, uint64_t, std::string *))(*a5 + 208))(a5, v38, &v160);
        std::operator+<char>();
        fst::SymbolTable::MutateCheck((std::string *)&v170);
        v50 = fst::SymbolTableImpl::AddSymbol(v171, (uint64_t)__v, *(_QWORD *)(v171 + 24));
        if ((__v[23] & 0x80000000) != 0)
          operator delete(*(void **)__v);
        *(_QWORD *)__v = v50;
        *(_DWORD *)&__v[8] = 0;
        *(_DWORD *)&__v[12] = v38;
        (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v48, __v);
      }
      else
      {
        *(_DWORD *)__v = 0;
        *(_QWORD *)&__v[4] = v145;
        *(_DWORD *)&__v[12] = v38;
        (*(void (**)(_QWORD *, uint64_t, _BYTE *))(*a5 + 208))(a5, v38, __v);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v51 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v160, v51 + 6);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v160;
      else
        v52 = (std::string *)v160.__r_.__value_.__r.__words[0];
      if (v51)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &__str;
        else
          v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v52, v53, v51);
      }
      strcpy((char *)v52 + v51, "\t<eps>");
      v54 = v172.__end_;
      if (v172.__end_ >= v172.__end_cap_.__value_)
      {
        v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_ - (char *)v172.__begin_) >> 3);
        v57 = v56 + 1;
        if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3) > v57)
          v57 = 0x5555555555555556 * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_cap_.__value_ - (char *)v172.__begin_) >> 3) >= 0x555555555555555)
          v58 = 0xAAAAAAAAAAAAAAALL;
        else
          v58 = v57;
        *(_QWORD *)&__v[32] = &v172.__end_cap_;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v172.__end_cap_, v58);
        else
          v59 = 0;
        v62 = &v59[24 * v56];
        *(_QWORD *)__v = v59;
        *(_QWORD *)&__v[8] = v62;
        *(_QWORD *)&__v[24] = &v59[24 * v58];
        v63 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        *((_QWORD *)v62 + 2) = *((_QWORD *)&v160.__r_.__value_.__l + 2);
        *(_OWORD *)v62 = v63;
        memset(&v160, 0, sizeof(v160));
        *(_QWORD *)&__v[16] = v62 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(&v172, (std::__split_buffer<std::string> *)__v);
        v64 = v172.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
        v172.__end_ = v64;
        if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_98;
        goto LABEL_97;
      }
      v55 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
      v172.__end_->__r_.__value_.__r.__words[2] = v160.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
      v172.__end_ = v54 + 1;
LABEL_98:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (++v39 < v143)
        v145 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v39);
    }
    while (v39 != v143);
  }
  v118 = MEMORY[0x1E0DE4FB0];
  v119 = MEMORY[0x1E0DE4FB0] + 64;
  v120 = (_QWORD *)MEMORY[0x1E0DE4F48];
  v121 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v122 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v188[0] = MEMORY[0x1E0DE4FB0] + 64;
  *(_QWORD *)__v = v121;
  *(_QWORD *)&__v[*(_QWORD *)(v121 - 24)] = v122;
  v123 = (std::ios_base *)&__v[*(_QWORD *)(*(_QWORD *)__v - 24)];
  std::ios_base::init(v123, &__v[8]);
  v123[1].__vftable = 0;
  v123[1].__fmtflags_ = -1;
  *(_QWORD *)__v = v118 + 24;
  v188[0] = v119;
  MEMORY[0x1AF44CA64](&__v[8]);
  v124 = *(unsigned __int8 *)(a8 + 23);
  if ((v124 & 0x80u) != 0)
    v124 = *(_QWORD *)(a8 + 8);
  if (v124)
  {
    std::ofstream::open();
    v125 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v172.__end_ - (char *)v172.__begin_) >> 3));
    if (v172.__end_ == v172.__begin_)
      v126 = 0;
    else
      v126 = v125;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v172.__begin_, (const void **)&v172.__end_->__r_.__value_.__l.__data_, (uint64_t)&v160, v126, 1);
    begin = v172.__begin_;
    v128 = v172.__end_;
    if (v172.__begin_ != v172.__end_)
    {
      v129 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v130 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
        if (v130 >= 0)
          v131 = (uint64_t)begin;
        else
          v131 = begin->__r_.__value_.__r.__words[0];
        if (v130 >= 0)
          v132 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
        else
          v132 = begin->__r_.__value_.__l.__size_;
        v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, v131, v132);
        std::ios_base::getloc((const std::ios_base *)((char *)v133 + *(_QWORD *)(*v133 - 24)));
        v134 = std::locale::use_facet((const std::locale *)&v160, v129);
        ((void (*)(const std::locale::facet *, uint64_t))v134->__vftable[2].~facet_0)(v134, 10);
        std::locale::~locale((std::locale *)&v160);
        std::ostream::put();
        std::ostream::flush();
        ++begin;
      }
      while (begin != v128);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&__v[*(_QWORD *)(*(_QWORD *)__v - 24)], *(_DWORD *)&__v[*(_QWORD *)(*(_QWORD *)__v - 24) + 32] | 4);
  }
  *(_QWORD *)__v = *v120;
  *(_QWORD *)&__v[*(_QWORD *)(*(_QWORD *)__v - 24)] = v120[3];
  MEMORY[0x1AF44CA70](&__v[8]);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v188);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v162);
  if (v138)
    (*(void (**)(_QWORD *))(*v138 + 8))(v138);
  std::__tree<std::string>::destroy((uint64_t)v169, v169[1]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&v170);
  *(_QWORD *)__v = &v172;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  return 1;
}

void sub_1ADB1575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void ***a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,std::locale a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  uint64_t a72;
  char *a73;
  char a74;
  char a75;

  if (a37 < 0)
    operator delete(__p);
  __p = &a38;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a38 = &a41;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a41 = (void **)&a44;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a41);
  if (a53 < 0)
    operator delete(a48.__locale_);
  if (a60 < 0)
    operator delete(a55);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a61);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  std::__tree<std::string>::destroy((uint64_t)&a72, a73);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a74);
  a70 = &a75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  _Unwind_Resume(a1);
}

uint64_t quasar::LexiconFST::createFstWithoutAuxSyms(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 **a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];

  v7 = (std::__shared_weak_count *)a3[1];
  v13[0] = *a3;
  v13[1] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::LexiconFST::_createFst(a1, a2, v13, a4, a5, a6, 0, a7);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1ADB15B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::SymbolTable::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 != v3)
  {
    v4 = result;
    ++*(_DWORD *)(v3 + 168);
    v5 = *(_DWORD *)(v2 + 168) - 1;
    *(_DWORD *)(v2 + 168) = v5;
    if (!v5)
    {
      if (*(char *)(v2 + 223) < 0)
        operator delete(*(void **)(v2 + 200));
      if (*(char *)(v2 + 199) < 0)
        operator delete(*(void **)(v2 + 176));
      std::__tree<int>::destroy(v2 + 144, *(_QWORD **)(v2 + 152));
      v7 = *(void **)(v2 + 120);
      if (v7)
      {
        *(_QWORD *)(v2 + 128) = v7;
        operator delete(v7);
      }
      fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v2 + 40));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      result = MEMORY[0x1AF44D190](v2, 0x10B2C404FCE5648);
      v3 = *(_QWORD *)(a2 + 8);
    }
    *(_QWORD *)(v4 + 8) = v3;
  }
  return result;
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string const&,double>(uint64_t *a1, int *a2, uint64_t a3, double *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1ADB15D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string const&,double>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, double *a5)
{
  int v7;
  float v8;
  std::string *v9;
  int v10;
  std::string __p;

  v7 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v8 = *a5;
  *(_DWORD *)a2 = v7;
  v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(float *)(a2 + 32) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(float *)(a2 + 32) = v8;
  }
}

void sub_1ADB15DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::createNameEnumerator(uint64_t a1@<X0>, quasar::SystemConfig *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v13;
  BOOL v14;
  int v17;
  int v18;
  uint64_t SpeechModelInfo;
  uint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t *v29;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE v41[64];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  if (quasar::gLogLevel >= 4)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Building NameEnumerator ", 24);
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v42);
  }
  *a3 = 0;
  a3[1] = 0;
  quasar::PTree::PTree((quasar::PTree *)v41);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v10 = *(unsigned __int8 *)(a1 + 23);
    v11 = (int *)a1;
    switch(*(_BYTE *)(a1 + 23))
    {
      case 5:
        goto LABEL_83;
      case 6:
        if (*(_DWORD *)a1 != 1886218611 || *(_WORD *)(a1 + 4) != 25964)
          goto LABEL_94;
        goto LABEL_46;
      case 7:
        goto LABEL_38;
      case 8:
        if (*(_QWORD *)a1 == 0x79706F632D776172)
          goto LABEL_68;
        if (v10 == 5)
          goto LABEL_83;
        v11 = (int *)a1;
        if (v10 != 7)
          goto LABEL_94;
        goto LABEL_38;
      case 0xA:
        if (*(_QWORD *)a1 == 0x6974737561687865 && *(_WORD *)(a1 + 8) == 25974)
          goto LABEL_72;
        v11 = (int *)a1;
        if (v10 == 7)
          goto LABEL_38;
        if (v10 != 5)
          goto LABEL_94;
LABEL_83:
        if (*(_DWORD *)a1 != 1701274994 || *(_BYTE *)(a1 + 4) != 120)
          goto LABEL_94;
        goto LABEL_88;
      default:
        goto LABEL_94;
    }
  }
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 == 6
    && (**(_DWORD **)a1 == 1886218611 ? (v14 = *(unsigned __int16 *)(*(_QWORD *)a1 + 4) == 25964) : (v14 = 0), v14))
  {
LABEL_46:
    std::allocate_shared[abi:ne180100]<quasar::SimpleNameEnumerator,std::allocator<quasar::SimpleNameEnumerator>,std::string const&,quasar::PTree const&,void>(&v42);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v42);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_93;
    v24 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
  }
  else
  {
    if (v13 == 8)
    {
      if (**(_QWORD **)a1 == 0x79706F632D776172)
      {
LABEL_68:
        std::allocate_shared[abi:ne180100]<quasar::RawCopyEnumerator,std::allocator<quasar::RawCopyEnumerator>,std::string const&,void>((__int128 *)a1, &v42);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v42);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (!*((_QWORD *)&v42 + 1))
          goto LABEL_93;
        v31 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v25 = __ldaxr(v31);
        while (__stlxr(v25 - 1, v31));
        goto LABEL_91;
      }
      v13 = *(_QWORD *)(a1 + 8);
    }
    if (v13 == 10)
    {
      if (**(_QWORD **)a1 == 0x6974737561687865 && *(_WORD *)(*(_QWORD *)a1 + 8) == 25974)
      {
LABEL_72:
        std::allocate_shared[abi:ne180100]<quasar::ExhaustiveEnumerator,std::allocator<quasar::ExhaustiveEnumerator>,std::string const&,quasar::PTree const&,void>(&v42);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v42);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (!*((_QWORD *)&v42 + 1))
          goto LABEL_93;
        v32 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v25 = __ldaxr(v32);
        while (__stlxr(v25 - 1, v32));
        goto LABEL_91;
      }
      v13 = *(_QWORD *)(a1 + 8);
    }
    if (v13 == 5)
    {
      if (**(_DWORD **)a1 == 1701274994 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 120)
      {
LABEL_88:
        std::allocate_shared[abi:ne180100]<quasar::RegexEnumerator,std::allocator<quasar::RegexEnumerator>,std::string const&,quasar::PTree const&,void>(&v42);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v42);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (!*((_QWORD *)&v42 + 1))
          goto LABEL_93;
        v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v25 = __ldaxr(v35);
        while (__stlxr(v25 - 1, v35));
        goto LABEL_91;
      }
      v13 = *(_QWORD *)(a1 + 8);
    }
    if (v13 != 7)
      goto LABEL_94;
    v11 = *(int **)a1;
LABEL_38:
    v17 = *v11;
    v18 = *(int *)((char *)v11 + 3);
    if (v17 != 1769104740 || v18 != 1684371049)
    {
LABEL_94:
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Unknown NameEnumerator \"", 24);
      v37 = *(char *)(a1 + 23);
      if (v37 >= 0)
        v38 = a1;
      else
        v38 = *(_QWORD *)a1;
      if (v37 >= 0)
        v39 = *(unsigned __int8 *)(a1 + 23);
      else
        v39 = *(_QWORD *)(a1 + 8);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v42);
    }
    SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(a2);
    v21 = SpeechModelInfo + 120;
    v22 = *(char *)(SpeechModelInfo + 143);
    if (v22 < 0)
    {
      if (*(_QWORD *)(SpeechModelInfo + 128) != 5)
      {
LABEL_56:
        std::allocate_shared[abi:ne180100]<quasar::DerivedEnumerator,std::allocator<quasar::DerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>(&v42);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v42);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (!*((_QWORD *)&v42 + 1))
          goto LABEL_93;
        v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v25 = __ldaxr(v29);
        while (__stlxr(v25 - 1, v29));
        goto LABEL_91;
      }
      v21 = *(_QWORD *)v21;
    }
    else if (v22 != 5)
    {
      goto LABEL_56;
    }
    v26 = *(_DWORD *)v21;
    v27 = *(unsigned __int8 *)(v21 + 4);
    if (v26 != 1247764842 || v27 != 80)
      goto LABEL_56;
    std::allocate_shared[abi:ne180100]<quasar::JapaneseDerivedEnumerator,std::allocator<quasar::JapaneseDerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>(&v42);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v42);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_93;
    v33 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v25 = __ldaxr(v33);
    while (__stlxr(v25 - 1, v33));
  }
LABEL_91:
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_93:
  quasar::PTree::~PTree((quasar::PTree *)v41);
}

void sub_1ADB16358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1ADB16364);
}

void quasar::NameEnumerator::~NameEnumerator(void **this)
{
  *this = off_1E5D35280;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void quasar::NameEnumerator::addSpecEnumerations(uint64_t a1, int **a2, __int128 **a3, char a4, uint64_t *a5)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t p_size;
  int *v15;
  const void **v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int **v29;
  __int128 v32;
  unint64_t v33;
  std::string v34;
  std::string __p;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  _QWORD *v40[2];
  std::string *p_p;
  void **v42;

  v6 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    if (*a2 == a2[1])
    {
      v27 = a5[1];
      if (v27 >= a5[2])
      {
        v28 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(a5, a3);
      }
      else
      {
        std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)a5, a3);
        v28 = v27 + 24;
      }
      a5[1] = v28;
    }
    else
    {
      v40[0] = 0;
      v40[1] = 0;
      v39 = (uint64_t *)v40;
      do
      {
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v9 = *v6;
          v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v9;
        }
        if (*((char *)v6 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
        }
        else
        {
          v10 = *(__int128 *)((char *)v6 + 24);
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
        }
        v36 = *((_DWORD *)v6 + 12);
        std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v37, (uint64_t)v6 + 56);
        if (v40 == (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v39, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          v32 = 0uLL;
          v33 = 0;
          p_p = &__p;
          v11 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v39, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
          std::vector<quasar::LmeDataFactoryBase::Word>::__vdeallocate((void **)v11 + 7);
          *(_OWORD *)(v11 + 7) = v32;
          v11[9] = v33;
          v33 = 0;
          v32 = 0uLL;
          v42 = (void **)&v32;
          std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v42);
        }
        *(_QWORD *)&v32 = &__p;
        v12 = std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v39, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v32);
        v13 = (std::string *)v12[8];
        if ((unint64_t)v13 >= v12[9])
        {
          p_size = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(v12 + 7, (__int128 *)&v34);
        }
        else
        {
          std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>((_DWORD)v12 + 72, v13, (__int128 *)&v34);
          p_size = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
          v12[8] = (uint64_t)&v13[3].__r_.__value_.__l.__size_;
        }
        v12[8] = p_size;
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v37, v38);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        v6 += 5;
      }
      while (v6 != v5);
      v15 = *a2;
      if (*a2 != a2[1])
      {
        v29 = a2;
        do
        {
          v32 = 0uLL;
          v33 = 0;
          v16 = (const void **)*((_QWORD *)v15 + 1);
          if (v16 != *((const void ***)v15 + 2))
          {
            v17 = *v15;
            do
            {
              v18 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v39, v16);
              if (v40 == (_QWORD **)v18)
              {
                if ((a4 & 1) == 0)
                  goto LABEL_47;
              }
              else
              {
                v19 = *(__int128 **)(v18 + 56);
                v20 = *(__int128 **)(v18 + 64);
                while (v19 != v20)
                {
                  if (*((char *)v19 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
                  }
                  else
                  {
                    v21 = *v19;
                    v34.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
                    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
                  }
                  if (*((char *)v19 + 47) < 0)
                  {
                    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v19 + 3), *((_QWORD *)v19 + 4));
                  }
                  else
                  {
                    v22 = *(__int128 *)((char *)v19 + 24);
                    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 5);
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
                  }
                  v36 = *((_DWORD *)v19 + 12);
                  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](&v37, (uint64_t)v19 + 56);
                  v36 *= v17;
                  v23 = *((_QWORD *)&v32 + 1);
                  if (*((_QWORD *)&v32 + 1) >= v33)
                  {
                    v24 = std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>((uint64_t *)&v32, (__int128 *)&v34);
                  }
                  else
                  {
                    std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>((int)&v33, *((std::string **)&v32 + 1), (__int128 *)&v34);
                    v24 = v23 + 80;
                  }
                  *((_QWORD *)&v32 + 1) = v24;
                  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v37, v38);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v34.__r_.__value_.__l.__data_);
                  v19 += 5;
                }
              }
              v16 += 3;
            }
            while (v16 != *((const void ***)v15 + 2));
          }
          v25 = a5[1];
          if (v25 >= a5[2])
          {
            v26 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(a5, (__int128 **)&v32);
          }
          else
          {
            std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)a5, (__int128 **)&v32);
            v26 = v25 + 24;
          }
          a5[1] = v26;
LABEL_47:
          v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
          std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
          v15 += 8;
        }
        while (v15 != v29[1]);
      }
      std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy((uint64_t)&v39, v40[0]);
    }
  }
}

void sub_1ADB1677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  *(_QWORD *)(v28 - 96) = &a13;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 96));
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&__p);
  std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(v28 - 136, *(_QWORD **)(v28 - 128));
  _Unwind_Resume(a1);
}

void quasar::RawCopyEnumerator::~RawCopyEnumerator(void **this)
{
  *this = off_1E5D35280;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D35280;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::RawCopyEnumerator::addEnumerations(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  std::vector<std::string>::pointer end;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::vector<std::string> v20;
  std::__split_buffer<std::string> __v;

  v3 = *a2;
  if (*a2 != a2[1])
  {
    memset(&v20, 0, sizeof(v20));
    std::to_string(&v19, *(_DWORD *)(v3 + 48));
    end = v20.__end_;
    if (v20.__end_ >= v20.__end_cap_.__value_)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_ - (char *)v20.__begin_) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) > v9)
        v9 = 0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v20.__end_cap_;
      if (v10)
        v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v20.__end_cap_, v10);
      else
        v11 = 0;
      v12 = v11 + v8;
      __v.__first_ = v11;
      __v.__begin_ = v12;
      __v.__end_cap_.__value_ = &v11[v10];
      v13 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
      v12->__r_.__value_.__r.__words[2] = v19.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      memset(&v19, 0, sizeof(v19));
      __v.__end_ = v12 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v20, &__v);
      v14 = v20.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v20.__end_ = v14;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
      v20.__end_->__r_.__value_.__r.__words[2] = v19.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
      v20.__end_ = end + 1;
    }
    v15 = *a2;
    v16 = a2[1];
    if (*a2 != v16)
    {
      v17 = v20.__end_;
      do
      {
        if (v17 >= v20.__end_cap_.__value_)
        {
          v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v20, (__int128 *)v15);
        }
        else
        {
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
          }
          else
          {
            v18 = *(_OWORD *)v15;
            v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          ++v17;
        }
        v20.__end_ = v17;
        v15 += 80;
      }
      while (v15 != v16);
    }
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a3, &v20, (__int128 **)&v20);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_1ADB16AD0(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char *__pa, std::__split_buffer<std::wstring> *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a19);
  if (a15 < 0)
    operator delete(__pa);
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t quasar::RawCopyEnumerator::isCalculatedInQuasar(quasar::RawCopyEnumerator *this)
{
  return 1;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SimpleNameEnumerator,std::allocator<quasar::SimpleNameEnumerator>,std::string const&,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SimpleNameEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB16B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SimpleNameEnumerator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D438A0;
  a1[1] = 0;
  quasar::SimpleNameEnumerator::SimpleNameEnumerator(a1 + 3);
  return a1;
}

void sub_1ADB16BC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D438A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D438A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SimpleNameEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RawCopyEnumerator,std::allocator<quasar::RawCopyEnumerator>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RawCopyEnumerator>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADB16C78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::RawCopyEnumerator>,0>(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &unk_1E5D430C0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = off_1E5D35280;
  v3 = (std::string *)(a1 + 4);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[3] = off_1E5D36668;
  return a1;
}

void sub_1ADB16D00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D430C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D430C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RawCopyEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ExhaustiveEnumerator,std::allocator<quasar::ExhaustiveEnumerator>,std::string const&,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ExhaustiveEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB16DB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ExhaustiveEnumerator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43750;
  a1[1] = 0;
  quasar::ExhaustiveEnumerator::ExhaustiveEnumerator(a1 + 3);
  return a1;
}

void sub_1ADB16E04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ExhaustiveEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RegexEnumerator,std::allocator<quasar::RegexEnumerator>,std::string const&,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<quasar::RegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::RegexEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB16EBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RegexEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::RegexEnumerator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42D08;
  a1[1] = 0;
  quasar::RegexEnumerator::RegexEnumerator(a1 + 3);
  return a1;
}

void sub_1ADB16F08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegexEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RegexEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::JapaneseDerivedEnumerator,std::allocator<quasar::JapaneseDerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x148uLL);
  result = std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::JapaneseDerivedEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB16FD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::JapaneseDerivedEnumerator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44358;
  a1[1] = 0;
  quasar::JapaneseDerivedEnumerator::JapaneseDerivedEnumerator(a1 + 3);
  return a1;
}

void sub_1ADB1701C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::JapaneseDerivedEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DerivedEnumerator,std::allocator<quasar::DerivedEnumerator>,std::string const&,quasar::SystemConfig &,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x138uLL);
  result = std::__shared_ptr_emplace<quasar::DerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::DerivedEnumerator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADB170E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DerivedEnumerator>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::SystemConfig &,quasar::PTree const&,std::allocator<quasar::DerivedEnumerator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42FA8;
  a1[1] = 0;
  quasar::DerivedEnumerator::DerivedEnumerator(a1 + 3);
  return a1;
}

void sub_1ADB17130(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::DerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::DerivedEnumerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::DerivedEnumerator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::LmeDataFactoryBase::Word>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::LmeDataFactoryBase::Word>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1ADB1734C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::LmeDataFactoryBase::Word>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::LmeDataFactoryBase::Word>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::vector<quasar::LmeDataFactoryBase::Word>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__push_back_slow_path<quasar::LmeDataFactoryBase::Word const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADB1750C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

srilm::NgramCountContext *srilm::NgramCountContext::NgramCountContext(srilm::NgramCountContext *this)
{
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0xBFF0000000000000;
  *((_DWORD *)this + 22) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 15, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 18, "");
  return this;
}

void sub_1ADB175B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 32);
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v4;
  *v4 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    srilm::NgramCountContext::~NgramCountContext(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void srilm::NgramCountContext::~NgramCountContext(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this[6];
  this[6] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  v3 = this[3];
  this[3] = 0;
  if (v3)
    (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  v4 = this[2];
  this[2] = 0;
  if (v4)
    (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
  v5 = this[1];
  this[1] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(_QWORD *this)
{
  *this = off_1E5D33B08;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(void **this)
{
  *this = off_1E5D33B08;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t kaldi::quasar::ComputeEngineBufferItf::CopyFrom(kaldi::quasar::ComputeEngineBufferItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _BYTE *v4;
  char *v5;
  BOOL v6;
  void *__p;
  _BYTE *v9;
  char *v10;
  char *v11;

  kaldi::quasar::ComputeEngineBufferItf::GetShape(this, (char **)&__p);
  kaldi::quasar::ComputeEngineBufferItf::GetShape(a2, &v10);
  v4 = __p;
  v5 = v10;
  if (v9 - (_BYTE *)__p != v11 - v10)
  {
    v6 = 0;
    if (!v10)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = memcmp(__p, v10, v9 - (_BYTE *)__p) == 0;
  if (v5)
  {
LABEL_5:
    v11 = v5;
    operator delete(v5);
    v4 = __p;
  }
LABEL_6:
  if (v4)
  {
    v9 = v4;
    operator delete(v4);
  }
  if (!v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "GetShape() == src.GetShape()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  return (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 64))(this, a2);
}

void sub_1ADB178C0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::ComputeEngineBufferItf::GetShape(kaldi::quasar::ComputeEngineBufferItf *this@<X0>, char **a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 152))(this);
  if (v4 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)this + 160))(this, v5);
      v7 = v6;
      v9 = a2[1];
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        v11 = *a2;
        v12 = (v9 - *a2) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v15);
          v11 = *a2;
          v9 = a2[1];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[8 * v12];
        *(_QWORD *)v17 = v7;
        v10 = v17 + 8;
        while (v9 != v11)
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v17 - 1) = v18;
          v17 -= 8;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = &v16[8 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v9 = v6;
        v10 = v9 + 8;
      }
      a2[1] = v10;
      v5 = (v5 + 1);
    }
    while ((_DWORD)v5 != v4);
  }
}

void sub_1ADB17A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ComputeEngineBufferItf::GetFirstNonZeroColumn(kaldi::quasar::ComputeEngineBufferItf *this, float a2)
{
  double v4;
  uint64_t NonZeroColumn;
  uint64_t v7[34];

  if ((*(unsigned int (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 152))(this) != 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "GetNumDims() == 2");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  v4 = kaldi::Matrix<float>::Matrix((uint64_t)v7);
  (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t *, double))(*(_QWORD *)this + 24))(this, v7, v4);
  NonZeroColumn = kaldi::MatrixBase<float>::FirstNonZeroColumn(v7, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)v7);
  return NonZeroColumn;
}

void sub_1ADB17AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::quasar::ComputeEngineBufferItf::GetSize(kaldi::quasar::ComputeEngineBufferItf *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 152))(this);
  if (v2 < 1)
    return 1;
  v3 = v2;
  v4 = 0;
  v5 = 1;
  do
  {
    v5 *= (*(int (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)this + 160))(this, v4);
    v4 = (v4 + 1);
  }
  while (v3 != (_DWORD)v4);
  return v5;
}

_QWORD *kaldi::quasar::ComputeEngineBufferItf::GetShapeString@<X0>(kaldi::quasar::ComputeEngineBufferItf *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)this + 152))(this);
  if (!v4)
    return std::string::basic_string[abi:ne180100]<0>(a2, "[]");
  v5 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[ ", 2);
  (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)this + 160))(this, 0);
  std::ostream::operator<<();
  if (v5 >= 2)
  {
    v6 = 1;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)this + 160))(this, v6);
      std::ostream::operator<<();
      v6 = (v6 + 1);
    }
    while (v5 != (_DWORD)v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ]", 2);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1AF44D094](&v10);
}

void sub_1ADB17CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::ComputeEngineBufferItf::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void kaldi::quasar::ComputeEngineItf::CreateConcatMove(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *__p;
  char *v24;
  char *v25;

  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7 == 1)
  {
    v8 = *v6;
    *v6 = 0;
    *a4 = v8;
  }
  else if (v7)
  {
    __p = 0;
    v24 = 0;
    v25 = 0;
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(&__p, v7);
    v11 = *a2;
    v12 = a2[1];
    if (*a2 != v12)
    {
      v13 = v24;
      do
      {
        v14 = *v11;
        if (v13 >= v25)
        {
          v15 = (v13 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = (v25 - (_BYTE *)__p) >> 2;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)(v25 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v25, v17);
          else
            v18 = 0;
          v19 = &v18[8 * v15];
          *(_QWORD *)v19 = v14;
          v13 = v19 + 8;
          v21 = (char *)__p;
          v20 = v24;
          if (v24 != __p)
          {
            do
            {
              v22 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v19 - 1) = v22;
              v19 -= 8;
            }
            while (v20 != v21);
            v20 = (char *)__p;
          }
          __p = v19;
          v24 = v13;
          v25 = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_QWORD *)v13 = v14;
          v13 += 8;
        }
        v24 = v13;
        ++v11;
      }
      while (v11 != v12);
    }
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 96))(a1, &__p, a3);
    if (__p)
    {
      v24 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1ADB17EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ComputeEngineItf::CreateConcat(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *__p;
  char *v18;
  char *v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *v5;
      if (v7 >= v19)
      {
        v9 = (v7 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = (v19 - (_BYTE *)__p) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v19 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v19, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v8;
        v7 = v13 + 8;
        v15 = (char *)__p;
        v14 = v18;
        if (v18 != __p)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)__p;
        }
        __p = v13;
        v18 = v7;
        v19 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v7 = v8;
        v7 += 8;
      }
      v18 = v7;
      ++v5;
    }
    while (v5 != v6);
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 96))(a1, &__p, a3);
  if (__p)
  {
    v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADB18038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ComputeEngineItf::CreateSplitMove@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  _QWORD *v20;

  result = *a2;
  if (!*a2 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result), !(_DWORD)result))
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, 0);
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, *a2);
    goto LABEL_5;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v20 = a3 + 2;
  v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), 1uLL);
  v9 = &v7[v8];
  v10 = *a2;
  *a2 = 0;
  *v7 = v10;
  v11 = v7 + 1;
  v13 = (_QWORD *)*a3;
  v12 = (_QWORD *)a3[1];
  if (v12 == (_QWORD *)*a3)
  {
    v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      v14 = *--v12;
      *v12 = 0;
      *--v7 = v14;
    }
    while (v12 != v13);
    v15 = *(int64x2_t *)a3;
  }
  *a3 = v7;
  a3[1] = v11;
  v18 = v15;
  v16 = a3[2];
  a3[2] = v9;
  v19 = v16;
  v17 = v15.i64[0];
  result = std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v17);
  a3[1] = v11;
  return result;
}

void sub_1ADB18178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ComputeEngineItf::RunBatch(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  void **p_data;
  unint64_t v13;
  __int128 v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  void **v25;
  void **v26;
  void **v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t *v30;
  uint64_t *i;
  std::string __p;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  unint64_t *v41;
  std::string *p_p;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      kaldi::quasar::ComputeEngineItf::CreateConcatMove(a1, (uint64_t **)v9 + 3, 0, &p_p);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      p_data = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      v33 = p_data;
      v13 = v35;
      if (v35 >= v36)
      {
        v17 = (uint64_t)(v35 - v34) >> 5;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v36 - v34;
        if ((uint64_t)(v36 - v34) >> 4 > v18)
          v18 = v19 >> 4;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
          v20 = 0x7FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v41 = &v36;
        v21 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v36, v20);
        v22 = &v21[4 * v17];
        v37 = v21;
        v38 = v22;
        v40 = &v21[4 * v23];
        v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v22[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v22 = v24;
        memset(&__p, 0, sizeof(__p));
        v25 = v33;
        v33 = 0;
        v22[3] = (uint64_t)v25;
        v39 = (char *)(v22 + 4);
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v34, &v37);
        v16 = v35;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v37);
      }
      else
      {
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v35 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        memset(&__p, 0, sizeof(__p));
        v15 = v33;
        v33 = 0;
        *(_QWORD *)(v13 + 24) = v15;
        v16 = v13 + 32;
      }
      v35 = v16;
      v26 = v33;
      v33 = 0;
      if (v26)
        (*((void (**)(void **))*v26 + 1))(v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v27 = (void **)&p_p->__r_.__value_.__l.__data_;
      p_p = 0;
      if (v27)
        (*((void (**)(void **))*v27 + 1))(v27);
      v9 += 3;
    }
    while (v9 != v10);
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a1 + 120))(a1, &v34, a3, a4, &v37);
  v28 = *a5;
  v29 = a5[1];
  while (v29 != v28)
  {
    v29 -= 24;
    __p.__r_.__value_.__r.__words[0] = v29;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  a5[1] = v28;
  v30 = v37;
  for (i = v38; v30 != i; ++v30)
  {
    kaldi::quasar::ComputeEngineItf::CreateSplitMove(a1, v30, &__p);
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](a5, (uint64_t)&__p);
    p_p = &__p;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v37 = &v34;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_1ADB18418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  __p = &a20;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a17;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADB185F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(kaldi::quasar::ComputeEngineConfigItf *this)
{
  *(_QWORD *)this = off_1E5D33BC8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

_QWORD *kaldi::quasar::ComputeEngineConfigItf::CreateComputeEngineAllowingFallback@<X0>(kaldi::quasar::ComputeEngineConfigItf *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)this + 24))(&v4);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t kaldi::quasar::ComputeEngineConfigItf::ComputeEngineUpgradeLikelyExists(kaldi::quasar::ComputeEngineConfigItf *this)
{
  return 0;
}

void kaldi::quasar::ComputeEngineBufferItf::CopyFromImpl(kaldi::quasar::ComputeEngineBufferItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "CopyFromImpl not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineBufferItf::GetWritableDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetWritableDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataFloat(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataFloat not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::GetDataInt32(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "GetDataInt32 not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::quasar::ComputeEngineBufferItf::isDataFloat16(kaldi::quasar::ComputeEngineBufferItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "isDataFloat16 not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

uint64_t std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *quasar::corrective_reranking::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

_QWORD *quasar::corrective_reranking::operator<<(_QWORD *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;

  quasar::joinToList<std::vector<quasar::corrective_reranking::TextRange>>(a2, 0);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1ADB18AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::joinToList<std::vector<quasar::corrective_reranking::TextRange>>(uint64_t *a1, int a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v7[2];
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[", 1);
  if (*a1 != a1[1])
  {
    if (a2)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n ", 2);
      v4 = ",\n ";
    }
    else
    {
      v4 = ", ";
    }
    v7[0] = (uint64_t)v4;
    v7[1] = strlen(v4);
    quasar::joinToStream<std::vector<quasar::corrective_reranking::TextRange>>(v9, a1, v7);
    if (a2)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v11);
}

void sub_1ADB18C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::corrective_reranking::operator<<(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[35];

  v3 = *(_QWORD *)(a2 + 56);
  v2 = *(_QWORD *)(a2 + 64);
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) != (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "o.outputs.size() == o.utterance.size()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (v2 != v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a2 + 32);
      if (v8)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      v10 = v3 + v6;
      v11 = *(char *)(v9 + v7 + 23);
      if (v11 >= 0)
        v12 = v9 + v7;
      else
        v12 = *(_QWORD *)(v9 + v7);
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v9 + v7 + 23);
      else
        v13 = *(_QWORD *)(v9 + v7 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
      v16 = *(char *)(v10 + 23);
      if (v16 >= 0)
        v17 = v10;
      else
        v17 = *(_QWORD *)v10;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(v10 + 23);
      else
        v18 = *(_QWORD *)(v10 + 8);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
      ++v8;
      v3 = *(_QWORD *)(a2 + 56);
      v7 += 32;
      v6 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 64) - v3) >> 3) > v8);
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" | targetRange=", 15);
    quasar::corrective_reranking::operator<<(v20, (uint64_t *)(a2 + 88));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" | wfst_weight=", 15);
  std::ostream::operator<<();
  return a1;
}

std::string *quasar::corrective_reranking::ASRCandidate::ASRCandidate(std::string *this, const quasar::PTree *a2)
{
  quasar::PTree *Child;
  const std::string *String;
  quasar::PTree *v6;
  void *__p[2];
  char v9;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "text");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  String = (const std::string *)quasar::PTree::getString(Child);
  std::string::operator=(this, String);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "confidence");
  v6 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)a2, (__int128 *)__p);
  LODWORD(this[1].__r_.__value_.__l.__data_) = (int)quasar::PTree::getDouble(v6);
  if (v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1ADB18E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::ASRCandidate::toPtree(quasar::corrective_reranking::ASRCandidate *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar *v4;
  int Type;
  std::string v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11[2];
  char v12;

  quasar::PTree::PTree(a2);
  std::string::basic_string[abi:ne180100]<0>(v11, "text");
  quasar::PTree::PTree(&Type, this);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v11, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:ne180100]<0>(v11, "confidence");
  v4 = (quasar *)*((unsigned int *)this + 6);
  Type = quasar::getType(v4);
  std::to_string(&v6, (int)v4);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v11, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v12 < 0)
    operator delete(v11[0]);
}

void sub_1ADB18FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  quasar::PTree *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 17) < 0)
    operator delete(*(void **)(v3 - 40));
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextRange::toPtree(quasar::corrective_reranking::TextRange *this@<X0>, quasar::PTree *a2@<X8>)
{
  int v4;
  quasar *v5;
  int Type;
  std::string v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12[2];
  char v13;

  quasar::PTree::PTree(a2);
  std::string::basic_string[abi:ne180100]<0>(v12, "start_index");
  v4 = *(_DWORD *)this;
  Type = quasar::getType((quasar *)*(unsigned int *)this);
  std::to_string(&v7, v4);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v12, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, "length");
  v5 = (quasar *)*((unsigned int *)this + 1);
  Type = quasar::getType(v5);
  std::to_string(&v7, (int)v5);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v12, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1ADB19104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  quasar::PTree *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 33) < 0)
    operator delete(*(void **)(v3 - 56));
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TargetRange::toPtree(quasar::corrective_reranking::TextRange **this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::corrective_reranking::TextRange *v4;
  quasar::corrective_reranking::TextRange *v5;
  void *__p[2];
  char v7;
  _BYTE v8[64];

  quasar::PTree::PTree(a2);
  quasar::PTree::PTree((quasar::PTree *)v8);
  v4 = *this;
  v5 = this[1];
  while (v4 != v5)
  {
    quasar::corrective_reranking::TextRange::toPtree(v4, (quasar::PTree *)__p);
    quasar::PTree::addChild((quasar::PTree *)v8, (const quasar::PTree *)__p);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    v4 = (quasar::corrective_reranking::TextRange *)((char *)v4 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token_ranges");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)v8, 1);
  if (v7 < 0)
    operator delete(__p[0]);
  quasar::PTree::~PTree((quasar::PTree *)v8);
}

void sub_1ADB191FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  quasar::PTree *v20;

  if (a14 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a20);
  quasar::PTree::~PTree(v20);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Parse::toPtree(uint64_t a1@<X0>, uint64_t *a2@<X1>, quasar::PTree *a3@<X8>)
{
  quasar *v6;
  float v7;
  quasar *v8;
  float v9;
  std::string __p;
  int Type;
  std::string v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17[2];
  char v18;
  std::string *p_p;

  quasar::PTree::PTree(a3);
  std::string::basic_string[abi:ne180100]<0>(v17, "asr_candidate");
  quasar::corrective_reranking::ASRCandidate::toPtree((quasar::corrective_reranking::ASRCandidate *)a1, (quasar::PTree *)&Type);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "utterance");
  quasar::corrective_reranking::tokensWithRangesToPtree((uint64_t *)(a1 + 32), (uint64_t *)a1, (quasar::PTree *)&Type);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "outputs");
  quasar::PTree::PTree<std::string>((uint64_t)&Type, (uint64_t *)(a1 + 56));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v17, "weight");
  v7 = *(float *)(a1 + 80);
  Type = quasar::getType(v6, v7);
  std::to_string(&v12, v7);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  if (*(_BYTE *)(a1 + 112))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "target_range");
    quasar::corrective_reranking::TargetRange::toCodePoints((unsigned int **)(a1 + 88), a2, &__p);
    quasar::corrective_reranking::TargetRange::toPtree((quasar::corrective_reranking::TextRange **)&__p, (quasar::PTree *)&Type);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
    quasar::PTree::~PTree((quasar::PTree *)&Type);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(_QWORD *)(a1 + 128))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(a1 + 143))
  {
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "_assigned_payload");
  quasar::PTree::PTree(&Type, a1 + 120);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
LABEL_20:
  v8 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v17, "ranker_score");
  v9 = *(float *)(a1 + 144);
  Type = quasar::getType(v8, v9);
  std::to_string(&v12, v9);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "ranker_features");
  quasar::PTree::PTree<float>((uint64_t)&Type, (float **)(a1 + 152));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "intent");
  quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)a1, (uint64_t)&__p);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "target");
  quasar::corrective_reranking::Parse::getTargetWithRanges(a1, (uint64_t *)&__p);
  quasar::corrective_reranking::tokensWithRangesToPtree((uint64_t *)&__p, a2, (quasar::PTree *)&Type);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  p_p = &__p;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "payload");
  quasar::corrective_reranking::Parse::getPayload((quasar::corrective_reranking::Parse *)a1, &__p);
  quasar::PTree::PTree(&Type, &__p);
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "left_replacements");
  quasar::PTree::PTree<std::string>((uint64_t)&Type, (uint64_t *)(a1 + 184));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "right_replacements");
  quasar::PTree::PTree<std::string>((uint64_t)&Type, (uint64_t *)(a1 + 208));
  quasar::PTree::putChild((uint64_t)a3, (uint64_t)v17, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_1ADB19720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::PTree *v16;
  uint64_t v17;

  quasar::PTree::~PTree((quasar::PTree *)&a16);
  if (*(char *)(v17 - 57) < 0)
    operator delete(*(void **)(v17 - 80));
  quasar::PTree::~PTree(v16);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::tokensWithRangesToPtree(uint64_t *a1@<X0>, uint64_t *a2@<X1>, quasar::PTree *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unsigned int v12;
  int v13;
  int *v14;
  void *v15;
  _BYTE *v16;
  void *__p;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;

  quasar::corrective_reranking::getTokenRanges(a1, (char **)&v15);
  __p = 0;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = 0uLL;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 3);
  quasar::corrective_reranking::TargetRange::toCodePoints((unsigned int **)&__p, a2, &v23);
  v7 = v23;
  v6 = v24;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  if (__p)
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if ((a1[1] - *a1) >> 5 != (v6 - (uint64_t)v7) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"tokensWithRanges.size() == tokenRangesInCodePoints.size()", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v23);
  }
  quasar::PTree::PTree(a3);
  v8 = *a1;
  v14 = v7;
  if (a1[1] == *a1)
  {
    if (!v7)
      return;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = v7 + 1;
    do
    {
      quasar::PTree::PTree((quasar::PTree *)&v23);
      v12 = *(v11 - 1);
      LODWORD(__p) = quasar::getType((quasar *)v12);
      std::to_string(&v18, v12);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::addChild((quasar::PTree *)&v23, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      v13 = *v11;
      LODWORD(__p) = quasar::getType((quasar *)*v11);
      std::to_string(&v18, v13);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      quasar::PTree::addChild((quasar::PTree *)&v23, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      quasar::PTree::PTree((quasar::PTree *)&__p);
      quasar::PTree::PTree(&v15, v8 + v9);
      quasar::PTree::addChild((quasar::PTree *)&__p, (const quasar::PTree *)&v15);
      quasar::PTree::~PTree((quasar::PTree *)&v15);
      quasar::PTree::addChild((quasar::PTree *)&__p, (const quasar::PTree *)&v23);
      quasar::PTree::addChild(a3, (const quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&__p);
      quasar::PTree::~PTree((quasar::PTree *)&v23);
      ++v10;
      v8 = *a1;
      v11 += 2;
      v9 += 32;
    }
    while (v10 < (a1[1] - *a1) >> 5);
  }
  operator delete(v14);
}

void quasar::corrective_reranking::TargetRange::toCodePoints(unsigned int **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  std::vector<int>::pointer i;
  unint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  unsigned int *v13;
  char *v14;
  unint64_t v15;
  std::vector<int>::pointer v16;
  int v17;
  unint64_t v18;
  std::vector<int>::pointer v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *__p;
  char *v34;
  char *v35;
  std::vector<int> v36;

  if (*a1 == a1[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a3, 0, 0, 0);
    return;
  }
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  std::vector<int>::vector(&v36, v6 + 1);
  v7 = 0;
  v8 = 0;
  for (i = v36.__begin_; ; i[v7++] = v8 - 1)
  {
    v10 = *((unsigned __int8 *)a2 + 23);
    if (*((char *)a2 + 23) < 0)
      break;
    if (v7 >= v10)
      goto LABEL_18;
LABEL_9:
    if ((v10 & 0x80u) == 0)
      v11 = a2;
    else
      v11 = (uint64_t *)*a2;
    if ((*((_BYTE *)v11 + v7) & 0xC0) != 0x80)
      ++v8;
    if (!v8)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"numCodePoints > 0", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
  }
  if (a2[1] > v7)
    goto LABEL_9;
  v10 = a2[1];
LABEL_18:
  i[v10] = v8;
  __p = 0;
  v34 = 0;
  v35 = 0;
  v12 = *a1;
  v13 = a1[1];
  if (*a1 == v13)
  {
    v14 = 0;
    v32 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12;
      if ((v15 & 0x80000000) != 0)
      {
        v17 = 0;
      }
      else
      {
        v16 = v36.__end_ - 1;
        if (v15 < v36.__end_ - v36.__begin_)
          v16 = &v36.__begin_[v15];
        v17 = *v16;
      }
      v18 = v12[1] + v15;
      if ((v18 & 0x80000000) != 0)
      {
        v20 = 0;
      }
      else
      {
        if (v18 >= v36.__end_ - v36.__begin_)
          v19 = v36.__end_ - 1;
        else
          v19 = &v36.__begin_[v18];
        v20 = *v19;
      }
      v21 = v20 - v17;
      if (v14 >= v35)
      {
        v22 = (v14 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v23 = (v35 - (_BYTE *)__p) >> 2;
        if (v23 <= v22 + 1)
          v23 = v22 + 1;
        if ((unint64_t)(v35 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v35, v24);
        v27 = (int *)&v25[8 * v22];
        *v27 = v17;
        v27[1] = v21;
        v29 = (char *)__p;
        v28 = v34;
        v30 = (char *)v27;
        if (v34 != __p)
        {
          do
          {
            v31 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v28 != v29);
          v28 = (char *)__p;
        }
        v14 = (char *)(v27 + 2);
        __p = v30;
        v34 = (char *)(v27 + 2);
        v35 = &v25[8 * v26];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v14 = v17;
        *((_DWORD *)v14 + 1) = v21;
        v14 += 8;
      }
      v34 = v14;
      v12 += 2;
    }
    while (v12 != v13);
    v32 = __p;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a3, v32, (uint64_t)v14, (v14 - (_BYTE *)v32) >> 3);
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
  if (v36.__begin_)
  {
    v36.__end_ = v36.__begin_;
    operator delete(v36.__begin_);
  }
}

std::string *quasar::corrective_reranking::Parse::getIntent@<X0>(quasar::corrective_reranking::Parse *this@<X0>, uint64_t a2@<X8>)
{
  quasar::corrective_reranking::Parse *v4;
  std::string *result;
  std::string::value_type *v6;
  uint64_t v7;
  BOOL v8;
  std::string *v9;
  std::string *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  std::string *v14;
  const char *v15;
  const char *v17;

  v4 = (quasar::corrective_reranking::Parse *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "dictate");
  result = (std::string *)quasar::corrective_reranking::Parse::getCommandTokens(v4);
  v6 = &result->__r_.__value_.__s.__data_[16];
  while (1)
  {
    v6 = *(std::string::value_type **)v6;
    if (!v6)
      break;
    result = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((_QWORD *)this + 7), *((_QWORD *)this + 8), (unsigned __int8 **)v6 + 2);
    if (result != *((std::string **)this + 8))
    {
      result = std::string::operator=((std::string *)a2, (const std::string *)(v6 + 16));
      v7 = *(unsigned __int8 *)(a2 + 23);
      v8 = (v7 & 0x80u) != 0;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a2 + 8);
      if (v8)
        v9 = *(std::string **)a2;
      else
        v9 = (std::string *)a2;
      if (v7 >= 6)
      {
        v10 = (std::string *)((char *)v9 + v7);
        result = v9;
        while (1)
        {
          result = (std::string *)memchr(result, 105, v7 - 5);
          if (!result)
            break;
          if (LODWORD(result->__r_.__value_.__l.__data_) == 1702063721
            && WORD2(result->__r_.__value_.__r.__words[0]) == 29810)
          {
            if (result != v10 && (char *)result - (char *)v9 != -1)
            {
              v12 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [11],std::__identity>(*((unsigned __int8 **)this + 7), *((unsigned __int8 **)this + 8), "LEFTTARGET");
              v13 = (unsigned __int8 *)*((_QWORD *)this + 8);
              result = (std::string *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char [12],std::__identity>(*((unsigned __int8 **)this + 7), v13, "RIGHTTARGET");
              v14 = (std::string *)*((_QWORD *)this + 8);
              if (result != v14 || v12 != v13)
              {
                v15 = "insertbefore";
                if (result != v14 && v12 != v13)
                  v15 = "insertbetween";
                if (result == v14)
                  v17 = "insertafter";
                else
                  v17 = v15;
                result = (std::string *)MEMORY[0x1AF44C914](a2, v17);
              }
            }
            goto LABEL_31;
          }
          result = (std::string *)((char *)result + 1);
          v7 = (char *)v10 - (char *)result;
          if ((char *)v10 - (char *)result < 6)
            goto LABEL_31;
        }
      }
      break;
    }
  }
LABEL_31:
  if (*((_BYTE *)this + 112))
  {
    if (*((_QWORD *)this + 11) == *((_QWORD *)this + 12))
      return std::string::append((std::string *)a2, "All");
  }
  return result;
}

void sub_1ADB19FDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::corrective_reranking::Parse::getTargetWithRanges@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  quasar::corrective_reranking::Parse *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  std::string::size_type v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  std::string v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  _QWORD v39[5];
  std::string __p;
  std::string v41;
  std::string v42[9];
  uint64_t v43;

  v2 = (quasar::corrective_reranking::Parse *)this;
  v43 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 112) && *(_QWORD *)(this + 88) == *(_QWORD *)(this + 96))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return this;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "TARGET");
  std::unordered_set<std::string>::unordered_set((uint64_t)v39, (unsigned __int8 *)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::corrective_reranking::Parse::getIntent(v2, (uint64_t)&v37);
  if ((v38 & 0x80000000) == 0)
  {
    if (v38 != 11)
    {
      if (v38 != 12)
      {
        if (v38 == 13)
        {
          v4 = (uint64_t *)&v37;
          goto LABEL_24;
        }
        goto LABEL_49;
      }
      if ((_QWORD)v37 != 0x6562747265736E69 || DWORD2(v37) != 1701998438)
        goto LABEL_49;
      goto LABEL_40;
    }
    if ((_QWORD)v37 != 0x6661747265736E69 || *(_QWORD *)((char *)&v37 + 3) != 0x7265746661747265)
      goto LABEL_49;
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&__p, "LEFTTARGET");
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v39, &__p, &v41);
LABEL_47:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_49;
  }
  v5 = *((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1) == 11)
  {
    if (*(_QWORD *)v37 == 0x6661747265736E69 && *(_QWORD *)(v37 + 3) == 0x7265746661747265)
      goto LABEL_46;
    v5 = *((_QWORD *)&v37 + 1);
  }
  else if (*((_QWORD *)&v37 + 1) == 12
         && *(_QWORD *)v37 == 0x6562747265736E69
         && *(_DWORD *)(v37 + 8) == 1701998438)
  {
LABEL_40:
    std::string::basic_string[abi:ne180100]<0>(&__p, "RIGHTTARGET");
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v39, &__p, &v41);
    goto LABEL_47;
  }
  if (v5 == 13)
  {
    v4 = (uint64_t *)v37;
LABEL_24:
    v8 = *v4;
    v9 = *(uint64_t *)((char *)v4 + 5);
    if (v8 == 0x6562747265736E69 && v9 == 0x6E65657774656274)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "LEFTTARGET");
      std::string::basic_string[abi:ne180100]<0>(&v41, "RIGHTTARGET");
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v39, &__p, v42);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v41.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&__p + i * 8 + 24));
      }
    }
  }
LABEL_49:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v14 = *((_QWORD *)v2 + 7);
  v15 = *((_QWORD *)v2 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) != (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"outputs.size() == utterance.size()", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (v15 != v14)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *((_QWORD *)v2 + 4);
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v39, (unsigned __int8 *)(v14 + v16)))
      {
        v20 = (__int128 *)(v19 + v17);
        if (*(char *)(v19 + v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v19 + v17), *(_QWORD *)(v19 + v17 + 8));
        }
        else
        {
          v21 = *v20;
          v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
        }
        v36 = *((_QWORD *)v20 + 3);
        v22 = a2[1];
        v23 = a2[2];
        if (v22 >= v23)
        {
          v25 = (uint64_t)(v22 - *a2) >> 5;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - *a2;
          if (v27 >> 4 > v26)
            v26 = v27 >> 4;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
            v28 = 0x7FFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          v41.__r_.__value_.__l.__size_ = (std::string::size_type)(a2 + 2);
          v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a2 + 2), v28);
          v30 = (std::string::size_type)v29 + 32 * v25;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          __p.__r_.__value_.__l.__size_ = v30;
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v29 + 32 * v31;
          v32 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
          *(_OWORD *)v30 = v32;
          memset(&v35, 0, sizeof(v35));
          *(_QWORD *)(v30 + 24) = v36;
          __p.__r_.__value_.__r.__words[2] = v30 + 32;
          std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__swap_out_circular_buffer(a2, &__p);
          v33 = a2[1];
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&__p);
          v34 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
          a2[1] = v33;
          if (v34 < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
        }
        else
        {
          v24 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
          *(_QWORD *)(v22 + 16) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
          *(_OWORD *)v22 = v24;
          memset(&v35, 0, sizeof(v35));
          *(_QWORD *)(v22 + 24) = v36;
          a2[1] = v22 + 32;
        }
      }
      ++v18;
      v14 = *((_QWORD *)v2 + 7);
      v17 += 32;
      v16 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v2 + 8) - v14) >> 3) > v18);
  }
  if (v38 < 0)
    operator delete((void *)v37);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v39);
}

void sub_1ADB1A590(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB1A5C8);
}

void quasar::corrective_reranking::Parse::getPayload(quasar::corrective_reranking::Parse *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v4;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[5];
  void *__p[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (const std::string::value_type **)((char *)this + 120);
  if (*((char *)this + 143) < 0)
  {
    v5 = *((_QWORD *)this + 16);
    if (v5)
    {
      std::string::__init_copy_ctor_external(a2, *v4, v5);
      return;
    }
  }
  else if (*((_BYTE *)this + 143))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PAYLOAD");
  std::unordered_set<std::string>::unordered_set((uint64_t)v18, (unsigned __int8 *)__p, 1);
  if (v20 < 0)
    operator delete(__p[0]);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v6 = *((_QWORD *)this + 7);
  v7 = *((_QWORD *)this + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) != (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"outputs.size() == utterance.size()", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v7 == v6)
    goto LABEL_19;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *((_QWORD *)this + 4);
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v18, (unsigned __int8 *)(v6 + v8)))
    {
      v12 = (__int128 *)(v11 + v9);
      v13 = v16;
      if (v16 >= v17)
      {
        v14 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(&v15, v12);
      }
      else
      {
        std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>((uint64_t)&v15, v12);
        v14 = v13 + 32;
      }
      v16 = v14;
    }
    ++v10;
    v6 = *((_QWORD *)this + 7);
    v9 += 32;
    v8 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v6) >> 3) > v10);
  if (v15 == v16)
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  else
    quasar::pySlice<std::string>((uint64_t)this, *(_DWORD *)(v15 + 24), *(_DWORD *)(v16 - 4) + *(_DWORD *)(v16 - 8), a2);
  __p[0] = &v15;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v18);
}

void sub_1ADB1A834(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADB1A860);
}

_QWORD *quasar::corrective_reranking::TargetRange::TargetRange(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

void quasar::corrective_reranking::TargetRange::getTargetFromText(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  float v5;
  _QWORD v7[34];

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v3)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    if ((COERCE_INT(fabs((float)**(int **)a1)) - 0x800000) >> 24 >= 0x7F
      && COERCE_INT((float)**(int **)a1) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "std::isfinite(getStartIndex())");
      goto LABEL_16;
    }
    v5 = (float)(*(_DWORD *)(v3 - 4) + *(_DWORD *)(v3 - 8));
    if ((COERCE_INT(fabs(v5)) - 0x800000) >> 24 >= 0x7F && LODWORD(v5) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "std::isfinite(getEndIndex())");
LABEL_16:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
    quasar::pySlice<std::string>(a2, (int)(float)**(int **)a1, (int)v5, a3);
  }
}

void quasar::pySlice<std::string>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  std::string::size_type v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  __int32 v10;
  std::string::value_type *v11;
  unsigned __int32 v12;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    LODWORD(v6) = *(unsigned __int8 *)(a1 + 23);
    if (*(_BYTE *)(a1 + 23))
      goto LABEL_3;
LABEL_10:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_10;
LABEL_3:
  v7 = vdup_n_s32(v6);
  v8 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v7), (int32x2_t)__PAIR64__(a3, a2)), 0);
  v9 = vmin_s32(v8, v7);
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v10 = v9.i32[1] - v9.i32[0];
  if (v9.i32[1] > v9.i32[0])
  {
    v12 = v8.i32[0];
    std::string::reserve(a4, v10);
    if ((int)v6 >= (uint64_t)v12)
      v6 = v12;
    else
      v6 = (int)v6;
    do
    {
      v11 = (std::string::value_type *)std::string::at((const std::string *)a1, v6);
      std::string::push_back(a4, *v11);
      ++v6;
      --v10;
    }
    while (v10);
  }
}

void sub_1ADB1AA98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *quasar::corrective_reranking::Parse::Parse(std::string *this, uint64_t a2, __int128 **a3, uint64_t a4, __int128 *a5, uint64_t a6, std::string::value_type a7, __int128 **a8, float a9, float a10, __int128 **a11)
{
  __int128 v21;
  __int128 v22;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v21 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v21;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  quasar::corrective_reranking::tokenize(a2, 0, (__int128 *)&this[1].__r_.__value_.__r.__words[1]);
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(float *)&this[3].__r_.__value_.__r.__words[1] = a9;
  std::__optional_copy_base<quasar::corrective_reranking::TargetRange,false>::__optional_copy_base[abi:ne180100]((uint64_t)&this[3].__r_.__value_.__r.__words[2], a4);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v22 = *a5;
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v22;
  }
  this[6].__r_.__value_.__l.__size_ = 0;
  *(float *)&this[6].__r_.__value_.__l.__data_ = a10;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[6].__r_.__value_.__l.__size_, *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__s.__data_[8] = a7;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 184), *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a8[1] - (char *)*a8) >> 3));
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 208), *a11, a11[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a11[1] - (char *)*a11) >> 3));
  return this;
}

{
  return quasar::corrective_reranking::Parse::Parse(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1ADB1AC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  if (*(_BYTE *)(v2 + 112))
  {
    v5 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v2 + 96) = v5;
      operator delete(v5);
    }
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void sub_1ADB1ACEC()
{
  JUMPOUT(0x1ADB1ACC8);
}

void sub_1ADB1ACF4()
{
  JUMPOUT(0x1ADB1ACD4);
}

uint64_t quasar::corrective_reranking::Parse::getCommandTokens(quasar::corrective_reranking::Parse *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "delete");
    std::string::basic_string[abi:ne180100]<0>(v6, "insert");
    std::string::basic_string[abi:ne180100]<0>(v7, "insertbefore");
    std::string::basic_string[abi:ne180100]<0>(v8, "insertafter");
    std::string::basic_string[abi:ne180100]<0>(v9, "insertbetween");
    std::string::basic_string[abi:ne180100]<0>(v10, "replace");
    std::string::basic_string[abi:ne180100]<0>(v11, "select");
    std::string::basic_string[abi:ne180100]<0>(v12, "undo");
    std::string::basic_string[abi:ne180100]<0>(v13, "send");
    std::string::basic_string[abi:ne180100]<0>(v14, "stop");
    std::string::basic_string[abi:ne180100]<0>(v15, "redo");
    std::string::basic_string[abi:ne180100]<0>(v16, "deleteAll");
    std::string::basic_string[abi:ne180100]<0>(v17, "selectAll");
    std::string::basic_string[abi:ne180100]<0>(v18, "deleteTargetless");
    std::string::basic_string[abi:ne180100]<0>(v19, "capitalize");
    std::string::basic_string[abi:ne180100]<0>(v20, "lowercase");
    std::string::basic_string[abi:ne180100]<0>(v21, "uppercase");
    std::unordered_set<std::string>::unordered_set(v3, (unsigned __int8 *)v5, 17);
    v4 = 51;
    do
    {
      if (SHIBYTE(v5[v4 - 1]) < 0)
        operator delete((void *)v5[v4 - 3]);
      v4 -= 3;
    }
    while (v4 * 8);
    quasar::corrective_reranking::Parse::getCommandTokens(void)::set = v3;
  }
  return quasar::corrective_reranking::Parse::getCommandTokens(void)::set;
}

void sub_1ADB1AF64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 408;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0)
      operator delete(*(void **)(v2 + v4 - 24));
    v4 -= 24;
    if (!v4)
    {
      MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithTarget(quasar::corrective_reranking::Parse *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "delete");
    std::string::basic_string[abi:ne180100]<0>(v6, "insert");
    std::string::basic_string[abi:ne180100]<0>(v7, "insertbefore");
    std::string::basic_string[abi:ne180100]<0>(v8, "insertafter");
    std::string::basic_string[abi:ne180100]<0>(v9, "insertbetween");
    std::string::basic_string[abi:ne180100]<0>(v10, "replace");
    std::string::basic_string[abi:ne180100]<0>(v11, "select");
    std::string::basic_string[abi:ne180100]<0>(v12, "capitalize");
    std::string::basic_string[abi:ne180100]<0>(v13, "lowercase");
    std::string::basic_string[abi:ne180100]<0>(v14, "uppercase");
    std::unordered_set<std::string>::unordered_set(v3, (unsigned __int8 *)v5, 10);
    for (i = 0; i != -30; i -= 3)
    {
      if (SHIBYTE(v14[i + 2]) < 0)
        operator delete((void *)v14[i]);
    }
    quasar::corrective_reranking::Parse::getCommandsWithTarget(void)::set = v3;
  }
  return quasar::corrective_reranking::Parse::getCommandsWithTarget(void)::set;
}

void sub_1ADB1B1B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 239) < 0)
      operator delete(*(void **)(v2 + v4 + 216));
    v4 -= 24;
    if (v4 == -240)
    {
      MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithPayload(quasar::corrective_reranking::Parse *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "insert");
    std::string::basic_string[abi:ne180100]<0>(v6, "insertbefore");
    std::string::basic_string[abi:ne180100]<0>(v7, "insertafter");
    std::string::basic_string[abi:ne180100]<0>(v8, "insertbetween");
    std::string::basic_string[abi:ne180100]<0>(v9, "replace");
    std::unordered_set<std::string>::unordered_set(v3, (unsigned __int8 *)v5, 5);
    for (i = 0; i != -15; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
    quasar::corrective_reranking::Parse::getCommandsWithPayload(void)::set = v3;
  }
  return quasar::corrective_reranking::Parse::getCommandsWithPayload(void)::set;
}

void sub_1ADB1B38C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 119) < 0)
      operator delete(*(void **)(v2 + v4 + 96));
    v4 -= 24;
    if (v4 == -120)
    {
      MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(quasar::corrective_reranking::Parse *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "deleteAll");
    std::string::basic_string[abi:ne180100]<0>(v6, "selectAll");
    std::string::basic_string[abi:ne180100]<0>(v7, "deleteTargetless");
    std::unordered_set<std::string>::unordered_set(v3, (unsigned __int8 *)v5, 3);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v7[i + 2]) < 0)
        operator delete((void *)v7[i]);
    }
    quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(void)::set = v3;
  }
  return quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(void)::set;
}

void sub_1ADB1B53C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 71) < 0)
      operator delete(*(void **)(v2 + v4 + 48));
    v4 -= 24;
    if (v4 == -72)
    {
      MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(quasar::corrective_reranking::Parse *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "undo");
    std::string::basic_string[abi:ne180100]<0>(v6, "send");
    std::string::basic_string[abi:ne180100]<0>(v7, "stop");
    std::string::basic_string[abi:ne180100]<0>(v8, "redo");
    std::string::basic_string[abi:ne180100]<0>(v9, "select");
    std::string::basic_string[abi:ne180100]<0>(v10, "selectAll");
    std::string::basic_string[abi:ne180100]<0>(v11, "capitalize");
    std::string::basic_string[abi:ne180100]<0>(v12, "lowercase");
    std::string::basic_string[abi:ne180100]<0>(v13, "uppercase");
    std::unordered_set<std::string>::unordered_set(v3, (unsigned __int8 *)v5, 9);
    for (i = 0; i != -27; i -= 3)
    {
      if (SHIBYTE(v13[i + 2]) < 0)
        operator delete((void *)v13[i]);
    }
    quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(void)::set = v3;
  }
  return quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(void)::set;
}

void sub_1ADB1B778(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 215) < 0)
      operator delete(*(void **)(v2 + v4 + 192));
    v4 -= 24;
    if (v4 == -216)
    {
      MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

BOOL quasar::corrective_reranking::Parse::isEditCommand(quasar::corrective_reranking::Parse *this)
{
  _QWORD *CommandTokens;
  unsigned __int8 *v3;
  void *__p[2];
  char v6;

  CommandTokens = (_QWORD *)quasar::corrective_reranking::Parse::getCommandTokens(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandTokens, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 != 0;
}

BOOL quasar::corrective_reranking::Parse::isTargetExpectingCommand(quasar::corrective_reranking::Parse *this)
{
  _QWORD *CommandsWithTarget;
  unsigned __int8 *v3;
  void *__p[2];
  char v6;

  CommandsWithTarget = (_QWORD *)quasar::corrective_reranking::Parse::getCommandsWithTarget(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandsWithTarget, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 != 0;
}

BOOL quasar::corrective_reranking::Parse::isPayloadExpectingCommand(quasar::corrective_reranking::Parse *this)
{
  _QWORD *CommandsWithPayload;
  unsigned __int8 *v3;
  void *__p[2];
  char v6;

  CommandsWithPayload = (_QWORD *)quasar::corrective_reranking::Parse::getCommandsWithPayload(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandsWithPayload, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 != 0;
}

BOOL quasar::corrective_reranking::Parse::isIncomplete(quasar::corrective_reranking::Parse *this)
{
  _BOOL4 isTargetExpectingCommand;
  std::string::size_type size;
  _BOOL8 v4;
  std::string __p;
  uint64_t v7[3];

  isTargetExpectingCommand = quasar::corrective_reranking::Parse::isTargetExpectingCommand(this);
  if (isTargetExpectingCommand)
  {
    quasar::corrective_reranking::Parse::getTarget(this, v7);
    if (v7[0] == v7[1])
    {
      v4 = 1;
      goto LABEL_13;
    }
  }
  if (!quasar::corrective_reranking::Parse::isPayloadExpectingCommand(this))
  {
    v4 = 0;
    if (!isTargetExpectingCommand)
      return v4;
    goto LABEL_13;
  }
  quasar::corrective_reranking::Parse::getPayload(this, &__p);
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v4 = size == 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!isTargetExpectingCommand)
      return v4;
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (isTargetExpectingCommand)
  {
LABEL_13:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  return v4;
}

void sub_1ADB1B9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12)
{
  int v12;

  if (v12)
  {
    a9 = &a12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Parse::getTarget(quasar::corrective_reranking::Parse *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3[3];
  __int128 **v4;

  quasar::corrective_reranking::Parse::getTargetWithRanges((uint64_t)this, (uint64_t *)v3);
  quasar::corrective_reranking::getTokens(v3, a2);
  v4 = v3;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_1ADB1BA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL quasar::corrective_reranking::Parse::hasFullTextTarget(quasar::corrective_reranking::Parse *this)
{
  return *((_BYTE *)this + 112) && *((_QWORD *)this + 11) == *((_QWORD *)this + 12);
}

std::string *quasar::corrective_reranking::Parse::setPayload(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

BOOL quasar::corrective_reranking::Parse::isChangeInvisibleToTransformer(quasar::corrective_reranking::Parse *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  void *__p[2];
  char v6;

  v2 = (_QWORD *)quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange(this);
  quasar::corrective_reranking::Parse::getIntent(this, (uint64_t)__p);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 != 0;
}

void quasar::corrective_reranking::Parse::getTargetPrecedingFillerTokens(quasar::corrective_reranking::Parse *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v19;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _QWORD v26[34];
  char v27[9];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)this + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) != (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"outputs.size() == utterance.size()", 34);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  if (v4 != v3)
  {
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t *)(v3 + 24 * v6);
      v8 = *((unsigned __int8 *)v7 + 23);
      if ((*((char *)v7 + 23) & 0x80000000) == 0)
        break;
      v10 = (_DWORD *)*v7;
      v9 = v7[1];
      if (v9 != 4)
        goto LABEL_12;
      if (*v10 == 1701736270)
        goto LABEL_10;
LABEL_23:
      std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](a2);
LABEL_24:
      ++v6;
      v3 = *((_QWORD *)this + 7);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v3) >> 3) <= v6)
        return;
    }
    if (v8 == 4 && *(_DWORD *)v7 == 1701736270)
    {
LABEL_10:
      v11 = (__int128 *)(*((_QWORD *)this + 4) + 32 * v6);
      v12 = a2[1];
      if (v12 >= a2[2])
      {
        v13 = std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__emplace_back_slow_path<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>(a2, v11);
      }
      else
      {
        std::vector<std::pair<std::string,quasar::corrective_reranking::TextRange>>::__construct_one_at_end[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> const&>((uint64_t)a2, v11);
        v13 = v12 + 32;
      }
      a2[1] = v13;
      goto LABEL_24;
    }
    v9 = *((unsigned __int8 *)v7 + 23);
    v10 = v7;
LABEL_12:
    if (v9 >= 6)
    {
      v14 = (char *)v10 + v9;
      v15 = v10;
      while (1)
      {
        v16 = (char *)memchr(v15, 84, v9 - 5);
        if (!v16)
          goto LABEL_23;
        if (*(_DWORD *)v16 == 1196573012 && *((_WORD *)v16 + 2) == 21573)
          break;
        v15 = v16 + 1;
        v9 = v14 - (_BYTE *)v15;
        if (v14 - (_BYTE *)v15 < 6)
          goto LABEL_23;
      }
      if (v16 == v14 || v16 - (char *)v10 == -1)
        goto LABEL_23;
      if ((v8 & 0x80) != 0)
      {
        v19 = v7[1];
        if (v19 != 10)
        {
          if (v19 != 11)
            return;
          if (*(_QWORD *)*v7 != 0x5241545448474952 || *(_QWORD *)(*v7 + 3) != 0x5445475241545448)
            return;
          goto LABEL_50;
        }
        v7 = (uint64_t *)*v7;
      }
      else if (v8 != 10)
      {
        if (v8 != 11)
          return;
        if (*v7 != 0x5241545448474952 || *(uint64_t *)((char *)v7 + 3) != 0x5445475241545448)
          return;
LABEL_50:
        v22 = (__int128 *)a2[1];
        if ((__int128 *)*a2 != v22)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *,std::pair<std::string,quasar::corrective_reranking::TextRange> *>((uint64_t)v27, (__int128 *)(*a2 + 32), v22, *a2);
          v24 = v23;
          for (i = a2[1]; i != v24; i -= 32)
          {
            if (*(char *)(i - 9) < 0)
              operator delete(*(void **)(i - 32));
          }
          a2[1] = v24;
        }
        return;
      }
      if (*v7 != 0x475241545446454CLL || *((_WORD *)v7 + 4) != 21573)
        return;
      goto LABEL_50;
    }
    goto LABEL_23;
  }
}

uint64_t quasar::corrective_reranking::TextEdit::getArgumentlessCommands(quasar::corrective_reranking::TextEdit *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(v5, "undo");
    std::string::basic_string[abi:ne180100]<0>(v6, "send");
    std::string::basic_string[abi:ne180100]<0>(v7, "stop");
    std::string::basic_string[abi:ne180100]<0>(v8, "redo");
    std::unordered_set<std::string>::unordered_set(v3, (unsigned __int8 *)v5, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0)
        operator delete((void *)v8[i]);
    }
    quasar::corrective_reranking::TextEdit::getArgumentlessCommands(void)::set = v3;
  }
  return quasar::corrective_reranking::TextEdit::getArgumentlessCommands(void)::set;
}

void sub_1ADB1BF38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 95) < 0)
      operator delete(*(void **)(v2 + v4 + 72));
    v4 -= 24;
    if (v4 == -96)
    {
      MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

quasar::corrective_reranking::TextEdit *quasar::corrective_reranking::TextEdit::TextEdit(quasar::corrective_reranking::TextEdit *this, const quasar::corrective_reranking::Parse *a2)
{
  std::vector<int> *v4;
  void **v5;
  std::vector<std::wstring> *v6;
  std::vector<std::wstring> *v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  void *v14;
  int v15;
  quasar::corrective_reranking::TextEdit *v16;
  int v17;
  int v18;
  std::string __p;

  *((_BYTE *)this + 24) = 0;
  v4 = (std::vector<int> *)((char *)this + 24);
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (void **)((char *)this + 56);
  *((_BYTE *)this + 48) = 0;
  v6 = (std::vector<std::wstring> *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  v7 = (std::vector<std::wstring> *)((char *)this + 104);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v9 = (int *)*((_QWORD *)a2 + 11);
    v8 = (int *)*((_QWORD *)a2 + 12);
    if (v9 == v8)
    {
      memset(&__p, 0, sizeof(__p));
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&__p, 0, 0, 0);
      std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(v4, (__n128 *)&__p);
      v14 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_9;
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    }
    else
    {
      v10 = *v9;
      v11 = *(v8 - 2);
      v12 = *(v8 - 1);
      v13 = operator new(8uLL);
      *v13 = (int)(float)v10 | ((unint64_t)(int)(float)((float)(v12 + v11)
                                                                                         - (float)v10) << 32);
      memset(&__p, 0, sizeof(__p));
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&__p, v13, (uint64_t)(v13 + 1), 1uLL);
      std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(v4, (__n128 *)&__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v14 = v13;
    }
    operator delete(v14);
  }
LABEL_9:
  quasar::corrective_reranking::Parse::getIntent(a2, (uint64_t)&__p);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(std::string *)this = __p;
  v15 = *((char *)this + 23);
  if (v15 < 0)
  {
    if (*((_QWORD *)this + 1) != 7)
    {
LABEL_20:
      quasar::corrective_reranking::Parse::getPayload(a2, &__p);
      goto LABEL_21;
    }
    v16 = *(quasar::corrective_reranking::TextEdit **)this;
  }
  else
  {
    v16 = this;
    if (v15 != 7)
      goto LABEL_20;
  }
  v17 = *(_DWORD *)v16;
  v18 = *(_DWORD *)((char *)v16 + 3);
  if (v17 != 1952672100 || v18 != 1702125940)
    goto LABEL_20;
  quasar::corrective_reranking::detokenize((__int128 **)a2 + 4, &__p);
LABEL_21:
  if (*((char *)this + 79) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __p;
  if (v6 != (std::vector<std::wstring> *)((char *)a2 + 184))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, *((std::string **)a2 + 23), *((__int128 **)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3));
  if (v7 != (std::vector<std::wstring> *)((char *)a2 + 208))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, *((std::string **)a2 + 26), *((__int128 **)a2 + 27), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3));
  return this;
}

void sub_1ADB1C214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void **v13;
  void *v15;

  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v11 + 79) < 0)
    operator delete(*v13);
  if (*(_BYTE *)(v11 + 48))
  {
    v15 = *v12;
    if (*v12)
    {
      *(_QWORD *)(v11 + 32) = v15;
      operator delete(v15);
    }
  }
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  _Unwind_Resume(a1);
}

std::vector<int> *std::optional<quasar::corrective_reranking::TargetRange>::operator=[abi:ne180100]<quasar::corrective_reranking::TargetRange,void>(std::vector<int> *this, __n128 *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    std::vector<int>::__move_assign((uint64_t)this, a2);
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *(std::vector<int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

_QWORD *std::vector<quasar::corrective_reranking::TextRange>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1ADB1C37C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::onText(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *ArgumentlessCommands;
  __int128 v9;
  uint64_t v10;
  void *__p[3];
  std::string __str;
  std::string v13;
  void *v14;
  char v15;

  if (!*(_BYTE *)(a1 + 48)
    || (ArgumentlessCommands = (_QWORD *)quasar::corrective_reranking::TextEdit::getArgumentlessCommands((quasar::corrective_reranking::TextEdit *)a1),
        std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(ArgumentlessCommands, (unsigned __int8 *)a1)))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    }
    return;
  }
  quasar::corrective_reranking::TextEdit::textSurroundingEditLocation(a1, (__int128 *)a2, &v13);
  quasar::corrective_reranking::TextEdit::adjustedPayload((unsigned __int8 *)a1, a2, 0, &__str);
  quasar::corrective_reranking::TextEdit::adjustedTargetRange((_QWORD *)a1, a2, (int **)__p);
  quasar::corrective_reranking::TextEdit::assembleEditComponents(&__str, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v14, __p, a4);
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88))
  {
    if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 112) || (a3 & 1) == 0)
      goto LABEL_14;
LABEL_11:
    quasar::corrective_reranking::TextEdit::applyAdjacentEdits(a1, a4, (uint64_t)&v9);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v9;
    *(_QWORD *)(a4 + 16) = v10;
    goto LABEL_14;
  }
  if (a3)
    goto LABEL_11;
LABEL_14:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1ADB1C514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  if (__p)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::pair<std::string,std::string>::~pair((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::TextEdit::textSurroundingEditLocation(uint64_t a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *ArgumentlessCommands;
  std::string v7;
  std::string v8;
  void *__p;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 48)
    && (ArgumentlessCommands = (_QWORD *)quasar::corrective_reranking::TextEdit::getArgumentlessCommands((quasar::corrective_reranking::TextEdit *)a1),
        !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(ArgumentlessCommands, (unsigned __int8 *)a1)))
  {
    quasar::corrective_reranking::TextEdit::adjustedTargetRange((_QWORD *)a1, (uint64_t)a2, (int **)&__p);
    if (__p == v10)
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(a3, a2, "");
    }
    else
    {
      quasar::pySlice<std::string>((uint64_t)a2, 0, (int)(float)*(int *)__p, &v8);
      quasar::pySlice<std::string>((uint64_t)a2, (int)(float)((float)((float)(*(v10 - 1) + *(v10 - 2)) - (float)*(int *)__p) + (float)*(int *)__p), 0x7FFFFFFFu, &v7);
      *a3 = v8;
      a3[1] = v7;
    }
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(a3, a2, "");
  }
}

void sub_1ADB1C694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::adjustedPayload(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  int v8;
  uint64_t v10;
  unsigned __int8 *v16;
  uint64_t v21;
  int v22;
  quasar::corrective_reranking::TextEdit *v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  int isPunctuation;
  void **v30;
  std::string *v31;
  std::string::size_type v32;
  const char *v33;
  std::string *p_exception_object;
  std::string::size_type size;
  std::string *v36;
  std::string::size_type v37;
  _QWORD *ArgumentlessCommands;
  std::string exception_object;
  std::string __p[11];
  std::string v41;
  std::string::value_type *v42;
  std::string::size_type v43;
  uint64_t v44;
  const void *v45[2];
  uint64_t v46;

  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  if ((char)a1[79] < 0)
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)a1 + 7), *((_QWORD *)a1 + 8));
  else
    v41 = *(std::string *)(a1 + 56);
  if (((char)a1[23] & 0x80000000) == 0)
  {
    v8 = a1[23];
    switch(a1[23])
    {
      case 7u:
        if (*(_DWORD *)a1 != 1952672100 || *(_DWORD *)(a1 + 3) != 1702125940)
          goto LABEL_69;
        goto LABEL_87;
      case 9u:
        goto LABEL_60;
      case 0xAu:
        goto LABEL_55;
      case 0xBu:
        goto LABEL_49;
      case 0xCu:
        if (*(_QWORD *)a1 == 0x6562747265736E69 && *((_DWORD *)a1 + 2) == 1701998438)
          goto LABEL_96;
        if (v8 == 9)
          goto LABEL_60;
        if (v8 == 10)
          goto LABEL_55;
        if (v8 != 11)
          goto LABEL_69;
LABEL_49:
        if (*(_QWORD *)a1 == 0x6661747265736E69 && *(_QWORD *)(a1 + 3) == 0x7265746661747265)
          goto LABEL_87;
        if (v8 == 9)
          goto LABEL_60;
        if (v8 != 10)
          goto LABEL_69;
LABEL_55:
        if (*(_QWORD *)a1 == 0x696C617469706163 && *((_WORD *)a1 + 4) == 25978)
          goto LABEL_101;
        if (v8 != 9)
          goto LABEL_69;
LABEL_60:
        if (*(_QWORD *)a1 == 0x7361637265776F6CLL && a1[8] == 101)
          goto LABEL_88;
        v16 = a1;
        if (v8 == 9)
          goto LABEL_65;
        goto LABEL_69;
      default:
        goto LABEL_69;
    }
  }
  v10 = *((_QWORD *)a1 + 1);
  if (v10 == 7 && **(_DWORD **)a1 == 1952672100 && *(_DWORD *)(*(_QWORD *)a1 + 3) == 1702125940)
    goto LABEL_87;
  if (v10 == 12)
  {
    if (**(_QWORD **)a1 == 0x6562747265736E69 && *(_DWORD *)(*(_QWORD *)a1 + 8) == 1701998438)
    {
LABEL_96:
      isPunctuation = quasar::corrective_reranking::isPunctuation((char *)&v41);
      v30 = (void **)&v42;
      goto LABEL_97;
    }
    v10 = *((_QWORD *)a1 + 1);
  }
  if (v10 != 11)
    goto LABEL_29;
  if (**(_QWORD **)a1 == 0x6661747265736E69 && *(_QWORD *)(*(_QWORD *)a1 + 3) == 0x7265746661747265)
  {
LABEL_87:
    isPunctuation = quasar::corrective_reranking::isPunctuation((char *)&v41);
    v30 = (void **)v45;
LABEL_97:
    if (isPunctuation)
      v33 = "";
    else
      v33 = " ";
    v24 = (quasar::corrective_reranking::TextEdit *)MEMORY[0x1AF44C914](v30, v33);
    goto LABEL_120;
  }
  v10 = *((_QWORD *)a1 + 1);
LABEL_29:
  if (v10 == 10)
  {
    if (**(_QWORD **)a1 == 0x696C617469706163 && *(_WORD *)(*(_QWORD *)a1 + 8) == 25978)
    {
LABEL_101:
      if (!a1[48])
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, &exception_object);
      if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_exception_object = &exception_object;
      else
        p_exception_object = (std::string *)exception_object.__r_.__value_.__r.__words[0];
      if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(exception_object.__r_.__value_.__r.__words[2]);
      else
        size = exception_object.__r_.__value_.__l.__size_;
      quasar::utf8::convertToTitleCaseOrEmpty((char *)p_exception_object, size, __p);
      goto LABEL_117;
    }
    v10 = *((_QWORD *)a1 + 1);
  }
  if (v10 != 9)
    goto LABEL_69;
  if (**(_QWORD **)a1 == 0x7361637265776F6CLL && *(_BYTE *)(*(_QWORD *)a1 + 8) == 101)
  {
LABEL_88:
    if (!a1[48])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, &exception_object);
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &exception_object;
    else
      v31 = (std::string *)exception_object.__r_.__value_.__r.__words[0];
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(exception_object.__r_.__value_.__r.__words[2]);
    else
      v32 = exception_object.__r_.__value_.__l.__size_;
    quasar::utf8::convertToLowerCaseOrEmpty((char *)v31, v32, __p);
  }
  else
  {
    if (*((_QWORD *)a1 + 1) != 9)
      goto LABEL_69;
    v16 = *(unsigned __int8 **)a1;
LABEL_65:
    v21 = *(_QWORD *)v16;
    v22 = v16[8];
    if (v21 != 0x7361637265707075 || v22 != 101)
    {
LABEL_69:
      std::string::basic_string[abi:ne180100]<0>(__p, "select");
      v24 = (quasar::corrective_reranking::TextEdit *)quasar::startsWith(a1, (unsigned __int8 *)__p);
      v25 = (int)v24;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!v25)
          goto LABEL_120;
      }
      else if (!(_DWORD)v24)
      {
        goto LABEL_120;
      }
      if (!a1[48])
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, __p);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v41 = __p[0];
      if (a3)
        goto LABEL_121;
      goto LABEL_77;
    }
    if (!a1[48])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"targetRange", 11);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)(a1 + 24), a2, &exception_object);
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &exception_object;
    else
      v36 = (std::string *)exception_object.__r_.__value_.__r.__words[0];
    if ((exception_object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(exception_object.__r_.__value_.__r.__words[2]);
    else
      v37 = exception_object.__r_.__value_.__l.__size_;
    quasar::utf8::convertToUpperCaseOrEmpty((char *)v36, v37, __p);
  }
LABEL_117:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v41 = __p[0];
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_120:
    if (a3)
      goto LABEL_121;
    goto LABEL_77;
  }
  operator delete(exception_object.__r_.__value_.__l.__data_);
  if (a3)
  {
LABEL_121:
    if (a1[48]
      && (ArgumentlessCommands = (_QWORD *)quasar::corrective_reranking::TextEdit::getArgumentlessCommands(v24),
          !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(ArgumentlessCommands, a1)))
    {
      quasar::corrective_reranking::TextEdit::adjustedTargetRange(a1, a2, (int **)__p);
      quasar::corrective_reranking::TargetRange::getTargetFromText((uint64_t)__p, a2, &exception_object);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v41 = exception_object;
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      MEMORY[0x1AF44C914](&v41, "");
    }
    *a4 = v41;
    goto LABEL_125;
  }
LABEL_77:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v45, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)__p);
  if (v44 >= 0)
    v26 = (const std::string::value_type *)&v42;
  else
    v26 = v42;
  if (v44 >= 0)
    v27 = HIBYTE(v44);
  else
    v27 = v43;
  v28 = std::string::append(__p, v26, v27);
  *a4 = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
LABEL_125:
  if (SHIBYTE(v44) < 0)
    operator delete(v42);
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45[0]);
}

void sub_1ADB1CE00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TextEdit::adjustedTargetRange(_QWORD *a1@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  int v6;
  _QWORD *v7;
  uint64_t v9;
  int v15;
  int v16;
  uint64_t v18;
  int *v19;
  int *v20;
  float v21;
  float v23;
  int *v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  float v29;
  BOOL v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  int *v36;
  void *v37;
  int v40;
  int *v41;
  float v42;
  int v43;
  int *v44;
  void *__p;
  _BYTE *v46;
  __int128 v47;
  int *v48;
  _DWORD v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a1 + 48))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v47, "targetRange");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(a3, (const void *)a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 3);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 6:
        goto LABEL_40;
      case 7:
        if (*(_DWORD *)a1 == 1952672100 && *(_DWORD *)((char *)a1 + 3) == 1702125940)
          goto LABEL_69;
        return;
      case 0xB:
        goto LABEL_35;
      case 0xC:
        if (*a1 == 0x6562747265736E69 && *((_DWORD *)a1 + 2) == 1701998438)
          goto LABEL_55;
        v7 = a1;
        if (v6 == 6)
          goto LABEL_40;
        if (v6 != 11)
          return;
LABEL_35:
        if (*a1 == 0x6661747265736E69 && *(_QWORD *)((char *)a1 + 3) == 0x7265746661747265)
          goto LABEL_62;
        v7 = a1;
        if (v6 == 6)
          goto LABEL_40;
        return;
      default:
        return;
    }
  }
  v9 = a1[1];
  if (v9 == 7 && *(_DWORD *)*a1 == 1952672100 && *(_DWORD *)(*a1 + 3) == 1702125940)
  {
LABEL_69:
    v32 = *(unsigned __int8 *)(a2 + 23);
    v33 = *(_QWORD *)(a2 + 8);
    v34 = operator new(8uLL);
    v31 = v34;
    if ((v32 & 0x80u) == 0)
      v35 = v32;
    else
      v35 = v33;
    *v34 = v35;
    v48 = 0;
    v47 = 0uLL;
    std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v34, (uint64_t)(v34 + 1), 1uLL);
    goto LABEL_76;
  }
  if (v9 == 12)
  {
    if (*(_QWORD *)*a1 == 0x6562747265736E69 && *(_DWORD *)(*a1 + 8) == 1701998438)
    {
LABEL_55:
      v24 = (int *)a1[3];
      if (v24 == (int *)a1[4])
      {
        v27 = 0;
      }
      else
      {
        v25 = (float)*v24;
        if ((COERCE_INT(fabs(v25)) - 0x800000) >> 24 >= 0x7F && LODWORD(v25) != 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getStartIndex())", 43);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
        }
        v27 = (int)v25;
      }
      v31 = operator new(8uLL);
      *v31 = v27;
      v48 = 0;
      v47 = 0uLL;
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v31, (uint64_t)(v31 + 1), 1uLL);
      goto LABEL_76;
    }
    v9 = a1[1];
  }
  if (v9 == 11)
  {
    if (*(_QWORD *)*a1 == 0x6661747265736E69 && *(_QWORD *)(*a1 + 3) == 0x7265746661747265)
    {
LABEL_62:
      v28 = a1[4];
      if (a1[3] == v28
        || ((v29 = (float)(*(_DWORD *)(v28 - 4) + *(_DWORD *)(v28 - 8)),
             (COERCE_INT(fabs(v29)) - 0x800000) >> 24 >= 0x7F)
          ? (v30 = LODWORD(v29) == 0)
          : (v30 = 1),
            !v30))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getEndIndex())", 41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
      }
      v31 = operator new(8uLL);
      *v31 = (int)v29;
      v48 = 0;
      v47 = 0uLL;
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v31, (uint64_t)(v31 + 1), 1uLL);
      goto LABEL_76;
    }
    v9 = a1[1];
  }
  if (v9 == 6)
  {
    v7 = (_QWORD *)*a1;
LABEL_40:
    v15 = *(_DWORD *)v7;
    v16 = *((unsigned __int16 *)v7 + 2);
    if (v15 == 1701602660 && v16 == 25972)
    {
      v18 = *(unsigned __int8 *)(a2 + 23);
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(a2 + 8);
      if (v18)
      {
        v20 = (int *)a1[3];
        v19 = (int *)a1[4];
        if (v20 == v19)
        {
          v23 = INFINITY;
        }
        else
        {
          v21 = (float)*v20;
          if ((COERCE_INT(fabs(v21)) - 0x800000) >> 24 >= 0x7F && LODWORD(v21) != 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getStartIndex())", 43);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
          }
          v23 = (float)(*(v19 - 1) + *(v19 - 2)) - v21;
        }
        if (((LODWORD(v23) & 0x7FFFFFFFu) - 0x800000) >> 24 >= 0x7F
          && (LODWORD(v23) & 0x7FFFFFFFu) - 1 >= 0x7FFFFF
          && LODWORD(v23) != 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"std::isfinite(targetRange->getLength())", 39);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v47);
        }
        if (*a3 == a3[1])
          v40 = -1;
        else
          v40 = (int)(float)**a3 - 1;
        if (*std::string::at((const std::string *)a2, v40 & ~(v40 >> 31)) != 32)
          return;
        v41 = a3[1];
        if (*a3 == v41)
        {
          v43 = -1;
        }
        else
        {
          v42 = (float)**a3;
          v43 = (int)(float)(v42 + -1.0);
          LODWORD(v41) = (int)(float)((float)((float)(*(v41 - 1) + *(v41 - 2)) - v42) + 1.0);
        }
        v49[0] = v43;
        v49[1] = (_DWORD)v41;
        std::vector<quasar::corrective_reranking::TextRange>::vector[abi:ne180100](&__p, v49, 1uLL);
        v47 = 0uLL;
        v48 = 0;
        std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, __p, (uint64_t)v46, (v46 - (_BYTE *)__p) >> 3);
        v44 = *a3;
        if (*a3)
        {
          a3[1] = v44;
          operator delete(v44);
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
        }
        *(_OWORD *)a3 = v47;
        a3[2] = v48;
        v48 = 0;
        v47 = 0uLL;
        v37 = __p;
        if (!__p)
          return;
        v46 = __p;
LABEL_79:
        operator delete(v37);
        return;
      }
      v31 = operator new(8uLL);
      *v31 = 0;
      v48 = 0;
      v47 = 0uLL;
      std::vector<quasar::corrective_reranking::TextRange>::__init_with_size[abi:ne180100]<quasar::corrective_reranking::TextRange*,quasar::corrective_reranking::TextRange*>(&v47, v31, (uint64_t)(v31 + 1), 1uLL);
LABEL_76:
      v36 = *a3;
      if (*a3)
      {
        a3[1] = v36;
        operator delete(v36);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      *(_OWORD *)a3 = v47;
      a3[2] = v48;
      v48 = 0;
      v47 = 0uLL;
      v37 = v31;
      goto LABEL_79;
    }
  }
}

