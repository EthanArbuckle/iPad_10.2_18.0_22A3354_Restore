void sub_1ADE39564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;

  v37 = *(_QWORD *)(v35 - 112);
  if (v37)
    MEMORY[0x1AF44D160](v37, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void MEModel::_adapt<double>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *DataFrom;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  float **v13;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  double v23;

  MEModel::modifyCounts<double>(a1, a2);
  DataFrom = MEModel::createDataFromCounts<double>(a1, a2);
  hmaxent::model::init_prior_params(*(uint64_t ****)(a1 + 184));
  v9 = *(_QWORD *)(a1 + 184);
  v10 = *(_QWORD *)(v9 + 120);
  v11 = *(void **)v10;
  v12 = *(_QWORD *)(v10 + 8) - *(_QWORD *)v10;
  if (v12 >= 1)
    bzero(v11, 8 * (((unint64_t)v12 >> 3) - ((unint64_t)v12 > 7)) + 8);
  v13 = (float **)DataFrom[1];
  v14 = *v13;
  v15 = v13[1];
  if (v14 == v15)
  {
    v18 = 0.0;
    v23 = a4 * 0.0;
  }
  else
  {
    v17 = *v14;
    v16 = v14 + 1;
    v18 = v17;
    if (v16 != v15)
    {
      v19 = v16;
      v20 = v18;
      do
      {
        v21 = *v19++;
        v20 = v20 + v21;
      }
      while (v19 != v15);
      *(double *)(v9 + 56) = v20 * a4;
      while (v16 != v15)
      {
        v22 = *v16++;
        v18 = v18 + v22;
      }
LABEL_13:
      *(double *)(v9 + 64) = a3 / v18;
      *(_DWORD *)(v9 + 136) = *(_DWORD *)(a1 + 232);
      hmaxent::model::fit();
    }
    v23 = v18 * a4;
  }
  *(double *)(v9 + 56) = v23;
  goto LABEL_13;
}

uint64_t sub_1ADE397B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  const std::locale::facet *v3;
  std::locale v5;
  int v6;

  if (v1)
    MEMORY[0x1AF44D190](v1, 0x20C40960023A9);
  if (!*(_BYTE *)(v0 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v0 + 12) >= 2u))
  {
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
    v3 = std::locale::use_facet(&v5, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v5);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v0 + 208, *(_DWORD *)(v0 + 152), &v5);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((_QWORD *)(v0 + 192), &v5);
  *(_DWORD *)(v0 + 200) = v6;
  Trie<unsigned int,unsigned int>::~Trie(&v5);
  return 1;
}

void sub_1ADE398AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

_QWORD *hmaxent::model::init_prior_params(uint64_t ***this)
{
  uint64_t **v2;
  _QWORD *result;

  v2 = (uint64_t **)operator new();
  result = std::valarray<double>::valarray(v2, this[15]);
  this[16] = v2;
  return result;
}

void sub_1ADE39914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void MEModel::_adapt<unsigned long>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD *DataFrom;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  float **v13;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  double v23;

  MEModel::modifyCounts<unsigned long>(a1, a2);
  DataFrom = MEModel::createDataFromCounts<unsigned long>(a1, a2);
  hmaxent::model::init_prior_params(*(uint64_t ****)(a1 + 184));
  v9 = *(_QWORD *)(a1 + 184);
  v10 = *(_QWORD *)(v9 + 120);
  v11 = *(void **)v10;
  v12 = *(_QWORD *)(v10 + 8) - *(_QWORD *)v10;
  if (v12 >= 1)
    bzero(v11, 8 * (((unint64_t)v12 >> 3) - ((unint64_t)v12 > 7)) + 8);
  v13 = (float **)DataFrom[1];
  v14 = *v13;
  v15 = v13[1];
  if (v14 == v15)
  {
    v18 = 0.0;
    v23 = a4 * 0.0;
  }
  else
  {
    v17 = *v14;
    v16 = v14 + 1;
    v18 = v17;
    if (v16 != v15)
    {
      v19 = v16;
      v20 = v18;
      do
      {
        v21 = *v19++;
        v20 = v20 + v21;
      }
      while (v19 != v15);
      *(double *)(v9 + 56) = v20 * a4;
      while (v16 != v15)
      {
        v22 = *v16++;
        v18 = v18 + v22;
      }
LABEL_13:
      *(double *)(v9 + 64) = a3 / v18;
      *(_DWORD *)(v9 + 136) = *(_DWORD *)(a1 + 232);
      hmaxent::model::fit();
    }
    v23 = v18 * a4;
  }
  *(double *)(v9 + 56) = v23;
  goto LABEL_13;
}

uint64_t sub_1ADE39A40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  const std::locale::facet *v3;
  std::locale v5;
  int v6;

  if (v1)
    MEMORY[0x1AF44D190](v1, 0x20C40960023A9);
  if (!*(_BYTE *)(v0 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(v0 + 12) >= 2u))
  {
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Creating reverse context index...", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
    v3 = std::locale::use_facet(&v5, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v5);
    std::ostream::put();
    std::ostream::flush();
  }
  reverseTrie(v0 + 208, *(_DWORD *)(v0 + 152), &v5);
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::operator=((_QWORD *)(v0 + 192), &v5);
  *(_DWORD *)(v0 + 200) = v6;
  Trie<unsigned int,unsigned int>::~Trie(&v5);
  return 1;
}

void sub_1ADE39B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncDecoder::SyncDecoder(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = off_1E5D34AE0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(_BYTE *)(a1 + 32) = 0;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 36));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1ADE39BD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void quasar::SyncDecoder::init(quasar::SyncDecoder *this, quasar::SystemConfig *a2)
{
  uint64_t *ModelLoaderPtr;
  size_t v5;
  std::string *p_p;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::string __p;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[10];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (*((_BYTE *)this + 32))
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    memset(v24, 0, sizeof(v24));
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Coding error: SyncDecoder ", 26);
    v11 = *((_QWORD *)this + 1);
    v10 = (char *)this + 8;
    v9 = v11;
    v12 = v10[23];
    if (v12 >= 0)
      v13 = (uint64_t)v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = v10[23];
    else
      v14 = *((_QWORD *)v10 + 1);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " has already been initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v17);
  }
  *(_QWORD *)((char *)this + 36) = quasar::SystemConfig::getConfigFileVersion(a2);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = (unint64_t)&v20 + 8;
  v22 = 0uLL;
  *(_QWORD *)&v21 = 0;
  *((_QWORD *)&v21 + 1) = &v22;
  v23 = (unint64_t)&v23 + 8;
  memset(v24, 0, sizeof(v24));
  *(_QWORD *)&v25 = (char *)&v25 + 8;
  *((_QWORD *)&v25 + 1) = 0;
  *(_QWORD *)&v26 = 0;
  v27 = 0uLL;
  *((_QWORD *)&v26 + 1) = &v27;
  *((_QWORD *)&v28 + 1) = 0;
  *(_QWORD *)&v29 = 0;
  *(_QWORD *)&v28 = (char *)&v28 + 8;
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)this + 6, ModelLoaderPtr);
  if (*((char *)this + 31) >= 0)
    v5 = *((unsigned __int8 *)this + 31);
  else
    v5 = *((_QWORD *)this + 2);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*((char *)this + 31) >= 0)
      v7 = (char *)this + 8;
    else
      v7 = (char *)*((_QWORD *)this + 1);
    memmove(p_p, v7, v5);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v5) = 46;
  quasar::SystemConfig::setPrefix((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(quasar::SyncDecoder *, quasar::SystemConfig *))(*(_QWORD *)this + 40))(this, a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)this + 8, 0, 1);
  (*(void (**)(quasar::SyncDecoder *))(*(_QWORD *)this + 32))(this);
  *((_BYTE *)this + 32) = 1;
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)&v17);
}

void sub_1ADE39E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::SpeechModelInfo *)&a16);
  _Unwind_Resume(a1);
}

void quasar::SyncDecoder::~SyncDecoder(void **this)
{
  *this = off_1E5D34AE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void quasar::SyncDecoder::createDecoder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v4;
  BOOL v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  void *__p[2];
  int64_t v32;
  _OWORD v33[17];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  quasar::Decoder::getDecoderTypeName((std::string *)a1, (uint64_t)&v34);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (HIBYTE(v36) != 24)
    {
      if (HIBYTE(v36) == 29)
      {
        v4 = &v34;
LABEL_15:
        v7 = (uint64_t)*v4;
        v8 = v4[1];
        v9 = v4[2];
        v10 = *(uint64_t *)((char *)v4 + 21);
        if (v7 != 0x2D64726F7779656BLL
          || v8 != (_QWORD *)0x6F2D746365726964
          || v9 != (_QWORD *)0x65642D7475707475
          || v10 != 0x7265646F6365642DLL)
        {
          goto LABEL_34;
        }
        std::allocate_shared[abi:ne180100]<quasar::KeywordDirectOutputsSyncDecoder,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,std::string const&,void>((__int128 *)a1, v33);
LABEL_58:
        *(_OWORD *)a2 = v33[0];
        goto LABEL_59;
      }
      goto LABEL_34;
    }
    if (v34 != (_QWORD *)0x2D64726F7779656BLL || v35 != 0x676E6974746F7073 || v36 != 0x7265646F6365642DLL)
      goto LABEL_34;
LABEL_57:
    std::allocate_shared[abi:ne180100]<quasar::KeywordSpottingSyncDecoder,std::allocator<quasar::KeywordSpottingSyncDecoder>,std::string const&,void>(v33);
    goto LABEL_58;
  }
  if (v35 == 24)
  {
    v5 = *v34 == 0x2D64726F7779656BLL && v34[1] == 0x676E6974746F7073;
    if (v5 && v34[2] == 0x7265646F6365642DLL)
      goto LABEL_57;
  }
  if (v35 == 29)
  {
    v4 = (_QWORD **)v34;
    goto LABEL_15;
  }
LABEL_34:
  if (quasar::gLogLevel >= 2)
  {
    memset(v33, 0, sizeof(v33));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::operator+<char>();
    v16 = std::string::append(&v28, "\" in \"");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = *(char *)(a1 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)a1;
    else
      v19 = *(const std::string::value_type **)a1;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a1 + 23);
    else
      v20 = *(_QWORD *)(a1 + 8);
    v21 = std::string::append(&v29, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v30, "\". ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v32 >= 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if (v32 >= 0)
      v26 = HIBYTE(v32);
    else
      v26 = (uint64_t)__p[1];
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v25, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Recognition will crash if you try to use it", 43);
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v33);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
LABEL_59:
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
}

void sub_1ADE3A188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 33) < 0)
    operator delete(*(void **)(v37 - 56));
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::KeywordSpottingSyncDecoder,std::allocator<quasar::KeywordSpottingSyncDecoder>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1B8uLL);
  result = std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordSpottingSyncDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADE3A264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordSpottingSyncDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44550;
  a1[1] = 0;
  quasar::KeywordSpottingSyncDecoder::KeywordSpottingSyncDecoder(a1 + 3);
  return a1;
}

void sub_1ADE3A2B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::KeywordSpottingSyncDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::KeywordDirectOutputsSyncDecoder,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE3A360(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::KeywordDirectOutputsSyncDecoder>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5CFFE38;
  a1[1] = 0;
  quasar::KeywordDirectOutputsSyncDecoder::KeywordDirectOutputsSyncDecoder((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADE3A3AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::KeywordDirectOutputsSyncDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *quasar::AlignmentProcessorOptions::options@<X0>(quasar::AlignmentProcessorOptions *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *result;

  v3 = (char *)this + 16;
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) - 24);
  v5 = (char *)this + 456;
  v6 = *(_QWORD *)(*((_QWORD *)this + 57) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x20uLL);
  a2[1] = result + 4;
  a2[2] = result + 4;
  *result = &v3[v4];
  result[1] = v3 + 152;
  result[2] = v3 + 296;
  result[3] = &v5[v6];
  *a2 = result;
  return result;
}

void quasar::AlignmentProcessorBlock::init(quasar::AlignmentProcessorBlock *this)
{
  std::string *v2;
  __int128 v3;
  std::string v4;
  void *__p[2];
  std::string::size_type v6;

  std::string::basic_string[abi:ne180100]<0>(&v4, "AlignmentProcessorBlock");
  v2 = std::string::append(&v4, "Config:");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  quasar::OptionsBase::debugLog((void (***)(_QWORD **__return_ptr, _QWORD))this + 1, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1ADE3A518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'quasar::AlignmentProcessorBlock::init(quasar::AlignmentProcessorBlock *this)
{
  quasar::AlignmentProcessorBlock::init((quasar::AlignmentProcessorBlock *)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::AlignmentProcessorBlock::computeTokenWordMapping(uint64_t *a1@<X0>, int **a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  int v20;
  unsigned __int8 *v21[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = -1;
    do
    {
      v7 = (unsigned __int8 *)(v3 + 24 * v5);
      if ((char)v7[23] < 0)
      {
        v9 = v7;
        v7 = *(unsigned __int8 **)v7;
        v8 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (!v5)
          goto LABEL_8;
      }
      else
      {
        v8 = (unsigned __int8 *)v7[23];
        if (!v5)
          goto LABEL_8;
      }
      v21[0] = v7;
      v21[1] = v8;
      if (!std::string_view::rfind[abi:ne180100](v21, "▁", 3uLL, 0))
LABEL_8:
        ++v6;
      v11 = a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a2;
        v14 = v11 - *a2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
          v13 = *a2;
          v11 = a2[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = (int *)&v18[4 * v14];
        *v19 = v6;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *a2 = v19;
        a2[1] = v12;
        a2[2] = (int *)&v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v6;
        v12 = v11 + 1;
      }
      a2[1] = v12;
      ++v5;
      v3 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v5);
  }
}

void sub_1ADE3A6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::computeWordLevelAlignments(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int **v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD **v16;
  unint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  int *v30;
  void *v31[4];

  quasar::AlignmentProcessorBlock::computeTokenWordMapping(a1, (int **)v31);
  quasar::AlignmentProcessorBlock::computeTokenWordMapping(a2, (int **)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (__p != v30)
    std::vector<std::vector<int>>::resize(a4, *(v30 - 1) + 1);
  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    v8 = 0;
    do
    {
      v9 = (int **)(v7 + 24 * v8);
      v11 = *v9;
      v10 = v9[1];
      if (*v9 != v10)
      {
        do
        {
          v12 = *a4 + 24 * *((int *)__p + v8);
          v13 = *v11;
          v14 = v31[0];
          v16 = (_DWORD **)(v12 + 8);
          v15 = *(_DWORD **)(v12 + 8);
          v18 = (_QWORD *)(v12 + 16);
          v17 = *(_QWORD *)(v12 + 16);
          if ((unint64_t)v15 >= v17)
          {
            v20 = *(_DWORD **)v12;
            v21 = ((uint64_t)v15 - *(_QWORD *)v12) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v18, v24);
              v15 = *v16;
              v20 = *(_DWORD **)v12;
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v14[v13];
            v19 = v26 + 4;
            while (v15 != v20)
            {
              v27 = *--v15;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)v12 = v26;
            *v16 = v19;
            *v18 = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v15 = *((_DWORD *)v31[0] + v13);
            v19 = v15 + 1;
          }
          *v16 = v19;
          ++v11;
        }
        while (v11 != v10);
        v7 = *a3;
        v6 = a3[1];
      }
      ++v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v8);
  }
  if (__p)
  {
    v30 = (int *)__p;
    operator delete(__p);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
}

void sub_1ADE3A8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::computeTokenCharMapping(uint64_t a1@<X0>, __int128 **a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  void **v4;
  __int128 *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  char *v23;
  int64_t v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  std::string *v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  void **v60;
  uint64_t v61;
  int v62;
  char *v63;
  unint64_t v64;
  int v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  signed int v89;
  __int128 *v90;
  void *v92[2];
  uint64_t v93;
  char v94;
  std::string v95;
  void *__p[2];
  uint64_t v97;
  __int128 __dst;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  v4 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  v90 = a2[1];
  if (*a2 != v90)
  {
    v89 = 0;
    v85 = 0;
    v86 = (uint64_t)(a4 + 2);
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        v95.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v6;
      }
      if ((a3 & 1) != 0)
        goto LABEL_30;
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v95;
      else
        v7 = (std::string *)v95.__r_.__value_.__r.__words[0];
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      else
        size = v95.__r_.__value_.__l.__size_;
      *(_QWORD *)&__dst = v7;
      *((_QWORD *)&__dst + 1) = size;
      v9 = std::string_view::rfind[abi:ne180100]((unsigned __int8 **)&__dst, "▁", 3uLL, 0);
      if (v9)
        v10 = 0;
      else
        v10 = 3;
      if (v9)
        v11 = size;
      else
        v11 = size - 3;
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v11 >= 0x17)
      {
        v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v13 = v11 | 7;
        v14 = v13 + 1;
        p_dst = (__int128 *)operator new(v13 + 1);
        *((_QWORD *)&__dst + 1) = v11;
        *(_QWORD *)&v99 = v14 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        BYTE7(v99) = v11;
        p_dst = &__dst;
        if (!v11)
          goto LABEL_27;
      }
      memmove(p_dst, (char *)v7 + v10, v11);
LABEL_27:
      *((_BYTE *)p_dst + v11) = 0;
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = __dst;
      v95.__r_.__value_.__r.__words[2] = v99;
LABEL_30:
      v15 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      v16 = v95.__r_.__value_.__l.__size_;
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
      else
        v17 = v95.__r_.__value_.__l.__size_;
      if (v17)
      {
        v18 = *(unsigned __int8 *)(a1 + 23);
        if ((v18 & 0x80u) == 0)
          v19 = (char *)a1;
        else
          v19 = *(char **)a1;
        if ((v18 & 0x80u) != 0)
          v18 = *(_QWORD *)(a1 + 8);
        v20 = v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v95;
        else
          v21 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if (v18 >= v89)
        {
          v22 = &v19[v89];
          v23 = &v19[v18];
          v24 = v18 - v89;
          if (v24 >= v17)
          {
            v45 = v21->__r_.__value_.__s.__data_[0];
            do
            {
              v46 = v24 - v17;
              if (v46 == -1)
                break;
              v47 = (char *)memchr(v22, v45, v46 + 1);
              if (!v47)
                break;
              v48 = v47;
              if (!memcmp(v47, v21, v17))
              {
                if (v48 == v23)
                  break;
                v55 = (_DWORD)v48 - (_DWORD)v19;
                if (v48 - v19 == -1)
                  break;
                if ((v15 & 0x80u) == 0)
                  v56 = &v95;
                else
                  v56 = (std::string *)v20;
                if ((v15 & 0x80u) == 0)
                  v57 = v15;
                else
                  v57 = v16;
                quasar::utf8::codepointsCtr(v56, v57, 0, v17, (unint64_t)v92);
                v4 = a4;
                if (v94)
                {
                  v58 = (int)v92[0];
                  v59 = v84 & 0xFFFFFFFF00000000 | LODWORD(v92[0]);
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)v92;
                  v97 = v93;
                  v92[0] = 0;
                  v92[1] = 0;
                  v93 = 0;
                  if (quasar::gLogLevel >= 1)
                  {
                    v113 = 0u;
                    v114 = 0u;
                    v111 = 0u;
                    v112 = 0u;
                    v109 = 0u;
                    v110 = 0u;
                    v107 = 0u;
                    v108 = 0u;
                    v105 = 0u;
                    v106 = 0u;
                    v103 = 0u;
                    v104 = 0u;
                    v101 = 0u;
                    v102 = 0u;
                    v99 = 0u;
                    v100 = 0u;
                    __dst = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
                    if (v97 >= 0)
                      v60 = __p;
                    else
                      v60 = (void **)__p[0];
                    if (v97 >= 0)
                      v61 = HIBYTE(v97);
                    else
                      v61 = (uint64_t)__p[1];
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v60, v61);
                    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__dst);
                  }
                  if (SHIBYTE(v97) < 0)
                    operator delete(__p[0]);
                  v58 = 0;
                  v59 = v84 & 0xFFFFFFFF00000000;
                  if (!v94 && SHIBYTE(v93) < 0)
                  {
                    operator delete(v92[0]);
                    v58 = 0;
                  }
                }
                v62 = *(char *)(a1 + 23);
                if (v62 >= 0)
                  v63 = (char *)a1;
                else
                  v63 = *(char **)a1;
                if (v62 >= 0)
                  v64 = *(unsigned __int8 *)(a1 + 23);
                else
                  v64 = *(_QWORD *)(a1 + 8);
                quasar::utf8::codepointsCtr(v63, v64, v89, (_DWORD)v48 - (_DWORD)v19, (unint64_t)v92);
                v84 = v59;
                if (v94)
                {
                  v65 = (int)v92[0];
                  v83 = v83 & 0xFFFFFFFF00000000 | LODWORD(v92[0]);
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)v92;
                  v97 = v93;
                  v92[0] = 0;
                  v92[1] = 0;
                  v93 = 0;
                  if (quasar::gLogLevel >= 1)
                  {
                    v113 = 0u;
                    v114 = 0u;
                    v111 = 0u;
                    v112 = 0u;
                    v109 = 0u;
                    v110 = 0u;
                    v107 = 0u;
                    v108 = 0u;
                    v105 = 0u;
                    v106 = 0u;
                    v103 = 0u;
                    v104 = 0u;
                    v101 = 0u;
                    v102 = 0u;
                    v99 = 0u;
                    v100 = 0u;
                    __dst = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
                    if (v97 >= 0)
                      v66 = __p;
                    else
                      v66 = (void **)__p[0];
                    if (v97 >= 0)
                      v67 = HIBYTE(v97);
                    else
                      v67 = (uint64_t)__p[1];
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v66, v67);
                    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__dst);
                  }
                  if (SHIBYTE(v97) < 0)
                    operator delete(__p[0]);
                  v65 = 0;
                  v83 &= 0xFFFFFFFF00000000;
                  if (!v94 && SHIBYTE(v93) < 0)
                  {
                    operator delete(v92[0]);
                    v65 = 0;
                  }
                }
                v68 = (v85 + v65);
                v85 = v68 + v58;
                v69 = (v68 + v58 - 1);
                v71 = (uint64_t *)a4[1];
                v70 = (unint64_t)a4[2];
                if ((unint64_t)v71 >= v70)
                {
                  v73 = ((char *)v71 - (_BYTE *)*a4) >> 3;
                  if ((unint64_t)(v73 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v74 = v70 - (_QWORD)*a4;
                  v75 = v74 >> 2;
                  if (v74 >> 2 <= (unint64_t)(v73 + 1))
                    v75 = v73 + 1;
                  if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                    v76 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v76 = v75;
                  if (v76)
                    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v86, v76);
                  else
                    v77 = 0;
                  v78 = &v77[8 * v73];
                  *(_QWORD *)v78 = v68 | (v69 << 32);
                  v72 = v78 + 8;
                  v80 = (char *)*a4;
                  v79 = (char *)a4[1];
                  if (v79 != *a4)
                  {
                    do
                    {
                      v81 = *((_QWORD *)v79 - 1);
                      v79 -= 8;
                      *((_QWORD *)v78 - 1) = v81;
                      v78 -= 8;
                    }
                    while (v79 != v80);
                    v79 = (char *)*a4;
                  }
                  *a4 = v78;
                  a4[1] = v72;
                  a4[2] = &v77[8 * v76];
                  if (v79)
                    operator delete(v79);
                }
                else
                {
                  *v71 = v68 | (v69 << 32);
                  v72 = v71 + 1;
                }
                a4[1] = v72;
                v82 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
                if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v82 = v95.__r_.__value_.__r.__words[1];
                v89 = v82 + v55;
                goto LABEL_94;
              }
              v22 = v48 + 1;
              v24 = v23 - (v48 + 1);
            }
            while (v24 >= v17);
          }
        }
        v4 = a4;
        if (quasar::gLogLevel >= 4)
        {
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          __dst = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__dst);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Token: ", 7);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v95;
          else
            v26 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          else
            v27 = v95.__r_.__value_.__l.__size_;
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" not found in raw string input: ", 32);
          v30 = *(char *)(a1 + 23);
          if (v30 >= 0)
            v31 = a1;
          else
            v31 = *(_QWORD *)a1;
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + 23);
          else
            v32 = *(_QWORD *)(a1 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__dst);
        }
        v34 = a4[1];
        v33 = (unint64_t)a4[2];
        if ((unint64_t)v34 < v33)
        {
LABEL_68:
          *v34 = -1;
          v41 = v34 + 1;
          goto LABEL_93;
        }
        v35 = ((char *)v34 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v36 = v33 - (_QWORD)*a4;
        v37 = v36 >> 2;
        if (v36 >> 2 <= (unint64_t)(v35 + 1))
          v37 = v35 + 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v86, v38);
        else
          v39 = 0;
        v49 = &v39[8 * v35];
        *(_QWORD *)v49 = -1;
        v41 = v49 + 8;
        v51 = (char *)*a4;
        v50 = (char *)a4[1];
        if (v50 != *a4)
        {
          do
          {
            v52 = *((_QWORD *)v50 - 1);
            v50 -= 8;
            *((_QWORD *)v49 - 1) = v52;
            v49 -= 8;
          }
          while (v50 != v51);
LABEL_90:
          v50 = (char *)*v4;
        }
      }
      else
      {
        v34 = v4[1];
        v40 = (unint64_t)v4[2];
        if ((unint64_t)v34 < v40)
          goto LABEL_68;
        v42 = ((char *)v34 - (_BYTE *)*v4) >> 3;
        if ((unint64_t)(v42 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v43 = v40 - (_QWORD)*v4;
        v44 = v43 >> 2;
        if (v43 >> 2 <= (unint64_t)(v42 + 1))
          v44 = v42 + 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v44;
        if (v38)
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v86, v38);
        else
          v39 = 0;
        v49 = &v39[8 * v42];
        *(_QWORD *)v49 = -1;
        v41 = v49 + 8;
        v53 = (char *)*v4;
        v50 = (char *)v4[1];
        if (v50 != *v4)
        {
          do
          {
            v54 = *((_QWORD *)v50 - 1);
            v50 -= 8;
            *((_QWORD *)v49 - 1) = v54;
            v49 -= 8;
          }
          while (v50 != v53);
          goto LABEL_90;
        }
      }
      *v4 = v49;
      v4[1] = v41;
      v4[2] = &v39[8 * v38];
      if (v50)
        operator delete(v50);
LABEL_93:
      v4[1] = v41;
LABEL_94:
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v90);
  }
}

void sub_1ADE3B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  void *v41;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a40);
  if (a38 < 0)
    operator delete(__p);
  if (!a25 && a24 < 0)
    operator delete(a19);
  if (a31 < 0)
    operator delete(a26);
  v41 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::computeCharLevelSpans(int **a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  int *v3;
  int *v4;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    return;
  v7 = 0;
  v8 = a3 + 2;
  do
  {
    v9 = *v3;
    v10 = v3[1];
    if (*v3 > v10)
      goto LABEL_35;
    v11 = *a2;
    while (1)
    {
      v12 = (unsigned int *)(v11 + 8 * v9);
      v14 = *v12;
      v13 = v12[1];
      if ((_DWORD)v14 == -1 && v13 == -1)
      {
        ++v9;
        goto LABEL_16;
      }
      v16 = (_DWORD *)(v11 + 8 * v10);
      v17 = v16[1];
      if (*v16 != -1 || (_DWORD)v17 != -1)
        break;
      --v10;
LABEL_16:
      if (v9 > v10)
        goto LABEL_35;
    }
    if ((unint64_t)v7 >= *v8)
    {
      v19 = ((char *)v7 - *a3) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = *v8 - (_QWORD)*a3;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v8, v22);
      else
        v23 = 0;
      v24 = &v23[8 * v19];
      *(_QWORD *)v24 = v14 | (v17 << 32);
      v7 = (uint64_t *)(v24 + 8);
      v26 = *a3;
      v25 = a3[1];
      if (v25 != *a3)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *((_QWORD *)v24 - 1) = v27;
          v24 -= 8;
        }
        while (v25 != v26);
        v25 = *a3;
      }
      *a3 = v24;
      a3[1] = (char *)v7;
      a3[2] = &v23[8 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v7++ = v14 | (v17 << 32);
    }
    a3[1] = (char *)v7;
LABEL_35:
    v3 += 2;
  }
  while (v3 != v4);
}

void sub_1ADE3B2E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::computeRangeProjections(unsigned int **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t **v11;
  uint64_t **v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int *v89;
  int v90;
  int v91;
  BOOL v93;
  int v94;
  int *v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD **v103;
  int v104;
  _QWORD *v105;
  char v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  unint64_t *v131;
  char *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v138;
  unsigned int *v139;
  int v141;
  void *v142;
  _QWORD *v143;
  uint64_t v144;
  void *__p;
  char *v146;
  char *v147;
  void *p_p;
  unint64_t *v149;
  char *v150;
  _QWORD **v151;
  _QWORD *v152[2];
  uint64_t *v153;
  _QWORD *v154[2];
  _DWORD *v155[2];

  v154[0] = 0;
  v154[1] = 0;
  v153 = (uint64_t *)v154;
  v152[0] = 0;
  v152[1] = 0;
  v151 = v152;
  v6 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    v7 = 0;
    do
    {
      v8 = v6 + 24 * v7;
      v10 = *(_DWORD **)v8;
      v9 = *(_DWORD **)(v8 + 8);
      if (*(_DWORD **)v8 != v9)
      {
        do
        {
          LODWORD(__p) = 0;
          LODWORD(__p) = *v10;
          p_p = &__p;
          v11 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v153, (int *)&__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&p_p);
          v12 = v11;
          v13 = (char *)v11[6];
          v14 = (uint64_t)(v11 + 7);
          v15 = v11[7];
          if (v13 >= (char *)v15)
          {
            v17 = v11[5];
            v18 = (v13 - (char *)v17) >> 2;
            if ((unint64_t)(v18 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v19 = (char *)v15 - (char *)v17;
            v20 = ((char *)v15 - (char *)v17) >> 1;
            if (v20 <= v18 + 1)
              v20 = v18 + 1;
            if (v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v21);
              v17 = v12[5];
              v13 = (char *)v12[6];
            }
            else
            {
              v22 = 0;
            }
            v23 = &v22[4 * v18];
            *(_DWORD *)v23 = v7;
            v16 = (uint64_t *)(v23 + 4);
            while (v13 != (char *)v17)
            {
              v24 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            v12[5] = (uint64_t *)v23;
            v12[6] = v16;
            v12[7] = (uint64_t *)&v22[4 * v21];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *(_DWORD *)v13 = v7;
            v16 = (uint64_t *)(v13 + 4);
          }
          v12[6] = v16;
          ++v10;
        }
        while (v10 != v9);
        v6 = *a2;
        v5 = a2[1];
      }
      ++v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) > v7);
  }
  p_p = 0;
  v149 = 0;
  v150 = 0;
  __p = 0;
  v146 = 0;
  v147 = 0;
  v26 = *a3;
  v25 = a3[1];
  if (v25 == *a3)
  {
    v42 = 0;
    v27 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = (int *)(v26 + 8 * v28);
      v31 = *v29;
      v30 = v29[1];
      v32 = v31 == -1 && v30 == -1;
      if (!v32)
      {
        if (v27 >= v147)
        {
          v34 = (char *)__p;
          v35 = (v27 - (_BYTE *)__p) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v37 = v147 - (_BYTE *)__p;
          if ((v147 - (_BYTE *)__p) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v147, v38);
            v34 = (char *)__p;
            v27 = v146;
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = v28;
          v33 = v40 + 4;
          while (v27 != v34)
          {
            v41 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          __p = v40;
          v146 = v33;
          v147 = &v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v27 = v28;
          v33 = v27 + 4;
        }
        v146 = v33;
        v27 = v33;
        v26 = *a3;
        v25 = a3[1];
      }
      ++v28;
    }
    while (v28 < (v25 - v26) >> 3);
    v42 = (char *)__p;
    v25 = v26;
  }
  if ((int)((unint64_t)(v27 - v42) >> 2) < 2)
  {
    v44 = 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = *(int *)&v42[4 * v43++];
      v46 = *(int *)&v42[4 * v43];
      if (v44 <= *(_DWORD *)(v25 + 8 * v45 + 4))
      {
        v138 = v43;
        v47 = v45 | ((unint64_t)v45 << 32);
        v48 = v149;
        do
        {
          v49 = v44;
          if (v48 >= (unint64_t *)v150)
          {
            v50 = ((char *)v48 - (_BYTE *)p_p) >> 3;
            if ((unint64_t)(v50 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v51 = (v150 - (_BYTE *)p_p) >> 2;
            if (v51 <= v50 + 1)
              v51 = v50 + 1;
            if ((unint64_t)(v150 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150, v52);
            else
              v53 = 0;
            v54 = (unint64_t *)&v53[8 * v50];
            *v54 = v47;
            v48 = v54 + 1;
            v56 = (char *)p_p;
            v55 = (char *)v149;
            if (v149 != p_p)
            {
              do
              {
                v57 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *--v54 = v57;
              }
              while (v55 != v56);
              v55 = (char *)p_p;
            }
            p_p = v54;
            v149 = v48;
            v150 = &v53[8 * v52];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v48++ = v47;
          }
          v149 = v48;
          v44 = v49 + 1;
          v25 = *a3;
        }
        while (v49 < *(_DWORD *)(*a3 + 8 * v45 + 4));
        v43 = v138;
      }
      v58 = 8 * v46;
      if (v44 < *(_DWORD *)(v25 + 8 * v46))
      {
        v59 = v46 | ((unint64_t)v45 << 32);
        v60 = v149;
        do
        {
          if (v60 >= (unint64_t *)v150)
          {
            v61 = ((char *)v60 - (_BYTE *)p_p) >> 3;
            if ((unint64_t)(v61 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v62 = (v150 - (_BYTE *)p_p) >> 2;
            if (v62 <= v61 + 1)
              v62 = v61 + 1;
            if ((unint64_t)(v150 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v62;
            if (v63)
              v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150, v63);
            else
              v64 = 0;
            v65 = (unint64_t *)&v64[8 * v61];
            *v65 = v59;
            v60 = v65 + 1;
            v67 = (char *)p_p;
            v66 = (char *)v149;
            if (v149 != p_p)
            {
              do
              {
                v68 = *((_QWORD *)v66 - 1);
                v66 -= 8;
                *--v65 = v68;
              }
              while (v66 != v67);
              v66 = (char *)p_p;
            }
            p_p = v65;
            v149 = v60;
            v150 = &v64[8 * v63];
            if (v66)
              operator delete(v66);
          }
          else
          {
            *v60++ = v59;
          }
          v149 = v60;
          ++v44;
          v25 = *a3;
        }
        while (v44 < *(_DWORD *)(*a3 + v58));
      }
      v42 = (char *)__p;
      v27 = v146;
    }
    while (v43 < (((v146 - (_BYTE *)__p) << 30) - 0x100000000) >> 32);
  }
  v69 = a4;
  if (v42 != v27)
  {
    v70 = *((int *)v27 - 1);
    if (v44 <= *(_DWORD *)(v25 + 8 * v70 + 4))
    {
      v71 = v70 | ((unint64_t)v70 << 32);
      v72 = v149;
      do
      {
        if (v72 >= (unint64_t *)v150)
        {
          v73 = ((char *)v72 - (_BYTE *)p_p) >> 3;
          if ((unint64_t)(v73 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v74 = (v150 - (_BYTE *)p_p) >> 2;
          if (v74 <= v73 + 1)
            v74 = v73 + 1;
          if ((unint64_t)(v150 - (_BYTE *)p_p) >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          if (v75)
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v150, v75);
          else
            v76 = 0;
          v77 = (unint64_t *)&v76[8 * v73];
          *v77 = v71;
          v72 = v77 + 1;
          v79 = (char *)p_p;
          v78 = (char *)v149;
          if (v149 != p_p)
          {
            do
            {
              v80 = *((_QWORD *)v78 - 1);
              v78 -= 8;
              *--v77 = v80;
            }
            while (v78 != v79);
            v78 = (char *)p_p;
          }
          p_p = v77;
          v149 = v72;
          v150 = &v76[8 * v75];
          if (v78)
            operator delete(v78);
        }
        else
        {
          *v72++ = v71;
        }
        v149 = v72;
        v93 = v44++ < *(_DWORD *)(*a3 + 8 * v70 + 4);
      }
      while (v93);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (p_p == v149)
  {
    v135 = ((char *)a1[1] - (char *)*a1) >> 3;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    std::vector<std::vector<std::pair<int,int>>>::resize(a4, v135, (uint64_t **)&v142);
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
  }
  else
  {
    v81 = *a1;
    v82 = a1[1];
    if (*a1 != v82)
    {
      v139 = a1[1];
      do
      {
        v84 = *v81;
        v83 = v81[1];
        v142 = 0;
        v143 = 0;
        v144 = 0;
        std::vector<std::vector<std::pair<int,int>>>::push_back[abi:ne180100](v69, (uint64_t)&v142);
        if (v142)
        {
          v143 = v142;
          operator delete(v142);
        }
        if ((v84 & 0x80000000) == 0)
        {
          v85 = ((char *)v149 - (_BYTE *)p_p) >> 3;
          if (v85 > v84 && (v83 & 0x80000000) == 0 && (int)v83 >= (int)v84)
          {
            v86 = ((unint64_t)((char *)v149 - (_BYTE *)p_p) >> 3) - 1;
            if (v85 > v83)
              v86 = v83;
            v143 = 0;
            v144 = 0;
            v142 = &v143;
            v141 = 0;
            v87 = *((_DWORD *)p_p + 2 * v84);
            v141 = v87;
            if (v87 <= *((_DWORD *)p_p + 2 * v86 + 1))
            {
              v88 = v86;
              do
              {
                v89 = (int *)(*a3 + 8 * v87);
                v91 = *v89;
                v90 = v89[1];
                v93 = (int)v88 >= v90 && (v90 & v91) != -1 && (int)v84 <= v91;
                if (v93)
                {
                  v155[0] = &v141;
                  v95 = (int *)std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v153, &v141, (uint64_t)&std::piecewise_construct, v155)[5];
                  v155[0] = &v141;
                  v96 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v153, &v141, (uint64_t)&std::piecewise_construct, v155)[6];
                  while (v95 != (int *)v96)
                  {
                    std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)&v142, (uint64_t *)&v143, v95, v95);
                    ++v95;
                  }
                }
                v94 = v141;
                v87 = ++v141;
              }
              while (v94 < *((_DWORD *)p_p + 2 * v88 + 1));
              v97 = v142;
              v82 = v139;
              if (v142 != &v143)
              {
                v98 = 0x80000000;
                v99 = 0x80000000;
                while (1)
                {
                  v100 = *((unsigned int *)v97 + 7);
                  if ((_DWORD)v99 != (_DWORD)v100 - 1)
                  {
                    v101 = *((unsigned int *)v97 + 7);
                    if ((_DWORD)v98 == 0x80000000)
                      goto LABEL_143;
                    v104 = v99 + 1;
                    if ((int)v99 + 1 < (int)v100)
                    {
                      v105 = (_QWORD *)(*a2 + 24 * v104 + 8);
                      v106 = 1;
                      do
                      {
                        v106 &= *(v105 - 1) == *v105;
                        v105 += 3;
                        ++v104;
                      }
                      while ((_DWORD)v100 != v104);
                      if ((v106 & 1) == 0)
                      {
                        v107 = a4[1];
                        v108 = *(unint64_t **)(v107 - 16);
                        v109 = *(_QWORD *)(v107 - 8);
                        if ((unint64_t)v108 >= v109)
                        {
                          v111 = *(_QWORD *)(v107 - 24);
                          v112 = ((uint64_t)v108 - v111) >> 3;
                          if ((unint64_t)(v112 + 1) >> 61)
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          v113 = v109 - v111;
                          v114 = v113 >> 2;
                          if (v113 >> 2 <= (unint64_t)(v112 + 1))
                            v114 = v112 + 1;
                          if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                            v115 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v115 = v114;
                          if (v115)
                            v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v107 - 8, v115);
                          else
                            v116 = 0;
                          v117 = (unint64_t *)&v116[8 * v112];
                          *v117 = v98 | (unint64_t)(v99 << 32);
                          v110 = v117 + 1;
                          v119 = *(char **)(v107 - 24);
                          v118 = *(char **)(v107 - 16);
                          if (v118 != v119)
                          {
                            do
                            {
                              v120 = *((_QWORD *)v118 - 1);
                              v118 -= 8;
                              *--v117 = v120;
                            }
                            while (v118 != v119);
                            v118 = *(char **)(v107 - 24);
                          }
                          *(_QWORD *)(v107 - 24) = v117;
                          *(_QWORD *)(v107 - 16) = v110;
                          *(_QWORD *)(v107 - 8) = &v116[8 * v115];
                          if (v118)
                            operator delete(v118);
                        }
                        else
                        {
                          *v108 = v98 | (unint64_t)(v99 << 32);
                          v110 = v108 + 1;
                        }
                        *(_QWORD *)(v107 - 16) = v110;
                        v101 = v100;
                        goto LABEL_143;
                      }
                    }
                  }
                  v101 = v98;
LABEL_143:
                  v102 = (_QWORD *)v97[1];
                  if (v102)
                  {
                    do
                    {
                      v103 = (_QWORD **)v102;
                      v102 = (_QWORD *)*v102;
                    }
                    while (v102);
                  }
                  else
                  {
                    do
                    {
                      v103 = (_QWORD **)v97[2];
                      v32 = *v103 == v97;
                      v97 = v103;
                    }
                    while (!v32);
                  }
                  v97 = v103;
                  v98 = v101;
                  v99 = v100;
                  if (v103 == &v143)
                  {
                    v69 = a4;
                    v82 = v139;
                    if ((_DWORD)v101 != 0x80000000)
                    {
                      v121 = a4[1];
                      v122 = *(unint64_t **)(v121 - 16);
                      v123 = *(_QWORD *)(v121 - 8);
                      if ((unint64_t)v122 >= v123)
                      {
                        v125 = *(_QWORD *)(v121 - 24);
                        v126 = ((uint64_t)v122 - v125) >> 3;
                        if ((unint64_t)(v126 + 1) >> 61)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        v127 = v123 - v125;
                        v128 = v127 >> 2;
                        if (v127 >> 2 <= (unint64_t)(v126 + 1))
                          v128 = v126 + 1;
                        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
                          v129 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v129 = v128;
                        if (v129)
                          v130 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v121 - 8, v129);
                        else
                          v130 = 0;
                        v131 = (unint64_t *)&v130[8 * v126];
                        *v131 = v101 | (unint64_t)(v100 << 32);
                        v124 = v131 + 1;
                        v133 = *(char **)(v121 - 24);
                        v132 = *(char **)(v121 - 16);
                        if (v132 != v133)
                        {
                          do
                          {
                            v134 = *((_QWORD *)v132 - 1);
                            v132 -= 8;
                            *--v131 = v134;
                          }
                          while (v132 != v133);
                          v132 = *(char **)(v121 - 24);
                        }
                        *(_QWORD *)(v121 - 24) = v131;
                        *(_QWORD *)(v121 - 16) = v124;
                        *(_QWORD *)(v121 - 8) = &v130[8 * v129];
                        v82 = v139;
                        if (v132)
                          operator delete(v132);
                      }
                      else
                      {
                        *v122 = v101 | (unint64_t)(v100 << 32);
                        v124 = v122 + 1;
                      }
                      *(_QWORD *)(v121 - 16) = v124;
                    }
                    break;
                  }
                }
              }
            }
            std::__tree<int>::destroy((uint64_t)&v142, v143);
          }
        }
        v81 += 2;
      }
      while (v81 != v82);
    }
  }
  if (__p)
  {
    v146 = (char *)__p;
    operator delete(__p);
  }
  if (p_p)
  {
    v149 = (unint64_t *)p_p;
    operator delete(p_p);
  }
  std::__tree<int>::destroy((uint64_t)&v151, v152[0]);
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy((uint64_t)&v153, v154[0]);
}

void sub_1ADE3BD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{
  uint64_t v25;

  std::__tree<int>::destroy((uint64_t)&a15, a16);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::__tree<int>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(v25 - 128, *(_QWORD **)(v25 - 120));
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,int>>>::resize(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<std::pair<int,int>>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void quasar::AlignmentProcessorBlock::alignUnalignedChars(int ***a1, unint64_t a2)
{
  int **v4;
  int **v5;
  int v6;
  int **v7;
  int *v8;
  int *v9;
  char *v10;
  int v11;
  unint64_t v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  _QWORD *v18;
  unint64_t i;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  unsigned __int8 v36;
  void *__p;

  if (a2 && a1[1] != *a1)
  {
    v36 = 0;
    std::vector<BOOL>::vector(&__p, a2, &v36);
    v5 = *a1;
    v4 = a1[1];
    if (*a1 == v4)
      goto LABEL_28;
    v6 = 0;
    v7 = *a1;
    do
    {
      v8 = *v7;
      v9 = v7[1];
      if (*v7 != v9)
      {
        v10 = (char *)__p;
        do
        {
          v11 = v8[1];
          v12 = *v8;
          if ((int)v12 <= v11)
          {
            v13 = v11 - v12 + 1;
            do
            {
              *(_QWORD *)&v10[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
              ++v12;
              --v13;
            }
            while (v13);
          }
          ++v6;
          v8 += 2;
        }
        while (v8 != v9);
      }
      v7 += 3;
    }
    while (v7 != v4);
    if (!v6)
    {
LABEL_28:
      v22 = (a2 - 1);
      v23 = (unint64_t)v5[2];
      v24 = v5[1];
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((char *)v24 - (char *)*v5) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v23 - (_QWORD)*v5;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v29);
        else
          v30 = 0;
        v31 = &v30[8 * v26];
        v32 = &v30[8 * v29];
        *(_QWORD *)v31 = v22 << 32;
        v25 = (int *)(v31 + 8);
        v34 = *v5;
        v33 = (char *)v5[1];
        if (v33 != (char *)*v5)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v31 - 1) = v35;
            v31 -= 8;
          }
          while (v33 != (char *)v34);
          v33 = (char *)*v5;
        }
        *v5 = (int *)v31;
        v5[1] = v25;
        v5[2] = (int *)v32;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v24 = v22 << 32;
        v25 = v24 + 2;
      }
      v5[1] = v25;
    }
    else if (v5 != v4)
    {
      v14 = 0;
      v15 = 0x7FFFFFFF;
      do
      {
        v17 = *v5;
        v16 = v5[1];
        if (*v5 != v16)
        {
          v18 = __p;
          do
          {
            for (i = v17[1]; ++i < a2; v18[i >> 6] = v20 | (1 << i))
            {
              v20 = v18[i >> 6];
              if ((v20 & (1 << i)) != 0)
                break;
              v17[1] = i;
            }
            v21 = v17 + 2;
            if (*v17 < v15)
            {
              v14 = v17;
              v15 = *v17;
            }
            v17 += 2;
          }
          while (v21 != v16);
        }
        v5 += 3;
      }
      while (v5 != v4);
      if (v14 && *v14)
        *v14 = 0;
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_1ADE3C12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::avoidCrossingWords(std::vector<int>::size_type __n@<X2>, uint64_t ***a2@<X0>, uint64_t *a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t **v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int **v15;
  int *v16;
  int *v17;
  std::vector<int>::pointer begin;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::vector<int>::size_type v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _OWORD v67[17];
  std::vector<int> v68;

  v7 = *a2;
  v8 = a2[1];
  if (!__n || (v9 = v8 == v7, v8 = *a2, v9))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<std::vector<std::pair<int,int>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>(a4, v7, v8, 0xAAAAAAAAAAAAAAABLL * (v8 - v7));
  }
  else
  {
    LODWORD(v67[0]) = -1;
    std::vector<int>::vector(&v68, __n, (const std::vector<int>::value_type *)v67);
    v11 = *a2;
    v12 = ((char *)a2[1] - (char *)*a2) / 24;
    if (a2[1] != *a2)
    {
      v13 = 0;
      if (v12 <= 1)
        v14 = 1;
      else
        v14 = ((char *)a2[1] - (char *)*a2) / 24;
      do
      {
        v15 = (int **)&v11[3 * v13];
        v16 = *v15;
        v17 = v15[1];
        if (v16 != v17)
        {
          begin = v68.__begin_;
          do
          {
            v19 = *v16;
            if ((int)v19 <= v16[1])
            {
              do
              {
                begin[v19] = v13;
                v24 = v19++ < v16[1];
              }
              while (v24);
            }
            v16 += 2;
          }
          while (v16 != v17);
        }
        ++v13;
      }
      while (v13 != v14);
    }
    v20 = *a3;
    if (a3[1] != *a3)
    {
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(v20 + 8 * v21);
        if ((v22 & HIDWORD(v22)) != 0xFFFFFFFF)
        {
          v23 = v22 >> 32;
          v24 = v22 >> 32 < __n || quasar::gLogLevel < 1;
          if (!v24)
          {
            memset(v67, 0, sizeof(v67));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Char ranges in the word char map exceeds total number of characters", 67);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v67);
          }
          v25 = &v68.__begin_[(int)v22];
          v26 = &v68.__begin_[v23 + 1];
          v27 = v25;
          if (v25 != v26)
          {
            v28 = 4 * v23 - 4 * (int)v22 + 4;
            v27 = &v68.__begin_[(int)v22];
            while (*v27 == -1)
            {
              ++v27;
              v28 -= 4;
              if (!v28)
                goto LABEL_30;
            }
          }
          if (v27 != v26)
          {
            v29 = (char *)v26 - (char *)v25;
            if (v29 >= 1)
            {
              v30 = ((unint64_t)v29 >> 2) + 1;
              do
              {
                *v25++ = *v27;
                --v30;
              }
              while (v30 > 1);
            }
          }
        }
LABEL_30:
        ++v21;
        v20 = *a3;
      }
      while (v21 < (a3[1] - *a3) >> 3);
      v12 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
    }
    std::vector<std::vector<std::pair<int,int>>>::vector(a4, v12);
    v31 = 0;
    if (__n <= 1)
      v32 = 1;
    else
      v32 = __n;
    do
    {
      v33 = v68.__begin_[v31];
      if (v33 != -1)
      {
        v34 = *a4;
        v35 = *a4 + 24 * v33;
        v36 = *(_QWORD **)v35;
        v38 = (void **)(v35 + 8);
        v37 = *(_QWORD **)(v35 + 8);
        if (*(_QWORD **)v35 == v37)
        {
          v39 = v34 + 24 * v33;
          v42 = *(_QWORD *)(v39 + 16);
          v41 = (_QWORD *)(v39 + 16);
          v40 = v42;
          if ((unint64_t)v36 >= v42)
          {
            v49 = v40 - (_QWORD)v36;
            v50 = v49 >> 2;
            if ((unint64_t)(v49 >> 2) <= 1)
              v50 = 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v41, v51);
            *v52 = 0x100000001 * v31;
            v43 = v52 + 1;
            v54 = *v38;
            v55 = *(_QWORD **)v35;
            v56 = v52;
            if (*v38 != *(void **)v35)
            {
              do
              {
                v57 = *--v54;
                *--v56 = v57;
              }
              while (v54 != v55);
              v54 = *(_QWORD **)v35;
            }
            *(_QWORD *)v35 = v56;
            *v38 = v43;
            *v41 = &v52[v53];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *v36 = 0x100000001 * v31;
            v43 = v36 + 1;
          }
          *v38 = v43;
        }
        else if (*((_DWORD *)v37 - 1) == (_DWORD)v31 - 1)
        {
          *((_DWORD *)v37 - 1) = v31;
        }
        else
        {
          v44 = v34 + 24 * v33;
          v47 = *(_QWORD *)(v44 + 16);
          v46 = (_QWORD *)(v44 + 16);
          v45 = v47;
          if ((unint64_t)v37 >= v47)
          {
            v58 = v37 - v36;
            v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v60 = v45 - (_QWORD)v36;
            if (v60 >> 2 > v59)
              v59 = v60 >> 2;
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v59;
            if (v61)
              v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v61);
            else
              v62 = 0;
            v63 = &v62[8 * v58];
            *(_QWORD *)v63 = 0x100000001 * v31;
            v48 = v63 + 8;
            v64 = *v38;
            v65 = *(_QWORD **)v35;
            if (*v38 != *(void **)v35)
            {
              do
              {
                v66 = *--v64;
                *((_QWORD *)v63 - 1) = v66;
                v63 -= 8;
              }
              while (v64 != v65);
              v64 = *(_QWORD **)v35;
            }
            *(_QWORD *)v35 = v63;
            *v38 = v48;
            *v46 = &v62[8 * v61];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v37 = 0x100000001 * v31;
            v48 = v37 + 1;
          }
          *v38 = v48;
        }
      }
      ++v31;
    }
    while (v31 != v32);
    if (v68.__begin_)
    {
      v68.__end_ = v68.__begin_;
      operator delete(v68.__begin_);
    }
  }
}

void sub_1ADE3C598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::mergeContinuousRanges(uint64_t **a1@<X0>, char **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  char v33;

  v3 = *a1;
  v4 = a1[1];
  v5 = v4 - *a1;
  if (v4 == *a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)a2, v4, v4, v5);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&v30, v3, v4, v5);
    v6 = 126 - 2 * __clz(((char *)v31 - (char *)v30) >> 3);
    if (v31 == v30)
      v7 = 0;
    else
      v7 = v6;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)v30, v31, (uint64_t)&v33, v7, 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v8 = a2 + 2;
    v9 = v30;
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), 1uLL);
    v12 = &v10[8 * v11];
    *(_QWORD *)v10 = *(_QWORD *)v9;
    v13 = v10 + 8;
    v15 = *a2;
    v14 = a2[1];
    if (v14 != *a2)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v10 - 1) = v16;
        v10 -= 8;
      }
      while (v14 != v15);
      v14 = *a2;
    }
    *a2 = v10;
    a2[1] = v13;
    a2[2] = v12;
    if (v14)
      operator delete(v14);
    a2[1] = v13;
    v17 = v30;
    v18 = v31;
    if ((unint64_t)((char *)v31 - (char *)v30) >= 9)
    {
      v19 = 1;
      do
      {
        v20 = &v17[2 * v19];
        if (*((_DWORD *)v13 - 1) == *v20 - 1)
        {
          *((_DWORD *)v13 - 1) = v20[1];
        }
        else
        {
          if ((unint64_t)v13 >= *v8)
          {
            v21 = (v13 - *a2) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v22 = *v8 - (_QWORD)*a2;
            v23 = v22 >> 2;
            if (v22 >> 2 <= (unint64_t)(v21 + 1))
              v23 = v21 + 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v24);
            else
              v25 = 0;
            v26 = &v25[8 * v21];
            *(_QWORD *)v26 = *(_QWORD *)v20;
            v13 = v26 + 8;
            v28 = *a2;
            v27 = a2[1];
            if (v27 != *a2)
            {
              do
              {
                v29 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v26 - 1) = v29;
                v26 -= 8;
              }
              while (v27 != v28);
              v27 = *a2;
            }
            *a2 = v26;
            a2[1] = v13;
            a2[2] = &v25[8 * v24];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(_QWORD *)v13 = *(_QWORD *)v20;
            v13 += 8;
          }
          a2[1] = v13;
          v17 = v30;
          v18 = v31;
        }
        ++v19;
      }
      while (v19 < ((char *)v18 - (char *)v17) >> 3);
    }
    if (v17)
    {
      v31 = v17;
      operator delete(v17);
    }
  }
}

void sub_1ADE3C814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::pivotTransformQueries(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  void *v27;
  char *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  void *__p[2];
  _OWORD v41[17];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<std::vector<int>>::__clear[abi:ne180100](a3);
  v8 = a1[1];
  v39 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) != (v8 - *a1) >> 3)
  {
    memset(v41, 0, 256);
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Mismatch in sizes of alignment queries and projections from the first leg don't match.", 86);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (v8 != *a1)
  {
    v9 = 0;
    v38 = a3;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v41[0] = 0;
      v10 = *v39 + 24 * v9;
      v12 = *(_QWORD **)v10;
      v11 = *(_QWORD **)(v10 + 8);
      while (v12 != v11)
      {
        v14 = a4[1];
        v13 = (unint64_t)a4[2];
        if ((unint64_t)v14 >= v13)
        {
          v16 = ((char *)v14 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = v13 - (_QWORD)*a4;
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v19);
          else
            v20 = 0;
          v21 = &v20[8 * v16];
          *(_QWORD *)v21 = *v12;
          v15 = v21 + 8;
          v23 = (char *)*a4;
          v22 = (char *)a4[1];
          if (v22 != *a4)
          {
            do
            {
              v24 = *((_QWORD *)v22 - 1);
              v22 -= 8;
              *((_QWORD *)v21 - 1) = v24;
              v21 -= 8;
            }
            while (v22 != v23);
            v22 = (char *)*a4;
          }
          *a4 = v21;
          a4[1] = v15;
          a4[2] = &v20[8 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v14 = *v12;
          v15 = v14 + 1;
        }
        a4[1] = v15;
        v25 = ((unint64_t)((char *)v15 - (_BYTE *)*a4) >> 3) - 1;
        v26 = (char *)__p[1];
        if (__p[1] >= (void *)*(_QWORD *)&v41[0])
        {
          v28 = (char *)__p[0];
          v29 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = *(_QWORD *)&v41[0] - (unint64_t)__p[0];
          if ((uint64_t)(*(_QWORD *)&v41[0] - (unint64_t)__p[0]) >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v41, v32);
            v28 = (char *)__p[0];
            v26 = (char *)__p[1];
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[4 * v29];
          *(_DWORD *)v34 = v25;
          v27 = v34 + 4;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          __p[0] = v34;
          __p[1] = v27;
          *(_QWORD *)&v41[0] = &v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)__p[1] = v25;
          v27 = v26 + 4;
        }
        __p[1] = v27;
        ++v12;
      }
      v36 = v38[1];
      if (v36 >= v38[2])
      {
        v37 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v38, (uint64_t)__p);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v38, (uint64_t)__p);
        v37 = v36 + 24;
      }
      v38[1] = v37;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v9;
    }
    while (v9 < (uint64_t)(a1[1] - *a1) >> 3);
  }
}

void sub_1ADE3CB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::AlignmentProcessorBlock::stitchPivotQueries@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int **v10;
  int *v11;
  int *v12;
  uint64_t **v13;

  result = std::vector<std::vector<std::pair<int,int>>>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v8 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    v9 = 0;
    do
    {
      v10 = (int **)(v8 + 24 * v9);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          v13 = (uint64_t **)(*a1 + 24 * *v11);
          result = std::vector<std::pair<int,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,int>*>,std::__wrap_iter<std::pair<int,int>*>>(*a3 + 24 * v9, *(_QWORD *)(*a3 + 24 * v9), *v13, v13[1], v13[1] - *v13);
          ++v11;
        }
        while (v11 != v12);
        v8 = *a2;
        v7 = a2[1];
      }
      ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) > v9);
  }
  return result;
}

void sub_1ADE3CC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::parseQueryRanges(uint64_t a1@<X1>, __int128 *a2@<X2>, const void **a3@<X3>, void **a4@<X8>)
{
  uint64_t Child;
  uint64_t i;
  size_t v10;
  __int128 *p_p;
  const void *v12;
  unsigned int v13;
  size_t v14;
  __int128 *v15;
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  __int128 __p;
  char v31;
  int v32;
  std::string v33;
  _BYTE v34[32];
  _BYTE v35[71];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  quasar::PTree::PTree((quasar::PTree *)v35);
  quasar::PTree::PTree((quasar::PTree *)&v32);
  Child = quasar::PTree::getChild(a1, a2);
  v32 = *(_DWORD *)Child;
  std::string::operator=(&v33, (const std::string *)(Child + 8));
  if (&v32 != (int *)Child)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v34, *(std::string **)(Child + 32), *(std::string **)(Child + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Child + 40) - *(_QWORD *)(Child + 32)) >> 3));
  v34[24] = *(_BYTE *)(Child + 56);
  for (i = quasar::PTree::begin((quasar::PTree *)&v32); i != quasar::PTree::end((quasar::PTree *)&v32); i += 88)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = *((unsigned __int8 *)a3 + 23);
    else
      v10 = (size_t)a3[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 5);
    if (v31 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if (v10)
    {
      if (*((char *)a3 + 23) >= 0)
        v12 = a3;
      else
        v12 = *a3;
      memmove(p_p, v12, v10);
    }
    strcpy((char *)p_p + v10, "start");
    v13 = quasar::PTree::getInt<int>(i + 24, &__p);
    if (v31 < 0)
      operator delete((void *)__p);
    if (*((char *)a3 + 23) >= 0)
      v14 = *((unsigned __int8 *)a3 + 23);
    else
      v14 = (size_t)a3[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 3);
    if (v31 >= 0)
      v15 = &__p;
    else
      v15 = (__int128 *)__p;
    if (v14)
    {
      if (*((char *)a3 + 23) >= 0)
        v16 = a3;
      else
        v16 = *a3;
      memmove(v15, v16, v14);
    }
    *(_DWORD *)((char *)v15 + v14) = 6581861;
    v17 = quasar::PTree::getInt<int>(i + 24, &__p);
    if (v31 < 0)
      operator delete((void *)__p);
    v19 = (unint64_t *)a4[1];
    v18 = (unint64_t)a4[2];
    if ((unint64_t)v19 >= v18)
    {
      v21 = ((char *)v19 - (_BYTE *)*a4) >> 3;
      if ((unint64_t)(v21 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v22 = v18 - (_QWORD)*a4;
      v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1))
        v23 = v21 + 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v24);
      else
        v25 = 0;
      v26 = (unint64_t *)&v25[8 * v21];
      *v26 = v13 | (unint64_t)(v17 << 32);
      v20 = v26 + 1;
      v28 = (char *)*a4;
      v27 = (char *)a4[1];
      if (v27 != *a4)
      {
        do
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v26 = v29;
        }
        while (v27 != v28);
        v27 = (char *)*a4;
      }
      *a4 = v26;
      a4[1] = v20;
      a4[2] = &v25[8 * v24];
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v19 = v13 | (unint64_t)(v17 << 32);
      v20 = v19 + 1;
    }
    a4[1] = v20;
  }
  quasar::PTree::~PTree((quasar::PTree *)&v32);
  quasar::PTree::~PTree((quasar::PTree *)v35);
}

void sub_1ADE3D06C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  JUMPOUT(0x1ADE3D08CLL);
}

void quasar::AlignmentProcessorBlock::writeResult(uint64_t a1, _QWORD *a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  quasar *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  char *v23;
  uint64_t v24;
  unsigned int *v25;
  char **v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v48;
  unsigned int v49;
  std::string *v50;
  void *v51;
  std::string v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *__p[2];
  char v58;
  void *v59;
  std::string v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[64];
  void *v66[2];
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v6 = quasar::OptionValue<std::string>::value((_QWORD *)(a1 + 464 + *(_QWORD *)(*(_QWORD *)(a1 + 464) - 24)));
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(v6 + 8) != 21)
    {
LABEL_13:
      v45 = quasar::MetaInfo::get((quasar::MetaInfo *)(a4 + 192));
      quasar::PTree::PTree((quasar::PTree *)&v68);
      v10 = *a3;
      v46 = a3[1];
      if (*a3 != v46)
      {
        v11 = 0;
        do
        {
          v13 = (quasar *)*v10;
          v12 = v10[1];
          quasar::PTree::PTree((quasar::PTree *)v66);
          v49 = v12;
          quasar::PTree::PTree((quasar::PTree *)v65);
          v48 = v11;
          v14 = *a2 + 24 * v11;
          v15 = *(int **)v14;
          v16 = *(int **)(v14 + 8);
          while (v15 != v16)
          {
            quasar::PTree::PTree((quasar::PTree *)&v59);
            std::string::basic_string[abi:ne180100]<0>(__p, "start");
            v17 = *v15;
            LODWORD(v51) = quasar::getType((quasar *)*v15);
            std::to_string(&v52, v17);
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 1;
            quasar::PTree::putChild((uint64_t)&v59, (uint64_t)__p, (uint64_t)&v51, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v51);
            if (v58 < 0)
              operator delete(__p[0]);
            std::string::basic_string[abi:ne180100]<0>(__p, "end");
            v18 = v15[1];
            LODWORD(v51) = quasar::getType((quasar *)v18);
            std::to_string(&v52, v18);
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 1;
            quasar::PTree::putChild((uint64_t)&v59, (uint64_t)__p, (uint64_t)&v51, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v51);
            if (v58 < 0)
              operator delete(__p[0]);
            quasar::PTree::addChild((quasar::PTree *)v66, (const quasar::PTree *)&v59);
            quasar::PTree::~PTree((quasar::PTree *)&v59);
            v15 += 2;
          }
          std::string::basic_string[abi:ne180100]<0>(&v51, "start");
          LODWORD(v59) = quasar::getType(v13);
          std::to_string(&v60, (int)v13);
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v64 = 1;
          quasar::PTree::putChild((uint64_t)v65, (uint64_t)&v51, (uint64_t)&v59, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v59);
          if (v52.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v51);
          std::string::basic_string[abi:ne180100]<0>(&v51, "end");
          LODWORD(v59) = quasar::getType((quasar *)v49);
          std::to_string(&v60, v49);
          v61 = 0;
          v62 = 0;
          v63 = 0;
          v64 = 1;
          quasar::PTree::putChild((uint64_t)v65, (uint64_t)&v51, (uint64_t)&v59, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v59);
          if (v52.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v51);
          std::string::basic_string[abi:ne180100]<0>(&v59, "projections");
          quasar::PTree::putChild((uint64_t)v65, (uint64_t)&v59, (uint64_t)v66, 1);
          if (v60.__r_.__value_.__s.__data_[15] < 0)
            operator delete(v59);
          quasar::PTree::addChild((quasar::PTree *)&v68, (const quasar::PTree *)v65);
          v11 = v48 + 1;
          quasar::PTree::~PTree((quasar::PTree *)v65);
          quasar::PTree::~PTree((quasar::PTree *)v66);
          v10 += 2;
        }
        while (v10 != v46);
      }
      std::string::basic_string[abi:ne180100]<0>(v66, "alignment-queries");
      quasar::PTree::putChild(v45, (uint64_t)v66, (uint64_t)&v68, 1);
      if (v67 < 0)
        operator delete(v66[0]);
      quasar::PTree::~PTree((quasar::PTree *)&v68);
      return;
    }
    v6 = *(_QWORD *)v6;
  }
  else if (v7 != 21)
  {
    goto LABEL_13;
  }
  if (*(_QWORD *)v6 != 0x7275746375727473
    || *(_QWORD *)(v6 + 8) != 0x69646572705F6465
    || *(_QWORD *)(v6 + 13) != 0x6E6F697463696465)
  {
    goto LABEL_13;
  }
  v19 = (uint64_t *)(a4 + 192);
  if (quasar::MetaInfo::hasStructuredPrediction(v19, (uint64_t)"gender", 6))
  {
    v20 = quasar::MetaInfo::structuredPrediction(v19, (uint64_t)"gender", 6);
    v21 = *(_QWORD *)(v20 + 32);
    v50 = *(std::string **)(v20 + 40);
    if ((std::string *)v21 != v50)
    {
      v22 = *a3;
      do
      {
        v23 = (char *)a3[1];
        if (v22 == (unsigned int *)v23)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          v25 = v22;
          do
          {
            if (*v25 == *(_DWORD *)(v21 + 48) && v25[1] == *(_DWORD *)(v21 + 52))
              break;
            ++v24;
            v25 += 2;
          }
          while (v25 != (unsigned int *)v23);
        }
        if (v24 == (v23 - (char *)v22) >> 3)
        {
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v68 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Alignment query not found for source span (", 43);
          v43 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, ")");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v68);
        }
        v26 = (char **)(v21 + 56);
        std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(v21 + 56), (uint64_t)(*(_QWORD *)(*a2 + 24 * v24 + 8) - *(_QWORD *)(*a2 + 24 * v24)) >> 3);
        v27 = *a2 + 24 * v24;
        v29 = *(unsigned int **)v27;
        v28 = *(unsigned int **)(v27 + 8);
        if (*(unsigned int **)v27 != v28)
        {
          v30 = (_QWORD *)(v21 + 72);
          v31 = *(uint64_t **)(v21 + 64);
          do
          {
            v32 = *v29;
            v33 = v29[1];
            if ((unint64_t)v31 >= *v30)
            {
              v34 = ((char *)v31 - *v26) >> 3;
              if ((unint64_t)(v34 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v35 = *v30 - (_QWORD)*v26;
              v36 = v35 >> 2;
              if (v35 >> 2 <= (unint64_t)(v34 + 1))
                v36 = v34 + 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v36;
              if (v37)
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v21 + 72, v37);
              else
                v38 = 0;
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = v32 | (v33 << 32);
              v31 = (uint64_t *)(v39 + 8);
              v41 = *(char **)(v21 + 56);
              v40 = *(char **)(v21 + 64);
              if (v40 != v41)
              {
                do
                {
                  v42 = *((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *((_QWORD *)v39 - 1) = v42;
                  v39 -= 8;
                }
                while (v40 != v41);
                v40 = *v26;
              }
              *(_QWORD *)(v21 + 56) = v39;
              *(_QWORD *)(v21 + 64) = v31;
              *(_QWORD *)(v21 + 72) = &v38[8 * v37];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *v31++ = v32 | (v33 << 32);
            }
            *(_QWORD *)(v21 + 64) = v31;
            v29 += 2;
          }
          while (v29 != v28);
        }
        v22 = *a3;
        *(_QWORD *)(v21 + 48) = *(_QWORD *)&(*a3)[2 * v24];
        v21 += 80;
      }
      while ((std::string *)v21 != v50);
    }
  }
  else if (quasar::gLogLevel >= 6)
  {
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"No gender alternative spans present.", 36);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v68);
  }
}

void quasar::AlignmentProcessorBlock::handleSourceInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, _BYTE *a7, uint64_t a8)
{
  quasar::TranslationPhraseInternal *v8;
  uint64_t v9;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  int v23;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *i;
  uint64_t *v31;
  quasar::TranslationPhraseInternal *v32;
  const std::string *v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  int v38;
  int v39;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v44;
  _QWORD *v45;
  void *__p[2];
  char v47;
  void *v48[2];
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v8 = *(quasar::TranslationPhraseInternal **)a2;
  v9 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v9)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v50, "AlignmentProcessorBlock::handleSourceInput() called called with empty input");
    goto LABEL_89;
  }
  if (0x8F5C28F5C28F5C29 * (v9 >> 3) >= 2)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v50, "AlignmentProcessorBlock::handleSourceInput() called called with multiple inputs");
LABEL_89:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v50);
  }
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v18 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)v8 + 192));
  v19 = quasar::OptionValue<std::string>::value((_QWORD *)(a1 + 464 + *(_QWORD *)(*(_QWORD *)(a1 + 464) - 24)));
  v20 = *(char *)(v19 + 23);
  if (v20 < 0)
  {
    if (*(_QWORD *)(v19 + 8) != 7)
      goto LABEL_12;
    v19 = *(_QWORD *)v19;
  }
  else if (v20 != 7)
  {
    goto LABEL_12;
  }
  if (*(_DWORD *)v19 == 1634100580 && *(_DWORD *)(v19 + 3) == 1953264993)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "alignment-queries");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::AlignmentProcessorBlock::parseQueryRanges(v18, (__int128 *)v48, (const void **)__p, (void **)&v50);
    v27 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v27;
      operator delete(v27);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = v50;
    *(_QWORD *)(a4 + 16) = v51;
    *(_QWORD *)&v51 = 0;
    v50 = 0uLL;
    if (v47 < 0)
      operator delete(__p[0]);
    if (v49 < 0)
      operator delete(v48[0]);
    std::string::basic_string[abi:ne180100]<0>(v48, "alignment-span-info");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::AlignmentProcessorBlock::parseQueryRanges(v18, (__int128 *)v48, (const void **)__p, (void **)&v50);
    v28 = *(void **)a8;
    if (*(_QWORD *)a8)
    {
      *(_QWORD *)(a8 + 8) = v28;
      operator delete(v28);
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_QWORD *)(a8 + 16) = 0;
    }
    *(_OWORD *)a8 = v50;
    *(_QWORD *)(a8 + 16) = v51;
    *(_QWORD *)&v51 = 0;
    v50 = 0uLL;
    if (v47 < 0)
      operator delete(__p[0]);
    if (v49 < 0)
      operator delete(v48[0]);
    goto LABEL_44;
  }
LABEL_12:
  v22 = quasar::OptionValue<std::string>::value((_QWORD *)(a1 + 464 + *(_QWORD *)(*(_QWORD *)(a1 + 464) - 24)));
  v23 = *(char *)(v22 + 23);
  if (v23 < 0)
  {
    if (*(_QWORD *)(v22 + 8) != 21)
      goto LABEL_44;
    v22 = *(_QWORD *)v22;
  }
  else if (v23 != 21)
  {
    goto LABEL_44;
  }
  if (*(_QWORD *)v22 == 0x7275746375727473
    && *(_QWORD *)(v22 + 8) == 0x69646572705F6465
    && *(_QWORD *)(v22 + 13) == 0x6E6F697463696465)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "gender_alternatives.spans");
    std::string::basic_string[abi:ne180100]<0>(__p, "source.");
    quasar::AlignmentProcessorBlock::parseQueryRanges(v18, (__int128 *)v48, (const void **)__p, (void **)&v50);
    v26 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v26;
      operator delete(v26);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = v50;
    *(_QWORD *)(a4 + 16) = v51;
    *(_QWORD *)&v51 = 0;
    v50 = 0uLL;
    if (v47 < 0)
      operator delete(__p[0]);
    if (v49 < 0)
      operator delete(v48[0]);
    *(_QWORD *)(a8 + 8) = *(_QWORD *)a8;
  }
LABEL_44:
  *a7 = 0;
  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
    return;
  quasar::TranslationPhraseInternal::extractAlignmentProjections(*(quasar::TranslationPhraseInternal **)a2, (uint64_t *)v48);
  v29 = v48[0];
  for (i = v48[1]; v29 != i; v29 += 3)
  {
    if (*v29 != v29[1])
      *a7 = 1;
  }
  if (*a7)
  {
    if (a6 != (_QWORD *)a4)
      std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(a6, *(uint64_t **)a4, *(uint64_t **)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
    quasar::AlignmentProcessorBlock::pivotTransformQueries((_QWORD *)a4, v48, a5, (void **)&v50);
    v31 = *(uint64_t **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v31;
      operator delete(v31);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = v50;
    *(_QWORD *)(a4 + 16) = v51;
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v50, *(quasar::TranslationPhraseInternal **)a2);
LABEL_60:
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v50;
    *(_QWORD *)(a3 + 16) = v51;
    goto LABEL_63;
  }
  v32 = *(quasar::TranslationPhraseInternal **)a2;
  v33 = *(const std::string **)(*(_QWORD *)a2 + 136);
  if (*(_QWORD *)(*(_QWORD *)a2 + 144) - (_QWORD)v33 != 136)
  {
    if (quasar::gLogLevel >= 1)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"For alignment mapping to work properly, ensure whole string provided as first token.", 84);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v50);
      v32 = *(quasar::TranslationPhraseInternal **)a2;
    }
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v50, v32);
    goto LABEL_60;
  }
  std::string::operator=((std::string *)a3, v33);
LABEL_63:
  if (*(char *)(a3 + 23) >= 0)
    v34 = *(unsigned __int8 *)(a3 + 23);
  else
    v34 = *(_DWORD *)(a3 + 8);
  v35 = *(uint64_t **)a4;
  v36 = *(uint64_t **)(a4 + 8);
  if (*(uint64_t **)a4 != v36)
  {
    do
    {
      v37 = *(_DWORD *)v35;
      if ((*(_DWORD *)v35 & 0x80000000) != 0 || v37 >= v34)
      {
        v39 = quasar::gLogLevel;
      }
      else
      {
        v38 = *((_DWORD *)v35 + 1);
        v39 = quasar::gLogLevel;
        if ((v38 & 0x80000000) == 0)
        {
          if (v38 < v34 || quasar::gLogLevel <= 1)
            goto LABEL_79;
LABEL_78:
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v50 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Query range [", 13);
          v41 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
          v42 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"] is out of bounds.", 19);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v50);
          v37 = *(_DWORD *)v35;
          v39 = quasar::gLogLevel;
          goto LABEL_79;
        }
      }
      if (v39 >= 2)
        goto LABEL_78;
LABEL_79:
      if (v37 > *((_DWORD *)v35 + 1) && v39 >= 1)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Query range [", 13);
        v44 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"] is illegal.", 13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v50);
      }
      ++v35;
    }
    while (v35 != v36);
  }
  *(_QWORD *)&v50 = v48;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
}

void quasar::AlignmentProcessorBlock::handleSegmentEncInput(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  __int128 *v9;
  __int128 *i;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  std::string __p;
  _BYTE __v[48];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v4 = a2[1] - *a2;
  if (!v4)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "AlignmentProcessorBlock::handleSegmentEncInput() called called with empty input");
    goto LABEL_25;
  }
  if (0x8F5C28F5C28F5C29 * (v4 >> 3) >= 2)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "AlignmentProcessorBlock::handleSegmentEncInput() called called with multiple inputs");
LABEL_25:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  std::vector<std::string>::__clear[abi:ne180100](a3);
  std::vector<std::string>::__clear[abi:ne180100](a4);
  v8 = *a2;
  v9 = *(__int128 **)(*a2 + 136);
  for (i = *(__int128 **)(v8 + 144); v9 != i; v9 = (__int128 *)((char *)v9 + 136))
  {
    v11 = a3[1];
    if (v11 >= a3[2])
    {
      v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v9);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v9);
      v12 = v11 + 24;
    }
    a3[1] = v12;
    quasar::TranslationTokenInternal::strippedText((std::string *)v9, &__p);
    v14 = a4[1];
    v13 = a4[2];
    if (v14 >= v13)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a4) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a4) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      *(_QWORD *)&__v[32] = a4 + 2;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a4 + 2), v19);
      else
        v20 = 0;
      v21 = &v20[24 * v16];
      *(_QWORD *)__v = v20;
      *(_QWORD *)&__v[8] = v21;
      *(_QWORD *)&__v[24] = &v20[24 * v19];
      v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v21 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v21 = v22;
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)&__v[16] = v21 + 24;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, (std::__split_buffer<std::string> *)__v);
      v23 = a4[1];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a4[1] = v23;
      if (v24 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v14 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v14 = v15;
      a4[1] = v14 + 24;
    }
  }
}

void sub_1ADE3E1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::__split_buffer<std::wstring> *a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::handlePDecInput(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::vector<std::string>::pointer end;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  std::string *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  std::string __p;
  std::vector<std::string> v41;
  __int128 *v42;
  std::string *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _BYTE __v[48];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  if (a2[1] == *a2)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "AlignmentProcessorBlock::handlePDecInput() called with empty input");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  v8 = *a5;
  v9 = a5[1];
  while (v9 != v8)
  {
    v9 -= 24;
    *(_QWORD *)__v = v9;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  a5[1] = v8;
  v10 = *a3;
  v11 = a3[1];
  while (v11 != v10)
  {
    v11 -= 24;
    *(_QWORD *)__v = v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  v38 = a5;
  a3[1] = v10;
  v12 = *a4;
  v13 = a4[1];
  while (v13 != v12)
  {
    v13 -= 24;
    *(_QWORD *)__v = v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
  a4[1] = v12;
  v14 = *a2;
  v37 = a2[1];
  if (*a2 != v37)
  {
    do
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      memset(&v41, 0, sizeof(v41));
      v16 = *(_QWORD *)(v14 + 136);
      v15 = *(_QWORD *)(v14 + 144);
      while (v16 != v15)
      {
        v17 = v46;
        if ((unint64_t)v46 >= v47)
        {
          v18 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v45, v16 + 32);
        }
        else
        {
          *v46 = 0;
          v17[1] = 0;
          v17[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, *(const void **)(v16 + 32), *(_QWORD *)(v16 + 40), (uint64_t)(*(_QWORD *)(v16 + 40) - *(_QWORD *)(v16 + 32)) >> 2);
          v18 = (uint64_t)(v17 + 3);
        }
        v46 = (_QWORD *)v18;
        v19 = v43;
        if ((unint64_t)v43 >= v44)
        {
          v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v42, (__int128 *)v16);
        }
        else
        {
          if (*(char *)(v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
          }
          else
          {
            v20 = *(_OWORD *)v16;
            v43->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          v21 = v19 + 1;
        }
        v43 = v21;
        quasar::TranslationTokenInternal::strippedText((std::string *)v16, &__p);
        end = v41.__end_;
        if (v41.__end_ >= v41.__end_cap_.__value_)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_ - (char *)v41.__begin_) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) > v25)
            v25 = 0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v25;
          *(_QWORD *)&__v[32] = &v41.__end_cap_;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v41.__end_cap_, v26);
          else
            v27 = 0;
          v28 = &v27[24 * v24];
          *(_QWORD *)__v = v27;
          *(_QWORD *)&__v[8] = v28;
          *(_QWORD *)&__v[24] = &v27[24 * v26];
          v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((_QWORD *)v28 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v28 = v29;
          memset(&__p, 0, sizeof(__p));
          *(_QWORD *)&__v[16] = v28 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(&v41, (std::__split_buffer<std::string> *)__v);
          v30 = v41.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
          v41.__end_ = v30;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v41.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
          v41.__end_ = end + 1;
        }
        v16 += 136;
      }
      v31 = v38[1];
      if (v31 >= v38[2])
      {
        v32 = std::vector<std::vector<std::vector<int>>>::__push_back_slow_path<std::vector<std::vector<int>> const&>(v38, &v45);
      }
      else
      {
        std::vector<std::vector<std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<int>> const&>((uint64_t)v38, &v45);
        v32 = v31 + 24;
      }
      v38[1] = v32;
      v33 = a3[1];
      if (v33 >= a3[2])
      {
        v34 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a3, &v42);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a3, &v42);
        v34 = v33 + 24;
      }
      a3[1] = v34;
      v35 = a4[1];
      if (v35 >= a4[2])
      {
        v36 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a4, (__int128 **)&v41);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a4, (__int128 **)&v41);
        v36 = v35 + 24;
      }
      a4[1] = v36;
      *(_QWORD *)__v = &v41;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
      *(_QWORD *)__v = &v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
      *(_QWORD *)__v = &v45;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
      v14 += 200;
    }
    while (v14 != v37);
  }
}

void sub_1ADE3E5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***__pa, uint64_t a15, uint64_t a16, std::__split_buffer<std::wstring> **a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::wstring> *a20,uint64_t a21,uint64_t a22,char a23)
{
  __pa = (void ***)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a20 = (std::__split_buffer<std::wstring> *)&a23;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::handleSegmentDecInput(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  quasar::TranslationPhraseInternal *v9;
  quasar::TranslationPhraseInternal *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = *a2;
  v6 = a2[1];
  if (v6 == v5)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "AlignmentProcessorBlock::handleSegmentDecInput() called with empty input");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if ((uint64_t **)a3 != a2)
    std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(a3, v5, v6, 0x8F5C28F5C28F5C29 * (v6 - v5));
  std::vector<std::string>::__clear[abi:ne180100](a4);
  v9 = (quasar::TranslationPhraseInternal *)*a2;
  v10 = (quasar::TranslationPhraseInternal *)a2[1];
  while (v9 != v10)
  {
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)__p, v9);
    v11 = a4[1];
    if (v11 >= a4[2])
    {
      v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)__p);
    }
    else
    {
      if (SBYTE7(v15) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a4[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 16) = v15;
        *(_OWORD *)v11 = v12;
      }
      v13 = v11 + 24;
      a4[1] = v11 + 24;
    }
    a4[1] = v13;
    if (SBYTE7(v15) < 0)
      operator delete(__p[0]);
    v9 = (quasar::TranslationPhraseInternal *)((char *)v9 + 200);
  }
}

void sub_1ADE3E7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::AlignmentProcessorBlock::handleTokenizedInput(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void **v32;

  v3 = *a2;
  v4 = a2[1];
  if (v4 == *a2)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v15, "AlignmentProcessorBlock::handleTokenizedInput() called with empty input");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v15);
  }
  v6 = *a3;
  v7 = a3[1];
  if (v7 != *a3)
  {
    do
    {
      v7 -= 24;
      *(_QWORD *)&v15 = v7;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    }
    while (v7 != v6);
    v3 = *a2;
    v4 = a2[1];
  }
  for (a3[1] = v6; v3 != v4; v3 += 200)
  {
    v15 = 0uLL;
    *(_QWORD *)&v16 = 0;
    v9 = *(_QWORD *)(v3 + 136);
    v10 = *(_QWORD *)(v3 + 144);
    if (v9 != v10)
    {
      v11 = 0;
      do
      {
        if ((unint64_t)v11 >= (unint64_t)v16)
        {
          v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v15, (__int128 *)v9);
        }
        else
        {
          if (*(char *)(v9 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
          }
          else
          {
            v12 = *(_OWORD *)v9;
            v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
          }
          ++v11;
        }
        *((_QWORD *)&v15 + 1) = v11;
        v9 += 136;
      }
      while (v9 != v10);
    }
    v13 = a3[1];
    if (v13 >= a3[2])
    {
      v14 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a3, (__int128 **)&v15);
    }
    else
    {
      std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a3, (__int128 **)&v15);
      v14 = v13 + 24;
    }
    a3[1] = v14;
    v32 = (void **)&v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  }
}

void sub_1ADE3E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(v9 - 72) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 72));
  _Unwind_Resume(a1);
}

void quasar::AlignmentProcessorBlock::processBody(quasar::AlignmentProcessorBlock *this)
{
  unint64_t v1;
  uint64_t Value;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int ***v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int *i;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  void *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t j;
  int *v36;
  uint64_t v37;
  int v38;
  uint64_t **v41;
  unint64_t v42;
  unint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  std::vector<int>::size_type v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t k;
  uint64_t *v56;
  char *v57;
  _DWORD *v58;
  void **v60;
  char *v61;
  _DWORD *v62;
  unint64_t v64;
  void *v65;
  void *v66;
  void *__p[2];
  uint64_t v69;
  char v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  void *v75[2];
  uint64_t v76;
  char v77;
  void *v78;
  char *v79;
  uint64_t v80;
  void *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84[3];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[3];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[3];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99[3];
  __int128 *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  _BYTE *v104;
  uint64_t v105;
  void *v106[2];
  uint64_t v107;
  void *v108[2];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;

  v106[0] = 0;
  v106[1] = 0;
  v107 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  memset(v99, 0, sizeof(v99));
  v96 = 0;
  v97 = 0;
  v98 = 0;
  memset(v95, 0, sizeof(v95));
  v92 = 0;
  v93 = 0;
  v94 = 0;
  memset(v91, 0, sizeof(v91));
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  memset(v84, 0, sizeof(v84));
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  Value = quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 640));
  v77 = 0;
  quasar::AlignmentProcessorBlock::handleSourceInput((uint64_t)this, Value, (uint64_t)v106, (uint64_t)&v103, v84, &v81, &v77, (uint64_t)&v78);
  v3 = (_QWORD *)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 696));
  quasar::AlignmentProcessorBlock::handleSegmentEncInput((uint64_t)v3, v3, (uint64_t *)&v100, (uint64_t *)v99);
  v4 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 752));
  quasar::AlignmentProcessorBlock::handlePDecInput((uint64_t)v4, v4, &v96, v95, &v92);
  v5 = (uint64_t **)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 808));
  quasar::AlignmentProcessorBlock::handleSegmentDecInput((uint64_t)v5, v5, (uint64_t)v91, &v88);
  if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 22))
  {
    v6 = (uint64_t *)quasar::ProcessingInput::getValue((quasar::AlignmentProcessorBlock *)((char *)this + 864));
    quasar::AlignmentProcessorBlock::handleTokenizedInput((uint64_t)v6, v6, &v85);
  }
  if (v89 - v88 != v97 - v96)
  {
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v110 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"size of n-best list from segment-decoder and PDec-translator are different", 74);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v110);
  }
  v8 = v92;
  v7 = v93;
  if (v93 != v92)
  {
    v9 = 0;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v100) >> 3);
    v1 = 24;
    do
    {
      v11 = (unsigned int ***)(v8 + 24 * v9);
      v12 = *v11;
      v13 = v11[1];
      if (*v11 != v13)
      {
        do
        {
          v15 = *v12;
          v14 = v12[1];
          while (v15 != v14)
          {
            v16 = *v15;
            if ((v16 & 0x80000000) != 0 || v10 <= v16)
            {
              if (v15 != v14)
              {
                for (i = v15 + 1; i != v14; ++i)
                {
                  v18 = *i;
                  if ((v18 & 0x80000000) == 0 && v10 > v18)
                    *v15++ = v18;
                }
              }
              if (v15 != v14)
                v12[1] = v15;
              break;
            }
            ++v15;
          }
          v12 += 3;
        }
        while (v12 != v13);
        v8 = v92;
        v7 = v93;
      }
      ++v9;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3));
  }
  if (v103 != v104)
  {
    v75[0] = 0;
    v75[1] = 0;
    v76 = 0;
    v19 = (_QWORD *)((char *)this + 24);
    if (*(_BYTE *)quasar::OptionValue<BOOL>::value((quasar::AlignmentProcessorBlock *)((char *)this
                                                                                      + *(_QWORD *)(*((_QWORD *)this + 3)
                                                                                                  - 24)
                                                                                      + 24)))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::splitStringSimple((uint64_t)v106, (uint64_t *)__p, (uint64_t *)&v110);
      if (SHIBYTE(v69) < 0)
        operator delete(__p[0]);
      v20 = (char *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 40);
      quasar::AlignmentProcessorBlock::computeTokenCharMapping((uint64_t)v106, (__int128 **)&v110, *v20, __p);
      v65 = __p[0];
      *(_OWORD *)v75 = *(_OWORD *)__p;
      v76 = v69;
      __p[0] = &v110;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v21 = v65;
    }
    else
    {
      v22 = (_QWORD *)((char *)this + 320);
      if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 40))
      {
        v23 = (char *)quasar::OptionValue<BOOL>::value(v22);
        quasar::AlignmentProcessorBlock::computeTokenCharMapping((uint64_t)v106, v99, *v23, (void **)&v110);
      }
      else
      {
        v24 = (char *)quasar::OptionValue<BOOL>::value(v22);
        quasar::AlignmentProcessorBlock::computeTokenCharMapping((uint64_t)v106, &v100, *v24, (void **)&v110);
      }
      v21 = (void *)v110;
      *(_OWORD *)v75 = v110;
      v76 = v111;
    }
    v25 = v21;
    if (v89 != v88)
    {
      v26 = 0;
      v27 = (_QWORD *)((char *)this + 320);
      while (1)
      {
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24))))
        {
          quasar::AlignmentProcessorBlock::computeWordLevelAlignments((uint64_t *)&v100, (uint64_t *)(v96 + 24 * v26), (uint64_t *)(v92 + 24 * v26), (uint64_t *)&v110);
          v28 = (uint64_t *)(v92 + 24 * v26);
          std::vector<std::vector<int>>::__vdeallocate(v28);
          *(_OWORD *)v28 = v110;
          v28[2] = v111;
          v110 = 0uLL;
          *(_QWORD *)&v111 = 0;
          __p[0] = &v110;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        quasar::AlignmentProcessorBlock::computeRangeProjections((unsigned int **)&v103, (uint64_t *)(v92 + 24 * v26), (uint64_t *)v75, (uint64_t *)&v73);
        v71 = 0uLL;
        v72 = 0;
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24))))
        {
          v29 = v88;
          std::string::basic_string[abi:ne180100]<0>(__p, " ");
          quasar::splitStringSimple(v29 + 24 * v26, (uint64_t *)__p, (uint64_t *)&v110);
          if (SHIBYTE(v69) < 0)
            operator delete(__p[0]);
          v30 = v88;
          v31 = (char *)quasar::OptionValue<BOOL>::value(v27);
          quasar::AlignmentProcessorBlock::computeTokenCharMapping(v30 + 24 * v26, (__int128 **)&v110, *v31, __p);
          v66 = __p[0];
          v71 = *(_OWORD *)__p;
          v72 = v69;
          __p[0] = &v110;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v32 = v66;
        }
        else
        {
          if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v27))
            quasar::AlignmentProcessorBlock::computeTokenCharMapping(v88 + 24 * v26, (__int128 **)(v95[0] + 24 * v26), 0, (void **)&v110);
          else
            quasar::AlignmentProcessorBlock::computeTokenCharMapping(v88 + 24 * v26, (__int128 **)(v96 + 24 * v26), 0, (void **)&v110);
          v32 = (void *)v110;
          v71 = v110;
          v72 = v111;
        }
        v33 = v32;
        v34 = *((_QWORD *)&v73 + 1);
        for (j = v73; j != v34; j += 24)
        {
          quasar::AlignmentProcessorBlock::computeCharLevelSpans((int **)j, (uint64_t *)&v71, (char **)&v110);
          v36 = *(int **)j;
          if (*(_QWORD *)j)
          {
            *(_QWORD *)(j + 8) = v36;
            operator delete(v36);
            *(_QWORD *)j = 0;
            *(_QWORD *)(j + 8) = 0;
            *(_QWORD *)(j + 16) = 0;
          }
          *(_OWORD *)j = v110;
          *(_QWORD *)(j + 16) = v111;
        }
        v37 = quasar::OptionValue<std::string>::value((quasar::AlignmentProcessorBlock *)((char *)this
                                                                                        + *(_QWORD *)(*((_QWORD *)this + 58) - 24)
                                                                                        + 464));
        v38 = *(char *)(v37 + 23);
        if (v38 < 0)
        {
          if (*(_QWORD *)(v37 + 8) == 21)
          {
            v37 = *(_QWORD *)v37;
LABEL_55:
            if (*(_QWORD *)v37 == 0x7275746375727473
              && *(_QWORD *)(v37 + 8) == 0x69646572705F6465
              && *(_QWORD *)(v37 + 13) == 0x6E6F697463696465)
            {
              goto LABEL_81;
            }
          }
        }
        else if (v38 == 21)
        {
          goto LABEL_55;
        }
        v41 = (uint64_t **)(v88 + 24 * v26);
        if (*((char *)v41 + 23) < 0)
        {
          v41 = (uint64_t **)*v41;
          v42 = *(_QWORD *)(v88 + 24 * v26 + 8);
        }
        else
        {
          v42 = *((unsigned __int8 *)v41 + 23);
        }
        quasar::utf8::codepointsCtr(v41, v42, 0, v42, (unint64_t)__p);
        if (v70)
        {
          v43 = SLODWORD(__p[0]);
          v1 = v1 & 0xFFFFFFFF00000000 | LODWORD(__p[0]);
        }
        else
        {
          *(_OWORD *)v108 = *(_OWORD *)__p;
          v109 = v69;
          __p[0] = 0;
          __p[1] = 0;
          v69 = 0;
          if (quasar::gLogLevel >= 1)
          {
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v115 = 0u;
            v116 = 0u;
            v113 = 0u;
            v114 = 0u;
            v111 = 0u;
            v112 = 0u;
            v110 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
            if (v109 >= 0)
              v44 = v108;
            else
              v44 = (void **)v108[0];
            if (v109 >= 0)
              v45 = HIBYTE(v109);
            else
              v45 = (uint64_t)v108[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)v44, v45);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v110);
          }
          if (SHIBYTE(v109) < 0)
            operator delete(v108[0]);
          v43 = 0;
          v1 &= 0xFFFFFFFF00000000;
          if (!v70 && SHIBYTE(v69) < 0)
          {
            operator delete(__p[0]);
            v43 = 0;
          }
        }
        quasar::AlignmentProcessorBlock::alignUnalignedChars((int ***)&v73, v43);
LABEL_81:
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 22))
        {
          if (v89 - v88 != v86 - v85)
          {
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            v117 = 0u;
            v118 = 0u;
            v115 = 0u;
            v116 = 0u;
            v113 = 0u;
            v114 = 0u;
            v111 = 0u;
            v112 = 0u;
            v110 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"Tokenizer did not return same number of phrases as the Translator.", 66);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v110);
          }
          v46 = (uint64_t **)(v88 + 24 * v26);
          if (*((char *)v46 + 23) < 0)
          {
            v46 = (uint64_t **)*v46;
            v47 = *(_QWORD *)(v88 + 24 * v26 + 8);
          }
          else
          {
            v47 = *((unsigned __int8 *)v46 + 23);
          }
          quasar::utf8::codepointsCtr(v46, v47, 0, v47, (unint64_t)__p);
          if (v70)
          {
            v48 = SLODWORD(__p[0]);
            v64 = v64 & 0xFFFFFFFF00000000 | LODWORD(__p[0]);
          }
          else
          {
            *(_OWORD *)v108 = *(_OWORD *)__p;
            v109 = v69;
            __p[0] = 0;
            __p[1] = 0;
            v69 = 0;
            if (quasar::gLogLevel >= 1)
            {
              v125 = 0u;
              v126 = 0u;
              v123 = 0u;
              v124 = 0u;
              v121 = 0u;
              v122 = 0u;
              v119 = 0u;
              v120 = 0u;
              v117 = 0u;
              v118 = 0u;
              v115 = 0u;
              v116 = 0u;
              v113 = 0u;
              v114 = 0u;
              v111 = 0u;
              v112 = 0u;
              v110 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
              if (v109 >= 0)
                v49 = v108;
              else
                v49 = (void **)v108[0];
              if (v109 >= 0)
                v50 = HIBYTE(v109);
              else
                v50 = (uint64_t)v108[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)v49, v50);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v110);
            }
            if (SHIBYTE(v109) < 0)
              operator delete(v108[0]);
            v48 = 0;
            v64 &= 0xFFFFFFFF00000000;
            if (!v70 && SHIBYTE(v69) < 0)
            {
              operator delete(__p[0]);
              v48 = 0;
            }
          }
          v51 = v88;
          v52 = v85;
          v53 = (char *)quasar::OptionValue<BOOL>::value(v27);
          quasar::AlignmentProcessorBlock::computeTokenCharMapping(v51 + 24 * v26, (__int128 **)(v52 + 24 * v26), *v53, __p);
          quasar::AlignmentProcessorBlock::avoidCrossingWords(v48, (uint64_t ***)&v73, (uint64_t *)__p, (uint64_t *)&v110);
          std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v73);
          v73 = v110;
          v74 = v111;
          *(_QWORD *)&v111 = 0;
          v110 = 0uLL;
          v108[0] = &v110;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v108);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        v54 = *((_QWORD *)&v73 + 1);
        for (k = v73; k != v54; k += 24)
        {
          quasar::AlignmentProcessorBlock::mergeContinuousRanges((uint64_t **)k, (char **)&v110);
          v56 = *(uint64_t **)k;
          if (*(_QWORD *)k)
          {
            *(_QWORD *)(k + 8) = v56;
            operator delete(v56);
            *(_QWORD *)k = 0;
            *(_QWORD *)(k + 8) = 0;
            *(_QWORD *)(k + 16) = 0;
          }
          *(_OWORD *)k = v110;
          *(_QWORD *)(k + 16) = v111;
        }
        if (v77)
        {
          quasar::AlignmentProcessorBlock::stitchPivotQueries(&v73, v84, &v110);
          std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v73);
          v73 = v110;
          v74 = v111;
          *(_QWORD *)&v111 = 0;
          v110 = 0uLL;
          __p[0] = &v110;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v57 = (char *)v78;
          if (v78 != v79)
          {
            v58 = v81;
            if (v79 - (_BYTE *)v78 == v82 - (_BYTE *)v81)
            {
              while (*(_DWORD *)v57 == *v58 && *((_DWORD *)v57 + 1) == v58[1])
              {
                v57 += 8;
                v58 += 2;
                if (v57 == v79)
                  goto LABEL_117;
              }
            }
            if (quasar::gLogLevel >= 5)
              goto LABEL_130;
            goto LABEL_131;
          }
LABEL_117:
          v60 = &v81;
        }
        else
        {
          v61 = (char *)v78;
          if (v78 != v79)
          {
            v62 = v103;
            if (v79 - (_BYTE *)v78 == v104 - (_BYTE *)v103)
            {
              while (*(_DWORD *)v61 == *v62 && *((_DWORD *)v61 + 1) == v62[1])
              {
                v61 += 8;
                v62 += 2;
                if (v61 == v79)
                  goto LABEL_126;
              }
            }
            if (quasar::gLogLevel >= 5)
            {
LABEL_130:
              v125 = 0u;
              v126 = 0u;
              v123 = 0u;
              v124 = 0u;
              v121 = 0u;
              v122 = 0u;
              v119 = 0u;
              v120 = 0u;
              v117 = 0u;
              v118 = 0u;
              v115 = 0u;
              v116 = 0u;
              v113 = 0u;
              v114 = 0u;
              v111 = 0u;
              v112 = 0u;
              v110 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"resetting original query ranges from alignment-span-info", 56);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v110);
            }
LABEL_131:
            v60 = &v78;
            goto LABEL_132;
          }
LABEL_126:
          v60 = &v103;
        }
LABEL_132:
        quasar::AlignmentProcessorBlock::writeResult((uint64_t)this, &v73, (unsigned int **)v60, v91[0] + 200 * v26);
        if (v33)
          operator delete(v33);
        *(_QWORD *)&v110 = &v73;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
        if (++v26 >= 0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3))
        {
          v25 = v75[0];
          break;
        }
      }
    }
    if (v25)
    {
      v75[1] = v25;
      operator delete(v25);
    }
  }
  quasar::ProcessingBlock::send((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t)v91, 0);
  if (v78)
    operator delete(v78);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  *(_QWORD *)&v110 = v84;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = &v85;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = v91;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = &v92;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = v95;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = &v96;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  *(_QWORD *)&v110 = &v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
}

void sub_1ADE3F6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&STACK[0x220]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (!a23 && a22 < 0)
    operator delete(a17);
  JUMPOUT(0x1ADE3F78CLL);
}

void sub_1ADE3F6CC()
{
  JUMPOUT(0x1ADE3F6D4);
}

void sub_1ADE3F708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    JUMPOUT(0x1ADE3F718);
  JUMPOUT(0x1ADE3F78CLL);
}

void sub_1ADE3F720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a67;
  void *a70;
  void *a71;
  void *a72;
  char a73;

  if ((a22 & 0x80000000) == 0)
  {
    a17 = &a28;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
    if (a32)
    {
      a33 = a32;
      operator delete(a32);
    }
    if (a37)
      operator delete(a37);
    if (a40)
    {
      a41 = a40;
      operator delete(a40);
    }
    a17 = &a43;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a46;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a52;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a55;
    std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a58;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a61;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    a17 = &a67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
    if (a70)
    {
      a71 = a70;
      operator delete(a70);
    }
    if (a73 < 0)
      operator delete(a72);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1ADE3F798);
}

void sub_1ADE3F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *a67;
  uint64_t a68;
  void *a70;
  char a72;

  a17 = (uint64_t)&a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34)
    operator delete(a34);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  a17 = (uint64_t)&a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a49;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a52;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a58;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (uint64_t)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a72 < 0)
    operator delete(a70);
  _Unwind_Resume(a1);
}

void sub_1ADE3F750()
{
  JUMPOUT(0x1ADE3F7B0);
}

void sub_1ADE3F75C()
{
  JUMPOUT(0x1ADE3F7ACLL);
}

void sub_1ADE3F768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *a67;
  void *a68;
  void *a70;
  char a72;

  a17 = (void **)&STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  if (a34)
    operator delete(a34);
  if (a37)
  {
    a38 = a37;
    operator delete(a37);
  }
  a17 = (void **)&a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a49;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a52;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a58;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  a17 = (void **)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (a67)
  {
    a68 = a67;
    operator delete(a67);
  }
  if (a72 < 0)
    operator delete(a70);
  _Unwind_Resume(a1);
}

void sub_1ADE3F788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *a67;
  void *a68;
  void *a70;
  char a72;
  void *v72;

  if (v72)
  {
    a22 = (uint64_t)v72;
    operator delete(v72);
  }
  a17 = &a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a29)
  {
    a30 = a29;
    operator delete(a29);
  }
  if (a34)
    operator delete(a34);
  if (a37)
  {
    a38 = a37;
    operator delete(a37);
  }
  a17 = &a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a49;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a52;
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a55;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a58;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a67)
  {
    a68 = a67;
    operator delete(a67);
  }
  if (a72 < 0)
    operator delete(a70);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::AlignmentProcessorBlock::processBody(quasar::AlignmentProcessorBlock *this)
{
  quasar::AlignmentProcessorBlock::processBody((quasar::AlignmentProcessorBlock *)((char *)this - 632));
}

uint64_t quasar::AlignmentProcessorBlock::minConfigVersion(quasar::AlignmentProcessorBlock *this)
{
  return 156;
}

uint64_t `virtual thunk to'quasar::AlignmentProcessorBlock::minConfigVersion(quasar::AlignmentProcessorBlock *this)
{
  return 156;
}

void quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADE3F980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::AlignmentProcessorOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 920));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 920));
  JUMPOUT(0x1AF44D190);
}

const char *quasar::AlignmentProcessorBlock::blockType(quasar::AlignmentProcessorBlock *this)
{
  return "AlignmentProcessorBlock";
}

_QWORD *quasar::AlignmentProcessorBlock::inputs@<X0>(quasar::AlignmentProcessorBlock *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *result;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 22);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    result = operator new(0x28uLL);
    *a2 = result;
    v6 = result + 5;
    a2[2] = result + 5;
    *result = (char *)this + 640;
    result[1] = (char *)this + 696;
    result[2] = (char *)this + 752;
    result[3] = (char *)this + 808;
    result[4] = (char *)this + 864;
  }
  else
  {
    result = operator new(0x20uLL);
    *a2 = result;
    v6 = result + 4;
    a2[2] = result + 4;
    *result = (char *)this + 640;
    result[1] = (char *)this + 696;
    result[2] = (char *)this + 752;
    result[3] = (char *)this + 808;
  }
  a2[1] = v6;
  return result;
}

_QWORD *`non-virtual thunk to'quasar::AlignmentProcessorBlock::inputs@<X0>(quasar::AlignmentProcessorBlock *this@<X0>, _QWORD *a2@<X8>)
{
  return quasar::AlignmentProcessorBlock::inputs((quasar::AlignmentProcessorBlock *)((char *)this - 632), a2);
}

void `non-virtual thunk to'quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 36);
}

{
  quasar::ProcessingBlock::~ProcessingBlock(this + 36);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 920));
}

{
  char **v1;

  v1 = (char **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 115);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::AlignmentProcessorBlock::blockType(quasar::AlignmentProcessorBlock *this)
{
  return "AlignmentProcessorBlock";
}

void quasar::AlignmentProcessorBlock::~AlignmentProcessorBlock(quasar::AlignmentProcessorBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  *((_QWORD *)this + 79) = a2[6];
  v6 = (void **)((char *)this + 896);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 887) < 0)
    operator delete(*((void **)this + 108));
  v6 = (void **)((char *)this + 840);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 831) < 0)
    operator delete(*((void **)this + 101));
  v6 = (void **)((char *)this + 784);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 775) < 0)
    operator delete(*((void **)this + 94));
  v6 = (void **)((char *)this + 728);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  v6 = (void **)((char *)this + 672);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  quasar::AlignmentProcessorOptions::~AlignmentProcessorOptions((quasar::AlignmentProcessorBlock *)((char *)this + 8));
}

char *std::vector<std::vector<std::pair<int,int>>>::__append(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v8 = a1[2];
  result = (char *)(a1 + 2);
  v7 = v8;
  v9 = *((_QWORD *)result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = v9 + 24 * a2;
      v16 = 24 * a2;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        result = std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)v9, *a3, a3[1], a3[1] - *a3);
        v9 += 24;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<std::pair<int,int>>>::__construct_at_end((char *)&v17, a2, a3);
    std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(a1, &v17);
    return (char *)std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_1ADE3FE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__split_buffer<std::vector<std::pair<int,int>>>::__construct_at_end(char *result, uint64_t a2, uint64_t **a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (a2)
  {
    v6 = v4 + 24 * a2;
    v7 = 24 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      result = std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)v4, *a3, a3[1], a3[1] - *a3);
      v4 += 24;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

void sub_1ADE3FEEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::pair<int,int>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADE3FF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*,std::vector<std::pair<int,int>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)v4, *v6, v6[1], v6[1] - *v6);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE40014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::vector<std::pair<int,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::vector<std::pair<int,int>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADE400E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<int>> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADE40150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<int>>>::__push_back_slow_path<std::vector<std::vector<int>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADE40264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_1ADE4031C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE40404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1ADE404F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE40640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1ADE407A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1ADE40828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE40C7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE40D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1ADE40E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE40F50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1ADE41040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE41188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE412DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1ADE41350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE41784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE41860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1ADE4199C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1ADE41ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1ADE41C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE41D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1ADE41ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADE42540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE42604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void quasar::truncateUtf8(std::string *__str@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  unsigned int v3;
  unint64_t size;
  std::string *v5;
  _OWORD v7[17];

  if ((a2 & 0x80000000) != 0)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Logic error: truncateUtf8 called with negative length (should not happen)");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  v3 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size <= a2)
    {
      std::string::__init_copy_ctor_external(a3, __str->__r_.__value_.__l.__data_, size);
      return;
    }
  }
  else if (v3 <= a2)
  {
    *a3 = *__str;
    return;
  }
  if ((v3 & 0x80u) == 0)
    v5 = __str;
  else
    v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  while ((v5->__r_.__value_.__s.__data_[a2] & 0xC0) == 0x80)
  {
    if ((int)a2-- <= 0)
    {
      a2 = -1;
      break;
    }
  }
  std::string::basic_string(a3, __str, 0, (int)a2, (std::allocator<char> *)v7);
}

_BYTE *quasar::getOverridesFromTranslationOptions@<X0>(_BYTE *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*result)
  {
    result = (_BYTE *)std::vector<std::string>::__emplace_back_slow_path<char const* const&>(a2, quasar::CONFIG_OVERRIDE_ENABLE_DISAMBIGUATION_ALTERNATIVES);
    a2[1] = (uint64_t)result;
  }
  return result;
}

void sub_1ADE427D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::translateInputMapToString(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *p_v;
  uint64_t end_high;
  _QWORD *v17;
  std::vector<std::string>::pointer end;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  void *first;
  uint64_t begin;
  _QWORD *v35;
  uint64_t v36;
  void *__p[2];
  std::string::size_type v38;
  void **v39[2];
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  _BYTE v44[152];
  std::vector<std::string> v45;
  std::__split_buffer<std::string> __v;

  memset(&v45, 0, sizeof(v45));
  std::vector<std::string>::reserve(&v45, a1[2]);
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    v5 = (void **)*MEMORY[0x1E0DE4F50];
    v6 = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v8 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"\"", 1);
      v10 = *((char *)v3 + 55);
      if (v10 >= 0)
        v11 = (uint64_t)(v3 + 4);
      else
        v11 = v3[4];
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)v3 + 55);
      else
        v12 = v3[5];
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\": [", 4);
      __p[0] = ",";
      __p[1] = (void *)1;
      quasar::join<std::vector<quasar::TranslationPhrase>>(v3 + 7, (uint64_t *)__p);
      if (SHIBYTE(__v.__end_) >= 0)
        p_v = &__v;
      else
        p_v = __v.__first_;
      if (SHIBYTE(__v.__end_) >= 0)
        end_high = HIBYTE(__v.__end_);
      else
        end_high = (uint64_t)__v.__begin_;
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_v, end_high);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      std::stringbuf::str();
      end = v45.__end_;
      if (v45.__end_ >= v45.__end_cap_.__value_)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v45.__end_ - (char *)v45.__begin_) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 3) > v21)
          v21 = 0x5555555555555556 * (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 3) >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v21;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v45.__end_cap_;
        if (v22)
          v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v45.__end_cap_, v22);
        else
          v23 = 0;
        v24 = v23 + v20;
        __v.__first_ = v23;
        __v.__begin_ = v24;
        __v.__end_cap_.__value_ = &v23[v22];
        v25 = *(_OWORD *)__p;
        v24->__r_.__value_.__r.__words[2] = v38;
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        __p[1] = 0;
        v38 = 0;
        __p[0] = 0;
        __v.__end_ = v24 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v45, &__v);
        v26 = v45.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v45.__end_ = v26;
        if (SHIBYTE(v38) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        v45.__end_->__r_.__value_.__r.__words[2] = v38;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
        v45.__end_ = end + 1;
      }
      v39[0] = v5;
      *(void ***)((char *)v39 + (_QWORD)*(v5 - 3)) = v6;
      v40 = v7;
      v41 = v8;
      if (v43 < 0)
        operator delete(v42);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](v44);
      v27 = (_QWORD *)v3[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v3[2];
          v29 = *v28 == (_QWORD)v3;
          v3 = v28;
        }
        while (!v29);
      }
      v3 = v28;
    }
    while (v28 != v2);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"{", 1);
  v31 = MEMORY[0x1E0DE4F50];
  v32 = v30;
  __p[0] = ",";
  __p[1] = (void *)1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v45, (uint64_t *)__p);
  if (SHIBYTE(__v.__end_) >= 0)
    first = &__v;
  else
    first = __v.__first_;
  if (SHIBYTE(__v.__end_) >= 0)
    begin = HIBYTE(__v.__end_);
  else
    begin = (uint64_t)__v.__begin_;
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)first, begin);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"}", 1);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::stringbuf::str();
  v39[0] = *(void ***)v31;
  v36 = *(_QWORD *)(v31 + 72);
  *(void ***)((char *)v39 + (unint64_t)*(v39[0] - 3)) = *(void ***)(v31 + 64);
  v40 = v36;
  v41 = MEMORY[0x1E0DE4FB8] + 16;
  if (v43 < 0)
    operator delete(v42);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v44);
  v39[0] = (void **)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v39);
}

void sub_1ADE42BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  a15 = (void **)(v15 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<quasar::TranslationPhrase>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::TranslationPhrase>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADE42D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::getTranslatorOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  char **v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  const void *v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  uint64_t v45;
  quasar::PTree *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  __int128 v53;
  int v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  uint64_t v65;
  std::string *v66;
  __int128 v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  uint64_t v73;
  char **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  int64x2_t v88;
  uint64_t *v89;
  uint64_t v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string::size_type v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  std::string *v99;
  __int128 v100;
  int v101;
  const std::string::value_type *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  __int128 v115;
  _QWORD *v116;
  std::string *v117;
  std::string::size_type v118;
  _QWORD *v119;
  _QWORD *v120;
  size_t v121;
  _QWORD *v122;
  _QWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  size_t v129;
  _QWORD *v130;
  _QWORD *v131;
  std::string *v132;
  std::string::size_type v133;
  _QWORD *v134;
  _QWORD *v135;
  size_t v136;
  _QWORD *v137;
  _QWORD *v138;
  std::string *v139;
  __int128 v140;
  int v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  std::string *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  __int128 v153;
  std::string *v154;
  std::string::size_type v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  __int128 v159;
  int v160;
  const std::string::value_type *v161;
  std::string::size_type v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  __int128 v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  std::string *v171;
  std::string::size_type v172;
  std::string *v173;
  __int128 v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  std::string *v181;
  std::string::size_type v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  std::string *v189;
  std::string::size_type v190;
  std::string::size_type v191;
  uint64_t v193;
  int v194;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  std::string *v204;
  __int128 v205;
  int v206;
  const std::string::value_type *v207;
  std::string::size_type v208;
  std::string *v209;
  __int128 v210;
  std::string *v211;
  __int128 v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  __int128 v216;
  std::string *v217;
  std::string::size_type v218;
  std::string *v219;
  __int128 v220;
  std::string *v221;
  __int128 v222;
  std::string *v223;
  __int128 v224;
  uint64_t Ptree;
  uint64_t ChildOptional;
  std::string v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string v234;
  std::string v235;
  std::string v236;
  std::string v237;
  std::string v238;
  std::string v239;
  std::string v240;
  _BYTE __p[32];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  std::string v257;
  std::string v258;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  v9 = (char **)&unk_1EED88000;
  v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v258, (char *)quasar::MT_DECODERS_SECTION);
  v11 = std::string::append(v10, ".");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&v257, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  Ptree = quasar::SystemConfig::getPtree(a1, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  memset(&v257, 0, sizeof(v257));
  if (*((char *)a3 + 23) >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  if (!v18)
    goto LABEL_36;
  v19 = *(unsigned __int8 *)(a4 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a4 + 8);
  if (v19)
  {
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 1);
    if (__p[23] >= 0)
      v20 = __p;
    else
      v20 = *(_BYTE **)__p;
    if (*((char *)a3 + 23) >= 0)
      v21 = a3;
    else
      v21 = *a3;
    memmove(v20, v21, v18);
    *(_WORD *)&v20[v18] = 45;
    v22 = *(char *)(a4 + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)a4;
    else
      v23 = *(const std::string::value_type **)a4;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a4 + 23);
    else
      v24 = *(_QWORD *)(a4 + 8);
    v25 = std::string::append((std::string *)__p, v23, v24);
    v26 = v25->__r_.__value_.__r.__words[0];
    v258.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v258.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
    v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v257.__r_.__value_.__l.__data_);
    v257.__r_.__value_.__r.__words[0] = v26;
    v257.__r_.__value_.__l.__size_ = v258.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v258.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v257.__r_.__value_.__s + 23) = v27;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  else
  {
LABEL_36:
    MEMORY[0x1AF44C914](&v257, "");
    if (quasar::gLogLevel >= 5)
    {
      v255 = 0u;
      v256 = 0u;
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v242 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"missing source or target locale, skipping parsing language-pair-specific-settings", 81);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v240, (char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v28 = std::string::append(&v240, ".");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v257;
  else
    v30 = (std::string *)v257.__r_.__value_.__r.__words[0];
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  else
    size = v257.__r_.__value_.__l.__size_;
  v32 = std::string::append(&v258, (const std::string::value_type *)v30, size);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  ChildOptional = quasar::PTree::getChildOptional(Ptree, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (!ChildOptional)
    goto LABEL_72;
  std::string::basic_string[abi:ne180100]<0>(&v238, (char *)quasar::MT_DECODERS_SECTION);
  v34 = std::string::append(&v238, ".");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = *(char *)(a2 + 23);
  if (v36 >= 0)
    v37 = (const std::string::value_type *)a2;
  else
    v37 = *(const std::string::value_type **)a2;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a2 + 23);
  else
    v38 = *(_QWORD *)(a2 + 8);
  v39 = std::string::append(&v239, v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v240, ".");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v258, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v43->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion(a1, 35, 0, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::BLOCKS_SECTION);
  v45 = quasar::PTree::getChildOptional(ChildOptional, (uint64_t)__p);
  v46 = (quasar::PTree *)v45;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v46)
    {
LABEL_72:
      v47 = 0;
      v48 = 0;
      v49 = 1;
      goto LABEL_73;
    }
  }
  else if (!v45)
  {
    goto LABEL_72;
  }
  if (quasar::PTree::empty(v46))
    goto LABEL_72;
  std::string::basic_string[abi:ne180100]<0>(&v234, (char *)quasar::MT_DECODERS_SECTION);
  v204 = std::string::append(&v234, ".");
  v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v205;
  v204->__r_.__value_.__l.__size_ = 0;
  v204->__r_.__value_.__r.__words[2] = 0;
  v204->__r_.__value_.__r.__words[0] = 0;
  v206 = *(char *)(a2 + 23);
  if (v206 >= 0)
    v207 = (const std::string::value_type *)a2;
  else
    v207 = *(const std::string::value_type **)a2;
  if (v206 >= 0)
    v208 = *(unsigned __int8 *)(a2 + 23);
  else
    v208 = *(_QWORD *)(a2 + 8);
  v209 = std::string::append(&v235, v207, v208);
  v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v210;
  v209->__r_.__value_.__l.__size_ = 0;
  v209->__r_.__value_.__r.__words[2] = 0;
  v209->__r_.__value_.__r.__words[0] = 0;
  v211 = std::string::append(&v236, ".");
  v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v212;
  v211->__r_.__value_.__l.__size_ = 0;
  v211->__r_.__value_.__r.__words[2] = 0;
  v211->__r_.__value_.__r.__words[0] = 0;
  v213 = std::string::append(&v237, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v214;
  v213->__r_.__value_.__l.__size_ = 0;
  v213->__r_.__value_.__r.__words[2] = 0;
  v213->__r_.__value_.__r.__words[0] = 0;
  v215 = std::string::append(&v238, ".");
  v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v216;
  v215->__r_.__value_.__l.__size_ = 0;
  v215->__r_.__value_.__r.__words[2] = 0;
  v215->__r_.__value_.__r.__words[0] = 0;
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = &v257;
  else
    v217 = (std::string *)v257.__r_.__value_.__r.__words[0];
  if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v218 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
  else
    v218 = v257.__r_.__value_.__l.__size_;
  v219 = std::string::append(&v239, (const std::string::value_type *)v217, v218);
  v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v220;
  v219->__r_.__value_.__l.__size_ = 0;
  v219->__r_.__value_.__r.__words[2] = 0;
  v219->__r_.__value_.__r.__words[0] = 0;
  v221 = std::string::append(&v240, ".");
  v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v222;
  v221->__r_.__value_.__l.__size_ = 0;
  v221->__r_.__value_.__r.__words[2] = 0;
  v221->__r_.__value_.__r.__words[0] = 0;
  v223 = std::string::append(&v258, (const std::string::value_type *)quasar::BLOCKS_SECTION);
  v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v223->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v224;
  v223->__r_.__value_.__l.__size_ = 0;
  v223->__r_.__value_.__r.__words[2] = 0;
  v223->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion(a1, 96, 0, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v234.__r_.__value_.__l.__data_);
  v49 = quasar::PTree::size(v46);
  v47 = quasar::PTree::begin(v46);
  v48 = 1;
LABEL_73:
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::BLOCK_DEFINITION_SECTION);
  v50 = quasar::PTree::getChildOptional(Ptree, (uint64_t)__p);
  v51 = v50;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v51)
      goto LABEL_95;
  }
  else if (!v50)
  {
    goto LABEL_95;
  }
  std::string::basic_string[abi:ne180100]<0>(&v237, (char *)quasar::MT_DECODERS_SECTION);
  v52 = std::string::append(&v237, ".");
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = *(char *)(a2 + 23);
  if (v54 >= 0)
    v55 = (const std::string::value_type *)a2;
  else
    v55 = *(const std::string::value_type **)a2;
  if (v54 >= 0)
    v56 = *(unsigned __int8 *)(a2 + 23);
  else
    v56 = *(_QWORD *)(a2 + 8);
  v57 = std::string::append(&v238, v55, v56);
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  v59 = std::string::append(&v239, ".");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  v61 = std::string::append(&v240, (const std::string::value_type *)quasar::BLOCK_DEFINITION_SECTION);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v63 = std::string::append(&v258, ".");
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v63->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion(a1, 96, 0, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
LABEL_95:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v49 >= 1)
  {
    v65 = 0;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v239, v9[17]);
      v66 = std::string::append(&v239, ".");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v240.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = *(char *)(a2 + 23);
      v69 = v68 >= 0 ? (const std::string::value_type *)a2 : *(const std::string::value_type **)a2;
      v70 = v68 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
      v71 = std::string::append(&v240, v69, v70);
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v258.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      v73 = operator new();
      v74 = v9;
      quasar::TranslatorOptions::TranslatorOptions(v73, Ptree, &v258);
      v76 = a6[1];
      v75 = (unint64_t)a6[2];
      if ((unint64_t)v76 >= v75)
      {
        v78 = v76 - *a6;
        if ((unint64_t)(v78 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v79 = v75 - (_QWORD)*a6;
        v80 = v79 >> 2;
        if (v79 >> 2 <= (unint64_t)(v78 + 1))
          v80 = v78 + 1;
        v81 = (unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v80;
        *(_QWORD *)&v242 = a6 + 2;
        v82 = v81
            ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a6 + 2), v81): 0;
        v83 = (uint64_t *)&v82[8 * v78];
        v84 = &v82[8 * v81];
        *(_QWORD *)&__p[24] = v84;
        *v83 = v73;
        v77 = v83 + 1;
        *(_QWORD *)&__p[16] = v83 + 1;
        v86 = *a6;
        v85 = a6[1];
        if (v85 == *a6)
        {
          v88 = vdupq_n_s64((unint64_t)v85);
        }
        else
        {
          do
          {
            v87 = *--v85;
            *v85 = 0;
            *--v83 = v87;
          }
          while (v85 != v86);
          v88 = *(int64x2_t *)a6;
          v84 = *(char **)&__p[24];
          v77 = *(uint64_t **)&__p[16];
        }
        *a6 = v83;
        a6[1] = v77;
        *(int64x2_t *)&__p[8] = v88;
        v89 = a6[2];
        a6[2] = (uint64_t *)v84;
        *(_QWORD *)&__p[24] = v89;
        *(_QWORD *)__p = v88.i64[0];
        std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *v76 = v73;
        v77 = v76 + 1;
      }
      a6[1] = v77;
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
      v9 = v74;
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      v90 = (*a6)[v65];
      if (v48)
        break;
      if (!ChildOptional)
        goto LABEL_231;
LABEL_197:
      quasar::TranslatorOptions::setLocales(v90, (const std::string *)a3, (const std::string *)a4);
      std::string::basic_string[abi:ne180100]<0>(&v236, v9[17]);
      v139 = std::string::append(&v236, ".");
      v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      v237.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      v141 = *(char *)(a2 + 23);
      if (v141 >= 0)
        v142 = (const std::string::value_type *)a2;
      else
        v142 = *(const std::string::value_type **)a2;
      if (v141 >= 0)
        v143 = *(unsigned __int8 *)(a2 + 23);
      else
        v143 = *(_QWORD *)(a2 + 8);
      v144 = std::string::append(&v237, v142, v143);
      v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
      v238.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v145;
      v144->__r_.__value_.__l.__size_ = 0;
      v144->__r_.__value_.__r.__words[2] = 0;
      v144->__r_.__value_.__r.__words[0] = 0;
      v146 = std::string::append(&v238, ".");
      v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
      v239.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v147;
      v146->__r_.__value_.__l.__size_ = 0;
      v146->__r_.__value_.__r.__words[2] = 0;
      v146->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v235, (char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
      if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = &v235;
      else
        v148 = (std::string *)v235.__r_.__value_.__r.__words[0];
      if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v149 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      else
        v149 = v235.__r_.__value_.__l.__size_;
      v150 = std::string::append(&v239, (const std::string::value_type *)v148, v149);
      v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
      v240.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v151;
      v150->__r_.__value_.__l.__size_ = 0;
      v150->__r_.__value_.__r.__words[2] = 0;
      v150->__r_.__value_.__r.__words[0] = 0;
      v152 = std::string::append(&v240, ".");
      v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
      v258.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v153;
      v152->__r_.__value_.__l.__size_ = 0;
      v152->__r_.__value_.__r.__words[2] = 0;
      v152->__r_.__value_.__r.__words[0] = 0;
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = &v257;
      else
        v154 = (std::string *)v257.__r_.__value_.__r.__words[0];
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v155 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
      else
        v155 = v257.__r_.__value_.__l.__size_;
      v156 = std::string::append(&v258, (const std::string::value_type *)v154, v155);
      v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v156->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v157;
      v156->__r_.__value_.__l.__size_ = 0;
      v156->__r_.__value_.__r.__words[2] = 0;
      v156->__r_.__value_.__r.__words[0] = 0;
      quasar::OptionsBase::update((void (***)(void **__return_ptr))v90, ChildOptional, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v236.__r_.__value_.__l.__data_);
        if (!v48)
          goto LABEL_277;
      }
      else
      {
LABEL_231:
        if (!v48)
          goto LABEL_277;
      }
      std::string::basic_string[abi:ne180100]<0>(&v231, v9[17]);
      v158 = std::string::append(&v231, ".");
      v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
      v232.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v159;
      v158->__r_.__value_.__l.__size_ = 0;
      v158->__r_.__value_.__r.__words[2] = 0;
      v158->__r_.__value_.__r.__words[0] = 0;
      v160 = *(char *)(a2 + 23);
      if (v160 >= 0)
        v161 = (const std::string::value_type *)a2;
      else
        v161 = *(const std::string::value_type **)a2;
      if (v160 >= 0)
        v162 = *(unsigned __int8 *)(a2 + 23);
      else
        v162 = *(_QWORD *)(a2 + 8);
      v163 = std::string::append(&v232, v161, v162);
      v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
      v233.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v164;
      v163->__r_.__value_.__l.__size_ = 0;
      v163->__r_.__value_.__r.__words[2] = 0;
      v163->__r_.__value_.__r.__words[0] = 0;
      v165 = std::string::append(&v233, ".");
      v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
      v234.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v166;
      v165->__r_.__value_.__l.__size_ = 0;
      v165->__r_.__value_.__r.__words[2] = 0;
      v165->__r_.__value_.__r.__words[0] = 0;
      v167 = std::string::append(&v234, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
      v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
      v235.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v168;
      v167->__r_.__value_.__l.__size_ = 0;
      v167->__r_.__value_.__r.__words[2] = 0;
      v167->__r_.__value_.__r.__words[0] = 0;
      v169 = std::string::append(&v235, ".");
      v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
      v236.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v170;
      v169->__r_.__value_.__l.__size_ = 0;
      v169->__r_.__value_.__r.__words[2] = 0;
      v169->__r_.__value_.__r.__words[0] = 0;
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v171 = &v257;
      else
        v171 = (std::string *)v257.__r_.__value_.__r.__words[0];
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v172 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
      else
        v172 = v257.__r_.__value_.__l.__size_;
      v173 = std::string::append(&v236, (const std::string::value_type *)v171, v172);
      v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
      v237.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v174;
      v173->__r_.__value_.__l.__size_ = 0;
      v173->__r_.__value_.__r.__words[2] = 0;
      v173->__r_.__value_.__r.__words[0] = 0;
      v175 = std::string::append(&v237, ".");
      v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
      v238.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v176;
      v175->__r_.__value_.__l.__size_ = 0;
      v175->__r_.__value_.__r.__words[2] = 0;
      v175->__r_.__value_.__r.__words[0] = 0;
      v177 = std::string::append(&v238, (const std::string::value_type *)quasar::BLOCKS_SECTION);
      v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      v239.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      v179 = std::string::append(&v239, "[");
      v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
      v240.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v180;
      v179->__r_.__value_.__l.__size_ = 0;
      v179->__r_.__value_.__r.__words[2] = 0;
      v179->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v230, v65);
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v181 = &v230;
      else
        v181 = (std::string *)v230.__r_.__value_.__r.__words[0];
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v182 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
      else
        v182 = v230.__r_.__value_.__l.__size_;
      v183 = std::string::append(&v240, (const std::string::value_type *)v181, v182);
      v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      v258.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      v185 = std::string::append(&v258, "]");
      v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v185->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v186;
      v185->__r_.__value_.__l.__size_ = 0;
      v185->__r_.__value_.__r.__words[2] = 0;
      v185->__r_.__value_.__r.__words[0] = 0;
      quasar::OptionsBase::update((void (***)(void **__return_ptr))v90, v47 + 24, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
      if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v230.__r_.__value_.__l.__data_);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v236.__r_.__value_.__l.__data_);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v233.__r_.__value_.__l.__data_);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v231.__r_.__value_.__l.__data_);
      v47 += 88;
LABEL_277:
      if (!a5)
        goto LABEL_296;
      v187 = quasar::OptionValue<std::string>::value((_QWORD *)(v90 + 320));
      if (*(char *)(v187 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)v187, *(_QWORD *)(v187 + 8));
      }
      else
      {
        v188 = *(_OWORD *)v187;
        v258.__r_.__value_.__r.__words[2] = *(_QWORD *)(v187 + 16);
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v188;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "<overlay-settings>");
      quasar::OptionsBase::update((void (***)(void **__return_ptr))v90, a5, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v258.__r_.__value_.__l.__size_ != 16)
          goto LABEL_295;
        v189 = (std::string *)v258.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) != 16)
          goto LABEL_296;
        v189 = &v258;
      }
      v191 = v189->__r_.__value_.__r.__words[0];
      v190 = v189->__r_.__value_.__l.__size_;
      if (v191 == 0x625F657361726870 && v190 == 0x796C6E6F5F6B6F6FLL)
      {
        v193 = quasar::OptionValue<std::string>::value((_QWORD *)(v90 + 320));
        v194 = *(char *)(v193 + 23);
        if (v194 < 0)
        {
          if (*(_QWORD *)(v193 + 8) != 7)
            goto LABEL_294;
          v193 = *(_QWORD *)v193;
        }
        else if (v194 != 7)
        {
          goto LABEL_294;
        }
        if (*(_DWORD *)v193 == 1634953572 && *(_DWORD *)(v193 + 3) == 1701601889)
        {
          v196 = (_QWORD *)(v90 + 2944);
          v197 = quasar::OptionValue<std::string>::value(v196);
          v198 = *(unsigned __int8 *)(v197 + 23);
          if ((v198 & 0x80u) != 0)
            v198 = *(_QWORD *)(v197 + 8);
          if (v198 && quasar::gLogLevel >= 2)
          {
            v255 = 0u;
            v256 = 0u;
            v253 = 0u;
            v254 = 0u;
            v251 = 0u;
            v252 = 0u;
            v249 = 0u;
            v250 = 0u;
            v247 = 0u;
            v248 = 0u;
            v245 = 0u;
            v246 = 0u;
            v243 = 0u;
            v244 = 0u;
            v242 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Changing phrase book mode using command line overlay causes use of previously ignored translation model file: ", 110);
            v200 = quasar::OptionValue<std::string>::value(v196);
            v201 = *(char *)(v200 + 23);
            if (v201 >= 0)
              v202 = v200;
            else
              v202 = *(_QWORD *)v200;
            if (v201 >= 0)
              v203 = *(unsigned __int8 *)(v200 + 23);
            else
              v203 = *(_QWORD *)(v200 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, v202, v203);
            quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          }
        }
      }
LABEL_294:
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
LABEL_295:
        operator delete(v258.__r_.__value_.__l.__data_);
LABEL_296:
      if (++v65 == v49)
        goto LABEL_319;
    }
    std::string::basic_string[abi:ne180100]<0>(&v240, (char *)quasar::BLOCK_DEFINITION_NAME);
    quasar::PTree::getStringOptional(v47 + 24, (uint64_t)&v240, (std::string *)__p);
    if (__p[24])
    {
      v258 = *(std::string *)__p;
      memset(__p, 0, 24);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v258, "");
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v240.__r_.__value_.__l.__data_);
    v91 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
    if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = v258.__r_.__value_.__l.__size_;
    if (!v91)
    {
LABEL_195:
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
      goto LABEL_197;
    }
    std::string::basic_string[abi:ne180100]<0>(&v239, (char *)quasar::BLOCK_DEFINITION_SECTION);
    v92 = std::string::append(&v239, ".");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = &v258;
    else
      v94 = (std::string *)v258.__r_.__value_.__r.__words[0];
    if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v95 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
    else
      v95 = v258.__r_.__value_.__l.__size_;
    v96 = std::string::append(&v240, (const std::string::value_type *)v94, v95);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v96->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    v98 = quasar::PTree::getChildOptional(Ptree, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v240.__r_.__value_.__l.__data_);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v239.__r_.__value_.__l.__data_);
      if (v98)
        goto LABEL_148;
    }
    else if (v98)
    {
LABEL_148:
      std::string::basic_string[abi:ne180100]<0>(&v235, v74[17]);
      v99 = std::string::append(&v235, ".");
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v236.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      v101 = *(char *)(a2 + 23);
      if (v101 >= 0)
        v102 = (const std::string::value_type *)a2;
      else
        v102 = *(const std::string::value_type **)a2;
      if (v101 >= 0)
        v103 = *(unsigned __int8 *)(a2 + 23);
      else
        v103 = *(_QWORD *)(a2 + 8);
      v104 = std::string::append(&v236, v102, v103);
      v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v237.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      v106 = std::string::append(&v237, ".");
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v238.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      v108 = std::string::append(&v238, (const std::string::value_type *)quasar::BLOCK_DEFINITION_SECTION);
      v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v239.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0;
      v108->__r_.__value_.__r.__words[2] = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      v110 = std::string::append(&v239, "b.");
      v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v240.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0;
      v110->__r_.__value_.__r.__words[2] = 0;
      v110->__r_.__value_.__r.__words[0] = 0;
      if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = &v258;
      else
        v112 = (std::string *)v258.__r_.__value_.__r.__words[0];
      if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
      else
        v113 = v258.__r_.__value_.__l.__size_;
      v114 = std::string::append(&v240, (const std::string::value_type *)v112, v113);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v114->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      quasar::OptionsBase::update((void (***)(void **__return_ptr))v90, v98, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v240.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v236.__r_.__value_.__l.__data_);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      goto LABEL_195;
    }
    if (quasar::gLogLevel >= 2)
    {
      v255 = 0u;
      v256 = 0u;
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v242 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"block definition '", 18);
      if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v117 = &v258;
      else
        v117 = (std::string *)v258.__r_.__value_.__r.__words[0];
      if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v118 = HIBYTE(v258.__r_.__value_.__r.__words[2]);
      else
        v118 = v258.__r_.__value_.__l.__size_;
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
      v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"' (referenced in '", 18);
      v121 = strlen(v74[17]);
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)v74[17], v121);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)".", 1);
      v124 = *(char *)(a2 + 23);
      if (v124 >= 0)
        v125 = a2;
      else
        v125 = *(_QWORD *)a2;
      if (v124 >= 0)
        v126 = *(unsigned __int8 *)(a2 + 23);
      else
        v126 = *(_QWORD *)(a2 + 8);
      v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, v125, v126);
      v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)".", 1);
      v129 = strlen((const char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
      v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION, v129);
      v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)".", 1);
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = &v257;
      else
        v132 = (std::string *)v257.__r_.__value_.__r.__words[0];
      if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v133 = HIBYTE(v257.__r_.__value_.__r.__words[2]);
      else
        v133 = v257.__r_.__value_.__l.__size_;
      v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
      v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)".", 1);
      v136 = strlen((const char *)quasar::BLOCKS_SECTION);
      v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, quasar::BLOCKS_SECTION, v136);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"[", 1);
      v138 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"]') not found", 13);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      v9 = v74;
    }
    goto LABEL_195;
  }
LABEL_319:
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
}

void sub_1ADE442F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::compile(quasar::PDecTranslator::PDecCompilationContext *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  BOOL v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (quasar::gLogLevel >= 5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Starting background compilation for MT models...", 48);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  v4 = 1;
  if (v2 != v3)
  {
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 4) + 16))(*((_QWORD *)v2 + 4));
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v4 = v4 & v5;
      v2 = v7;
    }
    while (v7 != v3);
  }
  if (quasar::gLogLevel > 4)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Finished background compilation of MT models, status: ", 54);
    if ((_DWORD)v4)
      v10 = "Ok";
    else
      v10 = "Failure!";
    if ((_DWORD)v4)
      v11 = 2;
    else
      v11 = 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  return v4;
}

void sub_1ADE44B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::isCompileRequired(quasar::PDecTranslator::PDecCompilationContext *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (quasar::gLogLevel >= 5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Checking if background compilation for MT models is needed...", 61);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 == (char *)this + 16)
  {
    v5 = 0;
  }
  else
  {
    while (1)
    {
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 4) + 24))(*((_QWORD *)v2 + 4));
      if ((v4 & 1) != 0)
        break;
      v5 = v4;
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
      if (v7 == v3)
        goto LABEL_14;
    }
    v5 = 1;
  }
LABEL_14:
  if (quasar::gLogLevel >= 5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Finished checking background compilation status of MT models: Compilation ", 74);
    if ((_DWORD)v5)
      v10 = "needed!";
    else
      v10 = "not needed";
    if ((_DWORD)v5)
      v11 = 7;
    else
      v11 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  return v5;
}

void sub_1ADE44D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::purgeCompiledModels(quasar::PDecTranslator::PDecCompilationContext *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  BOOL v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (quasar::gLogLevel >= 5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Starting purging of compiled MT models...", 41);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  v4 = 1;
  if (v2 != v3)
  {
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 4) + 32))(*((_QWORD *)v2 + 4));
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v4 = v4 & v5;
      v2 = v7;
    }
    while (v7 != v3);
  }
  if (quasar::gLogLevel > 4)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Finished purging compiled MT models, status: ", 45);
    if ((_DWORD)v4)
      v10 = "Ok";
    else
      v10 = "Failure!";
    if ((_DWORD)v4)
      v11 = 2;
    else
      v11 = 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v13);
  }
  return v4;
}

void sub_1ADE44E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecTranslator::PDecCompilationContext::size(quasar::PDecTranslator::PDecCompilationContext *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t *std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_hint_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *quasar::PDecTranslator::PDecCompilationContext::combine(uint64_t a1, void *lpsrc)
{
  _QWORD **v3;
  BOOL v4;
  _OWORD v6[17];

  if (v3)
    v4 = 1;
  else
    v4 = quasar::gLogLevel < 1;
  if (!v4)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Compilation contexts only implemented for PDecTranslator!", 57);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  return std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>((uint64_t *)(a1 + 8), v3[1], v3 + 2);
}

void sub_1ADE45000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::getLanguageMapping(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  uint64_t PtreeOptional;
  std::string *v38;
  __int128 v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  uint64_t Ptree;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  std::string v68;
  char v69;
  std::string __p;
  char v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;

  std::string::basic_string[abi:ne180100]<0>(&v72, (char *)quasar::MT_DECODERS_SECTION);
  v10 = std::string::append(&v72, ".");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&v73, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v74, ".");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v75, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v76, ".");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = *(char *)(a3 + 23);
  if (v23 >= 0)
    v24 = (const std::string::value_type *)a3;
  else
    v24 = *(const std::string::value_type **)a3;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a3 + 23);
  else
    v25 = *(_QWORD *)(a3 + 8);
  v26 = std::string::append(&v77, v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v78, "-");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = *(char *)(a4 + 23);
  if (v30 >= 0)
    v31 = (const std::string::value_type *)a4;
  else
    v31 = *(const std::string::value_type **)a4;
  if (v30 >= 0)
    v32 = *(unsigned __int8 *)(a4 + 23);
  else
    v32 = *(_QWORD *)(a4 + 8);
  v33 = std::string::append(&v79, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v68, ".graph");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = quasar::SystemConfig::getPtreeOptional(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v72.__r_.__value_.__l.__data_);
    if (PtreeOptional)
      goto LABEL_39;
  }
  else if (PtreeOptional)
  {
LABEL_39:
    std::string::basic_string[abi:ne180100]<0>(&v73, (char *)quasar::MT_DECODERS_SECTION);
    v38 = std::string::append(&v73, ".");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = *(char *)(a2 + 23);
    if (v40 >= 0)
      v41 = (const std::string::value_type *)a2;
    else
      v41 = *(const std::string::value_type **)a2;
    if (v40 >= 0)
      v42 = *(unsigned __int8 *)(a2 + 23);
    else
      v42 = *(_QWORD *)(a2 + 8);
    v43 = std::string::append(&v74, v41, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v75, ".");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v76, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v77, ".");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = *(char *)(a3 + 23);
    if (v51 >= 0)
      v52 = (const std::string::value_type *)a3;
    else
      v52 = *(const std::string::value_type **)a3;
    if (v51 >= 0)
      v53 = *(unsigned __int8 *)(a3 + 23);
    else
      v53 = *(_QWORD *)(a3 + 8);
    v54 = std::string::append(&v78, v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v79, "-");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = *(char *)(a4 + 23);
    if (v58 >= 0)
      v59 = (const std::string::value_type *)a4;
    else
      v59 = *(const std::string::value_type **)a4;
    if (v58 >= 0)
      v60 = *(unsigned __int8 *)(a4 + 23);
    else
      v60 = *(_QWORD *)(a4 + 8);
    v61 = std::string::append(&v68, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    Ptree = quasar::SystemConfig::getPtree(a1, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v78, "source-token");
    quasar::PTree::getStringOptional(Ptree, (uint64_t)&v78, &__p);
    std::optional<std::string>::value_or[abi:ne180100]<std::string const&>((uint64_t)&__p, a3, &v79);
    std::string::basic_string[abi:ne180100]<0>(&v76, "target-token");
    quasar::PTree::getStringOptional(Ptree, (uint64_t)&v76, &v68);
    std::optional<std::string>::value_or[abi:ne180100]<std::string const&>((uint64_t)&v68, a4, &v77);
    *a5 = v79;
    memset(&v79, 0, sizeof(v79));
    a5[1] = v77;
    memset(&v77, 0, sizeof(v77));
    if (v69 && SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (v71 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    return;
  }
  quasar::PDecTranslator::getTranslatorOptions(a1, a2, (const void **)a3, a4, 0, (uint64_t **)&__p);
  if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
  {
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)"";
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)"";
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(a5, &v68.__r_.__value_.__l.__data_);
  }
  else
  {
    v64 = quasar::OptionValue<std::string>::value((_QWORD *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 2016));
    if (*(char *)(v64 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v64, *(_QWORD *)(v64 + 8));
    }
    else
    {
      v65 = *(_OWORD *)v64;
      v68.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v65;
    }
    v66 = quasar::OptionValue<std::string>::value((_QWORD *)(*(_QWORD *)(__p.__r_.__value_.__l.__size_ - 8) + 2176));
    if (*(char *)(v66 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v66, *(_QWORD *)(v66 + 8));
    }
    else
    {
      v67 = *(_OWORD *)v66;
      v79.__r_.__value_.__r.__words[2] = *(_QWORD *)(v66 + 16);
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v67;
    }
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(a5, (__int128 *)&v68, (__int128 *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
  }
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
}

void sub_1ADE456C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  __p = &a16;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void sub_1ADE45958()
{
  JUMPOUT(0x1ADE45940);
}

void std::optional<std::string>::value_or[abi:ne180100]<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 24))
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
}

void quasar::PDecTranslator::createGraph(uint64_t a1@<X0>, quasar::SystemConfig *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char a10, _QWORD *a11)
{
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  uint64_t PtreeOptional;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  quasar::DirectedProcessingGraph *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  size_t v62;
  __int128 *p_p;
  const void *v64;
  int v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type size;
  std::string *v75;
  __int128 v76;
  quasar::PTree *v77;
  std::string *v78;
  __int128 v79;
  int v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  uint64_t Int;
  std::string *v100;
  __int128 v101;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  std::string::size_type v125;
  std::string *v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  uint64_t ChildOptional;
  uint64_t v134;
  _BYTE *v135;
  int v136;
  void *v137;
  std::string *v138;
  std::string *v139;
  __int128 v140;
  int v141;
  const std::string::value_type *v142;
  std::string::size_type v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  int v148;
  const std::string::value_type *v149;
  std::string::size_type v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  std::string *v157;
  __int128 v158;
  std::string *v159;
  std::string::size_type v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  __int128 v164;
  int v165;
  const std::string::value_type *v166;
  std::string::size_type v167;
  std::string *v168;
  __int128 v169;
  std::string *v170;
  __int128 v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  std::string *v176;
  std::string::size_type v177;
  std::string *v178;
  __int128 v179;
  std::string *v180;
  __int128 v181;
  int v182;
  const std::string::value_type *v183;
  std::string::size_type v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  std::string *v193;
  std::string::size_type v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  __int128 v198;
  std::string *v199;
  __int128 v200;
  std::string *v201;
  __int128 v202;
  int v203;
  const std::string::value_type *v204;
  std::string::size_type v205;
  std::string *v206;
  __int128 v207;
  _QWORD *v208;
  _QWORD *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  std::string *v222;
  std::string::size_type v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t Child;
  uint64_t Ptree;
  std::string v234;
  std::string v235;
  std::string v236;
  std::string v237;
  __int128 __p;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  std::string v255;
  std::string v256;
  std::string v257;
  std::string v258;
  std::string v259;
  std::string v260;
  std::string v261;
  std::string v262;
  std::string v263;

  std::string::basic_string[abi:ne180100]<0>(&v255, (char *)quasar::MT_DECODERS_SECTION);
  v14 = std::string::append(&v255, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v256.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v256, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v257, ".");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v258, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v259, ".");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = *(char *)(a4 + 23);
  if (v27 >= 0)
    v28 = (const std::string::value_type *)a4;
  else
    v28 = *(const std::string::value_type **)a4;
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a4 + 23);
  else
    v29 = *(_QWORD *)(a4 + 8);
  v30 = std::string::append(&v260, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v261.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v261, "-");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v262.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = *(char *)(a5 + 23);
  if (v34 >= 0)
    v35 = (const std::string::value_type *)a5;
  else
    v35 = *(const std::string::value_type **)a5;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a5 + 23);
  else
    v36 = *(_QWORD *)(a5 + 8);
  v37 = std::string::append(&v262, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v263, ".");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v237, (const std::string::value_type *)quasar::GRAPH_SECTION);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  *(_QWORD *)&v239 = *((_QWORD *)&v41->__r_.__value_.__l + 2);
  __p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)&__p);
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v261.__r_.__value_.__l.__data_);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v255.__r_.__value_.__l.__data_);
    if (PtreeOptional)
      goto LABEL_41;
LABEL_57:
    quasar::PDecTranslator::createLinearGraph(a1, (uint64_t)a2, a3, (const void **)a4, a5, a6, a7, a8, a9, a10);
    return;
  }
  if (!PtreeOptional)
    goto LABEL_57;
LABEL_41:
  v44 = *(unsigned __int8 *)(a4 + 23);
  if ((v44 & 0x80u) != 0)
    v44 = *(_QWORD *)(a4 + 8);
  if (!v44)
    goto LABEL_385;
  v45 = *(unsigned __int8 *)(a5 + 23);
  if ((v45 & 0x80u) != 0)
    v45 = *(_QWORD *)(a5 + 8);
  if (!v45)
  {
LABEL_385:
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v239 = 0u;
    v240 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "missing source or target locale!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
  }
  if (*a11)
  {
    v46 = operator new();
    v47 = (quasar::DirectedProcessingGraph *)v46;
    v48 = a11[1];
    *(_QWORD *)&__p = *a11;
    *((_QWORD *)&__p + 1) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    quasar::DirectedProcessingGraph::DirectedProcessingGraph(v46, &__p);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  else
  {
    v47 = (quasar::DirectedProcessingGraph *)operator new();
    quasar::DirectedProcessingGraph::DirectedProcessingGraph(v47);
  }
  v54 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v263, (char *)quasar::MT_DECODERS_SECTION);
  v55 = std::string::append(v54, ".");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = *(char *)(a3 + 23);
  if (v57 >= 0)
    v58 = (const std::string::value_type *)a3;
  else
    v58 = *(const std::string::value_type **)a3;
  if (v57 >= 0)
    v59 = *(unsigned __int8 *)(a3 + 23);
  else
    v59 = *(_QWORD *)(a3 + 8);
  v60 = std::string::append(&v237, v58, v59);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  *(_QWORD *)&v239 = *((_QWORD *)&v60->__r_.__value_.__l + 2);
  __p = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)&__p);
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
  if (*(char *)(a4 + 23) >= 0)
    v62 = *(unsigned __int8 *)(a4 + 23);
  else
    v62 = *(_QWORD *)(a4 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v62 + 1);
  if (SBYTE7(v239) < 0)
    p_p = (__int128 *)__p;
  if (v62)
  {
    if (*(char *)(a4 + 23) >= 0)
      v64 = (const void *)a4;
    else
      v64 = *(const void **)a4;
    memmove(p_p, v64, v62);
  }
  *(_WORD *)((char *)p_p + v62) = 45;
  v65 = *(char *)(a5 + 23);
  if (v65 >= 0)
    v66 = (const std::string::value_type *)a5;
  else
    v66 = *(const std::string::value_type **)a5;
  if (v65 >= 0)
    v67 = *(unsigned __int8 *)(a5 + 23);
  else
    v67 = *(_QWORD *)(a5 + 8);
  v68 = std::string::append((std::string *)&__p, v66, v67);
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  v70 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v262, (char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v71 = std::string::append(v70, ".");
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v263;
  else
    v73 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    size = v263.__r_.__value_.__l.__size_;
  v75 = std::string::append(&v237, (const std::string::value_type *)v73, size);
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  *(_QWORD *)&v239 = *((_QWORD *)&v75->__r_.__value_.__l + 2);
  __p = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  Child = quasar::PTree::getChild(Ptree, &__p);
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)quasar::GRAPH_SECTION);
  v77 = (quasar::PTree *)quasar::PTree::getChild(Child, &__p);
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v256, (char *)quasar::MT_DECODERS_SECTION);
  v78 = std::string::append(&v256, ".");
  v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  v80 = *(char *)(a3 + 23);
  if (v80 >= 0)
    v81 = (const std::string::value_type *)a3;
  else
    v81 = *(const std::string::value_type **)a3;
  if (v80 >= 0)
    v82 = *(unsigned __int8 *)(a3 + 23);
  else
    v82 = *(_QWORD *)(a3 + 8);
  v83 = std::string::append(&v257, v81, v82);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  v85 = std::string::append(&v258, ".");
  v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v259.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  v87 = std::string::append(&v259, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v260.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = std::string::append(&v260, ".");
  v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v261.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = &v263;
  else
    v91 = (std::string *)v263.__r_.__value_.__r.__words[0];
  if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
  else
    v92 = v263.__r_.__value_.__l.__size_;
  v93 = std::string::append(&v261, (const std::string::value_type *)v91, v92);
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v262.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = std::string::append(&v262, ".");
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  v97 = std::string::append(&v237, (const std::string::value_type *)quasar::GRAPH_SECTION);
  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  *(_QWORD *)&v239 = *((_QWORD *)&v97->__r_.__value_.__l + 2);
  __p = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 131, 0, (uint64_t)&__p);
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v261.__r_.__value_.__l.__data_);
  if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v260.__r_.__value_.__l.__data_);
  if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v259.__r_.__value_.__l.__data_);
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v258.__r_.__value_.__l.__data_);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v257.__r_.__value_.__l.__data_);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v256.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)quasar::LIMIT_INPUT_DATA_LENGTH_OPTION);
  Int = quasar::PTree::getIntOptional<int>(Child, (uint64_t)&__p);
  if (SBYTE7(v239) < 0)
    operator delete((void *)__p);
  if ((Int & 0xFF00000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v256, (char *)quasar::MT_DECODERS_SECTION);
    v100 = std::string::append(&v256, ".");
    v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v257.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    v102 = *(char *)(a3 + 23);
    if (v102 >= 0)
      v103 = (const std::string::value_type *)a3;
    else
      v103 = *(const std::string::value_type **)a3;
    if (v102 >= 0)
      v104 = *(unsigned __int8 *)(a3 + 23);
    else
      v104 = *(_QWORD *)(a3 + 8);
    v105 = std::string::append(&v257, v103, v104);
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v258.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    v107 = std::string::append(&v258, ".");
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v259.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    v109 = std::string::append(&v259, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
    v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v260.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    v111 = std::string::append(&v260, ".");
    v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    v261.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v113 = &v263;
    else
      v113 = (std::string *)v263.__r_.__value_.__r.__words[0];
    if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
    else
      v114 = v263.__r_.__value_.__l.__size_;
    v115 = std::string::append(&v261, (const std::string::value_type *)v113, v114);
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v262.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    v117 = std::string::append(&v262, ".");
    v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v237.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    v119 = std::string::append(&v237, (const std::string::value_type *)quasar::LIMIT_INPUT_DATA_LENGTH_OPTION);
    v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    *(_QWORD *)&v239 = *((_QWORD *)&v119->__r_.__value_.__l + 2);
    __p = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 197, 0, (uint64_t)&__p);
    if (SBYTE7(v239) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v237.__r_.__value_.__l.__data_);
    if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v262.__r_.__value_.__l.__data_);
    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v261.__r_.__value_.__l.__data_);
    if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v260.__r_.__value_.__l.__data_);
    if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v259.__r_.__value_.__l.__data_);
    if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v258.__r_.__value_.__l.__data_);
    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v257.__r_.__value_.__l.__data_);
    if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v256.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 16) = Int;
  }
  v121 = quasar::PTree::begin(v77);
  v122 = quasar::PTree::end(v77);
  if (v121 != v122)
  {
    if (a10)
      v123 = "YES";
    else
      v123 = "NO";
    v124 = 2;
    if (a10)
      v124 = 3;
    v224 = v124;
    v225 = (uint64_t)v123;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v237, (char *)quasar::BLOCK_DEFINITION_NAME);
      quasar::PTree::getStringOptional(v121 + 24, (uint64_t)&v237, (std::string *)&__p);
      if (BYTE8(v239))
      {
        *(_OWORD *)&v262.__r_.__value_.__l.__data_ = __p;
        v262.__r_.__value_.__r.__words[2] = v239;
        *(_QWORD *)&v239 = 0;
        __p = 0uLL;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v262, "");
        if (BYTE8(v239) && SBYTE7(v239) < 0)
          operator delete((void *)__p);
      }
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      memset(&v261, 0, sizeof(v261));
      v125 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v125 = v262.__r_.__value_.__l.__size_;
      if (!v125)
      {
        ChildOptional = 0;
        goto LABEL_209;
      }
      v126 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v260, (char *)quasar::BLOCK_DEFINITION_SECTION);
      v127 = std::string::append(v126, ".");
      v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      v237.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = &v262;
      else
        v129 = (std::string *)v262.__r_.__value_.__r.__words[0];
      if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
      else
        v130 = v262.__r_.__value_.__l.__size_;
      v131 = std::string::append(&v237, (const std::string::value_type *)v129, v130);
      v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      *(_QWORD *)&v239 = *((_QWORD *)&v131->__r_.__value_.__l + 2);
      __p = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      ChildOptional = quasar::PTree::getChildOptional(Ptree, (uint64_t)&__p);
      if (SBYTE7(v239) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      if (!ChildOptional)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown block definition name: ", 31);
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v222 = &v262;
        else
          v222 = (std::string *)v262.__r_.__value_.__r.__words[0];
        if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v223 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
        else
          v223 = v262.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)v222, v223);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&v260, (char *)quasar::BLOCK_TYPE);
      quasar::PTree::getStringOptional(ChildOptional, (uint64_t)&v260, (std::string *)&__p);
      if (BYTE8(v239))
        break;
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v237, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
LABEL_199:
        if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v261.__r_.__value_.__l.__data_);
        goto LABEL_204;
      }
      v237 = v261;
LABEL_204:
      v261 = v237;
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 0;
      v237.__r_.__value_.__s.__data_[0] = 0;
      if (BYTE8(v239) && SBYTE7(v239) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
LABEL_209:
      std::string::basic_string[abi:ne180100]<0>(&v260, (char *)quasar::BLOCK_TYPE);
      quasar::PTree::getStringOptional(v121 + 24, (uint64_t)&v260, (std::string *)&__p);
      if (BYTE8(v239))
      {
        *(_OWORD *)&v237.__r_.__value_.__l.__data_ = __p;
        v237.__r_.__value_.__r.__words[2] = v239;
        *(_QWORD *)&v239 = 0;
        __p = 0uLL;
      }
      else
      {
        if ((SHIBYTE(v261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v237 = v261;
          goto LABEL_215;
        }
        std::string::__init_copy_ctor_external(&v237, v261.__r_.__value_.__l.__data_, v261.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
LABEL_215:
      v261 = v237;
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 0;
      v237.__r_.__value_.__s.__data_[0] = 0;
      if (BYTE8(v239) && SBYTE7(v239) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      v134 = (uint64_t)v47;
      v135 = (_BYTE *)quasar::DirectedProcessingGraph::addBlock((uint64_t)v47, v121, (uint64_t)&v261);
      v136 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v135 + 24))(v135);
      quasar::SystemConfig::enforceMinVersion((uint64_t)a2, v136, 0, (uint64_t)&v261);
      if (v137)
        quasar::PDecEngineBlockMixin::setGlobalMapPtrs((uint64_t)v137, a6, a7);
      *(_QWORD *)&__p = quasar::SystemConfig::getConfigFileVersion(a2);
      quasar::SystemConfig::Version::Version(&v237, 154, 0);
      if (!quasar::SystemConfig::Version::operator<(&__p, &v237))
        goto LABEL_234;
      v138 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v260, (char *)quasar::MT_DECODERS_SECTION);
      v139 = std::string::append(v138, ".");
      v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      v237.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0;
      v139->__r_.__value_.__r.__words[2] = 0;
      v139->__r_.__value_.__r.__words[0] = 0;
      v141 = *(char *)(a3 + 23);
      if (v141 >= 0)
        v142 = (const std::string::value_type *)a3;
      else
        v142 = *(const std::string::value_type **)a3;
      if (v141 >= 0)
        v143 = *(unsigned __int8 *)(a3 + 23);
      else
        v143 = *(_QWORD *)(a3 + 8);
      v144 = std::string::append(&v237, v142, v143);
      v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
      *(_QWORD *)&v239 = *((_QWORD *)&v144->__r_.__value_.__l + 2);
      __p = v145;
      v144->__r_.__value_.__l.__size_ = 0;
      v144->__r_.__value_.__r.__words[2] = 0;
      v144->__r_.__value_.__r.__words[0] = 0;
      quasar::DirectedProcessingGraph::updateConfiguration(v134, v121, (uint64_t)a2, Ptree, (const void **)&__p);
      if (SBYTE7(v239) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v260.__r_.__value_.__l.__data_);
        if (ChildOptional)
        {
LABEL_235:
          std::string::basic_string[abi:ne180100]<0>(&v256, (char *)quasar::MT_DECODERS_SECTION);
          v146 = std::string::append(&v256, ".");
          v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v257.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          v148 = *(char *)(a3 + 23);
          if (v148 >= 0)
            v149 = (const std::string::value_type *)a3;
          else
            v149 = *(const std::string::value_type **)a3;
          if (v148 >= 0)
            v150 = *(unsigned __int8 *)(a3 + 23);
          else
            v150 = *(_QWORD *)(a3 + 8);
          v151 = std::string::append(&v257, v149, v150);
          v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
          v258.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v152;
          v151->__r_.__value_.__l.__size_ = 0;
          v151->__r_.__value_.__r.__words[2] = 0;
          v151->__r_.__value_.__r.__words[0] = 0;
          v153 = std::string::append(&v258, ".");
          v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
          v259.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v154;
          v153->__r_.__value_.__l.__size_ = 0;
          v153->__r_.__value_.__r.__words[2] = 0;
          v153->__r_.__value_.__r.__words[0] = 0;
          v155 = std::string::append(&v259, (const std::string::value_type *)quasar::BLOCK_DEFINITION_SECTION);
          v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
          v260.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v156;
          v155->__r_.__value_.__l.__size_ = 0;
          v155->__r_.__value_.__r.__words[2] = 0;
          v155->__r_.__value_.__r.__words[0] = 0;
          v157 = std::string::append(&v260, ".");
          v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
          v237.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v158;
          v157->__r_.__value_.__l.__size_ = 0;
          v157->__r_.__value_.__r.__words[2] = 0;
          v157->__r_.__value_.__r.__words[0] = 0;
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v159 = &v262;
          else
            v159 = (std::string *)v262.__r_.__value_.__r.__words[0];
          if ((v262.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v160 = HIBYTE(v262.__r_.__value_.__r.__words[2]);
          else
            v160 = v262.__r_.__value_.__l.__size_;
          v161 = std::string::append(&v237, (const std::string::value_type *)v159, v160);
          v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
          *(_QWORD *)&v239 = *((_QWORD *)&v161->__r_.__value_.__l + 2);
          __p = v162;
          v161->__r_.__value_.__l.__size_ = 0;
          v161->__r_.__value_.__r.__words[2] = 0;
          v161->__r_.__value_.__r.__words[0] = 0;
          quasar::DirectedProcessingGraph::updateConfiguration(v134, v121, (uint64_t)a2, ChildOptional, (const void **)&__p);
          if (SBYTE7(v239) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v237.__r_.__value_.__l.__data_);
          if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v259.__r_.__value_.__l.__data_);
          if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v258.__r_.__value_.__l.__data_);
          if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v257.__r_.__value_.__l.__data_);
          if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v256.__r_.__value_.__l.__data_);
        }
      }
      else
      {
LABEL_234:
        if (ChildOptional)
          goto LABEL_235;
      }
      *(_QWORD *)&__p = quasar::SystemConfig::getConfigFileVersion(a2);
      quasar::SystemConfig::Version::Version(&v237, 154, 0);
      if (quasar::SystemConfig::Version::operator<(&__p, &v237))
      {
        quasar::PTree::PTree((quasar::PTree *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v260, "source-locale");
        quasar::PTree::PTree(&v237, a4);
        quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v260, (uint64_t)&v237, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v237);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v260, "target-locale");
        quasar::PTree::PTree(&v237, a5);
        quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v260, (uint64_t)&v237, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v237);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v237, "<constructor argument>");
        quasar::DirectedProcessingGraph::updateConfiguration(v134, v121, (uint64_t)a2, (uint64_t)&__p, (const void **)&v237.__r_.__value_.__l.__data_);
        if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v237.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v255, (char *)quasar::MT_DECODERS_SECTION);
        v163 = std::string::append(&v255, ".");
        v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
        v256.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v164;
        v163->__r_.__value_.__l.__size_ = 0;
        v163->__r_.__value_.__r.__words[2] = 0;
        v163->__r_.__value_.__r.__words[0] = 0;
        v165 = *(char *)(a3 + 23);
        if (v165 >= 0)
          v166 = (const std::string::value_type *)a3;
        else
          v166 = *(const std::string::value_type **)a3;
        if (v165 >= 0)
          v167 = *(unsigned __int8 *)(a3 + 23);
        else
          v167 = *(_QWORD *)(a3 + 8);
        v168 = std::string::append(&v256, v166, v167);
        v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
        v257.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v169;
        v168->__r_.__value_.__l.__size_ = 0;
        v168->__r_.__value_.__r.__words[2] = 0;
        v168->__r_.__value_.__r.__words[0] = 0;
        v170 = std::string::append(&v257, ".");
        v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
        v258.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v171;
        v170->__r_.__value_.__l.__size_ = 0;
        v170->__r_.__value_.__r.__words[2] = 0;
        v170->__r_.__value_.__r.__words[0] = 0;
        v172 = std::string::append(&v258, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
        v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
        v259.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v173;
        v172->__r_.__value_.__l.__size_ = 0;
        v172->__r_.__value_.__r.__words[2] = 0;
        v172->__r_.__value_.__r.__words[0] = 0;
        v174 = std::string::append(&v259, ".");
        v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
        v260.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v175;
        v174->__r_.__value_.__l.__size_ = 0;
        v174->__r_.__value_.__r.__words[2] = 0;
        v174->__r_.__value_.__r.__words[0] = 0;
        if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v176 = &v263;
        else
          v176 = (std::string *)v263.__r_.__value_.__r.__words[0];
        if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v177 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
        else
          v177 = v263.__r_.__value_.__l.__size_;
        v178 = std::string::append(&v260, (const std::string::value_type *)v176, v177);
        v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
        v237.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v179;
        v178->__r_.__value_.__l.__size_ = 0;
        v178->__r_.__value_.__r.__words[2] = 0;
        v178->__r_.__value_.__r.__words[0] = 0;
        quasar::DirectedProcessingGraph::updateConfiguration(v134, v121, (uint64_t)a2, Child, (const void **)&v237.__r_.__value_.__l.__data_);
        if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v237.__r_.__value_.__l.__data_);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v259.__r_.__value_.__l.__data_);
        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v258.__r_.__value_.__l.__data_);
        if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v257.__r_.__value_.__l.__data_);
        if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v256.__r_.__value_.__l.__data_);
        if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v255.__r_.__value_.__l.__data_);
        quasar::PTree::~PTree((quasar::PTree *)&__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&v234, (char *)quasar::MT_DECODERS_SECTION);
      v180 = std::string::append(&v234, ".");
      v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
      v235.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v181;
      v180->__r_.__value_.__l.__size_ = 0;
      v180->__r_.__value_.__r.__words[2] = 0;
      v180->__r_.__value_.__r.__words[0] = 0;
      v182 = *(char *)(a3 + 23);
      if (v182 >= 0)
        v183 = (const std::string::value_type *)a3;
      else
        v183 = *(const std::string::value_type **)a3;
      if (v182 >= 0)
        v184 = *(unsigned __int8 *)(a3 + 23);
      else
        v184 = *(_QWORD *)(a3 + 8);
      v185 = std::string::append(&v235, v183, v184);
      v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
      v236.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v186;
      v185->__r_.__value_.__l.__size_ = 0;
      v185->__r_.__value_.__r.__words[2] = 0;
      v185->__r_.__value_.__r.__words[0] = 0;
      v187 = std::string::append(&v236, ".");
      v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
      v255.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v188;
      v187->__r_.__value_.__l.__size_ = 0;
      v187->__r_.__value_.__r.__words[2] = 0;
      v187->__r_.__value_.__r.__words[0] = 0;
      v189 = std::string::append(&v255, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
      v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
      v256.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v190;
      v189->__r_.__value_.__l.__size_ = 0;
      v189->__r_.__value_.__r.__words[2] = 0;
      v189->__r_.__value_.__r.__words[0] = 0;
      v191 = std::string::append(&v256, ".");
      v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
      v257.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v192;
      v191->__r_.__value_.__l.__size_ = 0;
      v191->__r_.__value_.__r.__words[2] = 0;
      v191->__r_.__value_.__r.__words[0] = 0;
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v193 = &v263;
      else
        v193 = (std::string *)v263.__r_.__value_.__r.__words[0];
      if ((v263.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v194 = HIBYTE(v263.__r_.__value_.__r.__words[2]);
      else
        v194 = v263.__r_.__value_.__l.__size_;
      v195 = std::string::append(&v257, (const std::string::value_type *)v193, v194);
      v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
      v258.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v196;
      v195->__r_.__value_.__l.__size_ = 0;
      v195->__r_.__value_.__r.__words[2] = 0;
      v195->__r_.__value_.__r.__words[0] = 0;
      v197 = std::string::append(&v258, ".");
      v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
      v259.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v198;
      v197->__r_.__value_.__l.__size_ = 0;
      v197->__r_.__value_.__r.__words[2] = 0;
      v197->__r_.__value_.__r.__words[0] = 0;
      v199 = std::string::append(&v259, (const std::string::value_type *)quasar::GRAPH_SECTION);
      v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
      v260.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v260.__r_.__value_.__l.__data_ = v200;
      v199->__r_.__value_.__l.__size_ = 0;
      v199->__r_.__value_.__r.__words[2] = 0;
      v199->__r_.__value_.__r.__words[0] = 0;
      v201 = std::string::append(&v260, ".");
      v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
      v237.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v202;
      v201->__r_.__value_.__l.__size_ = 0;
      v201->__r_.__value_.__r.__words[2] = 0;
      v201->__r_.__value_.__r.__words[0] = 0;
      v203 = *(char *)(v121 + 23);
      if (v203 >= 0)
        v204 = (const std::string::value_type *)v121;
      else
        v204 = *(const std::string::value_type **)v121;
      if (v203 >= 0)
        v205 = *(unsigned __int8 *)(v121 + 23);
      else
        v205 = *(_QWORD *)(v121 + 8);
      v206 = std::string::append(&v237, v204, v205);
      v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
      *(_QWORD *)&v239 = *((_QWORD *)&v206->__r_.__value_.__l + 2);
      __p = v207;
      v206->__r_.__value_.__l.__size_ = 0;
      v206->__r_.__value_.__r.__words[2] = 0;
      v206->__r_.__value_.__r.__words[0] = 0;
      quasar::DirectedProcessingGraph::updateConfiguration(v134, v121, (uint64_t)a2, v121 + 24, (const void **)&__p);
      if (SBYTE7(v239) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v237.__r_.__value_.__l.__data_);
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v259.__r_.__value_.__l.__data_);
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v258.__r_.__value_.__l.__data_);
      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v257.__r_.__value_.__l.__data_);
      if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v256.__r_.__value_.__l.__data_);
      if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v255.__r_.__value_.__l.__data_);
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v236.__r_.__value_.__l.__data_);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v234.__r_.__value_.__l.__data_);
      if (a8)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "<overlay-settings>");
        (*(void (**)(_BYTE *, quasar::SystemConfig *, uint64_t, __int128 *))(*(_QWORD *)v135 + 32))(v135, a2, a8, &__p);
        if (SBYTE7(v239) < 0)
          operator delete((void *)__p);
      }
      if (quasar::gLogLevel >= 5)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Initializing blocks: ", 21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, v225, v224);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
      if (a10)
        quasar::ProcessingBlock::ensureInitialized(v135);
      if (quasar::gLogLevel >= 5)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Adding compilation spec for: ", 29);
        v210 = *(char *)(v121 + 23);
        if (v210 >= 0)
          v211 = v121;
        else
          v211 = *(_QWORD *)v121;
        if (v210 >= 0)
          v212 = *(unsigned __int8 *)(v121 + 23);
        else
          v212 = *(_QWORD *)(v121 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, v211, v212);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
      (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v135 + 64))(&v237, v135);
      v47 = (quasar::DirectedProcessingGraph *)v134;
      if (quasar::gLogLevel >= 5)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v213 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Got compilation spec for: ", 26);
        v214 = *(char *)(v121 + 23);
        if (v214 >= 0)
          v215 = v121;
        else
          v215 = *(_QWORD *)v121;
        if (v214 >= 0)
          v216 = *(unsigned __int8 *)(v121 + 23);
        else
          v216 = *(_QWORD *)(v121 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v213, v215, v216);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
      std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>((uint64_t *)(*(_QWORD *)(a1 + 160) + 8), v237.__r_.__value_.__l.__data_, &v237.__r_.__value_.__l.__size_);
      if (quasar::gLogLevel >= 5)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v239 = 0u;
        v240 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Finished adding compilation spec for: ", 38);
        v218 = *(char *)(v121 + 23);
        if (v218 >= 0)
          v219 = v121;
        else
          v219 = *(_QWORD *)v121;
        if (v218 >= 0)
          v220 = *(unsigned __int8 *)(v121 + 23);
        else
          v220 = *(_QWORD *)(v121 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, v219, v220);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
      std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)&v237, (_QWORD *)v237.__r_.__value_.__l.__size_);
      if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v261.__r_.__value_.__l.__data_);
      if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v262.__r_.__value_.__l.__data_);
      v121 += 88;
      if (v121 == v122)
        goto LABEL_375;
    }
    *(_OWORD *)&v237.__r_.__value_.__l.__data_ = __p;
    v237.__r_.__value_.__r.__words[2] = v239;
    *(_QWORD *)&v239 = 0;
    __p = 0uLL;
    goto LABEL_199;
  }
LABEL_375:
  quasar::DirectedProcessingGraph::checkGraph(v47);
  *a9 = (uint64_t)v47;
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v263.__r_.__value_.__l.__data_);
}

void quasar::PDecTranslator::createLinearGraph(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char a10)
{
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  size_t v22;
  uint64_t v23;
  void **v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  void *v30;
  char v31;
  _QWORD *v32;
  size_t v33;
  std::string *v34;
  __int128 v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  uint64_t ChildOptional;
  std::string *v41;
  __int128 v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  quasar::PTree *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  int v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  int v69;
  const char *v70;
  uint64_t v71;
  std::string::size_type size;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  _QWORD *v84;
  size_t v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  size_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void **v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  size_t v100;
  _QWORD *v101;
  _QWORD *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  int v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  std::string::size_type v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  int v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  const std::string::value_type *v139;
  std::string::size_type v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  std::string::size_type v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  std::string::size_type v157;
  const char *v158;
  std::string *v159;
  _BYTE *appended;
  int v161;
  void *v162;
  std::string *v163;
  __int128 v164;
  int v165;
  const std::string::value_type *v166;
  std::string::size_type v167;
  std::string *v168;
  __int128 v169;
  std::string::size_type v170;
  std::string *v171;
  __int128 v172;
  std::string *v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  uint64_t v177;
  std::string *v178;
  __int128 v179;
  int v180;
  const std::string::value_type *v181;
  std::string::size_type v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  std::string *v187;
  __int128 v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  std::string::size_type v192;
  std::string *v193;
  __int128 v194;
  std::string *v195;
  __int128 v196;
  int v197;
  const std::string::value_type *v198;
  std::string::size_type v199;
  std::string *v200;
  __int128 v201;
  std::string *v202;
  __int128 v203;
  std::string *v204;
  __int128 v205;
  std::string *v206;
  __int128 v207;
  const std::string::value_type *v208;
  std::string::size_type v209;
  std::string *v210;
  __int128 v211;
  std::string *v212;
  __int128 v213;
  int v214;
  const std::string::value_type *v215;
  std::string::size_type v216;
  std::string *v217;
  __int128 v218;
  std::string *v219;
  __int128 v220;
  std::string *v221;
  __int128 v222;
  std::string *v223;
  __int128 v224;
  const std::string::value_type *v225;
  std::string::size_type v226;
  std::string *v227;
  __int128 v228;
  std::string *v229;
  __int128 v230;
  std::string *v231;
  __int128 v232;
  std::string *v233;
  __int128 v234;
  std::string *v235;
  std::string::size_type v236;
  std::string *v237;
  __int128 v238;
  std::string *v239;
  __int128 v240;
  _QWORD *v241;
  uint64_t v242;
  std::string *v243;
  __int128 v244;
  int v245;
  const std::string::value_type *v246;
  std::string::size_type v247;
  std::string *v248;
  __int128 v249;
  std::string *v250;
  __int128 v251;
  std::string *v252;
  __int128 v253;
  std::string *v254;
  __int128 v255;
  const std::string::value_type *v256;
  std::string::size_type v257;
  std::string *v258;
  __int128 v259;
  std::string *v260;
  __int128 v261;
  std::string *v262;
  __int128 v263;
  _QWORD *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v278;
  uint64_t PtreeOptional;
  std::string v281;
  std::string v282;
  std::string v283;
  std::string v284;
  std::string v285;
  std::string v286;
  std::string v287;
  std::string v288;
  std::string v289;
  std::string v290;
  std::string v291;
  std::string v292;
  std::string v293;
  std::string v294;
  std::string v295;
  void *__p[2];
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  void *v313;
  __int128 v314;
  std::string v315;
  uint64_t v316;

  v316 = *MEMORY[0x1E0C80C00];
  v13 = operator new();
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_QWORD *)(v13 + 64) = 0;
  quasar::ProcessingGraph::ProcessingGraph((quasar::ProcessingGraph *)v13);
  *(_QWORD *)v13 = off_1E5D38510;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  v270 = v13;
  v14 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v313, (char *)quasar::MT_DECODERS_SECTION);
  v15 = std::string::append(v14, ".");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(a3 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a3;
  else
    v18 = *(const std::string::value_type **)a3;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a3 + 23);
  else
    v19 = *(_QWORD *)(a3 + 8);
  v20 = std::string::append(&v315, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(_QWORD *)&v297 = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = quasar::SystemConfig::getPtreeOptional(a2, (uint64_t)__p);
  if (SBYTE7(v297) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v314) < 0)
    operator delete(v313);
  if (!PtreeOptional)
  {
    v311 = 0u;
    v312 = 0u;
    v309 = 0u;
    v310 = 0u;
    v307 = 0u;
    v308 = 0u;
    v305 = 0u;
    v306 = 0u;
    v303 = 0u;
    v304 = 0u;
    v301 = 0u;
    v302 = 0u;
    v299 = 0u;
    v300 = 0u;
    v297 = 0u;
    v298 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v264 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Machine translation configuration for task '", 44);
    v265 = *(char *)(a3 + 23);
    if (v265 >= 0)
      v266 = a3;
    else
      v266 = *(_QWORD *)a3;
    if (v265 >= 0)
      v267 = *(unsigned __int8 *)(a3 + 23);
    else
      v267 = *(_QWORD *)(a3 + 8);
    v268 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v264, v266, v267);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)"' not found!", 12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (quasar::gLogLevel >= 2)
  {
    v311 = 0u;
    v312 = 0u;
    v309 = 0u;
    v310 = 0u;
    v307 = 0u;
    v308 = 0u;
    v305 = 0u;
    v306 = 0u;
    v303 = 0u;
    v304 = 0u;
    v301 = 0u;
    v302 = 0u;
    v299 = 0u;
    v300 = 0u;
    v297 = 0u;
    v298 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Assuming legacy (non-graph) config format, deprecated for production MT configurations!", 87);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  v313 = 0;
  v314 = 0uLL;
  if (*((char *)a4 + 23) >= 0)
    v22 = *((unsigned __int8 *)a4 + 23);
  else
    v22 = (size_t)a4[1];
  if (!v22)
    goto LABEL_40;
  v23 = *(unsigned __int8 *)(a5 + 23);
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(a5 + 8);
  if (v23)
  {
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v22 + 1);
    if ((SBYTE7(v297) & 0x80u) == 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    if (*((char *)a4 + 23) >= 0)
      v25 = a4;
    else
      v25 = *a4;
    memmove(v24, v25, v22);
    *(_WORD *)((char *)v24 + v22) = 45;
    v26 = *(char *)(a5 + 23);
    if (v26 >= 0)
      v27 = (const std::string::value_type *)a5;
    else
      v27 = *(const std::string::value_type **)a5;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a5 + 23);
    else
      v28 = *(_QWORD *)(a5 + 8);
    v29 = std::string::append((std::string *)__p, v27, v28);
    v30 = (void *)v29->__r_.__value_.__r.__words[0];
    v315.__r_.__value_.__r.__words[0] = v29->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
    v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v314) < 0)
      operator delete(v313);
    v313 = v30;
    *(_QWORD *)&v314 = v315.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v314 + 7) = *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 7);
    HIBYTE(v314) = v31;
    if (SBYTE7(v297) < 0)
      operator delete(__p[0]);
    v13 = v270;
  }
  else
  {
LABEL_40:
    MEMORY[0x1AF44C914](&v313, "");
    if (quasar::gLogLevel >= 5)
    {
      v311 = 0u;
      v312 = 0u;
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v305 = 0u;
      v306 = 0u;
      v303 = 0u;
      v304 = 0u;
      v301 = 0u;
      v302 = 0u;
      v299 = 0u;
      v300 = 0u;
      v297 = 0u;
      v298 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"missing source or target locale, skipping parsing ", 50);
      v33 = strlen((const char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION, v33);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v295, (char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v34 = std::string::append(&v295, ".");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v314 >= 0)
    v36 = (const std::string::value_type *)&v313;
  else
    v36 = (const std::string::value_type *)v313;
  if (v314 >= 0)
    v37 = HIBYTE(v314);
  else
    v37 = v314;
  v38 = std::string::append(&v315, v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  *(_QWORD *)&v297 = *((_QWORD *)&v38->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  ChildOptional = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
  if (SBYTE7(v297) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (ChildOptional)
      goto LABEL_54;
LABEL_74:
    if (quasar::gLogLevel >= 2)
    {
      v311 = 0u;
      v312 = 0u;
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v305 = 0u;
      v306 = 0u;
      v303 = 0u;
      v304 = 0u;
      v301 = 0u;
      v302 = 0u;
      v299 = 0u;
      v300 = 0u;
      v297 = 0u;
      v298 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No language pair specific settings found (this might be a configuration error).", 79);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    goto LABEL_78;
  }
  operator delete(v295.__r_.__value_.__l.__data_);
  if (!ChildOptional)
    goto LABEL_74;
LABEL_54:
  std::string::basic_string[abi:ne180100]<0>(&v293, (char *)quasar::MT_DECODERS_SECTION);
  v41 = std::string::append(&v293, ".");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v294.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = *(char *)(a3 + 23);
  if (v43 >= 0)
    v44 = (const std::string::value_type *)a3;
  else
    v44 = *(const std::string::value_type **)a3;
  if (v43 >= 0)
    v45 = *(unsigned __int8 *)(a3 + 23);
  else
    v45 = *(_QWORD *)(a3 + 8);
  v46 = std::string::append(&v294, v44, v45);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v295.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v295, ".");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v315, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  *(_QWORD *)&v297 = *((_QWORD *)&v50->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion(a2, 35, 0, (uint64_t)__p);
  if (SBYTE7(v297) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::BLOCKS_SECTION);
  v52 = quasar::PTree::getChildOptional(ChildOptional, (uint64_t)__p);
  v53 = (quasar::PTree *)v52;
  if (SBYTE7(v297) < 0)
  {
    operator delete(__p[0]);
    if (!v53)
    {
LABEL_78:
      v54 = 0;
      v55 = 0;
      v278 = 1;
      goto LABEL_79;
    }
  }
  else if (!v52)
  {
    goto LABEL_78;
  }
  if (quasar::PTree::empty(v53))
    goto LABEL_78;
  std::string::basic_string[abi:ne180100]<0>(&v289, (char *)quasar::MT_DECODERS_SECTION);
  v243 = std::string::append(&v289, ".");
  v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
  v290.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v244;
  v243->__r_.__value_.__l.__size_ = 0;
  v243->__r_.__value_.__r.__words[2] = 0;
  v243->__r_.__value_.__r.__words[0] = 0;
  v245 = *(char *)(a3 + 23);
  if (v245 >= 0)
    v246 = (const std::string::value_type *)a3;
  else
    v246 = *(const std::string::value_type **)a3;
  if (v245 >= 0)
    v247 = *(unsigned __int8 *)(a3 + 23);
  else
    v247 = *(_QWORD *)(a3 + 8);
  v248 = std::string::append(&v290, v246, v247);
  v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
  v291.__r_.__value_.__r.__words[2] = v248->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v249;
  v248->__r_.__value_.__l.__size_ = 0;
  v248->__r_.__value_.__r.__words[2] = 0;
  v248->__r_.__value_.__r.__words[0] = 0;
  v250 = std::string::append(&v291, ".");
  v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
  v292.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v251;
  v250->__r_.__value_.__l.__size_ = 0;
  v250->__r_.__value_.__r.__words[2] = 0;
  v250->__r_.__value_.__r.__words[0] = 0;
  v252 = std::string::append(&v292, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
  v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
  v293.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v253;
  v252->__r_.__value_.__l.__size_ = 0;
  v252->__r_.__value_.__r.__words[2] = 0;
  v252->__r_.__value_.__r.__words[0] = 0;
  v254 = std::string::append(&v293, ".");
  v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
  v294.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v255;
  v254->__r_.__value_.__l.__size_ = 0;
  v254->__r_.__value_.__r.__words[2] = 0;
  v254->__r_.__value_.__r.__words[0] = 0;
  if (v314 >= 0)
    v256 = (const std::string::value_type *)&v313;
  else
    v256 = (const std::string::value_type *)v313;
  if (v314 >= 0)
    v257 = HIBYTE(v314);
  else
    v257 = v314;
  v258 = std::string::append(&v294, v256, v257);
  v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
  v295.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v259;
  v258->__r_.__value_.__l.__size_ = 0;
  v258->__r_.__value_.__r.__words[2] = 0;
  v258->__r_.__value_.__r.__words[0] = 0;
  v260 = std::string::append(&v295, ".");
  v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v261;
  v260->__r_.__value_.__l.__size_ = 0;
  v260->__r_.__value_.__r.__words[2] = 0;
  v260->__r_.__value_.__r.__words[0] = 0;
  v262 = std::string::append(&v315, (const std::string::value_type *)quasar::BLOCKS_SECTION);
  v263 = *(_OWORD *)&v262->__r_.__value_.__l.__data_;
  *(_QWORD *)&v297 = *((_QWORD *)&v262->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v263;
  v262->__r_.__value_.__l.__size_ = 0;
  v262->__r_.__value_.__r.__words[2] = 0;
  v262->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion(a2, 96, 0, (uint64_t)__p);
  if (SBYTE7(v297) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v289.__r_.__value_.__l.__data_);
  v278 = quasar::PTree::size(v53);
  v54 = quasar::PTree::begin(v53);
  v55 = 1;
LABEL_79:
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::BLOCK_DEFINITION_SECTION);
  v56 = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
  v57 = v56;
  v269 = a9;
  if (SBYTE7(v297) < 0)
  {
    operator delete(__p[0]);
    if (!v57)
      goto LABEL_99;
  }
  else if (!v56)
  {
    goto LABEL_99;
  }
  std::string::basic_string[abi:ne180100]<0>(&v293, (char *)quasar::MT_DECODERS_SECTION);
  v58 = std::string::append(&v293, ".");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v294.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = *(char *)(a3 + 23);
  if (v60 >= 0)
    v61 = (const std::string::value_type *)a3;
  else
    v61 = *(const std::string::value_type **)a3;
  if (v60 >= 0)
    v62 = *(unsigned __int8 *)(a3 + 23);
  else
    v62 = *(_QWORD *)(a3 + 8);
  v63 = std::string::append(&v294, v61, v62);
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v295.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  v65 = std::string::append(&v295, ".");
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&v315, (const std::string::value_type *)quasar::BLOCK_DEFINITION_SECTION);
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  *(_QWORD *)&v297 = *((_QWORD *)&v67->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion(a2, 96, 0, (uint64_t)__p);
  if (SBYTE7(v297) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v315.__r_.__value_.__l.__data_);
  if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v295.__r_.__value_.__l.__data_);
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v294.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
LABEL_99:
  if (v278 >= 1)
  {
    v69 = 0;
    if (a10)
      v70 = "YES";
    else
      v70 = "NO";
    v71 = 2;
    if (a10)
      v71 = 3;
    v271 = v71;
    v272 = (uint64_t)v70;
    do
    {
      memset(&v295, 0, sizeof(v295));
      memset(&v294, 0, sizeof(v294));
      if (!v55)
      {
LABEL_282:
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
        {
          v158 = "PDecTranslatorBlock";
          if (v294.__r_.__value_.__l.__size_ == 16)
          {
            v159 = (std::string *)v294.__r_.__value_.__r.__words[0];
            goto LABEL_287;
          }
        }
        else
        {
          v158 = "PDecTranslatorBlock";
          if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) == 16)
          {
            v159 = &v294;
LABEL_287:
            if (v159->__r_.__value_.__r.__words[0] ^ 0x625F657361726870 | v159->__r_.__value_.__l.__size_ ^ 0x796C6E6F5F6B6F6FLL)
              v158 = "PDecTranslatorBlock";
            else
              v158 = "PDecPhraseBookBlock";
          }
        }
        MEMORY[0x1AF44C914](&v295, v158);
        goto LABEL_291;
      }
      std::string::basic_string[abi:ne180100]<0>(&v293, (char *)quasar::BLOCK_DEFINITION_NAME);
      quasar::PTree::getStringOptional(v54 + 24, (uint64_t)&v293, (std::string *)__p);
      if (BYTE8(v297))
      {
        *(_OWORD *)&v315.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v315.__r_.__value_.__r.__words[2] = v297;
        *(_QWORD *)&v297 = 0;
        __p[0] = 0;
        __p[1] = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v315, "");
        if (BYTE8(v297) && SBYTE7(v297) < 0)
          operator delete(__p[0]);
      }
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v293.__r_.__value_.__l.__data_);
      size = HIBYTE(v315.__r_.__value_.__r.__words[2]);
      if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v315.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::basic_string[abi:ne180100]<0>(&v292, (char *)quasar::BLOCK_DEFINITION_SECTION);
        v73 = std::string::append(&v292, ".");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = &v315;
        else
          v75 = (std::string *)v315.__r_.__value_.__r.__words[0];
        if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = HIBYTE(v315.__r_.__value_.__r.__words[2]);
        else
          v76 = v315.__r_.__value_.__l.__size_;
        v77 = std::string::append(&v293, (const std::string::value_type *)v75, v76);
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        *(_QWORD *)&v297 = *((_QWORD *)&v77->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
        if (SBYTE7(v297) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v292.__r_.__value_.__l.__data_);
          if (v79)
          {
LABEL_129:
            std::string::basic_string[abi:ne180100]<0>(&v292, (char *)quasar::BLOCK_TYPE);
            quasar::PTree::getStringOptional(v79, (uint64_t)&v292, (std::string *)__p);
            if (BYTE8(v297))
            {
              *(_OWORD *)&v293.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              v293.__r_.__value_.__r.__words[2] = v297;
              *(_QWORD *)&v297 = 0;
              __p[0] = 0;
              __p[1] = 0;
LABEL_131:
              if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v295.__r_.__value_.__l.__data_);
            }
            else
            {
              if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v293, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
                goto LABEL_131;
              }
              v293 = v295;
            }
            v295 = v293;
            *((_BYTE *)&v293.__r_.__value_.__s + 23) = 0;
            v293.__r_.__value_.__s.__data_[0] = 0;
            if (BYTE8(v297) && SBYTE7(v297) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v292.__r_.__value_.__l.__data_);
            v103 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
            if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v103 = v295.__r_.__value_.__l.__size_;
            if (v103)
            {
              std::string::basic_string[abi:ne180100]<0>(&v286, (char *)quasar::MT_DECODERS_SECTION);
              v104 = std::string::append(&v286, ".");
              v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
              v287.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v105;
              v104->__r_.__value_.__l.__size_ = 0;
              v104->__r_.__value_.__r.__words[2] = 0;
              v104->__r_.__value_.__r.__words[0] = 0;
              v106 = *(char *)(a3 + 23);
              if (v106 >= 0)
                v107 = (const std::string::value_type *)a3;
              else
                v107 = *(const std::string::value_type **)a3;
              if (v106 >= 0)
                v108 = *(unsigned __int8 *)(a3 + 23);
              else
                v108 = *(_QWORD *)(a3 + 8);
              v109 = std::string::append(&v287, v107, v108);
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v288.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              v111 = std::string::append(&v288, ".");
              v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              v289.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              v113 = std::string::append(&v289, (const std::string::value_type *)quasar::BLOCK_DEFINITION_SECTION);
              v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
              v290.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v114;
              v113->__r_.__value_.__l.__size_ = 0;
              v113->__r_.__value_.__r.__words[2] = 0;
              v113->__r_.__value_.__r.__words[0] = 0;
              v115 = std::string::append(&v290, ".");
              v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
              v291.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v116;
              v115->__r_.__value_.__l.__size_ = 0;
              v115->__r_.__value_.__r.__words[2] = 0;
              v115->__r_.__value_.__r.__words[0] = 0;
              if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v117 = &v315;
              else
                v117 = (std::string *)v315.__r_.__value_.__r.__words[0];
              if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v118 = HIBYTE(v315.__r_.__value_.__r.__words[2]);
              else
                v118 = v315.__r_.__value_.__l.__size_;
              v119 = std::string::append(&v291, (const std::string::value_type *)v117, v118);
              v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
              v292.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v120;
              v119->__r_.__value_.__l.__size_ = 0;
              v119->__r_.__value_.__r.__words[2] = 0;
              v119->__r_.__value_.__r.__words[0] = 0;
              v121 = std::string::append(&v292, ".");
              v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
              v293.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v122;
              v121->__r_.__value_.__l.__size_ = 0;
              v121->__r_.__value_.__r.__words[2] = 0;
              v121->__r_.__value_.__r.__words[0] = 0;
              v123 = std::string::append(&v293, (const std::string::value_type *)quasar::BLOCK_TYPE);
              v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
              *(_QWORD *)&v297 = *((_QWORD *)&v123->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v124;
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              v123->__r_.__value_.__r.__words[0] = 0;
              quasar::SystemConfig::enforceMinVersion(a2, 125, 0, (uint64_t)__p);
              if (SBYTE7(v297) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v293.__r_.__value_.__l.__data_);
              if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v292.__r_.__value_.__l.__data_);
              if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v291.__r_.__value_.__l.__data_);
              if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v290.__r_.__value_.__l.__data_);
              if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v289.__r_.__value_.__l.__data_);
              if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v288.__r_.__value_.__l.__data_);
              if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v287.__r_.__value_.__l.__data_);
              if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v286.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v292, (char *)quasar::PHRASE_BOOK_MODE);
            quasar::PTree::getStringOptional(v79, (uint64_t)&v292, (std::string *)__p);
            if (BYTE8(v297))
            {
              *(_OWORD *)&v293.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              v293.__r_.__value_.__r.__words[2] = v297;
              *(_QWORD *)&v297 = 0;
              __p[0] = 0;
              __p[1] = 0;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v293, "");
            }
            if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v294.__r_.__value_.__l.__data_);
            v294 = v293;
            *((_BYTE *)&v293.__r_.__value_.__s + 23) = 0;
            v293.__r_.__value_.__s.__data_[0] = 0;
            if (BYTE8(v297) && SBYTE7(v297) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v292.__r_.__value_.__l.__data_);
            goto LABEL_204;
          }
        }
        else if (v79)
        {
          goto LABEL_129;
        }
        if (quasar::gLogLevel >= 2)
        {
          v311 = 0u;
          v312 = 0u;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v305 = 0u;
          v306 = 0u;
          v303 = 0u;
          v304 = 0u;
          v301 = 0u;
          v302 = 0u;
          v299 = 0u;
          v300 = 0u;
          v297 = 0u;
          v298 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"block definition '", 18);
          if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = &v315;
          else
            v81 = (std::string *)v315.__r_.__value_.__r.__words[0];
          if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = HIBYTE(v315.__r_.__value_.__r.__words[2]);
          else
            v82 = v315.__r_.__value_.__l.__size_;
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"' (referenced in '", 18);
          v85 = strlen((const char *)quasar::MT_DECODERS_SECTION);
          v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, quasar::MT_DECODERS_SECTION, v85);
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)".", 1);
          v88 = *(char *)(a3 + 23);
          if (v88 >= 0)
            v89 = a3;
          else
            v89 = *(_QWORD *)a3;
          if (v88 >= 0)
            v90 = *(unsigned __int8 *)(a3 + 23);
          else
            v90 = *(_QWORD *)(a3 + 8);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v89, v90);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)".", 1);
          v93 = strlen((const char *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
          v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION, v93);
          v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)".", 1);
          if (v314 >= 0)
            v96 = &v313;
          else
            v96 = (void **)v313;
          if (v314 >= 0)
            v97 = HIBYTE(v314);
          else
            v97 = v314;
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)".", 1);
          v100 = strlen((const char *)quasar::BLOCKS_SECTION);
          v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, quasar::BLOCKS_SECTION, v100);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"[", 1);
          v102 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"]') not found", 13);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          v13 = v270;
        }
      }
LABEL_204:
      std::string::basic_string[abi:ne180100]<0>(&v292, (char *)quasar::BLOCK_TYPE);
      quasar::PTree::getStringOptional(v54 + 24, (uint64_t)&v292, (std::string *)__p);
      if (BYTE8(v297))
      {
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v293.__r_.__value_.__r.__words[2] = v297;
        *(_QWORD *)&v297 = 0;
        __p[0] = 0;
        __p[1] = 0;
      }
      else
      {
        if ((SHIBYTE(v295.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v293 = v295;
          goto LABEL_210;
        }
        std::string::__init_copy_ctor_external(&v293, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v295.__r_.__value_.__l.__data_);
LABEL_210:
      v295 = v293;
      *((_BYTE *)&v293.__r_.__value_.__s + 23) = 0;
      v293.__r_.__value_.__s.__data_[0] = 0;
      if (BYTE8(v297) && SBYTE7(v297) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v292.__r_.__value_.__l.__data_);
      v125 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v125 = v295.__r_.__value_.__l.__size_;
      if (v125)
      {
        std::string::basic_string[abi:ne180100]<0>(&v282, (char *)quasar::MT_DECODERS_SECTION);
        v126 = std::string::append(&v282, ".");
        v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v283.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        v128 = *(char *)(a3 + 23);
        if (v128 >= 0)
          v129 = (const std::string::value_type *)a3;
        else
          v129 = *(const std::string::value_type **)a3;
        if (v128 >= 0)
          v130 = *(unsigned __int8 *)(a3 + 23);
        else
          v130 = *(_QWORD *)(a3 + 8);
        v131 = std::string::append(&v283, v129, v130);
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v284.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        v133 = std::string::append(&v284, ".");
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v285.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        v135 = std::string::append(&v285, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
        v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v286.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        v137 = std::string::append(&v286, ".");
        v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        v287.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        if (v314 >= 0)
          v139 = (const std::string::value_type *)&v313;
        else
          v139 = (const std::string::value_type *)v313;
        if (v314 >= 0)
          v140 = HIBYTE(v314);
        else
          v140 = v314;
        v141 = std::string::append(&v287, v139, v140);
        v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v288.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        v143 = std::string::append(&v288, ".");
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        v289.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        v145 = std::string::append(&v289, (const std::string::value_type *)quasar::BLOCKS_SECTION);
        v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
        v290.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v146;
        v145->__r_.__value_.__l.__size_ = 0;
        v145->__r_.__value_.__r.__words[2] = 0;
        v145->__r_.__value_.__r.__words[0] = 0;
        v147 = std::string::append(&v290, "[");
        v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v281, v69);
        if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v149 = &v281;
        else
          v149 = (std::string *)v281.__r_.__value_.__r.__words[0];
        if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v150 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
        else
          v150 = v281.__r_.__value_.__l.__size_;
        v151 = std::string::append(&v291, (const std::string::value_type *)v149, v150);
        v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        v292.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        v153 = std::string::append(&v292, "].");
        v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v154;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        v155 = std::string::append(&v293, (const std::string::value_type *)quasar::BLOCK_TYPE);
        v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        *(_QWORD *)&v297 = *((_QWORD *)&v155->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        quasar::SystemConfig::enforceMinVersion(a2, 125, 0, (uint64_t)__p);
        if (SBYTE7(v297) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v292.__r_.__value_.__l.__data_);
        if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v281.__r_.__value_.__l.__data_);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v289.__r_.__value_.__l.__data_);
        if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v288.__r_.__value_.__l.__data_);
        if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v287.__r_.__value_.__l.__data_);
        if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v286.__r_.__value_.__l.__data_);
        if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v285.__r_.__value_.__l.__data_);
        if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v284.__r_.__value_.__l.__data_);
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v282.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v292, (char *)quasar::PHRASE_BOOK_MODE);
      quasar::PTree::getStringOptional(v54 + 24, (uint64_t)&v292, (std::string *)__p);
      if (BYTE8(v297))
      {
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v293.__r_.__value_.__r.__words[2] = v297;
        *(_QWORD *)&v297 = 0;
        __p[0] = 0;
        __p[1] = 0;
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_271;
      }
      else
      {
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v293, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
LABEL_271:
          operator delete(v294.__r_.__value_.__l.__data_);
          goto LABEL_272;
        }
        v293 = v294;
      }
LABEL_272:
      v294 = v293;
      *((_BYTE *)&v293.__r_.__value_.__s + 23) = 0;
      v293.__r_.__value_.__s.__data_[0] = 0;
      if (BYTE8(v297) && SBYTE7(v297) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v292.__r_.__value_.__l.__data_);
      if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v315.__r_.__value_.__l.__data_);
      v157 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v157 = v295.__r_.__value_.__l.__size_;
      if (!v157)
        goto LABEL_282;
LABEL_291:
      appended = (_BYTE *)quasar::LinearProcessingGraph::appendBlock((int64x2_t *)v13, (uint64_t)&v295);
      v161 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)appended + 24))(appended);
      quasar::SystemConfig::enforceMinVersion(a2, v161, 0, (uint64_t)&v295);
      if (v162)
        quasar::PDecEngineBlockMixin::setGlobalMapPtrs((uint64_t)v162, a6, a7);
      std::string::basic_string[abi:ne180100]<0>(&v293, (char *)quasar::MT_DECODERS_SECTION);
      v163 = std::string::append(&v293, ".");
      v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
      v315.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v164;
      v163->__r_.__value_.__l.__size_ = 0;
      v163->__r_.__value_.__r.__words[2] = 0;
      v163->__r_.__value_.__r.__words[0] = 0;
      v165 = *(char *)(a3 + 23);
      if (v165 >= 0)
        v166 = (const std::string::value_type *)a3;
      else
        v166 = *(const std::string::value_type **)a3;
      if (v165 >= 0)
        v167 = *(unsigned __int8 *)(a3 + 23);
      else
        v167 = *(_QWORD *)(a3 + 8);
      v168 = std::string::append(&v315, v166, v167);
      v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
      *(_QWORD *)&v297 = *((_QWORD *)&v168->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v169;
      v168->__r_.__value_.__l.__size_ = 0;
      v168->__r_.__value_.__r.__words[2] = 0;
      v168->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, void **))(*(_QWORD *)appended + 32))(appended, a2, PtreeOptional, __p);
      if (SBYTE7(v297) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v315.__r_.__value_.__l.__data_);
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v293.__r_.__value_.__l.__data_);
        if (!v55)
          goto LABEL_358;
      }
      else if (!v55)
      {
        goto LABEL_358;
      }
      std::string::basic_string[abi:ne180100]<0>(&v293, (char *)quasar::BLOCK_DEFINITION_NAME);
      quasar::PTree::getStringOptional(v54 + 24, (uint64_t)&v293, (std::string *)__p);
      if (BYTE8(v297))
      {
        *(_OWORD *)&v315.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v315.__r_.__value_.__r.__words[2] = v297;
        *(_QWORD *)&v297 = 0;
        __p[0] = 0;
        __p[1] = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v315, "");
        if (BYTE8(v297) && SBYTE7(v297) < 0)
          operator delete(__p[0]);
      }
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v293.__r_.__value_.__l.__data_);
      v170 = HIBYTE(v315.__r_.__value_.__r.__words[2]);
      if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v170 = v315.__r_.__value_.__l.__size_;
      if (v170)
      {
        std::string::basic_string[abi:ne180100]<0>(&v292, (char *)quasar::BLOCK_DEFINITION_SECTION);
        v171 = std::string::append(&v292, ".");
        v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v172;
        v171->__r_.__value_.__l.__size_ = 0;
        v171->__r_.__value_.__r.__words[2] = 0;
        v171->__r_.__value_.__r.__words[0] = 0;
        if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v173 = &v315;
        else
          v173 = (std::string *)v315.__r_.__value_.__r.__words[0];
        if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v174 = HIBYTE(v315.__r_.__value_.__r.__words[2]);
        else
          v174 = v315.__r_.__value_.__l.__size_;
        v175 = std::string::append(&v293, (const std::string::value_type *)v173, v174);
        v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
        *(_QWORD *)&v297 = *((_QWORD *)&v175->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v176;
        v175->__r_.__value_.__l.__size_ = 0;
        v175->__r_.__value_.__r.__words[2] = 0;
        v175->__r_.__value_.__r.__words[0] = 0;
        v177 = quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)__p);
        if (SBYTE7(v297) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v292.__r_.__value_.__l.__data_);
          if (!v177)
            goto LABEL_357;
        }
        else if (!v177)
        {
          goto LABEL_357;
        }
        std::string::basic_string[abi:ne180100]<0>(&v288, (char *)quasar::MT_DECODERS_SECTION);
        v178 = std::string::append(&v288, ".");
        v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
        v289.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v179;
        v178->__r_.__value_.__l.__size_ = 0;
        v178->__r_.__value_.__r.__words[2] = 0;
        v178->__r_.__value_.__r.__words[0] = 0;
        v180 = *(char *)(a3 + 23);
        if (v180 >= 0)
          v181 = (const std::string::value_type *)a3;
        else
          v181 = *(const std::string::value_type **)a3;
        if (v180 >= 0)
          v182 = *(unsigned __int8 *)(a3 + 23);
        else
          v182 = *(_QWORD *)(a3 + 8);
        v183 = std::string::append(&v289, v181, v182);
        v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
        v290.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v184;
        v183->__r_.__value_.__l.__size_ = 0;
        v183->__r_.__value_.__r.__words[2] = 0;
        v183->__r_.__value_.__r.__words[0] = 0;
        v185 = std::string::append(&v290, ".");
        v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v186;
        v185->__r_.__value_.__l.__size_ = 0;
        v185->__r_.__value_.__r.__words[2] = 0;
        v185->__r_.__value_.__r.__words[0] = 0;
        v187 = std::string::append(&v291, (const std::string::value_type *)quasar::BLOCK_DEFINITION_SECTION);
        v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
        v292.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v188;
        v187->__r_.__value_.__l.__size_ = 0;
        v187->__r_.__value_.__r.__words[2] = 0;
        v187->__r_.__value_.__r.__words[0] = 0;
        v189 = std::string::append(&v292, ".");
        v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v190;
        v189->__r_.__value_.__l.__size_ = 0;
        v189->__r_.__value_.__r.__words[2] = 0;
        v189->__r_.__value_.__r.__words[0] = 0;
        if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v191 = &v315;
        else
          v191 = (std::string *)v315.__r_.__value_.__r.__words[0];
        if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v192 = HIBYTE(v315.__r_.__value_.__r.__words[2]);
        else
          v192 = v315.__r_.__value_.__l.__size_;
        v193 = std::string::append(&v293, (const std::string::value_type *)v191, v192);
        v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
        *(_QWORD *)&v297 = *((_QWORD *)&v193->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v194;
        v193->__r_.__value_.__l.__size_ = 0;
        v193->__r_.__value_.__r.__words[2] = 0;
        v193->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, void **))(*(_QWORD *)appended + 32))(appended, a2, v177, __p);
        if (SBYTE7(v297) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v292.__r_.__value_.__l.__data_);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v289.__r_.__value_.__l.__data_);
        if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v288.__r_.__value_.__l.__data_);
      }
LABEL_357:
      if ((SHIBYTE(v315.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_358:
        if (ChildOptional)
          goto LABEL_359;
        goto LABEL_392;
      }
      operator delete(v315.__r_.__value_.__l.__data_);
      if (ChildOptional)
      {
LABEL_359:
        quasar::PTree::PTree((quasar::PTree *)__p);
        std::string::basic_string[abi:ne180100]<0>(&v293, "source-locale");
        quasar::PTree::PTree(&v315, a4);
        quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v293, (uint64_t)&v315, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v315);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v293, "target-locale");
        quasar::PTree::PTree(&v315, a5);
        quasar::PTree::putChild((uint64_t)__p, (uint64_t)&v293, (uint64_t)&v315, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v315);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v315, "<constructor argument>");
        (*(void (**)(_BYTE *, uint64_t, void **, std::string *))(*(_QWORD *)appended + 32))(appended, a2, __p, &v315);
        if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v315.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v288, (char *)quasar::MT_DECODERS_SECTION);
        v195 = std::string::append(&v288, ".");
        v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
        v289.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v196;
        v195->__r_.__value_.__l.__size_ = 0;
        v195->__r_.__value_.__r.__words[2] = 0;
        v195->__r_.__value_.__r.__words[0] = 0;
        v197 = *(char *)(a3 + 23);
        if (v197 >= 0)
          v198 = (const std::string::value_type *)a3;
        else
          v198 = *(const std::string::value_type **)a3;
        if (v197 >= 0)
          v199 = *(unsigned __int8 *)(a3 + 23);
        else
          v199 = *(_QWORD *)(a3 + 8);
        v200 = std::string::append(&v289, v198, v199);
        v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
        v290.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v201;
        v200->__r_.__value_.__l.__size_ = 0;
        v200->__r_.__value_.__r.__words[2] = 0;
        v200->__r_.__value_.__r.__words[0] = 0;
        v202 = std::string::append(&v290, ".");
        v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v203;
        v202->__r_.__value_.__l.__size_ = 0;
        v202->__r_.__value_.__r.__words[2] = 0;
        v202->__r_.__value_.__r.__words[0] = 0;
        v204 = std::string::append(&v291, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
        v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
        v292.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v205;
        v204->__r_.__value_.__l.__size_ = 0;
        v204->__r_.__value_.__r.__words[2] = 0;
        v204->__r_.__value_.__r.__words[0] = 0;
        v206 = std::string::append(&v292, ".");
        v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v206->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v207;
        v206->__r_.__value_.__l.__size_ = 0;
        v206->__r_.__value_.__r.__words[2] = 0;
        v206->__r_.__value_.__r.__words[0] = 0;
        if (v314 >= 0)
          v208 = (const std::string::value_type *)&v313;
        else
          v208 = (const std::string::value_type *)v313;
        if (v314 >= 0)
          v209 = HIBYTE(v314);
        else
          v209 = v314;
        v210 = std::string::append(&v293, v208, v209);
        v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
        v315.__r_.__value_.__r.__words[2] = v210->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v211;
        v210->__r_.__value_.__l.__size_ = 0;
        v210->__r_.__value_.__r.__words[2] = 0;
        v210->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, std::string *))(*(_QWORD *)appended + 32))(appended, a2, ChildOptional, &v315);
        if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v315.__r_.__value_.__l.__data_);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v292.__r_.__value_.__l.__data_);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v289.__r_.__value_.__l.__data_);
        if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v288.__r_.__value_.__l.__data_);
        quasar::PTree::~PTree((quasar::PTree *)__p);
      }
LABEL_392:
      if (v55)
      {
        std::string::basic_string[abi:ne180100]<0>(&v284, (char *)quasar::MT_DECODERS_SECTION);
        v212 = std::string::append(&v284, ".");
        v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
        v285.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v213;
        v212->__r_.__value_.__l.__size_ = 0;
        v212->__r_.__value_.__r.__words[2] = 0;
        v212->__r_.__value_.__r.__words[0] = 0;
        v214 = *(char *)(a3 + 23);
        if (v214 >= 0)
          v215 = (const std::string::value_type *)a3;
        else
          v215 = *(const std::string::value_type **)a3;
        if (v214 >= 0)
          v216 = *(unsigned __int8 *)(a3 + 23);
        else
          v216 = *(_QWORD *)(a3 + 8);
        v217 = std::string::append(&v285, v215, v216);
        v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
        v286.__r_.__value_.__r.__words[2] = v217->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v218;
        v217->__r_.__value_.__l.__size_ = 0;
        v217->__r_.__value_.__r.__words[2] = 0;
        v217->__r_.__value_.__r.__words[0] = 0;
        v219 = std::string::append(&v286, ".");
        v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
        v287.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v220;
        v219->__r_.__value_.__l.__size_ = 0;
        v219->__r_.__value_.__r.__words[2] = 0;
        v219->__r_.__value_.__r.__words[0] = 0;
        v221 = std::string::append(&v287, (const std::string::value_type *)quasar::LANGUAGE_PAIR_SPECIFIC_SETTINGS_SECTION);
        v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
        v288.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v222;
        v221->__r_.__value_.__l.__size_ = 0;
        v221->__r_.__value_.__r.__words[2] = 0;
        v221->__r_.__value_.__r.__words[0] = 0;
        v223 = std::string::append(&v288, ".");
        v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
        v289.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v224;
        v223->__r_.__value_.__l.__size_ = 0;
        v223->__r_.__value_.__r.__words[2] = 0;
        v223->__r_.__value_.__r.__words[0] = 0;
        if (v314 >= 0)
          v225 = (const std::string::value_type *)&v313;
        else
          v225 = (const std::string::value_type *)v313;
        if (v314 >= 0)
          v226 = HIBYTE(v314);
        else
          v226 = v314;
        v227 = std::string::append(&v289, v225, v226);
        v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
        v290.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v228;
        v227->__r_.__value_.__l.__size_ = 0;
        v227->__r_.__value_.__r.__words[2] = 0;
        v227->__r_.__value_.__r.__words[0] = 0;
        v229 = std::string::append(&v290, ".");
        v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v230;
        v229->__r_.__value_.__l.__size_ = 0;
        v229->__r_.__value_.__r.__words[2] = 0;
        v229->__r_.__value_.__r.__words[0] = 0;
        v231 = std::string::append(&v291, (const std::string::value_type *)quasar::BLOCKS_SECTION);
        v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
        v292.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v232;
        v231->__r_.__value_.__l.__size_ = 0;
        v231->__r_.__value_.__r.__words[2] = 0;
        v231->__r_.__value_.__r.__words[0] = 0;
        v233 = std::string::append(&v292, "[");
        v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
        v293.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v234;
        v233->__r_.__value_.__l.__size_ = 0;
        v233->__r_.__value_.__r.__words[2] = 0;
        v233->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v283, v69);
        if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v235 = &v283;
        else
          v235 = (std::string *)v283.__r_.__value_.__r.__words[0];
        if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v236 = HIBYTE(v283.__r_.__value_.__r.__words[2]);
        else
          v236 = v283.__r_.__value_.__l.__size_;
        v237 = std::string::append(&v293, (const std::string::value_type *)v235, v236);
        v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
        v315.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v238;
        v237->__r_.__value_.__l.__size_ = 0;
        v237->__r_.__value_.__r.__words[2] = 0;
        v237->__r_.__value_.__r.__words[0] = 0;
        v239 = std::string::append(&v315, "]");
        v240 = *(_OWORD *)&v239->__r_.__value_.__l.__data_;
        *(_QWORD *)&v297 = *((_QWORD *)&v239->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v240;
        v239->__r_.__value_.__l.__size_ = 0;
        v239->__r_.__value_.__r.__words[2] = 0;
        v239->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, void **))(*(_QWORD *)appended + 32))(appended, a2, v54 + 24, __p);
        if (SBYTE7(v297) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v315.__r_.__value_.__l.__data_);
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v292.__r_.__value_.__l.__data_);
        if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v291.__r_.__value_.__l.__data_);
        if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v290.__r_.__value_.__l.__data_);
        if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v289.__r_.__value_.__l.__data_);
        if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v288.__r_.__value_.__l.__data_);
        if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v287.__r_.__value_.__l.__data_);
        if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v286.__r_.__value_.__l.__data_);
        if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v285.__r_.__value_.__l.__data_);
        if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v284.__r_.__value_.__l.__data_);
        v54 += 88;
      }
      if (a8)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "<overlay-settings>");
        (*(void (**)(_BYTE *, uint64_t, uint64_t, void **))(*(_QWORD *)appended + 32))(appended, a2, a8, __p);
        if (SBYTE7(v297) < 0)
          operator delete(__p[0]);
      }
      if (quasar::gLogLevel >= 5)
      {
        v311 = 0u;
        v312 = 0u;
        v309 = 0u;
        v310 = 0u;
        v307 = 0u;
        v308 = 0u;
        v305 = 0u;
        v306 = 0u;
        v303 = 0u;
        v304 = 0u;
        v301 = 0u;
        v302 = 0u;
        v299 = 0u;
        v300 = 0u;
        v297 = 0u;
        v298 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Initializing blocks: ", 21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, v272, v271);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      if (a10)
        quasar::ProcessingBlock::ensureInitialized(appended);
      v242 = *(_QWORD *)(a1 + 160);
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)appended + 64))(__p, appended);
      std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>((uint64_t *)(v242 + 8), (_QWORD *)__p[0], &__p[1]);
      std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
      if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v294.__r_.__value_.__l.__data_);
      if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v295.__r_.__value_.__l.__data_);
      ++v69;
    }
    while (v278 != v69);
  }
  *v269 = v13;
  if (SHIBYTE(v314) < 0)
    operator delete(v313);
}

void sub_1ADE49D14()
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x240]);
  JUMPOUT(0x1ADE4A608);
}

void sub_1ADE49D30()
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x240]);
  JUMPOUT(0x1ADE4A5F8);
}

void sub_1ADE49D40()
{
  JUMPOUT(0x1ADE4A5F8);
}

void sub_1ADE49D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  char a73;
  uint64_t v73;

  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a73 < 0)
    operator delete(a69);
  JUMPOUT(0x1ADE49E44);
}

void sub_1ADE49DF8()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (SLOBYTE(STACK[0x237]) < 0)
    JUMPOUT(0x1ADE49E38);
  JUMPOUT(0x1ADE49E44);
}

void sub_1ADE49E40()
{
  JUMPOUT(0x1ADE4A5F8);
}

void sub_1ADE49E50()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x1ADE4A608);
}

void sub_1ADE49EA4()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10A1C406EFA2AE8);
  JUMPOUT(0x1ADE4A618);
}

void sub_1ADE49ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  uint64_t v70;

  if (LOBYTE(STACK[0x258]) && SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (a70 < 0)
    operator delete(a65);
  if (*(char *)(v70 - 153) < 0)
    operator delete(*(void **)(v70 - 176));
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (*(char *)(v70 - 177) < 0)
    operator delete(*(void **)(v70 - 200));
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

_QWORD *quasar::PDecTranslator::engineType@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, quasar::PDecTranslator::ENGINE_TYPE);
}

BOOL quasar::PDecTranslator::IsLanguagePairSupported(quasar::SystemConfig *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TranslationModelInfo;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v25;
  void *__p;
  char v27;

  TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo(a1);
  v8 = TranslationModelInfo;
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    if ((_QWORD *)(TranslationModelInfo + 32) == std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(*(_QWORD **)(TranslationModelInfo + 24), (_QWORD *)(TranslationModelInfo + 32), (unsigned __int8 **)a2))return 0;
    v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 8);
    if (!v10)
      return 1;
    v11 = *(unsigned __int8 *)(a4 + 23);
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a4 + 8);
    if (!v11)
      return 1;
    v12 = (_QWORD *)(v8 + 72);
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)a2);
    if (!v13
      || (v14 = *((_QWORD *)v13 + 5),
          (v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)a2)) == 0))
    {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    v16 = *((_QWORD *)v15 + 6);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v25, (__int128 *)a3, (__int128 *)a4);
    v17 = std::__find_impl[abi:ne180100]<std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>,std::__identity>(v14, v16, (unsigned __int8 **)&v25);
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)a2);
    if (!v18)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v19 = *((_QWORD *)v18 + 6);
  }
  else
  {
    v20 = *(unsigned __int8 *)(a3 + 23);
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(a3 + 8);
    if (!v20)
      return 1;
    v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a4 + 8);
    if (!v21)
      return 1;
    v22 = *(_QWORD *)(TranslationModelInfo + 48);
    v23 = *(_QWORD *)(TranslationModelInfo + 56);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v25, (__int128 *)a3, (__int128 *)a4);
    v17 = std::__find_impl[abi:ne180100]<std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>,std::__identity>(v22, v23, (unsigned __int8 **)&v25);
    v19 = *(_QWORD *)(v8 + 56);
  }
  if (v27 < 0)
    operator delete(__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v17 != v19;
}

void sub_1ADE4A7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecTranslator::PDecTranslator(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, _QWORD *a10)
{
  std::string *v18;
  _QWORD *v19;
  const std::string *TranslationModelInfo;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string *v58;
  unsigned __int8 *v59;
  _QWORD v60[2];
  uint64_t v61;
  _BYTE __str[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  *(_QWORD *)a1 = &off_1E5D353F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v58 = (std::string *)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  v57 = (std::string *)(a1 + 88);
  *(_OWORD *)(a1 + 136) = 0u;
  v18 = (std::string *)(a1 + 136);
  *(_DWORD *)(a1 + 80) = 1065353216;
  v59 = (unsigned __int8 *)(a1 + 48);
  v56 = (std::string *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  v19 = operator new(0x38uLL);
  v19[2] = 0;
  *v19 = &unk_1E5D42A30;
  v19[1] = 0;
  v19[3] = &off_1E5D353B0;
  v19[6] = 0;
  v19[5] = 0;
  v19[4] = v19 + 5;
  *(_QWORD *)(a1 + 160) = v19 + 3;
  *(_QWORD *)(a1 + 168) = v19;
  if (!quasar::PDecTranslator::IsLanguagePairSupported(a2, a3, a4, a5))
  {
    v32 = *(unsigned __int8 *)(a3 + 23);
    if ((v32 & 0x80u) != 0)
      v32 = *(_QWORD *)(a3 + 8);
    if (!v32)
    {
      v76 = 0uLL;
      v77 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      v70 = 0uLL;
      v71 = 0uLL;
      v68 = 0uLL;
      v69 = 0uLL;
      v66 = 0uLL;
      v67 = 0uLL;
      v64 = 0uLL;
      v65 = 0uLL;
      v63 = 0uLL;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Config file does not support language pair: ", 44);
      v34 = *(char *)(a4 + 23);
      if (v34 >= 0)
        v35 = a4;
      else
        v35 = *(_QWORD *)a4;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(a4 + 23);
      else
        v36 = *(_QWORD *)(a4 + 8);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"-", 1);
      v39 = *(char *)(a5 + 23);
      if (v39 >= 0)
        v40 = a5;
      else
        v40 = *(_QWORD *)a5;
      if (v39 >= 0)
        v41 = *(unsigned __int8 *)(a5 + 23);
      else
        v41 = *(_QWORD *)(a5 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
    }
    v76 = 0uLL;
    v77 = 0uLL;
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v63 = 0uLL;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Config file does not support language pair: ", 44);
    v43 = *(char *)(a4 + 23);
    if (v43 >= 0)
      v44 = a4;
    else
      v44 = *(_QWORD *)a4;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a4 + 23);
    else
      v45 = *(_QWORD *)(a4 + 8);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"-", 1);
    v48 = *(char *)(a5 + 23);
    if (v48 >= 0)
      v49 = a5;
    else
      v49 = *(_QWORD *)a5;
    if (v48 >= 0)
      v50 = *(unsigned __int8 *)(a5 + 23);
    else
      v50 = *(_QWORD *)(a5 + 8);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" for task: ", 11);
    v53 = *(char *)(a3 + 23);
    if (v53 >= 0)
      v54 = a3;
    else
      v54 = *(_QWORD *)a3;
    if (v53 >= 0)
      v55 = *(unsigned __int8 *)(a3 + 23);
    else
      v55 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  TranslationModelInfo = (const std::string *)quasar::SystemConfig::getTranslationModelInfo(a2);
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(TranslationModelInfo[8].__r_.__value_.__r.__words, (unsigned __int8 *)a3);
  v22 = v21 + 40;
  if (!v21)
    v22 = (unsigned __int8 *)a3;
  if ((char)v22[23] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
  }
  else
  {
    *(_OWORD *)__str = *(_OWORD *)v22;
    *(_QWORD *)&__str[16] = *((_QWORD *)v22 + 2);
  }
  v23 = (std::__shared_weak_count *)a10[1];
  v60[0] = *a10;
  v60[1] = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  quasar::PDecTranslator::createGraph(a1, a2, (uint64_t)__str, a4, a5, a6, a7, a8, &v61, a9, v60);
  v26 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v61;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v61 = 0;
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::string::operator=(v58, (const std::string *)__str);
  v29 = quasar::SystemConfig::getTranslationModelInfo(a2);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v29 + 232), __str);
  quasar::SystemConfig::getTranslationModelInfo(a2);
  if (v30 && v59 != v30 + 40)
  {
    *(_DWORD *)(a1 + 80) = *((_DWORD *)v30 + 18);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v59, *((uint64_t **)v30 + 7), 0);
  }
  std::string::operator=(v57, TranslationModelInfo);
  std::string::operator=(v56, (const std::string *)a4);
  std::string::operator=(v18, (const std::string *)a5);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  return a1;
}

{
  return quasar::PDecTranslator::PDecTranslator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1ADE4AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void **a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void **v25;
  uint64_t v27;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v24 + 160);
  if (*(char *)(v24 + 159) < 0)
    operator delete(*v25);
  if (*(char *)(v24 + 135) < 0)
    operator delete(*a12);
  if (*(char *)(v24 + 111) < 0)
    operator delete(*a13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a15);
  if (*(char *)(v24 + 47) < 0)
    operator delete(*a14);
  v27 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v24);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, const std::string **a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  const std::string *v10;
  const std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string v16;
  __int16 v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[136];
  std::string *v29;
  std::string *v30;
  unint64_t v31;

  quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v28);
  v28[128] = a5;
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      memset(&v16, 0, sizeof(v16));
      v17 = 0;
      v21 = 3212836864;
      v22 = -1;
      v23 = 0u;
      v24 = 0u;
      __p = 0u;
      v26 = 0;
      v27 = -1;
      std::string::operator=(&v16, v10);
      LOBYTE(v17) = 1;
      v12 = v30;
      if ((unint64_t)v30 >= v31)
      {
        v13 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v29, (const quasar::TranslationTokenInternal *)&v16);
      }
      else
      {
        quasar::TranslationTokenInternal::TranslationTokenInternal(v30, (const quasar::TranslationTokenInternal *)&v16);
        v13 = (std::string *)((char *)v12 + 136);
      }
      v30 = v13;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (SBYTE7(v24) < 0)
        operator delete((void *)v23);
      if (v18)
      {
        v19 = v18;
        operator delete(v18);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      ++v10;
    }
    while (v10 != v11);
  }
  if (v29 != v30)
    v30[-5].__r_.__value_.__s.__data_[8] = 0;
  quasar::PDecTranslator::translate(a1, (uint64_t)v28, a3, a4, a6);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v28);
}

void sub_1ADE4AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a29);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t i;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  std::string *v62;
  std::string *v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void **v72;
  __int128 **v73;
  __int128 **v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void **v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void **v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void **v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  std::string::value_type *v92;
  __int128 v93;
  void *v94[2];
  char v95;
  void *v96[2];
  unsigned __int8 v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  __int128 ***v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *__p;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  std::string *v109;
  unint64_t v110;
  uint64_t v111;
  quasar::MetaInfo::Impl *v112;
  __int128 v113;
  uint64_t v114;
  void *v115[2];
  __int128 v116;
  void *v117[2];
  __int128 v118;
  void *v119[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  void **v132;
  __int128 v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v134 = a3;
  std::chrono::steady_clock::now();
  v135 = 0;
  v136 = 0;
  LODWORD(v115[0]) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)v115);
  v135 = boost::uuids::random_generator_pure::operator()((uint64_t)v115);
  v136 = v9;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)v115);
  v10 = operator new(0x28uLL);
  v132 = (void **)v10;
  v133 = xmmword_1AE184E20;
  *v10 = 0u;
  v10[1] = 0u;
  *(_QWORD *)((char *)v10 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v135, v10);
  if (quasar::gLogLevel >= 4)
  {
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    *(_OWORD *)v119 = 0u;
    v116 = 0u;
    *(_OWORD *)v117 = 0u;
    *(_OWORD *)v115 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"EngineTranslationId: ", 21);
    if (v133 >= 0)
      v12 = (void **)&v132;
    else
      v12 = v132;
    if (v133 >= 0)
      v13 = HIBYTE(v133);
    else
      v13 = v133;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" started, braneVersion: ", 24);
    quasar::git_version::get(&__p);
    if ((v107 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v107 & 0x80u) == 0)
      v17 = v107;
    else
      v17 = v106;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", modelVersion: ", 16);
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = a1 + 88;
    else
      v21 = *(_QWORD *)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", taskId: ", 10);
    v25 = *(char *)(a1 + 47);
    if (v25 >= 0)
      v26 = a1 + 24;
    else
      v26 = *(_QWORD *)(a1 + 24);
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a1 + 47);
    else
      v27 = *(_QWORD *)(a1 + 32);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", sourceLocale: ", 16);
    v30 = *(char *)(a1 + 135);
    if (v30 >= 0)
      v31 = a1 + 112;
    else
      v31 = *(_QWORD *)(a1 + 112);
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a1 + 135);
    else
      v32 = *(_QWORD *)(a1 + 120);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", targetLocale: ", 16);
    v35 = *(char *)(a1 + 159);
    if (v35 >= 0)
      v36 = a1 + 136;
    else
      v36 = *(_QWORD *)(a1 + 136);
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 159);
    else
      v37 = *(_QWORD *)(a1 + 144);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    if ((char)v107 < 0)
      operator delete(__p);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v115);
    if (quasar::gLogLevel >= 5)
    {
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      *(_OWORD *)v119 = 0u;
      v116 = 0u;
      *(_OWORD *)v117 = 0u;
      *(_OWORD *)v115 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"EngineTranslationId: ", 21);
      if (v133 >= 0)
        v39 = (void **)&v132;
      else
        v39 = v132;
      if (v133 >= 0)
        v40 = HIBYTE(v133);
      else
        v40 = v133;
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", entry: ", 9);
      v43 = quasar::operator<<(v42, a2);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", options: ", 11);
      quasar::operator<<(v44);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
    }
  }
  quasar::getOverridesFromTranslationOptions(&v134, (uint64_t *)&v113);
  v45 = *((_QWORD *)&v113 + 1);
  for (i = v113; i != v45; i += 24)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)i)&& quasar::gLogLevel >= 4)
    {
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      *(_OWORD *)v119 = 0u;
      v116 = 0u;
      *(_OWORD *)v117 = 0u;
      *(_OWORD *)v115 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"Task: ", 6);
      v48 = *(char *)(a1 + 47);
      if (v48 >= 0)
        v49 = a1 + 24;
      else
        v49 = *(_QWORD *)(a1 + 24);
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(a1 + 47);
      else
        v50 = *(_QWORD *)(a1 + 32);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" doesn't support override '", 27);
      v53 = *(char *)(i + 23);
      if (v53 >= 0)
        v54 = i;
      else
        v54 = *(_QWORD *)i;
      if (v53 >= 0)
        v55 = *(unsigned __int8 *)(i + 23);
      else
        v55 = *(_QWORD *)(i + 8);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"'", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v115);
    }
  }
  v57 = *(_DWORD *)(a1 + 16);
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&__p);
  if (v57 == 0x7FFFFFFF
    || (v111 = *(_QWORD *)(a2 + 160),
        __p = *(void **)a2,
        LOBYTE(v106) = *(_BYTE *)(a2 + 8),
        quasar::MetaInfo::operator=(&v112, (const quasar::MetaInfo::Impl **)(a2 + 192)),
        v59 = *(_QWORD *)(a2 + 136),
        v58 = *(_QWORD *)(a2 + 144),
        v59 == v58))
  {
LABEL_76:
    v67 = 0;
    v68 = (void **)a2;
    v69 = a4;
  }
  else
  {
    v60 = 0;
    while (1)
    {
      if (*(char *)(v59 + 23) < 0)
        v61 = *(_QWORD *)(v59 + 8);
      else
        LODWORD(v61) = *(unsigned __int8 *)(v59 + 23);
      v62 = v109;
      if ((unint64_t)v109 >= v110)
      {
        v63 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>(&v108, (const quasar::TranslationTokenInternal *)v59);
      }
      else
      {
        quasar::TranslationTokenInternal::TranslationTokenInternal(v109, (const quasar::TranslationTokenInternal *)v59);
        v63 = (std::string *)((char *)v62 + 136);
      }
      v109 = v63;
      v64 = *(_DWORD *)(a1 + 16);
      v65 = __OFSUB__(v64, v61 + v60);
      v66 = v64 - (v61 + v60);
      if ((v66 < 0) ^ v65 | (v66 == 0))
        break;
      v60 += v61 + *(unsigned __int8 *)(v59 + 24);
      v59 += 136;
      if (v59 == v58)
        goto LABEL_76;
    }
    if (*(char *)(v59 + 23) < 0)
      v91 = *(_QWORD *)(v59 + 8);
    else
      LODWORD(v91) = *(unsigned __int8 *)(v59 + 23);
    v69 = a4;
    quasar::truncateUtf8((std::string *)v59, v66 + v91, (std::string *)v115);
    v92 = &v109[-6].__r_.__value_.__s.__data_[8];
    if (v109[-5].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*(void **)v92);
    v93 = *(_OWORD *)v115;
    *((_QWORD *)v92 + 2) = v116;
    *(_OWORD *)v92 = v93;
    v109[-5].__r_.__value_.__s.__data_[8] = 0;
    v68 = &__p;
    v67 = 1;
  }
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v70 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v102, (const quasar::TranslationPhraseInternal *)v68);
  v71 = *(_QWORD **)(a1 + 8);
  v103 = v70;
  v115[0] = 0;
  v115[1] = 0;
  *(_QWORD *)&v116 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v115, v102, v70, 0x8F5C28F5C28F5C29 * ((v70 - v102) >> 3));
  v98 = v113;
  v99 = v114;
  v114 = 0;
  v113 = 0uLL;
  v100 = 1;
  quasar::ProcessingGraph::run(v71, (uint64_t *)v115, &v98);
  if (v100)
  {
    v96[0] = &v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
  }
  v96[0] = v115;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
  if (v69)
  {
    v72 = (void **)v101;
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v115, (quasar::TranslationPhraseInternal *)a2);
    quasar::formatNBestlist(v72, (uint64_t)v115, v69);
    if (SBYTE7(v116) < 0)
      operator delete(v115[0]);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v73 = *v101;
  v74 = v101[1];
  if (*v101 != v74)
  {
    do
    {
      if (v67)
      {
        v75 = quasar::MetaInfo::get((quasar::MetaInfo *)(v73 + 24));
        std::string::basic_string[abi:ne180100]<0>(v96, "status");
        std::string::basic_string[abi:ne180100]<0>(v94, "input_truncated");
        quasar::PTree::PTree(v115, v94);
        quasar::PTree::putChild(v75, (uint64_t)v96, (uint64_t)v115, 1);
        quasar::PTree::~PTree((quasar::PTree *)v115);
        if (v95 < 0)
          operator delete(v94[0]);
        if ((char)v97 < 0)
          operator delete(v96[0]);
      }
      quasar::TranslationPhraseInternal::convertToExternal(v73, (uint64_t)v115);
      v76 = a5[1];
      if (v76 >= a5[2])
      {
        v77 = std::vector<quasar::TranslationPhrase>::__push_back_slow_path<quasar::TranslationPhrase>(a5, (uint64_t *)v115);
      }
      else
      {
        std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>((uint64_t)(a5 + 2), a5[1], (uint64_t *)v115);
        v77 = v76 + 136;
      }
      a5[1] = v77;
      if (BYTE8(v122))
      {
        v96[0] = &v121;
        std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
      }
      if (BYTE8(v120) && SBYTE7(v120) < 0)
        operator delete(v119[0]);
      if (SHIBYTE(v118) < 0)
        operator delete(v117[1]);
      v96[0] = &v116;
      std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
      v73 += 25;
    }
    while (v73 != v74);
  }
  if (quasar::gLogLevel > 4)
  {
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    *(_OWORD *)v119 = 0u;
    v116 = 0u;
    *(_OWORD *)v117 = 0u;
    *(_OWORD *)v115 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"EngineTranslationId: ", 21);
    if (v133 >= 0)
      v79 = (void **)&v132;
    else
      v79 = v132;
    if (v133 >= 0)
      v80 = HIBYTE(v133);
    else
      v80 = v133;
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)", output: [", 11);
    v94[0] = ",";
    v94[1] = (void *)1;
    quasar::join<std::vector<quasar::TranslationPhrase>>(a5, (uint64_t *)v94);
    if ((v97 & 0x80u) == 0)
      v83 = v96;
    else
      v83 = (void **)v96[0];
    if ((v97 & 0x80u) == 0)
      v84 = v97;
    else
      v84 = (uint64_t)v96[1];
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"]", 1);
    if ((char)v97 < 0)
      operator delete(v96[0]);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v115);
  }
  std::chrono::steady_clock::now();
  if (quasar::gLogLevel >= 4)
  {
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    *(_OWORD *)v119 = 0u;
    v116 = 0u;
    *(_OWORD *)v117 = 0u;
    *(_OWORD *)v115 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v115);
    v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"EngineTranslationId: ", 21);
    if (v133 >= 0)
      v87 = (void **)&v132;
    else
      v87 = v132;
    if (v133 >= 0)
      v88 = HIBYTE(v133);
    else
      v88 = v133;
    v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v87, v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)" finished, took: ", 17);
    v90 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"ms", 2);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v115);
  }
  std::unique_ptr<quasar::ProcessingBlock::ValueType>::reset[abi:ne180100]((void ***)&v101, 0);
  v115[0] = &v102;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&__p);
  v115[0] = &v113;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
  if (SHIBYTE(v133) < 0)
    operator delete(v132);
}

void sub_1ADE4B86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  uint64_t v55;

  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a26);
  __p = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v55 - 121) < 0)
    operator delete(*(void **)(v55 - 144));
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, const quasar::TranslationPhrase *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _BYTE v9[16];
  uint64_t v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  _BYTE v16[40];
  _BYTE v17[200];
  void **v18;

  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)v9, a2);
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v17, v9);
  quasar::PDecTranslator::translate(a1, (uint64_t)v17, a3, a4, a5);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v17);
  if (v16[24])
  {
    v18 = (void **)v16;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
  if (v15 && v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  v18 = (void **)&v10;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v18);
}

void sub_1ADE4BB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a27);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::random_generator_pure::operator()(uint64_t a1)
{
  _QWORD v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  boost::uuids::detail::random_provider_base::get_random_bytes(a1, (char *)v2, 0x10uLL);
  BYTE6(v2[0]) = BYTE6(v2[0]) & 0xF | 0x40;
  return v2[0];
}

void quasar::PDecTranslator::translate(uint64_t a1, quasar::TranslationPhrase **a2, unsigned __int8 a3, uint64_t a4)
{
  _BYTE v7[8];
  _QWORD *v8;
  void **v9;
  void *__p[2];
  char v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100]<char const* const&,std::vector<quasar::TranslationPhrase> const&,0>(__p, &quasar::ProcessingBlock::DEFAULT_INPUT_NAME, a2);
  std::map<std::string,std::vector<quasar::TranslationPhrase>>::map[abi:ne180100]((uint64_t)v7, (const void **)__p, 1);
  (*(void (**)(uint64_t, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, v7, a3, a4);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)v7, v8);
  v9 = (void **)v12;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_1ADE4BCA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)va, v5);
  std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::PDecTranslator::translate(uint64_t a1@<X0>, const void ***a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 *p_p;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t i;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  const void **v57;
  const quasar::TranslationPhrase *j;
  const quasar::TranslationPhrase *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  const void **v63;
  const void ***v64;
  BOOL v65;
  _QWORD *v66;
  void **v67;
  __int128 **v68;
  __int128 **v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void **v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  void **v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v88[2];
  void *v89[2];
  unsigned __int8 v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  __int128 ***v94;
  _BYTE v95[16];
  uint64_t v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  char v101;
  _BYTE v102[40];
  uint64_t *v103;
  _QWORD *v104[2];
  __int128 __p;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void **v124;
  __int128 v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v126 = a3;
  std::chrono::steady_clock::now();
  v127 = 0;
  v128 = 0;
  LODWORD(v107) = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v107);
  v127 = boost::uuids::random_generator_pure::operator()((uint64_t)&v107);
  v128 = v7;
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v107);
  v8 = operator new(0x28uLL);
  v124 = (void **)v8;
  v125 = xmmword_1AE184E20;
  *v8 = 0u;
  v8[1] = 0u;
  *(_QWORD *)((char *)v8 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)&v127, v8);
  if (quasar::gLogLevel >= 4)
  {
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v107 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"EngineTranslationId: ", 21);
    if (v125 >= 0)
      v10 = (void **)&v124;
    else
      v10 = v124;
    if (v125 >= 0)
      v11 = HIBYTE(v125);
    else
      v11 = v125;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" started, braneVersion: ", 24);
    quasar::git_version::get(&__p);
    if (v106 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if (v106 >= 0)
      v15 = HIBYTE(v106);
    else
      v15 = *((_QWORD *)&__p + 1);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", modelVersion: ", 16);
    v18 = *(char *)(a1 + 111);
    if (v18 >= 0)
      v19 = a1 + 88;
    else
      v19 = *(_QWORD *)(a1 + 88);
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a1 + 111);
    else
      v20 = *(_QWORD *)(a1 + 96);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", taskId: ", 10);
    v23 = *(char *)(a1 + 47);
    if (v23 >= 0)
      v24 = a1 + 24;
    else
      v24 = *(_QWORD *)(a1 + 24);
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a1 + 47);
    else
      v25 = *(_QWORD *)(a1 + 32);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", sourceLocale: ", 16);
    v28 = *(char *)(a1 + 135);
    if (v28 >= 0)
      v29 = a1 + 112;
    else
      v29 = *(_QWORD *)(a1 + 112);
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(a1 + 135);
    else
      v30 = *(_QWORD *)(a1 + 120);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", targetLocale: ", 16);
    v33 = *(char *)(a1 + 159);
    if (v33 >= 0)
      v34 = a1 + 136;
    else
      v34 = *(_QWORD *)(a1 + 136);
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(a1 + 159);
    else
      v35 = *(_QWORD *)(a1 + 144);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    if (SHIBYTE(v106) < 0)
      operator delete((void *)__p);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v107);
    if (quasar::gLogLevel >= 5)
    {
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v107 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"EngineTranslationId: ", 21);
      if (v125 >= 0)
        v37 = (void **)&v124;
      else
        v37 = v124;
      if (v125 >= 0)
        v38 = HIBYTE(v125);
      else
        v38 = v125;
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", input: ", 9);
      quasar::translateInputMapToString(a2);
      if (v106 >= 0)
        v41 = &__p;
      else
        v41 = (__int128 *)__p;
      if (v106 >= 0)
        v42 = HIBYTE(v106);
      else
        v42 = *((_QWORD *)&__p + 1);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", options: ", 11);
      quasar::operator<<(v44);
      if (SHIBYTE(v106) < 0)
        operator delete((void *)__p);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v107);
    }
  }
  v85 = a5;
  quasar::getOverridesFromTranslationOptions(&v126, (uint64_t *)&__p);
  v45 = *((_QWORD *)&__p + 1);
  for (i = __p; i != v45; i += 24)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)i)&& quasar::gLogLevel >= 4)
    {
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v107 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Task: ", 6);
      v48 = *(char *)(a1 + 47);
      if (v48 >= 0)
        v49 = a1 + 24;
      else
        v49 = *(_QWORD *)(a1 + 24);
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(a1 + 47);
      else
        v50 = *(_QWORD *)(a1 + 32);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" doesn't support override '", 27);
      v53 = *(char *)(i + 23);
      if (v53 >= 0)
        v54 = i;
      else
        v54 = *(_QWORD *)i;
      if (v53 >= 0)
        v55 = *(unsigned __int8 *)(i + 23);
      else
        v55 = *(_QWORD *)(i + 8);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"'", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v107);
    }
  }
  v104[0] = 0;
  v104[1] = 0;
  v103 = (uint64_t *)v104;
  v57 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      v59 = (const quasar::TranslationPhrase *)v57[7];
      for (j = (const quasar::TranslationPhrase *)v57[8];
            v59 != j;
            v59 = (const quasar::TranslationPhrase *)((char *)v59 + 136))
      {
        v89[0] = v57 + 4;
        v60 = std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v103, v57 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)v89);
        quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)v95, v59);
        quasar::TranslationPhraseInternal::TranslationPhraseInternal(&v107, v95);
        v61 = v60[8];
        if (v61 >= v60[9])
        {
          v62 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal>(v60 + 7, (uint64_t *)&v107);
        }
        else
        {
          quasar::TranslationPhraseInternal::TranslationPhraseInternal(v60[8], (uint64_t *)&v107);
          v62 = v61 + 200;
          v60[8] = v61 + 200;
        }
        v60[8] = v62;
        quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v107);
        if (v102[24])
        {
          v89[0] = v102;
          std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
        }
        if (v101 && v100 < 0)
          operator delete(v99);
        if (v98 < 0)
          operator delete(v97);
        v89[0] = &v96;
        std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
      }
      v63 = (const void **)v57[1];
      if (v63)
      {
        do
        {
          v64 = (const void ***)v63;
          v63 = (const void **)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (const void ***)v57[2];
          v65 = *v64 == v57;
          v57 = (const void **)v64;
        }
        while (!v65);
      }
      v57 = (const void **)v64;
    }
    while (v64 != a2 + 1);
  }
  v66 = *(_QWORD **)(a1 + 8);
  v91 = __p;
  v92 = v106;
  __p = 0uLL;
  v106 = 0;
  v93 = 1;
  quasar::ProcessingGraph::run(v66, (const void ***)&v103, &v91);
  if (v93)
  {
    *(_QWORD *)&v107 = &v91;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  }
  if (a4)
  {
    v67 = (void **)v94;
    std::string::basic_string[abi:ne180100]<0>(&v107, "__NONE__");
    quasar::formatNBestlist(v67, (uint64_t)&v107, a4);
    if (SBYTE7(v108) < 0)
      operator delete((void *)v107);
  }
  *v85 = 0;
  v85[1] = 0;
  v85[2] = 0;
  v69 = *v94;
  v68 = v94[1];
  if (*v94 != v68)
  {
    do
    {
      quasar::TranslationPhraseInternal::convertToExternal(v69, (uint64_t)&v107);
      v70 = v85[1];
      if (v70 >= v85[2])
      {
        v71 = std::vector<quasar::TranslationPhrase>::__push_back_slow_path<quasar::TranslationPhrase>(v85, (uint64_t *)&v107);
      }
      else
      {
        std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>((uint64_t)(v85 + 2), v85[1], (uint64_t *)&v107);
        v71 = v70 + 136;
      }
      v85[1] = v71;
      if (BYTE8(v114))
      {
        v89[0] = &v113;
        std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
      }
      if (BYTE8(v112) && SBYTE7(v112) < 0)
        operator delete((void *)v111);
      if (SHIBYTE(v110) < 0)
        operator delete(*((void **)&v109 + 1));
      v89[0] = &v108;
      std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
      v69 += 25;
    }
    while (v69 != v68);
  }
  if (quasar::gLogLevel > 4)
  {
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v107 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"EngineTranslationId: ", 21);
    if (v125 >= 0)
      v73 = (void **)&v124;
    else
      v73 = v124;
    if (v125 >= 0)
      v74 = HIBYTE(v125);
    else
      v74 = v125;
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", output: [", 11);
    v88[0] = (uint64_t)",";
    v88[1] = 1;
    quasar::join<std::vector<quasar::TranslationPhrase>>(v85, v88);
    if ((v90 & 0x80u) == 0)
      v77 = v89;
    else
      v77 = (void **)v89[0];
    if ((v90 & 0x80u) == 0)
      v78 = v90;
    else
      v78 = (uint64_t)v89[1];
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"]", 1);
    if ((char)v90 < 0)
      operator delete(v89[0]);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v107);
  }
  std::chrono::steady_clock::now();
  if (quasar::gLogLevel >= 4)
  {
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v107 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"EngineTranslationId: ", 21);
    if (v125 >= 0)
      v81 = (void **)&v124;
    else
      v81 = v124;
    if (v125 >= 0)
      v82 = HIBYTE(v125);
    else
      v82 = v125;
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" finished, took: ", 17);
    v84 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"ms", 2);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v107);
  }
  std::unique_ptr<quasar::ProcessingBlock::ValueType>::reset[abi:ne180100]((void ***)&v94, 0);
  std::__tree<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::ProcessingBlock::ValueType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::ProcessingBlock::ValueType>>>::destroy((uint64_t)&v103, v104[0]);
  *(_QWORD *)&v107 = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  if (SHIBYTE(v125) < 0)
    operator delete(v124);
}

void sub_1ADE4C630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  if (*(char *)(v63 - 129) < 0)
    operator delete(*(void **)(v63 - 152));
  _Unwind_Resume(a1);
}

void quasar::PDecTranslator::PDecCompilationContext::~PDecCompilationContext(quasar::PDecTranslator::PDecCompilationContext *this)
{
  *(_QWORD *)this = &off_1E5D353B0;
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E5D353B0;
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1AF44D190);
}

void quasar::PDecTranslator::~PDecTranslator(void **this)
{
  quasar::PDecTranslator::~PDecTranslator(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *this = &off_1E5D353F8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[1];
  this[1] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

uint64_t quasar::PDecTranslator::getCompilationContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 168);
  *a2 = *(_QWORD *)(this + 160);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

boost::uuids::detail::random_provider_base *boost::uuids::detail::random_provider_base::random_provider_base(boost::uuids::detail::random_provider_base *this)
{
  int v2;
  uint64_t v4;
  std::runtime_error *v5;
  int8x16_t v6;
  uint64_t v7;
  std::string v8;
  std::runtime_error v9;
  uint64_t v10;

  *(_DWORD *)this = -1;
  v2 = open("/dev/urandom", 0x1000000);
  *(_DWORD *)this = v2;
  if (v2 == -1)
  {
    v4 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&v8, "open /dev/urandom");
    v5 = std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&unk_1E5D29A68;
    v10 = v4;
    v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/uuid/detail/random_provider_posix.ipp";
    v6.i64[1] = (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()";
    v7 = 60;
    boost::throw_exception<boost::uuids::entropy_error>(v5, &v6);
  }
  return this;
}

void sub_1ADE4C968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::uuids::entropy_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1, a2);
}

void sub_1ADE4C9DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  std::runtime_error_vtbl *v6;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)a1 = &unk_1E5D29638;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29668;
  v6 = a2[1].__vftable;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29698;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &unk_1E5D29A68;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 32) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_1E5D29638;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29668;
  *(_QWORD *)(v2 + 32) = &unk_1E5D29698;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1ADE4CB94(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40261F87E4);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1ADE4CC14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((_QWORD *)this + 2);
}

void `non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1AF44D190);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E5D29A68;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &unk_1E5D29638;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29668;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29698;
  return a1;
}

void sub_1ADE4CE70(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::get_random_bytes(uint64_t this, char *a2, unint64_t a3)
{
  int *v5;
  unint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  std::string v10;
  std::runtime_error v11;
  uint64_t v12;

  if (a3)
  {
    v5 = (int *)this;
    v6 = 0;
    do
    {
      this = read(*v5, &a2[v6], a3 - v6);
      if (this < 0)
      {
        this = (uint64_t)__error();
        if (*(_DWORD *)this != 4)
        {
          v7 = *(int *)this;
          std::string::basic_string[abi:ne180100]<0>(&v10, "read");
          std::runtime_error::runtime_error(&v11, &v10);
          v11.__vftable = (std::runtime_error_vtbl *)&unk_1E5D29A68;
          v12 = v7;
          v8.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode"
                               ".app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal."
                               "sdk/usr/local/include/boost/uuid/detail/random_provider_posix.ipp";
          v8.i64[1] = (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
          v9 = 98;
          boost::throw_exception<boost::uuids::entropy_error>(&v11, &v8);
        }
      }
      else
      {
        v6 += this;
      }
    }
    while (v6 < a3);
  }
  return this;
}

void sub_1ADE4CF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(boost::uuids::detail::random_provider_base *this)
{
  uint64_t result;

  result = *(unsigned int *)this;
  if ((result & 0x80000000) == 0)
    return close(result);
  return result;
}

_BYTE *boost::uuids::to_chars<char *>(uint64_t a1, _BYTE *a2)
{
  unint64_t i;
  _BYTE *v3;
  char v4;
  unsigned int v5;
  char v6;

  for (i = 0; i != 16; ++i)
  {
    v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u)
      v4 = 87;
    else
      v4 = 48;
    *a2 = v4 + (*(_BYTE *)(a1 + i) >> 4);
    a2 += 2;
    v5 = *(_BYTE *)(a1 + i) & 0xF;
    if (v5 >= 0xA)
      v6 = 87;
    else
      v6 = 48;
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

_QWORD *std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100]<char const* const&,std::vector<quasar::TranslationPhrase> const&,0>(_QWORD *a1, char **a2, quasar::TranslationPhrase **a3)
{
  quasar::TranslationPhrase *v5;

  v5 = (quasar::TranslationPhrase *)std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 4) = 0;
  v5 = (quasar::TranslationPhrase *)((char *)v5 + 24);
  *((_QWORD *)v5 + 2) = 0;
  std::vector<quasar::TranslationPhrase>::__init_with_size[abi:ne180100]<quasar::TranslationPhrase*,quasar::TranslationPhrase*>(v5, *a3, a3[1], 0xF0F0F0F0F0F0F0F1 * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_1ADE4D06C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

quasar::TranslationPhrase *std::vector<quasar::TranslationPhrase>::__init_with_size[abi:ne180100]<quasar::TranslationPhrase*,quasar::TranslationPhrase*>(quasar::TranslationPhrase *result, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, unint64_t a4)
{
  quasar::TranslationPhrase *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*,quasar::TranslationPhrase*,quasar::TranslationPhrase*>((uint64_t)v6 + 16, a2, a3, *((quasar::TranslationPhrase **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1ADE4D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::TranslationPhrase *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*,quasar::TranslationPhrase*,quasar::TranslationPhrase*>(uint64_t a1, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, quasar::TranslationPhrase *this)
{
  quasar::TranslationPhrase *v4;
  const quasar::TranslationPhrase *v6;
  _QWORD v8[3];
  char v9;
  quasar::TranslationPhrase *v10;
  quasar::TranslationPhrase *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::TranslationPhrase::TranslationPhrase(v4, v6);
      v6 = (const quasar::TranslationPhrase *)((char *)v6 + 136);
      v4 = (quasar::TranslationPhrase *)((char *)v11 + 136);
      v11 = (quasar::TranslationPhrase *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE4D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const* const&>(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v11;
}

void sub_1ADE4D32C(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *quasar::joinToStream<std::vector<quasar::TranslationPhrase>>(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::operator<<(v6, v3);
      v7 = 0;
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__emplace_hint_unique_key_args<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec> const&>(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(a1, a2, &v16, &v15, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v13[1] = a1 + 1;
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v16, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 40))(*a5, a2[4]))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)v12[4] + 40))(v12[4], *a5))
      goto LABEL_16;
    return std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t)a1, a3, a5);
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a2[4] + 40))(a2[4], *a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a5 + 40))(*a5, v15[4]))
        return std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::__find_equal<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__find_impl[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string,std::__identity>(_QWORD *a1, _QWORD *a2, unsigned __int8 **a3)
{
  _QWORD *v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      else
        v9 = (unsigned __int8 *)v3[5];
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5]))
            return v3;
        }
        else
        {
          if (!*((_BYTE *)v3 + 55))
            return v3;
          v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v11 = (_QWORD *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::__find_impl[abi:ne180100]<std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    v8 = *((char *)a3 + 47);
    if (v8 >= 0)
      v9 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 47);
    else
      v9 = a3[4];
    v12 = a3[3];
    v10 = (unsigned __int8 *)(a3 + 3);
    v11 = v12;
    if (v8 >= 0)
      v13 = v10;
    else
      v13 = v11;
    while (1)
    {
      v14 = *(unsigned __int8 *)(v3 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v15 = *(unsigned __int8 **)(v3 + 8);
      if (v15 == v6)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
          {
LABEL_25:
            v17 = *(unsigned __int8 *)(v3 + 47);
            if ((v17 & 0x80u) == 0)
              v18 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 47);
            else
              v18 = *(unsigned __int8 **)(v3 + 32);
            if (v18 == v9)
            {
              if ((v17 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)(v3 + 24), v13, *(_QWORD *)(v3 + 32)))
                  return v3;
              }
              else
              {
                if (!*(_BYTE *)(v3 + 47))
                  return v3;
                v19 = 0;
                while (*(unsigned __int8 *)(v3 + v19 + 24) == v13[v19])
                {
                  if (v17 == ++v19)
                    return v3;
                }
              }
            }
          }
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            goto LABEL_25;
          v16 = 0;
          while (*(unsigned __int8 *)(v3 + v16) == v7[v16])
          {
            if (v14 == ++v16)
              goto LABEL_25;
          }
        }
      }
      v3 += 48;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void std::__shared_ptr_emplace<quasar::PDecTranslator::PDecCompilationContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PDecTranslator::PDecCompilationContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::PDecTranslator::PDecCompilationContext>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::vector<quasar::TranslationPhrase>::__push_back_slow_path<quasar::TranslationPhrase>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[136 * v3];
  v13 = &v7[136 * v6];
  std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 136;
  std::vector<quasar::TranslationPhrase>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::TranslationPhrase>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADE4D96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhrase>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *a3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 16) = *((_OWORD *)a3 + 1);
  *(_QWORD *)(a2 + 32) = a3[4];
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  v4 = *(_OWORD *)(a3 + 5);
  *(_QWORD *)(a2 + 56) = a3[7];
  *(_OWORD *)(a2 + 40) = v4;
  a3[6] = 0;
  a3[7] = 0;
  a3[5] = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (*((_BYTE *)a3 + 88))
  {
    v5 = *((_OWORD *)a3 + 4);
    *(_QWORD *)(a2 + 80) = a3[10];
    *(_OWORD *)(a2 + 64) = v5;
    a3[9] = 0;
    a3[10] = 0;
    a3[8] = 0;
    *(_BYTE *)(a2 + 88) = 1;
  }
  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  if (*((_BYTE *)a3 + 120))
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 96) = *((_OWORD *)a3 + 6);
    *(_QWORD *)(a2 + 112) = a3[14];
    a3[12] = 0;
    a3[13] = 0;
    a3[14] = 0;
    *(_BYTE *)(a2 + 120) = 1;
  }
  *(_WORD *)(a2 + 128) = *((_WORD *)a3 + 64);
}

uint64_t std::vector<quasar::TranslationPhrase>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>,std::reverse_iterator<quasar::TranslationPhrase*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 17;
      std::allocator<quasar::TranslationPhrase>::construct[abi:ne180100]<quasar::TranslationPhrase,quasar::TranslationPhrase>(a1, v7 - 136, v9);
      v7 = *((_QWORD *)&v16 + 1) - 136;
      *((_QWORD *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,std::reverse_iterator<quasar::TranslationPhrase*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::TranslationPhrase>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::TranslationPhrase>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::TranslationPhrase>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v4, i - 136);
  }
}

uint64_t std::map<std::string,std::vector<quasar::TranslationPhrase>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADE4DCCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__construct_node<std::pair<std::string const,std::vector<quasar::TranslationPhrase>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADE4DDC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<quasar::TranslationPhrase>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::TranslationPhrase>::__init_with_size[abi:ne180100]<quasar::TranslationPhrase*,quasar::TranslationPhrase*>((quasar::TranslationPhrase *)&this[1], *((quasar::TranslationPhrase **)a2 + 3), *((quasar::TranslationPhrase **)a2 + 4), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1ADE4DE54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xA3D70A3D70A3D7)
    v9 = 0x147AE147AE147AELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[200 * v4];
  v16 = &v10[200 * v9];
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v14, a2);
  v15 = v14 + 200;
  std::vector<quasar::TranslationPhraseInternal>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADE4DF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationPhraseInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADE4E090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1ADE4E180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE4E278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE4E37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE4E768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;

  _Unwind_Resume(a1);
}

void sub_1ADE4E970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADE4EA40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADE4EB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADE4ECB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADE4EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADE4EF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_1ADE4EFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE4F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;

  a17 = (void **)(v17 - 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void sub_1ADE4F79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__pa,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__split_buffer<std::wstring> *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  __pa = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_1ADE4FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__pa,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__split_buffer<std::wstring> *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  __pa = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_1ADE50040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, void *a10, void *a11, void *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::wstring> *a19)
{

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_1ADE502D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADE50590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v25 + 104);
  *(_QWORD *)(v27 - 96) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 96));

  _Unwind_Resume(a1);
}

void sub_1ADE50674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADE512DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char a70;

  if (__p)
    operator delete(__p);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)&a70);
  _Unwind_Resume(a1);
}

void sub_1ADE5153C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_ea8_80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE104c47_ZTSNSt3__110shared_ptrIN6quasar10TranslatorEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v3 = a1 + 80;
  *(_QWORD *)(a1 + 96) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v3 + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE104c47_ZTSNSt3__110shared_ptrIN6quasar10TranslatorEEE(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 104);
  v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void sub_1ADE51734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

EMTAlternativeDescription *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorI8OverloadIJZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_EN3__0clENS_10shared_ptrINS_7variantIJN6quasar24AlternativeSelectionSpan11Alternative17GenderDescriptionENSE_18MeaningDescriptionEEEEEEEUlSG_E_ZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_ENS9_clESI_EUlSF_E_EEEEJRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEEEEDcT_DpT0_(uint64_t a1, _QWORD *a2)
{
  EMTGenderDescription *v2;
  EMTAlternativeDescription *v3;

  v2 = -[EMTGenderDescription initWithGender:defaultGender:]([EMTGenderDescription alloc], "initWithGender:defaultGender:", *a2 == 1, HIDWORD(*a2) == 1);
  v3 = -[EMTAlternativeDescription initWithGenderDescription:]([EMTAlternativeDescription alloc], "initWithGenderDescription:", v2);

  return v3;
}

void sub_1ADE51858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

EMTAlternativeDescription *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorI8OverloadIJZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_EN3__0clENS_10shared_ptrINS_7variantIJN6quasar24AlternativeSelectionSpan11Alternative17GenderDescriptionENSE_18MeaningDescriptionEEEEEEEUlSG_E_ZZZ115__EMTTranslator__dispatchTranslationRequest_isFinal_spans_translator_sourceLocale_targetLocale_options_completion__EUb_ENS9_clESI_EUlSF_E_EEEEJRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEEEEEDcT_DpT0_(uint64_t a1, uint64_t a2)
{
  EMTMeaningDescription *v2;
  std::string *p_p;
  std::string::size_type size;
  void *v5;
  EMTMeaningDescription *v6;
  EMTAlternativeDescription *v7;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v2 = [EMTMeaningDescription alloc];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", p_p, size, __p.__r_.__value_.__r.__words[0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[EMTMeaningDescription initWithDefinition:](v2, "initWithDefinition:", v5);

  v7 = -[EMTAlternativeDescription initWithMeaningDescription:]([EMTAlternativeDescription alloc], "initWithMeaningDescription:", v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1ADE51938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  v15 = v14;

  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::__emplace_hint_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>&,EMTAlternativeDescription * {__strong}&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, id *a5)
{
  uint64_t **v8;
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (uint64_t **)std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(a1, a2, &v12, &v11, a3);
  result = *v8;
  if (!*v8)
  {
    std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::__construct_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>&,EMTAlternativeDescription * {__strong}&>((uint64_t)a1, a4, a5, (uint64_t)&v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, v10);
    return v10;
  }
  return result;
}

id std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::__construct_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>&,EMTAlternativeDescription * {__strong}&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  id result;

  v7 = a1 + 8;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  v9 = a2[1];
  v8[4] = *a2;
  v8[5] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  result = *a3;
  v8[6] = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::__map_value_compare<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>,std::less<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,true>,std::allocator<std::__value_type<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,EMTAlternativeDescription * {__strong}>>>::destroy(a1, a2[1]);

    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void VarNgram::VarNgram(VarNgram *this, Vocab *a2, int a3, double a4)
{
  uint64_t v5;

  Ngram::Ngram(this, a2, a3);
  *(_QWORD *)v5 = &unk_1E5D17C30;
  *(double *)(v5 + 192) = a4;
}

void VarNgram::~VarNgram(VarNgram *this)
{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::CEAcousticEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v11;
  BOOL v13;
  uint64_t v14;
  BOOL v16;
  BOOL v18;
  BOOL v20;
  BOOL v26;
  uint64_t v27;
  void **v28;
  BOOL v29;
  BOOL v31;
  BOOL v35;
  BOOL v37;
  BOOL v41;
  void *v42;
  void *v43;
  int v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  _BOOL4 v52;
  uint64_t v53;
  int v54;
  int v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  void *__p;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  char v65;
  void *v66[3];
  _BYTE v67[15];
  char v68[9];

  v68[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v67, a3, v68);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)&__p);
  v7 = __p;
  __p = 0;
  v8 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  while ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    memset(v66, 0, sizeof(v66));
    kaldi::ReadToken(v6, v68[0], (uint64_t)v66);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v66[2]))
      {
        case 0xA:
          goto LABEL_143;
        case 0xC:
          if (v66[0] != (void *)0x65467475706E493CLL || LODWORD(v66[1]) != 1047753825)
            goto LABEL_159;
          goto LABEL_86;
        case 0xD:
LABEL_125:
          if (v66[0] == (void *)0x74537475706E493CLL && *(void **)((char *)v66 + 5) == (void *)0x3E73657461745374)
            goto LABEL_130;
          goto LABEL_142;
        case 0xE:
LABEL_132:
          if (v66[0] == (void *)0x5374757074754F3CLL && *(void **)((char *)v66 + 6) == (void *)0x3E73657461745374)
            goto LABEL_137;
          goto LABEL_142;
        case 0xF:
LABEL_138:
          if (v66[0] == (void *)0x6C616974696E493CLL && *(void **)((char *)v66 + 7) == (void *)0x3E7365746174536CLL)
            goto LABEL_149;
          goto LABEL_142;
        case 0x10:
          v29 = v66[0] == (void *)0x456873696E69463CLL && v66[1] == (void *)0x3E676E69646F636ELL;
          v14 = a1 + 24;
          if (!v29)
          {
            switch(HIBYTE(v66[2]))
            {
              case 0xA:
                goto LABEL_143;
              case 0xD:
                goto LABEL_125;
              case 0xE:
                goto LABEL_132;
              case 0xF:
                goto LABEL_138;
              default:
                goto LABEL_159;
            }
          }
          goto LABEL_131;
        case 0x11:
LABEL_117:
          v37 = v66[0] == (void *)0x4574757074754F3CLL && v66[1] == (void *)0x737469676F4C534FLL && LOBYTE(v66[2]) == 62;
          v14 = a1 + 96;
          if (!v37)
          {
            v28 = v66;
            switch(HIBYTE(v66[2]))
            {
              case 0xA:
                goto LABEL_143;
              case 0xD:
                goto LABEL_125;
              case 0xE:
                goto LABEL_132;
              case 0xF:
                goto LABEL_138;
              case 0x11:
                goto LABEL_152;
              default:
                goto LABEL_159;
            }
          }
          goto LABEL_131;
        case 0x12:
          v31 = v66[0] == (void *)0x4574757074754F3CLL
             && v66[1] == (void *)0x676E69646465626DLL
             && LOWORD(v66[2]) == 15987;
          v14 = a1 + 48;
          if (!v31)
          {
            switch(HIBYTE(v66[2]))
            {
              case 0xA:
                goto LABEL_143;
              case 0xD:
                goto LABEL_125;
              case 0xE:
                goto LABEL_132;
              case 0xF:
                goto LABEL_138;
              case 0x11:
                goto LABEL_117;
              default:
                goto LABEL_159;
            }
          }
          goto LABEL_131;
        case 0x13:
          v35 = v66[0] == (void *)0x5074757074754F3CLL
             && v66[1] == (void *)0x69676F4C656E6F68
             && *(void **)((char *)&v66[1] + 3) == (void *)0x3E737469676F4C65;
          v14 = a1 + 72;
          if (!v35)
          {
            switch(HIBYTE(v66[2]))
            {
              case 0xA:
                goto LABEL_143;
              case 0xD:
                goto LABEL_125;
              case 0xE:
                goto LABEL_132;
              case 0xF:
                goto LABEL_138;
              case 0x11:
                goto LABEL_117;
              default:
                goto LABEL_159;
            }
          }
          goto LABEL_131;
        case 0x14:
          if (v66[0] == (void *)0x68537475706E493CLL
            && v66[1] == (void *)0x6C706D6554657061
            && LODWORD(v66[2]) == 1046836321)
          {
            goto LABEL_166;
          }
          if (HIBYTE(v66[2]) == 17)
          {
            v28 = v66;
            goto LABEL_152;
          }
LABEL_142:
          if (HIBYTE(v66[2]) != 10)
            goto LABEL_159;
LABEL_143:
          v41 = v66[0] == (void *)0x69447475706E493CLL && LOWORD(v66[1]) == 15981;
          v27 = a1 + 204;
          if (!v41)
            goto LABEL_159;
          goto LABEL_165;
        default:
          goto LABEL_159;
      }
    }
    v11 = v66[1];
    if (v66[1] == (void *)12 && *(_QWORD *)v66[0] == 0x65467475706E493CLL && *((_DWORD *)v66[0] + 2) == 1047753825)
    {
LABEL_86:
      kaldi::ReadToken(v6, v68[0], a1);
      goto LABEL_169;
    }
    if (v66[1] == (void *)16)
    {
      v13 = *(_QWORD *)v66[0] == 0x456873696E69463CLL && *((_QWORD *)v66[0] + 1) == 0x3E676E69646F636ELL;
      v14 = a1 + 24;
      if (v13)
      {
LABEL_131:
        kaldi::ReadToken(v6, v68[0], v14);
        goto LABEL_169;
      }
      v11 = v66[1];
    }
    if (v11 == (void *)18)
    {
      v16 = *(_QWORD *)v66[0] == 0x4574757074754F3CLL
         && *((_QWORD *)v66[0] + 1) == 0x676E69646465626DLL
         && *((_WORD *)v66[0] + 8) == 15987;
      v14 = a1 + 48;
      if (v16)
        goto LABEL_131;
      v11 = v66[1];
    }
    if (v11 == (void *)19)
    {
      v18 = *(_QWORD *)v66[0] == 0x5074757074754F3CLL
         && *((_QWORD *)v66[0] + 1) == 0x69676F4C656E6F68
         && *(_QWORD *)((char *)v66[0] + 11) == 0x3E737469676F4C65;
      v14 = a1 + 72;
      if (v18)
        goto LABEL_131;
      v11 = v66[1];
    }
    if (v11 == (void *)17)
    {
      v20 = *(_QWORD *)v66[0] == 0x4574757074754F3CLL
         && *((_QWORD *)v66[0] + 1) == 0x737469676F4C534FLL
         && *((_BYTE *)v66[0] + 16) == 62;
      v14 = a1 + 96;
      if (v20)
        goto LABEL_131;
      v11 = v66[1];
    }
    if (v11 == (void *)13)
    {
      if (*(_QWORD *)v66[0] == 0x74537475706E493CLL && *(_QWORD *)((char *)v66[0] + 5) == 0x3E73657461745374)
      {
LABEL_130:
        __p = 0;
        v61 = 0;
        v62 = 0;
        kaldi::ReadToken(v6, v68[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v63, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v63, (uint64_t *)(a1 + 120));
        goto LABEL_150;
      }
      v11 = v66[1];
    }
    if (v11 == (void *)14)
    {
      if (*(_QWORD *)v66[0] == 0x5374757074754F3CLL && *(_QWORD *)((char *)v66[0] + 6) == 0x3E73657461745374)
      {
LABEL_137:
        __p = 0;
        v61 = 0;
        v62 = 0;
        kaldi::ReadToken(v6, v68[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v63, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v63, (uint64_t *)(a1 + 144));
        goto LABEL_150;
      }
      v11 = v66[1];
    }
    if (v11 != (void *)15)
      goto LABEL_69;
    if (*(_QWORD *)v66[0] != 0x6C616974696E493CLL || *(_QWORD *)((char *)v66[0] + 7) != 0x3E7365746174536CLL)
    {
      v11 = v66[1];
LABEL_69:
      if (v11 != (void *)20)
        goto LABEL_78;
      if (*(_QWORD *)v66[0] != 0x68537475706E493CLL
        || *((_QWORD *)v66[0] + 1) != 0x6C706D6554657061
        || *((_DWORD *)v66[0] + 4) != 1046836321)
      {
        v11 = v66[1];
LABEL_78:
        if (v11 == (void *)10)
        {
          v26 = *(_QWORD *)v66[0] == 0x69447475706E493CLL && *((_WORD *)v66[0] + 4) == 15981;
          v27 = a1 + 204;
          if (!v26)
          {
            v11 = v66[1];
            goto LABEL_84;
          }
        }
        else
        {
LABEL_84:
          if (v11 != (void *)17)
            goto LABEL_159;
          v28 = (void **)v66[0];
LABEL_152:
          v42 = *v28;
          v43 = v28[1];
          v44 = *((unsigned __int8 *)v28 + 16);
          v45 = v42 == (void *)0x72467475706E493CLL && v43 == (void *)0x746E756F43656D61;
          v46 = v45 && v44 == 62;
          v27 = a1 + 232;
          if (!v46)
          {
LABEL_159:
            v47 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<OutputDim>");
            v27 = a1 + 208;
            if (!v47)
            {
              v48 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<OutputPhoneDim>");
              v27 = a1 + 212;
              if (!v48)
              {
                v49 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<SilPhoneIndex>");
                v27 = a1 + 216;
                if (!v49)
                {
                  v50 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<FrameOverlap>");
                  v27 = a1 + 220;
                  if (!v50)
                  {
                    v51 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<FrameSubsamplingFactor>");
                    v27 = a1 + 224;
                    if (!v51)
                    {
                      v52 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<NumSpeculativeOutputs>");
                      v27 = a1 + 228;
                      if (!v52)
                      {
                        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, "<Engine>"))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                          if (SHIBYTE(v66[2]) >= 0)
                            v57 = v66;
                          else
                            v57 = (void **)v66[0];
                          if (SHIBYTE(v66[2]) >= 0)
                            v58 = HIBYTE(v66[2]);
                          else
                            v58 = (uint64_t)v66[1];
                          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config file?", 24);
                          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
                        }
                        v53 = *(_QWORD *)(a1 + 240);
                        v54 = v68[0];
                        std::string::basic_string[abi:ne180100]<0>(&__p, "</Engine>");
                        (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v53 + 16))(v53, v6, v54 != 0, &__p);
                        if ((SHIBYTE(v62) & 0x80000000) == 0)
                          goto LABEL_169;
LABEL_168:
                        operator delete(__p);
                        goto LABEL_169;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_165:
        kaldi::ReadBasicType<int>(v6, v68[0], v27);
        goto LABEL_169;
      }
LABEL_166:
      __p = 0;
      v61 = 0;
      v62 = 0;
      kaldi::ReadToken(v6, v68[0], (uint64_t)&__p);
      kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v63, &__p);
      *(_QWORD *)(a1 + 192) = v63;
      *(_DWORD *)(a1 + 200) = v64;
      goto LABEL_167;
    }
LABEL_149:
    __p = 0;
    v61 = 0;
    v62 = 0;
    kaldi::ReadToken(v6, v68[0], (uint64_t)&__p);
    std::string::basic_string[abi:ne180100]<0>(&v63, ",");
    kaldi::SplitStringOnString((uint64_t)&__p, (char *)&v63, (uint64_t *)(a1 + 168));
LABEL_150:
    if (v65 < 0)
      operator delete(v63);
LABEL_167:
    if (SHIBYTE(v62) < 0)
      goto LABEL_168;
LABEL_169:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
    if (SHIBYTE(v66[2]) < 0)
      operator delete(v66[0]);
  }
  v55 = *(_DWORD *)(a1 + 232);
  if (v55 >= 1 && (v55 - *(_DWORD *)(a1 + 220)) % *(_DWORD *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"(InputFrameCount - FrameOverlap) must be a multiple of FrameSubsamplingFactor", 77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::Input::~Input((kaldi::Input *)v67);
}

void sub_1ADE52610()
{
  uint64_t v0;

  if (*(char *)(v0 - 129) < 0)
    operator delete(*(void **)(v0 - 152));
  JUMPOUT(0x1ADE52648);
}

void sub_1ADE52644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 105) < 0)
    operator delete(*(void **)(v27 - 128));
  kaldi::Input::~Input((kaldi::Input *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_1ADE52660()
{
  JUMPOUT(0x1ADE5267CLL);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::CEAcousticEncoderNet(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;

  *((_QWORD *)kaldi::quasar::CEAcousticEncoderNetConfig::CEAcousticEncoderNetConfig((kaldi::quasar::CEAcousticEncoderNetConfig *)a1)
  + 31) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v12 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEAcousticEncoderNetConfig::Read(a1, a2, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 240) + 24))(__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1ADE527AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::quasar::CEAcousticEncoderNetConfig *v14;
  uint64_t v16;

  v16 = *((_QWORD *)v14 + 31);
  *((_QWORD *)v14 + 31) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::CEAcousticEncoderNetConfig::~CEAcousticEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAcousticEncoderNet::~CEAcousticEncoderNet(kaldi::quasar::CEAcousticEncoderNet *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  kaldi::quasar::CEAcousticEncoderNetConfig::~CEAcousticEncoderNetConfig(this);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  std::string *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t p_size;
  __int128 *v32;
  _OWORD *size;
  __int128 v34;
  std::string *v35;
  __int128 *v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void **v57[3];
  __int128 v58;
  uint64_t v59;
  std::string v60;
  uint64_t v61;
  std::string::value_type *v62;
  unint64_t v63;
  void ***v64;

  v8 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v8 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_88;
  }
  if (v8 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_88;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 152))(*a3) != *(_DWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_88;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 196)) != *(_DWORD *)(a1 + 204))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v61, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_88:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v61);
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v16 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v16)
  {
    v25 = *a3;
LABEL_19:
    v27 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v61, (__int128 *)a1, v25);
    goto LABEL_22;
  }
  v55 = a7;
  v17 = a5;
  v18 = a6;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = v16 + v19;
    v23 = *(_QWORD *)(*a2 + 8 * v21);
    if ((unint64_t)v20 >= v63)
    {
      v20 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v61, (__int128 *)v22, *(_QWORD *)(*a2 + 8 * v21));
    }
    else
    {
      if (*(char *)(v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(v16 + v19), *(_QWORD *)(v16 + v19 + 8));
      }
      else
      {
        v24 = *(_OWORD *)v22;
        v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v24;
      }
      v20[1].__r_.__value_.__r.__words[0] = v23;
      v20 = (std::string *)((char *)v20 + 32);
    }
    v62 = (std::string::value_type *)v20;
    ++v21;
    v16 = *(_QWORD *)(a1 + 120);
    v19 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v16) >> 3) > v21);
  v25 = *a3;
  if ((unint64_t)v20 >= v63)
  {
    a6 = v18;
    a5 = v17;
    a7 = v55;
    goto LABEL_19;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v26 = *(_OWORD *)a1;
    v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v26;
  }
  v20[1].__r_.__value_.__r.__words[0] = v25;
  v27 = (std::string *)((char *)v20 + 32);
  v62 = &v20[1].__r_.__value_.__s.__data_[8];
  a6 = v18;
  a5 = v17;
  a7 = v55;
LABEL_22:
  v62 = (std::string::value_type *)v27;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(a1 + 47))
  {
    goto LABEL_33;
  }
  v28 = (__int128 *)(a1 + 24);
  v29 = *a4;
  if ((unint64_t)v27 >= v63)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v61, v28, *a4);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v30 = *v28;
      v27->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    v27[1].__r_.__value_.__r.__words[0] = v29;
    p_size = (uint64_t)&v27[1].__r_.__value_.__l.__size_;
    v62 = &v27[1].__r_.__value_.__s.__data_[8];
  }
  v62 = (std::string::value_type *)p_size;
LABEL_33:
  memset(&v60, 0, sizeof(v60));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, *(__int128 **)(a1 + 144), *(__int128 **)(a1 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3));
  v32 = (__int128 *)(a1 + 48);
  size = (_OWORD *)v60.__r_.__value_.__l.__size_;
  if (v60.__r_.__value_.__l.__size_ >= v60.__r_.__value_.__r.__words[2])
  {
    v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, v32);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v60.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v34 = *v32;
      *(_QWORD *)(v60.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a1 + 64);
      *size = v34;
    }
    v35 = (std::string *)((char *)size + 24);
  }
  v60.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_50;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    goto LABEL_50;
  }
  v36 = (__int128 *)(a1 + 72);
  if ((unint64_t)v35 >= v60.__r_.__value_.__r.__words[2])
  {
    v35 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, v36);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 95) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v37 = *v36;
      v35->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
    }
    ++v35;
  }
  v60.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
LABEL_50:
  if (*(char *)(a1 + 119) < 0)
  {
    if (!*(_QWORD *)(a1 + 104))
      goto LABEL_61;
  }
  else if (!*(_BYTE *)(a1 + 119))
  {
    goto LABEL_61;
  }
  v38 = (__int128 *)(a1 + 96);
  if ((unint64_t)v35 >= v60.__r_.__value_.__r.__words[2])
  {
    v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, v38);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 119) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
    }
    else
    {
      v39 = *v38;
      v35->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v39;
    }
    v40 = (std::string::size_type)&v35[1];
  }
  v60.__r_.__value_.__l.__size_ = v40;
LABEL_61:
  v58 = 0uLL;
  v59 = 0;
  v41 = *(_QWORD *)(a1 + 248);
  memset(v57, 0, sizeof(v57));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, __int128 *))(*(_QWORD *)v41 + 128))(v41, &v61, &v60, v57, &v58);
  v64 = v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (*(char *)(a1 + 119) < 0)
  {
    if (!*(_QWORD *)(a1 + 104))
      goto LABEL_70;
  }
  else if (!*(_BYTE *)(a1 + 119))
  {
    goto LABEL_70;
  }
  v42 = *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8) = 0;
  v43 = *a8;
  *a8 = v42;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v45 = *((_QWORD *)&v58 + 1) - 8;
  v44 = *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  *((_QWORD *)&v58 + 1) = v45;
LABEL_70:
  if (*(char *)(a1 + 95) < 0)
    v46 = *(_QWORD *)(a1 + 80);
  else
    v46 = *(unsigned __int8 *)(a1 + 95);
  v47 = *((_QWORD *)&v58 + 1);
  if (v46)
  {
    v48 = *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8);
    *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8) = 0;
    v49 = *a7;
    *a7 = v48;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v47 = *((_QWORD *)&v58 + 1) - 8;
    v50 = *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8);
    *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8) = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    *((_QWORD *)&v58 + 1) = v47;
  }
  v51 = *(_QWORD *)(v47 - 8);
  *(_QWORD *)(v47 - 8) = 0;
  v52 = *a6;
  *a6 = v51;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v54 = *((_QWORD *)&v58 + 1) - 8;
  v53 = *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v58 + 1) - 8) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  *((_QWORD *)&v58 + 1) = v54;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(a5);
  *(_OWORD *)a5 = v58;
  a5[2] = v59;
  v59 = 0;
  v58 = 0uLL;
  v57[0] = (void **)&v58;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v57);
  *(_QWORD *)&v58 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
}

void sub_1ADE52EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t *a8)
{
  kaldi::quasar::ComputeEngineBufferItf *v16;
  uint64_t v17;
  uint64_t v18;
  kaldi::quasar::ComputeEngineBufferItf *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  kaldi::quasar::ComputeEngineBufferItf *v24;
  kaldi::quasar::ComputeEngineBufferItf *v25;
  void *v26[3];

  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 192), *(int *)(a3 + 20), *(int *)(a3 + 16), v26);
  v24 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 248), a3, (uint64_t)v26, &v24, &v25);
  v16 = v24;
  v24 = 0;
  if (v16)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 248);
  __p = 0;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v17 + 48))(&v23, v17, &__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v23 + 96))(v23, a4, 0);
  kaldi::quasar::CEAcousticEncoderNet::Encode(a1, a2, (uint64_t *)&v25, &v23, a5, a6, a7, a8);
  v18 = v23;
  v23 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v25;
  v25 = 0;
  if (v19)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v19 + 8))(v19);
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
}

void sub_1ADE53010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  unint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  std::string *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t p_size;
  __int128 *v27;
  _OWORD *size;
  __int128 v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36[3];
  __int128 v37;
  uint64_t v38;
  std::string v39;
  uint64_t v40;
  std::string::value_type *v41;
  unint64_t v42;
  void ***v43;

  v6 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_47;
  }
  if (v6 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_47;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 152))(*a3) != *(_DWORD *)(a1 + 200))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_47;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 196)) != *(_DWORD *)(a1 + 204))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_47:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v40);
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v13 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) == v13)
  {
    v20 = *a3;
LABEL_18:
    v22 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v40, (__int128 *)a1, v20);
    goto LABEL_21;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = v13 + v14;
    v18 = *(_QWORD *)(*a2 + 8 * v16);
    if ((unint64_t)v15 >= v42)
    {
      v15 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v40, (__int128 *)v17, *(_QWORD *)(*a2 + 8 * v16));
    }
    else
    {
      if (*(char *)(v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v13 + v14), *(_QWORD *)(v13 + v14 + 8));
      }
      else
      {
        v19 = *(_OWORD *)v17;
        v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v19;
      }
      v15[1].__r_.__value_.__r.__words[0] = v18;
      v15 = (std::string *)((char *)v15 + 32);
    }
    v41 = (std::string::value_type *)v15;
    ++v16;
    v13 = *(_QWORD *)(a1 + 120);
    v14 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v13) >> 3) > v16);
  v20 = *a3;
  if ((unint64_t)v15 >= v42)
    goto LABEL_18;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v21 = *(_OWORD *)a1;
    v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v21;
  }
  v15[1].__r_.__value_.__r.__words[0] = v20;
  v22 = (std::string *)((char *)v15 + 32);
  v41 = &v15[1].__r_.__value_.__s.__data_[8];
LABEL_21:
  v41 = (std::string::value_type *)v22;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_32;
  }
  else if (!*(_BYTE *)(a1 + 47))
  {
    goto LABEL_32;
  }
  v23 = (__int128 *)(a1 + 24);
  v24 = *a4;
  if ((unint64_t)v22 >= v42)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v40, v23, v24);
  }
  else
  {
    if ((*(_BYTE *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v25 = *v23;
      v22->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v25;
    }
    v22[1].__r_.__value_.__r.__words[0] = v24;
    p_size = (uint64_t)&v22[1].__r_.__value_.__l.__size_;
    v41 = &v22[1].__r_.__value_.__s.__data_[8];
  }
  v41 = (std::string::value_type *)p_size;
LABEL_32:
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, *(__int128 **)(a1 + 144), *(__int128 **)(a1 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3));
  v27 = (__int128 *)(a1 + 48);
  size = (_OWORD *)v39.__r_.__value_.__l.__size_;
  if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
  {
    v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v39, v27);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v39.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v29 = *v27;
      *(_QWORD *)(v39.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a1 + 64);
      *size = v29;
    }
    v30 = (std::string::size_type)size + 24;
  }
  v39.__r_.__value_.__l.__size_ = v30;
  v37 = 0uLL;
  v38 = 0;
  v31 = *(_QWORD *)(a1 + 248);
  memset(v36, 0, sizeof(v36));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, __int128 *))(*(_QWORD *)v31 + 128))(v31, &v40, &v39, v36, &v37);
  v43 = v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v32 = *(_QWORD *)(*((_QWORD *)&v37 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v37 + 1) - 8) = 0;
  v33 = *a6;
  *a6 = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v35 = *((_QWORD *)&v37 + 1) - 8;
  v34 = *(_QWORD *)(*((_QWORD *)&v37 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v37 + 1) - 8) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  *((_QWORD *)&v37 + 1) = v35;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(a5);
  *(_OWORD *)a5 = v37;
  a5[2] = v38;
  v38 = 0;
  v37 = 0uLL;
  v36[0] = (void **)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v36);
  *(_QWORD *)&v37 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_1ADE53548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  kaldi::quasar::ComputeEngineBufferItf *v12;
  uint64_t v13;
  uint64_t v14;
  kaldi::quasar::ComputeEngineBufferItf *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  kaldi::quasar::ComputeEngineBufferItf *v20;
  kaldi::quasar::ComputeEngineBufferItf *v21;
  void *v22[3];

  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 192), *(int *)(a3 + 20), *(int *)(a3 + 16), v22);
  v20 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 248), a3, (uint64_t)v22, &v20, &v21);
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 248);
  __p = 0;
  v17 = 0;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v13 + 48))(&v19, v13, &__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 96))(v19, a4, 0);
  kaldi::quasar::CEAcousticEncoderNet::Encode(a1, a2, (uint64_t *)&v21, &v19, a5, a6);
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v15 + 8))(v15);
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_1ADE536A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEAcousticEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, int32x2_t *a6)
{
  kaldi::quasar::ComputeEngineBufferItf *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  kaldi::quasar::ComputeEngineBufferItf *v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  kaldi::quasar::ComputeEngineBufferItf *v21;
  kaldi::quasar::ComputeEngineBufferItf *v22;
  void *v23[3];

  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 192), *(int *)(a3 + 20), *(int *)(a3 + 16), v23);
  v21 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 248), a3, (uint64_t)v23, &v21, &v22);
  v12 = v21;
  v21 = 0;
  if (v12)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 248);
  __p = 0;
  v18 = 0;
  v19 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v13 + 48))(&v20, v13, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 96))(v20, a4, 0);
  __p = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode(a1, a2, (uint64_t *)&v22, &v20, a5, (uint64_t *)&__p);
  v14 = __p;
  kaldi::quasar::CopyBufferToMatrix((uint64_t)__p, 0xFFFFFFFFLL, *(unsigned int *)(a1 + 208), a6);
  (*(void (**)(void *))(*(_QWORD *)v14 + 8))(v14);
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v16 + 8))(v16);
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
}

void sub_1ADE53880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::OutputDim(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 52);
}

void kaldi::quasar::CEAcousticEncoderNet::InitialStates(kaldi::quasar::CEAcousticEncoderNet *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  int v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  void *__p[3];
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  void **v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (char *)this + 168;
  if (*((_QWORD *)this + 22) != *((_QWORD *)this + 21))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v5 = *((_DWORD *)this + 58);
    if (v5 <= 0)
      v5 = *((_DWORD *)this + 55) + *((_DWORD *)this + 56);
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEAcousticEncoderNet *)((char *)this + 192), v5, *((int *)this + 51), __p);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**((_QWORD **)this + 31) + 56))(v11, *((_QWORD *)this + 31), __p);
    v6 = v14;
    if ((unint64_t)v14 >= v15)
    {
      v8 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v13, (__int128 *)this, v11);
      v9 = v11[0];
      v14 = v8;
      v11[0] = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
      }
      else
      {
        v7 = *(_OWORD *)this;
        v14->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      v6[1].__r_.__value_.__r.__words[0] = v11[0];
      v14 = (std::string *)((char *)v6 + 32);
    }
    v10 = *((_QWORD *)this + 31);
    memset(v11, 0, sizeof(v11));
    (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, _QWORD *))(*(_QWORD *)v10 + 120))(v10, &v13, v3, v11, a2);
    v16 = (void **)v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v13;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1ADE53A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::FrameSubsamplingFactor(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::FrameOverlap(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 55);
}

void kaldi::quasar::CEAcousticEncoderNet::WarmUp(kaldi::quasar::CEAcousticEncoderNet *this)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];
  _QWORD v5[3];

  kaldi::quasar::CEAcousticEncoderNet::InitialStates(this, v5);
  v2 = *((unsigned int *)this + 58);
  if ((int)v2 <= 0)
    v2 = (*((_DWORD *)this + 55) + *((_DWORD *)this + 56));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, *((unsigned int *)this + 51), 0, 0, 0);
  v3 = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode((uint64_t)this, v5, (uint64_t)v4, 1, v5, &v3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v4);
  v4[0] = (int32x2_t)v5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
}

void sub_1ADE53BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a10);
  a10 = (void **)(v10 - 40);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::CEAcousticEncoderNet::IsInputSizeFixed(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((_DWORD *)this + 58) > 0;
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::InputFrameCount(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 58);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::OutputPhoneDim(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 53);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::SilPhoneIndex(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::NumSpeculativeOutputs(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return *((unsigned int *)this + 57);
}

uint64_t kaldi::quasar::CEAcousticEncoderNet::Engine(kaldi::quasar::CEAcousticEncoderNet *this)
{
  return (uint64_t)this + 248;
}

void kaldi::quasar::CELabelEncoderNetConfig::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  __int128 *v27;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  __int128 *v39;
  uint64_t v40;
  _QWORD *v41;
  void *__p;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[15];
  char v50[9];

  v50[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v49, a3, v50);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)&__p);
  v7 = __p;
  __p = 0;
  v8 = a1[18];
  a1[18] = (uint64_t)v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p;
    __p = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    while (1)
    {
      v47 = 0uLL;
      v48 = 0;
      kaldi::ReadToken(v6, v50[0], (uint64_t)&v47);
      if ((SHIBYTE(v48) & 0x80000000) == 0)
      {
        switch(HIBYTE(v48))
        {
          case 0xA:
            goto LABEL_103;
          case 0xB:
LABEL_7:
            v10 = (_QWORD)v47 == 0x4474757074754F3CLL && *(_QWORD *)((char *)&v47 + 3) == 0x3E6D694474757074;
            v11 = (uint64_t)(a1 + 15);
            if (v10)
              goto LABEL_132;
            if (HIBYTE(v48) != 10)
              goto LABEL_130;
LABEL_103:
            v31 = (_QWORD)v47 == 0x65646E49534F423CLL && WORD4(v47) == 15992;
            v11 = (uint64_t)a1 + 124;
            if (v31)
              goto LABEL_132;
            if (HIBYTE(v48) != 10)
              goto LABEL_130;
            v32 = (_QWORD)v47 == 0x65646E49534F453CLL && WORD4(v47) == 15992;
            v11 = (uint64_t)(a1 + 16);
            if (!v32)
              goto LABEL_119;
            goto LABEL_132;
          case 0xC:
LABEL_114:
            v33 = (_QWORD)v47 == 0x6E496B6E616C423CLL && DWORD2(v47) == 1048077668;
            v11 = (uint64_t)a1 + 132;
            if (!v33)
              goto LABEL_118;
            goto LABEL_132;
          case 0xD:
            if ((_QWORD)v47 == 0x614C7475706E493CLL && *(_QWORD *)((char *)&v47 + 5) == 0x3E736C6562614C74)
              goto LABEL_133;
LABEL_98:
            if ((_QWORD)v47 != 0x74537475706E493CLL || *(_QWORD *)((char *)&v47 + 5) != 0x3E73657461745374)
            {
              v27 = &v47;
              switch(HIBYTE(v48))
              {
                case 0xA:
                  goto LABEL_103;
                case 0xB:
                  goto LABEL_7;
                case 0xC:
                  goto LABEL_114;
                case 0xD:
                  goto LABEL_126;
                default:
                  goto LABEL_130;
              }
            }
            goto LABEL_135;
          case 0xE:
LABEL_83:
            if ((_QWORD)v47 != 0x5374757074754F3CLL || *(_QWORD *)((char *)&v47 + 6) != 0x3E73657461745374)
            {
              v27 = &v47;
              switch(HIBYTE(v48))
              {
                case 0xA:
                  goto LABEL_103;
                case 0xB:
                  goto LABEL_7;
                case 0xC:
                  goto LABEL_114;
                case 0xD:
                  goto LABEL_126;
                default:
                  goto LABEL_130;
              }
            }
            goto LABEL_134;
          case 0xF:
LABEL_89:
            if ((_QWORD)v47 != 0x6C616974696E493CLL || *(_QWORD *)((char *)&v47 + 7) != 0x3E7365746174536CLL)
            {
              v27 = &v47;
              switch(HIBYTE(v48))
              {
                case 0xA:
                  goto LABEL_103;
                case 0xB:
                  goto LABEL_7;
                case 0xC:
                  goto LABEL_114;
                case 0xD:
                  goto LABEL_126;
                default:
                  goto LABEL_130;
              }
            }
            goto LABEL_136;
          case 0x12:
            if ((_QWORD)v47 != 0x4574757074754F3CLL
              || *((_QWORD *)&v47 + 1) != 0x676E69646465626DLL
              || (unsigned __int16)v48 != 15987)
            {
              switch(HIBYTE(v48))
              {
                case 0xA:
                  goto LABEL_103;
                case 0xB:
                  goto LABEL_7;
                case 0xC:
                  goto LABEL_114;
                case 0xD:
                  goto LABEL_98;
                case 0xE:
                  goto LABEL_83;
                case 0xF:
                  goto LABEL_89;
                default:
                  goto LABEL_130;
              }
            }
            goto LABEL_88;
          default:
            goto LABEL_130;
        }
      }
      v12 = *((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1) == 13
        && *(_QWORD *)v47 == 0x614C7475706E493CLL
        && *(_QWORD *)(v47 + 5) == 0x3E736C6562614C74)
      {
LABEL_133:
        kaldi::ReadToken(v6, v50[0], (uint64_t)a1);
        goto LABEL_141;
      }
      if (*((_QWORD *)&v47 + 1) != 18)
        goto LABEL_27;
      v14 = *(_QWORD *)v47 == 0x4574757074754F3CLL && *(_QWORD *)(v47 + 8) == 0x676E69646465626DLL;
      if (!v14 || *(_WORD *)(v47 + 16) != 15987)
        break;
LABEL_88:
      kaldi::ReadToken(v6, v50[0], (uint64_t)(a1 + 3));
LABEL_141:
      std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
      if (SHIBYTE(v48) < 0)
        operator delete((void *)v47);
      if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) != 0)
        goto LABEL_144;
    }
    v12 = *((_QWORD *)&v47 + 1);
LABEL_27:
    if (v12 == 13)
    {
      if (*(_QWORD *)v47 == 0x74537475706E493CLL && *(_QWORD *)(v47 + 5) == 0x3E73657461745374)
      {
LABEL_135:
        __p = 0;
        v43 = 0;
        v44 = 0;
        kaldi::ReadToken(v6, v50[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(v45, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)v45, a1 + 6);
        goto LABEL_137;
      }
      v12 = *((_QWORD *)&v47 + 1);
    }
    if (v12 == 14)
    {
      if (*(_QWORD *)v47 == 0x5374757074754F3CLL && *(_QWORD *)(v47 + 6) == 0x3E73657461745374)
      {
LABEL_134:
        __p = 0;
        v43 = 0;
        v44 = 0;
        kaldi::ReadToken(v6, v50[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(v45, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)v45, a1 + 9);
        goto LABEL_137;
      }
      v12 = *((_QWORD *)&v47 + 1);
    }
    if (v12 == 15)
    {
      if (*(_QWORD *)v47 == 0x6C616974696E493CLL && *(_QWORD *)(v47 + 7) == 0x3E7365746174536CLL)
      {
LABEL_136:
        __p = 0;
        v43 = 0;
        v44 = 0;
        kaldi::ReadToken(v6, v50[0], (uint64_t)&__p);
        std::string::basic_string[abi:ne180100]<0>(v45, ",");
        kaldi::SplitStringOnString((uint64_t)&__p, (char *)v45, a1 + 12);
LABEL_137:
        if (v46 < 0)
          operator delete(v45[0]);
        goto LABEL_139;
      }
      v12 = *((_QWORD *)&v47 + 1);
    }
    if (v12 == 11)
    {
      v19 = *(_QWORD *)v47 == 0x4474757074754F3CLL && *(_QWORD *)(v47 + 3) == 0x3E6D694474757074;
      v11 = (uint64_t)(a1 + 15);
      if (v19)
        goto LABEL_132;
      v12 = *((_QWORD *)&v47 + 1);
    }
    if (v12 == 10)
    {
      v20 = *(_QWORD *)v47 == 0x65646E49534F423CLL && *(_WORD *)(v47 + 8) == 15992;
      v11 = (uint64_t)a1 + 124;
      if (v20)
        goto LABEL_132;
      v12 = *((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1) == 10)
      {
        v21 = *(_QWORD *)v47 == 0x65646E49534F453CLL && *(_WORD *)(v47 + 8) == 15992;
        v11 = (uint64_t)(a1 + 16);
        if (v21)
          goto LABEL_132;
        if ((v48 & 0x8000000000000000) == 0)
        {
LABEL_118:
          if (HIBYTE(v48) != 10)
            goto LABEL_130;
LABEL_119:
          v34 = (_QWORD)v47 == 0x65646E496C69533CLL && WORD4(v47) == 15992;
          v11 = (uint64_t)(a1 + 17);
          if (!v34)
          {
LABEL_130:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v47, "<Engine>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
              if (v48 >= 0)
                v39 = &v47;
              else
                v39 = (__int128 *)v47;
              if (v48 >= 0)
                v40 = HIBYTE(v48);
              else
                v40 = *((_QWORD *)&v47 + 1);
              v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", a typo in config file?", 24);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
            }
            v36 = a1[18];
            v37 = v50[0];
            std::string::basic_string[abi:ne180100]<0>(&__p, "</Engine>");
            (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v36 + 16))(v36, v6, v37 != 0, &__p);
LABEL_139:
            if (SHIBYTE(v44) < 0)
              operator delete(__p);
            goto LABEL_141;
          }
          goto LABEL_132;
        }
      }
    }
    if (v12 == 12)
    {
      v22 = *(_QWORD *)v47 == 0x6E496B6E616C423CLL && *(_DWORD *)(v47 + 8) == 1048077668;
      v11 = (uint64_t)a1 + 132;
      if (v22)
        goto LABEL_132;
      v12 = *((_QWORD *)&v47 + 1);
    }
    if (v12 != 10)
    {
LABEL_124:
      if (v12 != 13)
        goto LABEL_130;
      v27 = (__int128 *)v47;
LABEL_126:
      v35 = *(_QWORD *)v27 == 0x747865746E6F433CLL && *(_QWORD *)((char *)v27 + 5) == 0x3E657A6953747865;
      v11 = (uint64_t)a1 + 140;
      if (!v35)
        goto LABEL_130;
      goto LABEL_132;
    }
    v23 = *(_QWORD *)v47 == 0x65646E496C69533CLL && *(_WORD *)(v47 + 8) == 15992;
    v11 = (uint64_t)(a1 + 17);
    if (!v23)
    {
      v12 = *((_QWORD *)&v47 + 1);
      goto LABEL_124;
    }
LABEL_132:
    kaldi::ReadBasicType<int>(v6, v50[0], v11);
    goto LABEL_141;
  }
LABEL_144:
  kaldi::Input::~Input((kaldi::Input *)v49);
}

uint64_t kaldi::quasar::CELabelEncoderNet::CELabelEncoderNet(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t v5;
  void **v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v13;

  v4 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "input_labels");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, "output_embeddings");
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 120) = xmmword_1AE185020;
  *(_QWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 7);
  if (v13 < 0)
    v6 = (void **)__p[0];
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const void *)a2;
    else
      v7 = *(const void **)a2;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ".config");
  kaldi::quasar::CELabelEncoderNetConfig::Read((uint64_t *)a1, a2, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 144) + 24))(__p);
  v8 = __p[0];
  __p[0] = 0;
  v9 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = __p[0];
    __p[0] = 0;
    if (v10)
      (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

void sub_1ADE54698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::quasar::CEEncoderNetConfig *v14;
  uint64_t v16;

  v16 = *((_QWORD *)v14 + 19);
  *((_QWORD *)v14 + 19) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::CEEncoderNetConfig::~CEEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void sub_1ADE546E0()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  JUMPOUT(0x1ADE546D8);
}

void kaldi::quasar::CELabelEncoderNet::~CELabelEncoderNet(kaldi::quasar::CELabelEncoderNet *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CELabelEncoderNet::Encode(__int128 *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t p_size;
  __int128 *v21;
  _OWORD *size;
  __int128 v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30[3];
  __int128 v31;
  uint64_t v32;
  std::string v33;
  uint64_t v34;
  std::string::value_type *v35;
  unint64_t v36;
  void ***v37;

  v5 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 7) - *((_QWORD *)a1 + 6)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_34;
  }
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_34;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 152))(*a3) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "input_labels->GetNumDims() == 1");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v34);
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v11 = *((_QWORD *)a1 + 6);
  if (*((_QWORD *)a1 + 7) == v11)
  {
    v18 = *a3;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v11 + v12;
      v16 = *(_QWORD *)(*a2 + 8 * v14);
      if ((unint64_t)v13 >= v36)
      {
        v13 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v34, (__int128 *)v15, *(_QWORD *)(*a2 + 8 * v14));
      }
      else
      {
        if (*(char *)(v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v11 + v12), *(_QWORD *)(v11 + v12 + 8));
        }
        else
        {
          v17 = *(_OWORD *)v15;
          v13->__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v17;
        }
        v13[1].__r_.__value_.__r.__words[0] = v16;
        v13 = (std::string *)((char *)v13 + 32);
      }
      v35 = (std::string::value_type *)v13;
      ++v14;
      v11 = *((_QWORD *)a1 + 6);
      v12 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 7) - v11) >> 3) > v14);
    v18 = *a3;
    if ((unint64_t)v13 < v36)
    {
      if (*((char *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
      }
      else
      {
        v19 = *a1;
        v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v19;
      }
      v13[1].__r_.__value_.__r.__words[0] = v18;
      p_size = (uint64_t)&v13[1].__r_.__value_.__l.__size_;
      v35 = &v13[1].__r_.__value_.__s.__data_[8];
      goto LABEL_20;
    }
  }
  p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v34, a1, v18);
LABEL_20:
  v35 = (std::string::value_type *)p_size;
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v33, *((__int128 **)a1 + 9), *((__int128 **)a1 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3));
  v21 = (__int128 *)((char *)a1 + 24);
  size = (_OWORD *)v33.__r_.__value_.__l.__size_;
  if (v33.__r_.__value_.__l.__size_ >= v33.__r_.__value_.__r.__words[2])
  {
    v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v33, v21);
  }
  else
  {
    if (*((char *)a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v33.__r_.__value_.__l.__size_, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
    }
    else
    {
      v23 = *v21;
      *(_QWORD *)(v33.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)a1 + 5);
      *size = v23;
    }
    v24 = (std::string::size_type)size + 24;
  }
  v33.__r_.__value_.__l.__size_ = v24;
  v31 = 0uLL;
  v32 = 0;
  v25 = *((_QWORD *)a1 + 19);
  memset(v30, 0, sizeof(v30));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, __int128 *))(*(_QWORD *)v25 + 128))(v25, &v34, &v33, v30, &v31);
  v37 = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v26 = *(_QWORD *)(*((_QWORD *)&v31 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v31 + 1) - 8) = 0;
  v27 = *a5;
  *a5 = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v29 = *((_QWORD *)&v31 + 1) - 8;
  v28 = *(_QWORD *)(*((_QWORD *)&v31 + 1) - 8);
  *(_QWORD *)(*((_QWORD *)&v31 + 1) - 8) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  *((_QWORD *)&v31 + 1) = v29;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(a4);
  *(_OWORD *)a4 = v31;
  a4[2] = v32;
  v32 = 0;
  v31 = 0uLL;
  v30[0] = (void **)&v31;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v30);
  *(_QWORD *)&v31 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1ADE54B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::CELabelEncoderNet::Encode(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 152) + 16))(&v10, *(_QWORD *)(a1 + 152), a3, 0);
  kaldi::quasar::CELabelEncoderNet::Encode((__int128 *)a1, a2, &v10, a4, a5);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADE54C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CELabelEncoderNet::EncodeBatch(uint64_t a1, _QWORD *a2, int **a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  std::string *v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  void ***size;
  void **v27;
  _QWORD *v28;
  std::string::pointer data;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  void ***v35;
  char *v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  void **v40;
  std::string::size_type v41;
  char *v42;
  void **v43;
  __int128 *v44;
  _OWORD *v45;
  __int128 v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void *__p;
  void *v60;
  _DWORD *v61;
  uint64_t v62;
  std::string *v63;
  unint64_t v64;
  std::string v65;
  char *v66;
  std::string::size_type *v67;
  void **v68[2];

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v65, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_45;
  }
  if (v5 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v65, "input_states.size() == cfg_.output_states.size()");
LABEL_45:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
  }
  v62 = 0;
  v63 = 0;
  v64 = 0;
  if (v7 == v6)
  {
    memset(&v65, 0, sizeof(v65));
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (_QWORD *)(*a2 + v13);
      if ((uint64_t)(v16[1] - *v16) >> 3 != a3[1] - *a3)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Mismatch at [", 13);
        v51 = (_QWORD *)std::ostream::operator<<();
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"] ", 2);
        v53 = *(_QWORD *)(a1 + 48) + v13;
        v54 = *(char *)(v53 + 23);
        if (v54 >= 0)
          v55 = *(_QWORD *)(a1 + 48) + v13;
        else
          v55 = *(_QWORD *)v53;
        if (v54 >= 0)
          v56 = *(unsigned __int8 *)(v53 + 23);
        else
          v56 = *(_QWORD *)(v53 + 8);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v55, v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" ", 1);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" != ", 4);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v65);
      }
      v17 = (__int128 *)(v6 + v13);
      if ((unint64_t)v14 >= v64)
      {
        v14 = (std::string *)std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_back_slow_path<std::string&,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(&v62, v17, (uint64_t)v16);
      }
      else
      {
        std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(v14, v17, (uint64_t)v16);
        v14 += 2;
      }
      v63 = v14;
      ++v15;
      v6 = *(_QWORD *)(a1 + 48);
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v6) >> 3) > v15);
    memset(&v65, 0, sizeof(v65));
    if ((unint64_t)v14 < v64)
    {
      std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(v14, (__int128 *)a1, (uint64_t)&v65);
      v18 = (uint64_t)&v14[2];
      v63 = v14 + 2;
      goto LABEL_14;
    }
  }
  v18 = std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_back_slow_path<std::string&,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(&v62, (__int128 *)a1, (uint64_t)&v65);
LABEL_14:
  v63 = (std::string *)v18;
  __p = &v65;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v19 = *a3;
  v20 = a3[1];
  if (*a3 != v20)
  {
    do
    {
      v21 = *v19;
      v22 = v63;
      v23 = *(_QWORD *)(a1 + 152);
      v24 = operator new(4uLL);
      __p = v24;
      *v24 = v21;
      v60 = v24 + 1;
      v61 = v24 + 1;
      (*(void (**)(void ***__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v23 + 16))(v68, v23, &__p, 0);
      v25 = v22[-1].__r_.__value_.__r.__words[2];
      size = (void ***)v22[-1].__r_.__value_.__l.__size_;
      if ((unint64_t)size >= v25)
      {
        data = v22[-1].__r_.__value_.__l.__data_;
        v30 = ((char *)size - data) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v31 = v25 - (_QWORD)data;
        v32 = (uint64_t)(v25 - (_QWORD)data) >> 2;
        if (v32 <= v30 + 1)
          v32 = v30 + 1;
        if (v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        v67 = &v22[-1].__r_.__value_.__r.__words[2];
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v22[-1].__r_.__value_.__r.__words[2], v33);
        else
          v34 = 0;
        v35 = (void ***)&v34[8 * v30];
        v36 = &v34[8 * v33];
        v66 = v36;
        v37 = v68[0];
        v68[0] = 0;
        *v35 = v37;
        v28 = v35 + 1;
        v65.__r_.__value_.__r.__words[2] = (std::string::size_type)(v35 + 1);
        v39 = v22[-1].__r_.__value_.__l.__data_;
        v38 = (_QWORD *)v22[-1].__r_.__value_.__l.__size_;
        if (v38 == v39)
        {
          v41 = v22[-1].__r_.__value_.__l.__size_;
        }
        else
        {
          do
          {
            v40 = (void **)*--v38;
            *v38 = 0;
            *--v35 = v40;
          }
          while (v38 != v39);
          v41 = v22[-1].__r_.__value_.__r.__words[0];
          v38 = (_QWORD *)v22[-1].__r_.__value_.__l.__size_;
          v28 = (_QWORD *)v65.__r_.__value_.__r.__words[2];
          v36 = v66;
        }
        v22[-1].__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        v65.__r_.__value_.__l.__size_ = v41;
        v22[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v28;
        v65.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
        v42 = (char *)v22[-1].__r_.__value_.__r.__words[2];
        v22[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)v36;
        v66 = v42;
        v65.__r_.__value_.__r.__words[0] = v41;
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v65);
      }
      else
      {
        v27 = v68[0];
        v68[0] = 0;
        *size = v27;
        v28 = size + 1;
      }
      v22[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      v43 = v68[0];
      v68[0] = 0;
      if (v43)
        (*((void (**)(void **))*v43 + 1))(v43);
      if (__p)
      {
        v60 = __p;
        operator delete(__p);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  memset(&v65, 0, sizeof(v65));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v65, *(__int128 **)(a1 + 72), *(__int128 **)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3));
  v44 = (__int128 *)(a1 + 24);
  v45 = (_OWORD *)v65.__r_.__value_.__l.__size_;
  if (v65.__r_.__value_.__l.__size_ >= v65.__r_.__value_.__r.__words[2])
  {
    v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, v44);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v65.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v46 = *v44;
      *(_QWORD *)(v65.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(a1 + 40);
      *v45 = v46;
    }
    v47 = (std::string::size_type)v45 + 24;
  }
  v65.__r_.__value_.__l.__size_ = v47;
  v48 = *(_QWORD *)(a1 + 152);
  __p = 0;
  v60 = 0;
  v61 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::string *, void **, uint64_t))(*(_QWORD *)v48 + 176))(v48, &v62, &v65, &__p, a4);
  v68[0] = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v68);
  v49 = *(_QWORD *)(a4 + 8);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(a5);
  *(_OWORD *)a5 = *(_OWORD *)(v49 - 24);
  a5[2] = *(_QWORD *)(v49 - 8);
  *(_QWORD *)(v49 - 24) = 0;
  *(_QWORD *)(v49 - 16) = 0;
  *(_QWORD *)(v49 - 8) = 0;
  __p = (void *)(*(_QWORD *)(a4 + 8) - 24);
  v50 = __p;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)(a4 + 8) = v50;
  __p = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
  std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
}

void kaldi::quasar::CELabelEncoderNet::InitialStates(kaldi::quasar::CELabelEncoderNet *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v5;
  _DWORD *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  void **v10;
  uint64_t v11;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;
  std::string *v16;
  unint64_t v17;
  void **p_p;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (char *)this + 96;
  if (*((_QWORD *)this + 13) != *((_QWORD *)this + 12))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v5 = *((_QWORD *)this + 19);
    v6 = operator new(4uLL);
    __p = v6;
    *v6 = 0;
    v13 = v6 + 1;
    v14 = v6 + 1;
    (*(void (**)(void ***__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v5 + 16))(&p_p, v5, &__p, 0);
    v7 = v16;
    if ((unint64_t)v16 >= v17)
    {
      v9 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v15, (__int128 *)this, (uint64_t *)&p_p);
      v10 = p_p;
      v16 = v9;
      p_p = 0;
      if (v10)
        (*((void (**)(void **))*v10 + 1))(v10);
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
      }
      else
      {
        v8 = *(_OWORD *)this;
        v16->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v7[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      v16 = (std::string *)((char *)v7 + 32);
      p_p = 0;
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    v11 = *((_QWORD *)this + 19);
    __p = 0;
    v13 = 0;
    v14 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *, void **, _QWORD *))(*(_QWORD *)v11 + 120))(v11, &v15, v3, &__p, a2);
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    __p = &v15;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_1ADE55374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *__p, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v16;

  v16 = *(_QWORD *)(v14 - 40);
  *(_QWORD *)(v14 - 40) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CELabelEncoderNet::WarmUp(kaldi::quasar::CELabelEncoderNet *this)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  void *__p;
  void *v6;
  _DWORD *v7;
  _QWORD v8[3];

  kaldi::quasar::CELabelEncoderNet::InitialStates(this, v8);
  v2 = *((_DWORD *)this + 31);
  v3 = operator new(4uLL);
  v4 = 0;
  __p = v3;
  *v3 = v2;
  v6 = v3 + 1;
  v7 = v3 + 1;
  kaldi::quasar::CELabelEncoderNet::Encode((uint64_t)this, v8, (uint64_t)&__p, v8, &v4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  __p = v8;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADE55484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a14;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CELabelEncoderNet::EOSIndex(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t kaldi::quasar::CELabelEncoderNet::BlankIndex(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t kaldi::quasar::CELabelEncoderNet::SilIndex(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t kaldi::quasar::CELabelEncoderNet::ContextSize(kaldi::quasar::CELabelEncoderNet *this)
{
  return *((unsigned int *)this + 35);
}

void kaldi::quasar::CEJointPredictorNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::Input *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void **v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  BOOL v15;
  BOOL v18;
  BOOL v20;
  BOOL v21;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  BOOL v31;
  BOOL v33;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  void *__p[2];
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[3];
  _BYTE v49[15];
  char v50[9];

  v50[0] = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v49, a3, v50);
  v6 = (uint64_t *)kaldi::Input::Stream(v5);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) == 0)
  {
    while (1)
    {
      memset(v48, 0, sizeof(v48));
      kaldi::ReadToken(v6, v50[0], (uint64_t)v48);
      if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
      {
        v10 = v48;
        switch(HIBYTE(v48[2]))
        {
          case 8:
            goto LABEL_125;
          case 0xA:
            goto LABEL_113;
          case 0xB:
            goto LABEL_119;
          case 0x10:
LABEL_7:
            v11 = v48[0] == (void *)0x4C74757074754F3CLL && v48[1] == (void *)0x3E73656B696C676FLL;
            v12 = a1 + 72;
            if (v11)
              goto LABEL_102;
            if (HIBYTE(v48[2]) == 8)
              goto LABEL_124;
            if (HIBYTE(v48[2]) == 10)
              goto LABEL_113;
            if (HIBYTE(v48[2]) != 11)
              goto LABEL_151;
LABEL_119:
            v37 = v48[0] == (void *)0x4474757074754F3CLL && *(void **)((char *)v48 + 3) == (void *)0x3E6D694474757074;
            v25 = a1 + 112;
            if (!v37)
              goto LABEL_123;
            goto LABEL_118;
          case 0x12:
LABEL_94:
            v33 = v48[0] == (void *)0x4574757074754F3CLL
               && v48[1] == (void *)0x676E69646465626DLL
               && LOWORD(v48[2]) == 15987;
            v12 = a1 + 48;
            if (!v33)
            {
              v10 = v48;
              switch(HIBYTE(v48[2]))
              {
                case 8:
                  goto LABEL_125;
                case 0xA:
                  goto LABEL_113;
                case 0xB:
                  goto LABEL_119;
                case 0x10:
                  goto LABEL_7;
                default:
                  goto LABEL_151;
              }
            }
            goto LABEL_102;
          case 0x14:
LABEL_103:
            if (v48[0] == (void *)0x68537475706E493CLL
              && v48[1] == (void *)0x6C706D6554657061
              && LODWORD(v48[2]) == 1046836321)
            {
              goto LABEL_133;
            }
            if (HIBYTE(v48[2]) == 8)
              goto LABEL_124;
            if (HIBYTE(v48[2]) == 11)
              goto LABEL_119;
            if (HIBYTE(v48[2]) != 10)
              goto LABEL_151;
LABEL_113:
            v36 = v48[0] == (void *)0x69447475706E493CLL && LOWORD(v48[1]) == 15981;
            v25 = a1 + 108;
            if (v36)
              goto LABEL_118;
LABEL_123:
            if (HIBYTE(v48[2]) != 8)
              goto LABEL_151;
LABEL_124:
            v10 = v48;
            break;
          case 0x16:
            v31 = v48[0] == (void *)0x614C7475706E493CLL
               && v48[1] == (void *)0x6465626D456C6562
               && *(void **)((char *)&v48[1] + 6) == (void *)0x3E73676E69646465;
            v12 = a1 + 24;
            if (!v31)
            {
              v10 = v48;
              switch(HIBYTE(v48[2]))
              {
                case 8:
                  goto LABEL_125;
                case 0xA:
                  goto LABEL_113;
                case 0xB:
                  goto LABEL_119;
                case 0x10:
                  goto LABEL_7;
                case 0x12:
                  goto LABEL_94;
                case 0x14:
                  goto LABEL_103;
                default:
                  goto LABEL_151;
              }
            }
            goto LABEL_102;
          case 0x19:
            if (v48[0] != (void *)0x63417475706E493CLL
              || v48[1] != (void *)0x6D4563697473756FLL
              || v48[2] != (void *)0x73676E6964646562
              || v49[0] != 62)
            {
              goto LABEL_151;
            }
            goto LABEL_85;
          default:
            goto LABEL_151;
        }
        goto LABEL_125;
      }
      v13 = v48[1];
      if (v48[1] == (void *)22)
        break;
      if (v48[1] != (void *)25)
        goto LABEL_36;
      v14 = *(_QWORD *)v48[0] == 0x63417475706E493CLL && *((_QWORD *)v48[0] + 1) == 0x6D4563697473756FLL;
      v15 = v14 && *((_QWORD *)v48[0] + 2) == 0x73676E6964646562;
      if (!v15 || *((_BYTE *)v48[0] + 24) != 62)
        goto LABEL_36;
LABEL_85:
      kaldi::ReadToken(v6, v50[0], a1);
LABEL_129:
      std::ws[abi:ne180100]<char,std::char_traits<char>>(v6);
      if (SHIBYTE(v48[2]) < 0)
        operator delete(v48[0]);
      if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 2) != 0)
        goto LABEL_134;
    }
    v18 = *(_QWORD *)v48[0] == 0x614C7475706E493CLL
       && *((_QWORD *)v48[0] + 1) == 0x6465626D456C6562
       && *(_QWORD *)((char *)v48[0] + 14) == 0x3E73676E69646465;
    v12 = a1 + 24;
    if (!v18)
    {
      v13 = v48[1];
LABEL_36:
      if (v13 != (void *)18)
        goto LABEL_45;
      v20 = *(_QWORD *)v48[0] == 0x4574757074754F3CLL
         && *((_QWORD *)v48[0] + 1) == 0x676E69646465626DLL
         && *((_WORD *)v48[0] + 8) == 15987;
      v12 = a1 + 48;
      if (!v20)
      {
        v13 = v48[1];
LABEL_45:
        if (v13 != (void *)16)
          goto LABEL_51;
        v21 = *(_QWORD *)v48[0] == 0x4C74757074754F3CLL && *((_QWORD *)v48[0] + 1) == 0x3E73656B696C676FLL;
        v12 = a1 + 72;
        if (!v21)
        {
          v13 = v48[1];
LABEL_51:
          if (v13 == (void *)20)
          {
            if (*(_QWORD *)v48[0] == 0x68537475706E493CLL
              && *((_QWORD *)v48[0] + 1) == 0x6C706D6554657061
              && *((_DWORD *)v48[0] + 4) == 1046836321)
            {
LABEL_133:
              __p[0] = 0;
              __p[1] = 0;
              v45 = 0;
              kaldi::ReadToken(v6, v50[0], (uint64_t)__p);
              kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v46, __p);
              *(_QWORD *)(a1 + 96) = v46;
              *(_DWORD *)(a1 + 104) = v47;
              goto LABEL_127;
            }
            v13 = v48[1];
          }
          if (v13 == (void *)10)
          {
            v24 = *(_QWORD *)v48[0] == 0x69447475706E493CLL && *((_WORD *)v48[0] + 4) == 15981;
            v25 = a1 + 108;
            if (!v24)
            {
              v13 = v48[1];
              goto LABEL_66;
            }
          }
          else
          {
LABEL_66:
            if (v13 != (void *)11)
              goto LABEL_72;
            v26 = *(_QWORD *)v48[0] == 0x4474757074754F3CLL && *(_QWORD *)((char *)v48[0] + 3) == 0x3E6D694474757074;
            v25 = a1 + 112;
            if (!v26)
            {
              v13 = v48[1];
LABEL_72:
              if (v13 != (void *)8)
                goto LABEL_151;
              v10 = (void **)v48[0];
LABEL_125:
              if (*v10 != (void *)0x3E656E69676E453CLL)
              {
LABEL_151:
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                if (SHIBYTE(v48[2]) >= 0)
                  v41 = v48;
                else
                  v41 = (void **)v48[0];
                if (SHIBYTE(v48[2]) >= 0)
                  v42 = HIBYTE(v48[2]);
                else
                  v42 = (uint64_t)v48[1];
                v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", a typo in config file?", 24);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              v38 = *(_QWORD *)(a1 + 120);
              v39 = v50[0];
              std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
              (*(void (**)(uint64_t, uint64_t *, BOOL, void **))(*(_QWORD *)v38 + 16))(v38, v6, v39 != 0, __p);
LABEL_127:
              if (SHIBYTE(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_129;
            }
          }
LABEL_118:
          kaldi::ReadBasicType<int>(v6, v50[0], v25);
          goto LABEL_129;
        }
      }
    }
LABEL_102:
    kaldi::ReadToken(v6, v50[0], v12);
    goto LABEL_129;
  }
LABEL_134:
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_140;
  }
  else if (*(_BYTE *)(a1 + 95))
  {
    goto LABEL_140;
  }
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 71))
      goto LABEL_140;
LABEL_150:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Need to specify either <OutputEmbeddings> or <OutputLoglikes>", 61);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_150;
LABEL_140:
  if ((*(_BYTE *)(a1 + 95) & 0x80) == 0)
  {
    if (!*(_BYTE *)(a1 + 95))
      goto LABEL_146;
LABEL_144:
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_146;
    }
    else if (!*(_BYTE *)(a1 + 71))
    {
      goto LABEL_146;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cannot specify both <OutputEmbeddings> and <OutputLoglikes>", 59);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_144;
LABEL_146:
  kaldi::Input::~Input((kaldi::Input *)v49);
}

uint64_t kaldi::quasar::CEJointPredictorNet::CEJointPredictorNet(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v12;

  *((_QWORD *)kaldi::quasar::CEJointPredictorNetConfig::CEJointPredictorNetConfig((kaldi::quasar::CEJointPredictorNetConfig *)a1)
  + 16) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v12 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEJointPredictorNetConfig::Read(a1, a2, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 120) + 24))(__p);
  v7 = __p[0];
  __p[0] = 0;
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1ADE55E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  kaldi::quasar::CEJointPredictorNetConfig *v14;
  uint64_t v16;

  v16 = *((_QWORD *)v14 + 16);
  *((_QWORD *)v14 + 16) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::CEJointPredictorNetConfig::~CEJointPredictorNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEJointPredictorNetConfig::~CEJointPredictorNetConfig(kaldi::quasar::CEJointPredictorNetConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CEJointPredictorNet::~CEJointPredictorNet(kaldi::quasar::CEJointPredictorNet *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::CEJointPredictorNet::Predict(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t p_size;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22[3];
  void ***v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void ***v32;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 152))(*a2) != *(_DWORD *)(a1 + 104))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_acoustic_embeddings->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, *(unsigned int *)(a1 + 100)) != *(_DWORD *)(a1 + 108))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_acoustic_embeddings->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 152))(*a3) != *(_DWORD *)(a1 + 104))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_label_embeddings->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_28;
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 100)) != *(_DWORD *)(a1 + 108))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_label_embeddings->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
    goto LABEL_28;
  }
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, *(unsigned int *)(a1 + 96));
  if (v8 != (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *(unsigned int *)(a1 + 96)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "input_acoustic_embeddings->GetDimSize(cfg_.input_shape_template.row_index) == input_label_embeddings->GetDimSize(cfg_.input_shape_template.row_index)");
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v29);
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v9 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, (__int128 *)a1, *a2);
  v10 = v9;
  v30 = (uint64_t)v9;
  v11 = (__int128 *)(a1 + 24);
  v12 = *a3;
  if ((unint64_t)v9 >= v31)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, v11, v12);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v13 = *v11;
      v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v13;
    }
    v10[1].__r_.__value_.__r.__words[0] = v12;
    p_size = (uint64_t)&v10[1].__r_.__value_.__l.__size_;
  }
  v30 = p_size;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (*(char *)(a1 + 95) < 0)
    v15 = *(_QWORD *)(a1 + 80);
  else
    v15 = *(unsigned __int8 *)(a1 + 95);
  if (v15)
    v16 = (__int128 *)(a1 + 72);
  else
    v16 = (__int128 *)(a1 + 48);
  v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, v16);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v17 = *(_QWORD *)(a1 + 128);
  memset(v22, 0, sizeof(v22));
  (*(void (**)(uint64_t, uint64_t *, void ***, void ***, void ****))(*(_QWORD *)v17 + 128))(v17, &v29, &v26, v22, &v23);
  v32 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v18 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v24 - 8) = 0;
  v19 = *a4;
  *a4 = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v21 = v24 - 8;
  v20 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v24 - 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v24 = v21;
  v22[0] = (void **)&v23;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v22);
  v23 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v26 = (void **)&v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v26);
}

void sub_1ADE562E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::CEJointPredictorNet::InputDim(kaldi::quasar::CEJointPredictorNet *this)
{
  return *((unsigned int *)this + 27);
}

void kaldi::quasar::CEJointPredictorNet::Predict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  kaldi::quasar::ComputeEngineBufferItf *v10;
  kaldi::quasar::ComputeEngineBufferItf *v11;
  kaldi::quasar::ComputeEngineBufferItf *v12;
  kaldi::quasar::ComputeEngineBufferItf *v13;
  kaldi::quasar::ComputeEngineBufferItf *v14;
  kaldi::quasar::ComputeEngineBufferItf *v15;
  kaldi::quasar::ComputeEngineBufferItf *v16;
  kaldi::quasar::ComputeEngineBufferItf *v17;
  void *__p[34];

  v5 = *(int *)(a2 + 20);
  if ((_DWORD)v5 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_acoustic_embeddings.NumRows() == input_label_embeddings.NumRows()");
    goto LABEL_16;
  }
  v7 = *(int *)(a2 + 16);
  if ((_DWORD)v7 != *(_DWORD *)(a3 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_acoustic_embeddings.NumCols() == input_label_embeddings.NumCols()");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 96), v5, v7, __p);
  v16 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 128), a2, (uint64_t)__p, &v16, &v17);
  v10 = v16;
  v16 = 0;
  if (v10)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v10 + 8))(v10);
  v14 = 0;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 128), a3, (uint64_t)__p, &v14, &v15);
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v11 + 8))(v11);
  kaldi::quasar::CEJointPredictorNet::Predict(a1, (uint64_t *)&v17, (uint64_t *)&v15, a4);
  v12 = v15;
  v15 = 0;
  if (v12)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v13 + 8))(v13);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADE564D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a11)
    JUMPOUT(0x1ADE564C0);
  JUMPOUT(0x1ADE564B4);
}

void sub_1ADE564EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::CEJointPredictorNet::OutputDim(kaldi::quasar::CEJointPredictorNet *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t kaldi::quasar::CEJointPredictorNet::WarmUp(kaldi::quasar::CEJointPredictorNet *this)
{
  uint64_t v3;
  int32x2_t v4[6];
  int32x2_t v5[6];

  kaldi::CuMatrix<float>::CuMatrix(v5, 1, *((unsigned int *)this + 27), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v4, 1, *((unsigned int *)this + 27), 0, 0, 0);
  v3 = 0;
  kaldi::quasar::CEJointPredictorNet::Predict((uint64_t)this, (uint64_t)v5, (uint64_t)v4, &v3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1ADE565A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::CEJointPredictorNet::OutputsAreLogProbs(kaldi::quasar::CEJointPredictorNet *this)
{
  uint64_t v1;

  if (*((char *)this + 95) < 0)
    v1 = *((_QWORD *)this + 10);
  else
    v1 = *((unsigned __int8 *)this + 95);
  return v1 != 0;
}

kaldi::quasar::CEAcousticEncoderNetConfig *kaldi::quasar::CEAcousticEncoderNetConfig::CEAcousticEncoderNetConfig(kaldi::quasar::CEAcousticEncoderNetConfig *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_feats");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "output_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 9, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "");
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEAcousticEncoderNetConfig *)((char *)this + 192));
  *(_QWORD *)((char *)this + 212) = -1;
  *(_QWORD *)((char *)this + 204) = -1;
  *(_OWORD *)((char *)this + 220) = xmmword_1AE185030;
  *((_QWORD *)this + 30) = 0;
  return this;
}

void sub_1ADE566D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;

  v16 = v13;
  a10 = (void **)(v10 + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 95) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAcousticEncoderNetConfig::~CEAcousticEncoderNetConfig(kaldi::quasar::CEAcousticEncoderNetConfig *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

kaldi::quasar::CEJointPredictorNetConfig *kaldi::quasar::CEJointPredictorNetConfig::CEJointPredictorNetConfig(kaldi::quasar::CEJointPredictorNetConfig *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_acoustic_embeddings");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "input_label_embeddings");
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEJointPredictorNetConfig *)((char *)this + 96));
  *(_QWORD *)((char *)this + 108) = -1;
  *((_QWORD *)this + 15) = 0;
  return this;
}

void sub_1ADE568A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__emplace_back_slow_path<std::string&,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  std::string *v16;
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (std::string *)&v12[48 * v5];
  v18 = &v12[48 * v11];
  std::pair<std::string const,std::vector<quasar::AlternativeSelectionSpan::Alternative>>::pair[abi:ne180100]<std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>,0>(v16, a2, a3);
  v17 = v16 + 2;
  std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__split_buffer(&v15);
  return v13;
}

void sub_1ADE56ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::reverse_iterator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void sub_1ADE56F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v20;
  NSObject *v21;
  _BOOL4 v22;

  if (a2)
  {
    quasar::BitmapLoaderImpl::~BitmapLoaderImpl((quasar::BitmapLoaderImpl *)&a10);
    v20 = __cxa_begin_catch(exception_object);
    EarGeoLMHelperLogger();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v22)
        -[_EARGeoLMHelper initWithLocale:config:].cold.1((uint64_t)v20);

      __cxa_end_catch();
    }
    else
    {
      if (v22)
        -[_EARGeoLMHelper initWithLocale:config:].cold.2();

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADE56E78);
  }
  _Unwind_Resume(exception_object);
}

id EarGeoLMHelperLogger(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&unk_1EED8B000;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)&unk_1EED8B000;
    if (v3)
    {
      EarGeoLMHelperLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.geolm.helper");
      v1 = (id *)&unk_1EED8B000;
    }
  }
  return v1[117];
}

void sub_1ADE572A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v27;
  NSObject *v28;
  _BOOL4 v29;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (a25 < 0)
      operator delete(__p);
    v27 = __cxa_begin_catch(exception_object);
    EarGeoLMHelperLogger();
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v29)
        -[_EARGeoLMHelper initWithLocale:config:].cold.1((uint64_t)v27);
    }
    else if (v29)
    {
      -[_EARGeoLMHelper initWithLocale:config:].cold.2();
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADE57178);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADE5758C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADE57764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v24;
  NSObject *v25;
  _BOOL4 v26;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (a22 < 0)
      operator delete(__p);
    v24 = __cxa_begin_catch(exception_object);
    EarGeoLMHelperLogger();
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v26)
        -[_EARGeoLMHelper initWithLocale:config:].cold.1((uint64_t)v24);

      __cxa_end_catch();
    }
    else
    {
      if (v26)
        -[_EARGeoLMHelper initWithLocale:config:].cold.2();

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADE57730);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<quasar::Geography>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 128);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 104);
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2 + 80, *(_QWORD **)(a2 + 88));
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a2 + 56, *(_QWORD **)(a2 + 64));
    v4 = (void **)(a2 + 32);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 16);
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v3)
      MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
    MEMORY[0x1AF44D190](a2, 0x1020C407EC4A46FLL);
  }
}

uint64_t kaldi::WriteCompactLattice(_QWORD *a1, int a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  std::string __p;
  __int16 v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  std::string v19[2];
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "<unspecifed>");
    v5 = FLAGS_fst_align;
    if (SHIBYTE(v19[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v19[0].__r_.__value_.__l.__data_, v19[0].__r_.__value_.__l.__size_);
      v14 = 257;
      v15 = 1;
      v16 = v5;
      if (SHIBYTE(v19[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19[0].__r_.__value_.__l.__data_);
    }
    else
    {
      __p = v19[0];
      v14 = 257;
      v15 = 1;
      v16 = FLAGS_fst_align;
    }
    v10 = (*(uint64_t (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)a3 + 96))(a3, a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, 0x10000, 1);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\t");
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FstPrinter((uint64_t)v19, a3, v7, v8, 0, (v6 >> 16) & 1, 0, (__int128 *)&__p, &v17);
    if (v18 < 0)
      operator delete((void *)v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<unknown>");
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Print(v19, (std::string::size_type)a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Stream failure detected.", 24);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    v10 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
    {
      v11 = v20;
LABEL_25:
      operator delete(v11);
    }
  }
  return v10;
}

void sub_1ADE57BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 169) < 0)
    operator delete(*(void **)(v16 - 192));
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Print(std::string *a1, std::string::size_type a2, std::string *__str)
{
  uint64_t result;
  int v5;
  std::string::size_type v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  a1[1].__r_.__value_.__r.__words[2] = a2;
  std::string::operator=(a1 + 2, __str);
  result = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1->__r_.__value_.__l.__data_ + 24))(a1->__r_.__value_.__r.__words[0]);
  if ((_DWORD)result == -1)
    return result;
  v5 = result;
  fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintState(a1, result);
  v6 = a1->__r_.__value_.__r.__words[0];
  v11 = 0;
  (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v6 + 128))(v6, &v9);
  while (1)
  {
    result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10)
        return result;
      goto LABEL_8;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    result = v9;
    if (v7)
      break;
    if (v9)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 24))();
      goto LABEL_9;
    }
LABEL_8:
    v8 = v11;
LABEL_9:
    if ((_DWORD)v8 != v5)
      fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintState(a1, v8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    else
      ++v11;
  }
  if (v9)
    return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
  return result;
}

void sub_1ADE57D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstPrinter(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t kaldi::WriteLattice(_QWORD *a1, int a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  std::string __p;
  __int16 v13;
  char v14;
  char v15;
  __int128 v16;
  char v17;
  std::string v18[2];
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "<unspecifed>");
    v5 = FLAGS_fst_align;
    if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v18[0].__r_.__value_.__l.__data_, v18[0].__r_.__value_.__l.__size_);
      v13 = 257;
      v14 = 1;
      v15 = v5;
      if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18[0].__r_.__value_.__l.__data_);
    }
    else
    {
      __p = v18[0];
      v13 = 257;
      v14 = 1;
      v15 = FLAGS_fst_align;
    }
    v9 = (*(uint64_t (**)(uint64_t, _QWORD *, std::string *))(*(_QWORD *)a3 + 96))(a3, a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "\t");
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FstPrinter((uint64_t)v18, a3, v6, v7, 0, 0, 0, (__int128 *)&__p, &v16);
    if (v17 < 0)
      operator delete((void *)v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<unknown>");
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Print(v18, (std::string::size_type)a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Stream failure detected.", 24);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    }
    __p.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    v9 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
    if (v20 < 0)
    {
      v10 = v19;
LABEL_25:
      operator delete(v10);
    }
  }
  return v9;
}

void sub_1ADE5807C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 153) < 0)
    operator delete(*(void **)(v16 - 176));
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Print(std::string *a1, std::string::size_type a2, std::string *__str)
{
  uint64_t result;
  int v5;
  std::string::size_type v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  a1[1].__r_.__value_.__r.__words[2] = a2;
  std::string::operator=(a1 + 2, __str);
  result = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1->__r_.__value_.__l.__data_ + 24))(a1->__r_.__value_.__r.__words[0]);
  if ((_DWORD)result == -1)
    return result;
  v5 = result;
  fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintState(a1, result);
  v6 = a1->__r_.__value_.__r.__words[0];
  v11 = 0;
  (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v6 + 128))(v6, &v9);
  while (1)
  {
    result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10)
        return result;
      goto LABEL_8;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    result = v9;
    if (v7)
      break;
    if (v9)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 24))();
      goto LABEL_9;
    }
LABEL_8:
    v8 = v11;
LABEL_9:
    if ((_DWORD)v8 != v5)
      fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintState(a1, v8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    else
      ++v11;
  }
  if (v9)
    return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
  return result;
}

void sub_1ADE58214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Print(std::string *a1, std::string::size_type a2, std::string *__str)
{
  uint64_t result;
  int v5;
  std::string::size_type v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  a1[1].__r_.__value_.__r.__words[2] = a2;
  std::string::operator=(a1 + 2, __str);
  result = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)a1->__r_.__value_.__l.__data_ + 24))(a1->__r_.__value_.__r.__words[0]);
  if ((_DWORD)result == -1)
    return result;
  v5 = result;
  fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState(a1, result);
  v6 = a1->__r_.__value_.__r.__words[0];
  v11 = 0;
  (*(void (**)(std::string::size_type, uint64_t *))(*(_QWORD *)v6 + 128))(v6, &v9);
  while (1)
  {
    result = v9;
    if (!v9)
    {
      if ((int)v11 >= v10)
        return result;
      goto LABEL_8;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    result = v9;
    if (v7)
      break;
    if (v9)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 24))();
      goto LABEL_9;
    }
LABEL_8:
    v8 = v11;
LABEL_9:
    if ((_DWORD)v8 != v5)
      fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState(a1, v8);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    else
      ++v11;
  }
  if (v9)
    return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 8))();
  return result;
}

void sub_1ADE58340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FstPrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, __int128 *a8, __int128 *a9)
{
  BOOL v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  if (a6)
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1) != 0;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v13 = *a8;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 80) = v13;
  }
  v14 = (std::string *)(a1 + 104);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v15 = *a9;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a9 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1ADE58434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintState(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  int v31;
  _QWORD v32[3];
  _DWORD *v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;

  v5 = a1 + 10;
  v4 = *a1;
  v34 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v4 + 136))(v4, a2, v32);
  v6 = 1;
  while (1)
  {
    if (!v32[0])
    {
      if (v34 >= v32[2])
        goto LABEL_46;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v32[0] + 24))(v32[0]))
      break;
    if (v32[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v32[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v32[1] + 48 * v34;
LABEL_8:
    v26 = *(_QWORD *)v7;
    v27 = *(void **)(v7 + 8);
    v29 = 0;
    v30 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
    v31 = *(_DWORD *)(v7 + 40);
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    v8 = *((char *)a1 + 103);
    if (v8 >= 0)
      v9 = (uint64_t)v5;
    else
      v9 = a1[10];
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a1 + 103);
    else
      v10 = a1[11];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v9, v10);
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId((uint64_t)a1, v31, a1[3]);
    v11 = *((char *)a1 + 103);
    if (v11 >= 0)
      v12 = (uint64_t)v5;
    else
      v12 = a1[10];
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a1 + 103);
    else
      v13 = a1[11];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v12, v13);
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId((uint64_t)a1, (int)v26, a1[1]);
    if (!*((_BYTE *)a1 + 32))
    {
      v14 = *((char *)a1 + 103);
      if (v14 >= 0)
        v15 = (uint64_t)v5;
      else
        v15 = a1[10];
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)a1 + 103);
      else
        v16 = a1[11];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v15, v16);
      fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId((uint64_t)a1, SHIDWORD(v26), a1[2]);
    }
    if (*((_BYTE *)a1 + 72)
      || (v37 = *((float *)&v27 + 1), v38 = *(float *)&v27, v36 = 0.0, v35 = 0.0, *(float *)&v27 != 0.0)
      || v37 != v35
      || v29 != __p)
    {
      v17 = *((char *)a1 + 103);
      if (v17 >= 0)
        v18 = (uint64_t)v5;
      else
        v18 = a1[10];
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)a1 + 103);
      else
        v19 = a1[11];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v18, v19);
      fst::operator<<<fst::LatticeWeightTpl<float>,int>(v20, (uint64_t)&v27);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], (uint64_t)"\n", 1);
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
    if (v32[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v32[0] + 40))(v32[0]);
      v6 = 0;
    }
    else
    {
      v6 = 0;
      ++v34;
    }
  }
  if (v32[0])
  {
    (*(void (**)(void))(*(_QWORD *)v32[0] + 8))();
    goto LABEL_48;
  }
LABEL_46:
  if (v33)
    --*v33;
LABEL_48:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v26, *a1, a2);
  v38 = *((float *)&v26 + 1);
  LODWORD(v32[0]) = v26;
  v37 = INFINITY;
  v36 = INFINITY;
  if (*(float *)&v26 != INFINITY || v38 != v36 || (v21 = __p, ((__p == v27) & ~v6) == 0))
  {
    fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    if (*((_BYTE *)a1 + 72)
      || (v38 = *((float *)&v26 + 1), LODWORD(v32[0]) = v26, v37 = 0.0, v36 = 0.0, *(float *)&v26 != 0.0)
      || v38 != v36
      || __p != v27)
    {
      v22 = *((char *)a1 + 103);
      if (v22 >= 0)
        v23 = (uint64_t)v5;
      else
        v23 = a1[10];
      if (v22 >= 0)
        v24 = *((unsigned __int8 *)a1 + 103);
      else
        v24 = a1[11];
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v23, v24);
      fst::operator<<<fst::LatticeWeightTpl<float>,int>(v25, (uint64_t)&v26);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], (uint64_t)"\n", 1);
    v21 = v27;
  }
  if (v21)
  {
    __p = v21;
    operator delete(v21);
  }
}

void sub_1ADE58878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::PrintId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type size;
  void *__p[2];
  char v22;
  char v23;
  std::string v24;

  if (!a3)
  {
    std::ostream::operator<<();
    return;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(&v24, a3, a2);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v24.__r_.__value_.__l.__size_)
      goto LABEL_7;
  }
  else if (!*((_BYTE *)&v24.__r_.__value_.__s + 23))
  {
LABEL_7:
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(_QWORD *)(a1 + 112))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(a1 + 127))
    {
LABEL_9:
      std::string::operator=(&v24, (const std::string *)(a1 + 104));
      goto LABEL_29;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FstPrinter: Integer ", 20);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not mapped to any textual symbol", 36);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", symbol table = ", 17);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    v11 = *(char *)(v10 + 23);
    if (v11 >= 0)
      v12 = v10;
    else
      v12 = *(_QWORD *)v10;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(v10 + 23);
    else
      v13 = *(_QWORD *)(v10 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", destination = ", 16);
    v16 = *(char *)(a1 + 71);
    if (v16 >= 0)
      v17 = a1 + 48;
    else
      v17 = *(_QWORD *)(a1 + 48);
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a1 + 71);
    else
      v18 = *(_QWORD *)(a1 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v22 < 0)
      operator delete(__p[0]);
    MEMORY[0x1AF44C914](&v24, "?");
  }
LABEL_29:
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v24;
  else
    v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)v19, size);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1ADE58ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FstPrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, __int128 *a8, __int128 *a9)
{
  BOOL v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  if (a6)
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1) != 0;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v13 = *a8;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 80) = v13;
  }
  v14 = (std::string *)(a1 + 104);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v15 = *a9;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a9 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1ADE58C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintState(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *result;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD v29[3];
  _DWORD *v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v5 = a1 + 10;
  v4 = *a1;
  v31 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v4 + 136))(v4, a2, v29);
  v6 = 1;
  while (1)
  {
    if (!v29[0])
    {
      if (v31 >= v29[2])
        goto LABEL_43;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v29[0] + 24))(v29[0]))
      break;
    if (v29[0])
    {
      v7 = (*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = v29[1] + 20 * v31;
LABEL_8:
    v26 = *(_QWORD *)v7;
    v27 = *(_QWORD *)(v7 + 8);
    v28 = *(_DWORD *)(v7 + 16);
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    v8 = *((char *)a1 + 103);
    if (v8 >= 0)
      v9 = (uint64_t)v5;
    else
      v9 = a1[10];
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a1 + 103);
    else
      v10 = a1[11];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v9, v10);
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId((uint64_t)a1, v28, a1[3]);
    v11 = *((char *)a1 + 103);
    if (v11 >= 0)
      v12 = (uint64_t)v5;
    else
      v12 = a1[10];
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a1 + 103);
    else
      v13 = a1[11];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v12, v13);
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)v26, a1[1]);
    if (!*((_BYTE *)a1 + 32))
    {
      v14 = *((char *)a1 + 103);
      if (v14 >= 0)
        v15 = (uint64_t)v5;
      else
        v15 = a1[10];
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)a1 + 103);
      else
        v16 = a1[11];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v15, v16);
      fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId((uint64_t)a1, SHIDWORD(v26), a1[2]);
    }
    if (*((_BYTE *)a1 + 72)
      || (v34 = *((float *)&v27 + 1), v35 = *(float *)&v27, v33 = 0.0, v32 = 0.0, *(float *)&v27 != 0.0)
      || v34 != v32)
    {
      v17 = *((char *)a1 + 103);
      if (v17 >= 0)
        v18 = (uint64_t)v5;
      else
        v18 = a1[10];
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)a1 + 103);
      else
        v19 = a1[11];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v18, v19);
      fst::operator<<<float>(v20, (float *)&v27);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], (uint64_t)"\n", 1);
    if (v29[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v29[0] + 40))(v29[0]);
      v6 = 0;
    }
    else
    {
      v6 = 0;
      ++v31;
    }
  }
  if (v29[0])
  {
    (*(void (**)(void))(*(_QWORD *)v29[0] + 8))();
    goto LABEL_45;
  }
LABEL_43:
  if (v30)
    --*v30;
LABEL_45:
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(v29, *a1, a2);
  v35 = *((float *)v29 + 1);
  v34 = INFINITY;
  v33 = INFINITY;
  if (*(float *)v29 != INFINITY || v6 & 1 | (v35 != v33))
  {
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    if (*((_BYTE *)a1 + 72) || (v35 = *((float *)v29 + 1), v34 = 0.0, v33 = 0.0, *(float *)v29 != 0.0) || v35 != v33)
    {
      v22 = *((char *)a1 + 103);
      if (v22 >= 0)
        v23 = (uint64_t)v5;
      else
        v23 = a1[10];
      if (v22 >= 0)
        v24 = *((unsigned __int8 *)a1 + 103);
      else
        v24 = a1[11];
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v23, v24);
      fst::operator<<<float>(v25, (float *)v29);
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], (uint64_t)"\n", 1);
  }
  return result;
}

void sub_1ADE58FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::PrintId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type size;
  void *__p[2];
  char v22;
  char v23;
  std::string v24;

  if (!a3)
  {
    std::ostream::operator<<();
    return;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(&v24, a3, a2);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v24.__r_.__value_.__l.__size_)
      goto LABEL_7;
  }
  else if (!*((_BYTE *)&v24.__r_.__value_.__s + 23))
  {
LABEL_7:
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(_QWORD *)(a1 + 112))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(a1 + 127))
    {
LABEL_9:
      std::string::operator=(&v24, (const std::string *)(a1 + 104));
      goto LABEL_29;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FstPrinter: Integer ", 20);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not mapped to any textual symbol", 36);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", symbol table = ", 17);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    v11 = *(char *)(v10 + 23);
    if (v11 >= 0)
      v12 = v10;
    else
      v12 = *(_QWORD *)v10;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(v10 + 23);
    else
      v13 = *(_QWORD *)(v10 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", destination = ", 16);
    v16 = *(char *)(a1 + 71);
    if (v16 >= 0)
      v17 = a1 + 48;
    else
      v17 = *(_QWORD *)(a1 + 48);
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a1 + 71);
    else
      v18 = *(_QWORD *)(a1 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v22 < 0)
      operator delete(__p[0]);
    MEMORY[0x1AF44C914](&v24, "?");
  }
LABEL_29:
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v24;
  else
    v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)v19, size);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1ADE59218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstPrinter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, __int128 *a8, __int128 *a9)
{
  BOOL v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  if (a6)
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1) != 0;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v13 = *a8;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 80) = v13;
  }
  v14 = (std::string *)(a1 + 104);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v15 = *a9;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a9 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1ADE59340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintState(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  float v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  uint64_t v33;
  _QWORD v34[3];
  _DWORD *v35;
  unint64_t v36;
  int v37;
  int v38;

  v5 = a1 + 10;
  v4 = *a1;
  v36 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v4 + 136))(v4, a2, v34);
  v6 = 1;
  while (1)
  {
    if (!v34[0])
    {
      if (v36 >= v34[2])
        goto LABEL_47;
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v34[0] + 24))(v34[0]))
      break;
    if (v34[0])
    {
      v7 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)v34[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    v7 = (float *)(v34[1] + 16 * v36);
LABEL_8:
    v9 = *(int *)v7;
    v8 = *((int *)v7 + 1);
    v10 = v7[2];
    v11 = *((int *)v7 + 3);
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    v12 = *((char *)a1 + 103);
    if (v12 >= 0)
      v13 = (uint64_t)v5;
    else
      v13 = a1[10];
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)a1 + 103);
    else
      v14 = a1[11];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v13, v14);
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, v11, a1[3]);
    v15 = *((char *)a1 + 103);
    if (v15 >= 0)
      v16 = (uint64_t)v5;
    else
      v16 = a1[10];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)a1 + 103);
    else
      v17 = a1[11];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v16, v17);
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, v9, a1[1]);
    if (!*((_BYTE *)a1 + 32))
    {
      v18 = *((char *)a1 + 103);
      if (v18 >= 0)
        v19 = (uint64_t)v5;
      else
        v19 = a1[10];
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)a1 + 103);
      else
        v20 = a1[11];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v19, v20);
      fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, v8, a1[2]);
    }
    if (*((_BYTE *)a1 + 72) || (v38 = LODWORD(v10), v37 = 0, v10 != 0.0))
    {
      v21 = *((char *)a1 + 103);
      if (v21 >= 0)
        v22 = (uint64_t)v5;
      else
        v22 = a1[10];
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)a1 + 103);
      else
        v23 = a1[11];
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v22, v23);
      if (v10 == INFINITY)
      {
        v25 = "Infinity";
        v26 = 8;
      }
      else
      {
        if (v10 != -INFINITY)
        {
          std::ostream::operator<<();
          goto LABEL_41;
        }
        v25 = "-Infinity";
        v26 = 9;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    }
LABEL_41:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], (uint64_t)"\n", 1);
    if (v34[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v34[0] + 40))(v34[0]);
      v6 = 0;
    }
    else
    {
      v6 = 0;
      ++v36;
    }
  }
  if (v34[0])
  {
    (*(void (**)(void))(*(_QWORD *)v34[0] + 8))();
    goto LABEL_49;
  }
LABEL_47:
  if (v35)
    --*v35;
LABEL_49:
  v27 = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
  *(float *)v34 = v27;
  v38 = 2139095040;
  if (v6 & 1 | (v27 != INFINITY))
  {
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId((uint64_t)a1, (int)a2, a1[3]);
    if (*((_BYTE *)a1 + 72) || (*(float *)v34 = v27, v38 = 0, v27 != 0.0))
    {
      v28 = *((char *)a1 + 103);
      if (v28 >= 0)
        v29 = (uint64_t)v5;
      else
        v29 = a1[10];
      if (v28 >= 0)
        v30 = *((unsigned __int8 *)a1 + 103);
      else
        v30 = a1[11];
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], v29, v30);
      if (v27 == INFINITY)
      {
        v32 = "Infinity";
        v33 = 8;
        goto LABEL_62;
      }
      if (v27 == -INFINITY)
      {
        v32 = "-Infinity";
        v33 = 9;
LABEL_62:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      }
      else
      {
        std::ostream::operator<<();
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)a1[5], (uint64_t)"\n", 1);
  }
}

void sub_1ADE59744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  }
  else if (a14)
  {
    --*a14;
  }
  _Unwind_Resume(exception_object);
}

void fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::PrintId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type size;
  void *__p[2];
  char v22;
  char v23;
  std::string v24;

  if (!a3)
  {
    std::ostream::operator<<();
    return;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(&v24, a3, a2);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v24.__r_.__value_.__l.__size_)
      goto LABEL_7;
  }
  else if (!*((_BYTE *)&v24.__r_.__value_.__s + 23))
  {
LABEL_7:
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(_QWORD *)(a1 + 112))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(a1 + 127))
    {
LABEL_9:
      std::string::operator=(&v24, (const std::string *)(a1 + 104));
      goto LABEL_29;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v5 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FstPrinter: Integer ", 20);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not mapped to any textual symbol", 36);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", symbol table = ", 17);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    v11 = *(char *)(v10 + 23);
    if (v11 >= 0)
      v12 = v10;
    else
      v12 = *(_QWORD *)v10;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(v10 + 23);
    else
      v13 = *(_QWORD *)(v10 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", destination = ", 16);
    v16 = *(char *)(a1 + 71);
    if (v16 >= 0)
      v17 = a1 + 48;
    else
      v17 = *(_QWORD *)(a1 + 48);
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a1 + 71);
    else
      v18 = *(_QWORD *)(a1 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v22 < 0)
      operator delete(__p[0]);
    MEMORY[0x1AF44C914](&v24, "?");
  }
LABEL_29:
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v24;
  else
    v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)v19, size);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1ADE59978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeContainer::LmeContainer(uint64_t a1, _QWORD *a2, __int128 *a3, int a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::string *)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_DWORD *)(a1 + 40) = a4;
  return a1;
}

void sub_1ADE59A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

quasar::LmeDataStreams *quasar::LmeDataStreams::LmeDataStreams(quasar::LmeDataStreams *this)
{
  _OWORD *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = operator new(0x10uLL);
  *(_QWORD *)this = v2;
  *v2++ = xmmword_1AE185040;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  return this;
}

_QWORD *quasar::LmeDataFactoryBase::LmeDataFactoryBase(_QWORD *this)
{
  *this = off_1E5D36978;
  return this;
}

_QWORD *quasar::LmeDataFactoryBase::PronSet::PronSet(_QWORD *this)
{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

uint64_t quasar::LmeDataFactoryBase::PronSet::PronSet(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v3 = *a2;
  v4 = a2[1];
  while (v3 != v4)
  {
    quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)a1, 1, v3, 0.0);
    v3 += 24;
  }
  return a1;
}

void sub_1ADE59B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::insert(uint64_t **a1, int a2, uint64_t a3, float a4)
{
  std::string::size_type v5;
  char *v6;
  char v7;
  char v8;
  int v10;
  std::string __p;
  float v12;

  v12 = a4;
  if (*(char *)(a3 + 23) < 0)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (!v5)
      return 0;
    v10 = a2;
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, v5);
  }
  else
  {
    if (!*(_BYTE *)(a3 + 23))
      return 0;
    v10 = a2;
    __p = *(std::string *)a3;
  }
  v6 = std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<quasar::PronType,std::string>,float &>(a1, (uint64_t)&v10, (uint64_t)&v10, &v12);
  v8 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)
    return 1;
  if (*((float *)v6 + 16) > v12)
  {
    *((float *)v6 + 16) = v12;
    return 1;
  }
  return 0;
}

void sub_1ADE59C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::PronSet(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      quasar::LmeDataFactoryBase::PronSet::insert((uint64_t **)a1, 1, (uint64_t)(v4 + 4), 0.0);
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v3);
  }
  return a1;
}

void sub_1ADE59CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *quasar::LmeDataFactoryBase::PronSet::PronSet(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)a1, a2);
  return a1;
}

void sub_1ADE59D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::insert(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)result;
    do
    {
      result = quasar::LmeDataFactoryBase::PronSet::insert(v4, *(_DWORD *)v2, v2 + 8, *(float *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t quasar::LmeDataFactoryBase::PronSet::toPronChoices@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)(result + 8);
  v4 = *(_QWORD **)result;
  if (*(_QWORD *)result != result + 8)
  {
    v7 = (uint64_t)(a3 + 2);
    do
    {
      result = quasar::pronTypeMatchesPronRequest(*((_DWORD *)v4 + 8), a2);
      if ((_DWORD)result)
      {
        v8 = a3[1];
        if (v8 >= a3[2])
        {
          result = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType const&,std::string const&,float const&>(a3, (int *)v4 + 8, (uint64_t)(v4 + 5), (int *)v4 + 16);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType const&,std::string const&,float const&>(v7, a3[1], (int *)v4 + 8, (uint64_t)(v4 + 5), (int *)v4 + 16);
          result = v8 + 40;
          a3[1] = v8 + 40;
        }
        a3[1] = result;
      }
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
    }
    while (v10 != v3);
  }
  return result;
}

void sub_1ADE59E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  a10 = (void **)v10;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactoryBase::PronSet::size(quasar::LmeDataFactoryBase::PronSet *this)
{
  return *((_QWORD *)this + 2);
}

BOOL quasar::LmeDataFactoryBase::PronSet::empty(quasar::LmeDataFactoryBase::PronSet *this)
{
  return *((_QWORD *)this + 2) == 0;
}

void quasar::LmeDataFactoryBase::PronSet::clear(char **this)
{
  char *v2;

  v2 = (char *)(this + 1);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)this, this[1]);
  *this = v2;
  this[2] = 0;
  *(_QWORD *)v2 = 0;
}

uint64_t quasar::LmeDataFactoryBase::PronSet::toString(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  v8 = (_QWORD *)*a1;
  v6 = a1 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    v9 = 1;
    do
    {
      if ((v9 & 1) == 0)
      {
        v10 = *(char *)(a3 + 23);
        if (v10 >= 0)
          v11 = a3;
        else
          v11 = *(_QWORD *)a3;
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(a3 + 23);
        else
          v12 = *(_QWORD *)(a3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v11, v12);
      }
      if (a2)
      {
        v13 = quasar::PronTypeToString(*((_DWORD *)v7 + 8));
        v14 = strlen(v13);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      }
      v17 = *((char *)v7 + 63);
      if (v17 >= 0)
        v18 = (uint64_t)(v7 + 5);
      else
        v18 = v7[5];
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v7 + 63);
      else
        v19 = v7[6];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v18, v19);
      v20 = (_QWORD *)v7[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v7[2];
          v22 = *v21 == (_QWORD)v7;
          v7 = v21;
        }
        while (!v22);
      }
      v9 = 0;
      v7 = v21;
    }
    while (v21 != v6);
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v26);
}

void sub_1ADE5A07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double quasar::LmeDataFactoryBase::Word::Word(quasar::LmeDataFactoryBase::Word *this)
{
  double result;

  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  return result;
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, __int128 *a2, __int128 *a3, int a4, uint64_t *a5)
{
  __int128 v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  quasar::LmeDataFactoryBase::PronSet::PronSet((uint64_t)&this[2].__r_.__value_.__l.__size_, a5);
  return this;
}

void sub_1ADE5A15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, __int128 *a2, __int128 *a3, int a4, _QWORD *a5)
{
  __int128 v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  quasar::LmeDataFactoryBase::PronSet::PronSet((uint64_t)&this[2].__r_.__value_.__l.__size_, a5);
  return this;
}

void sub_1ADE5A238(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, __int128 *a2, __int128 *a3, int a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, a5);
  return this;
}

void sub_1ADE5A314(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactoryBase::Word::Word(std::string *this, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&this[2].__r_.__value_.__r.__words[2];
  return this;
}

void sub_1ADE5A3E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1ADE5A538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *quasar::lmeTypeString(unsigned int a1)
{
  _OWORD v2[17];

  if (a1 >= 5)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Unknown LmeType: ", 17);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  return off_1E5D48B90[a1];
}

_QWORD *quasar::operator<<(_QWORD *a1, unsigned int a2)
{
  char *v3;
  size_t v4;

  v3 = quasar::lmeTypeString(a2);
  v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  return a1;
}

uint64_t quasar::lmeTypeFromString(uint64_t a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *v5;
  int v7;
  int v8;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[17];

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (v2 != 6)
    {
      if (v2 != 7)
      {
        v3 = (int *)a1;
        if (v2 != 8)
          goto LABEL_49;
LABEL_29:
        if (*(_QWORD *)v3 == 0x656D4C7465736E55)
          return 4;
        goto LABEL_49;
      }
      if (*(_DWORD *)a1 != 2054845762 || *(_DWORD *)(a1 + 3) != 1701661818)
      {
        if (*(_DWORD *)a1 != 1953064005 || *(_DWORD *)(a1 + 3) != 1701661812)
          goto LABEL_49;
        return 3;
      }
      return 2;
    }
    if (*(_DWORD *)a1 != 1282699073 || *(_WORD *)(a1 + 4) != 25965)
    {
      if (*(_DWORD *)a1 != 1282697546 || *(_WORD *)(a1 + 4) != 25965)
        goto LABEL_49;
      return 1;
    }
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == 6)
  {
    v5 = *(int **)a1;
    if (**(_DWORD **)a1 == 1282699073 && *(_WORD *)(*(_QWORD *)a1 + 4) == 25965)
      return 0;
    v7 = *v5;
    v8 = *((unsigned __int16 *)v5 + 2);
    if (v7 == 1282697546 && v8 == 25965)
      return 1;
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (v4 != 7)
    goto LABEL_27;
  if (**(_DWORD **)a1 == 2054845762 && *(_DWORD *)(*(_QWORD *)a1 + 3) == 1701661818)
    return 2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != 7)
    goto LABEL_27;
  if (**(_DWORD **)a1 == 1953064005 && *(_DWORD *)(*(_QWORD *)a1 + 3) == 1701661812)
    return 3;
  if ((v2 & 0x80) != 0)
  {
LABEL_27:
    if (v4 == 8)
    {
      v3 = *(int **)a1;
      goto LABEL_29;
    }
  }
LABEL_49:
  if (quasar::gLogLevel >= 2)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unknown LmeType: ", 17);
    v18 = *(char *)(a1 + 23);
    if (v18 >= 0)
      v19 = a1;
    else
      v19 = *(_QWORD *)a1;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a1 + 23);
    else
      v20 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v21);
  }
  return 5;
}

void sub_1ADE5A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LmeDataStreams::addLmeStream(uint64_t a1, signed int a2, uint64_t **a3, __int128 *a4)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  void *__p[2];
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;

  v20 = a2;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v18);
  v8 = *a3;
  if (*a3)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    quasar::LmeData::fromStream(v18, v8, 0, (unsigned __int8 *)__p);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,void>(&v18, a4, &v20, &v15);
  quasar::LmeDataStreams::addLmeContainer(a1, a2, &v15);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1ADE5A9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataStreams::addLmeContainer(uint64_t result, signed int a2, __int128 *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  signed int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int *v37;
  void **v38;

  v36 = a2;
  if (a2 != 5)
  {
    v5 = *(_DWORD **)result;
    v4 = *(_DWORD **)(result + 8);
    if (*(_DWORD **)result != v4)
    {
      while (*v5 != a2)
      {
        if (++v5 == v4)
        {
          v5 = *(_DWORD **)(result + 8);
          break;
        }
      }
    }
    if (v5 == v4)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"lmeType: ", 9);
      v18 = quasar::operator<<(v17, a2);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, " is not listed in lmeTypeInOffsetOrder.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
    }
    v8 = *(_QWORD *)(result + 32);
    v6 = result + 32;
    v7 = v8;
    v9 = (uint64_t **)(v6 - 8);
    if (!v8)
      goto LABEL_17;
    v10 = v6;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 == v6 || *(_DWORD *)(v10 + 32) > a2)
    {
LABEL_17:
      *(_QWORD *)&v20 = 0;
      v37 = &v36;
      v14 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v6 - 8), &v36, (uint64_t)&std::piecewise_construct, &v37);
      std::vector<std::shared_ptr<quasar::Decoder>>::__vdeallocate((void **)v14 + 5);
      *(_OWORD *)(v14 + 5) = 0uLL;
      v14[7] = (uint64_t *)v20;
      *(_QWORD *)&v20 = 0;
      v19 = 0uLL;
      v38 = (void **)&v19;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v38);
    }
    *(_QWORD *)&v19 = &v36;
    v15 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v9, &v36, (uint64_t)&std::piecewise_construct, (_DWORD **)&v19);
    return std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v15 + 5, a3);
  }
  return result;
}

void sub_1ADE5ABD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void quasar::LmeDataStreams::getLmeStreams(int **this@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int *v3;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v5 = this + 4;
    do
    {
      v6 = *v5;
      if (*v5)
      {
        v7 = *v2;
        v8 = v5;
        do
        {
          v9 = *(_DWORD *)(v6 + 32);
          v10 = v9 < v7;
          if (v9 >= v7)
            v11 = (uint64_t *)v6;
          else
            v11 = (uint64_t *)(v6 + 8);
          if (!v10)
            v8 = (_QWORD *)v6;
          v6 = *v11;
        }
        while (*v11);
        if (v8 != v5 && v7 >= *((_DWORD *)v8 + 8))
        {
          v12 = (_QWORD *)v8[5];
          v13 = (_QWORD *)v8[6];
          while (v12 != v13)
          {
            v14 = v12[1];
            *(_QWORD *)&v20 = *v12;
            *((_QWORD *)&v20 + 1) = v14;
            if (v14)
            {
              v15 = (unint64_t *)(v14 + 8);
              do
                v16 = __ldxr(v15);
              while (__stxr(v16 + 1, v15));
            }
            std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a2, &v20);
            v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
            if (*((_QWORD *)&v20 + 1))
            {
              v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            v12 += 2;
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_1ADE5ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<quasar::PronType,std::string>,float &>(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  void **v7;
  char *v8;
  uint64_t **v9;
  uint64_t v11;

  v7 = (void **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>((uint64_t)a1, &v11, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x48uLL);
    *((_DWORD *)v8 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v8 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *((_DWORD *)v8 + 16) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,void>@<X0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADE5AE24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &,std::allocator<quasar::LmeContainer>,0>(_QWORD *a1, _QWORD *a2, __int128 *a3, int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D426B0;
  a1[1] = 0;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1ADE5AE8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,std::string const&,quasar::LmeDataFactoryBase::LmeType &>(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 *a4, int *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[2];

  v5 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  quasar::LmeContainer::LmeContainer(a2, v10, a4, *a5);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1ADE5AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *quasar::split@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 *result;
  _QWORD v11[3];
  _QWORD __dst[4];

  v6 = a4;
  __dst[3] = *MEMORY[0x1E0C80C00];
  LODWORD(a4) = *((char *)a2 + 23);
  v7 = (int)a4 < 0;
  v8 = (uint64_t *)*a2;
  v9 = a2[1];
  if ((int)a4 >= 0)
    v8 = a2;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  a4 = a4;
  if (v7)
    a4 = v9;
  v11[0] = v8;
  v11[1] = (char *)v8 + a4;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v11);
  result = boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>((__int128 *)v6, a1, __dst, a3 ^ 1u);
  if (__dst[2] >= 0x11uLL)
  {
    result = (__int128 *)__dst[0];
    if (__dst[0])
      return (__int128 *)MEMORY[0x1AF44D160](__dst[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1ADE5B01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  if (a15 >= 0x11)
  {
    if (a13)
      MEMORY[0x1AF44D160](a13, 0x1000C8077774924);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::trim(std::string *a1)
{
  std::locale v2;
  std::locale v3;
  std::locale v4;

  MEMORY[0x1AF44CFA4](&v2);
  LODWORD(v3.__locale_) = 0x4000;
  std::locale::locale(&v4, &v2);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v3);
  std::locale::~locale(&v4);
  std::locale::~locale(&v2);
}

void sub_1ADE5B0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL quasar::startsWith(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;

  v2 = *(unsigned __int8 **)a1;
  if ((a1[23] & 0x80u) != 0)
  {
    v3 = *((_QWORD *)a1 + 1);
  }
  else
  {
    v2 = a1;
    v3 = a1[23];
  }
  v4 = (char)a2[23];
  v5 = v4 < 0;
  v6 = *(unsigned __int8 **)a2;
  if (v4 >= 0)
    v6 = a2;
  v7 = a2[23];
  if (v5)
    v7 = *((_QWORD *)a2 + 1);
  if (v3)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v12 = v6;
    return v12 == &v6[v7];
  }
  else
  {
    v10 = v7 - 1;
    v11 = v3 - 1;
    v12 = v6;
    while (*v2 == *v12)
    {
      ++v12;
      if (v11)
      {
        ++v2;
        v13 = v10--;
        --v11;
        if (v13)
          continue;
      }
      return v12 == &v6[v7];
    }
    return 0;
  }
}

BOOL quasar::endsWith(uint64_t *a1, uint64_t *a2)
{
  int v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = *((char *)a1 + 23);
  v3 = v2 < 0;
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  v5 = *((unsigned __int8 *)a1 + 23);
  if (v3)
    v5 = a1[1];
  v6 = *((char *)a2 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = *((unsigned __int8 *)a2 + 23);
  if (v7)
    v9 = a2[1];
  v10 = (uint64_t)v4 - 1;
  v11 = (uint64_t)v8 - 1;
  while (v5 && v9)
  {
    v12 = *(unsigned __int8 *)(v10 + v5);
    v13 = *(unsigned __int8 *)(v11 + v9);
    --v5;
    --v9;
    if (v12 != v13)
      return 0;
  }
  return v9 == 0;
}

uint64_t quasar::replaceAll(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21[3];

  v3 = *(_QWORD *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v3 = a2;
    v4 = *(unsigned __int8 *)(a2 + 23);
  }
  v5 = a3[23];
  v6 = *((_QWORD *)a3 + 1);
  if (v5 >= 0)
  {
    v7 = v5;
  }
  else
  {
    a3 = *(char **)a3;
    v7 = v6;
  }
  v8 = *(char *)(result + 23);
  if (v8 >= 0)
    v9 = (_BYTE *)result;
  else
    v9 = *(_BYTE **)result;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(result + 23);
  else
    v10 = *(_QWORD *)(result + 8);
  if (v10)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = v3 + v4;
    v13 = &a3[v7];
    v14 = &v9[v10];
    v15 = v4 - 1;
    for (i = v10 - 1; ; --i)
    {
      v17 = 0;
      while (v9[v17] == *(_BYTE *)(v3 + v17))
      {
        v18 = v17 + 1;
        if (i != v17)
        {
          v11 = v15 == v17++;
          if (!v11)
            continue;
        }
        v19 = v3 + v18;
        v20 = &v9[v18];
        goto LABEL_25;
      }
      v19 = v3 + v17;
      v20 = &v9[v17];
LABEL_25:
      if (v19 == v12)
        break;
      if (++v9 == v14)
        return result;
    }
    if (v9 != v20)
    {
      v21[0] = v3;
      v21[1] = v12;
      return boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(result, v21, a3, v13, v9, v20, a3, v13);
    }
  }
  return result;
}

void quasar::replaceFirst(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = (uint64_t *)*a2;
  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
  }
  else
  {
    v3 = a2;
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (char *)a3;
  else
    v6 = *(char **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = a1;
  else
    v9 = *(_QWORD *)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (v10)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = (uint64_t)v3 + v4;
    v13 = &v6[v7];
    v14 = v9 + v10;
    v15 = v4 - 1;
    for (i = v10 - 1; ; --i)
    {
      v17 = 0;
      while (*(unsigned __int8 *)(v9 + v17) == *((unsigned __int8 *)v3 + v17))
      {
        v18 = v17 + 1;
        if (i != v17)
        {
          v11 = v15 == v17++;
          if (!v11)
            continue;
        }
        v19 = (uint64_t)v3 + v18;
        v20 = v9 + v18;
        goto LABEL_28;
      }
      v19 = (uint64_t)v3 + v17;
      v20 = v9 + v17;
LABEL_28:
      if (v19 == v12)
        break;
      if (++v9 == v14)
        return;
    }
    if (v9 != v20)
      boost::algorithm::detail::replace_native_helper<true>::operator()<std::string,std::__wrap_iter<char const*>>((uint64_t)&v21, (std::string *)a1, v9, v20, v6, v13);
  }
}

void quasar::replaceLast(std::string *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  char *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  std::string::size_type size;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = (uint64_t *)*a2;
  v5 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2;
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  v6 = *(char *)(a3 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  v9 = *(unsigned __int8 *)(a3 + 23);
  if (v7)
    v9 = *(_QWORD *)(a3 + 8);
  v10 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = v10 < 0;
  v12 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  if (v10 >= 0)
    v12 = (uint64_t *)a1;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v11)
    size = a1->__r_.__value_.__l.__size_;
  v14 = (uint64_t)v12 + size;
  if (v5)
  {
    v15 = 1;
    v16 = v14;
    while ((uint64_t *)v16 != v12)
    {
      v17 = v16--;
      v18 = v14;
      v19 = v4;
      if (v16 != v14)
      {
        v20 = 0;
        v19 = (uint64_t *)((char *)v4 + v15);
        while (1)
        {
          v21 = v17 + v20;
          if (v5 == v20)
            break;
          if (*(unsigned __int8 *)(v21 - 1) != *((unsigned __int8 *)v4 + v20))
          {
            v19 = (uint64_t *)((char *)v4 + v20);
            v18 = v17 + v20 - 1;
            goto LABEL_22;
          }
          if (v15 == ++v20)
          {
            v18 = v14;
            goto LABEL_22;
          }
        }
        v18 = v21 - 1;
        goto LABEL_26;
      }
LABEL_22:
      ++v15;
      if (v19 == (uint64_t *)((char *)v4 + v5))
        goto LABEL_26;
    }
  }
  v18 = v14;
  v16 = v14;
LABEL_26:
  if (v16 != v18)
    boost::algorithm::detail::replace_native_helper<true>::operator()<std::string,std::__wrap_iter<char const*>>((uint64_t)&v22, a1, v16, v18, v8, &v8[v9]);
}

uint64_t quasar::eraseAll(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[3];

  v2 = *(_QWORD *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v2 = a2;
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  v4 = *(char *)(result + 23);
  v5 = *(_QWORD *)(result + 8);
  if (v4 >= 0)
    v6 = (_BYTE *)result;
  else
    v6 = *(_BYTE **)result;
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(result + 23);
  if (v5)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = v2 + v3;
    v9 = &v6[v5];
    v10 = v3 - 1;
    for (i = v5 - 1; ; --i)
    {
      v12 = 0;
      while (v6[v12] == *(_BYTE *)(v2 + v12))
      {
        v13 = v12 + 1;
        if (i != v12)
        {
          v7 = v10 == v12++;
          if (!v7)
            continue;
        }
        v14 = v2 + v13;
        v15 = (uint64_t)&v6[v13];
        goto LABEL_21;
      }
      v14 = v2 + v12;
      v15 = (uint64_t)&v6[v12];
LABEL_21:
      if (v14 == v8)
        break;
      if (++v6 == v9)
        return result;
    }
    if (v6 != (_BYTE *)v15)
    {
      v16[0] = v2;
      v16[1] = v8;
      return boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>(result, v16, v6, v15);
    }
  }
  return result;
}

void quasar::toUpper(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  v5 = (_BYTE *)(a2 + v3);
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  if (v4 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  while (v7 != v6)
  {
    *v7 = __toupper((char)*v7);
    ++v7;
  }
}

void sub_1ADE5B63C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::toUpper(uint64_t a1@<X0>, const std::locale *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  int *v8;
  std::wstring *v9;
  std::wstring *p_p;
  std::locale::id *v11;
  uint64_t v12;
  const std::locale::facet *v13;
  std::wstring::size_type size;
  char *v15;
  std::locale v16;
  std::wstring __p;

  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (int *)a1;
  else
    v8 = *(int **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(a3, v8, (int *)((char *)v8 + v7), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = (std::wstring *)((char *)&__p + 4 * HIBYTE(__p.__r_.__value_.__r.__words[2]));
  else
    v9 = (std::wstring *)(__p.__r_.__value_.__r.__words[0] + 4 * __p.__r_.__value_.__l.__size_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  std::locale::locale(&v16, a2);
  if (p_p != v9)
  {
    v11 = (std::locale::id *)MEMORY[0x1E0DE4A98];
    do
    {
      v12 = p_p->__r_.__value_.__s.__data_[0];
      v13 = std::locale::use_facet(&v16, v11);
      p_p->__r_.__value_.__s.__data_[0] = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, v12);
      p_p = (std::wstring *)((char *)p_p + 4);
    }
    while (p_p != v9);
  }
  std::locale::~locale(&v16);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = (char *)&__p;
  else
    v15 = (char *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(a3, v15, &v15[4 * size], a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE5B770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::toLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  v5 = (_BYTE *)(a2 + v3);
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  if (v4 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  while (v7 != v6)
  {
    *v7 = __tolower((char)*v7);
    ++v7;
  }
}

void sub_1ADE5B820(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::toLower(uint64_t a1@<X0>, const std::locale *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  int *v8;
  std::wstring *v9;
  std::wstring *p_p;
  std::locale::id *v11;
  uint64_t v12;
  const std::locale::facet *v13;
  std::wstring::size_type size;
  char *v15;
  std::locale v16;
  std::wstring __p;

  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (int *)a1;
  else
    v8 = *(int **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::from_bytes(a3, v8, (int *)((char *)v8 + v7), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = (std::wstring *)((char *)&__p + 4 * HIBYTE(__p.__r_.__value_.__r.__words[2]));
  else
    v9 = (std::wstring *)(__p.__r_.__value_.__r.__words[0] + 4 * __p.__r_.__value_.__l.__size_);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstring *)__p.__r_.__value_.__r.__words[0];
  std::locale::locale(&v16, a2);
  if (p_p != v9)
  {
    v11 = (std::locale::id *)MEMORY[0x1E0DE4A98];
    do
    {
      v12 = p_p->__r_.__value_.__s.__data_[0];
      v13 = std::locale::use_facet(&v16, v11);
      p_p->__r_.__value_.__s.__data_[0] = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].~facet)(v13, v12);
      p_p = (std::wstring *)((char *)p_p + 4);
    }
    while (p_p != v9);
  }
  std::locale::~locale(&v16);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = (char *)&__p;
  else
    v15 = (char *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::to_bytes(a3, v15, &v15[4 * size], a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE5B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::splitStringSimple(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  quasar::split(a1, a2, 1, (uint64_t)a3);
  v4 = *a3;
  if (a3[1] - *a3 == 24)
  {
    if ((*(char *)(v4 + 23) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v4 + 23))
        return;
LABEL_6:
      std::vector<std::string>::__clear[abi:ne180100](a3);
      return;
    }
    if (!*(_QWORD *)(v4 + 8))
      goto LABEL_6;
  }
}

void quasar::splitAndTrim(std::string *__str@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t size;
  unsigned __int8 v7;
  std::string *v8;
  int v9;
  char *v10;
  int64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  std::string::size_type v18;
  std::string *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char *v25;
  int v26;
  int64_t v27;
  char *v28;
  std::string::size_type v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  std::string *v35;
  int64_t v36;
  char *v37;
  char *v38;
  std::string __p;
  char v40;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = size;
  if ((size & 0x80u) == 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v9 = a2[23];
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(char **)a2;
  if (v9 >= 0)
    v11 = a2[23];
  else
    v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size >= v11)
    {
      v33 = (char *)v8 + size;
      v34 = *v10;
      v35 = v8;
      do
      {
        v36 = size - v11;
        if (v36 == -1)
          break;
        v37 = (char *)memchr(v35, v34, v36 + 1);
        if (!v37)
          break;
        v38 = v37;
        if (!memcmp(v37, v10, v11))
        {
          v12 = 0;
          if (v38 != v33)
          {
            v13 = v38 - (char *)v8;
            if (v13 != -1)
              goto LABEL_16;
          }
          goto LABEL_52;
        }
        v35 = (std::string *)(v38 + 1);
        size = v33 - (v38 + 1);
      }
      while (size >= v11);
    }
    v12 = 0;
  }
  else
  {
    v13 = 0;
LABEL_16:
    v12 = 0;
    do
    {
      std::string::basic_string(&__p, __str, v12, v13 - v12, (std::allocator<char> *)&v40);
      quasar::trim(&__p);
      v14 = a3[1];
      if (v14 >= a3[2])
      {
        v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v14 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v14 = v15;
        }
        v16 = v14 + 24;
        a3[1] = v14 + 24;
      }
      a3[1] = v16;
      v17 = a2[23];
      v18 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v18 & 0x80u) == 0)
        v19 = __str;
      else
        v19 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((v18 & 0x80u) != 0)
        v18 = __str->__r_.__value_.__l.__size_;
      if (v17 >= 0)
        v20 = a2[23];
      else
        v20 = *((_QWORD *)a2 + 1);
      v12 = v20 + v13;
      if (v17 >= 0)
        v21 = a2;
      else
        v21 = *(char **)a2;
      if (v18 >= v12)
      {
        v13 += v20;
        if (v20)
        {
          v22 = (char *)v19 + v12;
          v23 = (char *)v19 + v18;
          v24 = v18 - v12;
          if (v24 >= v20)
          {
            v26 = *v21;
            do
            {
              v27 = v24 - v20;
              if (v27 == -1)
                break;
              v28 = (char *)memchr(v22, v26, v27 + 1);
              if (!v28)
                break;
              v25 = v28;
              if (!memcmp(v28, v21, v20))
                goto LABEL_39;
              v22 = v25 + 1;
              v24 = v23 - (v25 + 1);
            }
            while (v24 >= v20);
          }
          v25 = v23;
LABEL_39:
          if (v25 == v23)
            v13 = -1;
          else
            v13 = v25 - (char *)v19;
        }
      }
      else
      {
        v13 = -1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    while (v13 != -1);
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
LABEL_52:
  if ((v7 & 0x80u) == 0)
    v29 = v7;
  else
    v29 = __str->__r_.__value_.__l.__size_;
  std::string::basic_string(&__p, __str, v12, v29, (std::allocator<char> *)&v40);
  quasar::trim(&__p);
  v30 = a3[1];
  if (v30 >= a3[2])
  {
    v32 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v30 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v30 = v31;
    }
    v32 = v30 + 24;
    a3[1] = v30 + 24;
  }
  a3[1] = v32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE5BCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;

  v14[1] = v15;
  if (a14 < 0)
    operator delete(__p);
  __p = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::splitAndTrimNoEmpty(const std::string *__s, char *a2, uint64_t a3)
{
  int v6;
  int64_t size;
  const std::string *v8;
  int v9;
  char *v10;
  int64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  int v16;
  std::string::size_type v17;
  const std::string *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  int v25;
  int64_t v26;
  char *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  char v30;
  uint64_t v31;
  char *v32;
  int v33;
  std::string *v34;
  int64_t v35;
  char *v36;
  char *v37;
  std::string __p;
  char v39;

  v6 = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (v6 < 0)
  {
    size = __s->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v8 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s->__r_.__value_.__s + 23))
      return;
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v8 = __s;
  }
  v9 = a2[23];
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(char **)a2;
  if (v9 >= 0)
    v11 = a2[23];
  else
    v11 = *((_QWORD *)a2 + 1);
  if (v11)
  {
    if (size >= v11)
    {
      v32 = (char *)v8 + size;
      v33 = *v10;
      v34 = (std::string *)v8;
      do
      {
        v35 = size - v11;
        if (v35 == -1)
          break;
        v36 = (char *)memchr(v34, v33, v35 + 1);
        if (!v36)
          break;
        v37 = v36;
        if (!memcmp(v36, v10, v11))
        {
          v12 = 0;
          if (v37 != v32)
          {
            v13 = v37 - (char *)v8;
            if (v13 != -1)
              goto LABEL_16;
          }
          goto LABEL_51;
        }
        v34 = (std::string *)(v37 + 1);
        size = v32 - (v37 + 1);
      }
      while (size >= v11);
    }
    v12 = 0;
  }
  else
  {
    v13 = 0;
LABEL_16:
    v12 = 0;
    do
    {
      std::string::basic_string(&__p, __s, v12, v13 - v12, (std::allocator<char> *)&v39);
      quasar::trim(&__p);
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = __p.__r_.__value_.__l.__size_;
      if (v14)
      {
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 48))(v15, &__p);
      }
      v16 = a2[23];
      v17 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
      if ((v17 & 0x80u) == 0)
        v18 = __s;
      else
        v18 = (const std::string *)__s->__r_.__value_.__r.__words[0];
      if ((v17 & 0x80u) != 0)
        v17 = __s->__r_.__value_.__l.__size_;
      if (v16 >= 0)
        v19 = a2[23];
      else
        v19 = *((_QWORD *)a2 + 1);
      v12 = v19 + v13;
      if (v16 >= 0)
        v20 = a2;
      else
        v20 = *(char **)a2;
      if (v17 >= v12)
      {
        v13 += v19;
        if (v19)
        {
          v21 = (char *)v18 + v12;
          v22 = (char *)v18 + v17;
          v23 = v17 - v12;
          if (v23 >= v19)
          {
            v25 = *v20;
            do
            {
              v26 = v23 - v19;
              if (v26 == -1)
                break;
              v27 = (char *)memchr(v21, v25, v26 + 1);
              if (!v27)
                break;
              v24 = v27;
              if (!memcmp(v27, v20, v19))
                goto LABEL_38;
              v21 = v24 + 1;
              v23 = v22 - (v24 + 1);
            }
            while (v23 >= v19);
          }
          v24 = v22;
LABEL_38:
          if (v24 == v22)
            v13 = -1;
          else
            v13 = v24 - (char *)v18;
        }
      }
      else
      {
        v13 = -1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    while (v13 != -1);
    LOBYTE(v6) = *((_BYTE *)&__s->__r_.__value_.__s + 23);
  }
LABEL_51:
  if ((v6 & 0x80u) == 0)
    v28 = v6;
  else
    v28 = __s->__r_.__value_.__l.__size_;
  std::string::basic_string(&__p, __s, v12, v28, (std::allocator<char> *)&v39);
  quasar::trim(&__p);
  v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = __p.__r_.__value_.__l.__size_;
  if (v29)
  {
    v31 = *(_QWORD *)(a3 + 24);
    if (!v31)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 48))(v31, &__p);
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v30 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE5BFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::splitAndTrimNoEmpty(const std::string *a1, char *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E5D3DF08;
  v5[1] = a3;
  v6 = v5;
  quasar::splitAndTrimNoEmpty(a1, a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1ADE5C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::splitAndTrimNoEmpty@<X0>(const std::string *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return quasar::splitAndTrimNoEmpty(a1, a2, (uint64_t)a3);
}

void sub_1ADE5C0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *quasar::removeSpaces@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v9;
  unsigned __int8 v11;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  v11 = 32;
  v5 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v4, (unsigned __int8 *)v4 + size, &v11);
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v7 = (char)v6;
  v8 = (std::string::size_type)a2 + v6;
  if (v7 >= 0)
  {
    v9 = (std::string::size_type)a2;
  }
  else
  {
    v8 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    v9 = a2->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(a2, (std::string::size_type)&v5[-v9], v8 - (_QWORD)v5);
}

void sub_1ADE5C1A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void quasar::copyAndTrim(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  quasar::trim(a2);
}

void sub_1ADE5C278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::copyAndTrimLeft@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD v10[2];
  _QWORD __dst[4];

  __dst[3] = *MEMORY[0x1E0C80C00];
  v5 = *((char *)a2 + 23);
  v6 = v5 < 0;
  v7 = (uint64_t *)*a2;
  if (v5 >= 0)
    v7 = a2;
  v8 = *((unsigned __int8 *)a2 + 23);
  if (v6)
    v8 = a2[1];
  v10[0] = v7;
  v10[1] = (char *)v7 + v8;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)v10);
  result = boost::algorithm::trim_left_copy_if<std::string,boost::algorithm::detail::is_any_ofF<char>>(__dst, a1, a3);
  if (__dst[2] >= 0x11uLL)
  {
    result = (_QWORD *)__dst[0];
    if (__dst[0])
      return (_QWORD *)MEMORY[0x1AF44D160](__dst[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1ADE5C34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char const*>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a11);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::algorithm::trim_left_copy_if<std::string,boost::algorithm::detail::is_any_ofF<char>>@<X0>(_QWORD *__src@<X1>, char *a2@<X0>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  int v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  _QWORD v15[2];
  unint64_t v16;
  uint64_t v17;

  v3 = __src;
  v17 = *MEMORY[0x1E0C80C00];
  v6 = a2[23];
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  if (v6 >= 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  v9 = __src[2];
  v16 = v9;
  v15[0] = 0;
  if (v9 >= 0x11)
  {
    v10 = (_QWORD *)operator new[]();
    v15[0] = v10;
    v3 = (_QWORD *)*v3;
  }
  else
  {
    v10 = v15;
  }
  memcpy(v10, v3, v9);
  if (v8)
  {
    v11 = &v7[v8];
    while (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v15, *v7))
    {
      ++v7;
      if (!--v8)
      {
        v7 = v11;
        break;
      }
    }
  }
  v12 = a2[23];
  if ((v12 & 0x80u) == 0)
    v13 = a2;
  else
    v13 = *(char **)a2;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 1);
  result = std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v7, &v13[v12], &v13[v12] - v7);
  if (v16 >= 0x11)
  {
    result = (_QWORD *)v15[0];
    if (v15[0])
      return (_QWORD *)MEMORY[0x1AF44D160](v15[0], 0x1000C8077774924);
  }
  return result;
}

void sub_1ADE5C4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a11 >= 0x11)
  {
    if (a9)
      MEMORY[0x1AF44D160](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::hasWhitespace(char *a1)
{
  uint64_t v1;
  int v2;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  _BOOL8 result;
  uint64_t v9;
  char *v10;

  v1 = a1[23];
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  v5 = MEMORY[0x1E0C80978];
  do
  {
    v6 = *v4;
    if ((v6 & 0x80000000) != 0)
      v7 = __maskrune(v6, 0x4000uLL);
    else
      v7 = *(_DWORD *)(v5 + 4 * v6 + 60) & 0x4000;
    result = v7 != 0;
    if (v7)
      break;
    ++v4;
    v9 = a1[23];
    v10 = (v9 & 0x80u) == 0 ? a1 : *(char **)a1;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a1 + 1);
  }
  while (v4 != &v10[v9]);
  return result;
}

std::string *quasar::addWord(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)a3;
    else
      v7 = *(const std::string::value_type **)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    std::string::append(this, v7, v8);
  }
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  return std::string::append(this, v10, v11);
}

uint64_t quasar::wordIsNativeScriptForLocale(quasar *this, const char *a2, const char *a3)
{
  int Code;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int v17;
  _QWORD **v18;
  _QWORD *v19;
  _QWORD **v20;
  int v21;
  _QWORD *v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  UChar32 v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  BOOL v38;
  int v39;
  uint64_t *v40;
  _QWORD *v41[2];
  std::vector<unsigned int> v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v43 = 0;
  uloc_addLikelySubtags();
  uloc_getScript();
  memset(&v42, 0, sizeof(v42));
  std::vector<int>::resize(&v42, 0x20uLL);
  Code = uscript_getCode();
  v6 = 0;
  if (v43 <= 0 && Code)
  {
    std::vector<int>::resize(&v42, Code);
    std::set<UScriptCode>::set[abi:ne180100]<std::__wrap_iter<UScriptCode*>>((uint64_t)&v40, (int *)v42.__begin_, (int *)v42.__end_);
    v7 = v41[0];
    if (v41[0])
    {
      v8 = (int *)v41;
      v9 = (int *)v41[0];
      do
      {
        v10 = v9;
        v11 = v8;
        v12 = v9[7];
        if (v12 >= 74)
          v8 = v9;
        else
          v9 += 2;
        v9 = *(int **)v9;
      }
      while (v9);
      if (v8 != (int *)v41)
      {
        if (v12 < 74)
          v10 = v11;
        if (v10[7] < 75)
          goto LABEL_24;
      }
      v13 = (int *)v41;
      v14 = (int *)v41[0];
      do
      {
        v15 = v14;
        v16 = v13;
        v17 = v14[7];
        if (v17 >= 73)
          v13 = v14;
        else
          v14 += 2;
        v14 = *(int **)v14;
      }
      while (v14);
      if (v13 != (int *)v41)
      {
        if (v17 < 73)
          v15 = v16;
        if (v15[7] <= 73)
        {
LABEL_24:
          v39 = 17;
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
          v7 = v41[0];
        }
      }
      if (v7)
      {
        v18 = v41;
        do
        {
          v19 = v7;
          v20 = v18;
          v21 = *((_DWORD *)v7 + 7);
          v22 = v7 + 1;
          if (v21 >= 105)
          {
            v22 = v19;
            v18 = (_QWORD **)v19;
          }
          v7 = (_QWORD *)*v22;
        }
        while (v7);
        if (v18 != v41)
        {
          v23 = (int *)(v21 >= 105 ? v19 : v20);
          if (v23[7] <= 105)
          {
            v39 = 20;
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
            v39 = 22;
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
            v39 = 17;
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v40, &v39, &v39);
          }
        }
      }
    }
    v24 = strlen((const char *)this);
    if (v24 >= 1)
    {
      LODWORD(v25) = 0;
      while (1)
      {
        v26 = (int)v25;
        v27 = *((char *)this + (int)v25);
        v25 = (int)v25 + 1;
        v28 = v27;
        if (v27 < 0)
          break;
LABEL_61:
        if (!u_isUWhiteSpace(v28))
        {
          v35 = v40;
          if (v40 == (uint64_t *)v41)
            goto LABEL_75;
          while (!uscript_hasScript())
          {
            v36 = (uint64_t *)v35[1];
            if (v36)
            {
              do
              {
                v37 = v36;
                v36 = (uint64_t *)*v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                v37 = (uint64_t *)v35[2];
                v38 = *v37 == (_QWORD)v35;
                v35 = v37;
              }
              while (!v38);
            }
            v35 = v37;
            if (v37 == (uint64_t *)v41)
              goto LABEL_75;
          }
          if (v35 == (uint64_t *)v41)
          {
LABEL_75:
            v6 = 0;
            goto LABEL_77;
          }
        }
        if ((int)v25 >= v24)
          goto LABEL_76;
      }
      if ((_DWORD)v25 != v24)
      {
        if (v27 < 0xE0u)
        {
          if (v27 >= 0xC2u)
          {
            v31 = v27 & 0x1F;
LABEL_49:
            v32 = *((unsigned __int8 *)this + (int)v25) ^ 0x80;
            v33 = v32 | (v31 << 6);
            if (v32 <= 0x3F)
              v28 = v33;
            else
              v28 = -1;
            if (v32 <= 0x3F)
              LODWORD(v25) = v25 + 1;
            goto LABEL_61;
          }
LABEL_60:
          v28 = -1;
          goto LABEL_61;
        }
        if (v27 > 0xEFu)
        {
          if (v27 > 0xF4u)
            goto LABEL_60;
          v34 = *((unsigned __int8 *)this + v25);
          if (((byte_1AE18506E[v34 >> 4] >> (v27 + 16)) & 1) == 0)
            goto LABEL_60;
          v25 = v26 + 2;
          if ((_DWORD)v26 + 2 == v24)
            goto LABEL_40;
          v30 = *((unsigned __int8 *)this + v25) ^ 0x80;
          if (v30 > 0x3F)
          {
            v28 = -1;
            goto LABEL_61;
          }
          LODWORD(v29) = v34 & 0x3F | ((v28 - 240) << 6);
        }
        else
        {
          v29 = v27 & 0xF;
          if (((a00000000000000[v29] >> (*((_BYTE *)this + v25) >> 5)) & 1) == 0)
            goto LABEL_60;
          v30 = *((_BYTE *)this + v25) & 0x3F;
        }
        LODWORD(v25) = v25 + 1;
        if ((_DWORD)v25 != v24)
        {
          v31 = v30 | ((_DWORD)v29 << 6);
          goto LABEL_49;
        }
      }
LABEL_40:
      v28 = -1;
      LODWORD(v25) = v24;
      goto LABEL_61;
    }
LABEL_76:
    v6 = 1;
LABEL_77:
    std::__tree<int>::destroy((uint64_t)&v40, v41[0]);
  }
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
  return v6;
}

void sub_1ADE5CA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::isMatchWithWildcard(std::string *__str, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  int v11;
  std::string *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(v3 + 23);
    v8 = *(_QWORD *)(v3 + 8);
    if ((v7 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v3 + 23);
    else
      v9 = *(_QWORD *)(v3 + 8);
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v11 = (char)size;
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (v9 != size)
      goto LABEL_17;
    v12 = v11 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((v7 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v3 + 23))
      return 1;
    v13 = 0;
    while (*(unsigned __int8 *)(v3 + v13) == v12->__r_.__value_.__s.__data_[v13])
    {
      if (v7 == ++v13)
        return 1;
    }
LABEL_17:
    if ((v7 & 0x80) != 0)
      goto LABEL_22;
    v14 = (_BYTE *)v3;
    if ((_DWORD)v7 == 1)
      goto LABEL_24;
    if ((a3 & 1) != 0)
      goto LABEL_27;
LABEL_34:
    v3 += 24;
    if (v3 == v4)
      return 0;
  }
  if (!memcmp(*(const void **)v3, v12, *(_QWORD *)(v3 + 8)))
    return 1;
LABEL_22:
  if (v8 != 1)
  {
    v15 = v8;
    if ((a3 & 1) != 0)
      goto LABEL_29;
    goto LABEL_34;
  }
  v14 = *(_BYTE **)v3;
LABEL_24:
  if (*v14 == 42)
    return 1;
  if ((a3 & 1) == 0)
    goto LABEL_34;
  v15 = v8;
  if ((v7 & 0x80) != 0)
    goto LABEL_29;
LABEL_27:
  v15 = v7;
LABEL_29:
  v16 = v15 - 1;
  if ((v7 & 0x80) != 0)
  {
    v17 = *(unsigned __int8 *)(*(_QWORD *)v3 + v16);
  }
  else
  {
    v17 = *(unsigned __int8 *)(v3 + v16);
    v8 = v7;
  }
  if (v17 != 42 || std::string::compare((const std::string *)v3, 0, v8 - 1, __str, 0, v8 - 1))
    goto LABEL_34;
  return 1;
}

std::string *quasar::utf8::substr@<X0>(std::string *__str@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  std::string::size_type size;
  std::string::size_type v11;
  int v12;
  int v13;
  std::string *v14;
  std::string::value_type *v15;
  int v16;
  uint64_t v17;
  std::string::size_type v18;
  int v19;
  int v20;
  int v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v6 = a2 & ~(a2 >> 31);
  v7 = ((a2 & (a2 >> 31)) + a3) & ~(((a2 & (a2 >> 31)) + a3) >> 31);
  v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v9 = v8;
  size = __str->__r_.__value_.__l.__size_;
  if ((v8 & 0x80u) == 0)
    v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v11 = __str->__r_.__value_.__l.__size_;
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((v8 & 0x80u) == 0)
      v14 = __str;
    v15 = &v14->__r_.__value_.__s.__data_[1];
    v16 = -1;
    while (1)
    {
      if (v12 == v6)
        v16 = v13;
      if (v7 == v12 - v6)
        break;
      ++v12;
      v17 = v13;
      v18 = v13 + 1;
      if (v11 > v18)
        LODWORD(v18) = v11;
      while (1)
      {
        v13 = v17 + 1;
        if (v11 <= v17 + 1)
          break;
        v19 = v15[v17++] & 0xC0;
        if (v19 != 128)
          goto LABEL_17;
      }
      v13 = v18;
LABEL_17:
      if (v11 <= v13)
      {
        v20 = -1;
        goto LABEL_23;
      }
    }
    v12 = v6 + v7;
    v20 = v13;
LABEL_23:
    if (v7 == v12 - v6)
      v21 = v13;
    else
      v21 = v20;
    if ((v16 & 0x80000000) == 0)
    {
      if ((v21 & 0x80000000) == 0)
        return std::string::basic_string(a4, __str, v16, v21 - v16, (std::allocator<char> *)&v23);
      goto LABEL_35;
    }
  }
  else if (v7 + v6)
  {
    v21 = -1;
  }
  else
  {
    v21 = 0;
  }
  if (quasar::gLogLevel >= 2)
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Incorrect substr range start, or incorrect UTF8 string", 54);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v23);
    v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    size = __str->__r_.__value_.__l.__size_;
    v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if ((v9 & 0x80u) == 0)
    v16 = v8;
  else
    v16 = size;
  if (v21 < 0)
  {
LABEL_35:
    if (quasar::gLogLevel >= 2)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Incorrect substr range end, or incorrect UTF8 string", 52);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v23);
      v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      size = __str->__r_.__value_.__l.__size_;
    }
    if ((v9 & 0x80u) == 0)
      v21 = v9;
    else
      v21 = size;
  }
  return std::string::basic_string(a4, __str, v16, v21 - v16, (std::allocator<char> *)&v23);
}

void sub_1ADE5CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::utf8::codepointsCtr@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, unint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char v12;
  char *v13;
  __int128 v14;
  uint64_t v15;

  v5 = a5;
  LODWORD(a5) = a4 - a3;
  if (a4 < (int)a3 || ((a4 | a3) & 0x80000000) != 0)
  {
    v13 = "Provided byte range is incorrect";
    goto LABEL_23;
  }
  if (a2 < a3)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  if (a2 - a3 >= (int)a5)
    a5 = (int)a5;
  else
    a5 = a2 - a3;
  if (a5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *((_BYTE *)result + a3 + v6);
      if ((v9 & 0xF8) == 0xF0)
      {
        v10 = 4;
      }
      else
      {
        v11 = v9 & 0xF0;
        if ((v9 & 0xE0) == 0xC0)
          v10 = 2;
        else
          v10 = 1;
        if (v11 == 224)
          v10 = 3;
      }
      v6 = (v7 + v10);
      ++v8;
      v7 = v6;
    }
    while (a5 > v6);
    if (a5 != v6)
    {
      v13 = "Byte-range queried for number of codepoints seems to intersect a codepoint";
LABEL_23:
      result = std::string::basic_string[abi:ne180100]<0>(&v14, v13);
      v12 = 0;
      *(_OWORD *)v5 = v14;
      *(_QWORD *)(v5 + 16) = v15;
      goto LABEL_24;
    }
    *(_DWORD *)v5 = v8;
  }
  else
  {
    *(_DWORD *)v5 = 0;
  }
  v12 = 1;
LABEL_24:
  *(_BYTE *)(v5 + 24) = v12;
  return result;
}

void quasar::utf8::utf8ToUtf16(char *src@<X0>, uint64_t srcLength@<X1>, uint64_t a3@<X8>)
{
  int32_t v4;
  const char *v7;
  std::string *v8;
  std::string::size_type v9;
  unsigned __int8 v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  std::string *v14;
  std::string::size_type v15;
  unsigned __int8 v16;
  std::string::size_type v17;
  std::string dest;
  UErrorCode pErrorCode[2];
  std::string v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  if (!srcLength)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
LABEL_17:
    *(_BYTE *)(a3 + 24) = 1;
    return;
  }
  v4 = srcLength;
  *(_QWORD *)pErrorCode = 0;
  u_strFromUTF8(0, 0, (int32_t *)pErrorCode, src, srcLength, &pErrorCode[1]);
  if (pErrorCode[1] != U_BUFFER_OVERFLOW_ERROR && pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the string converting to UTF16: ");
    v13 = u_errorName(pErrorCode[1]);
    v14 = std::string::append(&dest, v13);
    v15 = v14->__r_.__value_.__r.__words[0];
    v22[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v20.__r_.__value_.__r.__words[0] = v22[0];
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)v22 + 7);
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v22 + 7);
    v17 = v20.__r_.__value_.__r.__words[0];
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v17;
    *(_WORD *)(a3 + 23) = v16;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  LOWORD(v20.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, pErrorCode[0], &v20);
  pErrorCode[1] = U_ZERO_ERROR;
  u_strFromUTF8((UChar *)dest.__r_.__value_.__l.__data_, pErrorCode[0], (int32_t *)pErrorCode, src, v4, &pErrorCode[1]);
  if (pErrorCode[1] < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a3 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "Unable to convert UTF8 string to UTF16: ");
  v7 = u_errorName(pErrorCode[1]);
  v8 = std::string::append(&v20, v7);
  v9 = v8->__r_.__value_.__r.__words[0];
  v21[0] = v8->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
  v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v22[0] = v21[0];
  *(_QWORD *)((char *)v22 + 7) = *(_QWORD *)((char *)v21 + 7);
  *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v21 + 7);
  v11 = v22[0];
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v11;
  *(_WORD *)(a3 + 23) = v10;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v12 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v12);
  }
}

void sub_1ADE5D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UChar *v3;
  uint64_t v4;
  int32_t v6;
  int32_t v8;
  const char *v9;
  std::string *v10;
  std::string::size_type v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  std::string *v16;
  std::string::size_type v17;
  unsigned __int8 v18;
  std::string::size_type v19;
  std::string dest;
  UErrorCode pErrorCode;
  std::string v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v3 = *(const UChar **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_17:
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  pErrorCode = U_ZERO_ERROR;
  v6 = u_strToLower(0, 0, v3, (unint64_t)(v4 - (_QWORD)v3) >> 1, "", &pErrorCode);
  if (pErrorCode != U_BUFFER_OVERFLOW_ERROR && pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the converted to lower case string: ");
    v15 = u_errorName(pErrorCode);
    v16 = std::string::append(&dest, v15);
    v17 = v16->__r_.__value_.__r.__words[0];
    v24[0] = v16->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__r.__words[0] = v24[0];
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)v24 + 7);
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v24 + 7);
    v19 = v22.__r_.__value_.__r.__words[0];
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 23) = v18;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  v8 = v6;
  LOWORD(v22.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, v6, &v22);
  pErrorCode = U_ZERO_ERROR;
  u_strToLower((UChar *)dest.__r_.__value_.__l.__data_, v8, *(const UChar **)a1, (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1, "", &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a2 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Unable to convert string to lower case:");
  v9 = u_errorName(pErrorCode);
  v10 = std::string::append(&v22, v9);
  v11 = v10->__r_.__value_.__r.__words[0];
  v23[0] = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v24[0] = v23[0];
  *(_QWORD *)((char *)v24 + 7) = *(_QWORD *)((char *)v23 + 7);
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v23 + 7);
  v13 = v24[0];
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 23) = v12;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v14 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v14);
  }
}

void sub_1ADE5D384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToUpper(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UChar *v3;
  uint64_t v4;
  int32_t v6;
  int32_t v8;
  const char *v9;
  std::string *v10;
  std::string::size_type v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  std::string *v16;
  std::string::size_type v17;
  unsigned __int8 v18;
  std::string::size_type v19;
  std::string dest;
  UErrorCode pErrorCode;
  std::string v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v3 = *(const UChar **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_17:
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  pErrorCode = U_ZERO_ERROR;
  v6 = u_strToUpper(0, 0, v3, (unint64_t)(v4 - (_QWORD)v3) >> 1, "", &pErrorCode);
  if (pErrorCode != U_BUFFER_OVERFLOW_ERROR && pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the converted to upper case string: ");
    v15 = u_errorName(pErrorCode);
    v16 = std::string::append(&dest, v15);
    v17 = v16->__r_.__value_.__r.__words[0];
    v24[0] = v16->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__r.__words[0] = v24[0];
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)v24 + 7);
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v24 + 7);
    v19 = v22.__r_.__value_.__r.__words[0];
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 23) = v18;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  v8 = v6;
  LOWORD(v22.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, v6, &v22);
  pErrorCode = U_ZERO_ERROR;
  u_strToUpper((UChar *)dest.__r_.__value_.__l.__data_, v8, *(const UChar **)a1, (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1, "", &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a2 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Unable to convert string to upper case:");
  v9 = u_errorName(pErrorCode);
  v10 = std::string::append(&v22, v9);
  v11 = v10->__r_.__value_.__r.__words[0];
  v23[0] = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v24[0] = v23[0];
  *(_QWORD *)((char *)v24 + 7) = *(_QWORD *)((char *)v23 + 7);
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v23 + 7);
  v13 = v24[0];
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 23) = v12;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v14 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v14);
  }
}

void sub_1ADE5D5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToTitle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UChar *v3;
  uint64_t v4;
  int32_t v6;
  int32_t v8;
  const char *v9;
  std::string *v10;
  std::string::size_type v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  std::string *v16;
  std::string::size_type v17;
  unsigned __int8 v18;
  std::string::size_type v19;
  std::string dest;
  UErrorCode pErrorCode;
  std::string v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v3 = *(const UChar **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
LABEL_17:
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  pErrorCode = U_ZERO_ERROR;
  v6 = u_strToTitle(0, 0, v3, (unint64_t)(v4 - (_QWORD)v3) >> 1, 0, "", &pErrorCode);
  if (pErrorCode != U_BUFFER_OVERFLOW_ERROR && pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "Unable to calculate size of the converted to title case string: ");
    v15 = u_errorName(pErrorCode);
    v16 = std::string::append(&dest, v15);
    v17 = v16->__r_.__value_.__r.__words[0];
    v24[0] = v16->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__r.__words[0] = v24[0];
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)v24 + 7);
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v24 + 7);
    v19 = v22.__r_.__value_.__r.__words[0];
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 23) = v18;
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)dest.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return;
  }
  v8 = v6;
  LOWORD(v22.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned short>::vector(&dest, v6, &v22);
  pErrorCode = U_ZERO_ERROR;
  u_strToTitle((UChar *)dest.__r_.__value_.__l.__data_, v8, *(const UChar **)a1, (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1, 0, "", &pErrorCode);
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR)
  {
    *(std::string *)a2 = dest;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Unable to convert string to title case:");
  v9 = u_errorName(pErrorCode);
  v10 = std::string::append(&v22, v9);
  v11 = v10->__r_.__value_.__r.__words[0];
  v23[0] = v10->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v24[0] = v23[0];
  *(_QWORD *)((char *)v24 + 7) = *(_QWORD *)((char *)v23 + 7);
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v23 + 7);
  v13 = v24[0];
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_WORD *)(a2 + 23) = v12;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v14 = (void *)dest.__r_.__value_.__r.__words[0];
  if (dest.__r_.__value_.__r.__words[0])
  {
    dest.__r_.__value_.__l.__size_ = dest.__r_.__value_.__r.__words[0];
LABEL_15:
    operator delete(v14);
  }
}

void sub_1ADE5D844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::utf8::utf16ToUtf8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const UChar *v3;
  uint64_t v4;
  std::string *p_p;
  const char *v8;
  std::string *v9;
  std::string::size_type v10;
  unsigned __int8 v11;
  uint64_t v12;
  const char *v13;
  std::string *v14;
  std::string::size_type v15;
  unsigned __int8 v16;
  std::string::size_type v17;
  std::string __p;
  UErrorCode pErrorCode[2];
  std::string v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v3 = *(const UChar **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    goto LABEL_17;
  }
  *(_QWORD *)pErrorCode = 0;
  u_strToUTF8(0, 0, (int32_t *)pErrorCode, v3, (unint64_t)(v4 - (_QWORD)v3) >> 1, &pErrorCode[1]);
  if (pErrorCode[1] == U_BUFFER_OVERFLOW_ERROR || pErrorCode[1] < U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::string::basic_string[abi:ne180100](&__p, pErrorCode[0], 0);
    pErrorCode[1] = U_ZERO_ERROR;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    u_strToUTF8((char *)p_p, pErrorCode[0], (int32_t *)pErrorCode, *(const UChar **)a1, (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1, &pErrorCode[1]);
    if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "Unable to convert UTF16 string to UTF8: ");
      v8 = u_errorName(pErrorCode[1]);
      v9 = std::string::append(&v20, v8);
      v10 = v9->__r_.__value_.__r.__words[0];
      v21[0] = v9->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v22[0] = v21[0];
      *(_QWORD *)((char *)v22 + 7) = *(_QWORD *)((char *)v21 + 7);
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v21 + 7);
      v12 = v22[0];
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v12;
      *(_WORD *)(a2 + 23) = v11;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
    *(std::string *)a2 = __p;
LABEL_17:
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to calculate size of the string converting to UTF8:");
  v13 = u_errorName(pErrorCode[1]);
  v14 = std::string::append(&__p, v13);
  v15 = v14->__r_.__value_.__r.__words[0];
  v22[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v20.__r_.__value_.__r.__words[0] = v22[0];
  *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)v22 + 7);
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v22 + 7);
  v17 = v20.__r_.__value_.__r.__words[0];
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v17;
  *(_WORD *)(a2 + 23) = v16;
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE5DA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::utf8::convertToLowerCase@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  quasar::utf8::utf8ToUtf16(a1, a2, (uint64_t)&v5);
  if (!v7)
  {
    v8 = v5;
    v9 = v6;
    v6 = 0;
    v5 = 0uLL;
    v10 = 0;
    goto LABEL_5;
  }
  quasar::utf8::utf16ToLower((uint64_t)&v5, (uint64_t)&v8);
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = v9;
    v9 = 0;
    v8 = 0uLL;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_6;
  }
  quasar::utf8::utf16ToUtf8((uint64_t)&v8, a3);
LABEL_6:
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v8);
  return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v5);
}

void sub_1ADE5DB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a13);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::utf8::convertToUpperCase@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  quasar::utf8::utf8ToUtf16(a1, a2, (uint64_t)&v5);
  if (!v7)
  {
    v8 = v5;
    v9 = v6;
    v6 = 0;
    v5 = 0uLL;
    v10 = 0;
    goto LABEL_5;
  }
  quasar::utf8::utf16ToUpper((uint64_t)&v5, (uint64_t)&v8);
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = v9;
    v9 = 0;
    v8 = 0uLL;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_6;
  }
  quasar::utf8::utf16ToUtf8((uint64_t)&v8, a3);
LABEL_6:
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v8);
  return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v5);
}

void sub_1ADE5DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a13);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::utf8::convertToTitleCase@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  quasar::utf8::utf8ToUtf16(a1, a2, (uint64_t)&v5);
  if (!v7)
  {
    v8 = v5;
    v9 = v6;
    v6 = 0;
    v5 = 0uLL;
    v10 = 0;
    goto LABEL_5;
  }
  quasar::utf8::utf16ToTitle((uint64_t)&v5, (uint64_t)&v8);
  if (!v10)
  {
LABEL_5:
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = v9;
    v9 = 0;
    v8 = 0uLL;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_6;
  }
  quasar::utf8::utf16ToUtf8((uint64_t)&v8, a3);
LABEL_6:
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v8);
  return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v5);
}

void sub_1ADE5DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a13);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::utf8::convertToLowerCaseOrEmpty(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  _OWORD v6[17];
  __int128 v7;
  int64_t v8;
  char v9;

  quasar::utf8::convertToLowerCase(a1, a2, (uint64_t)&v7);
  if (v9)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      a3->__r_.__value_.__r.__words[2] = v8;
      return;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    if (v8 >= 0)
      v4 = &v7;
    else
      v4 = (__int128 *)v7;
    if (v8 >= 0)
      v5 = HIBYTE(v8);
    else
      v5 = *((_QWORD *)&v7 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (SHIBYTE(v8) < 0)
LABEL_15:
    operator delete((void *)v7);
}

void sub_1ADE5DE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v9 - 25) < 0)
    operator delete(*(void **)(v9 - 48));
  _Unwind_Resume(a1);
}

void quasar::utf8::convertToUpperCaseOrEmpty(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  _OWORD v6[17];
  __int128 v7;
  int64_t v8;
  char v9;

  quasar::utf8::convertToUpperCase(a1, a2, (uint64_t)&v7);
  if (v9)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      a3->__r_.__value_.__r.__words[2] = v8;
      return;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    if (v8 >= 0)
      v4 = &v7;
    else
      v4 = (__int128 *)v7;
    if (v8 >= 0)
      v5 = HIBYTE(v8);
    else
      v5 = *((_QWORD *)&v7 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (SHIBYTE(v8) < 0)
LABEL_15:
    operator delete((void *)v7);
}

void sub_1ADE5DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v9 - 25) < 0)
    operator delete(*(void **)(v9 - 48));
  _Unwind_Resume(a1);
}

void quasar::utf8::convertToTitleCaseOrEmpty(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  _OWORD v6[17];
  __int128 v7;
  int64_t v8;
  char v9;

  quasar::utf8::convertToTitleCase(a1, a2, (uint64_t)&v7);
  if (v9)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      a3->__r_.__value_.__r.__words[2] = v8;
      return;
    }
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
    goto LABEL_15;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    if (v8 >= 0)
      v4 = &v7;
    else
      v4 = (__int128 *)v7;
    if (v8 >= 0)
      v5 = HIBYTE(v8);
    else
      v5 = *((_QWORD *)&v7 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v6);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (SHIBYTE(v8) < 0)
LABEL_15:
    operator delete((void *)v7);
}

void sub_1ADE5E05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  if (*(char *)(v9 - 25) < 0)
    operator delete(*(void **)(v9 - 48));
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  const std::locale *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  unsigned __int8 *v8;
  std::locale::id *v9;
  std::string *v10;
  uint64_t v11;
  const std::locale::facet *v12;
  std::string::size_type v13;
  int locale;
  std::locale v15;
  std::locale v16;
  std::locale v17;
  int v18;
  std::locale v19;

  v4 = a2 + 1;
  LODWORD(v16.__locale_) = a2->__locale_;
  std::locale::locale(&v17, a2 + 1);
  boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v16);
  std::locale::~locale(&v17);
  locale = (int)a2->__locale_;
  std::locale::locale(&v15, v4);
  v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v18 = locale;
  std::locale::locale(&v19, &v15);
  if (size)
  {
    v8 = (unsigned __int8 *)v6 + size;
    v9 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v10 = v6;
    while (1)
    {
      v11 = v10->__r_.__value_.__s.__data_[0];
      v12 = std::locale::use_facet(&v19, v9);
      if ((v11 & 0x80) != 0 || (*((_DWORD *)&v12[1].~facet + v11) & v18) == 0)
        break;
      v10 = (std::string *)((char *)v10 + 1);
      if (!--size)
      {
        v10 = (std::string *)v8;
        break;
      }
    }
  }
  else
  {
    v10 = v6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = (std::string::size_type)a1;
  else
    v13 = a1->__r_.__value_.__r.__words[0];
  std::string::erase(a1, (std::string::size_type)v6 - v13, (char *)v10 - (char *)v6);
  std::locale::~locale(&v19);
  std::locale::~locale(&v15);
}

void sub_1ADE5E1E0(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;

  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, const std::locale *a2)
{
  int v3;
  char *v4;
  std::string::size_type size;
  char *v6;
  std::locale::id *v7;
  std::string::size_type v8;
  uint64_t v9;
  const std::locale::facet *v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  int locale;
  std::locale v15;
  int v16;
  std::locale v17;

  v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v3 >= 0)
    v4 = (char *)a1;
  else
    v4 = (char *)a1->__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v6 = &v4[size];
  locale = (int)a2->__locale_;
  std::locale::locale(&v15, a2 + 1);
  v16 = locale;
  std::locale::locale(&v17, &v15);
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (size)
  {
    v8 = size;
    v9 = v4[size - 1];
    v10 = std::locale::use_facet(&v17, v7);
    if ((v9 & 0x80) != 0)
    {
      v4 = v6;
      break;
    }
    --v6;
    v11 = *((_DWORD *)&v10[1].~facet + v9);
    size = v8 - 1;
    if ((v11 & v16) == 0)
    {
      v4 += v8;
      break;
    }
  }
  std::locale::~locale(&v17);
  v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v12 & 0x80u) == 0)
    v13 = (char *)a1;
  else
    v13 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((v12 & 0x80u) != 0)
    v12 = a1->__r_.__value_.__l.__size_;
  std::string::erase(a1, v4 - v13, &v13[v12] - v4);
  std::locale::~locale(&v15);
}

void sub_1ADE5E320(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, _BYTE *a5, _BYTE *a6, char *a7, char *a8)
{
  _BYTE *v8;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v15;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  std::string::value_type *v32;
  char *v33;
  std::string::value_type *v34;
  std::string::size_type v35;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v8 = a6;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  v11 = *(_BYTE **)a1;
  if ((int)v10 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  if (a5 == a6)
  {
    v19 = v12;
  }
  else
  {
    v15 = a5;
    v19 = v12;
    v20 = v12;
    do
    {
      v12 = v8;
      v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      v21 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      if ((_QWORD)v38 == v37.i64[1])
        v22 = 0;
      else
        v22 = *(_QWORD *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(&v37, v21, v22, a7, a8, a8 - a7);
      v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 8);
      v15 = (_BYTE *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      v8 = v25;
      v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = *(_BYTE **)a1;
  }
  v10 = v10;
  if ((v10 & 0x80u) == 0)
    v26 = a1;
  else
    v26 = (uint64_t)v11;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (_BYTE *)(v26 + v10));
  v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = a1;
  else
    v29 = *(_QWORD *)a1;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a1 + 8);
  v30 = v29 + v28;
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((_QWORD)v38 == v37.i64[1])
    {
      v32 = 0;
      v34 = 0;
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
    }
    else
    {
      v32 = (std::string::value_type *)(*(_QWORD *)v31 + (v39 & 0xFFF));
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      v34 = (std::string::value_type *)(*(_QWORD *)v33 + ((v39 + *((_QWORD *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32)
      v35 = 0;
    else
      v35 = &v34[512 * (v33 - v31)] - &v32[*(_QWORD *)v33] + *(_QWORD *)v31;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (_QWORD)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_1ADE5E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  void **v45;
  uint64_t v46;
  size_t v47;
  _BYTE *v48;
  const void **v49;
  char *v50;
  const void **v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 12;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + (a1[2].i64[0] & 0xFFF);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = a3 + ((a2 - v14) << 9) - (v15 + *(_QWORD *)a2) + *(_QWORD *)v14;
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v10 + v17;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (_QWORD *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = (char *)(*v23 + (v21 & 0xFFF));
    *(_QWORD *)&v68 = v12 + 8 * (v21 >> 12);
    *((_QWORD *)&v68 + 1) = v24;
    v29 = v17 - v16;
    if (v17 - v16 >= v6)
    {
      v30 = a5;
      if (!v6)
        goto LABEL_84;
    }
    else
    {
      if (v29 >= v6 >> 1)
        v30 = &a5[v17 - v16 - v6];
      else
        v30 = &a4[v29];
      if (v30 == a5)
      {
        v30 = a5;
      }
      else
      {
        v31 = v30;
        do
        {
          *v24++ = *v31;
          if (&v24[-*v23] == (char *)4096)
          {
            v32 = (char *)v23[1];
            ++v23;
            v24 = v32;
          }
          ++v31;
          ++a1[2].i64[1];
        }
        while (v31 != a5);
      }
      v6 = v17 - v16;
      if (!v29)
        goto LABEL_84;
    }
    v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
    v51 = v49;
    v52 = v50;
    v53 = *((_QWORD *)&v68 + 1);
    if (*((char **)&v68 + 1) != v50)
    {
      v54 = v49;
      v55 = v50;
      do
      {
        *v24++ = *v55;
        if (&v24[-*v23] == (char *)4096)
        {
          v56 = (char *)v23[1];
          ++v23;
          v24 = v56;
        }
        if (&(++v55)[-*v54] == (char *)4096)
        {
          v57 = (char *)v54[1];
          ++v54;
          v55 = v57;
        }
        ++a1[2].i64[1];
        v53 = *((_QWORD *)&v68 + 1);
      }
      while (v55 != *((char **)&v68 + 1));
    }
    if (v6 < v29)
    {
      v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v29);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
      v53 = *((_QWORD *)&v70 + 1);
      v68 = v70;
    }
    if (v30 != a4)
    {
      v61 = (uint64_t *)(v68 - 8);
      v60 = *(_QWORD *)v68;
      while (1)
      {
        v62 = v53 - v60;
        if (v30 - a4 >= v62)
          v63 = v62;
        else
          v63 = v30 - a4;
        v30 -= v63;
        if (v63)
          memmove((void *)(v53 - v63), v30, v63);
        if (v30 == a4)
          break;
        v64 = *v61--;
        v60 = v64;
        v53 = v64 + 4096;
      }
    }
    goto LABEL_84;
  }
  if (a6 > v10)
  {
    std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
    v10 = a1[2].u64[0];
    v12 = a1->i64[1];
    v13 = a1[1].i64[0];
    v11 = v10 >> 12;
  }
  v18 = (_QWORD *)(v12 + 8 * v11);
  if (v13 == v12)
    v19 = 0;
  else
    v19 = *v18 + (v10 & 0xFFF);
  *(_QWORD *)&v68 = v12 + 8 * v11;
  *((_QWORD *)&v68 + 1) = v19;
  if (v6 <= v16)
  {
    v25 = a4;
    if (!v6)
      goto LABEL_84;
    goto LABEL_46;
  }
  if (v16 >= v6 >> 1)
    v25 = &a4[v6 - v16];
  else
    v25 = &a5[-v16];
  if (v25 == a4)
  {
    v25 = a4;
  }
  else
  {
    v26 = v25;
    do
    {
      if (v19 == *v18)
      {
        v27 = *--v18;
        v19 = v27 + 4096;
      }
      v28 = *--v26;
      *(_BYTE *)--v19 = v28;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE140E90);
    }
    while (v26 != a4);
  }
  v6 = v16;
  if (v16)
  {
LABEL_46:
    v34 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
    v35 = v33;
    v36 = (_BYTE *)*((_QWORD *)&v68 + 1);
    if (*((_BYTE **)&v68 + 1) != v33)
    {
      v37 = v34;
      v38 = v33;
      do
      {
        if (v19 == *v18)
        {
          v39 = *--v18;
          v19 = v39 + 4096;
        }
        if (v38 == (_BYTE *)*v37)
        {
          v40 = *--v37;
          v38 = (_BYTE *)(v40 + 4096);
        }
        v41 = *--v38;
        *(_BYTE *)--v19 = v41;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE140E90);
        v36 = (_BYTE *)*((_QWORD *)&v68 + 1);
      }
      while (v38 != *((_BYTE **)&v68 + 1));
    }
    if (v6 < v16)
    {
      v42 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
      v69 = v68;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v34, v35, (_BYTE **)v42, v43, (void ***)&v69);
      v36 = (_BYTE *)*((_QWORD *)&v69 + 1);
      v68 = v69;
    }
    if (v25 != a5)
    {
      v45 = (void **)(v68 + 8);
      v44 = *(_BYTE **)v68;
      while (1)
      {
        v46 = v44 - v36 + 4096;
        if (a5 - v25 >= v46)
          v47 = v46;
        else
          v47 = a5 - v25;
        if (v47)
          memmove(v36, v25, v47);
        v25 += v47;
        if (v25 == a5)
          break;
        v48 = *v45++;
        v44 = v48;
        v36 = v48;
      }
    }
  }
LABEL_84:
  v65 = a1->i64[1];
  if (a1[1].i64[0] == v65)
    v66 = 0;
  else
    v66 = *(_QWORD *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  *(_QWORD *)&v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((_QWORD *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void boost::algorithm::detail::replace_native_helper<true>::operator()<std::string,std::__wrap_iter<char const*>>(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, char *a5, char *a6)
{
  void *__p[2];
  char v10;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a5, a6, a6 - a5);
  std::string::replace[abi:ne180100](a2, a3, a4, (const std::string::value_type *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_1ADE5EA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::string::replace[abi:ne180100](std::string *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  std::string *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;

  v4 = a1;
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
  v5 = a2 - (_QWORD)v4;
  v6 = a3 - a2;
  v7 = *((_QWORD *)a4 + 1);
  if (a4[23] >= 0)
  {
    v8 = *((unsigned __int8 *)a4 + 23);
  }
  else
  {
    a4 = *(const std::string::value_type **)a4;
    v8 = v7;
  }
  return std::string::replace(a1, v5, v6, a4, v8);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string::value_type *v22;
  char *v23;
  std::string::value_type *v24;
  std::string::size_type v25;
  int64x2_t v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  if (*(char *)(a1 + 23) >= 0)
    v8 = (_BYTE *)a1;
  else
    v8 = *(_BYTE **)a1;
  v9 = v8;
  while (a3 != (_BYTE *)a4)
  {
    v9 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, a3);
    v10 = (char *)(v27.i64[1] + 8 * (((_QWORD)v29 + *((_QWORD *)&v29 + 1)) >> 12));
    if ((_QWORD)v28 == v27.i64[1])
      v11 = 0;
    else
      v11 = *(_QWORD *)v10 + (((_WORD)v29 + WORD4(v29)) & 0xFFF);
    std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v27, v10, v11, 0, 0, 0);
    v8 = (_BYTE *)a4;
    v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (_BYTE *)a1;
    else
      v13 = *(_BYTE **)a1;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a1 + 8);
    a3 = (_BYTE *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, a4, (uint64_t)&v13[v12]);
    a4 = v14;
  }
  v15 = *(unsigned __int8 *)(a1 + 23);
  if ((v15 & 0x80u) == 0)
    v16 = (_BYTE *)a1;
  else
    v16 = *(_BYTE **)a1;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a1 + 8);
  v17 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, &v16[v15]);
  v18 = *(unsigned __int8 *)(a1 + 23);
  if ((v18 & 0x80u) == 0)
    v19 = a1;
  else
    v19 = *(_QWORD *)a1;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a1 + 8);
  v20 = v19 + v18;
  if (*((_QWORD *)&v29 + 1))
  {
    v21 = (char *)(v27.i64[1] + 8 * ((unint64_t)v29 >> 12));
    if ((_QWORD)v28 == v27.i64[1])
    {
      v22 = 0;
      v24 = 0;
      v23 = (char *)(v27.i64[1] + 8 * (((_QWORD)v29 + *((_QWORD *)&v29 + 1)) >> 12));
    }
    else
    {
      v22 = (std::string::value_type *)(*(_QWORD *)v21 + (v29 & 0xFFF));
      v23 = (char *)(v27.i64[1] + 8 * (((_QWORD)v29 + *((_QWORD *)&v29 + 1)) >> 12));
      v24 = (std::string::value_type *)(*(_QWORD *)v23 + ((v29 + *((_QWORD *)&v29 + 1)) & 0xFFF));
    }
    if (v24 == v22)
      v25 = 0;
    else
      v25 = &v24[512 * (v23 - v21)] - &v22[*(_QWORD *)v23] + *(_QWORD *)v21;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v20, v21, v22, (uint64_t)v23, v24, v25);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v17[-v19], v20 - (_QWORD)v17);
  }
  return std::deque<char>::~deque[abi:ne180100](&v27);
}

void sub_1ADE5ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3DF08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3DF08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t result;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = v2[1];
  if (v3 >= v2[2])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v2, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v2, a2);
    result = v3 + 24;
  }
  v2[1] = result;
  return result;
}

uint64_t std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::splitAndTrimNoEmpty(std::string const&,std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::set<UScriptCode>::set[abi:ne180100]<std::__wrap_iter<UScriptCode*>>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1ADE5EE58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADE5EED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineTransducerBeamSearchDecoder::OnlineTransducerBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  _OWORD *v3;
  uint64_t v4;
  char *v5;

  v3 = (_OWORD *)(a1 + 552);
  v4 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v4 = &off_1E5D3AF78;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 464) = 0u;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(_OWORD *)(v4 + 528) = 0u;
  *(_DWORD *)(v4 + 544) = 16843009;
  *(_WORD *)(v4 + 548) = 0;
  *v3 = xmmword_1AE1851C0;
  *(_QWORD *)(v4 + 568) = 1082130432;
  *(_BYTE *)(v4 + 576) = 0;
  *(_QWORD *)(v4 + 580) = 0x32000003E8;
  *(_DWORD *)(v4 + 588) = 1065353216;
  *(_BYTE *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 596) = 0x1E000000FALL;
  *(_OWORD *)((char *)v3 + 52) = xmmword_1AE1851D0;
  *(_QWORD *)(v4 + 620) = 0x3F8000003F800000;
  *(_BYTE *)(v4 + 628) = 0;
  *(_DWORD *)(v4 + 632) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v4 + 640), "");
  *(_BYTE *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  v5 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_1E5D43328;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 19) = 0;
  *((_QWORD *)v5 + 20) = 0;
  *((_QWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *((_DWORD *)v5 + 34) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(a1 + 752) = v5 + 24;
  *(_QWORD *)(a1 + 760) = v5;
  *(_BYTE *)(a1 + 57) = 0;
  return a1;
}

void sub_1ADE5FB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  kaldi::quasar::CEAcousticEncoderNet **v13;
  void **v14;

  v14 = v11;
  *(_OWORD *)(v10 + 736) = 0u;
  std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100]((kaldi::AutoRegressiveBeamSearchDecoder **)(v10 + 728), 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v10 + 720), 0);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)(v10 + 712), 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v10 + 704), 0);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100](v13, 0);
  a10 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 663) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 543) < 0)
    operator delete(*(void **)(v10 + 520));
  if (*(char *)(v10 + 519) < 0)
    operator delete(*(void **)(v10 + 496));
  if (*(char *)(v10 + 495) < 0)
    operator delete(*(void **)(v10 + 472));
  if (*(char *)(v10 + 471) < 0)
    operator delete(*(void **)(v10 + 448));
  quasar::Decoder::~Decoder((void **)v10);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerBeamSearchDecoder::~OnlineTransducerBeamSearchDecoder(quasar::OnlineTransducerBeamSearchDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E5D3AF78;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 752);
  v2 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C408195852FLL);
  v3 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C40605AC02ELL);
  std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100]((kaldi::AutoRegressiveBeamSearchDecoder **)this + 91, 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 90, 0);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)this + 89, 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 88, 0);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)this + 87, 0);
  v4 = (void **)((char *)this + 664);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineTransducerBeamSearchDecoder::~OnlineTransducerBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineTransducerBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "transducer-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 244, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::AutoRegressiveBeamSearchDecoderOptions::Register((uint64_t)(this + 68), (uint64_t)a2);
  kaldi::EndPointerOptions::Register((uint64_t)(this + 72), (uint64_t)a2);
  kaldi::UtteranceDetectorOptions::Register((uint64_t)(this + 74), (uint64_t)a2);
  kaldi::quasar::TransducerAutoRegressiveDecodableOptions::Register((uint64_t)this + 604, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[94], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "acoustic-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Acoustic encoder model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 1, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "label-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Label encoder model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 1, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "joint-predictor-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Joint predictor model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 62), (uint64_t)v4, 1, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Neural network language model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 65), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of acoustic encoder output frames to compute per chunk.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 79), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 80), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 83), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 86), (uint64_t)v4, 0, 244, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADE60150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::AutoRegressiveBeamSearchDecoderOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "remove-eos");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove EOS labels from output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove silence labels from output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-blank");
  std::string::basic_string[abi:ne180100]<0>(__p, "Remove blank labels from output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "merge-hyps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Merge equivalent hypotheses.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 3, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "merge-max");
  std::string::basic_string[abi:ne180100]<0>(__p, "Assign max score to merged hypotheses, otherwise total score (default).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "label-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Context size to merge hypotheses by label context. Inactive if negative (default).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "keep-merged-hyps-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Keep hypotheses active when merged by label context.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 5, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-steps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of decoder steps. Inactive if negative (default).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "At least min-active best hypotheses are retained after pruning.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "At most max-active best hypotheses are retained after pruning.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam width. pruning-cutoff = best-hypothesis-score - beam.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "Score penalty added for each non-blank label.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE60638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::EndPointerOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "enable-endpointing");
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable endpointing.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames allowed. Hard limit. We will endpoint when this many frames are decoded.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-trailing-sil-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of trailing silence frames allowed. Active only if some speech frames have already been decoded.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "eos-probability-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpointing threshold. Endpoints if P(EOS) > eos-probability-threshold. Active only if some speech frames have already been decoded.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE6085C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::UtteranceDetectorOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "enable-utterance-detection");
  std::string::basic_string[abi:ne180100]<0>(__p, "Enable utterance detection.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames allowed in an utterance if num-utt-speech-frames == 0. Otherwise, it is used to determine the maximum number of trailing silence frames allowed.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-trailing-sil-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of trailing silence frames allowed in an utterance if num-utt-frames <= max-utt-frames. Otherwise, we use the formula max-utt-trailing-sil-frames * max-utt-frames / num-utt-frames.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE609E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TransducerAutoRegressiveDecodableOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "max-label-fraction");
  std::string::basic_string[abi:ne180100]<0>(__p, "#decoded-nonblank-labels / #acoustic-encoder-output-frames <= max-label-fraction. Must be positive. Active only if max-steps < 0.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nnlm-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Neural network language model weight. NNLM loglikes are weighted and added to transducer loglikes.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "ilm-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "Internal language model weight. ILM loglikes are weighted and subtracted from transducer loglikes.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "softmax-temperature");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transducer model softmax temperature.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nnlm-softmax-temperature");
  std::string::basic_string[abi:ne180100]<0>(__p, "Neural network language model softmax temperature.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "ilm-softmax-temperature");
  std::string::basic_string[abi:ne180100]<0>(__p, "Internal language model softmax temperature.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "mask-nnlm-eos");
  std::string::basic_string[abi:ne180100]<0>(__p, "Mask out EOS when computing neural network language model loglikes.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE60CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineTransducerBeamSearchDecoder::finishInit(quasar::OnlineTransducerBeamSearchDecoder *this)
{
  kaldi::quasar::CEAcousticEncoderNet *v2;
  kaldi::quasar::CELabelEncoderNet *v3;
  kaldi::quasar::CEJointPredictorNet *v4;
  kaldi::quasar::CELabelEncoderNet *v5;
  kaldi::quasar::CELabelEncoderNet *v6;
  kaldi::AutoRegressiveBeamSearchDecoder *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (kaldi::quasar::CEAcousticEncoderNet *)operator new();
  kaldi::quasar::CEAcousticEncoderNet::CEAcousticEncoderNet(v2);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)this + 87, v2);
  v3 = (kaldi::quasar::CELabelEncoderNet *)operator new();
  kaldi::quasar::CELabelEncoderNet::CELabelEncoderNet(v3, (char *)this + 472);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 88, v3);
  v4 = (kaldi::quasar::CEJointPredictorNet *)operator new();
  kaldi::quasar::CEJointPredictorNet::CEJointPredictorNet(v4, (char *)this + 496);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)this + 89, v4);
  if (*((char *)this + 543) < 0)
  {
    if (!*((_QWORD *)this + 66))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*((_BYTE *)this + 543))
  {
LABEL_5:
    v5 = (kaldi::quasar::CELabelEncoderNet *)operator new();
    kaldi::quasar::CELabelEncoderNet::CELabelEncoderNet(v5, (char *)this + 520);
    std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 90, v5);
  }
LABEL_6:
  kaldi::quasar::CEAcousticEncoderNet::WarmUp(*((kaldi::quasar::CEAcousticEncoderNet **)this + 87));
  kaldi::quasar::CELabelEncoderNet::WarmUp(*((kaldi::quasar::CELabelEncoderNet **)this + 88));
  kaldi::quasar::CEJointPredictorNet::WarmUp(*((kaldi::quasar::CEJointPredictorNet **)this + 89));
  v6 = (kaldi::quasar::CELabelEncoderNet *)*((_QWORD *)this + 90);
  if (v6)
    kaldi::quasar::CELabelEncoderNet::WarmUp(v6);
  v7 = (kaldi::AutoRegressiveBeamSearchDecoder *)operator new();
  kaldi::AutoRegressiveBeamSearchDecoder::AutoRegressiveBeamSearchDecoder(v7, (char *)this + 544);
  std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100]((kaldi::AutoRegressiveBeamSearchDecoder **)this + 91, v7);
  v8 = operator new();
  kaldi::EndPointer::EndPointer(v8, (char *)this + 576);
  v9 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = v8;
  if (v9)
    MEMORY[0x1AF44D190](v9, 0x1000C40605AC02ELL);
  v10 = operator new();
  kaldi::UtteranceDetector::UtteranceDetector(v10, (char *)this + 592);
  v11 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = v10;
  if (v11)
    MEMORY[0x1AF44D190](v11, 0x1000C408195852FLL);
  return quasar::QsrTextSymbolTable::init(*((const std::string **)this + 94), (quasar::OnlineTransducerBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
}

void sub_1ADE60F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40D0B19100);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineTransducerBeamSearchDecoder::runImpl(uint64_t a1, _BYTE *a2, std::vector<std::wstring> **a3, uint64_t a4)
{
  std::vector<std::wstring> **v4;
  uint64_t *value;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  kaldi::quasar::CEAcousticEncoderNet *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  int v24;
  std::vector<unsigned int>::pointer v25;
  std::vector<unsigned int>::pointer v26;
  BOOL v27;
  quasar::Bitmap *v28;
  uint64_t v29;
  unsigned int *begin;
  std::vector<std::wstring> *v31;
  std::vector<std::wstring> *v32;
  unsigned __int8 *v33;
  std::vector<std::wstring>::pointer end;
  unsigned __int8 *v35;
  std::vector<std::wstring>::pointer v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  char v40;
  BOOL RawLattice;
  std::vector<unsigned int>::pointer v42;
  unsigned int v43;
  std::vector<std::wstring> *v44;
  std::vector<std::wstring> *v45;
  unsigned __int8 *v46;
  std::vector<std::wstring>::pointer v47;
  unsigned __int8 *v48;
  std::vector<std::wstring>::pointer v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *i;
  char *v72;
  std::vector<std::wstring>::pointer v73;
  std::vector<std::wstring>::pointer v74;
  std::string *v75;
  std::vector<std::wstring>::pointer v76;
  float v77;
  double *size;
  unint64_t v79;
  double *v80;
  double *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v93;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  std::vector<std::wstring> **v100;
  unsigned __int8 v101;
  int v102;
  uint64_t v103;
  int32x2_t v104;
  int32x2_t v105;
  void *v106;
  uint64_t v107;
  void *__p[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  std::vector<std::wstring> v125;
  std::vector<std::wstring> *v126;
  std::vector<std::wstring> *v127;
  uint64_t v128;
  std::vector<std::wstring> v129;
  std::vector<int> v130;
  std::vector<unsigned int> v131;
  std::vector<std::wstring> v132;
  std::vector<int> v133;
  std::vector<int> v134;
  __int128 v135[2];
  kaldi::quasar::CEAcousticEncoderNet *v136[78];
  unint64_t v137;
  std::__shared_weak_count *v138;
  int32x2_t v139[3];

  v4 = a3;
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*v4)[19].__end_cap_.__value_;
  v137 = *(_QWORD *)(a1 + 752);
  v7 = *(std::__shared_weak_count **)(a1 + 760);
  v138 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(value, &v137, 0, -1);
  v10 = v138;
  if (v138)
  {
    v11 = (unint64_t *)&v138->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)a2;
  v14 = *(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 696);
  v15 = *(_QWORD *)(a1 + 704);
  v16 = *(_QWORD *)(a1 + 712);
  v17 = *(_QWORD *)(a1 + 736);
  v18 = *(_QWORD *)(a1 + 744);
  v19 = *(_QWORD *)(a1 + 720);
  v135[0] = *(_OWORD *)(a1 + 604);
  *(__int128 *)((char *)v135 + 12) = *(_OWORD *)(a1 + 616);
  kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable((uint64_t)v136, v13, v14, v15, v16, v17, v18, v19, v135, *(_DWORD *)(a1 + 632));
  memset(&v134, 0, sizeof(v134));
  memset(&v132, 0, sizeof(v132));
  memset(&v133, 0, sizeof(v133));
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[13].__end_, (__int128 *)__p);
  v20 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v21 = (unint64_t *)((char *)__p[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  v24 = 0;
  v95 = kaldi::quasar::TransducerAutoRegressiveDecodable::FrameSubsamplingFactor(v136) * v23;
  v96 = 0;
  v97 = a1 + 640;
  v98 = (uint64_t *)(a1 + 664);
  v100 = v4;
  while (!kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136)
       && (kaldi::quasar::TransducerAutoRegressiveDecodable::EndPointed((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136) & 1) == 0)
  {
    if ((int)kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136) >= 1)
      kaldi::quasar::TransducerAutoRegressiveDecodable::Reset((uint64_t)v136, &v134);
    kaldi::AutoRegressiveBeamSearchDecoder::InitDecoding(*(_QWORD *)(a1 + 728), (uint64_t)v136);
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = kaldi::AutoRegressiveBeamSearchDecoder::Finished(*(_QWORD *)(a1 + 728), (uint64_t)v136);
      v28 = *(quasar::Bitmap **)(a1 + 728);
      if (v27)
        break;
      if ((int)kaldi::AutoRegressiveBeamSearchDecoder::AdvanceDecoding((uint64_t)v28, (uint64_t)v136, 1) >= 1)
      {
        LODWORD((*v4)[24].__begin_) = kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136)
                                    + v24;
        if (a2[561])
        {
          v29 = v95
              * kaldi::quasar::TransducerAutoRegressiveDecodable::NumTotalEncodedFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136);
          if (v96 != (_DWORD)v29)
          {
            (*((void (**)(std::vector<std::wstring>::pointer, uint64_t))(*v4)[23].__end_->__r_.__value_.__l.__data_
             + 9))((*v4)[23].__end_, v29);
            v96 = v29;
          }
        }
        if (!kaldi::AutoRegressiveBeamSearchDecoder::Finished(*(_QWORD *)(a1 + 728), (uint64_t)v136))
        {
          kaldi::AutoRegressiveBeamSearchDecoder::GetPartialResult(*(_QWORD **)(a1 + 728), &v131);
          begin = v131.__begin_;
          if ((char *)v131.__end_ - (char *)v131.__begin_ == (char *)v25 - (char *)v26
            && !memcmp(v131.__begin_, v26, (char *)v131.__end_ - (char *)v131.__begin_))
          {
LABEL_44:
            if (begin)
            {
              v131.__end_ = begin;
              operator delete(begin);
            }
          }
          else
          {
            memset(&v130, 0, sizeof(v130));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v130, v133.__begin_, (uint64_t)v133.__end_, v133.__end_ - v133.__begin_);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v130, (uint64_t)v130.__end_, (char *)v131.__begin_, (char *)v131.__end_, v131.__end_ - v131.__begin_);
            quasar::SymbolTableList::lookup((uint64_t *)(*v4)[19].__end_cap_.__value_, &v130.__begin_, (uint64_t *)&(*v4)[2], (char **)&(*v4)[3], 1);
            if (a2[561])
            {
              if (*(_QWORD *)(a1 + 672) != *(_QWORD *)(a1 + 664))
              {
                quasar::formatResults((uint64_t *)&(*v4)[2], v98, v97, *(unsigned __int8 *)(a1 + 688), __p);
                v31 = *v4;
                std::vector<std::string>::__vdeallocate(*v4 + 2);
                *(_OWORD *)&v31[2].__begin_ = *(_OWORD *)__p;
                v31[2].__end_cap_.__value_ = (std::wstring *)v109;
                __p[1] = 0;
                *(_QWORD *)&v109 = 0;
                __p[0] = 0;
                v129.__begin_ = (std::vector<std::wstring>::pointer)__p;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
              }
              v32 = *v4;
              v33 = (unsigned __int8 *)v132.__begin_;
              end = v132.__end_;
              v35 = (unsigned __int8 *)(*v4)[2].__begin_;
              if ((char *)v132.__end_ - (char *)v132.__begin_ == (char *)(*v4)[2].__end_ - (char *)v35)
              {
                while (v33 != (unsigned __int8 *)end)
                {
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)__p, v33, v35))
                  {
                    v32 = *v4;
                    goto LABEL_36;
                  }
                  v33 += 24;
                  v35 += 24;
                }
              }
              else
              {
LABEL_36:
                v36 = v32[23].__end_;
                v37 = *(unsigned int *)(*(_QWORD *)a4 + 12);
                memset(&v129, 0, sizeof(v129));
                v127 = 0;
                v128 = 0;
                memset(&v125, 0, sizeof(v125));
                v126 = 0;
                LOBYTE(__p[0]) = 0;
                std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
                LOWORD(v93) = 0;
                (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, std::vector<std::wstring> *, std::vector<std::wstring> **, std::vector<std::wstring> *, int, void **))(v36->__r_.__value_.__r.__words[0] + 24))(v36, v32 + 2, v37, 1, 0, 0, &v129, &v126, &v125, v93, __p);
                if (SHIBYTE(v109) < 0)
                  operator delete(__p[1]);
                __p[0] = &v125;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                __p[0] = &v126;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                __p[0] = &v129;
                std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                if (&v132 != &(*v4)[2])
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v132, (std::string *)(*v4)[2].__begin_, (__int128 *)(*v4)[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)(*v4)[2].__end_ - (char *)(*v4)[2].__begin_) >> 3));
              }
            }
            if (v26)
              operator delete(v26);
            v26 = v131.__begin_;
            v25 = v131.__end_;
            memset(&v131, 0, sizeof(v131));
            if (v130.__begin_)
            {
              v130.__end_ = v130.__begin_;
              operator delete(v130.__begin_);
              begin = v131.__begin_;
              goto LABEL_44;
            }
          }
        }
      }
    }
    quasar::Bitmap::~Bitmap(v28);
    v38 = kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136);
    v39 = kaldi::AutoRegressiveBeamSearchDecoder::ReachedFinal(*(kaldi::AutoRegressiveBeamSearchDecoder **)(a1 + 728));
    v40 = quasar::gLogLevel < 4 || v39;
    if ((v40 & 1) == 0)
    {
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v114 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      *(_OWORD *)__p = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    if ((*((unsigned int (**)(std::vector<std::wstring>::pointer))(*v4)[13].__end_->__r_.__value_.__l.__data_
          + 3))((*v4)[13].__end_) == -1)
    {
      if (kaldi::AutoRegressiveBeamSearchDecoder::GetRawLattice(*(_QWORD *)(a1 + 728), (uint64_t)(*v4)[13].__end_, 1, -1))
      {
        goto LABEL_64;
      }
      if (quasar::gLogLevel >= 4)
      {
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v114 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        *(_OWORD *)__p = 0u;
        v109 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get raw recognition lattice.", 38);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
LABEL_143:
      if (v26)
        operator delete(v26);
      v91 = 2;
      goto LABEL_146;
    }
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v131);
    RawLattice = kaldi::AutoRegressiveBeamSearchDecoder::GetRawLattice(*(_QWORD *)(a1 + 728), (uint64_t)&v131, 1, -1);
    if (RawLattice)
    {
      fst::Concat<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)(*v4)[13].__end_, (uint64_t)&v131);
    }
    else if (quasar::gLogLevel >= 4)
    {
      v123 = 0u;
      v124 = 0u;
      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v114 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      *(_OWORD *)__p = 0u;
      v109 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get raw recognition lattice.", 38);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v131.__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D25580;
    v42 = v131.__end_;
    if (v131.__end_)
    {
      v43 = v131.__end_[14] - 1;
      v131.__end_[14] = v43;
      if (!v43)
        (*(void (**)(std::vector<unsigned int>::pointer))(*(_QWORD *)v42 + 8))(v42);
    }
    if (!RawLattice)
      goto LABEL_143;
LABEL_64:
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v106);
    kaldi::AutoRegressiveBeamSearchDecoder::GetBestPath(*(_QWORD *)(a1 + 728), (uint64_t)&v106, 1);
    memset(&v130, 0, sizeof(v130));
    memset(&v131, 0, sizeof(v131));
    fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v106, (uint64_t)&v131, (uint64_t)&v130, v139, 0);
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v134, (uint64_t)v134.__end_, (char *)v131.__begin_, (char *)v131.__end_, v131.__end_ - v131.__begin_);
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v133, (uint64_t)v133.__end_, (char *)v130.__begin_, (char *)v130.__end_, v130.__end_ - v130.__begin_);
    if ((char *)v130.__end_ - (char *)v130.__begin_ != (char *)v25 - (char *)v26
      || memcmp(v130.__begin_, v26, (char *)v25 - (char *)v26))
    {
      quasar::SymbolTableList::lookup((uint64_t *)(*v4)[19].__end_cap_.__value_, &v133.__begin_, (uint64_t *)&(*v4)[2], (char **)&(*v4)[3], 1);
      if (a2[561])
      {
        if (*(_QWORD *)(a1 + 672) != *(_QWORD *)(a1 + 664))
        {
          quasar::formatResults((uint64_t *)&(*v4)[2], v98, v97, *(unsigned __int8 *)(a1 + 688), __p);
          v44 = *v4;
          std::vector<std::string>::__vdeallocate(*v4 + 2);
          *(_OWORD *)&v44[2].__begin_ = *(_OWORD *)__p;
          v44[2].__end_cap_.__value_ = (std::wstring *)v109;
          __p[1] = 0;
          *(_QWORD *)&v109 = 0;
          __p[0] = 0;
          v129.__begin_ = (std::vector<std::wstring>::pointer)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
        }
        v45 = *v4;
        v46 = (unsigned __int8 *)v132.__begin_;
        v47 = v132.__end_;
        v48 = (unsigned __int8 *)v45[2].__begin_;
        if ((char *)v132.__end_ - (char *)v132.__begin_ == (char *)v45[2].__end_ - (char *)v48)
        {
          while (1)
          {
            if (v46 == (unsigned __int8 *)v47)
            {
              v4 = v100;
              goto LABEL_79;
            }
            if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)__p, v46, v48))
              break;
            v46 += 24;
            v48 += 24;
          }
          v45 = *v100;
        }
        v49 = v45[23].__end_;
        v50 = *(unsigned int *)(*(_QWORD *)a4 + 12);
        memset(&v129, 0, sizeof(v129));
        v127 = 0;
        v128 = 0;
        memset(&v125, 0, sizeof(v125));
        v126 = 0;
        LOBYTE(__p[0]) = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
        LOWORD(v93) = 0;
        (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring>::pointer *, uint64_t, uint64_t, _QWORD, _QWORD, std::vector<std::wstring> *, std::vector<std::wstring> **, std::vector<std::wstring> *, int, void **))(v49->__r_.__value_.__r.__words[0] + 24))(v49, &v45[2].__begin_, v50, 1, 0, 0, &v129, &v126, &v125, v93, __p);
        v4 = v100;
        if (SHIBYTE(v109) < 0)
          operator delete(__p[1]);
        __p[0] = &v125;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v126;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = &v129;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (&v132 != &(*v100)[2])
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v132, (std::string *)(*v100)[2].__begin_, (__int128 *)(*v100)[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)(*v100)[2].__end_ - (char *)(*v100)[2].__begin_) >> 3));
      }
    }
LABEL_79:
    if (v130.__begin_)
    {
      v130.__end_ = v130.__begin_;
      operator delete(v130.__begin_);
    }
    if (v131.__begin_)
    {
      v131.__end_ = v131.__begin_;
      operator delete(v131.__begin_);
    }
    v106 = &unk_1E5D25580;
    v51 = v107;
    if (v107)
    {
      v52 = *(_DWORD *)(v107 + 56) - 1;
      *(_DWORD *)(v107 + 56) = v52;
      if (!v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
    v24 += v38;
    if (v26)
      operator delete(v26);
  }
  LODWORD((*v4)[24].__begin_) = v24;
  BYTE4((*v4)[24].__begin_) = kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136);
  BYTE5((*v4)[24].__begin_) = kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[6].__end_, (__int128 *)__p);
  v53 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v54 = (unint64_t *)((char *)__p[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)(*v4)[13].__end_, (uint64_t)(*v4)[6].__end_, 1);
  kaldi::TopSortCompactLatticeIfNeeded((uint64_t)(*v4)[6].__end_);
  __asm { FMOV            V0.2S, #1.0 }
  (*v4)[21].__begin_ = _D0;
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v106);
  v61 = (uint64_t)(*v4)[13].__end_;
  v62 = *(unsigned int *)(*(_QWORD *)a4 + 16);
  v105 = vdup_n_s32(0x7F800000u);
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v61, (uint64_t)&v106, v62, 0, 0, (uint64_t *)&v105, -1, 0);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v109 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v106, (uint64_t *)__p);
  v63 = (char *)operator new(0x30uLL);
  *((_QWORD *)v63 + 2) = 0;
  *(_QWORD *)v63 = &unk_1E5D456D0;
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 4) = 0;
  *((_QWORD *)v63 + 5) = 0;
  *((_QWORD *)v63 + 3) = 0;
  v131.__begin_ = (std::vector<unsigned int>::pointer)(v63 + 24);
  v131.__end_ = (std::vector<unsigned int>::pointer)v63;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[14].__end_cap_, (__int128 *)&v131);
  v64 = (std::__shared_weak_count *)v131.__end_;
  if (v131.__end_)
  {
    v65 = (unint64_t *)(v131.__end_ + 2);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (char *)operator new(0x30uLL);
  *((_QWORD *)v67 + 2) = 0;
  *(_QWORD *)v67 = &unk_1E5D458C8;
  *((_QWORD *)v67 + 1) = 0;
  *((_QWORD *)v67 + 4) = 0;
  *((_QWORD *)v67 + 5) = 0;
  *((_QWORD *)v67 + 3) = 0;
  v131.__begin_ = (std::vector<unsigned int>::pointer)(v67 + 24);
  v131.__end_ = (std::vector<unsigned int>::pointer)v67;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*v4)[16].__end_, (__int128 *)&v131);
  v68 = (std::__shared_weak_count *)v131.__end_;
  if (v131.__end_)
  {
    v69 = (unint64_t *)(v131.__end_ + 2);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v72 = (char *)__p[0];
  for (i = (char *)__p[1]; v72 != i; v4 = v100)
  {
    memset(&v130, 0, sizeof(v130));
    memset(&v131, 0, sizeof(v131));
    fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)v72, (uint64_t)&v131, (uint64_t)&v130, &v104, 0);
    v126 = 0;
    v127 = 0;
    v128 = 0;
    memset(&v129, 0, sizeof(v129));
    quasar::SymbolTableList::lookup((uint64_t *)(*v4)[19].__end_cap_.__value_, &v130.__begin_, (uint64_t *)&v129, (char **)&v126, 1);
    if (*(_QWORD *)(a1 + 672) != *(_QWORD *)(a1 + 664))
    {
      quasar::formatResults((uint64_t *)&v129, v98, v97, *(unsigned __int8 *)(a1 + 688), &v125);
      std::vector<std::string>::__vdeallocate(&v129);
      v129 = v125;
      memset(&v125, 0, sizeof(v125));
      v139[0] = (int32x2_t)&v125;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v139);
    }
    memset(&v125, 0, sizeof(v125));
    v73 = v129.__begin_;
    v74 = v129.__end_;
    if (v129.__begin_ != v129.__end_)
    {
      v75 = 0;
      do
      {
        v139[0].i32[0] = 0;
        v103 = 0;
        v102 = 1;
        v101 = 1;
        if ((std::wstring *)v75 >= v125.__end_cap_.__value_)
        {
          v75 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v125, (uint64_t)v73, (int *)v139, (int *)&v103 + 1, (int *)&v103, &v102, &v101);
        }
        else
        {
          std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v125.__end_cap_, v75, (uint64_t)v73, (int *)v139, (int *)&v103 + 1, (int *)&v103, &v102, &v101);
          v75 = (std::string *)((char *)v75 + 224);
        }
        v125.__end_ = (std::vector<std::wstring>::pointer)v75;
        ++v73;
      }
      while (v73 != v74);
      if ((std::string *)v125.__begin_ != v75)
      {
        v75[-8].__r_.__value_.__s.__data_[12] = 0;
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(*v100)[14].__end_cap_.__value_, (uint64_t)&v125);
        v76 = (*v100)[16].__end_;
        v77 = *(float *)v104.i32 + *(float *)&v104.i32[1];
        size = (double *)v76->__r_.__value_.__l.__size_;
        v79 = v76->__r_.__value_.__r.__words[2];
        if ((unint64_t)size >= v79)
        {
          v81 = (double *)v76->__r_.__value_.__r.__words[0];
          v82 = (uint64_t)((uint64_t)size - v76->__r_.__value_.__r.__words[0]) >> 3;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v84 = v79 - (_QWORD)v81;
          if (v84 >> 2 > v83)
            v83 = v84 >> 2;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
            v85 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v76->__r_.__value_.__r.__words[2], v85);
            v81 = (double *)v76->__r_.__value_.__r.__words[0];
            size = (double *)v76->__r_.__value_.__l.__size_;
          }
          else
          {
            v86 = 0;
          }
          v87 = (double *)&v86[8 * v82];
          *v87 = v77;
          v80 = v87 + 1;
          while (size != v81)
          {
            v88 = *((_QWORD *)size-- - 1);
            *((_QWORD *)v87-- - 1) = v88;
          }
          v76->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v87;
          v76->__r_.__value_.__l.__size_ = (std::wstring::size_type)v80;
          v76->__r_.__value_.__r.__words[2] = (std::wstring::size_type)&v86[8 * v85];
          if (v81)
            operator delete(v81);
        }
        else
        {
          *size = v77;
          v80 = size + 1;
        }
        v76->__r_.__value_.__l.__size_ = (std::wstring::size_type)v80;
      }
    }
    v139[0] = (int32x2_t)&v125;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v139);
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    v126 = &v129;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
    if (v130.__begin_)
    {
      v130.__end_ = v130.__begin_;
      operator delete(v130.__begin_);
    }
    if (v131.__begin_)
    {
      v131.__end_ = v131.__begin_;
      operator delete(v131.__begin_);
    }
    v72 += 16;
  }
  v131.__begin_ = (std::vector<unsigned int>::pointer)__p;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
  v106 = &unk_1E5D25580;
  v89 = v107;
  if (v107)
  {
    v90 = *(_DWORD *)(v107 + 56) - 1;
    *(_DWORD *)(v107 + 56) = v90;
    if (!v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  }
  v91 = 0;
LABEL_146:
  __p[0] = &v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v133.__begin_)
  {
    v133.__end_ = v133.__begin_;
    operator delete(v133.__begin_);
  }
  if (v134.__begin_)
  {
    v134.__end_ = v134.__begin_;
    operator delete(v134.__begin_);
  }
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable((kaldi::quasar::TransducerAutoRegressiveDecodable *)v136);
  return v91;
}

void sub_1ADE61ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  void *v28;
  void *v30;
  void *v31;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a27);
  if (v28)
    operator delete(v28);
  a27 = (uint64_t)&STACK[0x218];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  v30 = (void *)v27[52];
  if (v30)
  {
    v27[53] = v30;
    operator delete(v30);
  }
  v31 = (void *)v27[55];
  if (v31)
  {
    v27[56] = v31;
    operator delete(v31);
  }
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable((kaldi::quasar::TransducerAutoRegressiveDecodable *)&STACK[0x288]);
  _Unwind_Resume(a1);
}

kaldi::quasar::CEAcousticEncoderNet *std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100](kaldi::quasar::CEAcousticEncoderNet **a1, kaldi::quasar::CEAcousticEncoderNet *a2)
{
  kaldi::quasar::CEAcousticEncoderNet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEAcousticEncoderNet::~CEAcousticEncoderNet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

kaldi::quasar::CELabelEncoderNet *std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100](kaldi::quasar::CELabelEncoderNet **a1, kaldi::quasar::CELabelEncoderNet *a2)
{
  kaldi::quasar::CELabelEncoderNet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CELabelEncoderNet::~CELabelEncoderNet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

kaldi::quasar::CEJointPredictorNet *std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100](kaldi::quasar::CEJointPredictorNet **a1, kaldi::quasar::CEJointPredictorNet *a2)
{
  kaldi::quasar::CEJointPredictorNet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::CEJointPredictorNet::~CEJointPredictorNet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

kaldi::AutoRegressiveBeamSearchDecoder *std::unique_ptr<kaldi::AutoRegressiveBeamSearchDecoder>::reset[abi:ne180100](kaldi::AutoRegressiveBeamSearchDecoder **a1, kaldi::AutoRegressiveBeamSearchDecoder *a2)
{
  kaldi::AutoRegressiveBeamSearchDecoder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::AutoRegressiveBeamSearchDecoder::~AutoRegressiveBeamSearchDecoder(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void kaldi::AutoRegressiveBeamSearchDecoder::~AutoRegressiveBeamSearchDecoder(kaldi::AutoRegressiveBeamSearchDecoder *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v4 = (void **)((char *)this + 128);
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 104);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 80);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
}

void std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 96;
        std::deque<int>::~deque[abi:ne180100]((_QWORD *)v4 - 7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t kaldi::EventMap::Read(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v10;
  std::string __p;
  _QWORD v12[34];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = kaldi::Peek(a1, a2);
  v13 = v4;
  v5 = v4 << 24;
  if (v4 << 24 > 1392508927)
  {
    if (v5 == 1392508928)
    {
      return kaldi::SplitEventMap::Read(a1, a2);
    }
    else
    {
      if (v5 != 1409286144)
        goto LABEL_10;
      return kaldi::TableEventMap::Read(a1, a2);
    }
  }
  else
  {
    if (v5 != 1124073472)
    {
      if (v5 == 1308622848)
      {
        kaldi::ExpectToken(a1, a2, "NULL");
        return 0;
      }
LABEL_10:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"EventMap::read, was not expecting character ", 44);
      kaldi::CharToString((kaldi *)&v13, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      std::string::~string(&__p);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    return kaldi::ConstantEventMap::Read(a1, a2);
  }
}

void sub_1ADE625C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConstantEventMap::Read(uint64_t *a1, int a2)
{
  uint64_t result;
  int v5;
  int v6;

  kaldi::ExpectToken(a1, a2, "CE");
  v6 = 0;
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v6);
  result = operator new();
  v5 = v6;
  *(_QWORD *)result = off_1E5D2A338;
  *(_DWORD *)(result + 8) = v5;
  return result;
}

uint64_t kaldi::TableEventMap::Read(uint64_t *a1, uint64_t a2)
{
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *__p;
  _BYTE *v10;
  unsigned int v11;
  int v12;

  kaldi::ExpectToken(a1, a2, "TE");
  v12 = 0;
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v12);
  v11 = 0;
  kaldi::ReadBasicType<unsigned int>(a1, a2, (uint64_t)&v11);
  std::vector<kaldi::EventMap *>::vector(&__p, v11);
  kaldi::ExpectToken(a1, a2, "(");
  if (v11)
  {
    for (i = 0; i < v11; *((_QWORD *)__p + i++) = v5)
      v5 = kaldi::EventMap::Read(a1, a2);
  }
  kaldi::ExpectToken(a1, a2, ")");
  v6 = operator new();
  v7 = v12;
  *(_QWORD *)v6 = off_1E5D2A038;
  *(_DWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((_QWORD *)(v6 + 16), __p, (uint64_t)v10, (v10 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1ADE6276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  MEMORY[0x1AF44D190](v10, 0x1081C40F159ABB6);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SplitEventMap::Read(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[34];
  int v10[4];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  kaldi::ExpectToken(a1, a2, "SE");
  v14 = 0;
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v14);
  *(_QWORD *)v10 = 1;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  kaldi::ReadIntegerVector<int>(a1, a2, (std::vector<int> *)((char *)&v12 + 8), 0, 0, 0, 0);
  kaldi::ConstIntegerSet<int>::InitInternal(v10);
  kaldi::ExpectToken(a1, a2, "{");
  v4 = kaldi::EventMap::Read(a1, a2);
  v5 = kaldi::EventMap::Read(a1, a2);
  kaldi::ExpectToken(a1, a2, "}");
  if (!v4 || !v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SplitEventMap::Read, NULL pointers.", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v6 = operator new();
  v7 = v14;
  *(_QWORD *)v6 = off_1E5D29FD8;
  *(_DWORD *)(v6 + 8) = v7;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(v6 + 16, (uint64_t)v10);
  *(_QWORD *)(v6 + 80) = v4;
  *(_QWORD *)(v6 + 88) = v5;
  if (*((_QWORD *)&v12 + 1))
  {
    *(_QWORD *)&v13 = *((_QWORD *)&v12 + 1);
    operator delete(*((void **)&v12 + 1));
  }
  if ((_QWORD)v11)
    operator delete((void *)v11);
  return v6;
}

void sub_1ADE62934(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::ConstIntegerSet<int>::~ConstIntegerSet((_QWORD *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConstantEventMap::Write(int a1, _QWORD *a2, int a3)
{
  uint64_t result;
  _QWORD v6[34];

  kaldi::WriteToken(a2, a3, "CE");
  result = kaldi::WriteBasicType<int>(a2, a3);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "ConstantEventMap::Write(), could not write to stream.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

uint64_t kaldi::TableEventMap::Prune(kaldi::TableEventMap *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(&__p, (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if ((int)(v2 >> 3) >= 1)
  {
    v3 = 0;
    v4 = (v2 >> 3);
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v3);
      if (v5)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        if (v6)
        {
          v11 = 0;
          std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&__p, v3 + 1, &v11);
          *((_QWORD *)__p + v3) = v6;
        }
      }
      ++v3;
    }
    while (v4 != v3);
  }
  v7 = __p;
  if (__p == v13)
  {
    v8 = 0;
    if (!__p)
      return v8;
    goto LABEL_9;
  }
  v8 = operator new();
  v9 = *((_DWORD *)this + 2);
  *(_QWORD *)v8 = off_1E5D2A038;
  *(_DWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((_QWORD *)(v8 + 16), __p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 3);
  v7 = __p;
  if (__p)
  {
LABEL_9:
    v13 = v7;
    operator delete(v7);
  }
  return v8;
}

void sub_1ADE62B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x1081C40F159ABB6);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::TableEventMap::MapValues(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];
  int v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v21, (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  v6 = (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  v20 = 0;
  if ((int)v6 >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 32))(v8, a2, a3);
        if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a2, (int *)(a1 + 8)))
        {
          v10 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v20);
          if (!v10)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not map value ", 20);
            v18 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" for key ", 9);
            std::ostream::operator<<();
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
          }
          v11 = (int *)v10 + 5;
        }
        else
        {
          v11 = &v20;
        }
        v12 = *v11;
        v13 = v21;
        if ((int)v12 >= (int)((unint64_t)(v22 - (_BYTE *)v21) >> 3))
        {
          v19[0] = 0;
          std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&v21, v12 + 1, v19);
          v13 = v21;
        }
        if (v13[v12])
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Multiple values map to the same point: this code cannot ", 56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"handle this case.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
        }
        v13[v12] = v9;
        v7 = v20;
      }
      v20 = ++v7;
    }
    while (v7 < (int)v6);
  }
  v14 = operator new();
  v15 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)v14 = off_1E5D2A038;
  *(_DWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((_QWORD *)(v14 + 16), v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 3);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  return v14;
}

void sub_1ADE62DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::TableEventMap::Write(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD v10[34];

  kaldi::WriteToken(a2, a3, "TE");
  kaldi::WriteBasicType<int>(a2, a3);
  v6 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  kaldi::WriteBasicType<unsigned int>(a2, a3);
  kaldi::WriteToken(a2, a3, "(");
  if ((_DWORD)v6)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v7);
      if (v8)
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 56))(v8, a2, a3);
      else
        kaldi::WriteToken(a2, a3, "NULL");
      v7 += 8;
    }
    while (8 * v6 != v7);
  }
  result = kaldi::WriteToken(a2, a3, ")");
  if ((a3 & 1) == 0)
  {
    LOBYTE(v10[0]) = 10;
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v10, 1);
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "TableEventMap::Write(), could not write to stream.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

uint64_t kaldi::SplitEventMap::Prune(kaldi::SplitEventMap *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11));
  if (v2)
    v4 = v2;
  else
    v4 = v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v3;
    v4 = operator new();
    v7 = *((_DWORD *)this + 2);
    *(_QWORD *)v4 = off_1E5D29FD8;
    *(_DWORD *)(v4 + 8) = v7;
    kaldi::ConstIntegerSet<int>::ConstIntegerSet(v4 + 16, (uint64_t)this + 16);
    *(_QWORD *)(v4 + 80) = v2;
    *(_QWORD *)(v4 + 88) = v6;
  }
  return v4;
}

void sub_1ADE62FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C401B58D933);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SplitEventMap::MapValues(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t *v10;
  int v11;
  char *v12;
  int *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int *v24;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[34];
  int v30;
  int *v31;
  char *v32;
  unint64_t v33;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
  v7 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88), a2, a3);
  v8 = (int *)(a1 + 8);
  if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a2, (int *)(a1 + 8)))
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v9 = *(int **)(a1 + 56);
    if (v9 != *(int **)(a1 + 64))
    {
      v28 = v6;
      do
      {
        v30 = 0;
        v30 = *v9;
        v10 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, &v30);
        if (!v10)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Value ", 6);
          v26 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", for key ", 10);
          v27 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", cannot be mapped.", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
        }
        v11 = *((_DWORD *)v10 + 5);
        v12 = v32;
        if ((unint64_t)v32 >= v33)
        {
          v14 = (char *)v31;
          v15 = (v32 - (char *)v31) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = v33 - (_QWORD)v31;
          if ((uint64_t)(v33 - (_QWORD)v31) >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v33, v18);
            v14 = (char *)v31;
            v12 = v32;
          }
          else
          {
            v19 = 0;
          }
          v20 = (int *)&v19[4 * v15];
          *v20 = v11;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--v20 = v21;
          }
          v31 = v20;
          v32 = (char *)v13;
          v33 = (unint64_t)&v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v32 = v11;
          v13 = (int *)(v12 + 4);
        }
        v32 = (char *)v13;
        ++v9;
      }
      while (v9 != *(int **)(a1 + 64));
      v6 = v28;
    }
    std::__sort<std::__less<int,int> &,int *>();
    v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(v31, (int *)v32);
    if (v32 != (char *)v24)
      v32 = (char *)v24;
    v22 = operator new();
    kaldi::SplitEventMap::SplitEventMap(v22, *v8, &v31, v6, v7);
    if (v31)
    {
      v32 = (char *)v31;
      operator delete(v31);
    }
  }
  else
  {
    v22 = operator new();
    v23 = *(_DWORD *)(a1 + 8);
    *(_QWORD *)v22 = off_1E5D29FD8;
    *(_DWORD *)(v22 + 8) = v23;
    kaldi::ConstIntegerSet<int>::ConstIntegerSet(v22 + 16, a1 + 16);
    *(_QWORD *)(v22 + 80) = v6;
    *(_QWORD *)(v22 + 88) = v7;
  }
  return v22;
}

void sub_1ADE63348(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::SplitEventMap::Write(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD v7[34];

  kaldi::WriteToken(a2, a3, "SE");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2, *(_QWORD *)(a1 + 56));
  kaldi::WriteToken(a2, a3, "{");
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80), a2, a3);
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88), a2, a3);
  result = kaldi::WriteToken(a2, a3, "}");
  if ((a3 & 1) == 0)
  {
    LOBYTE(v7[0]) = 10;
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, 1);
  }
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "SplitEventMap::Write(), could not write to stream.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

uint64_t kaldi::EventMap::Lookup(uint64_t a1, int a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  _DWORD *v8;
  int v9;

  v3 = *(_DWORD **)a1;
  v4 = *(_DWORD **)(a1 + 8);
  if (v4 != *(_DWORD **)a1)
  {
    v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[2 * (v5 >> 1)];
      v9 = *v7;
      v8 = v7 + 2;
      v5 += ~(v5 >> 1);
      if (v9 >= a2)
        v5 = v6;
      else
        v3 = v8;
    }
    while (v5);
  }
  if (v3 == v4 || *v3 != a2)
    return 0;
  *a3 = v3[1];
  return 1;
}

uint64_t kaldi::EventMap::MaxResult(kaldi::EventMap *this)
{
  char *v1;
  char *v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[34];
  void *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  (*(void (**)(kaldi::EventMap *, void **, char **))(*(_QWORD *)this + 8))(this, &v11, &v14);
  v1 = v14;
  if (v14 == v15)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"EventMap::MaxResult(), empty result", 35);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    }
    v8 = 0x80000000;
  }
  else
  {
    v2 = v14 + 4;
    if (v14 + 4 != v15)
    {
      v3 = *(_DWORD *)v14;
      v4 = v14 + 4;
      do
      {
        v6 = *(_DWORD *)v4;
        v4 += 4;
        v5 = v6;
        v7 = v3 < v6;
        if (v3 <= v6)
          v3 = v5;
        if (v7)
          v1 = v2;
        v2 = v4;
      }
      while (v4 != v15);
    }
    v8 = *(unsigned int *)v1;
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  return v8;
}

void sub_1ADE635E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void *v12;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  v11 = *(void **)(v9 - 64);
  if (v11)
  {
    *(_QWORD *)(v9 - 56) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(v9 - 40);
  if (v12)
  {
    *(_QWORD *)(v9 - 32) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::ConstantEventMap::Map(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a1 + 8);
  return 1;
}

void kaldi::ConstantEventMap::MultiMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_DWORD **)(a3 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a3;
    v9 = ((uint64_t)v6 - *(_QWORD *)a3) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v12);
      v8 = *(_DWORD **)a3;
      v6 = *(_DWORD **)(a3 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *(_DWORD *)(a1 + 8);
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *(_DWORD *)(a1 + 8);
    v7 = v6 + 1;
  }
  *(_QWORD *)(a3 + 8) = v7;
}

void kaldi::ConstantEventMap::GetChildren(uint64_t a1, _QWORD *a2)
{
  a2[1] = *a2;
}

uint64_t kaldi::ConstantEventMap::Copy(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  kaldi::EventMap *v4;
  uint64_t result;
  int v6;

  v3 = *(unsigned int *)(a1 + 8);
  if ((v3 & 0x80000000) == 0 && (int)v3 < (int)((a2[1] - *a2) >> 3))
  {
    v4 = *(kaldi::EventMap **)(*a2 + 8 * v3);
    if (v4)
      return kaldi::EventMap::Copy(v4);
  }
  result = operator new();
  v6 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = off_1E5D2A338;
  *(_DWORD *)(result + 8) = v6;
  return result;
}

uint64_t kaldi::ConstantEventMap::MapValues(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = operator new();
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = off_1E5D2A338;
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t kaldi::ConstantEventMap::Prune(kaldi::ConstantEventMap *this)
{
  uint64_t result;
  int v3;

  if (*((_DWORD *)this + 2) == -1)
    return 0;
  result = operator new();
  v3 = *((_DWORD *)this + 2);
  *(_QWORD *)result = off_1E5D2A338;
  *(_DWORD *)(result + 8) = v3;
  return result;
}

void kaldi::ConstantEventMap::~ConstantEventMap(kaldi::ConstantEventMap *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::TableEventMap::Map(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t (***v7)(_QWORD, uint64_t, _DWORD *);
  int v9;

  v9 = 0;
  *a3 = -1;
  if (kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v9)
    && (v9 & 0x80000000) == 0
    && (v6 = *(_QWORD *)(a1 + 16), v9 < (int)((unint64_t)(*(_QWORD *)(a1 + 24) - v6) >> 3))
    && (v7 = *(uint64_t (****)(_QWORD, uint64_t, _DWORD *))(v6 + 8 * v9)) != 0)
  {
    return (**v7)(v7, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t kaldi::TableEventMap::MultiMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v11 = 0;
  result = kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v11);
  if ((result & 1) != 0)
  {
    if ((v11 & 0x80000000) == 0)
    {
      v7 = *(_QWORD *)(a1 + 16);
      if (v11 < (int)((unint64_t)(*(_QWORD *)(a1 + 24) - v7) >> 3))
      {
        result = *(_QWORD *)(v7 + 8 * v11);
        if (result)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, a2, a3);
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8 != v9)
    {
      v10 = 0;
      do
      {
        result = *(_QWORD *)(v9 + 8 * v10);
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, a2, a3);
          v9 = *(_QWORD *)(a1 + 16);
          v8 = *(_QWORD *)(a1 + 24);
        }
        ++v10;
      }
      while (v10 < (v8 - v9) >> 3);
    }
  }
  return result;
}

void kaldi::TableEventMap::GetChildren(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = *(_QWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 != v4)
  {
    v7 = 0;
    v8 = (_QWORD *)(a2 + 16);
    do
    {
      v9 = *(_QWORD *)(v4 + 8 * v7);
      if (v9)
      {
        if ((unint64_t)v2 >= *v8)
        {
          v10 = ((uint64_t)v2 - *(_QWORD *)a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v11 = *v8 - *(_QWORD *)a2;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
          {
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v8, v13);
            v9 = *(_QWORD *)(v4 + 8 * v7);
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v9;
          v2 = v15 + 8;
          v17 = *(_QWORD **)a2;
          v16 = *(_QWORD **)(a2 + 8);
          if (v16 != *(_QWORD **)a2)
          {
            do
            {
              v18 = *--v16;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = *(_QWORD **)a2;
          }
          *(_QWORD *)a2 = v15;
          *(_QWORD *)(a2 + 8) = v2;
          *(_QWORD *)(a2 + 16) = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v2++ = v9;
        }
        *(_QWORD *)(a2 + 8) = v2;
        v4 = *(_QWORD *)(a1 + 16);
        v3 = *(_QWORD *)(a1 + 24);
      }
      ++v7;
    }
    while (v7 < (v3 - v4) >> 3);
  }
}

uint64_t kaldi::TableEventMap::Copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  void *__p;
  _BYTE *v15;

  v4 = (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
  v13 = 0;
  std::vector<kaldi::EventMap *>::vector(&__p, v4, &v13);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v6 + 8 * v7);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, a2);
        *((_QWORD *)__p + v7) = v9;
        v6 = *(_QWORD *)(a1 + 16);
        v5 = *(_QWORD *)(a1 + 24);
      }
      ++v7;
    }
    while (v7 < (v5 - v6) >> 3);
  }
  v10 = operator new();
  v11 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)v10 = off_1E5D2A038;
  *(_DWORD *)(v10 + 8) = v11;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((_QWORD *)(v10 + 16), __p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1ADE63BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x1081C40F159ABB6);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::TableEventMap::~TableEventMap(kaldi::TableEventMap *this)
{
  kaldi::TableEventMap::~TableEventMap(this);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = off_1E5D2A038;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 72))(*v2);
        *v2 = 0;
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 2);
  }
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t kaldi::SplitEventMap::Map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BOOL4 v7;
  uint64_t v8;
  int v9;

  v9 = 0;
  result = kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v9);
  if ((_DWORD)result)
  {
    v7 = kaldi::ConstIntegerSet<int>::count(a1 + 16, v9);
    v8 = 80;
    if (!v7)
      v8 = 88;
    return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(a1 + v8))(*(_QWORD *)(a1 + v8), a2, a3);
  }
  return result;
}

uint64_t kaldi::SplitEventMap::MultiMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  int v15;

  v15 = 0;
  if (!kaldi::EventMap::Lookup(a2, *(_DWORD *)(a1 + 8), &v15))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 8))(*(_QWORD *)(a1 + 80), a2, a3);
LABEL_12:
    v13 = (_QWORD *)(a1 + 88);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v13 + 8))(*v13, a2, a3);
  }
  v6 = *(_DWORD **)(a1 + 56);
  v7 = *(_DWORD **)(a1 + 64);
  if (v7 == v6)
    goto LABEL_12;
  v8 = v7 - v6;
  do
  {
    v9 = v8 >> 1;
    v10 = &v6[v8 >> 1];
    v12 = *v10;
    v11 = v10 + 1;
    v8 += ~(v8 >> 1);
    if (v12 < v15)
      v6 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v6 == v7 || v15 < *v6)
    goto LABEL_12;
  v13 = (_QWORD *)(a1 + 80);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v13 + 8))(*v13, a2, a3);
}

void kaldi::SplitEventMap::GetChildren(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v4 = *(_QWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v6 = a2 + 16;
  v5 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v4 >= v5)
  {
    v8 = v5 - (_QWORD)v4;
    v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1)
      v9 = 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v10);
    v13 = &v11[v12];
    *v11 = *(_QWORD *)(a1 + 80);
    v7 = v11 + 1;
    v15 = *(_QWORD **)a2;
    v14 = *(_QWORD **)(a2 + 8);
    if (v14 != *(_QWORD **)a2)
    {
      do
      {
        v16 = *--v14;
        *--v11 = v16;
      }
      while (v14 != v15);
      v14 = *(_QWORD **)a2;
    }
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = *(_QWORD *)(a1 + 80);
    v7 = v4 + 1;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v17 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v17)
  {
    v19 = ((uint64_t)v7 - *(_QWORD *)a2) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v17 - *(_QWORD *)a2;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v22);
    else
      v23 = 0;
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *(_QWORD *)v24 = *(_QWORD *)(a1 + 88);
    v18 = v24 + 8;
    v27 = *(_QWORD **)a2;
    v26 = *(_QWORD **)(a2 + 8);
    if (v26 != *(_QWORD **)a2)
    {
      do
      {
        v28 = *--v26;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = *(_QWORD **)a2;
    }
    *(_QWORD *)a2 = v24;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v7 = *(_QWORD *)(a1 + 88);
    v18 = v7 + 1;
  }
  *(_QWORD *)(a2 + 8) = v18;
}

uint64_t kaldi::SplitEventMap::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = operator new();
  v5 = *(_DWORD *)(a1 + 8);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a2);
  v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), a2);
  *(_QWORD *)v4 = off_1E5D29FD8;
  *(_DWORD *)(v4 + 8) = v5;
  kaldi::ConstIntegerSet<int>::ConstIntegerSet(v4 + 16, a1 + 16);
  *(_QWORD *)(v4 + 80) = v6;
  *(_QWORD *)(v4 + 88) = v7;
  return v4;
}

void sub_1ADE63FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C401B58D933);
  _Unwind_Resume(a1);
}

void kaldi::SplitEventMap::~SplitEventMap(kaldi::SplitEventMap *this)
{
  kaldi::SplitEventMap::~SplitEventMap(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_1E5D29FD8;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
    operator delete(v5);
}

uint64_t quasar::addPhoneSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;

  quasar::copyAndTrim(a2, (std::string *)__p);
  std::string::basic_string[abi:ne180100]<0>(v54, " .");
  quasar::splitStringSimple((uint64_t)__p, (uint64_t *)v54, &v56);
  if (v55 < 0)
    operator delete(v54[0]);
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  v12 = v56;
  v13 = v57;
  while (v12 != v13)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      v15 = *(_QWORD *)(v12 + 8);
      if (!v15)
      {
LABEL_25:
        if (quasar::gLogLevel >= 5)
        {
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Empty phone in phonetic sequence: ", 34);
          v24 = *(char *)(a2 + 23);
          if (v24 >= 0)
            v25 = a2;
          else
            v25 = *(_QWORD *)a2;
          if (v24 >= 0)
            v26 = *(unsigned __int8 *)(a2 + 23);
          else
            v26 = *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        goto LABEL_33;
      }
      if (v15 != 3)
      {
LABEL_17:
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
        v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 96))(a4, v12);
        if (v20 == -1)
        {
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not interpret ", 20);
          v29 = *(char *)(v12 + 23);
          if (v29 >= 0)
            v30 = v12;
          else
            v30 = *(_QWORD *)v12;
          if (v29 >= 0)
            v31 = *(unsigned __int8 *)(v12 + 23);
          else
            v31 = *(_QWORD *)(v12 + 8);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
          v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" as a phone. Found in phonetic sequence: ", 41);
          v34 = *(char *)(a2 + 23);
          if (v34 >= 0)
            v35 = a2;
          else
            v35 = *(_QWORD *)a2;
          if (v34 >= 0)
            v36 = *(unsigned __int8 *)(a2 + 23);
          else
            v36 = *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        if (a6)
          v21 = 0;
        else
          v21 = v20;
        if (a5)
          v22 = 0;
        else
          v22 = v20;
        __p[0] = (void *)__PAIR64__(v21, v22);
        LODWORD(__p[1]) = 0;
        HIDWORD(__p[1]) = v19;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, a3, __p);
        a3 = v19;
        goto LABEL_33;
      }
      v14 = *(unsigned __int16 **)v12;
    }
    else
    {
      if (!*(_BYTE *)(v12 + 23))
        goto LABEL_25;
      v14 = (unsigned __int16 *)v12;
      if (*(_BYTE *)(v12 + 23) != 3)
        goto LABEL_17;
    }
    v16 = *v14;
    v17 = *((unsigned __int8 *)v14 + 2);
    if (v16 != 26995 || v17 != 108)
      goto LABEL_17;
LABEL_33:
    v12 += 24;
  }
  __p[0] = &v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a3;
}

void sub_1ADE643D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  JUMPOUT(0x1ADE643F4);
}

void sub_1ADE643F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::getPhoneFst(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15[3];
  void **v16;

  quasar::splitStringSimple(a1, a3, v15);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a6);
  v11 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)a6);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a6);
  v12 = a6[1];
  *(_DWORD *)(v12 + 88) = v11;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  *(_QWORD *)(v12 + 8) = v13 & 0xCCFFFFF0007 | (((v13 >> 35) & 1) << 37) | *(_QWORD *)(v12 + 8) & 4;
  v14 = quasar::addPhoneSequence((uint64_t)a6, a1, v11, a2, a4, a5);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)a6, v14, 0.0);
  v16 = (void **)v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_1ADE644FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1ADE646FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADE647A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<objc_object  {objcproto27_EARLanguageModelDataSource}* {__strong},float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<objc_object  {objcproto27_EARLanguageModelDataSource}* {__strong},float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 2);
        v4 -= 16;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1ADE64A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADE64BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADE64D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22SentencePieceProcessorENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22SentencePieceProcessorENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADE64DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22SentencePieceProcessorENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40CA8;
  a1[1] = 0;
  sentencepiece::SentencePieceProcessor::SentencePieceProcessor((sentencepiece::SentencePieceProcessor *)(a1 + 3));
  return a1;
}

void sub_1ADE64E0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<sentencepiece::SentencePieceProcessor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

float SimpleClassNgram::replaceWithClass(SimpleClassNgram *this, const unsigned int *a2, unsigned int *a3, unsigned int a4)
{
  float v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  _DWORD **v12;
  long double *v13;
  float v14;
  unsigned int *v16;
  _BYTE v17[24];
  uint64_t v18;

  v5 = 0.0;
  if (a4)
  {
    v8 = 0;
    v9 = a4;
    v10 = (_QWORD *)((char *)this + 200);
    while (1)
    {
      v11 = a2[v8];
      if (v11 == -1)
        break;
      LOBYTE(v16) = 0;
      v12 = (_DWORD **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert(v10, v11, &v16);
      LHashIter<unsigned int const*,double>::LHashIter((uint64_t)v17, v12, 0);
      v16 = 0;
      v13 = (long double *)LHashIter<unsigned int const*,double>::next((uint64_t)v17, &v16);
      if (v13 && Ngram::findProb(this, *v16, &emptyContext))
      {
        a3[v8] = *v16;
        v14 = log10(*v13);
        v5 = v5 + v14;
      }
      else
      {
        a3[v8] = a2[v8];
      }
      if (v18)
        MEMORY[0x1AF44D160](v18, 0x50C80EE9192B6);
      if (v9 == ++v8)
      {
        LODWORD(v8) = v9;
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  a3[v8] = -1;
  return v5;
}

void sub_1ADE64FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

char *SimpleClassNgram::contextID(SimpleClassNgram *this, const unsigned int *a2, Vocab *a3, unsigned int *a4)
{
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  _BYTE v14[12];
  int v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 288))
    return Ngram::contextID(this, a2, (const unsigned int *)a3, a4);
  v8 = -1;
  if ((_DWORD)a2 != -1)
  {
    v13 = a2;
    *(_DWORD *)v14 = -1;
    SimpleClassNgram::replaceWithClass(this, &v13, &v16, 1u);
    v8 = v16;
  }
  v9 = Vocab::length((uint64_t)a3, a2);
  *(_DWORD *)&v14[8] = 0;
  v15 = 0;
  v13 = 0;
  *(_QWORD *)v14 = (v9 + 1);
  if (v9 == -1)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v13, v9, 0);
    v11 = *(_QWORD *)&v14[4];
    v10 = (int)v13;
  }
  SimpleClassNgram::replaceWithClass(this, (const unsigned int *)a3, (unsigned int *)(v11 - 4 * v10), *((_DWORD *)this + 44) - 1);
  v12 = Ngram::contextID(this, v8, (const unsigned int *)(*(_QWORD *)&v14[4] - 4 * (int)v13), a4);
  if (*(_QWORD *)&v14[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v14[4], 0x1000C8052888210);
  return v12;
}

void sub_1ADE65134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

float SimpleClassNgram::contextBOW(SimpleClassNgram *this, const unsigned int *a2, unsigned int a3)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  _BYTE v12[12];
  int v13;

  if (*((_BYTE *)this + 288))
    return Ngram::contextBOW(this, a2, a3);
  v7 = Vocab::length((uint64_t)a2, a2);
  *(_DWORD *)&v12[8] = 0;
  v13 = 0;
  v11 = 0;
  *(_QWORD *)v12 = (v7 + 1);
  if (v7 == -1)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v11, v7, 0);
    v9 = *(_QWORD *)&v12[4];
    v8 = v11;
  }
  SimpleClassNgram::replaceWithClass(this, a2, (unsigned int *)(v9 - 4 * v8), *((_DWORD *)this + 44) - 1);
  v10 = Ngram::contextBOW(this, (const unsigned int *)(*(_QWORD *)&v12[4] - 4 * v11), a3);
  if (*(_QWORD *)&v12[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v12[4], 0x1000C8052888210);
  return v10;
}

void sub_1ADE65260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float SimpleClassNgram::wordProb(SimpleClassNgram *this, uint64_t a2, const unsigned int *a3)
{
  float v6;
  uint64_t v7;
  const unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  const unsigned int *v11;
  unsigned int v12;
  unsigned int v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 288))
    return LM::wordProb(this, a2, a3);
  v13[0] = a2;
  v13[1] = -1;
  v6 = SimpleClassNgram::replaceWithClass(this, v13, &v12, 1u);
  v7 = v12;
  v9 = Vocab::length((uint64_t)a3, v8);
  *(_DWORD *)Array<unsigned int>::operator[]((int *)this + 62, v9) = -1;
  v10 = (unsigned int *)Array<unsigned int>::operator[]((int *)this + 62, 0);
  SimpleClassNgram::replaceWithClass(this, a3, v10, *((_DWORD *)this + 44) - 1);
  v11 = (const unsigned int *)Array<unsigned int>::operator[]((int *)this + 62, 0);
  return v6 + LM::wordProb(this, v7, v11);
}

float SimpleClassNgram::wordProbRecompute(SimpleClassNgram *this, uint64_t a2, const unsigned int *a3)
{
  float result;
  float v5;
  uint64_t v6;
  const unsigned int *v7;
  unsigned int v8;
  unsigned int v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 288))
  {
    LM::wordProbRecompute(this, a2, a3);
  }
  else
  {
    v9[0] = a2;
    v9[1] = -1;
    v5 = SimpleClassNgram::replaceWithClass(this, v9, &v8, 1u);
    v6 = v8;
    v7 = (const unsigned int *)Array<unsigned int>::operator[]((int *)this + 62, 0);
    return v5 + LM::wordProb(this, v6, v7);
  }
  return result;
}

float SimpleClassNgram::sentenceProb(uint64_t a1, unsigned int *a2, double *a3)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  _BYTE v14[12];
  int v15;

  if (*(_BYTE *)(a1 + 288) || !*(_BYTE *)(a1 + 8) && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u))
    return LM::sentenceProb(a1, (uint64_t)a2, (uint64_t)a3);
  v7 = Vocab::length((uint64_t)a2, a2);
  *(_DWORD *)&v14[8] = 0;
  v15 = 0;
  v13 = 0;
  *(_QWORD *)v14 = v7 + 1;
  if (v7 == -1)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v13, v7, 0);
    v9 = *(_QWORD *)&v14[4];
    v8 = v13;
  }
  v10 = SimpleClassNgram::replaceWithClass((SimpleClassNgram *)a1, a2, (unsigned int *)(v9 - 4 * v8), v7);
  *(_BYTE *)(a1 + 288) = 1;
  v11 = LM::sentenceProb(a1, *(_QWORD *)&v14[4] - 4 * v13, (uint64_t)a3);
  *(_BYTE *)(a1 + 288) = 0;
  *a3 = *a3 + v10;
  v12 = v10 + v11;
  if (*(_QWORD *)&v14[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v14[4], 0x1000C8052888210);
  return v12;
}

void sub_1ADE655D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x1AF44D160](a11, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

BOOL SimpleClassNgram::readClasses(SimpleClassNgram *this, File *a2)
{
  _BOOL8 v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _DWORD **v12;
  const unsigned int *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  Vocab *v19;
  _BYTE v20[24];
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  unsigned int v24;

  if (!ClassNgram::readClasses(this, a2) || *((_BYTE *)this + 289))
    return 0;
  v24 = 0;
  LHashIter<unsigned int,LHash<unsigned int const*,double>>::LHashIter((uint64_t)v22, (_DWORD **)this + 25, 0);
  v6 = (_QWORD *)MEMORY[0x1E0DE4A50];
  while (LHashIter<unsigned int,LHash<unsigned int const*,double>>::next((uint64_t)v22, &v24))
  {
    if (Map2<unsigned int,unsigned int const*,double>::numEntries((_DWORD **)this + 25, v24) >= 2)
    {
      v7 = File::position((const char **)a2, v6);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"word ", 5);
      v9 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v24);
      v10 = strlen(v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" has multiple class memberships\n", 32);
      *((_BYTE *)this + 289) = 1;
    }
    LOBYTE(v19) = 0;
    v12 = (_DWORD **)LHash<unsigned int,LHash<unsigned int const*,double>>::insert((_QWORD *)this + 25, v24, &v19);
    LHashIter<unsigned int const*,double>::LHashIter((uint64_t)v20, v12, 0);
    v19 = 0;
    LHashIter<unsigned int const*,double>::next((uint64_t)v20, &v19);
    if (Vocab::length((uint64_t)v19, v13) >= 3)
    {
      v14 = File::position((const char **)a2, v6);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"class ", 6);
      v16 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), *(unsigned int *)v19);
      v17 = strlen(v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" expands to string of more than one word\n", 41);
      *((_BYTE *)this + 289) = 1;
    }
    if (v21)
      MEMORY[0x1AF44D160](v21, 0x50C80EE9192B6);
  }
  v4 = *((_BYTE *)this + 289) == 0;
  if (v23)
    MEMORY[0x1AF44D160](v23, 0x1000C8052888210);
  return v4;
}

void sub_1ADE6580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    MEMORY[0x1AF44D160](a17, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void SimpleClassNgram::~SimpleClassNgram(SimpleClassNgram *this)
{
  ClassNgram::~ClassNgram(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(v9 - 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<char const*,unsigned int> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int const*,double> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v10 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  int v20;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 2;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8));
        if ((result & 0x80000000) != 0)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, (int *)a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, (int *)a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, (int *)a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(&v9[v13 >> 1], v9, (int *)a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9, &v9[v13 >> 1], (int *)a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 1, v15 - 1, (int *)a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v9 + 2, &v9[v14 + 1], (int *)a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(v9 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>((unsigned int *)v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,LHashIter<unsigned int,double> &>(v9, (int *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *>(v17 + 1, (int *)a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unsigned int *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != (int *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *,unsigned int *>((unsigned int *)v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,LHash<unsigned int const*,double>> &,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(a2 - 1) + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *a1 + 8)) & 0x80000000) != 0)
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LHashIter<unsigned int,double> &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned int *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v10 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *v9 + 8)) & 0x80000000) != 0)
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14 + 12) = *(int *)((char *)a1 + v14 + 8);
        if (v14 == -8)
          break;
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(a3 + 16))(*(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * v13 + 8), *(unsigned int *)(*(_QWORD *)a3 + 8 + 16 * *(unsigned int *)((char *)a1 + v14 + 4) + 8));
        v14 -= 4;
        if ((v15 & 0x80000000) == 0)
        {
          v16 = (int *)((char *)a1 + v14 + 12);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned int *)a2;
    }
    v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2)
      return 1;
  }
}

float kaldi::AutoRegressiveBeamSearchDecoder::AutoRegressiveBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  int v4;
  float result;
  _QWORD v6[34];

  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"opts_.min_active > 0", 20);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*(_DWORD *)(a1 + 20) < v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"opts_.max_active >= opts_.min_active", 36);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  result = *(float *)(a1 + 24);
  if (result <= 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"opts_.beam > 0", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

void sub_1ADE66458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void *v12;
  void *v13;

  v12 = *(void **)(v9 + 152);
  if (v12)
  {
    *(_QWORD *)(v9 + 160) = v12;
    operator delete(v12);
  }
  a9 = (void **)(v9 + 128);
  std::vector<std::vector<std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v9 + 80);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  v13 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 64) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void kaldi::AutoRegressiveBeamSearchDecoder::InitDecoding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **__src[3];
  __int128 v10;
  _OWORD v11[3];
  char v12;
  __int128 v13[11];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x80000000) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "decodable->BOSIndex() >= 0 && decodable->EOSIndex() >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_DWORD *)(a1 + 36) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_DWORD *)(a1 + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  LODWORD(__src[0]) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 56), (char *)__src, (uint64_t)__src + 4, 1uLL);
  LODWORD(__src[0]) = *(_DWORD *)(a1 + 8);
  *(void ***)((char *)&__src[1] + 4) = 0;
  *(void ***)((char *)__src + 4) = 0;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*>(a1 + 80, (__int128 *)__src, v13, 1uLL);
  std::deque<int>::~deque[abi:ne180100](v11);
  v5 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 96;
      std::deque<int>::~deque[abi:ne180100]((_QWORD *)(v4 - 56));
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 112) = v5;
  v7 = *(void ***)(a1 + 128);
  v8 = *(void ***)(a1 + 136);
  while (v8 != v7)
  {
    v8 -= 3;
    __src[0] = v8;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](__src);
  }
  *(_QWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
}

void sub_1ADE666A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::Finished(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a1 + 52);
  v4 = *(_DWORD *)(a1 + 12);
  if (v4 < 0)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  return v3 == v4 || *(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 64);
}

uint64_t kaldi::AutoRegressiveBeamSearchDecoder::AdvanceDecoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  std::vector<int> __p;
  void *v13[3];
  void *v14;
  void *v15;
  uint64_t v16;

  if (!(_DWORD)a3)
    return 0;
  v6 = 0;
  v7 = a1 + 56;
  v8 = *(_DWORD *)(a1 + 52);
  while (1)
  {
    v9 = *(_DWORD *)(a1 + 12);
    if (v9 < 0)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    if (v8 == v9 || *(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 64))
      break;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v10 = (**(uint64_t (***)(uint64_t, _QWORD, uint64_t, void **))a2)(a2, *(unsigned int *)(a1 + 52), v7, &v14);
    if ((v10 & 1) != 0)
    {
      kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypLogLikelihoods(a1, (uint64_t *)&v14);
      kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypScores(a1, (uint64_t)&v14, (float **)v13);
      kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(a1, (uint64_t *)v13, &__p);
      kaldi::AutoRegressiveBeamSearchDecoder::UpdateDecoderState(a1, a2, (uint64_t *)&v14, v13, &__p.__begin_);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v13[0])
      {
        v13[1] = v13[0];
        operator delete(v13[0]);
      }
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    if (!v10)
      break;
    v8 = *(_DWORD *)(a1 + 52) + 1;
    *(_DWORD *)(a1 + 52) = v8;
    v6 = (v6 + 1);
    if ((_DWORD)a3 == (_DWORD)v6)
      return a3;
  }
  return v6;
}

void sub_1ADE66854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypLogLikelihoods(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0;
    v8 = v6 / 96;
    v9 = *a2;
    v10 = *(int *)(a1 + 32);
    if (v8 <= 1)
      v8 = 1;
    v11 = 4 * v10;
    do
    {
      if ((_DWORD)v10)
      {
        v12 = 0;
        do
        {
          *(float *)(v9 + v12) = *(float *)(v4 + 96 * v7 + 4) + *(float *)(v9 + v12);
          v12 += 4;
        }
        while (v11 != v12);
      }
      ++v7;
      v9 += v11;
    }
    while (v7 != v8);
  }
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  if (v13 != v14)
  {
    v15 = a2 + 2;
    v16 = (_DWORD *)a2[1];
    do
    {
      if ((unint64_t)v16 >= *v15)
      {
        v18 = (_DWORD *)*a2;
        v19 = ((uint64_t)v16 - *a2) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = *v15 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v22);
          v18 = (_DWORD *)*a2;
          v16 = (_DWORD *)a2[1];
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = *(_DWORD *)(v13 + 4);
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v25 = *--v16;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *a2 = (uint64_t)v24;
        a2[1] = (uint64_t)v17;
        a2[2] = (uint64_t)&v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v16 = *(_DWORD *)(v13 + 4);
        v17 = v16 + 1;
      }
      a2[1] = (uint64_t)v17;
      v13 += 96;
      v16 = v17;
    }
    while (v13 != v14);
  }
  if (*(_BYTE *)(a1 + 3))
    kaldi::AutoRegressiveBeamSearchDecoder::MergeHyps(a1, a2);
}

float kaldi::AutoRegressiveBeamSearchDecoder::ComputeHypScores@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float **a3@<X8>)
{
  float result;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  float v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *(float *)(a1 + 28);
  if (result != 0.0)
  {
    v6 = *a3;
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
    v9 = v8 - v7;
    if (v8 == v7)
    {
      v19 = *a3;
    }
    else
    {
      v10 = 0;
      v11 = v9 / 96;
      v12 = *(int *)(a1 + 32);
      v13 = *(int *)(a1 + 48);
      if (v11 <= 1)
        v14 = 1;
      else
        v14 = v11;
      v15 = 4 * v12;
      do
      {
        v16 = *(float *)(a1 + 28);
        if ((_DWORD)v12)
        {
          v17 = 0;
          v18 = v16 * (float)(*(_DWORD *)(v7 + 96 * v10 + 16) + 1);
          do
          {
            v6[v17 / 4] = v18 + v6[v17 / 4];
            v17 += 4;
          }
          while (v15 != v17);
          v16 = *(float *)(a1 + 28);
        }
        v19 = &v6[(unint64_t)v15 / 4];
        result = v6[v13] - v16;
        v6[v13] = result;
        ++v10;
        v6 = (float *)((char *)v6 + v15);
      }
      while (v10 != v14);
    }
    v20 = *(_QWORD *)(a1 + 104);
    v21 = *(_QWORD *)(a1 + 112) - v20;
    if (v21)
    {
      v22 = v21 / 96;
      if (v22 <= 1)
        v22 = 1;
      v23 = (int *)(v20 + 16);
      do
      {
        v24 = *v23;
        v23 += 24;
        result = *v19 + (float)((float)v24 * *(float *)(a1 + 28));
        *v19++ = result;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

void kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::vector<int> *a3@<X8>)
{
  int *begin;
  int *end;
  int v8;
  int *v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int *v33;
  std::vector<int>::pointer v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  float v39;
  int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;

  std::vector<int>::vector(a3, (a2[1] - *a2) >> 2);
  begin = a3->__begin_;
  end = a3->__end_;
  if (a3->__begin_ != end)
  {
    v8 = 0;
    v9 = a3->__begin_;
    do
      *v9++ = v8++;
    while (v9 != end);
  }
  v10 = *(int *)(a1 + 20);
  if (end - begin <= v10)
  {
    v45 = a2;
    if ((char *)end - (char *)begin < 513)
    {
      v42 = 0;
      v44 = 0;
    }
    else
    {
      v42 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
      v44 = v43;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(begin, end, &v45, end - begin, v42, v44);
    if (v42)
      operator delete(v42);
  }
  else
  {
    v45 = a2;
    if ((_DWORD)v10)
    {
      v11 = &begin[v10];
      if ((int)v10 >= 2)
      {
        v12 = (v10 - 2) >> 1;
        v13 = v12 + 1;
        v14 = &begin[v12];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v45, v10, v14--);
          --v13;
        }
        while (v13);
      }
      if (v11 != end)
      {
        v15 = &begin[v10];
        do
        {
          v16 = *v15;
          v17 = *begin;
          if (*(float *)(*a2 + 4 * v16) > *(float *)(*a2 + 4 * v17))
          {
            *v15 = v17;
            *begin = v16;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v45, v10, begin);
          }
          ++v15;
        }
        while (v15 != end);
      }
      if ((int)v10 >= 2)
      {
        v18 = v10;
        do
        {
          v19 = 0;
          v20 = *begin;
          v21 = v45;
          v22 = begin;
          do
          {
            v23 = v22;
            v22 += v19 + 1;
            v24 = 2 * v19;
            v19 = (2 * v19) | 1;
            v25 = v24 + 2;
            if (v25 < v18 && *(float *)(*v21 + 4 * *v22) > *(float *)(*v21 + 4 * v22[1]))
            {
              ++v22;
              v19 = v25;
            }
            *v23 = *v22;
          }
          while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
          if (v22 == --v11)
          {
            *v22 = v20;
          }
          else
          {
            *v22 = *v11;
            *v11 = v20;
            v26 = (char *)v22 - (char *)begin + 4;
            if (v26 >= 5)
            {
              v27 = (((unint64_t)v26 >> 2) - 2) >> 1;
              v28 = &begin[v27];
              v29 = *v28;
              v30 = *v22;
              v31 = *v21;
              v32 = *(float *)(v31 + 4 * v30);
              if (*(float *)(v31 + 4 * v29) > v32)
              {
                do
                {
                  v33 = v28;
                  *v22 = v29;
                  if (!v27)
                    break;
                  v27 = (v27 - 1) >> 1;
                  v28 = &begin[v27];
                  v29 = *v28;
                  v22 = v33;
                }
                while (*(float *)(v31 + 4 * v29) > v32);
                *v33 = v30;
              }
            }
          }
        }
        while (v18-- > 2);
      }
    }
    v35 = a3->__begin_;
    v36 = *(int *)(a1 + 16);
    v37 = *(int *)(a1 + 20);
    v38 = &a3->__begin_[v36];
    if ((_DWORD)v36 != (_DWORD)v37)
    {
      v39 = *(float *)(*a2 + 4 * *v35) - *(float *)(a1 + 24);
      v40 = &v35[v37];
      v41 = 4 * v37 - 4 * v36;
      while (*(float *)(*a2 + 4 * *v38) >= v39)
      {
        ++v38;
        v41 -= 4;
        if (!v41)
        {
          v38 = v40;
          break;
        }
      }
    }
    if (v38 != a3->__end_)
      a3->__end_ = v38;
  }
}

void sub_1ADE66EBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  if (v2)
    operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::AutoRegressiveBeamSearchDecoder::UpdateDecoderState(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, int **a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  float v42;
  float *v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  _DWORD *v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  void *v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float *v63;
  int v64;
  int v65;
  int v66;
  char *v67;
  char *v68;
  float *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  _DWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  int v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  int v113;
  _DWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  char **v117;
  char *v118;
  unint64_t v119;
  int v120;
  int v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  int v130;
  int v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  int v136;
  char *v137;
  int v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  int v144;
  int v145;
  int v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  void **v153;
  int v154;
  int *v155;
  uint64_t v156;
  int v157;
  int v158;
  _QWORD *v159;
  int v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _QWORD v164[6];
  char v165;
  _OWORD v166[2];
  int v167;
  void *__p[2];
  char *v169;
  uint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  __int128 v173;
  unint64_t v174;
  __int128 v175;
  unint64_t v176;
  __int128 v177;
  _QWORD v178[2];

  v177 = 0uLL;
  v178[0] = 0;
  v175 = 0uLL;
  v176 = 0;
  v173 = 0uLL;
  v174 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v169 = 0;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v153 = (void **)(a1 + 80);
  v8 = *(_DWORD *)(a1 + 32);
  memset(v166, 0, sizeof(v166));
  v167 = 1065353216;
  v9 = *a5;
  v155 = a5[1];
  if (*a5 != v155)
  {
    v12 = a2;
    v13 = -1431655765 * ((unint64_t)(v7 - v6) >> 5) * v8;
    v154 = v13;
    while (1)
    {
      v14 = *v9;
      if (*v9 >= v13)
        break;
      v15 = *(_DWORD *)(a1 + 32);
      v157 = v14 % v15;
      v158 = v14 / v15;
      v156 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 8))(v12, *(unsigned int *)(a1 + 52), *(unsigned int *)(*(_QWORD *)(a1 + 56) + 4 * (v14 / v15)));
      v16 = v158;
      v17 = *v153;
      v18 = (uint64_t)*v153 + 96 * v158;
      v19 = *(_QWORD *)(v18 + 32);
      v20 = *(_OWORD *)(v18 + 16);
      v161 = *(_OWORD *)v18;
      v162 = v20;
      v163 = v19;
      std::deque<int>::deque((uint64_t)v164, (_QWORD *)(v18 + 40));
      v165 = v17[96 * v16 + 88];
      v21 = *v9;
      v22 = *a3;
      *(float *)&v156 = *(float *)(*a3 + 4 * v21) - *((float *)&v161 + 1);
      if (v157 == *(_DWORD *)(a1 + 48))
        v23 = -1;
      else
        v23 = v157;
      kaldi::AutoRegressiveBeamSearchDecoder::HypInfo::Update((kaldi::AutoRegressiveBeamSearchDecoder::HypInfo *)&v161, *(float *)(v22 + 4 * v21), *(float *)(*a4 + 4 * v21), v23);
      if (v157 == *(_DWORD *)(a1 + 40))
      {
        v24 = *((_QWORD *)&v173 + 1);
        if (*((_QWORD *)&v173 + 1) >= v174)
        {
          v27 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v173, &v161);
        }
        else
        {
          v25 = v161;
          v26 = v162;
          *(_QWORD *)(*((_QWORD *)&v173 + 1) + 32) = v163;
          *(_OWORD *)v24 = v25;
          *(_OWORD *)(v24 + 16) = v26;
          std::deque<int>::deque(v24 + 40, v164);
          *(_BYTE *)(v24 + 88) = v165;
          v27 = v24 + 96;
        }
        *((_QWORD *)&v173 + 1) = v27;
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3);
        v43 = (float *)__p[1];
        if (__p[1] < v169)
        {
          v56 = v157;
          v55 = v158;
          v57 = v156;
          *(_DWORD *)__p[1] = v54;
          *((_DWORD *)v43 + 1) = v55;
          *((_DWORD *)v43 + 2) = v56;
          *((_DWORD *)v43 + 3) = v57;
LABEL_34:
          v58 = v43 + 4;
LABEL_50:
          __p[1] = v58;
          goto LABEL_51;
        }
        v59 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v61 = v169 - (char *)__p[0];
        if ((v169 - (char *)__p[0]) >> 3 > v60)
          v60 = v61 >> 3;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
          v62 = 0xFFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v169, v62);
        v63 = (float *)&v48[16 * v59];
        v65 = v157;
        v64 = v158;
        v66 = v156;
        *(_DWORD *)v63 = v54;
        *((_DWORD *)v63 + 1) = v64;
        *((_DWORD *)v63 + 2) = v65;
        *((_DWORD *)v63 + 3) = v66;
        v68 = (char *)__p[0];
        v67 = (char *)__p[1];
        v69 = v63;
        if (__p[1] != __p[0])
        {
          do
          {
            *((_OWORD *)v69 - 1) = *((_OWORD *)v67 - 1);
            v69 -= 4;
            v67 -= 16;
          }
          while (v67 != v68);
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0 || v165)
      {
        v52 = (char *)*((_QWORD *)&v177 + 1);
        if (*((_QWORD *)&v177 + 1) >= v178[0])
        {
          v71 = (char *)v177;
          v72 = (uint64_t)(*((_QWORD *)&v177 + 1) - v177) >> 2;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v74 = v178[0] - v177;
          if ((uint64_t)(v178[0] - v177) >> 1 > v73)
            v73 = v74 >> 1;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
            v75 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v75 = v73;
          if (v75)
          {
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v178, v75);
            v52 = (char *)*((_QWORD *)&v177 + 1);
            v71 = (char *)v177;
          }
          else
          {
            v76 = 0;
          }
          v85 = &v76[4 * v72];
          *(_DWORD *)v85 = HIDWORD(v156);
          v53 = v85 + 4;
          while (v52 != v71)
          {
            v86 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *((_DWORD *)v85 - 1) = v86;
            v85 -= 4;
          }
          *(_QWORD *)&v177 = v85;
          *((_QWORD *)&v177 + 1) = v53;
          v178[0] = &v76[4 * v75];
          if (v71)
            operator delete(v71);
        }
        else
        {
          **((_DWORD **)&v177 + 1) = HIDWORD(v156);
          v53 = v52 + 4;
        }
        *((_QWORD *)&v177 + 1) = v53;
        v87 = *((_QWORD *)&v175 + 1);
        if (*((_QWORD *)&v175 + 1) >= v176)
        {
          v90 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v175, &v161);
        }
        else
        {
          v88 = v161;
          v89 = v162;
          *(_QWORD *)(*((_QWORD *)&v175 + 1) + 32) = v163;
          *(_OWORD *)v87 = v88;
          *(_OWORD *)(v87 + 16) = v89;
          std::deque<int>::deque(v87 + 40, v164);
          *(_BYTE *)(v87 + 88) = v165;
          v90 = v87 + 96;
        }
        *((_QWORD *)&v175 + 1) = v90;
        v91 = v171;
        if ((unint64_t)v171 >= v172)
        {
          v97 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(&v170, &v158, &v157, (int *)&v156);
        }
        else
        {
          v92 = v157;
          v93 = v158;
          v94 = v156;
          v171[1] = 0;
          v91[2] = 0;
          *v91 = 0;
          v95 = operator new(0xCuLL);
          *v91 = v95;
          v96 = v95 + 3;
          v91[2] = v95 + 3;
          *v95 = v93;
          v95[1] = v92;
          v95[2] = v94;
          v97 = (uint64_t)(v91 + 3);
          v91[1] = v96;
          v13 = v154;
        }
        v171 = (_QWORD *)v97;
      }
      else
      {
        v49 = std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::find<std::deque<int>>(v166, v164);
        if (v49)
        {
          if (*(_BYTE *)(a1 + 5))
          {
            v165 = 1;
            v50 = (char *)*((_QWORD *)&v177 + 1);
            if (*((_QWORD *)&v177 + 1) >= v178[0])
            {
              v79 = (char *)v177;
              v80 = (uint64_t)(*((_QWORD *)&v177 + 1) - v177) >> 2;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62)
                goto LABEL_144;
              v82 = v178[0] - v177;
              if ((uint64_t)(v178[0] - v177) >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v178, v83);
                v50 = (char *)*((_QWORD *)&v177 + 1);
                v79 = (char *)v177;
              }
              else
              {
                v84 = 0;
              }
              v104 = &v84[4 * v80];
              *(_DWORD *)v104 = HIDWORD(v156);
              v51 = v104 + 4;
              while (v50 != v79)
              {
                v105 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *(_QWORD *)&v177 = v104;
              *((_QWORD *)&v177 + 1) = v51;
              v178[0] = &v84[4 * v83];
              if (v79)
                operator delete(v79);
            }
            else
            {
              **((_DWORD **)&v177 + 1) = HIDWORD(v156);
              v51 = v50 + 4;
            }
            *((_QWORD *)&v177 + 1) = v51;
            v106 = *((_QWORD *)&v175 + 1);
            if (*((_QWORD *)&v175 + 1) >= v176)
            {
              v109 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v175, &v161);
            }
            else
            {
              v107 = v161;
              v108 = v162;
              *(_QWORD *)(*((_QWORD *)&v175 + 1) + 32) = v163;
              *(_OWORD *)v106 = v107;
              *(_OWORD *)(v106 + 16) = v108;
              std::deque<int>::deque(v106 + 40, v164);
              *(_BYTE *)(v106 + 88) = v165;
              v109 = v106 + 96;
            }
            *((_QWORD *)&v175 + 1) = v109;
            v110 = v171;
            if ((unint64_t)v171 >= v172)
            {
              v116 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(&v170, &v158, &v157, (int *)&v156);
            }
            else
            {
              v112 = v157;
              v111 = v158;
              v113 = v156;
              v171[1] = 0;
              v110[2] = 0;
              *v110 = 0;
              v114 = operator new(0xCuLL);
              *v110 = v114;
              v115 = v114 + 3;
              v110[2] = v114 + 3;
              *v114 = v111;
              v114[1] = v112;
              v114[2] = v113;
              v116 = (uint64_t)(v110 + 3);
              v110[1] = v115;
              v12 = a2;
              v13 = v154;
            }
            v171 = (_QWORD *)v116;
          }
          v117 = (char **)(v170 + 24 * v49[8]);
          v118 = v117[1];
          v119 = (unint64_t)v117[2];
          if ((unint64_t)v118 >= v119)
          {
            v123 = 0xAAAAAAAAAAAAAAABLL * ((v118 - *v117) >> 2);
            v124 = v123 + 1;
            if (v123 + 1 > 0x1555555555555555)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (_QWORD)*v117) >> 2);
            if (2 * v125 > v124)
              v124 = 2 * v125;
            if (v125 >= 0xAAAAAAAAAAAAAAALL)
              v126 = 0x1555555555555555;
            else
              v126 = v124;
            v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)(v117 + 2), v126);
            v129 = &v127[12 * v123];
            v130 = v157;
            v131 = v156;
            *(_DWORD *)v129 = v158;
            *((_DWORD *)v129 + 1) = v130;
            *((_DWORD *)v129 + 2) = v131;
            v133 = *v117;
            v132 = v117[1];
            v134 = v129;
            if (v132 != *v117)
            {
              do
              {
                v135 = *(_QWORD *)(v132 - 12);
                v132 -= 12;
                v136 = *((_DWORD *)v132 + 2);
                *(_QWORD *)(v134 - 12) = v135;
                v134 -= 12;
                *((_DWORD *)v134 + 2) = v136;
              }
              while (v132 != v133);
              v132 = *v117;
            }
            v122 = v129 + 12;
            *v117 = v134;
            v117[1] = v129 + 12;
            v117[2] = &v127[12 * v128];
            if (v132)
              operator delete(v132);
          }
          else
          {
            v120 = v157;
            v121 = v156;
            *(_DWORD *)v118 = v158;
            *((_DWORD *)v118 + 1) = v120;
            *((_DWORD *)v118 + 2) = v121;
            v122 = v118 + 12;
          }
          v117[1] = v122;
        }
        else
        {
          v77 = (char *)*((_QWORD *)&v177 + 1);
          if (*((_QWORD *)&v177 + 1) >= v178[0])
          {
            v98 = (char *)v177;
            v99 = (uint64_t)(*((_QWORD *)&v177 + 1) - v177) >> 2;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62)
LABEL_144:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v101 = v178[0] - v177;
            if ((uint64_t)(v178[0] - v177) >> 1 > v100)
              v100 = v101 >> 1;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
              v102 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
            {
              v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v178, v102);
              v77 = (char *)*((_QWORD *)&v177 + 1);
              v98 = (char *)v177;
            }
            else
            {
              v103 = 0;
            }
            v137 = &v103[4 * v99];
            *(_DWORD *)v137 = HIDWORD(v156);
            v78 = v137 + 4;
            while (v77 != v98)
            {
              v138 = *((_DWORD *)v77 - 1);
              v77 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            *(_QWORD *)&v177 = v137;
            *((_QWORD *)&v177 + 1) = v78;
            v178[0] = &v103[4 * v102];
            if (v98)
              operator delete(v98);
          }
          else
          {
            **((_DWORD **)&v177 + 1) = HIDWORD(v156);
            v78 = v77 + 4;
          }
          *((_QWORD *)&v177 + 1) = v78;
          v139 = *((_QWORD *)&v175 + 1);
          if (*((_QWORD *)&v175 + 1) >= v176)
          {
            v142 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v175, &v161);
          }
          else
          {
            v140 = v161;
            v141 = v162;
            *(_QWORD *)(*((_QWORD *)&v175 + 1) + 32) = v163;
            *(_OWORD *)v139 = v140;
            *(_OWORD *)(v139 + 16) = v141;
            std::deque<int>::deque(v139 + 40, v164);
            *(_BYTE *)(v139 + 88) = v165;
            v142 = v139 + 96;
          }
          *((_QWORD *)&v175 + 1) = v142;
          v143 = v171;
          if ((unint64_t)v171 >= v172)
          {
            v148 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(&v170, &v158, &v157, (int *)&v156);
          }
          else
          {
            v145 = v157;
            v144 = v158;
            v146 = v156;
            v171[1] = 0;
            v143[2] = 0;
            *v143 = 0;
            v147 = operator new(0xCuLL);
            *v143 = v147;
            v143[2] = v147 + 3;
            *v147 = v144;
            v147[1] = v145;
            v147[2] = v146;
            v148 = (uint64_t)(v143 + 3);
            v143[1] = v147 + 3;
            v12 = a2;
            v13 = v154;
          }
          v171 = (_QWORD *)v148;
          v149 = v170;
          v159 = v164;
          std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__emplace_unique_key_args<std::deque<int>,std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>((uint64_t)v166, v164, (uint64_t)&std::piecewise_construct, &v159)[8] = 0xAAAAAAAAAAAAAAABLL * ((v148 - v149) >> 3) - 1;
        }
      }
LABEL_51:
      std::deque<int>::~deque[abi:ne180100](v164);
      if (++v9 == v155)
        goto LABEL_132;
    }
    v28 = v14 % v13;
    v29 = *(_QWORD *)(a1 + 104);
    v30 = v29 + 96 * v28;
    v31 = *(_QWORD *)(v30 + 32);
    v32 = *(_OWORD *)(v30 + 16);
    v161 = *(_OWORD *)v30;
    v162 = v32;
    v163 = v31;
    std::deque<int>::deque((uint64_t)v164, (_QWORD *)(v30 + 40));
    v165 = *(_BYTE *)(v29 + 96 * v28 + 88);
    v33 = *(_QWORD *)(a1 + 152) + 16 * v28;
    v159 = *(_QWORD **)v33;
    v160 = *(_DWORD *)(v33 + 8);
    v34 = *(float *)(v33 + 12);
    v35 = *v9;
    v36 = *(float *)(*a3 + 4 * v35);
    v37 = *((float *)&v161 + 1);
    *(_QWORD *)((char *)&v161 + 4) = __PAIR64__(*(_DWORD *)(*a4 + 4 * v35), LODWORD(v36));
    v38 = *((_QWORD *)&v173 + 1);
    if (*((_QWORD *)&v173 + 1) >= v174)
    {
      v41 = std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>((uint64_t *)&v173, &v161);
      v13 = v154;
    }
    else
    {
      v39 = v161;
      v40 = v162;
      *(_QWORD *)(*((_QWORD *)&v173 + 1) + 32) = v163;
      *(_OWORD *)v38 = v39;
      *(_OWORD *)(v38 + 16) = v40;
      std::deque<int>::deque(v38 + 40, v164);
      v13 = v154;
      *(_BYTE *)(v38 + 88) = v165;
      v41 = v38 + 96;
    }
    v42 = v34 + (float)(v36 - v37);
    *((_QWORD *)&v173 + 1) = v41;
    v43 = (float *)__p[1];
    if (__p[1] < v169)
    {
      *(_QWORD *)__p[1] = v159;
      *((_DWORD *)v43 + 2) = v160;
      v43[3] = v42;
      goto LABEL_34;
    }
    v44 = ((char *)__p[1] - (char *)__p[0]) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v46 = v169 - (char *)__p[0];
    if ((v169 - (char *)__p[0]) >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
      v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v169, v47);
    else
      v48 = 0;
    v63 = (float *)&v48[16 * v44];
    *((_DWORD *)v63 + 2) = v160;
    *(_QWORD *)v63 = v159;
    v63[3] = v42;
    v70 = (char *)__p[0];
    v67 = (char *)__p[1];
    v69 = v63;
    if (__p[1] != __p[0])
    {
      do
      {
        *((_OWORD *)v69 - 1) = *((_OWORD *)v67 - 1);
        v69 -= 4;
        v67 -= 16;
      }
      while (v67 != v70);
LABEL_47:
      v67 = (char *)__p[0];
    }
LABEL_48:
    v58 = v63 + 4;
    __p[0] = v69;
    __p[1] = v63 + 4;
    v169 = &v48[16 * v47];
    if (v67)
      operator delete(v67);
    goto LABEL_50;
  }
LABEL_132:
  v150 = *(void **)(a1 + 56);
  if (v150)
  {
    *(_QWORD *)(a1 + 64) = v150;
    operator delete(v150);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = v177;
  *(_QWORD *)(a1 + 72) = v178[0];
  v178[0] = 0;
  v177 = 0uLL;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate(v153);
  *(_OWORD *)(a1 + 80) = v175;
  *(_QWORD *)(a1 + 96) = v176;
  v176 = 0;
  v175 = 0uLL;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate((void **)(a1 + 104));
  *(_OWORD *)(a1 + 104) = v173;
  *(_QWORD *)(a1 + 120) = v174;
  v174 = 0;
  v173 = 0uLL;
  std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::push_back[abi:ne180100]((uint64_t *)(a1 + 128), (uint64_t)&v170);
  v151 = *(void **)(a1 + 152);
  if (v151)
  {
    *(_QWORD *)(a1 + 160) = v151;
    operator delete(v151);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 168) = v169;
  __p[1] = 0;
  v169 = 0;
  __p[0] = 0;
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::~__hash_table((uint64_t)v166);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)&v161 = &v170;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  *(_QWORD *)&v161 = &v173;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  *(_QWORD *)&v161 = &v175;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
  if ((_QWORD)v177)
  {
    *((_QWORD *)&v177 + 1) = v177;
    operator delete((void *)v177);
  }
}

void sub_1ADE67A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41)
{
  _QWORD *v41;
  uint64_t v42;
  void *v44;

  std::deque<int>::~deque[abi:ne180100](v41);
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::~__hash_table((uint64_t)&a31);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  a19 = &a40;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)(v42 - 224);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)(v42 - 192);
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  v44 = *(void **)(v42 - 160);
  if (v44)
  {
    *(_QWORD *)(v42 - 152) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::ReachedFinal(kaldi::AutoRegressiveBeamSearchDecoder *this)
{
  return *((_QWORD *)this + 19) != *((_QWORD *)this + 20);
}

_QWORD *kaldi::AutoRegressiveBeamSearchDecoder::GetPartialResult@<X0>(_QWORD *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  _QWORD *v3;
  void **v4;
  unsigned int v5;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v8;
  std::vector<unsigned int>::pointer begin;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer v23;
  unsigned int *v24;
  std::vector<unsigned int>::pointer v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v34;
  std::vector<unsigned int>::pointer v35;
  std::vector<unsigned int>::pointer v36;
  unint64_t v37;
  unsigned int v38;
  BOOL v39;
  void **v40;
  void **v41;
  uint64_t v42;
  std::vector<unsigned int>::size_type __n;
  _QWORD v44[3];
  _BYTE v45[16];
  uint64_t v46;

  if (this[16] == this[17])
  {
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
    return this;
  }
  v3 = this;
  kaldi::AutoRegressiveBeamSearchDecoder::GetFinalTokensMap((kaldi::AutoRegressiveBeamSearchDecoder *)this, 1, 1, (uint64_t)v45);
  LODWORD(__n) = *(_DWORD *)(v46 + 16);
  memset(v44, 0, sizeof(v44));
  std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__init_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(v44, *(_QWORD *)(v46 + 24), *(_QWORD *)(v46 + 32), (uint64_t)(*(_QWORD *)(v46 + 32) - *(_QWORD *)(v46 + 24)) >> 5);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(&v40, *(const void **)v44[0], *(_QWORD *)(v44[0] + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v44[0] + 8) - *(_QWORD *)v44[0]) >> 2));
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a2, (int)__n);
  v4 = v40;
  v5 = *((_DWORD *)v40 + 1);
  if (*((_DWORD *)v3 + 12) == v5)
  {
    if (!*((_BYTE *)v3 + 2))
    {
LABEL_11:
      value = a2->__end_cap_.__value_;
      end = a2->__end_;
      if (end >= value)
      {
        begin = a2->__begin_;
        v10 = end - a2->__begin_;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = (char *)value - (char *)begin;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v13);
          begin = a2->__begin_;
          end = a2->__end_;
          v5 = *((_DWORD *)v4 + 1);
        }
        else
        {
          v14 = 0;
        }
        v15 = (unsigned int *)&v14[4 * v10];
        v16 = (unsigned int *)&v14[4 * v13];
        *v15 = v5;
        v8 = v15 + 1;
        while (end != begin)
        {
          v17 = *--end;
          *--v15 = v17;
        }
        a2->__begin_ = v15;
        a2->__end_ = v8;
        a2->__end_cap_.__value_ = v16;
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v5;
        v8 = end + 1;
      }
      a2->__end_ = v8;
    }
  }
  else if (*((_DWORD *)v3 + 11) == v5)
  {
    if (!*((_BYTE *)v3 + 1))
      goto LABEL_11;
  }
  else if (*((_DWORD *)v3 + 10) != v5 || !*(_BYTE *)v3)
  {
    goto LABEL_11;
  }
  v18 = __n;
  if ((int)__n >= 1)
  {
    do
    {
      v19 = v40;
      v20 = *(_QWORD *)(v3[16] + 24 * (v18 - 1)) + 24 * *(int *)v40;
      if (&v40 != (void ***)v20)
      {
        std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((char *)&v40, *(char **)v20, *(_QWORD *)(v20 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2));
        v19 = v40;
      }
      v21 = *((_DWORD *)v19 + 1);
      if (*((_DWORD *)v3 + 12) == v21)
      {
        if (!*((_BYTE *)v3 + 2))
          goto LABEL_39;
      }
      else if (*((_DWORD *)v3 + 11) == v21)
      {
        if (!*((_BYTE *)v3 + 1))
          goto LABEL_39;
      }
      else if (*((_DWORD *)v3 + 10) != v21 || !*(_BYTE *)v3)
      {
LABEL_39:
        v23 = a2->__end_;
        v22 = a2->__end_cap_.__value_;
        if (v23 >= v22)
        {
          v25 = a2->__begin_;
          v26 = v23 - a2->__begin_;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = (char *)v22 - (char *)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v29);
            v25 = a2->__begin_;
            v23 = a2->__end_;
            v21 = *((_DWORD *)v19 + 1);
          }
          else
          {
            v30 = 0;
          }
          v31 = (unsigned int *)&v30[4 * v26];
          *v31 = v21;
          v24 = v31 + 1;
          while (v23 != v25)
          {
            v32 = *--v23;
            *--v31 = v32;
          }
          a2->__begin_ = v31;
          a2->__end_ = v24;
          a2->__end_cap_.__value_ = (unsigned int *)&v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v23 = v21;
          v24 = v23 + 1;
        }
        a2->__end_ = v24;
      }
    }
    while (v18-- > 1);
  }
  v35 = a2->__begin_;
  v34 = a2->__end_;
  if (a2->__begin_ != v34)
  {
    v36 = v34 - 1;
    if (v36 > v35)
    {
      v37 = (unint64_t)(v35 + 1);
      do
      {
        v38 = *(_DWORD *)(v37 - 4);
        *(_DWORD *)(v37 - 4) = *v36;
        *v36-- = v38;
        v39 = v37 >= (unint64_t)v36;
        v37 += 4;
      }
      while (!v39);
    }
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v40 = (void **)v44;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  return (_QWORD *)std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table((uint64_t)v45);
}

void sub_1ADE67ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  __p = a10;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void kaldi::AutoRegressiveBeamSearchDecoder::GetFinalTokensMap(kaldi::AutoRegressiveBeamSearchDecoder *this@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  float v28;
  __int128 *v29;
  void *__p;
  void *v31;
  _DWORD *v32;
  float v33;
  uint64_t v34;

  v4 = a3;
  v34 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v7 = *((_QWORD *)this + 17);
  if ((a2 & 1) != 0)
    v8 = 0;
  else
    v8 = -1431655765 * ((*(_QWORD *)(v7 - 16) - *(_QWORD *)(v7 - 24)) >> 3);
  if (a3 == -1)
    v4 = ((*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 4)
       - 1431655765 * ((*(_QWORD *)(v7 - 16) - *(_QWORD *)(v7 - 24)) >> 3);
  if (v4 >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = *((_QWORD *)this + 19);
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 - 16) - *(_QWORD *)(v7 - 24)) >> 3);
      if (v9 >= (unint64_t)((*((_QWORD *)this + 20) - v10) >> 4))
        break;
      v12 = *((_QWORD *)this + 13);
      if (v11 > v8)
      {
        v13 = *((_QWORD *)this + 10);
        if (*(float *)(v13 + 96 * v8 + 8) > *(float *)(v12 + 96 * v9 + 8))
          goto LABEL_15;
      }
      v27 = *(_OWORD *)(v10 + 16 * v9);
      v28 = 0.0;
      v28 = *(float *)(v12 + 96 * v9 + 8) - *(float *)(v12 + 96 * v9 + 4);
      v14 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)a4, (int *)&v27);
      v15 = *(_QWORD *)((char *)&v27 + 4);
      v16 = HIDWORD(v27);
      v17 = operator new(0xCuLL);
      if (v14)
      {
        v31 = v17 + 3;
        v32 = v17 + 3;
        *(_QWORD *)v17 = v15;
        v17[2] = v16;
        __p = v17;
        std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::emplace_back<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float &>(v14 + 3, (uint64_t)&__p, &v28);
      }
      else
      {
        *(_QWORD *)v17 = v15;
        v17[2] = v16;
        __p = v17;
        v31 = v17 + 3;
        v32 = v17 + 3;
        v33 = v28;
        v29 = &v27;
        v26 = std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a4, (int *)&v27, (uint64_t)&std::piecewise_construct, (_DWORD **)&v29);
        std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__assign_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*>(v26 + 3, (uint64_t)&__p, (uint64_t)&v34, 1uLL);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      ++v9;
LABEL_27:
      if (!--v4)
        return;
    }
    if (v11 <= v8)
      return;
    v13 = *((_QWORD *)this + 10);
LABEL_15:
    LODWORD(v29) = 0;
    *(float *)&v29 = *(float *)(v13 + 96 * v8 + 8) - *(float *)(v13 + 96 * v8 + 4);
    LODWORD(v28) = -1 - 1431655765 * ((*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
    v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)a4, (int *)&v28);
    v19 = v18;
    if (v18)
    {
      v20 = v18 + 3;
      v21 = *(_QWORD *)(v7 - 24) + 24 * v8;
      v22 = v19[4];
      if (v22 >= v19[5])
      {
        v23 = std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__emplace_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>(v20, v21, &v29);
      }
      else
      {
        std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__construct_one_at_end[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>((uint64_t)v20, v21, (float *)&v29);
        v23 = v22 + 32;
      }
      v19[4] = v23;
    }
    else
    {
      v24 = *(_QWORD *)(v7 - 24) + 24 * v8;
      __p = 0;
      v31 = 0;
      v32 = 0;
      std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(&__p, *(const void **)v24, *(_QWORD *)(v24 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)v24) >> 2));
      v33 = *(float *)&v29;
      *(_QWORD *)&v27 = &v28;
      v25 = std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a4, (int *)&v28, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27);
      std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__assign_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*>(v25 + 3, (uint64_t)&__p, (uint64_t)&v34, 1uLL);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    ++v8;
    goto LABEL_27;
  }
}

void sub_1ADE68294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::GetBestPath(uint64_t a1, uint64_t a2, char a3)
{
  return kaldi::AutoRegressiveBeamSearchDecoder::GetRawLattice(a1, a2, a3, 1);
}

BOOL kaldi::AutoRegressiveBeamSearchDecoder::GetRawLattice(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  float *v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  float v24;
  _QWORD *v25;
  unsigned int v26;
  float v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  float v39;
  float v40;
  int v41;
  uint64_t *v42;
  _QWORD *v43[2];
  int v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  unsigned __int8 v51[16];

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  kaldi::AutoRegressiveBeamSearchDecoder::GetFinalTokensMap((kaldi::AutoRegressiveBeamSearchDecoder *)a1, a3, a4, (uint64_t)v49);
  v35 = v50;
  if (!v50)
    goto LABEL_54;
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 128))
    goto LABEL_53;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v48 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v8, &v48);
  v9 = (uint64_t *)&v46;
  v46 = 0;
  v47 = 0;
  v45 = (uint64_t *)&v46;
  v44 = -1431655765 * ((*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3) - 1;
  if (v44 < 0)
    goto LABEL_52;
  v36 = v8;
  do
  {
    v42 = v45;
    v43[0] = v46;
    v10 = v47;
    v46 = 0;
    v47 = 0;
    v43[1] = v10;
    v11 = v10 == 0;
    v12 = &v42;
    if (!v11)
      v12 = (uint64_t **)(v43[0] + 2);
    *v12 = (uint64_t *)v43;
    v45 = (uint64_t *)&v46;
    v13 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v49, &v44);
    v14 = v13;
    if (v13 && v13[4] != v13[3])
    {
      v15 = 0;
      v16 = 1;
      do
      {
        *(_QWORD *)v51 = v16;
        v38 = (int *)v51;
        *((_DWORD *)std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__emplace_unique_key_args<std::pair<BOOL,int>,std::piecewise_construct_t const&,std::tuple<std::pair<BOOL,int>&&>,std::tuple<>>(&v42, v51, (uint64_t)&std::piecewise_construct, (_QWORD **)&v38)+ 9) = v8;
        ++v15;
        v16 += 0x100000000;
      }
      while (v15 < (v14[4] - v14[3]) >> 5);
    }
    v17 = v42;
    if (v42 != (uint64_t *)v43)
    {
      while (1)
      {
        if (*((_BYTE *)v17 + 28))
        {
          v38 = &v44;
          v18 = std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v49, &v44, (uint64_t)&std::piecewise_construct, &v38)[3]+ 32 * *((int *)v17 + 8);
        }
        else
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24 * v44) + 24 * *((int *)v17 + 8);
        }
        v19 = *(float **)v18;
        v20 = *(unsigned int **)(v18 + 8);
        if (*(unsigned int **)v18 != v20)
          break;
LABEL_44:
        v32 = (uint64_t *)v17[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (uint64_t *)v17[2];
            v11 = *v33 == (_QWORD)v17;
            v17 = v33;
          }
          while (!v11);
        }
        v17 = v33;
        if (v33 == (uint64_t *)v43)
          goto LABEL_50;
      }
      v21 = 0;
      while (1)
      {
        v23 = *(unsigned int *)v19;
        v22 = *((_DWORD *)v19 + 1);
        v24 = v19[2];
        if (*(_DWORD *)(a1 + 48) == v22)
        {
          if (*(_BYTE *)(a1 + 2))
            goto LABEL_28;
        }
        else if (*(_DWORD *)(a1 + 44) == v22)
        {
          if (*(_BYTE *)(a1 + 1))
            goto LABEL_28;
        }
        else if (*(_DWORD *)(a1 + 40) == v22 && *(_BYTE *)a1)
        {
          goto LABEL_28;
        }
        if (v22 != *(_DWORD *)(a1 + 36))
        {
          v26 = *((_DWORD *)v19 + 1);
          if (!v22)
          {
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains label 0. Replacing it with BOS label (", 63);
              v31 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)").", 2);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
            }
            v26 = 0;
            v22 = *(_DWORD *)(a1 + 36);
          }
          goto LABEL_29;
        }
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains BOS label (", 36);
          v25 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"). Mapping it to label 0.", 25);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
        }
LABEL_28:
        v26 = 0;
LABEL_29:
        if (*((_BYTE *)v17 + 28))
        {
          v38 = &v44;
          v27 = *(float *)(std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v49, &v44, (uint64_t)&std::piecewise_construct, &v38)[3]+ 32 * *((int *)v17 + 8)+ 24);
        }
        else
        {
          v27 = 0.0;
        }
        v28 = *((_DWORD *)v17 + 9);
        v38 = (int *)__PAIR64__(v26, v22);
        v39 = -v27;
        v40 = -v24;
        v41 = v28;
        v37 = v23 << 32;
        v29 = std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::find<std::pair<BOOL,int>>((uint64_t)&v45, (unsigned __int8 *)&v37);
        if (&v46 == (_QWORD **)v29)
        {
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
          *(_QWORD *)v51 = &v37;
          *((_DWORD *)std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__emplace_unique_key_args<std::pair<BOOL,int>,std::piecewise_construct_t const&,std::tuple<std::pair<BOOL,int>&&>,std::tuple<>>(&v45, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (_QWORD **)v51)+ 9) = v30;
        }
        else
        {
          v30 = *((unsigned int *)v29 + 9);
        }
        (*(void (**)(uint64_t, uint64_t, int **))(*(_QWORD *)a2 + 208))(a2, v30, &v38);
        if (a4 == -1 || (++v21, v21 < a4))
        {
          v19 += 3;
          if (v19 != (float *)v20)
            continue;
        }
        goto LABEL_44;
      }
    }
LABEL_50:
    std::__tree<int>::destroy((uint64_t)&v42, v43[0]);
    --v44;
    LODWORD(v8) = v36;
  }
  while (v44 >= 0);
  v9 = v45;
LABEL_52:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, *((unsigned int *)v9 + 9));
  std::__tree<int>::destroy((uint64_t)&v45, v46);
LABEL_53:
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
LABEL_54:
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table((uint64_t)v49);
  return v35 != 0;
}

void sub_1ADE687C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1 - 192, *(_QWORD **)(v1 - 184));
  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table(v1 - 160);
  _Unwind_Resume(a1);
}

void kaldi::AutoRegressiveBeamSearchDecoder::MergeHyps(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_DWORD *)(a1 + 48) & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 88);
    if (v3 != v4)
    {
      v6 = 0;
      do
      {
        if (v3 == v4)
        {
          v3 = v4;
        }
        else
        {
          v7 = 0;
          v8 = 0;
          do
          {
            if (v6 != v8 && *(_QWORD *)(v4 + 96 * v6 + 24) == *(_QWORD *)(v4 + v7 + 32))
            {
              kaldi::AutoRegressiveBeamSearchDecoder::MergeLogLikelihoods(a1, a2, *(_DWORD *)(v4 + v7 + 12) + *(_DWORD *)(a1 + 32) * v6, *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 32) * v8);
              v4 = *(_QWORD *)(a1 + 80);
              v3 = *(_QWORD *)(a1 + 88);
            }
            ++v8;
            v7 += 96;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 5) > v8);
        }
        v10 = *(_QWORD *)(a1 + 104);
        v9 = *(_QWORD *)(a1 + 112);
        if (v9 != v10)
        {
          v11 = 0;
          v12 = 32;
          do
          {
            v13 = *(_QWORD *)(a1 + 80);
            if (*(_QWORD *)(v13 + 96 * v6 + 24) == *(_QWORD *)(v10 + v12))
            {
              kaldi::AutoRegressiveBeamSearchDecoder::MergeLogLikelihoods(a1, a2, *(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 32) * v6, v11 - 1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 88) - v13) >> 5) * *(_DWORD *)(a1 + 32));
              v10 = *(_QWORD *)(a1 + 104);
              v9 = *(_QWORD *)(a1 + 112);
            }
            ++v11;
            v12 += 96;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 5) > v11);
          v4 = *(_QWORD *)(a1 + 80);
          v3 = *(_QWORD *)(a1 + 88);
        }
        ++v6;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 5) > v6);
    }
  }
}

void kaldi::AutoRegressiveBeamSearchDecoder::MergeLogLikelihoods(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v4 = *a2;
  v5 = a3;
  v6 = a4;
  v7 = *(float *)(*a2 + 4 * a4);
  if (*(_BYTE *)(a1 + 4))
  {
    v8 = *(float *)(v4 + 4 * a3);
    if (v7 <= v8)
      v9 = *(float *)(v4 + 4 * a3);
    else
      v9 = *(float *)(*a2 + 4 * a4);
    v11 = v8 == INFINITY || v7 == INFINITY;
    v12 = NAN;
    if (!v11)
      v12 = v9;
  }
  else
  {
    v13 = *(float *)(v4 + 4 * a3);
    v14 = -v13;
    if (v7 != -INFINITY)
    {
      v15 = -v7;
      if (v13 == -INFINITY)
      {
        v14 = -v7;
      }
      else if (v7 >= v13)
      {
        v17 = expf(-(float)(v7 - v13));
        v14 = v15 - logf(v17 + 1.0);
      }
      else
      {
        v16 = expf(-(float)(v13 - v7));
        v14 = v14 - logf(v16 + 1.0);
      }
    }
    v12 = -v14;
  }
  *(float *)(v4 + 4 * v6) = v12;
  *(_DWORD *)(v4 + 4 * v5) = -8388609;
}

void kaldi::AutoRegressiveBeamSearchDecoder::HypInfo::Update(kaldi::AutoRegressiveBeamSearchDecoder::HypInfo *this, float a2, float a3, int a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int v9;

  v9 = a4;
  *((float *)this + 1) = a2;
  *((float *)this + 2) = a3;
  if ((a4 & 0x80000000) == 0)
  {
    v4 = *((_DWORD *)this + 4) + 1;
    *((_DWORD *)this + 3) = a4;
    *((_DWORD *)this + 4) = v4;
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = ((a4 - 1640531527) + (v5 << 6) + (v5 >> 2)) ^ v5;
    *((_QWORD *)this + 4) = v5;
    v6 = *(unsigned int *)this;
    if ((int)v6 >= 1)
    {
      v7 = (_QWORD *)((char *)this + 40);
      v8 = *((_QWORD *)this + 10);
      if (v8 >= v6)
      {
        ++*((_QWORD *)this + 9);
        *((_QWORD *)this + 10) = v8 - 1;
        std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 40, 1);
      }
      std::deque<int>::push_back(v7, &v9);
    }
  }
}

void **std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADE68C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::emplace_back<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float &>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[5];

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v7 - *a1;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v19[4] = v6;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v6, v14);
    v16 = &v15[32 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[32 * v17];
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = 0;
    *(_OWORD *)v16 = *(_OWORD *)a2;
    *((_QWORD *)v16 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_DWORD *)v16 + 6) = *a3;
    v19[2] = v16 + 32;
    std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_OWORD *)v9 = *(_OWORD *)a2;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(v9 + 24) = *a3;
    v10 = v9 + 32;
    a1[1] = v9 + 32;
  }
  a1[1] = v10;
  return v10 - 32;
}

void sub_1ADE68D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__init_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADE68E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE68EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADE68F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t std::deque<int>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
  }
  else
  {
    v8 = &(*v7)[4 * (v4 & 0x3FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 10));
    v11 = (char *)(*(_QWORD *)v10 + 4 * (v9 & 0x3FF));
  }
  std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1ADE6916C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  return std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  int v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 7) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<int>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 10));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 4 * (v11 & 0x3FF);
  v24[0] = v8 + 8 * (v11 >> 10);
  v24[1] = v14;
  result = std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_DWORD *)v14;
        do
        {
          v21 = *(_DWORD *)a3;
          a3 += 4;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_DWORD *)v18);
      }
      v17 += (v18 - v14) >> 2;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void std::deque<int>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x3FF) != 0)
    v6 = (v5 >> 10) + 1;
  else
    v6 = v5 >> 10;
  v7 = a1[4];
  if (v6 >= v7 >> 10)
    v8 = v7 >> 10;
  else
    v8 = v6;
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 1023;
          else
            v64 = 1024;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1ADE697FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 2);
    if (v4 < 1)
      result -= (unint64_t)(1023 - v4) >> 10;
    else
      result += (unint64_t)v4 >> 10;
  }
  return result;
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*>(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate((void **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = &a2[2 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*,0>(a2, v13, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 96;
      result = std::deque<int>::~deque[abi:ne180100]((_QWORD *)(v16 - 56));
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1ADE69A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE69A3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 96;
        std::deque<int>::~deque[abi:ne180100]((_QWORD *)v3 - 7);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a2 + v7);
      v11 = *(_OWORD *)(a2 + v7 + 16);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + v7 + 32);
      *(_OWORD *)v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      std::deque<int>::deque(a4 + v7 + 40, (_QWORD *)(a2 + v7 + 40));
      *(_BYTE *)(v9 + 88) = *(_BYTE *)(a2 + v7 + 88);
      v7 += 96;
    }
    while (v8 + 96 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADE69B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::deque<int>::~deque[abi:ne180100]((_QWORD *)(v4 + v2));
      v2 -= 96;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const*,kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    v7 = v4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v4 + 4);
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    std::deque<int>::operator=((_QWORD *)(a3 + 40), (_QWORD *)v4 + 5);
    *(_BYTE *)(a3 + 88) = *((_BYTE *)v4 + 88);
    a3 += 96;
    v4 += 6;
  }
  while (v4 != v5);
  return v5;
}

_QWORD *std::deque<int>::operator=(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 10));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
    }
    else
    {
      v8 = &(*v7)[4 * (v4 & 0x3FF)];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 10));
      v11 = (char *)(*(_QWORD *)v10 + 4 * (v9 & 0x3FF));
    }
    std::deque<int>::assign<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(a1, v7, v8, v10, v11);
  }
  return a1;
}

_QWORD *std::deque<int>::assign<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  return std::deque<int>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<int>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char **v18;
  char *v19;
  char **v20;
  char *v21;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v14 = a1[1];
    v15 = (char *)(v14 + 8 * (a1[4] >> 10));
    if (a1[2] == v14)
      v16 = 0;
    else
      v16 = *(_QWORD *)v15 + 4 * (a1[4] & 0x3FFLL);
    v22[0] = a2;
    v22[1] = a3;
    v18 = (char **)std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v22, a4);
    v23 = v15;
    v24 = v16;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>>(a2, a3, v18, v19, (uint64_t)&v23);
    return (_QWORD *)std::deque<int>::__erase_to_end((uint64_t)a1, v23, v24);
  }
  else
  {
    v9 = (char **)std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)&v20, v7);
    v10 = v8;
    v11 = a1[1];
    if (a1[2] == v11)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v11 + 8 * (a1[4] >> 10)) + 4 * (a1[4] & 0x3FFLL);
    v23 = (char *)(v11 + 8 * (a1[4] >> 10));
    v24 = v12;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>>(v20, v21, v9, v8, (uint64_t)&v23);
    return std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, v9, v10, a4 - a1[5]);
  }
}

uint64_t std::deque<int>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 10));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 4 * (v5 & 0x3FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 2) + ((v8 - a2) << 7);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 2);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 10));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 4 * (*(_QWORD *)(result + 32) & 0x3FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 2) + ((a2 - v13) << 7) - ((v14 - *(_QWORD *)v13) >> 2);
      std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = std::deque<int>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,std::__deque_iterator<int,int *,int &,int **,long,1024l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,int const*,int const*,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12)
        __src = (char *)memmove(__dst, v9, 4 * v12);
      v9 += 4 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__emplace_unique_key_args<std::pair<BOOL,int>,std::piecewise_construct_t const&,std::tuple<std::pair<BOOL,int>&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__find_equal<std::pair<BOOL,int>>((uint64_t)a1, &v10, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::__find_equal<std::pair<BOOL,int>>(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((unsigned __int8 *)v4 + 28);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADE6A42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<std::pair<BOOL,int>,int>,std::__map_value_compare<std::pair<BOOL,int>,std::__value_type<std::pair<BOOL,int>,int>,std::less<std::pair<BOOL,int>>,true>,std::allocator<std::__value_type<std::pair<BOOL,int>,int>>>::find<std::pair<BOOL,int>>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 1);
  v7 = v2;
  do
  {
    v8 = *((unsigned __int8 *)v3 + 28);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((_DWORD *)v3 + 8) < v6)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = *((unsigned __int8 *)v7 + 28);
  if (v5 < v9 || v9 >= v5 && v6 < *((_DWORD *)v7 + 8))
    return v2;
  return v7;
}

int *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int *v20;
  int *v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  int *v26;
  int *v27;
  uint64_t *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  char v36;
  int *v37;
  uint64_t v38;

  if (a4 >= 2)
  {
    v8 = (char *)result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * v10))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v22 = a5;
      v23 = a4 >> 1;
      v24 = &result[a4 >> 1];
      v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5);
        v26 = &v22[v23];
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>((int *)&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v26);
        v27 = &v22[a4];
        v28 = *a3;
        v29 = v26;
        while (v29 != v27)
        {
          v30 = v29;
          v31 = *v29;
          v32 = *(float *)(*v28 + 4 * v31);
          v33 = *v22;
          v34 = *(float *)(*v28 + 4 * v33);
          if (v32 > v34)
            LODWORD(v33) = v31;
          v22 += v32 <= v34;
          v29 = &v30[v32 > v34];
          *(_DWORD *)v8 = v33;
          v8 += 4;
          if (v22 == v26)
          {
            if (v29 != v27)
            {
              v35 = 0;
              if (v32 > v34)
                v36 = 1;
              else
                v36 = 2;
              v37 = &v30[v36 & 1];
              do
              {
                *(_DWORD *)&v8[v35 * 4] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          v38 = 0;
          do
          {
            *(_DWORD *)&v8[v38 * 4] = v22[v38];
            ++v38;
          }
          while (&v22[v38] != v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v22, a6);
        return (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(v8, &v8[4 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = **a3;
        v15 = result;
        do
        {
          v16 = *v15;
          v15 = v12;
          v17 = *v12;
          v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            v19 = v13;
            while (1)
            {
              *(int *)((char *)result + v19 + 4) = v16;
              if (!v19)
                break;
              v16 = *(int *)((char *)result + v19 - 4);
              v19 -= 4;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                v20 = (int *)((char *)result + v19 + 4);
                goto LABEL_15;
              }
            }
            v20 = result;
LABEL_15:
            *v20 = v17;
          }
          v12 = v15 + 1;
          v13 += 4;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  int *v5;
  int *v7;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = **a3;
      v12 = *(float *)(v11 + 4 * v10);
      v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13)
        LODWORD(v10) = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v12 <= v13)
        v7 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v25 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      result = (int *)std::__stable_sort<std::_ClassicAlgPolicy,kaldi::AutoRegressiveBeamSearchDecoder::PruneHyps(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v26 = *a3;
      v27 = &v7[a4 >> 1];
      while (v27 != a2)
      {
        v28 = v27;
        v29 = *v27;
        v30 = *(float *)(*v26 + 4 * v29);
        v31 = *v7;
        v32 = *(float *)(*v26 + 4 * v31);
        if (v30 > v32)
          LODWORD(v31) = v29;
        v27 = &v28[v30 > v32];
        v7 += v30 <= v32;
        *v5++ = v31;
        if (v7 == v25)
        {
          if (v27 != a2)
          {
            v33 = 0;
            v34 = &v28[v30 > v32];
            do
            {
              v5[v33] = v34[v33];
              ++v33;
            }
            while (&v34[v33] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        v35 = 0;
        do
        {
          v5[v35] = v7[v35];
          ++v35;
        }
        while (&v7[v35] != v25);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = **a3;
        v17 = a5;
        v18 = a5;
        do
        {
          v20 = *v18++;
          v19 = v20;
          v21 = *v14;
          if (*(float *)(v16 + 4 * v21) <= *(float *)(v16 + 4 * v20))
          {
            *v18 = v21;
          }
          else
          {
            v17[1] = v19;
            v22 = a5;
            if (v17 != a5)
            {
              v23 = v15;
              while (1)
              {
                v22 = (int *)((char *)a5 + v23);
                v24 = *(int *)((char *)a5 + v23 - 4);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v24))
                  break;
                *v22 = v24;
                v23 -= 4;
                if (!v23)
                {
                  v22 = a5;
                  break;
                }
              }
            }
            *v22 = *v14;
          }
          ++v14;
          v15 += 4;
          v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::deque<int>::~deque[abi:ne180100](v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__push_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[96 * v9];
  v12 = *a2;
  v13 = a2[1];
  *((_QWORD *)v11 + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  std::deque<int>::deque((uint64_t)(v11 + 40), (_QWORD *)a2 + 5);
  v10[96 * v4 + 88] = *((_BYTE *)a2 + 88);
  v17 += 96;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1ADE6AB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  result = a6;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a3 + v8;
      v10 = *(_OWORD *)(a3 + v8 - 96);
      v11 = *(_OWORD *)(a3 + v8 - 80);
      v12 = a7 + v8;
      *(_QWORD *)(v12 - 64) = *(_QWORD *)(a3 + v8 - 64);
      *(_OWORD *)(v12 - 96) = v10;
      *(_OWORD *)(v12 - 80) = v11;
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(a3 + v8 - 56);
      *(_QWORD *)(v12 - 48) = *(_QWORD *)(a3 + v8 - 48);
      *(_QWORD *)(v12 - 40) = *(_QWORD *)(a3 + v8 - 40);
      *(_QWORD *)(v12 - 32) = *(_QWORD *)(a3 + v8 - 32);
      *(_OWORD *)(v9 - 40) = 0uLL;
      *(_OWORD *)(v9 - 56) = 0uLL;
      *(_QWORD *)(v12 - 24) = *(_QWORD *)(a3 + v8 - 24);
      *(_QWORD *)(v12 - 16) = *(_QWORD *)(a3 + v8 - 16);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_BYTE *)(v12 - 8) = *(_BYTE *)(a3 + v8 - 8);
      v8 -= 96;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::AutoRegressiveBeamSearchDecoder::HypInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::deque<int>::~deque[abi:ne180100]((_QWORD *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::find<std::deque<int>>(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = kaldi::AutoRegressiveBeamSearchDecoder::DequeHash::operator()((uint64_t)(a1 + 3), a2);
  v5 = a1[1];
  if (!v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v5 <= v4)
      v9 = v4 % v5;
  }
  else
  {
    v9 = (v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::deque<int>>::operator()[abi:ne180100](v12, v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= v5)
            v13 %= v5;
        }
        else
        {
          v13 &= v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t kaldi::AutoRegressiveBeamSearchDecoder::DequeHash::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  char **v5;
  char *v6;
  char *v7;
  uint64_t i;
  int v9;
  int v10;
  char *v11;

  result = a2[5];
  v3 = a2[1];
  if (a2[2] != v3)
  {
    v4 = a2[4];
    v5 = (char **)(v3 + 8 * (v4 >> 10));
    v6 = *v5;
    v7 = &(*v5)[4 * (v4 & 0x3FF)];
    for (i = *(_QWORD *)(v3 + (((v4 + result) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v4 + result) & 0x3FF);
          v7 != (char *)i;
          result = (((_DWORD)result << 6) + ((int)result >> 2) - 1640531527 + v9) ^ result)
    {
      v10 = *(_DWORD *)v7;
      v7 += 4;
      v9 = v10;
      if (v7 - v6 == 4096)
      {
        v11 = v5[1];
        ++v5;
        v6 = v11;
        v7 = v11;
      }
    }
  }
  return result;
}

BOOL std::equal_to<std::deque<int>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v3 = a2[5];
  if (v3 != a3[5])
    return 0;
  v4 = a2[4];
  v5 = a2[1];
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 10));
  if (a2[2] == v5)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = (_DWORD *)(*v6 + 4 * (a2[4] & 0x3FFLL));
    v8 = *(_QWORD *)(v5 + (((v4 + v3) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v4 + v3) & 0x3FF);
  }
  v10 = a3[1];
  v11 = (_QWORD *)(v10 + 8 * (a3[4] >> 10));
  if (a3[2] == v10)
    v12 = 0;
  else
    v12 = (_DWORD *)(*v11 + 4 * (a3[4] & 0x3FFLL));
  if (v7 == (_DWORD *)v8)
    return 1;
  do
  {
    result = *v7 == *v12;
    if (*v7 != *v12)
      break;
    if ((_DWORD *)((char *)++v7 - *v6) == (_DWORD *)4096)
    {
      v13 = (_DWORD *)v6[1];
      ++v6;
      v7 = v13;
    }
    if ((_DWORD *)((char *)++v12 - *v11) == (_DWORD *)4096)
    {
      v14 = (_DWORD *)v11[1];
      ++v11;
      v12 = v14;
    }
  }
  while (v7 != (_DWORD *)v8);
  return result;
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__emplace_back_slow_path<int &,int &,float &>(uint64_t *a1, int *a2, int *a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  _QWORD v22[2];
  char *v23;
  char *v24;
  uint64_t *v25;

  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x555555555555555)
    v13 = 0xAAAAAAAAAAAAAAALL;
  else
    v13 = v7;
  v25 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v11, v13);
  else
    v14 = 0;
  v15 = &v14[24 * v6];
  v22[0] = v14;
  v22[1] = v15;
  v23 = v15;
  v24 = &v14[24 * v13];
  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  v19 = operator new(0xCuLL);
  *(_QWORD *)v15 = v19;
  *((_QWORD *)v15 + 2) = v19 + 3;
  *v19 = v16;
  v19[1] = v17;
  v19[2] = v18;
  *((_QWORD *)v15 + 1) = v19 + 3;
  v23 = v15 + 24;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__swap_out_circular_buffer(a1, v22);
  v20 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1ADE6B040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>,std::reverse_iterator<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__emplace_unique_key_args<std::deque<int>,std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = kaldi::AutoRegressiveBeamSearchDecoder::DequeHash::operator()(a1 + 24, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v11 <= v9)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (std::equal_to<std::deque<int>>::operator()[abi:ne180100](a1 + 32, v15 + 2, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v15;
}

void sub_1ADE6B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::deque<int>,unsigned long>,std::__unordered_map_hasher<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,std::equal_to<std::deque<int>>,true>,std::__unordered_map_equal<std::deque<int>,std::__hash_value_type<std::deque<int>,unsigned long>,std::equal_to<std::deque<int>>,kaldi::AutoRegressiveBeamSearchDecoder::DequeHash,true>,std::allocator<std::__hash_value_type<std::deque<int>,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::deque<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::deque<int>::deque((uint64_t)(v8 + 2), *a3);
  v8[8] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADE6B498(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::deque<int>,unsigned long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::deque<int>::~deque[abi:ne180100](v2 + 2);
    operator delete(v2);
  }
}

uint64_t std::vector<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>>,std::reverse_iterator<std::vector<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

float std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__construct_one_at_end[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1ADE6B6A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__emplace_back_slow_path<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain const&,float &>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1ADE6B7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::reverse_iterator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>::__assign_with_size[abi:ne180100]<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<fst::IntervalSet<int>>::__vdeallocate(a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(v8, v6, a3, a1[1]);
LABEL_15:
    a1[1] = v13;
    return;
  }
  v14 = a1[1];
  v15 = (v14 - v9) >> 5;
  if (v15 < a4)
  {
    v16 = a2 + 32 * v15;
    if (v14 != v9)
    {
      v17 = 32 * v15;
      do
      {
        std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>::operator=[abi:ne180100](v9, v6);
        v6 += 32;
        v9 += 32;
        v17 -= 32;
      }
      while (v17);
      v9 = a1[1];
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = *a1;
  }
  else
  {
    v18 = *a1;
    do
    {
      std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>::operator=[abi:ne180100](v9, v6);
      v6 += 32;
      v9 += 32;
      v18 += 32;
    }
    while (v6 != a3);
    v14 = a1[1];
  }
  if (v14 != v18)
  {
    v19 = v14;
    do
    {
      v21 = *(void **)(v19 - 32);
      v19 -= 32;
      v20 = v21;
      if (v21)
      {
        *(_QWORD *)(v14 - 24) = v20;
        operator delete(v20);
      }
      v14 = v19;
    }
    while (v19 != v18);
  }
  a1[1] = v18;
}

void sub_1ADE6BA88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float> const*,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__init_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADE6BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>>,std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<kaldi::AutoRegressiveBeamSearchDecoder::TokenChain,float>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    std::vector<kaldi::AutoRegressiveBeamSearchDecoder::Token>::__assign_with_size[abi:ne180100]<kaldi::AutoRegressiveBeamSearchDecoder::Token*,kaldi::AutoRegressiveBeamSearchDecoder::Token*>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

double quasar::GlobalTranslatorFactory::createTranslatorFactory@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  double result;
  _OWORD v10[17];
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned int v13;

  v13 = a2;
  v12 = a3;
  v11 = a4;
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"creating PDecTranslatorFactory", 30);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  std::allocate_shared[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,std::allocator<quasar::GlobalPDecTranslatorFactory>,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>(a1, &v13, &v12, &v11, a5, v10);
  result = *(double *)v10;
  *a6 = v10[0];
  return result;
}

void sub_1ADE6BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

double quasar::GlobalTranslatorFactory::createTranslatorFactory@<D0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unsigned __int8 v20;
  unsigned int v21;

  v21 = a2;
  v20 = a3;
  v7 = *a1;
  if (a1[1] - v7 == 1544)
  {
    v9 = a4[1];
    v18 = *a4;
    v19 = (std::__shared_weak_count *)v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12.n128_f64[0] = quasar::GlobalTranslatorFactory::createTranslatorFactory(v7, a2, 1u, a3, &v18, a5);
    v13 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::allocator<quasar::GlobalHotfixTranslatorFactory>,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>((uint64_t)a1, &v21, &v20, a4, &v17);
    v12.n128_u64[0] = v17;
    *a5 = v17;
  }
  return v12.n128_f64[0];
}

void sub_1ADE6BD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,std::allocator<quasar::GlobalPDecTranslatorFactory>,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x6B0uLL);
  result = std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalPDecTranslatorFactory>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADE6BDE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalPDecTranslatorFactory>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t *a6)
{
  char v8;

  a1[2] = 0;
  *a1 = &unk_1E5D44630;
  a1[1] = 0;
  std::allocator<quasar::GlobalPDecTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1ADE6BE54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::GlobalPDecTranslatorFactory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::GlobalPDecTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalPDecTranslatorFactory,quasar::SystemConfig const&,int &,BOOL &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, unsigned __int8 *a6, uint64_t *a7)
{
  uint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v8 = *a4;
  v9 = *a5;
  v10 = *a6;
  v11 = (std::__shared_weak_count *)a7[1];
  v17 = *a7;
  v18 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  quasar::GlobalPDecTranslatorFactory::GlobalPDecTranslatorFactory(a2, a3, v8, v9 != 0, v10 != 0, &v17);
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1ADE6BF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::allocator<quasar::GlobalHotfixTranslatorFactory>,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalHotfixTranslatorFactory>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADE6BFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::GlobalHotfixTranslatorFactory>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D447F0;
  a1[1] = 0;
  std::allocator<quasar::GlobalHotfixTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1ADE6C04C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D447F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D447F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::GlobalHotfixTranslatorFactory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::GlobalHotfixTranslatorFactory>::construct[abi:ne180100]<quasar::GlobalHotfixTranslatorFactory,std::vector<quasar::SystemConfig> const&,int &,BOOL &,std::shared_ptr<quasar::ContextProvider> &>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, uint64_t *a6)
{
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v7 = *a4;
  v8 = *a5;
  v9 = (std::__shared_weak_count *)a6[1];
  v15 = *a6;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  quasar::GlobalHotfixTranslatorFactory::GlobalHotfixTranslatorFactory(a2, a3, v7, v8 != 0, &v15);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1ADE6C154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *srilm_ts_strerror(int a1)
{
  char **v2;
  char *v3;
  char **v4;

  v2 = (char **)errBuffTLS();
  v3 = *v2;
  if (!*v2)
  {
    v4 = v2;
    v3 = (char *)malloc_type_calloc(0x100uLL, 1uLL, 0x100004077774924uLL);
    *v4 = v3;
  }
  strerror_r(a1, v3, 0x100uLL);
  return v3;
}

void srilm_tserror_freeThread()
{
  void **v0;

  v0 = (void **)errBuffTLS();
  if (*v0)
  {
    free(*v0);
    *v0 = 0;
  }
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::~ArpaLmCompiler(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D3A7A8;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::~ArpaFileParser(this);
}

{
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::~ArpaLmCompiler(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::HeaderAvailable(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void ****v9;
  int v10;
  __n128 v11;
  unint64_t v12;
  void **v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  void ***v22;
  void **v23;
  uint64_t ****v24;
  int v25;
  __n128 v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  uint64_t **v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t **v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *Featurizer;
  _QWORD *v46;
  _QWORD v47[2];
  char v48;

  if (*((_QWORD *)this + 13))
  {
    quasar::lm::LogMessage::LogMessage(v47, 5, "HeaderAvailable", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 312);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v47);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v47);
  }
  else
  {
    quasar::lm::nullstream(this);
  }
  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2) - 1;
  else
    v3 = 0;
  v4 = (int *)*((_QWORD *)this + 9);
  if (*((_DWORD *)this + 5) == 1)
    v3 += *v4;
  v5 = *((_QWORD *)this + 10) - (_QWORD)v4;
  v6 = operator new();
  v7 = *((_QWORD *)this + 14);
  v8 = *((_DWORD *)this + 24);
  if (v5 <= 0x13 && v3 <= 2097150)
  {
    *(_QWORD *)v6 = &off_1E5D3A810;
    *(_QWORD *)(v6 + 8) = this;
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(v6 + 24) = *((_QWORD *)this + 1);
    *(_OWORD *)(v6 + 40) = 0u;
    v9 = (void ****)(v6 + 40);
    *(_DWORD *)(v6 + 32) = v8;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_DWORD *)(v6 + 72) = 1065353216;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
    v12 = *(_QWORD *)(v6 + 48);
    if (v12)
    {
      v13 = **v9;
      if (v13)
      {
        v14 = (void **)*v13;
        if (*v13)
        {
          v11.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v12);
          v11.n128_u16[0] = vaddlv_u8((uint8x8_t)v11.n128_u64[0]);
          do
          {
            v15 = (unint64_t)v14[1];
            if (v15)
            {
              if (v11.n128_u32[0] > 1uLL)
              {
                if (v15 < v12)
                  break;
                v16 = v15 % v12;
              }
              else
              {
                v16 = v15 & (v12 - 1);
              }
              if (v16)
                break;
            }
            else if (!v14[2])
            {
              goto LABEL_81;
            }
            v14 = (void **)*v14;
          }
          while (v14);
        }
      }
    }
    v14 = (void **)operator new(0x20uLL);
    *v14 = 0;
    v14[1] = 0;
    *((_DWORD *)v14 + 6) = 0;
    v14[2] = 0;
    v11.n128_f32[0] = (float)(unint64_t)(*(_QWORD *)(v6 + 64) + 1);
    v17 = *(float *)(v6 + 72);
    if (!v12 || (float)(v17 * (float)v12) < v11.n128_f32[0])
    {
      v18 = 1;
      if (v12 >= 3)
        v18 = (v12 & (v12 - 1)) != 0;
      v19 = v18 | (2 * v12);
      v20 = vcvtps_u32_f32(v11.n128_f32[0] / v17);
      if (v19 <= v20)
        v21 = v20;
      else
        v21 = v19;
      v12 = *(_QWORD *)(v6 + 48);
    }
    v22 = *v9;
    v23 = **v9;
    if (v23)
    {
      *v14 = *v23;
    }
    else
    {
      *v14 = *(void **)(v6 + 56);
      *(_QWORD *)(v6 + 56) = v14;
      *v22 = (void **)(v6 + 56);
      if (!*v14)
        goto LABEL_80;
      v44 = *((_QWORD *)*v14 + 1);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v44 >= v12)
          v44 %= v12;
      }
      else
      {
        v44 &= v12 - 1;
      }
      v23 = (void **)&(*v9)[v44];
    }
    *v23 = v14;
LABEL_80:
    ++*(_QWORD *)(v6 + 64);
LABEL_81:
    *((_DWORD *)v14 + 6) = v10;
    if (!*(_DWORD *)(v6 + 32))
    {
      *(_DWORD *)(v6 + 36) = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v6 + 16) + 200))(*(_QWORD *)(v6 + 16), v11);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v6 + 16) + 184))(*(_QWORD *)(v6 + 16), 0.0);
    }
    *((_QWORD *)this + 13) = v6;
    return;
  }
  *(_QWORD *)v6 = &off_1E5D3A7E8;
  *(_QWORD *)(v6 + 8) = this;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 24) = *((_QWORD *)this + 1);
  *(_OWORD *)(v6 + 40) = 0u;
  v24 = (uint64_t ****)(v6 + 40);
  *(_DWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_DWORD *)(v6 + 72) = 1065353216;
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  v27 = *(_QWORD *)(v6 + 48);
  if (v27)
  {
    v28 = **v24;
    if (v28)
    {
      v29 = *v28;
      if (*v28)
      {
        v26.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v27);
        v26.n128_u16[0] = vaddlv_u8((uint8x8_t)v26.n128_u64[0]);
        do
        {
          v30 = v29[1];
          if (v30)
          {
            if (v26.n128_u32[0] > 1uLL)
            {
              if (v30 < v27)
                break;
              v31 = v30 % v27;
            }
            else
            {
              v31 = v30 & (v27 - 1);
            }
            if (v31)
              break;
          }
          else if (v29[3] == v29[2])
          {
            goto LABEL_73;
          }
          v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
    }
  }
  v32 = operator new(0x30uLL);
  v33 = (uint64_t **)(v6 + 56);
  v47[0] = v32;
  v47[1] = v6 + 56;
  *v32 = 0u;
  v32[1] = 0u;
  *(_OWORD *)((char *)v32 + 28) = 0u;
  v48 = 1;
  v34 = (float)(unint64_t)(*(_QWORD *)(v6 + 64) + 1);
  v35 = *(float *)(v6 + 72);
  if (!v27 || (float)(v35 * (float)v27) < v34)
  {
    v36 = 1;
    if (v27 >= 3)
      v36 = (v27 & (v27 - 1)) != 0;
    v37 = v36 | (2 * v27);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      v39 = v38;
    else
      v39 = v37;
    v40 = *(_QWORD *)(v6 + 48);
    if ((v40 & (v40 - 1)) != 0 && v40 == 0)
      v27 = 0;
    else
      v27 = *(_QWORD *)(v6 + 48);
    v32 = (_OWORD *)v47[0];
  }
  v42 = **v24;
  if (v42)
  {
    *(_QWORD *)v32 = *v42;
    *v42 = (uint64_t *)v47[0];
  }
  else
  {
    *(_QWORD *)v32 = *v33;
    *v33 = (uint64_t *)v47[0];
    **v24 = v33;
    if (*(_QWORD *)v47[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v43 >= v27)
          v43 %= v27;
      }
      else
      {
        v43 &= v27 - 1;
      }
      (*v24)[v43] = (uint64_t **)v47[0];
    }
  }
  v29 = (uint64_t *)v47[0];
  v47[0] = 0;
  ++*(_QWORD *)(v6 + 64);
LABEL_73:
  *((_DWORD *)v29 + 10) = v25;
  if (!*(_DWORD *)(v6 + 32))
  {
    *(_DWORD *)(v6 + 36) = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v6 + 16) + 200))(*(_QWORD *)(v6 + 16), v26);
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v6 + 16) + 184))(*(_QWORD *)(v6 + 16), 0.0);
  }
  *((_QWORD *)this + 13) = v6;
  quasar::lm::LogMessage::LogMessage(v47, 2, "HeaderAvailable", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 327);
  Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Reverting to slower state tracking because model is large: ", 59);
  v46 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"-gram with symbols up to ", 25);
  std::ostream::operator<<();
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v47);
}

void sub_1ADE6C7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1AF44D190](v2, 0x10A1C40EC34A2F1);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ConsumeNGram(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *Featurizer;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v13;
  _BYTE v14[16];

  v3 = *a2;
  v4 = a2[1] - *a2;
  if (v4)
  {
    v5 = 0;
    if ((unint64_t)(v4 >> 2) <= 1)
      v6 = 1;
    else
      v6 = v4 >> 2;
    while (!v5 || *(_DWORD *)(v3 + 4 * v5) != *((_DWORD *)this + 2))
    {
      v7 = v5 + 1;
      if (v4 >> 2 > (unint64_t)(v5 + 1) && *(_DWORD *)(v3 + 4 * v5) == *((_DWORD *)this + 3))
        break;
      ++v5;
      if (v6 == v7)
        goto LABEL_10;
    }
    if (quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(this))
    {
      quasar::lm::LogMessage::LogMessage(v14, 3, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 339);
      Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v14);
      quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference((uint64_t *)__p, this);
      if ((v13 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v10 = v13;
      else
        v10 = (uint64_t)__p[1];
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" skipped: n-gram has invalid BOS/EOS placement", 46);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v14);
    }
  }
  else
  {
LABEL_10:
    (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13));
  }
}

void sub_1ADE6C9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::RemoveRedundantStates(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  int v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *Featurizer;
  _QWORD *v8;
  __n128 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_DWORD *)this + 24);
  if (v1)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 160))(*((_QWORD *)this + 14));
    if (v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        if ((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), i) == 1)
        {
          LODWORD(v10) = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 14) + 32))(*((_QWORD *)this + 14), i);
          v9.n128_u32[0] = 2139095040;
          if (*(float *)&v10 == INFINITY)
          {
            v5 = *((_QWORD *)this + 14);
            v10 = &unk_1E5D213B0;
            v13 = 0;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v5);
            v6 = *(_QWORD *)(v5 + 8);
            v11 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 8 * i);
            v12 = v6 + 8;
            v9 = *(__n128 *)(*(_QWORD *)(v11 + 24) + 16 * v13);
            if (v9.n128_u32[0] == v1)
            {
              v9.n128_u32[0] = 0;
              fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v10, &v9);
            }
          }
        }
      }
    }
    quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*((_QWORD *)this + 14));
    quasar::lm::LogMessage::LogMessage(&v10, 2, "RemoveRedundantStates", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 384);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Reduced num-states from ", 24);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" to ", 4);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 160))(*((_QWORD *)this + 14));
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v10);
  }
}

void sub_1ADE6CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *__p;
  void *v5;

  quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    v3 = v2;
    operator delete(v2);
  }
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::Check(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  _QWORD *Featurizer;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[16];

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14)) == -1)
  {
    quasar::lm::LogMessage::LogMessage(v9, 5, "Check", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 390);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v9);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Arpa file did not contain the beginning-of-sentence symbol ", 59);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 4) + 88))(__p, *((_QWORD *)this + 4), *((int *)this + 2));
    if ((v8 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v5 = v8;
    else
      v5 = (uint64_t)__p[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)".", 1);
    if ((char)v8 < 0)
      operator delete(__p[0]);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v9);
  }
}

void sub_1ADE6CCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ReadComplete(quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *this)
{
  if (*((_BYTE *)this + 121))
  {
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 14) + 280))(*((_QWORD *)this + 14), *((_QWORD *)this + 4));
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 14) + 288))(*((_QWORD *)this + 14), *((_QWORD *)this + 4));
  }
  if (*((_BYTE *)this + 120))
    quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::RemoveRedundantStates(this);
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::Check(this);
}

_QWORD *quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey>::~ArpaLmCompilerImpl(_QWORD *a1)
{
  *a1 = &off_1E5D3A810;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  return a1;
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey>::~ArpaLmCompilerImpl(_QWORD *a1)
{
  *a1 = &off_1E5D3A810;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 5));
  JUMPOUT(0x1AF44D190);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey>::ConsumeNGram(uint64_t a1, float *a2, unsigned int a3)
{
  unint64_t v3;
  int *v7;
  int *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  float v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  float v20;
  _QWORD *Featurizer;
  void *p_p;
  uint64_t v23;
  _QWORD *v24;
  int *v25;
  int *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  float v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  float v47;
  unint64_t i;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  void *__p;
  unint64_t v55;
  unsigned __int8 v56;
  unint64_t v57[2];
  unint64_t v58;
  unint64_t v59;

  v7 = *(int **)a2;
  v8 = (int *)(*((_QWORD *)a2 + 1) - 4);
  v58 = 0;
  if (v7 != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *v7++;
      v9 |= v11 << v10;
      v10 += 21;
    }
    while (v7 != v8);
    v58 = v9;
  }
  v12 = (uint64_t *)(a1 + 40);
  v13 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v58);
  if (!v13)
  {
    if (quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(*(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8)))
    {
      quasar::lm::LogMessage::LogMessage(v57, 3, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 218);
      Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v57);
      quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference((uint64_t *)&__p, *(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8));
      if ((v56 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v56 & 0x80u) == 0)
        v23 = v56;
      else
        v23 = v55;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)p_p, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" skipped: no parent (n-1)-gram exists", 37);
      if ((char)v56 < 0)
        operator delete(__p);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v57);
    }
    return;
  }
  v14 = *((unsigned int *)v13 + 6);
  v15 = *v8;
  v16 = a2[6];
  if (v15)
    v17 = v15 == *(_DWORD *)(a1 + 32);
  else
    v17 = 1;
  if (v17)
  {
    quasar::lm::LogMessage::LogMessage(&__p, 5, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 227);
    v18 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" <eps> or disambiguation symbol ", 32);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"found in the ARPA file. ", 24);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
  }
  v20 = -v16;
  if (v15 == *(_DWORD *)(a1 + 28))
  {
    if (*(_DWORD *)(a1 + 32))
    {
      (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16), v14, v20);
      return;
    }
    LODWORD(v30) = *(_DWORD *)(a1 + 36);
    goto LABEL_76;
  }
  v25 = (int *)*((_QWORD *)a2 + 1);
  v26 = (int *)(*(_QWORD *)a2 + 4 * a3);
  if (v26 == v25)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = *v26++;
      v27 |= v29 << v28;
      v28 += 21;
    }
    while (v26 != v25);
  }
  v31 = a2[7];
  v59 = v27;
  v32 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), &v59);
  if (!v32)
  {
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
    v33 = *(_QWORD *)(a1 + 48);
    if (v33)
    {
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        v3 = v27;
        if (v33 <= v27)
          v3 = v27 % v33;
      }
      else
      {
        v3 = (v33 - 1) & v27;
      }
      v35 = *(void ***)(*v12 + 8 * v3);
      if (v35)
      {
        v36 = *v35;
        if (*v35)
        {
          do
          {
            v37 = v36[1];
            if (v37 == v27)
            {
              if (v36[2] == v27)
                goto LABEL_72;
            }
            else
            {
              if (v34.u32[0] > 1uLL)
              {
                if (v37 >= v33)
                  v37 %= v33;
              }
              else
              {
                v37 &= v33 - 1;
              }
              if (v37 != v3)
                break;
            }
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
      }
    }
    v36 = operator new(0x20uLL);
    *v36 = 0;
    v36[1] = v27;
    v36[2] = v27;
    *((_DWORD *)v36 + 6) = 0;
    v38 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
    v39 = *(float *)(a1 + 72);
    if (!v33 || (float)(v39 * (float)v33) < v38)
    {
      v40 = 1;
      if (v33 >= 3)
        v40 = (v33 & (v33 - 1)) != 0;
      v41 = v40 | (2 * v33);
      v42 = vcvtps_u32_f32(v38 / v39);
      if (v41 <= v42)
        v43 = v42;
      else
        v43 = v41;
      v33 = *(_QWORD *)(a1 + 48);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v33 <= v27)
          v3 = v27 % v33;
        else
          v3 = v27;
      }
      else
      {
        v3 = (v33 - 1) & v27;
      }
    }
    v44 = *v12;
    v45 = *(_QWORD **)(*v12 + 8 * v3);
    if (v45)
    {
      *v36 = *v45;
    }
    else
    {
      *v36 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v36;
      *(_QWORD *)(v44 + 8 * v3) = a1 + 56;
      if (!*v36)
        goto LABEL_71;
      v46 = *(_QWORD *)(*v36 + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v46 >= v33)
          v46 %= v33;
      }
      else
      {
        v46 &= v33 - 1;
      }
      v45 = (_QWORD *)(*v12 + 8 * v46);
    }
    *v45 = v36;
LABEL_71:
    ++*(_QWORD *)(a1 + 64);
LABEL_72:
    v47 = -v31;
    *((_DWORD *)v36 + 6) = v30;
    for (i = v27 >> 21; ; i >>= 21)
    {
      v57[0] = i;
      v49 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>((_QWORD *)(a1 + 40), v57);
      if (v49)
        break;
    }
    v50 = *(_QWORD *)(a1 + 16);
    v51 = *((_DWORD *)v49 + 6);
    __p = (void *)*(unsigned int *)(a1 + 32);
    v55 = __PAIR64__(v51, LODWORD(v47));
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v50 + 208))(v50, v30, &__p);
    goto LABEL_76;
  }
  LODWORD(v30) = *((_DWORD *)v32 + 6);
LABEL_76:
  if (v15 == *(_DWORD *)(a1 + 24))
  {
    v52 = **(_QWORD **)(a1 + 16);
    if (*(_DWORD *)(a1 + 32))
    {
      (*(void (**)(void))(v52 + 176))();
      return;
    }
    v14 = (*(uint64_t (**)(void))(v52 + 200))();
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16), v14);
    v20 = 0.0;
  }
  v53 = *(_QWORD *)(a1 + 16);
  LODWORD(__p) = v15;
  HIDWORD(__p) = v15;
  v55 = __PAIR64__(v30, LODWORD(v20));
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v53 + 208))(v53, v14, &__p);
}

void sub_1ADE6D2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey,int>,std::__unordered_map_hasher<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey,std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey,int>,quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey::HashType,std::equal_to<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey>,true>,std::__unordered_map_equal<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey,std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey,int>,std::equal_to<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey>,quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey::HashType,true>,std::allocator<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::OptimizedHistKey,int>>>::__rehash_unique[abi:ne180100](uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::unordered_map<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey,int,quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey::HashType,std::equal_to<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey>,std::allocator<std::pair<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey const,int>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

_QWORD *quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey>::~ArpaLmCompilerImpl(_QWORD *a1)
{
  *a1 = &off_1E5D3A7E8;
  return a1;
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey>::~ArpaLmCompilerImpl(_QWORD *a1)
{
  *a1 = &off_1E5D3A7E8;
  JUMPOUT(0x1AF44D190);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompilerImpl<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey>::ConsumeNGram(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  _QWORD *Featurizer;
  _QWORD *v15;
  float v16;
  _QWORD *v17;
  void *p_p;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  const void *v22;
  float v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int64_t v38;
  unint64_t v39;
  const void *v40;
  _QWORD *v41;
  void **v42;
  float v43;
  float v44;
  unint64_t v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  void **v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  int *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  void *__p;
  __int128 v73;

  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - 4;
  v68 = 0;
  v69 = 0;
  v67 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v67, v6, v7, (v7 - (uint64_t)v6) >> 2);
  v8 = (_QWORD *)(a1 + 40);
  v9 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((_QWORD *)(a1 + 40), (int **)&v67);
  if (v9)
  {
    v10 = *((unsigned int *)v9 + 10);
    v11 = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 4);
    v12 = *(float *)(a2 + 24);
    if (v11)
      v13 = v11 == *(_DWORD *)(a1 + 32);
    else
      v13 = 1;
    if (v13)
    {
      quasar::lm::LogMessage::LogMessage(&__p, 5, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 227);
      Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)" <eps> or disambiguation symbol ", 32);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"found in the ARPA file. ", 24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
    }
    v16 = -v12;
    if (v11 == *(_DWORD *)(a1 + 28))
    {
      if (*(_DWORD *)(a1 + 32))
      {
        (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16), v10, v16);
        goto LABEL_85;
      }
      LODWORD(v25) = *(_DWORD *)(a1 + 36);
    }
    else
    {
      v21 = *(_QWORD *)(a2 + 8);
      v22 = (const void *)(*(_QWORD *)a2 + 4 * a3);
      v65 = 0;
      v66 = 0;
      v64 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v64, v22, v21, (v21 - (uint64_t)v22) >> 2);
      v23 = *(float *)(a2 + 28);
      v24 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((_QWORD *)(a1 + 40), (int **)&v64);
      if (v24)
      {
        LODWORD(v25) = *((_DWORD *)v24 + 10);
      }
      else
      {
        v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
        v28 = (char *)v64;
        v27 = (uint64_t)v65;
        if (v64 == v65)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          v30 = (int *)v64;
          do
          {
            v31 = *v30++;
            v29 = v31 + 7853 * v29;
          }
          while (v30 != v65);
        }
        v32 = *(_QWORD *)(a1 + 48);
        v61 = v26;
        if (v32)
        {
          v60 = v10;
          v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
          v33.i16[0] = vaddlv_u8(v33);
          v34 = v33.u32[0];
          if (v33.u32[0] > 1uLL)
          {
            v35 = v29;
            if (v29 >= v32)
              v35 = v29 % v32;
          }
          else
          {
            v35 = (v32 - 1) & v29;
          }
          v62 = v35;
          v36 = *(_QWORD **)(*v8 + 8 * v35);
          if (v36)
          {
            v37 = (_QWORD *)*v36;
            if (*v36)
            {
              v38 = (char *)v65 - (_BYTE *)v64;
              do
              {
                v39 = v37[1];
                if (v39 == v29)
                {
                  v40 = (const void *)v37[2];
                  if (v37[3] - (_QWORD)v40 == v38 && !memcmp(v40, v28, v27 - (_QWORD)v28))
                  {
                    v10 = v60;
                    goto LABEL_70;
                  }
                }
                else
                {
                  if (v34 > 1)
                  {
                    if (v39 >= v32)
                      v39 %= v32;
                  }
                  else
                  {
                    v39 &= v32 - 1;
                  }
                  if (v39 != v62)
                    break;
                }
                v37 = (_QWORD *)*v37;
              }
              while (v37);
            }
          }
          v10 = v60;
        }
        v41 = operator new(0x30uLL);
        v42 = (void **)(a1 + 56);
        __p = v41;
        *(_QWORD *)&v73 = a1 + 56;
        BYTE8(v73) = 0;
        *v41 = 0;
        v41[1] = v29;
        v41[3] = 0;
        v41[4] = 0;
        v41[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v41 + 2, v28, v27, (v27 - (uint64_t)v28) >> 2);
        *((_DWORD *)v41 + 10) = 0;
        BYTE8(v73) = 1;
        v43 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
        v44 = *(float *)(a1 + 72);
        v45 = v62;
        if (!v32 || (float)(v44 * (float)v32) < v43)
        {
          v46 = 1;
          if (v32 >= 3)
            v46 = (v32 & (v32 - 1)) != 0;
          v47 = v46 | (2 * v32);
          v48 = vcvtps_u32_f32(v43 / v44);
          if (v47 <= v48)
            v49 = v48;
          else
            v49 = v47;
          v32 = *(_QWORD *)(a1 + 48);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v29 >= v32)
              v45 = v29 % v32;
            else
              v45 = v29;
          }
          else
          {
            v45 = (v32 - 1) & v29;
          }
        }
        v50 = *(void ***)(*v8 + 8 * v45);
        if (v50)
        {
          *(_QWORD *)__p = *v50;
          *v50 = __p;
        }
        else
        {
          *(_QWORD *)__p = *v42;
          *v42 = __p;
          *(_QWORD *)(*v8 + 8 * v45) = v42;
          if (*(_QWORD *)__p)
          {
            v51 = *(_QWORD *)(*(_QWORD *)__p + 8);
            if ((v32 & (v32 - 1)) != 0)
            {
              if (v51 >= v32)
                v51 %= v32;
            }
            else
            {
              v51 &= v32 - 1;
            }
            *(_QWORD *)(*v8 + 8 * v51) = __p;
          }
        }
        v37 = __p;
        __p = 0;
        ++*(_QWORD *)(a1 + 64);
        v28 = (char *)v64;
        v27 = (uint64_t)v65;
LABEL_70:
        *((_DWORD *)v37 + 10) = v61;
        v25 = v61;
        v71 = 0uLL;
        v70 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v70, v28 + 4, v27, (v27 - (uint64_t)(v28 + 4)) >> 2);
        v52 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((_QWORD *)(a1 + 40), (int **)&v70);
        if (!v52)
        {
          v53 = v10;
          v55 = (char *)v70;
          v54 = v71;
          do
          {
            __p = 0;
            v73 = 0uLL;
            std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v55 + 4, v54, (v54 - (uint64_t)(v55 + 4)) >> 2);
            if (v70)
            {
              *(_QWORD *)&v71 = v70;
              operator delete(v70);
            }
            v55 = (char *)__p;
            v70 = __p;
            v63 = v73;
            v71 = v73;
            v52 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>((_QWORD *)(a1 + 40), (int **)&v70);
            v54 = v63;
          }
          while (!v52);
          v10 = v53;
          v25 = v61;
        }
        v56 = *(_QWORD *)(a1 + 16);
        v57 = *((_DWORD *)v52 + 10);
        __p = (void *)*(unsigned int *)(a1 + 32);
        *(float *)&v73 = -v23;
        DWORD1(v73) = v57;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v56 + 208))(v56, v25, &__p);
        if (v70)
        {
          *(_QWORD *)&v71 = v70;
          operator delete(v70);
        }
      }
      if (v64)
      {
        v65 = (int *)v64;
        operator delete(v64);
      }
    }
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      v58 = **(_QWORD **)(a1 + 16);
      if (*(_DWORD *)(a1 + 32))
      {
        (*(void (**)(void))(v58 + 176))();
        goto LABEL_85;
      }
      v10 = (*(uint64_t (**)(void))(v58 + 200))();
      v16 = 0.0;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16), v10);
    }
    v59 = *(_QWORD *)(a1 + 16);
    LODWORD(__p) = v11;
    HIDWORD(__p) = v11;
    *(_QWORD *)&v73 = __PAIR64__(v25, LODWORD(v16));
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v59 + 208))(v59, v10, &__p);
  }
  else if (quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ShouldWarn(*(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8)))
  {
    quasar::lm::LogMessage::LogMessage(&v70, 3, "ConsumeNGram", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi/arpa-lm-compiler.cpp", 218);
    v17 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v70);
    quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::LineReference((uint64_t *)&__p, *(quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser **)(a1 + 8));
    if (v73 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v73 >= 0)
      v19 = HIBYTE(v73);
    else
      v19 = v73;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" skipped: no parent (n-1)-gram exists", 37);
    if (SHIBYTE(v73) < 0)
      operator delete(__p);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v70);
  }
LABEL_85:
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_1ADE6DBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey,int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::lm::arpa2fst::kaldi_fork::`anonymous namespace'::GeneralHistKey,int>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[2];
      if (v3)
      {
        v2[3] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t i;

  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
    quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        for (i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v5); ++i)
          quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(a1, v5, i);
        v5 = (v5 + 1);
      }
      while ((_DWORD)v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1ADE6DDE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::InitNumArcs(_QWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _DWORD *v11;
  unint64_t v12;
  int v13;

  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1)
    return result;
  for (i = 0; i != v2; ++i)
  {
    LODWORD(v10[0]) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, i);
    v13 = 2139095040;
    if (*(float *)v10 != INFINITY)
      ++*(_DWORD *)(*v3 + 4 * i);
    v6 = *a1;
    v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, i, v10);
    while (1)
    {
      result = v10[0];
      if (!v10[0])
      {
        if (v12 >= v10[2])
          goto LABEL_17;
LABEL_11:
        v9 = 0;
        v8 = v10[1] + 16 * v12;
        goto LABEL_12;
      }
      v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10[0] + 24))(v10[0]);
      result = v10[0];
      if (v7)
        break;
      if (!v10[0])
        goto LABEL_11;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 32))();
      v9 = v10[0];
LABEL_12:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v8 + 12));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      else
        ++v12;
    }
    if (v10[0])
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 8))();
      continue;
    }
LABEL_17:
    if (v11)
      --*v11;
  }
  return result;
}

void sub_1ADE6E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD **v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    quasar::InverseTextNormalizer::getNumTokens(v9);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD v15[3];
  _DWORD *v16;
  uint64_t v17;

  v6 = *a1;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v15);
  if (!v15[0])
  {
    v17 = a3;
    v10 = a3;
LABEL_7:
    v11 = (uint64_t *)(v15[1] + 16 * v10);
    v8 = *v11;
    v9 = v11[1];
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v15[0] + 64))(v15[0], a3);
  if (!v15[0])
  {
    v10 = v17;
    goto LABEL_7;
  }
  v7 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
  v8 = *v7;
  v9 = v7[1];
  if (v15[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 8))(v15[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v16)
    --*v16;
LABEL_10:
  if (HIDWORD(v9) != (_DWORD)a2 && *((_DWORD *)a1 + 2) != HIDWORD(v9))
  {
    v13 = *(_DWORD *)(a1[5] + 4 * (v9 >> 32));
    if (*(_DWORD *)(a1[2] + 4 * (v9 >> 32)) != 1 || v13 < 2)
    {
      if (v13 == 1)
        quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(a1, a2, a3, v8, v9);
    }
    else
    {
      quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(a1, a2, a3, v8, v9);
    }
  }
}

void sub_1ADE6E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  __n128 v13;
  float v14;
  char *v15;
  char *v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __n128 v27;
  float v28;
  float v30;
  uint64_t v33;
  __n128 v34;
  float v35;
  BOOL v37;
  float v38;
  float v41;
  BOOL v43;
  float v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v54 = a4;
  v55 = a5;
  v9 = HIDWORD(a5);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, HIDWORD(a5), &v50);
  v10 = a5 >> 32;
  v11 = INFINITY;
  v12 = INFINITY;
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
  {
    v49 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
    if (HIDWORD(v49) != *((_DWORD *)a1 + 2))
    {
      if (fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v54, (float *)&v49, (uint64_t)&v48))
      {
        v14 = NAN;
        v13.n128_u32[0] = -8388608;
        if (v12 != -INFINITY)
        {
          v13.n128_u32[0] = DWORD2(v49);
          v14 = NAN;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v12 >= *((float *)&v49 + 2))
              v14 = *((float *)&v49 + 2);
            else
              v14 = v12;
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v49));
        HIDWORD(v49) = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, __int128 *, __n128))(*(_QWORD *)v50 + 88))(v50, &v49, v13);
        v15 = v52;
        if (v52 >= v53)
        {
          v18 = (v52 - v51) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v53 - v51;
          if ((v53 - v51) >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v53, v21);
          else
            v22 = 0;
          v23 = &v22[16 * v18];
          *(_OWORD *)v23 = v48;
          v25 = v51;
          v24 = v52;
          v26 = v23;
          if (v52 != v51)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            v24 = v51;
          }
          v16 = v23 + 16;
          v51 = v26;
          v52 = v23 + 16;
          v53 = &v22[16 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_OWORD *)v52 = v48;
          v16 = v15 + 16;
        }
        v52 = v16;
        v17 = v11;
      }
      else
      {
        v17 = NAN;
        v14 = v12;
        if (v11 != -INFINITY)
        {
          v17 = NAN;
          v14 = v12;
          if (*((float *)&v49 + 2) != -INFINITY)
          {
            if (v11 >= *((float *)&v49 + 2))
              v17 = *((float *)&v49 + 2);
            else
              v17 = v11;
            v14 = v12;
          }
        }
      }
      v11 = v17;
      v12 = v14;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
  }
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v27.n128_f32[0] = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, v9);
  LODWORD(v49) = v27.n128_u32[0];
  LODWORD(v48) = 2139095040;
  if (v27.n128_f32[0] != INFINITY)
  {
    if (v54)
    {
      if (v11 >= v27.n128_f32[0])
        v38 = v27.n128_f32[0];
      else
        v38 = v11;
      if (v27.n128_f32[0] == -INFINITY || v11 == -INFINITY)
        v11 = NAN;
      else
        v11 = v38;
    }
    else
    {
      v28 = NAN;
      if (*(float *)&v55 != -INFINITY && v27.n128_f32[0] != -INFINITY)
      {
        if (*(float *)&v55 == INFINITY || v27.n128_f32[0] == INFINITY)
          v28 = INFINITY;
        else
          v28 = v27.n128_f32[0] + *(float *)&v55;
      }
      if (v12 >= v27.n128_f32[0])
        v30 = v27.n128_f32[0];
      else
        v30 = v12;
      if (v27.n128_f32[0] == -INFINITY || v12 == -INFINITY)
        v12 = NAN;
      else
        v12 = v30;
      LODWORD(v49) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
      LODWORD(v48) = 2139095040;
      if (*(float *)&v49 == INFINITY)
        ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      v33 = *a1;
      v34.n128_f32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
      if (v34.n128_f32[0] >= v28)
        v35 = v28;
      else
        v35 = v34.n128_f32[0];
      v37 = v28 == -INFINITY || v34.n128_f32[0] == -INFINITY;
      v34.n128_u32[0] = 2143289344;
      if (!v37)
        v34.n128_f32[0] = v35;
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v33 + 184))(v33, a2, v34);
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(_QWORD, unint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v9, INFINITY);
    }
  }
  *(float *)&v49 = v12;
  LODWORD(v48) = 2139095040;
  v27.n128_f32[0] = v12;
  if (v12 != INFINITY)
  {
    *(float *)&v49 = v11;
    LODWORD(v48) = 2139095040;
    if (v11 == INFINITY)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v55));
      HIDWORD(v55) = *((_DWORD *)a1 + 2);
      (*(void (**)(_QWORD, uint64_t, __int128 *, float))(*(_QWORD *)*a1 + 296))(*a1, a2, &v49, v11);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v49 + 64))(v49, a3);
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v49 + 88))(v49, &v54);
      if ((_QWORD)v49)
        (*(void (**)(_QWORD))(*(_QWORD *)v49 + 8))(v49);
    }
    else
    {
      if (v12 >= v11)
        v41 = v11;
      else
        v41 = v12;
      v43 = v11 == -INFINITY || v12 == -INFINITY;
      v44 = NAN;
      if (v43)
        v41 = NAN;
      if (v11 != -INFINITY)
      {
        if ((LODWORD(v41) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v44 = INFINITY;
          if (v11 != INFINITY)
            v44 = v11 - v41;
        }
        else
        {
          v44 = NAN;
        }
      }
      quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(a1, a2, a3, v44);
    }
  }
  v45 = v52;
  if (v52 != v51)
  {
    v46 = 0;
    v47 = 0;
    v45 = v51;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * *(int *)&v45[v46 + 12]);
      (*(void (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 208))(*a1, a2, v27);
      ++v47;
      v45 = v51;
      v46 += 16;
    }
    while (v47 < (v52 - v51) >> 4);
  }
  if (v45)
  {
    v52 = v45;
    operator delete(v45);
  }
}

void sub_1ADE6E7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::RemoveEpsPattern2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5;
  unint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  uint64_t v17;
  __n128 v18;
  float v19;
  BOOL v21;
  int CanCombineArcs;
  _DWORD v23[3];
  int v24;
  float v25[6];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(float *)&a5;
  v27 = a4;
  v28 = a5;
  v10 = HIDWORD(a5);
  v11 = a5 >> 32;
  v12 = *(_DWORD *)(a1[2] + 4 * (a5 >> 32));
  v13 = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, HIDWORD(a5));
  v25[0] = v13;
  v23[0] = 2139095040;
  if (v13 != INFINITY)
  {
    if (a4)
      return;
    v14 = NAN;
    if (v5 != -INFINITY && v13 != -INFINITY)
    {
      v15 = v5 == INFINITY || v13 == INFINITY;
      v16 = v13 + v5;
      if (v15)
        v14 = INFINITY;
      else
        v14 = v16;
    }
    v25[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    v23[0] = 2139095040;
    if (v25[0] == INFINITY)
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    v17 = *a1;
    v18.n128_f32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    if (v18.n128_f32[0] >= v14)
      v19 = v14;
    else
      v19 = v18.n128_f32[0];
    v21 = v14 == -INFINITY || v18.n128_f32[0] == -INFINITY;
    v18.n128_u32[0] = 2143289344;
    if (!v21)
      v18.n128_f32[0] = v19;
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v17 + 184))(v17, a2, v18);
    if (v12 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v11);
      (*(void (**)(_QWORD, unint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v10, INFINITY);
    }
    goto LABEL_36;
  }
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v10, &v26);
  while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26) + 12) == *((_DWORD *)a1 + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  *(_OWORD *)v25 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v27, v25, (uint64_t)v23);
  if (CanCombineArcs)
  {
    if (v12 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v11);
      --*(_DWORD *)(a1[2] + 4 * SLODWORD(v25[3]));
      v25[3] = *((float *)a1 + 2);
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v26 + 88))(v26, v25);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v24);
    (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*a1 + 208))(*a1, a2, v23);
  }
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (CanCombineArcs)
  {
LABEL_36:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v11);
    HIDWORD(v28) = *((_DWORD *)a1 + 2);
    (*(void (**)(_QWORD, uint64_t, float *))(*(_QWORD *)*a1 + 296))(*a1, a2, v25);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v25 + 64))(*(_QWORD *)v25, a3);
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)v25 + 88))(*(_QWORD *)v25, &v27);
    if (*(_QWORD *)v25)
      (*(void (**)(_QWORD))(**(_QWORD **)v25 + 8))(*(_QWORD *)v25);
  }
}

void sub_1ADE6EB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,quasar::lm::arpa2fst::kaldi_fork::fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::Reweight(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  __n128 v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  uint64_t result;
  float v14[6];
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, a2, &v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v17, a3);
  v7 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v16 = v7;
  v7.n128_u32[0] = v7.n128_u32[2];
  v8 = NAN;
  if (v7.n128_f32[2] != -INFINITY && a4 != -INFINITY)
  {
    v8 = INFINITY;
    v9 = v16.n128_f32[2] == INFINITY || a4 == INFINITY;
    v7.n128_f32[0] = a4 + v16.n128_f32[2];
    if (!v9)
      v8 = a4 + v16.n128_f32[2];
  }
  v16.n128_f32[2] = v8;
  (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)v17 + 88))(v17, &v16, v7);
  (*(void (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v16.n128_u32[3], &v15);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
  {
    *(_OWORD *)v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (LODWORD(v14[3]) != *((_DWORD *)a1 + 2))
    {
      v10 = v14[2] - a4;
      if (v14[2] == INFINITY)
        v10 = INFINITY;
      if (v14[2] == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        v10 = NAN;
      v14[2] = v10;
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v15 + 88))(v15, v14);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v11 = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v16.n128_u32[3]);
  v14[0] = v11;
  LODWORD(v15) = 2139095040;
  if (v11 != INFINITY)
  {
    if (v11 == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v12 = NAN;
    }
    else
    {
      v12 = INFINITY;
      if (v11 != INFINITY)
        v12 = v11 - a4;
    }
    (*(void (**)(_QWORD, _QWORD, float))(*(_QWORD *)*a1 + 184))(*a1, v16.n128_u32[3], v12);
  }
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void sub_1ADE6EE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1ADE6F1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v31 = v30;

  _Unwind_Resume(a1);
}

void sub_1ADE6F420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void quasar::SimpleNameEnumerator::addSimpleEnumerations(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t **a4)
{
  _QWORD *v5;
  _QWORD *i;
  std::vector<std::string>::pointer end;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string __p;
  std::vector<std::string> v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::__split_buffer<std::string> __v;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  quasar::NameEnumerator::addSpecEnumerations(a1, (int **)(a1 + 32), a3, 0, (uint64_t *)&v22);
  v5 = v22;
  for (i = v23; v5 != i; v5 += 3)
  {
    if (*v5 != v5[1])
    {
      memset(&v21, 0, sizeof(v21));
      std::to_string(&__p, *(_DWORD *)(*v5 + 48));
      end = v21.__end_;
      if (v21.__end_ >= v21.__end_cap_.__value_)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21.__end_ - (char *)v21.__begin_) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 3) > v10)
          v10 = 0x5555555555555556 * (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 3) >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v10;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v21.__end_cap_;
        if (v11)
          v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v21.__end_cap_, v11);
        else
          v12 = 0;
        v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v21, &__v);
        v15 = v21.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v21.__end_ = v15;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v21.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v21.__end_ = end + 1;
      }
      v16 = *v5;
      v17 = v5[1];
      if (*v5 != v17)
      {
        v18 = v21.__end_;
        do
        {
          if (v18 >= v21.__end_cap_.__value_)
          {
            v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v21, (__int128 *)v16);
          }
          else
          {
            if (*(char *)(v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
            }
            else
            {
              v19 = *(_OWORD *)v16;
              v18->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
              *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
            }
            ++v18;
          }
          v21.__end_ = v18;
          v16 += 80;
        }
        while (v16 != v17);
      }
      std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a4, &v21, (__int128 **)&v21);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v22;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1ADE6F684(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, void *__pa, char a10, uint64_t a11, char *a12, std::__split_buffer<std::wstring> *a13, uint64_t a14, char a15)
{
  a12 = &a15;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(__p);
}

_QWORD *quasar::SimpleNameEnumerator::SimpleNameEnumerator(_QWORD *a1, __int128 *a2, quasar::PTree *this)
{
  std::string *v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  quasar::PTree *v10;
  const std::string *String;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v23;
  std::string v24;
  __int128 *v25;
  __int128 *v26;
  void *__p[2];
  _QWORD *v28;
  char *v29;
  _QWORD *v30;

  *a1 = off_1E5D35280;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *a1 = off_1E5D37CE8;
  a1[4] = 0;
  v7 = a1 + 4;
  a1[5] = 0;
  a1[6] = 0;
  v8 = quasar::PTree::begin(this);
  for (i = quasar::PTree::end(this); v8 != i; v8 = (uint64_t)v10 + 64)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ":");
    quasar::split(v8, (uint64_t *)__p, 0, (uint64_t)&v25);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    v10 = (quasar::PTree *)(v8 + 24);
    String = (const std::string *)quasar::PTree::getString(v10);
    v23 = std::stoi(String, 0, 10);
    memset(&v24, 0, sizeof(v24));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v25, v26, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v25) >> 3));
    v12 = a1[5];
    v13 = a1[6];
    if (v12 >= v13)
    {
      v15 = (uint64_t)(v12 - *v7) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v17 = v13 - *v7;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      v30 = a1 + 6;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a1 + 6), v18);
      v20 = &v19[32 * v15];
      __p[0] = v19;
      __p[1] = v20;
      v29 = &v19[32 * v21];
      *(_DWORD *)v20 = v23;
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = 0;
      *((_QWORD *)v20 + 1) = 0;
      *(std::string *)(v20 + 8) = v24;
      memset(&v24, 0, sizeof(v24));
      v28 = v20 + 32;
      std::vector<std::pair<int,std::vector<std::string>>>::__swap_out_circular_buffer(a1 + 4, __p);
      v14 = a1[5];
      std::__split_buffer<std::pair<int,std::vector<std::string>>>::~__split_buffer(__p);
    }
    else
    {
      *(_DWORD *)v12 = v23;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(std::string *)(v12 + 8) = v24;
      memset(&v24, 0, sizeof(v24));
      v14 = v12 + 32;
    }
    a1[5] = v14;
    __p[0] = &v24;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  return a1;
}

void sub_1ADE6F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void **v23;

  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  quasar::NameEnumerator::~NameEnumerator(v23);
  _Unwind_Resume(a1);
}

void quasar::SimpleNameEnumerator::addEnumerations(uint64_t a1, __int128 **a2, uint64_t **a3)
{
  quasar::SimpleNameEnumerator::addSimpleEnumerations(a1, (uint64_t)a2, a2, a3);
}

uint64_t quasar::artifact::Artifact::isValid()
{
  uint64_t v0;
  char v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  archive_read_new();
  archive_read_set_format();
  if (archive_read_open_filename() || (v12 = 0, archive_read_next_header()))
  {
    v0 = 0;
  }
  else
  {
    v2 = 0;
    do
    {
      v3 = (char *)archive_entry_pathname();
      std::string::basic_string[abi:ne180100]<0>(&v10, v3);
      if (v11 < 0)
      {
        if (*((_QWORD *)&v10 + 1) == 15)
        {
          v7 = bswap64(*(_QWORD *)v10);
          v8 = 0x61737365745F696ELL;
          if (v7 == 0x61737365745F696ELL
            && (v7 = bswap64(*(_QWORD *)(v10 + 7)), v8 = 0x6E666F2E6A736F6ELL, v7 == 0x6E666F2E6A736F6ELL))
          {
            v9 = 0;
          }
          else
          {
            v9 = v7 < v8 ? -1 : 1;
          }
          if (!v9)
            v2 = 1;
        }
        operator delete((void *)v10);
      }
      else if (v11 == 15)
      {
        v4 = bswap64(v10);
        v5 = 0x61737365745F696ELL;
        if (v4 == 0x61737365745F696ELL
          && (v4 = bswap64(*(unint64_t *)((char *)&v10 + 7)),
              v5 = 0x6E666F2E6A736F6ELL,
              v4 == 0x6E666F2E6A736F6ELL))
        {
          v6 = 0;
        }
        else if (v4 < v5)
        {
          v6 = -1;
        }
        else
        {
          v6 = 1;
        }
        if (!v6)
          v2 = 1;
      }
      v0 = v2 & 1;
    }
    while (!archive_read_next_header() && (v2 & 1) == 0);
  }
  archive_read_close();
  archive_read_free();
  return v0;
}

uint64_t quasar::artifact::Artifact::Artifact(uint64_t a1, const void ***a2, const void ***a3, const void ***a4)
{
  uint64_t v8;
  uint64_t i;
  const void *v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E5D3BCF0;
  v8 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(v11, "version");
  std::string::basic_string[abi:ne180100]<0>(v12, "locale");
  std::set<std::string>::set[abi:ne180100](v8, v11, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12[i + 2]) < 0)
      operator delete((void *)v11[i + 3]);
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), a3);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 56), a2);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)(a1 + 80), a4);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  return a1;
}

void sub_1ADE6FDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__tree<std::string>::destroy(v17, v15[8]);
  std::__tree<std::string>::destroy(v18, v15[5]);
  std::__tree<std::string>::destroy(v16, v15[2]);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::Artifact(uint64_t a1, const void ***a2, const void ***a3, const void ***a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  const void *v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E5D3BCF0;
  v10 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(v14, "version");
  std::string::basic_string[abi:ne180100]<0>(v15, "locale");
  std::set<std::string>::set[abi:ne180100](v10, v14, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v14[i + 3]);
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), a3);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 56), a2);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)(a1 + 80), a4);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 208), *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    v12 = *(_OWORD *)a5;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a5 + 16);
    *(_OWORD *)(a1 + 208) = v12;
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 256) = 0;
  quasar::artifact::Artifact::read(a1, a5, 1);
  return a1;
}

void sub_1ADE70008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__tree<std::string>::destroy(v16, *(char **)(v10 + 184));
  std::__tree<std::string>::destroy(v15, *(char **)(v10 + 160));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v14, *(_QWORD **)(v10 + 136));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v13, *(_QWORD **)(v10 + 112));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v12, *(_QWORD **)(v10 + 88));
  std::__tree<std::string>::destroy(v11, *(char **)(v10 + 64));
  std::__tree<std::string>::destroy(a9, *(char **)(v10 + 40));
  std::__tree<std::string>::destroy(a10, *(char **)(v10 + 16));
  _Unwind_Resume(a1);
}

void sub_1ADE700B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 47) < 0)
      operator delete(*(void **)(v0 + v1 + 24));
    v1 -= 24;
    if (v1 == -48)
      JUMPOUT(0x1ADE700A8);
  }
}

void sub_1ADE700DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADE700A8);
}

void sub_1ADE700F4()
{
  JUMPOUT(0x1ADE700A8);
}

uint64_t quasar::artifact::Artifact::read(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  char *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  void *__p[2];
  char v16;
  void *v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  uint64_t v35;

  quasar::artifact::ArchiveReader::ArchiveReader(&v34, a2);
  v5 = *(_QWORD *)(a1 + 232);
  if (v5)
  {
    if (v35 != v5 && quasar::gLogLevel >= 1)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Artifact file was changed before being loaded", 45);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 232) = v35;
  }
  while (quasar::artifact::ArchiveReader::readNextEntry((quasar::artifact::ArchiveReader *)&v34, 3))
  {
    v7 = (char *)archive_entry_pathname();
    std::string::basic_string[abi:ne180100]<0>(v17, v7);
    if (SBYTE7(v18) < 0)
    {
      if (v17[1] != (void *)15)
        goto LABEL_18;
      v9 = (void **)v17[0];
    }
    else
    {
      if (SBYTE7(v18) != 15)
        goto LABEL_18;
      v9 = v17;
    }
    v10 = *v9;
    v11 = *(uint64_t *)((char *)v9 + 7);
    if (v10 == (void *)0x6E695F7465737361 && v11 == 0x6E6F736A2E6F666ELL)
    {
      quasar::artifact::ArchiveReader::readFile((quasar::artifact::ArchiveReader *)&v34, v8);
      quasar::artifact::Artifact::assetJsonStringToMetadata(a1, (uint64_t)__p);
      goto LABEL_24;
    }
LABEL_18:
    if (a1 + 248 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, (const void **)v17))goto LABEL_26;
    if (a3)
    {
      quasar::lm::InsertOrDie<std::set<std::string>>((uint64_t **)(a1 + 152), (uint64_t)v17);
      goto LABEL_26;
    }
    if (a1 + 136 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, (const void **)v17))goto LABEL_26;
    quasar::artifact::ArchiveReader::readFile((quasar::artifact::ArchiveReader *)&v34, v13);
    quasar::artifact::Artifact::setContent((uint64_t **)a1, (const void **)v17, (__int128 *)__p, 0);
LABEL_24:
    if (v16 < 0)
      operator delete(__p[0]);
LABEL_26:
    if (SBYTE7(v18) < 0)
      operator delete(v17[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((a3 & 1) == 0)
    *(_BYTE *)(a1 + 200) = 1;
  v34 = &unk_1E5D3BB70;
  return archive_read_free();
}

void sub_1ADE70328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a16);
  *(_QWORD *)(v21 - 104) = &unk_1E5D3BB70;
  archive_read_free();
  _Unwind_Resume(a1);
}

char *quasar::artifact::Artifact::getVersion(quasar::artifact::Artifact *this)
{
  char *v1;
  char *v2;
  void *__p[2];
  char v5;

  v1 = (char *)this + 104;
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  v2 = quasar::lm::FindOrDie<std::map<std::string,std::string>>((uint64_t)v1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1ADE70408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *quasar::lm::FindOrDie<std::map<std::string,std::string>>(uint64_t a1, uint64_t a2)
{
  quasar::lm *v4;
  quasar::lm *v5;
  _QWORD *Featurizer;
  _QWORD *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  _BYTE v12[16];

  v4 = (quasar::lm *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1, (const void **)a2);
  v5 = v4;
  if ((quasar::lm *)(a1 + 8) == v4)
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FindOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 104);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"missing key ", 12);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const void *)a2;
    else
      v9 = *(const void **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    quasar::lm::nullstream(v4);
  }
  return (char *)v5 + 56;
}

void sub_1ADE704D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::getLocale(quasar::artifact::Artifact *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  char *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  v3 = (char *)this + 104;
  std::string::basic_string[abi:ne180100]<0>(v7, "locale");
  v4 = quasar::lm::FindOrDie<std::map<std::string,std::string>>((uint64_t)v3, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  quasar::Locale::fromInternalShortIdentifier((uint64_t)v4, (char *)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1ADE70570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL quasar::artifact::Artifact::setInfo(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _BOOL8 v6;

  v6 = quasar::artifact::Artifact::checkSupportsInfo(a1, a2);
  if (v6)
    quasar::lm::InsertOrDie<std::map<std::string,std::string>>((uint64_t **)(a1 + 104), a2, a3);
  return v6;
}

BOOL quasar::artifact::Artifact::checkSupportsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD v13[17];

  v4 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 32, (const void **)a2);
  v5 = a1 + 40;
  if (v5 == v4 && quasar::gLogLevel >= 1)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Not able to set metadata. Unsupported key \"", 43);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const void *)a2;
    else
      v9 = *(const void **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
  }
  return v5 != v4;
}

void sub_1ADE706CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

BOOL quasar::artifact::Artifact::supportsInfo(uint64_t a1, const void **a2)
{
  return a1 + 40 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 32, a2);
}

BOOL quasar::artifact::Artifact::hasInfo(uint64_t a1, const void **a2)
{
  return a1 + 112 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 104, a2);
}

void quasar::artifact::Artifact::getInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  char *v6;
  __int128 v7;

  if (quasar::artifact::Artifact::checkSupportsInfo(a1, a2))
  {
    v6 = quasar::lm::FindOrDie<std::map<std::string,std::string>>(a1 + 104, a2);
    if (v6[23] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *(_OWORD *)v6;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

BOOL quasar::artifact::Artifact::setContent(uint64_t **a1, const void **a2, __int128 *a3, int a4)
{
  _BOOL8 v8;

  v8 = quasar::artifact::Artifact::checkSupportsContent((uint64_t)a1, (uint64_t)a2);
  if (v8)
  {
    if (a4)
      quasar::artifact::Artifact::clearContent(a1, a2);
    quasar::lm::InsertOrDie<std::map<std::string,std::string>>(a1 + 16, (uint64_t)a2, a3);
    if (a1 + 20 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 19), a2))quasar::lm::InsertOrDie<std::set<std::string>>(a1 + 19, (uint64_t)a2);
    std::__tree<std::string>::__erase_unique<std::string>(a1 + 30, a2);
  }
  return v8;
}

BOOL quasar::artifact::Artifact::checkSupportsContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD v13[17];

  v4 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 56, (const void **)a2);
  v5 = a1 + 64;
  if (v5 == v4 && quasar::gLogLevel >= 1)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Not able to set info. Unsupported key \"", 39);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const void *)a2;
    else
      v9 = *(const void **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
  }
  return v5 != v4;
}

void sub_1ADE70944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::clearContent(uint64_t **a1, const void **a2)
{
  uint64_t result;
  uint64_t v5;

  result = quasar::artifact::Artifact::checkSupportsContent((uint64_t)a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    if (a1 + 20 != (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 19), a2)&& a1 + 17 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 16), a2)&& a1 + 31 == (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 30), a2))
    {
      quasar::lm::InsertOrDie<std::set<std::string>>(a1 + 30, (uint64_t)a2);
      v5 = std::__tree<std::string>::__erase_unique<std::string>(a1 + 19, a2);
    }
    else
    {
      result = std::__tree<std::string>::__erase_unique<std::string>(a1 + 19, a2);
      if (!result)
        return result;
      v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(a1 + 16, a2);
    }
    return v5 != 0;
  }
  return result;
}

_QWORD *quasar::artifact::Artifact::openContentForWriting@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = operator new(0x20uLL);
  *v9 = &off_1E5D3ED20;
  v9[1] = a1;
  v9[2] = a2;
  *((_BYTE *)v9 + 24) = a3;
  v13 = v9;
  quasar::artifact::ArtifactOutputStream::ArtifactOutputStream(v8, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v11 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
  }
  *a4 = v8;
  return result;
}

void sub_1ADE70B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MEMORY[0x1AF44D190](v13, 0x10B3C400322C151);
  _Unwind_Resume(a1);
}

BOOL quasar::artifact::Artifact::setContentFromInputStream(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _BOOL8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v5 = (char *)(*a3 + *(_QWORD *)(*(_QWORD *)*a3 - 24));
  *((_DWORD *)v5 + 2) &= ~0x1000u;
  quasar::artifact::Artifact::openContentForWriting(a1, a2, a4, &v14);
  v12 = *a3;
  v6 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)*a3, &v13);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    v7 = 0;
  else
    v7 = v12;
  v8 = v14;
  v9.n128_f64[0] = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::ostream_iterator<unsigned char,char,std::char_traits<char>>>(v7, v13, 0, v14, 0, &v15);
  v10 = (*(_DWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 - 24) + 32) & 1) == 0;
  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v8 + 8))(v8, v9);
  return v10;
}

void sub_1ADE70C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

BOOL quasar::artifact::Artifact::supportsContent(uint64_t a1, const void **a2)
{
  return a1 + 64 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 56, a2);
}

BOOL quasar::artifact::Artifact::hasContent(uint64_t a1, const void **a2)
{
  return a1 + 136 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, a2)|| a1 + 160 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 152, a2);
}

void quasar::artifact::Artifact::getContentAsString(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  int v6;
  uint64_t v7;
  char v8;
  char *v9;
  __int128 v10;
  _OWORD v11[17];
  _QWORD v12[3];

  if (a1 + 160 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 152, a2)|| a1 + 136 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, a2)|| a1 + 248 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, a2))
  {
    goto LABEL_10;
  }
  quasar::artifact::ArchiveReader::ArchiveReader(v12, a1 + 208);
  if (v12[2] != *(_QWORD *)(a1 + 232) && quasar::gLogLevel >= 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Artifact file was changed before being loaded", 45);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
  }
  v6 = quasar::artifact::ArchiveReader::seek((quasar::artifact::ArchiveReader *)v12, (uint64_t)a2);
  v8 = v6;
  if (v6)
    quasar::artifact::ArchiveReader::readFile((quasar::artifact::ArchiveReader *)v12, v7);
  v12[0] = &unk_1E5D3BB70;
  archive_read_free();
  if ((v8 & 1) == 0)
  {
LABEL_10:
    v9 = quasar::lm::FindOrDie<std::map<std::string,std::string>>(a1 + 128, (uint64_t)a2);
    if (v9[23] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *(_OWORD *)v9;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
  }
}

void sub_1ADE70E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  *(_QWORD *)(v9 - 72) = &unk_1E5D3BB70;
  archive_read_free();
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::ArchiveReader::seek(quasar::artifact::ArchiveReader *a1, uint64_t a2)
{
  quasar::artifact::ArchiveReader *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _OWORD v17[17];

  v3 = a1;
  while (quasar::artifact::ArchiveReader::readNextEntry(a1, 3))
  {
    v4 = (const char *)archive_entry_pathname();
    v5 = strlen(v4);
    v6 = v5;
    if (*(char *)(a2 + 23) < 0)
    {
      if (v5 != *(_QWORD *)(a2 + 8))
        goto LABEL_11;
      if (v5 == -1)
LABEL_22:
        std::string::__throw_out_of_range[abi:ne180100]();
      v7 = *(const void **)a2;
    }
    else
    {
      if (v5 != *(unsigned __int8 *)(a2 + 23))
        goto LABEL_11;
      v7 = (const void *)a2;
      if (v6 == -1)
        goto LABEL_22;
    }
    if (!memcmp(v7, v4, v6))
      return 1;
LABEL_11:
    a1 = v3;
  }
  if (quasar::gLogLevel >= 1)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Failed to find archive entry named ", 35);
    v9 = *(char *)(a2 + 23);
    if (v9 >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
    v14 = (const char *)archive_error_string();
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v17);
  }
  return 0;
}

void sub_1ADE70FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::ArchiveReader::readFile(quasar::artifact::ArchiveReader *this, uint64_t a2)
{
  quasar::artifact::ArchiveReader *v2;
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;
  _BYTE v8[4096];
  uint64_t v9;

  v2 = (quasar::artifact::ArchiveReader *)MEMORY[0x1E0C80A78](this, a2);
  v9 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  while (quasar::artifact::ArchiveReader::readData(v2, v8, 0x1000uLL, 3))
    std::ostream::write();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v7);
}

void sub_1ADE71124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::getContentAsStream(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::artifact::ArchiveReader *v6;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  quasar::artifact::ArchiveReader *v43;
  std::__shared_weak_count *v44;

  if (a1 + 160 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 152, a2)|| a1 + 136 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, a2)|| a1 + 248 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, a2))
  {
    goto LABEL_29;
  }
  std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string const&,void>(a1 + 208, &v43);
  v6 = v43;
  if (*((_QWORD *)v43 + 2) != *(_QWORD *)(a1 + 232) && quasar::gLogLevel >= 1)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Artifact file was changed before being loaded", 45);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    v6 = v43;
  }
  v8 = quasar::artifact::ArchiveReader::seek(v6, (uint64_t)a2);
  v9 = v8;
  if (v8)
  {
    std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,std::shared_ptr<quasar::artifact::ArchiveReader> &,void>((uint64_t *)&v43, &v24);
    v10 = operator new();
    v11 = v10;
    __p[0] = v24;
    __p[1] = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    quasar::artifact::ArtifactInputStream::ArtifactInputStream(v10, (uint64_t)__p);
    v14 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *a3 = v11;
    v17 = v25;
    if (v25)
    {
      v18 = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = v44;
  if (v44)
  {
    v21 = (unint64_t *)&v44->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if ((v9 & 1) == 0)
  {
LABEL_29:
    quasar::artifact::Artifact::getContentAsString(a1, a2, (std::string *)__p);
    v23 = (_QWORD *)operator new();
    std::istringstream::basic_istringstream[abi:ne180100](v23, (const std::string *)__p, 8);
    *a3 = (uint64_t)v23;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADE713B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x1AF44D190](v16, 0x10B1C40DC54C11BLL);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17 - 80);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::isMinimalistic(quasar::artifact::Artifact *this)
{
  return 1;
}

uint64_t quasar::artifact::Artifact::write(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4;
  unsigned __int8 **v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60;
  uint64_t v61;
  unsigned __int8 v62;
  quasar::artifact::ArchiveReader *v63[2];
  void *v64;
  void *v65[2];
  unsigned __int8 v66;
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    quasar::artifact::Artifact::metadataToAssetJsonString((quasar::artifact::Artifact *)a1);
    v4 = v66;
    if ((v66 & 0x80u) != 0)
      v4 = (unint64_t)v65[1];
    if (!v4)
    {
      if (quasar::gLogLevel >= 1)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid artifact - empty metadata", 33);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
      v7 = 0;
      goto LABEL_113;
    }
    v5 = (unsigned __int8 **)(a1 + 208);
    v6 = *(_BYTE *)(a1 + 231);
    if (v6 < 0)
    {
      if (!*(_QWORD *)(a1 + 216))
        goto LABEL_32;
    }
    else if (!*(_BYTE *)(a1 + 231))
    {
      goto LABEL_32;
    }
    v8 = a2[23];
    if ((v8 & 0x80u) == 0)
      v9 = a2[23];
    else
      v9 = *((_QWORD *)a2 + 1);
    if (v6 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 231);
    else
      v10 = *(_QWORD *)(a1 + 216);
    if (v9 != v10)
      goto LABEL_33;
    if (v6 >= 0)
      v11 = (unsigned __int8 *)(a1 + 208);
    else
      v11 = *v5;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v11, *((_QWORD *)a2 + 1)))
        goto LABEL_33;
      goto LABEL_32;
    }
    if (a2[23])
    {
      v12 = a2;
      while (*v12 == *v11)
      {
        ++v12;
        ++v11;
        if (!--v8)
          goto LABEL_32;
      }
LABEL_33:
      quasar::artifact::ArchiveWriter::ArchiveWriter(&v64);
      std::string::basic_string[abi:ne180100]<0>(__p, "asset_info.json");
      v13 = quasar::artifact::ArchiveWriter::write((uint64_t)&v64, (uint64_t)__p, (uint64_t)v65, 3);
      v14 = v13;
      if (SBYTE7(v68) < 0)
      {
        operator delete(__p[0]);
        if ((v14 & 1) != 0)
        {
LABEL_35:
          v15 = *(_BYTE *)(a1 + 231);
          if (v15 < 0)
          {
            if (!*(_QWORD *)(a1 + 216))
              goto LABEL_94;
          }
          else if (!*(_BYTE *)(a1 + 231))
          {
            goto LABEL_94;
          }
          v16 = a2[23];
          if ((v16 & 0x80u) == 0)
            v17 = a2[23];
          else
            v17 = *((_QWORD *)a2 + 1);
          if (v15 >= 0)
            v18 = *(unsigned __int8 *)(a1 + 231);
          else
            v18 = *(_QWORD *)(a1 + 216);
          if (v17 == v18)
          {
            if (v15 >= 0)
              v19 = (unsigned __int8 *)(a1 + 208);
            else
              v19 = *v5;
            if ((v16 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)a2, v19, *((_QWORD *)a2 + 1)))
                goto LABEL_94;
            }
            else
            {
              if (!a2[23])
                goto LABEL_94;
              while (*a2 == *v19)
              {
                ++a2;
                ++v19;
                if (!--v16)
                  goto LABEL_94;
              }
            }
          }
          if (!*(_BYTE *)(a1 + 200))
          {
            std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string &,void>(a1 + 208, v63);
            while (1)
            {
              if (!quasar::artifact::ArchiveReader::readNextEntry(v63[0], 3))
              {
                std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v63);
                break;
              }
              v20 = (char *)archive_entry_pathname();
              std::string::basic_string[abi:ne180100]<0>(&v60, v20);
              if ((char)v62 < 0)
              {
                if (v61 == 15)
                {
                  v21 = (uint64_t *)v60;
LABEL_66:
                  v22 = *v21;
                  v23 = *(uint64_t *)((char *)v21 + 7);
                  v24 = v22 == 0x6E695F7465737361 && v23 == 0x6E6F736A2E6F666ELL;
                  if (v24)
                    goto LABEL_72;
                }
              }
              else if (v62 == 15)
              {
                v21 = (uint64_t *)&v60;
                goto LABEL_66;
              }
              if (a1 + 248 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 240, (const void **)&v60)&& a1 + 136 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 128, (const void **)&v60))
              {
                std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,std::shared_ptr<quasar::artifact::ArchiveReader> &,void>((uint64_t *)v63, &v58);
                std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::allocator<quasar::artifact::ArtifactInputStream>,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,void>(&v58, &v56);
                archive_entry_size();
                v55 = v57;
                if (v57)
                {
                  p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                  do
                    v26 = __ldxr(p_shared_owners);
                  while (__stxr(v26 + 1, p_shared_owners));
                }
                v27 = quasar::artifact::ArchiveWriter::write((uint64_t)&v64, (uint64_t)&v60);
                if (v55)
                {
                  v28 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v29 = __ldaxr(v28);
                  while (__stlxr(v29 - 1, v28));
                  if (!v29)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                if ((v27 & 1) == 0)
                {
                  if (quasar::gLogLevel >= 1)
                  {
                    v82 = 0u;
                    v83 = 0u;
                    v80 = 0u;
                    v81 = 0u;
                    v78 = 0u;
                    v79 = 0u;
                    v76 = 0u;
                    v77 = 0u;
                    v74 = 0u;
                    v75 = 0u;
                    v72 = 0u;
                    v73 = 0u;
                    v70 = 0u;
                    v71 = 0u;
                    v68 = 0u;
                    v69 = 0u;
                    *(_OWORD *)__p = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error while writing ", 20);
                    if ((v62 & 0x80u) == 0)
                      v46 = &v60;
                    else
                      v46 = v60;
                    if ((v62 & 0x80u) == 0)
                      v47 = v62;
                    else
                      v47 = v61;
                    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" to archive", 11);
                    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
                  }
                  v49 = v57;
                  if (v57)
                  {
                    v50 = (unint64_t *)&v57->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v52 = v59;
                  if (v59)
                  {
                    v53 = (unint64_t *)&v59->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  if ((char)v62 < 0)
                    operator delete(v60);
                  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v63);
                  goto LABEL_111;
                }
                v30 = v57;
                if (v57)
                {
                  v31 = (unint64_t *)&v57->__shared_owners_;
                  do
                    v32 = __ldaxr(v31);
                  while (__stlxr(v32 - 1, v31));
                  if (!v32)
                  {
                    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                    std::__shared_weak_count::__release_weak(v30);
                  }
                }
                v33 = v59;
                if (v59)
                {
                  v34 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v35 = __ldaxr(v34);
                  while (__stlxr(v35 - 1, v34));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                }
              }
LABEL_72:
              if ((char)v62 < 0)
                operator delete(v60);
            }
          }
LABEL_94:
          v36 = *(_QWORD **)(a1 + 128);
          if (v36 == (_QWORD *)(a1 + 136))
          {
LABEL_102:
            v7 = 1;
LABEL_112:
            v64 = &unk_1E5D3BB90;
            archive_write_free();
LABEL_113:
            if ((char)v66 < 0)
              operator delete(v65[0]);
            return v7;
          }
          while ((quasar::artifact::ArchiveWriter::write((uint64_t)&v64, (uint64_t)(v36 + 4), (uint64_t)(v36 + 7), 3) & 1) != 0)
          {
            v37 = (_QWORD *)v36[1];
            if (v37)
            {
              do
              {
                v38 = v37;
                v37 = (_QWORD *)*v37;
              }
              while (v37);
            }
            else
            {
              do
              {
                v38 = (_QWORD *)v36[2];
                v24 = *v38 == (_QWORD)v36;
                v36 = v38;
              }
              while (!v24);
            }
            v36 = v38;
            if (v38 == (_QWORD *)(a1 + 136))
              goto LABEL_102;
          }
          if (quasar::gLogLevel >= 1)
          {
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error while writing ", 20);
            v40 = *((char *)v36 + 55);
            if (v40 >= 0)
              v41 = (uint64_t)(v36 + 4);
            else
              v41 = v36[4];
            if (v40 >= 0)
              v42 = *((unsigned __int8 *)v36 + 55);
            else
              v42 = v36[5];
            v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" to archive", 11);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
          }
LABEL_111:
          v7 = 0;
          goto LABEL_112;
        }
      }
      else if ((v13 & 1) != 0)
      {
        goto LABEL_35;
      }
      if (quasar::gLogLevel >= 1)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to write metadata", 24);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
      goto LABEL_111;
    }
LABEL_32:
    quasar::artifact::Artifact::sync(a1);
    goto LABEL_33;
  }
  if (quasar::gLogLevel >= 1)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid artifact", 16);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  return 0;
}

void sub_1ADE71BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  a23 = &unk_1E5D3BB90;
  archive_write_free();
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::metadataToAssetJsonString(quasar::artifact::Artifact *this)
{
  quasar::artifact::Artifact *v2;
  quasar::artifact::Artifact *v3;
  quasar::artifact::Artifact *v4;
  BOOL v5;
  quasar::artifact::Artifact *v6;
  quasar::artifact::Artifact *v7;
  quasar::artifact::Artifact *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *__p[2];
  char v14;
  void *v15;
  char v16;
  uint64_t v17[19];
  _BYTE v18[64];
  std::string v19;
  void *v20;
  char v21;
  _BYTE v22[64];

  quasar::PTree::PTree((quasar::PTree *)v22);
  v2 = (quasar::artifact::Artifact *)*((_QWORD *)this + 13);
  if (v2 != (quasar::artifact::Artifact *)((char *)this + 112))
  {
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(&v19, (__int128 *)v2 + 2);
      quasar::PTree::PTree(__p, &v20);
      quasar::PTree::putChild((uint64_t)v22, (uint64_t)&v19, (uint64_t)__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)__p);
      if (v21 < 0)
        operator delete(v20);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      v3 = (quasar::artifact::Artifact *)*((_QWORD *)v2 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(quasar::artifact::Artifact **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (quasar::artifact::Artifact *)*((_QWORD *)v2 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (quasar::artifact::Artifact *)((char *)this + 112));
  }
  quasar::PTree::PTree((quasar::PTree *)&v19);
  v6 = (quasar::artifact::Artifact *)*((_QWORD *)this + 22);
  if (v6 != (quasar::artifact::Artifact *)((char *)this + 184))
  {
    do
    {
      quasar::PTree::PTree(__p, (char *)v6 + 32);
      quasar::PTree::addChild((quasar::PTree *)&v19, (const quasar::PTree *)__p);
      quasar::PTree::~PTree((quasar::PTree *)__p);
      v7 = (quasar::artifact::Artifact *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(quasar::artifact::Artifact **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (quasar::artifact::Artifact *)*((_QWORD *)v6 + 2);
          v5 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v5);
      }
      v6 = v8;
    }
    while (v8 != (quasar::artifact::Artifact *)((char *)this + 184));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "supported_locales");
  quasar::PTree::putChild((uint64_t)v22, (uint64_t)__p, (uint64_t)&v19, 1);
  if (v14 < 0)
    operator delete(__p[0]);
  quasar::PTree::PTree((quasar::PTree *)v18);
  v9 = (char *)*((_QWORD *)this + 19);
  v10 = (char *)this + 160;
  if (v9 != v10)
  {
    do
    {
      quasar::PTree::PTree(__p, v9 + 32);
      quasar::PTree::addChild((quasar::PTree *)v18, (const quasar::PTree *)__p);
      quasar::PTree::~PTree((quasar::PTree *)__p);
      v11 = (char *)*((_QWORD *)v9 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v9 + 2);
          v5 = *(_QWORD *)v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v5);
      }
      v9 = v12;
    }
    while (v12 != v10);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "content-list");
  quasar::PTree::putChild((uint64_t)v22, (uint64_t)__p, (uint64_t)v18, 1);
  if (v14 < 0)
    operator delete(__p[0]);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  quasar::PTree::writeJson((quasar::PTreeHelper *)v22, __p, 1);
  std::stringbuf::str();
  v17[0] = MEMORY[0x1E0DE4FE0] + 64;
  __p[0] = (void *)(MEMORY[0x1E0DE4FE0] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v16 < 0)
    operator delete(v15);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v17);
  quasar::PTree::~PTree((quasar::PTree *)v18);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  quasar::PTree::~PTree((quasar::PTree *)v22);
}

void sub_1ADE71FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  quasar::PTree::~PTree((quasar::PTree *)(v15 - 240));
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 176));
  quasar::PTree::~PTree((quasar::PTree *)(v15 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::sync(uint64_t this)
{
  if (*(char *)(this + 231) < 0)
  {
    if (!*(_QWORD *)(this + 216))
      return this;
  }
  else if (!*(_BYTE *)(this + 231))
  {
    return this;
  }
  if (!*(_BYTE *)(this + 200))
    return quasar::artifact::Artifact::read(this, this + 208, 0);
  return this;
}

uint64_t quasar::artifact::ArchiveWriter::write(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v18;
  size_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  archive_entry_new();
  archive_entry_set_pathname();
  archive_entry_set_size();
  archive_entry_set_filetype();
  archive_entry_set_perm();
  v8 = archive_write_header();
  archive_entry_free();
  if (v8 != -20 && v8 != 0)
  {
    if (v8 == -10 && a4 >= 1)
      quasar::artifact::ArchiveWriter::write(a1, a2, a3, (a4 - 1));
    if (quasar::gLogLevel < 1)
      return 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Failed to write header for ", 27);
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    goto LABEL_25;
  }
  if ((archive_write_data() & 0x8000000000000000) == 0)
    return 1;
  if (quasar::gLogLevel >= 1)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unable to write ", 16);
    v15 = *(char *)(a2 + 23);
    if (v15 >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    if (v15 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
LABEL_25:
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" to archive: ", 13);
    v18 = (const char *)archive_error_string();
    v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v20);
  }
  return 0;
}

void sub_1ADE7233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::ArchiveReader::readNextEntry(quasar::artifact::ArchiveReader *this, int a2)
{
  int next_header;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _OWORD v10[17];
  uint64_t v11;

  v11 = 0;
  next_header = archive_read_next_header();
  if (next_header < 0)
  {
    if (next_header != -20)
    {
      if (next_header == -10 && a2 >= 1)
        return quasar::artifact::ArchiveReader::readNextEntry(this, a2 - 1);
      goto LABEL_11;
    }
    return v11;
  }
  if (next_header != 1)
  {
    if (next_header)
    {
LABEL_11:
      if (quasar::gLogLevel >= 1)
      {
        memset(v10, 0, sizeof(v10));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error while trying to read next entry from open archive: ", 57);
        v8 = (const char *)archive_error_string();
        v9 = strlen(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v10);
      }
      return 0;
    }
    return v11;
  }
  return 0;
}

void sub_1ADE72468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::ArchiveWriter::write(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  size_t v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v36;
  size_t v37;
  _OWORD v38[17];
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _OWORD v41[256];
  uint64_t v42;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  v42 = *MEMORY[0x1E0C80C00];
  archive_entry_new();
  archive_entry_set_pathname();
  archive_entry_set_filetype();
  archive_entry_set_perm();
  archive_entry_set_size();
  v12 = archive_write_header();
  archive_entry_free();
  if (v12 == -20 || v12 == 0)
  {
    while (1)
    {
      v14 = *(_DWORD *)(*v6 + *(_QWORD *)(*(_QWORD *)*v6 - 24) + 32);
      if ((v14 & 2) != 0)
        break;
      std::istream::read();
      if (archive_write_data() < 0)
      {
        if (quasar::gLogLevel >= 1)
        {
          memset(v38, 0, sizeof(v38));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Failed to write ", 16);
          v16 = *(char *)(v10 + 23);
          if (v16 >= 0)
            v17 = v10;
          else
            v17 = *(_QWORD *)v10;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(v10 + 23);
          else
            v18 = *(_QWORD *)(v10 + 8);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" to archive: ", 13);
          v21 = (const char *)archive_error_string();
          v22 = strlen(v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v38);
        }
        return (v14 >> 1) & 1;
      }
    }
    return (v14 >> 1) & 1;
  }
  else
  {
    if (v12 == -10 && v4 >= 1)
    {
      v24 = (std::__shared_weak_count *)v6[1];
      v39 = (_QWORD *)*v6;
      v40 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      quasar::artifact::ArchiveWriter::write(v11, v10, v8, &v39, (v4 - 1));
      v27 = v40;
      if (v40)
      {
        v28 = (unint64_t *)&v40->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    if (quasar::gLogLevel >= 1)
    {
      memset(v41, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Failed to write header for ", 27);
      v31 = *(char *)(v10 + 23);
      if (v31 >= 0)
        v32 = v10;
      else
        v32 = *(_QWORD *)v10;
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(v10 + 23);
      else
        v33 = *(_QWORD *)(v10 + 8);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" to archive: ", 13);
      v36 = (const char *)archive_error_string();
      v37 = strlen(v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v41);
    }
    return 0;
  }
}

void sub_1ADE72798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::assetJsonStringToMetadata(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  int v11;
  _DWORD *v12;
  BOOL v13;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  __int128 *String;
  uint64_t i;
  quasar::PTree *v23;
  const void **v24;
  uint64_t v25;
  _BYTE v27[64];
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  quasar::PTree::PTree((quasar::PTree *)v27);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v5, v6);
  quasar::PTree::readJson((uint64_t)v27, v28);
  v7 = quasar::PTree::begin((quasar::PTree *)v27);
  v8 = (uint64_t **)(a1 + 104);
  v9 = a1 + 112;
  v10 = (uint64_t **)(a1 + 176);
  while (v7 != quasar::PTree::end((quasar::PTree *)v27))
  {
    if (v9 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v8, (const void **)v7))goto LABEL_38;
    if (*(char *)(v7 + 23) < 0)
    {
      v15 = *(_QWORD *)(v7 + 8);
      if (v15 != 12)
      {
        if (v15 != 17
          || (**(_QWORD **)v7 == 0x6574726F70707573
            ? (v16 = *(_QWORD *)(*(_QWORD *)v7 + 8) == 0x656C61636F6C5F64)
            : (v16 = 0),
              v16 ? (v17 = *(_BYTE *)(*(_QWORD *)v7 + 16) == 115) : (v17 = 0),
              !v17))
        {
LABEL_37:
          String = (__int128 *)quasar::PTree::getString((quasar::PTree *)(v7 + 24));
          quasar::lm::InsertOrDie<std::map<std::string,std::string>>(v8, v7, String);
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      v12 = *(_DWORD **)v7;
    }
    else
    {
      v11 = *(unsigned __int8 *)(v7 + 23);
      v12 = (_DWORD *)v7;
      if (v11 != 12)
      {
        if (v11 != 17)
          goto LABEL_37;
        v13 = *(_QWORD *)v7 == 0x6574726F70707573 && *(_QWORD *)(v7 + 8) == 0x656C61636F6C5F64;
        if (!v13 || *(_BYTE *)(v7 + 16) != 115)
          goto LABEL_37;
LABEL_39:
        for (i = quasar::PTree::begin((quasar::PTree *)(v7 + 24));
              i != quasar::PTree::end((quasar::PTree *)(v7 + 24));
              i = (uint64_t)v23 + 64)
        {
          v23 = (quasar::PTree *)(i + 24);
          v24 = (const void **)quasar::PTree::getString(v23);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v10, v24, (uint64_t)v24);
        }
        goto LABEL_38;
      }
    }
    v18 = *(_QWORD *)v12;
    v19 = v12[2];
    if (v18 != 0x2D746E65746E6F63 || v19 != 1953720684)
      goto LABEL_37;
LABEL_38:
    v7 += 88;
  }
  quasar::PTree::~PTree((quasar::PTree *)v27);
  v28[0] = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v29[0] = v25;
  v29[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v31);
}

void sub_1ADE72A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::check(quasar::artifact::Artifact *this)
{
  const void **v2;
  const void ***v3;
  char *v4;
  const void **v5;
  const void ***v6;
  BOOL v7;
  std::string::size_type size;
  __int128 *v9;
  char *v10;
  char *v11;
  const void **v12;
  const void **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::string __p;
  void *v33;
  char v34;
  std::string v35;
  void *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v2 = (const void **)*((_QWORD *)this + 1);
  v3 = (const void ***)((char *)this + 16);
  if (v2 == (const void **)((char *)this + 16))
  {
LABEL_10:
    quasar::artifact::Artifact::getLocale(this, (std::string *)v36);
    std::string::basic_string[abi:ne180100]<0>(&__p, "-");
    quasar::Locale::toInternalLongIdentifier((uint64_t)v36, &v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38) < 0)
      operator delete(*((void **)&v37 + 1));
    if (SBYTE7(v37) < 0)
      operator delete(v36[0]);
    size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v35.__r_.__value_.__l.__size_;
    if (!size
      || (quasar::artifact::Artifact *)((char *)this + 184) == (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 176, (const void **)&v35.__r_.__value_.__l.__data_))
    {
      if (quasar::gLogLevel >= 1)
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        v38 = 0u;
        v39 = 0u;
        *(_OWORD *)v36 = 0u;
        v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Supported locale \"", 18);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v35;
        else
          v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          v19 = v35.__r_.__value_.__l.__size_;
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\" not present", 13);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
      }
    }
    else
    {
      v9 = (__int128 *)*((_QWORD *)this + 16);
      v10 = (char *)this + 136;
      if (v9 == (__int128 *)((char *)this + 136))
      {
LABEL_39:
        v16 = 1;
        goto LABEL_70;
      }
      while (1)
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(&__p, v9 + 2);
        if (!quasar::artifact::Artifact::checkSupportsContent((uint64_t)this, (uint64_t)&__p))
          break;
        if ((quasar::artifact::Artifact *)((char *)this + 88) != (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 80, (const void **)&__p.__r_.__value_.__l.__data_))
        {
          v11 = quasar::lm::FindOrDie<std::map<std::string,std::string>>((uint64_t)this + 80, (uint64_t)&__p);
          v13 = *(const void ***)v11;
          v12 = (const void **)*((_QWORD *)v11 + 1);
          while (v13 != v12)
          {
            if ((quasar::artifact::Artifact *)((char *)this + 112) == (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 104, v13)
              && v10 == (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 128, v13)&& (quasar::artifact::Artifact *)((char *)this + 160) == (quasar::artifact::Artifact *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 152, v13))
            {
              if (quasar::gLogLevel >= 1)
              {
                v51 = 0u;
                v52 = 0u;
                v49 = 0u;
                v50 = 0u;
                v47 = 0u;
                v48 = 0u;
                v45 = 0u;
                v46 = 0u;
                v43 = 0u;
                v44 = 0u;
                v41 = 0u;
                v42 = 0u;
                v40 = 0u;
                v38 = 0u;
                v39 = 0u;
                *(_OWORD *)v36 = 0u;
                v37 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
                v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Required dependent key \"", 24);
                v27 = *((char *)v13 + 23);
                if (v27 >= 0)
                  v28 = (uint64_t)v13;
                else
                  v28 = (uint64_t)*v13;
                if (v27 >= 0)
                  v29 = *((unsigned __int8 *)v13 + 23);
                else
                  v29 = (uint64_t)v13[1];
                v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\" missing from artifact", 23);
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
              }
              goto LABEL_65;
            }
            v13 += 3;
          }
        }
        if (v34 < 0)
          operator delete(v33);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v14 = (char *)*((_QWORD *)v9 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (char *)*((_QWORD *)v9 + 2);
            v7 = *(_QWORD *)v15 == (_QWORD)v9;
            v9 = (__int128 *)v15;
          }
          while (!v7);
        }
        v9 = (__int128 *)v15;
        if (v15 == v10)
          goto LABEL_39;
      }
LABEL_65:
      if (v34 < 0)
        operator delete(v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v16 = 0;
LABEL_70:
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    return v16;
  }
  v4 = (char *)this + 112;
  while (v4 != (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)this + 104, v2 + 4))
  {
    v5 = (const void **)v2[1];
    if (v5)
    {
      do
      {
        v6 = (const void ***)v5;
        v5 = (const void **)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (const void ***)v2[2];
        v7 = *v6 == v2;
        v2 = (const void **)v6;
      }
      while (!v7);
    }
    v2 = (const void **)v6;
    if (v6 == v3)
      goto LABEL_10;
  }
  if (quasar::gLogLevel >= 1)
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)v36 = 0u;
    v37 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Required key \"", 14);
    v22 = *((char *)v2 + 55);
    if (v22 >= 0)
      v23 = (uint64_t)(v2 + 4);
    else
      v23 = (uint64_t)v2[4];
    if (v22 >= 0)
      v24 = *((unsigned __int8 *)v2 + 55);
    else
      v24 = (uint64_t)v2[5];
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\" not found in artifact", 23);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v36);
  }
  return 0;
}

void sub_1ADE72EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a12);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::Artifact::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t result;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;
  char v27;
  char v28;

  if (a1[15] != a2[15])
    return 0;
  v4 = (unsigned __int8 *)a1[13];
  v5 = (unsigned __int8 *)(a1 + 14);
  if (v4 != (unsigned __int8 *)(a1 + 14))
  {
    v6 = (unsigned __int8 *)a2[13];
    while ((std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v26, v4 + 32, v6 + 32) & 1) != 0)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      v8 = v4;
      if (v7)
      {
        do
        {
          v4 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v4 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
          v9 = *(_QWORD *)v4 == (_QWORD)v8;
          v8 = v4;
        }
        while (!v9);
      }
      v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v9);
      }
      v6 = v11;
      if (v4 == v5)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (a1[24] != a2[24])
    return 0;
  v12 = (unsigned __int8 *)a1[22];
  if (v12 != (unsigned __int8 *)(a1 + 23))
  {
    v13 = (unsigned __int8 *)a2[22];
    while ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v27, v12 + 32, v13 + 32) & 1) != 0)
    {
      v14 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
      v15 = v12;
      if (v14)
      {
        do
        {
          v12 = v14;
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v12 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
          v9 = *(_QWORD *)v12 == (_QWORD)v15;
          v15 = v12;
        }
        while (!v9);
      }
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
          v9 = *(_QWORD *)v17 == (_QWORD)v13;
          v13 = v17;
        }
        while (!v9);
      }
      v13 = v17;
      if (v12 == (unsigned __int8 *)(a1 + 23))
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  if (a1[18] != a2[18])
    return 0;
  v18 = (unsigned __int8 *)a1[16];
  v19 = (unsigned __int8 *)(a1 + 17);
  if (v18 == v19)
    return 1;
  v20 = (unsigned __int8 *)a2[16];
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v28, v18 + 32, v20 + 32);
    if (!(_DWORD)result)
      break;
    v22 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
    v23 = v18;
    if (v22)
    {
      do
      {
        v18 = v22;
        v22 = *(unsigned __int8 **)v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v18 = (unsigned __int8 *)*((_QWORD *)v23 + 2);
        v9 = *(_QWORD *)v18 == (_QWORD)v23;
        v23 = v18;
      }
      while (!v9);
    }
    v24 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = *(unsigned __int8 **)v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v20 + 2);
        v9 = *(_QWORD *)v25 == (_QWORD)v20;
        v20 = v25;
      }
      while (!v9);
    }
    v20 = v25;
  }
  while (v18 != v19);
  return result;
}

_QWORD *quasar::artifact::ArchiveReader::ArchiveReader(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  BOOL v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _OWORD v15[17];
  stat v16;

  *a1 = &unk_1E5D3BB70;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  stat(v4, &v16);
  a1[2] = v16.st_mtimespec.tv_sec;
  a1[1] = archive_read_new();
  archive_read_set_format();
  if (archive_read_open_filename())
    v5 = quasar::gLogLevel < 1;
  else
    v5 = 1;
  if (!v5)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Error while trying to open archive at ", 38);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for reading: ", 14);
    v12 = (const char *)archive_error_string();
    v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v15);
  }
  return a1;
}

void sub_1ADE7330C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::artifact::ArchiveReader::~ArchiveReader(quasar::artifact::ArchiveReader *this)
{
  quasar::artifact::ArchiveReader::~ArchiveReader(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &unk_1E5D3BB70;
  archive_read_free();
}

uint64_t quasar::artifact::ArchiveReader::readData(quasar::artifact::ArchiveReader *this, void *a2, unint64_t a3, int a4)
{
  int v4;
  uint64_t data;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _OWORD v11[17];

  v4 = a4 + 1;
  while (1)
  {
    data = archive_read_data();
    v6 = data;
    if (data != -10)
      break;
    if (--v4 <= 0)
      goto LABEL_6;
  }
  if (data != -30)
    return v6;
LABEL_6:
  if (quasar::gLogLevel >= 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error while trying to read data from open archive: ", 51);
    v8 = (const char *)archive_error_string();
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
  }
  return v6;
}

void sub_1ADE73444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::artifact::ArchiveWriter::ArchiveWriter(_QWORD *a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  BOOL v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *a1 = &unk_1E5D3BB90;
  a1[1] = archive_write_new();
  if (archive_write_set_format_zip())
  {
    if (quasar::gLogLevel >= 1)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unable to configure archive as ZIP: ", 36);
      v3 = (const char *)archive_error_string();
      v4 = strlen(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
LABEL_12:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v13);
    }
  }
  else if (archive_write_set_options())
  {
    if (quasar::gLogLevel >= 1)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unable to configure archive options: ", 37);
      v6 = (const char *)archive_error_string();
      v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      goto LABEL_12;
    }
  }
  else
  {
    if (archive_write_open_filename())
      v8 = quasar::gLogLevel < 1;
    else
      v8 = 1;
    if (!v8)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Unable to open archive: ", 24);
      v10 = (const char *)archive_error_string();
      v11 = strlen(v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      goto LABEL_12;
    }
  }
  return a1;
}

void sub_1ADE736A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::artifact::ArchiveWriter::~ArchiveWriter(quasar::artifact::ArchiveWriter *this)
{
  quasar::artifact::ArchiveWriter::~ArchiveWriter(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &unk_1E5D3BB90;
  archive_write_free();
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string,0>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1ADE737B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v2 - 24)) = a2[3];
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return std::ostream::~ostream();
}

void `virtual thunk to'std::ostringstream::~ostringstream(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = MEMORY[0x1E0DE4FE0] + 24;
  *((_QWORD *)v1 + 14) = MEMORY[0x1E0DE4FE0] + 64;
  v3 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)v1 = v2;
  *((_QWORD *)v1 + 1) = v3 + 16;
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x1AF44D094);
}

{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = MEMORY[0x1E0DE4FE0] + 24;
  *((_QWORD *)v1 + 14) = MEMORY[0x1E0DE4FE0] + 64;
  v3 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)v1 = v2;
  *((_QWORD *)v1 + 1) = v3 + 16;
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v1 + 112);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::artifact::ArtifactOutputStream::ArtifactOutputStream(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4FF8] + 16;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1, (uint64_t *)&off_1E5D154C8);
  *(_QWORD *)a1 = &off_1E5D3BC08;
  *(_QWORD *)(a1 + 152) = off_1E5D3BC30;
  *(_BYTE *)(a1 + 112) = 0;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 120, a2);
  return a1;
}

void sub_1ADE73940(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostringstream::~ostringstream(v2, (uint64_t *)(v3 + 8));
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3ED20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3ED20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, __int128 *a2)
{
  return quasar::artifact::Artifact::setContent(*(uint64_t ***)(a1 + 8), *(const void ***)(a1 + 16), a2, *(unsigned __int8 *)(a1 + 24));
}

uint64_t std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0,std::allocator<quasar::artifact::Artifact::openContentForWriting(std::string const&,BOOL)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  v5 = a2[1];
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[2];
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = a2[3];
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1ADE73B0C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  _Unwind_Resume(a1);
}

void std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = MEMORY[0x1E0DE4FE0] + 24;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v2 = a1 + 112;
  v3 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3 + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v2);
  JUMPOUT(0x1AF44D190);
}

void quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream(void **this)
{
  uint64_t v1;

  MEMORY[0x1AF44D094](v1 + 152);
}

{
  uint64_t v1;

  MEMORY[0x1AF44D094](v1 + 152);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream(quasar::artifact::ArtifactOutputStream *this)
{
  JUMPOUT(0x1AF44D094);
}

{
  quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream((void **)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void quasar::artifact::ArtifactOutputStream::~ArtifactOutputStream(void **this, void **a2)
{
  _QWORD *v4;
  quasar::artifact::ArtifactOutputStream *v5;
  uint64_t v6;
  void *v7;

  v4 = *a2;
  *this = *a2;
  *(void **)((char *)this + *(v4 - 3)) = a2[5];
  if (!*((_BYTE *)this + 112))
    quasar::artifact::ArtifactOutputStream::close((quasar::artifact::ArtifactOutputStream *)this);
  v5 = (quasar::artifact::ArtifactOutputStream *)this[18];
  if (v5 == (quasar::artifact::ArtifactOutputStream *)(this + 15))
  {
    v6 = 4;
    v5 = (quasar::artifact::ArtifactOutputStream *)(this + 15);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_8:
  v7 = a2[1];
  *this = v7;
  *(void **)((char *)this + *((_QWORD *)v7 - 3)) = a2[4];
  this[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
}

void quasar::artifact::ArtifactOutputStream::close(quasar::artifact::ArtifactOutputStream *this)
{
  uint64_t v2;
  char v3;
  char v4;
  void *__p[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  std::stringbuf::str();
  v2 = *((_QWORD *)this + 18);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 48))(v2, __p);
  v4 = v3;
  if (SBYTE7(v6) < 0)
  {
    operator delete(__p[0]);
    if ((v4 & 1) != 0)
      goto LABEL_9;
  }
  else if ((v3 & 1) != 0)
  {
    goto LABEL_9;
  }
  if (quasar::gLogLevel >= 1)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Something went wrong while writing content.", 43);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) | 4);
LABEL_9:
  *((_BYTE *)this + 112) = 1;
}

void sub_1ADE73ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::artifact::ArchiveReader>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE73F4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::artifact::ArchiveReader>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45158;
  a1[1] = 0;
  quasar::artifact::ArchiveReader::ArchiveReader(a1 + 3, a2);
  return a1;
}

void sub_1ADE73F98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,std::shared_ptr<quasar::artifact::ArchiveReader> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1078uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArchiveReader> &,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE74048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArchiveReader> &,std::allocator<quasar::artifact::ArtifactInputStreamBuffer>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D451C8;
  a1[1] = 0;
  std::allocator<quasar::artifact::ArtifactInputStreamBuffer>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::shared_ptr<quasar::artifact::ArchiveReader> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADE740A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D451C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D451C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStreamBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double std::allocator<quasar::artifact::ArtifactInputStreamBuffer>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStreamBuffer,std::shared_ptr<quasar::artifact::ArchiveReader> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  double result;
  unint64_t v11;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = std::streambuf::basic_streambuf();
  *(_QWORD *)v7 = &unk_1E5D3BC50;
  *(_QWORD *)(v7 + 4160) = v4;
  *(_QWORD *)(v7 + 4168) = v3;
  if (v3)
  {
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    result = 0.0;
    *(_OWORD *)(v7 + 4176) = 0u;
    do
      v11 = __ldaxr(v8);
    while (__stlxr(v11 - 1, v8));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(v7 + 4176) = 0u;
  }
  return result;
}

void sub_1ADE741D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::artifact::ArtifactInputStreamBuffer::~ArtifactInputStreamBuffer(quasar::artifact::ArtifactInputStreamBuffer *this)
{
  *(_QWORD *)this = &unk_1E5D3BC50;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4160);
  std::streambuf::~streambuf();
}

{
  *(_QWORD *)this = &unk_1E5D3BC50;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4160);
  std::streambuf::~streambuf();
  JUMPOUT(0x1AF44D190);
}

double quasar::artifact::ArtifactInputStreamBuffer::seekoff@<D0>(quasar::artifact::ArtifactInputStreamBuffer *this@<X0>, std::ios_base::seekdir a2@<W2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double result;

  v5 = -1;
  if (a2 == cur)
  {
    v6 = a3;
    if ((a3 & 0x8000000000000000) == 0)
    {
      while (1)
      {
        v9 = *((_QWORD *)this + 2);
        v8 = *((_QWORD *)this + 3);
        if (v6 <= v8 - v9)
          break;
        v6 = v6 - v8 + v9;
        if ((*(unsigned int (**)(quasar::artifact::ArtifactInputStreamBuffer *))(*(_QWORD *)this + 72))(this) == -1)
        {
          v5 = *((_QWORD *)this + 523) + *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
          goto LABEL_7;
        }
      }
      v10 = v8 + v6;
      v11 = (char *)this + *((_QWORD *)this + 522) + 64;
      *((_QWORD *)this + 2) = (char *)this + 64;
      *((_QWORD *)this + 3) = v10;
      *((_QWORD *)this + 4) = v11;
      v5 = v10 - ((_QWORD)this + 64) + *((_QWORD *)this + 523);
    }
  }
LABEL_7:
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = v5;
  return result;
}

uint64_t quasar::artifact::ArtifactInputStreamBuffer::underflow(quasar::artifact::ArchiveReader **this)
{
  quasar::artifact::ArchiveReader *v2;
  uint64_t Data;

  v2 = (quasar::artifact::ArchiveReader *)(this + 8);
  Data = quasar::artifact::ArchiveReader::readData(this[520], this + 8, 0x1000uLL, 3);
  if (Data < 1)
    return 0xFFFFFFFFLL;
  this[523] = (quasar::artifact::ArchiveReader *)((char *)this[522] + (_QWORD)this[523]);
  this[522] = (quasar::artifact::ArchiveReader *)Data;
  this[2] = v2;
  this[3] = v2;
  this[4] = (quasar::artifact::ArchiveReader *)((char *)v2 + Data);
  return *((unsigned __int8 *)this + 64);
}

uint64_t quasar::artifact::ArtifactInputStream::ArtifactInputStream(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 32) = &unk_1E5D056A8;
  v4 = *(void **)a2;
  *(_QWORD *)a1 = &unk_1E5D05680;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 32), v4);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = -1;
  *(_QWORD *)a1 = &off_1E5D3BBB8;
  *(_QWORD *)(a1 + 32) = off_1E5D3BBE0;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return a1;
}

void quasar::artifact::ArtifactInputStream::~ArtifactInputStream(quasar::artifact::ArtifactInputStream *this)
{
  *(_QWORD *)this = &off_1E5D3BBB8;
  *((_QWORD *)this + 4) = off_1E5D3BBE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 32);
}

{
  *(_QWORD *)this = &off_1E5D3BBB8;
  *((_QWORD *)this + 4) = off_1E5D3BBE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 32);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::artifact::ArtifactInputStream::~ArtifactInputStream(quasar::artifact::ArtifactInputStream *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E5D3BBB8;
  v1[4] = off_1E5D3BBE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2));
  std::istream::~istream();
  JUMPOUT(0x1AF44D094);
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E5D3BBB8;
  v1[4] = off_1E5D3BBE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2));
  std::istream::~istream();
  MEMORY[0x1AF44D094](v1 + 4);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::ArchiveReader,std::allocator<quasar::artifact::ArchiveReader>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::artifact::ArchiveReader>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE74628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::ArchiveReader>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::artifact::ArchiveReader>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45158;
  a1[1] = 0;
  quasar::artifact::ArchiveReader::ArchiveReader(a1 + 3, a2);
  return a1;
}

void sub_1ADE74674(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::allocator<quasar::artifact::ArtifactInputStream>,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD0uLL);
  result = std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,std::allocator<quasar::artifact::ArtifactInputStream>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE746CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &,std::allocator<quasar::artifact::ArtifactInputStream>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D45190;
  a1[1] = 0;
  std::allocator<quasar::artifact::ArtifactInputStream>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADE7472C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::ArtifactInputStream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::artifact::ArtifactInputStream>::construct[abi:ne180100]<quasar::artifact::ArtifactInputStream,std::shared_ptr<quasar::artifact::ArtifactInputStreamBuffer> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  quasar::artifact::ArtifactInputStream::ArtifactInputStream(a2, (uint64_t)&v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADE7481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  uint64_t result;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = a2[47];
  if ((v12 & 0x80u) == 0)
    v13 = a2[47];
  else
    v13 = *((_QWORD *)a2 + 4);
  v14 = a3[47];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a3 + 4);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a2 + 24);
  v19 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v18 = a3 + 24;
  v17 = v19;
  if (v15 >= 0)
    v20 = v18;
  else
    v20 = v17;
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v20, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v21 = v12 - 1;
  do
  {
    v23 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

uint64_t quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *i;
  uint64_t *j;
  uint64_t *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t *v12;
  int v13;
  size_t v14;
  _BYTE *v15;
  const void *v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  size_t v26;
  unsigned int v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t *size;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *k;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  std::runtime_error *exception;
  _QWORD *v47;
  _BYTE v48[8];
  _QWORD *v49;
  _BYTE v50[40];
  uint64_t v51[3];
  _BYTE v52[8];
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  void *__p[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *v76[2];
  int64_t v77;
  std::vector<unsigned int> v78;
  std::string v79;
  _BYTE v80[32];
  int v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  int v85;

  v83 = 0u;
  v84 = 0u;
  v85 = 1065353216;
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v80, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)v80 = *((_OWORD *)i + 1);
      *(_QWORD *)&v80[16] = i[4];
    }
    std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&v80[24], (uint64_t)(i + 5));
    for (j = v82; j; j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v60, (const std::string::value_type *)j[2], j[3]);
      }
      else
      {
        *(_OWORD *)v60 = *((_OWORD *)j + 1);
        *(_QWORD *)&v60[16] = j[4];
      }
      *(_DWORD *)&v60[24] = *((_DWORD *)j + 10);
      if (*((char *)j + 71) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)j[6], j[7]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)j + 3);
        *(_QWORD *)&v62 = j[8];
      }
      std::unordered_set<std::string>::unordered_set((uint64_t)&v62 + 8, (uint64_t)(j + 9));
      v8 = (uint64_t *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        do
        {
          if (*((char *)v8 + 39) < 0)
            std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v8[2], v8[3]);
          else
            v79 = *(std::string *)(v8 + 2);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v83, (unsigned __int8 *)&v79, (uint64_t)&v79);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v79.__r_.__value_.__l.__data_);
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v62 + 8);
      if (SBYTE7(v62) < 0)
        operator delete(__p[0]);
      if ((v60[23] & 0x80000000) != 0)
        operator delete(*(void **)v60);
    }
    std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)&v80[24]);
    if ((v80[23] & 0x80000000) != 0)
      operator delete(*(void **)v80);
  }
  v47 = a3;
  if ((v9 & 1) == 0
  {
    fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::FstRegisterer((uint64_t)&quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::CompactFst39);
  }
  if ((v10 & 1) == 0
  {
    fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::FstRegisterer((uint64_t)&quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::ConstFst40);
  }
  if ((v11 & 1) == 0
  {
    fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::FstRegisterer((uint64_t)&quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::VectorFst41);
  }
  memset(&v79, 0, sizeof(v79));
  memset(&v78, 0, sizeof(v78));
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize((uint64_t)&v79, *((unint64_t *)&v84 + 1));
  std::vector<int>::resize(&v78, *((std::vector<unsigned int>::size_type *)&v84 + 1));
  v12 = (uint64_t *)v84;
  if ((_QWORD)v84)
  {
    v13 = 0;
    do
    {
      if (*((char *)v12 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v80, (const std::string::value_type *)v12[2], v12[3]);
      }
      else
      {
        *(_OWORD *)v80 = *((_OWORD *)v12 + 1);
        *(_QWORD *)&v80[16] = v12[4];
      }
      if (*((char *)a2 + 23) >= 0)
        v14 = *((unsigned __int8 *)a2 + 23);
      else
        v14 = (size_t)a2[1];
      std::string::basic_string[abi:ne180100]((uint64_t)v60, v14 + 1);
      if (v60[23] >= 0)
        v15 = v60;
      else
        v15 = *(_BYTE **)v60;
      if (v14)
      {
        if (*((char *)a2 + 23) >= 0)
          v16 = a2;
        else
          v16 = *a2;
        memmove(v15, v16, v14);
      }
      *(_WORD *)&v15[v14] = 47;
      if (v80[23] >= 0)
        v17 = v80;
      else
        v17 = *(const std::string::value_type **)v80;
      if (v80[23] >= 0)
        v18 = v80[23];
      else
        v18 = *(_QWORD *)&v80[8];
      v19 = std::string::append((std::string *)v60, v17, v18);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v77 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)v76 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if ((v60[23] & 0x80000000) != 0)
        operator delete(*(void **)v60);
      v21 = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read((uint64_t)v76);
      v22 = v21;
      if (v21)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 64))(v21, 1, 1) & 1) != 0)
        {
          v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 160))(v22);
          v23 = v13;
          v78.__begin_[v13] = v27;
        }
        else
        {
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 128))(v22, v60);
          v23 = v13;
          v78.__begin_[v13] = *(_DWORD *)&v60[8];
        }
        v28 = *(_QWORD *)(v79.__r_.__value_.__r.__words[0] + 8 * v23);
        *(_QWORD *)(v79.__r_.__value_.__r.__words[0] + 8 * v23) = v22;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        ++v13;
      }
      else if (quasar::gLogLevel >= 1)
      {
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        *(_OWORD *)__p = 0u;
        memset(v60, 0, sizeof(v60));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v60);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Unable to read command FST ", 27);
        if (v77 >= 0)
          v25 = v76;
        else
          v25 = (void **)v76[0];
        v26 = strlen((const char *)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v60);
      }
      if (SHIBYTE(v77) < 0)
        operator delete(v76[0]);
      if ((v80[23] & 0x80000000) != 0)
        operator delete(*(void **)v80);
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  memset(v60, 0, sizeof(v60));
  LODWORD(__p[0]) = 1065353216;
  size = (uint64_t *)v79.__r_.__value_.__l.__size_;
  v29 = v79.__r_.__value_.__r.__words[0];
  if (v79.__r_.__value_.__l.__size_ == v79.__r_.__value_.__r.__words[0])
  {
    v33 = (uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3;
    v29 = v79.__r_.__value_.__l.__size_;
  }
  else
  {
    v31 = 0;
    do
    {
      v76[0] = 0;
      v76[0] = *(void **)(v29 + 8 * v31);
      if (!v76[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unable to read one or more command FSTs");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v32 = v78.__begin_[v31];
      *(_QWORD *)v80 = v76;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>((uint64_t)v60, v76, (uint64_t)&std::piecewise_construct, (_QWORD **)v80)+ 6) = v32;
      ++v31;
      size = (uint64_t *)v79.__r_.__value_.__l.__size_;
      v29 = v79.__r_.__value_.__r.__words[0];
      v33 = (uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3;
    }
    while (v33 > v31);
  }
  *(_QWORD *)v80 = v60;
  v34 = 126 - 2 * __clz(v33);
  if (size == (uint64_t *)v29)
    v35 = 0;
  else
    v35 = v34;
  std::__introsort<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,false>(v29, size, (uint64_t *)v80, v35, 1);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v58, *(_QWORD *)v79.__r_.__value_.__l.__data_);
  for (k = (uint64_t *)(v79.__r_.__value_.__r.__words[0] + 8); k != (uint64_t *)v79.__r_.__value_.__l.__size_; ++k)
  {
    v37 = *k;
    fst::Union<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v58, v37);
  }
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v58);
  v80[0] = 1;
  *(_QWORD *)&v80[8] = 0;
  fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFst(&v56, (uint64_t)&v58, (uint64_t)v76, (uint64_t)v80);
  v76[1] = 0;
  v77 = 0;
  v76[0] = &v76[1];
  memset(v80, 0, sizeof(v80));
  v81 = 1065353216;
  quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandLookupTables(a1, (uint64_t)&v56, (uint64_t)v76, v80);
  v38 = v57;
  ++*(_DWORD *)(v57 + 56);
  v54 = &unk_1E5D19058;
  v55 = v38;
  quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandCharacterSet((uint64_t)&v56, (uint64_t)v52);
  std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::multimap[abi:ne180100](v51, (uint64_t)v76);
  std::unordered_multimap<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>>>::unordered_multimap((uint64_t)v50, (uint64_t)v80);
  quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandCommonSymbolLabels((uint64_t)&v56, (uint64_t)v48);
  quasar::VoiceCommandActiveSetCompilation::VoiceCommandActiveSetCompilation(v47, (uint64_t)&v54, (uint64_t)v52, (uint64_t)v51, (uint64_t)v50, (uint64_t)v48);
  std::__tree<int>::destroy((uint64_t)v48, v49);
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table((uint64_t)v50);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy((uint64_t)v51, (_QWORD *)v51[1]);
  std::__tree<int>::destroy((uint64_t)v52, v53);
  v54 = &unk_1E5D25F80;
  v39 = v55;
  if (v55)
  {
    v40 = *(_DWORD *)(v55 + 56) - 1;
    *(_DWORD *)(v55 + 56) = v40;
    if (!v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table((uint64_t)v80);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy((uint64_t)v76, (_QWORD *)v76[1]);
  v56 = &unk_1E5D25F80;
  v41 = v57;
  if (v57)
  {
    v42 = *(_DWORD *)(v57 + 56) - 1;
    *(_DWORD *)(v57 + 56) = v42;
    if (!v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v58 = &unk_1E5D256C0;
  v43 = v59;
  if (v59)
  {
    v44 = *(_DWORD *)(v59 + 56) - 1;
    *(_DWORD *)(v59 + 56) = v44;
    if (!v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v60);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
  *(_QWORD *)v60 = &v79;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v83);
}

void sub_1ADE75128(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  char v13;
  void *v14[2];
  _BYTE v15[408];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_5:
      std::ifstream::basic_ifstream(v14);
      if ((v15[*((_QWORD *)v14[0] - 3) + 16] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
        v3 = (_QWORD *)fst::cerr(v2);
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Read: Can't open file: ", 28);
        v5 = *(char *)(a1 + 23);
        if (v5 >= 0)
          v6 = a1;
        else
          v6 = *(_QWORD *)a1;
        if (v5 >= 0)
          v7 = *(unsigned __int8 *)(a1 + 23);
        else
          v7 = *(_QWORD *)(a1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
        if (v12 < 0)
          operator delete(__p[0]);
        v8 = 0;
      }
      else
      {
        fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
        v8 = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read((uint64_t)v14, (uint64_t)__p);
        if (v12 < 0)
          operator delete(__p[0]);
      }
      v14[0] = *(void **)MEMORY[0x1E0DE4F40];
      *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1AF44CA70](v15);
      std::istream::~istream();
      MEMORY[0x1AF44D094](v16);
      return v8;
    }
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_5;
  }
  v9 = fst::cin((fst *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "standard input");
  fst::FstReadOptions::FstReadOptions(v14, __p, 0, 0, 0);
  v8 = fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read(v9, (uint64_t)v14);
  if ((v15[7] & 0x80000000) != 0)
    operator delete(v14[0]);
  if (v12 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_1ADE755C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a24);
  _Unwind_Resume(a1);
}

uint64_t quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandLookupTables(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *i;
  uint64_t *j;
  uint64_t v9;
  int v11;
  std::string v12;
  std::string v13;
  int v14;
  std::string __p;
  _BYTE v16[40];
  std::string v17;
  _BYTE v18[16];
  uint64_t *v19;
  _BYTE v20[32];
  int v21;
  _BYTE v22[32];
  int v23;

  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  memset(v20, 0, sizeof(v20));
  v21 = 1065353216;
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)i[2], i[3]);
    else
      v17 = *(std::string *)(i + 2);
    std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)v18, (uint64_t)(i + 5));
    for (j = v19; j; j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0)
        std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)j[2], j[3]);
      else
        v13 = *(std::string *)(j + 2);
      v14 = *((_DWORD *)j + 10);
      if (*((char *)j + 71) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)j[6], j[7]);
      else
        __p = *(std::string *)((_BYTE *)j + 2);
      std::unordered_set<std::string>::unordered_set((uint64_t)v16, (uint64_t)(j + 9));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v12 = __p;
      v11 = 0;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
      v11 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 96))(v9, &v12);
      if (v11 != -1)
        std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_multi<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>(a3, &v11, (__int128 *)&v13);
      std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>(a4, (__int128 *)&v13, (__int128 *)&v17);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v20, (unsigned __int8 *)&v13, (uint64_t)&v13);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v22, (unsigned __int8 *)&v17, (uint64_t)&v17);
    std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)v18);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v22);
}

void sub_1ADE75878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v41 - 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v41 - 128);
  _Unwind_Resume(a1);
}

uint64_t **quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandCharacterSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t **result;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120))(v3);
  result = (uint64_t **)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 128))(v3, 0);
  if (v4)
  {
    v6 = (int)result;
    v7 = 0;
    do
    {
      v8 = v6;
      result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a2, &v8, &v8);
      if (++v7 < v4)
      {
        result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 128))(v3, v7);
        v6 = (int)result;
      }
    }
    while (v4 != v7);
  }
  return result;
}

void sub_1ADE759D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandCommonSymbolLabels@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  _OWORD *v5;
  const void *v6;
  _OWORD *v7;
  size_t v8;
  size_t v9;
  int v10;
  _OWORD *result;
  _OWORD *__dst[2];
  unint64_t v13;
  size_t __len[3];

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  for (i = 0; i != 12; ++i)
  {
    *(_OWORD *)__len = xmmword_1E5D48BC0[i];
    v5 = (_OWORD *)__len[1];
    if (__len[1] >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (const void *)__len[0];
    if (__len[1] >= 0x17)
    {
      v8 = (__len[1] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[1] | 7) != 0x17)
        v8 = __len[1] | 7;
      v9 = v8 + 1;
      v7 = operator new(v8 + 1);
      __dst[1] = v5;
      v13 = v9 | 0x8000000000000000;
      __dst[0] = v7;
LABEL_9:
      memmove(v7, v6, (size_t)v5);
      goto LABEL_10;
    }
    HIBYTE(v13) = __len[1];
    v7 = __dst;
    if (__len[1])
      goto LABEL_9;
LABEL_10:
    *((_BYTE *)v5 + (_QWORD)v7) = 0;
    v10 = (*(uint64_t (**)(uint64_t, _OWORD **))(*(_QWORD *)v3 + 96))(v3, __dst);
    if (SHIBYTE(v13) < 0)
      operator delete(__dst[0]);
    __dst[0] = __len;
    result = std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t **)a2, (uint64_t)__len, (uint64_t)&std::piecewise_construct, __dst);
    *((_DWORD *)result + 12) = v10;
  }
  return result;
}

void sub_1ADE75B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<int>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

_QWORD *quasar::VoiceCommandActiveSetCompilation::VoiceCommandActiveSetCompilation(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;

  v10 = *(_QWORD *)(a2 + 8);
  ++*(_DWORD *)(v10 + 56);
  *a1 = &unk_1E5D19058;
  a1[1] = v10;
  std::set<int>::set[abi:ne180100](a1 + 2, a3);
  std::multimap<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::multimap[abi:ne180100](a1 + 5, a4);
  std::unordered_multimap<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>>>::unordered_multimap((uint64_t)(a1 + 8), a5);
  std::map<std::string_view,int>::map[abi:ne180100]((uint64_t)(a1 + 13), a6);
  return a1;
}

void sub_1ADE75C24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v6;
  int v7;

  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::~__hash_table(v4);
  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::destroy(v3, *(_QWORD **)(v1 + 48));
  std::__tree<int>::destroy(v2, *(_QWORD **)(v1 + 24));
  *(_QWORD *)v1 = &unk_1E5D25F80;
  v6 = *(_DWORD **)(v1 + 8);
  if (v6)
  {
    v7 = v6[14] - 1;
    v6[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::FstRegisterer(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v5;
  uint64_t v6;
  std::string v7;

  fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFst(&v5);
  if (*(char *)(v6 + 39) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
  else
    v7 = *(std::string *)(v6 + 16);
  fst::GenericRegisterer<fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GenericRegisterer(a1, (uint64_t)&v7, (uint64_t)fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Read, (uint64_t)fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Convert);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v5 = &unk_1E5D25F80;
  v2 = v6;
  if (v6)
  {
    v3 = *(_DWORD *)(v6 + 56) - 1;
    *(_DWORD *)(v6 + 56) = v3;
    if (!v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1ADE75D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  int v17;

  if (a10)
  {
    v17 = a10[14] - 1;
    a10[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::GenericRegisterer<fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GenericRegisterer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;

  *(_QWORD *)&v7 = a3;
  *((_QWORD *)&v7 + 1) = a4;
  if (fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_)
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Init();
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_ = 0;
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetEntry((uint64_t)fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_, a2, &v7);
  return a1;
}

_QWORD *fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(v2);
  *a1 = &unk_1E5D19058;
  a1[1] = v2;
  return a1;
}

void sub_1ADE75E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string __str;

  __str.__r_.__value_.__s.__data_[0] = 1;
  __str.__r_.__value_.__l.__size_ = 0;
  v2 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, (uint64_t)&__str);
  *(_QWORD *)v2 = &unk_1E5D1D0C8;
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "compact");
  std::string::append(&__str, "_");
  v3 = fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type();
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)v3;
  else
    v5 = *(const std::string::value_type **)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  std::string::append(&__str, v5, v6);
  v7 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type();
  v8 = *(char *)(v7 + 23);
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 != 7)
      goto LABEL_16;
LABEL_12:
    if (*(_DWORD *)v7 == 1886220131 && *(_DWORD *)(v7 + 3) == 1952670064)
      goto LABEL_23;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v7 + 8) == 7)
  {
    v7 = *(_QWORD *)v7;
    goto LABEL_12;
  }
LABEL_16:
  std::string::append(&__str, "_");
  v10 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type();
  v11 = *(char *)(v10 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v10;
  else
    v12 = *(const std::string::value_type **)v10;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v10 + 23);
  else
    v13 = *(_QWORD *)(v10 + 8);
  std::string::append(&__str, v12, v13);
LABEL_23:
  std::string::operator=((std::string *)(a1 + 16), &__str);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADE75FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "unweighted");
    fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(void)::type = (uint64_t)v2;
  }
  return fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type(void)::type;
}

void sub_1ADE76088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type()
{
  unsigned __int8 v0;
  _QWORD *v2;

  if ((v0 & 1) == 0
  {
    v2 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v2, "compact");
    fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type(void)::type;
}

void sub_1ADE76140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D19058;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::FstRegisterer<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>::Convert(uint64_t a1)
{
  _QWORD *v2;
  char v4[8];
  uint64_t v5;
  char v6;

  v2 = (_QWORD *)operator new();
  v4[0] = 1;
  v5 = 0;
  fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFst(v2, a1, (uint64_t)&v6, (uint64_t)v4);
  return v2;
}

void sub_1ADE76224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  void *__p[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = operator new();
  fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(v4);
  v11 = 0u;
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v8 = 0u;
  v13 = 0;
  v14 = 0;
  v12 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 1, (uint64_t)&v7) & 1) == 0)
    goto LABEL_5;
  if ((_DWORD)v11 == 1)
    DWORD1(v11) |= 4u;
  *(_QWORD *)(v4 + 136) = operator new();
  *(_BYTE *)(v4 + 144) = 1;
  v5 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Read<fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, (uint64_t)&v7);
  *(_QWORD *)(v4 + 152) = v5;
  if (!v5)
  {
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v8[0]);
  return v4;
}

void sub_1ADE76360(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Read<fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  fst::MappedFile *v9;
  fst *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  fst::MappedFile *v19;
  fst *v21;
  _QWORD *v22;
  int v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  fst *v27;
  _QWORD *v28;
  int v29;
  uint64_t *v30;
  void *__p[2];
  char v33;
  char v34;

  v6 = operator new();
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_DWORD *)(v6 + 64) = 1;
  *(_BYTE *)(v6 + 68) = 0;
  v8 = *(_QWORD *)(a3 + 72);
  v7 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(v6 + 56) = v8;
  if ((*(_BYTE *)(a3 + 60) & 4) != 0)
  {
    if (!fst::AlignInput())
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"DefaultCompactStore::Read: Alignment failed: ", 45);
      v26 = *(char *)(a2 + 23);
      if (v26 >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      if (v26 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      goto LABEL_41;
    }
    v7 = *(_QWORD *)(v6 + 32);
  }
  v9 = fst::MappedFile::Map((uint64_t)a1, a2, 4 * v7 + 4);
  *(_QWORD *)v6 = v9;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || v9 == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"DefaultCompactStore::Read: Read failed: ", 40);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v17 = *((_QWORD *)v9 + 1);
    *(_QWORD *)(v6 + 16) = v17;
    v18 = *(unsigned int *)(v17 + 4 * *(_QWORD *)(v6 + 32));
    *(_QWORD *)(v6 + 40) = v18;
    if ((*(_BYTE *)(a3 + 60) & 4) != 0)
    {
      if (!fst::AlignInput())
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"DefaultCompactStore::Read: Alignment failed: ", 45);
        v29 = *(char *)(a2 + 23);
        if (v29 >= 0)
          v15 = a2;
        else
          v15 = *(_QWORD *)a2;
        if (v29 >= 0)
          v16 = *(unsigned __int8 *)(a2 + 23);
        else
          v16 = *(_QWORD *)(a2 + 8);
        goto LABEL_41;
      }
      v18 = *(_QWORD *)(v6 + 40);
    }
    v19 = fst::MappedFile::Map((uint64_t)a1, a2, 12 * v18);
    *(_QWORD *)(v6 + 8) = v19;
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v19 != 0)
    {
      *(_QWORD *)(v6 + 24) = *((_QWORD *)v19 + 1);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"DefaultCompactStore::Read: Read failed: ", 40);
    v23 = *(char *)(a2 + 23);
    if (v23 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v23 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
  }
LABEL_41:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
  if (v33 < 0)
    operator delete(__p[0]);
  v30 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::~DefaultCompactStore((uint64_t *)v6);
  MEMORY[0x1AF44D190](v30, 0x1030C40DA98B24ALL);
  return 0;
}

void sub_1ADE7664C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetEntry(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t **v4;
  std::string __p;
  __int128 v6;

  v4 = (uint64_t **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v6 = *a3;
  std::__tree<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE7670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Init()
{
  uint64_t result;

  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_lock_ = operator new();
  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &unk_1E5D1A4D8;
  *(_QWORD *)(result + 8) = result + 16;
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_ = (_UNKNOWN *)result;
  return result;
}

uint64_t fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstRegister(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D1EC98;
  std::__tree<std::string>::destroy(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstRegister(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D1EC98;
  std::__tree<std::string>::destroy(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LoadEntryFromSharedObject(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t *v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  size_t v11;
  fst *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;
  void *v22[2];
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 24))(v22);
  if ((v23 & 0x80u) == 0)
    v4 = v22;
  else
    v4 = (void **)v22[0];
  if (dlopen((const char *)v4, 1))
  {
    v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
    if (v5)
    {
      v6 = *v5;
      goto LABEL_18;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"GenericRegister::GetEntry : ", 28);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"lookup failed in shared object: ", 32);
    if ((v23 & 0x80u) == 0)
      v16 = v22;
    else
      v16 = (void **)v22[0];
    if ((v23 & 0x80u) == 0)
      v17 = v23;
    else
      v17 = (uint64_t)v22[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v7 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v8 = (_QWORD *)fst::cerr(v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"GenericRegister::GetEntry : ", 28);
    v10 = dlerror();
    v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = 0;
LABEL_18:
  if ((char)v23 < 0)
    operator delete(v22[0]);
  return v6;
}

void sub_1ADE76984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ConvertKeyToSoFilename(uint64_t a1@<X1>, void **a2@<X8>)
{
  std::string::size_type size;
  std::string *p_p;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  fst::ConvertToLegalCSymbol((unint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)a2, size + 7);
  if (*((char *)a2 + 23) < 0)
    a2 = (void **)*a2;
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a2, p_p, size);
  }
  strcpy((char *)a2 + size, "-fst.so");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADE76ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookupEntry(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3)
    return 0;
  else
    return v3 + 56;
}

_OWORD *std::__tree<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::FstRegisterer(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v5;
  uint64_t v6;
  std::string v7;

  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(&v5);
  if (*(char *)(v6 + 39) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
  else
    v7 = *(std::string *)(v6 + 16);
  fst::GenericRegisterer<fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GenericRegisterer(a1, (uint64_t)&v7, (uint64_t)fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read, (uint64_t)fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Convert);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v5 = &unk_1E5D23A78;
  v2 = v6;
  if (v6)
  {
    v3 = *(_DWORD *)(v6 + 56) - 1;
    *(_DWORD *)(v6 + 56) = v3;
    if (!v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1ADE76C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  int v17;

  if (a10)
  {
    v17 = a10[14] - 1;
    a10[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(v2);
  *a1 = &unk_1E5D22AC8;
  a1[1] = v2;
  return a1;
}

void sub_1ADE76D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C402D64F9CALL);
  _Unwind_Resume(a1);
}

_QWORD *fst::FstRegisterer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Convert(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(v2, a1);
  return v2;
}

void sub_1ADE76D70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::FstRegisterer(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v5;
  uint64_t v6;
  std::string v7;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v5);
  if (*(char *)(v6 + 39) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
  else
    v7 = *(std::string *)(v6 + 16);
  fst::GenericRegisterer<fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GenericRegisterer(a1, (uint64_t)&v7, (uint64_t)fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read, (uint64_t)fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Convert);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v5 = &unk_1E5D256C0;
  v2 = v6;
  if (v6)
  {
    v3 = *(_DWORD *)(v6 + 56) - 1;
    *(_DWORD *)(v6 + 56) = v3;
    if (!v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1ADE76E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  int v17;

  if (a10)
  {
    v17 = a10[14] - 1;
    a10[14] = v17;
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::FstRegisterer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Convert(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v2, a1);
  return v2;
}

void sub_1ADE76EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Read(uint64_t a1, uint64_t a2)
{
  int *v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  uint64_t (**v8)(uint64_t, std::string *);
  uint64_t (*v9)(uint64_t, std::string *);
  uint64_t v10;
  fst *v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type size;
  void *__p[2];
  char v28;
  char v29;
  int v30;
  void *v31[2];
  void *v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  std::string v37;
  __int128 v38;
  __int128 v39;
  int v40;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v37 = *(std::string *)a2;
  v38 = *(_OWORD *)(a2 + 24);
  v39 = *(_OWORD *)(a2 + 40);
  v40 = *(_DWORD *)(a2 + 56);
  v34 = 0u;
  v33 = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)v31 = 0u;
  v36 = 0;
  v35 = 0xFFFFFFFFFFFFFFFFLL;
  if ((_QWORD)v38)
  {
    v4 = *(int **)(a2 + 24);
    v30 = *v4;
    std::string::operator=((std::string *)v31, (const std::string *)(v4 + 2));
    std::string::operator=((std::string *)&v32[1], (const std::string *)(v4 + 8));
    v5 = *(_OWORD *)(v4 + 14);
    v6 = *(_OWORD *)(v4 + 18);
    v36 = *((_QWORD *)v4 + 11);
    v35 = v6;
    v34 = v5;
  }
  else
  {
    if (!fst::FstHeader::Read((uint64_t)&v30, a1, a2, 0))
      goto LABEL_34;
    *(_QWORD *)&v38 = &v30;
  }
  if (fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_)
    fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Init();
  fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_init_ = 0;
  v7 = fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_;
  v8 = (uint64_t (**)(uint64_t, std::string *))(*(uint64_t (**)(void *, void **))(*(_QWORD *)fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_ + 32))(fst::GenericRegister<std::string,fst::FstRegisterEntry<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::FstRegister<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::register_, v31);
  if (v8)
  {
    v9 = *v8;
    if (*v8)
    {
LABEL_12:
      v10 = v9(a1, &v37);
      goto LABEL_35;
    }
  }
  else
  {
    v9 = (uint64_t (*)(uint64_t, std::string *))(*(uint64_t (**)(void *, void **))(*(_QWORD *)v7 + 16))(v7, v31);
    if (v9)
      goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v11 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
  v12 = (_QWORD *)fst::cerr(v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Fst::Read: Unknown FST type \"", 29);
  if (SHIBYTE(v32[0]) >= 0)
    v14 = v31;
  else
    v14 = (void **)v31[0];
  if (SHIBYTE(v32[0]) >= 0)
    v15 = HIBYTE(v32[0]);
  else
    v15 = (uint64_t)v31[1];
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" (arc type = \"", 15);
  v18 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  v19 = *(char *)(v18 + 23);
  if (v19 >= 0)
    v20 = v18;
  else
    v20 = *(_QWORD *)v18;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(v18 + 23);
  else
    v21 = *(_QWORD *)(v18 + 8);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\"): ", 4);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v37;
  else
    v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    size = v37.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, size);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
  if (v28 < 0)
    operator delete(__p[0]);
LABEL_34:
  v10 = 0;
LABEL_35:
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  if (SHIBYTE(v32[0]) < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADE77194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  uint64_t v19;

  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  if (*(char *)(v19 - 73) < 0)
    operator delete(*(void **)(v19 - 96));
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t i;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  BOOL v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t *v163;
  int v164;
  uint64_t *v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t *v168;
  int64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  int64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;

  v173 = (uint64_t *)result;
LABEL_2:
  v166 = a2 - 2;
  v168 = a2 - 1;
  v165 = a2 - 3;
  v8 = v173;
  v171 = a2;
  while (2)
  {
    v173 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v75 = *a3;
        v177 = *(a2 - 1);
        v178 = &v177;
        v76 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v75, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
        v77 = *a3;
        v177 = *v8;
        v178 = &v177;
        result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v77, &v177, (uint64_t)&std::piecewise_construct, &v178);
        if (v76 < *(_DWORD *)(result + 24))
        {
          v78 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v78;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v8, v8 + 1, v168, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v8, v8 + 1, v8 + 2, v168, a3);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v168, a3);
      default:
        if (v9 <= 191)
        {
          v79 = v8 + 1;
          v81 = v8 == a2 || v79 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 0;
              v83 = v8;
              do
              {
                v84 = v83;
                v83 = v79;
                v85 = *a3;
                v177 = v84[1];
                v178 = &v177;
                v86 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v85, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v87 = *a3;
                v177 = *v84;
                v178 = &v177;
                result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v87, &v177, (uint64_t)&std::piecewise_construct, &v178);
                if (v86 < *(_DWORD *)(result + 24))
                {
                  v88 = 0;
                  v89 = *v83;
                  *v83 = 0;
                  for (i = v82; ; i -= 8)
                  {
                    v91 = (uint64_t *)((char *)v8 + i);
                    v92 = *(uint64_t *)((char *)v8 + i);
                    *v91 = 0;
                    v91[1] = v92;
                    if (v88)
                      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
                    if (!i)
                    {
                      v96 = v8;
                      goto LABEL_81;
                    }
                    v93 = *a3;
                    v177 = v89;
                    v178 = &v177;
                    v94 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v93, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                    v95 = *a3;
                    v177 = *(uint64_t *)((char *)v8 + i - 8);
                    v178 = &v177;
                    if (v94 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v95, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))break;
                    v88 = *v91;
                  }
                  v96 = (uint64_t *)((char *)v8 + i);
LABEL_81:
                  result = *v96;
                  *v96 = v89;
                  a2 = v171;
                  if (result)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                }
                v79 = v83 + 1;
                v82 += 8;
              }
              while (v83 + 1 != a2);
            }
          }
          else if (!v81)
          {
            do
            {
              v152 = v173;
              v153 = v79;
              v154 = *a3;
              v177 = v173[1];
              v178 = &v177;
              v155 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v154, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
              v156 = *a3;
              v177 = *v173;
              v178 = &v177;
              result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v156, &v177, (uint64_t)&std::piecewise_construct, &v178);
              if (v155 < *(_DWORD *)(result + 24))
              {
                result = 0;
                v157 = *v153;
                *v153 = 0;
                do
                {
                  v158 = *v152;
                  *v152 = 0;
                  v152[1] = v158;
                  if (result)
                    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                  v159 = *a3;
                  v177 = v157;
                  v178 = &v177;
                  v160 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v159, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                  v161 = *a3;
                  v177 = *(v152 - 1);
                  v178 = &v177;
                  v162 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v161, &v177, (uint64_t)&std::piecewise_construct, &v178);
                  v163 = v152 - 1;
                  v164 = *((_DWORD *)v162 + 6);
                  result = *v152--;
                }
                while (v160 < v164);
                v163[1] = v157;
                if (result)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              }
              v173 = v153;
              v79 = v153 + 1;
            }
            while (v153 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 == a2)
            return result;
          v167 = (char *)a2 - (char *)v8;
          v97 = (v10 - 2) >> 1;
          v175 = v97;
          v170 = a2 - v8;
          do
          {
            v98 = v97;
            if (v175 >= v97)
            {
              v169 = v97;
              v99 = (2 * v97) | 1;
              v100 = &v173[v99];
              v101 = 2 * v97 + 2;
              if (v101 < (uint64_t)v10)
              {
                v102 = *a3;
                v177 = *v100;
                v178 = &v177;
                v103 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v102, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v104 = *a3;
                v177 = v100[1];
                v178 = &v177;
                if (v103 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v104, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))
                {
                  ++v100;
                  v99 = v101;
                }
              }
              v105 = *a3;
              v98 = v169;
              v106 = &v173[v169];
              v177 = *v100;
              v178 = &v177;
              v107 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v105, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
              v108 = *a3;
              v177 = *v106;
              v178 = &v177;
              if (v107 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v108, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))
              {
                v109 = *v106;
                *v106 = 0;
                do
                {
                  v110 = v100;
                  v111 = *v100;
                  *v100 = 0;
                  v112 = *v106;
                  *v106 = v111;
                  if (v112)
                    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
                  if (v175 < v99)
                    break;
                  v113 = (2 * v99) | 1;
                  v100 = &v173[v113];
                  v99 = 2 * v99 + 2;
                  if (v99 >= (uint64_t)v10)
                  {
                    v99 = v113;
                  }
                  else
                  {
                    v114 = *a3;
                    v177 = *v100;
                    v178 = &v177;
                    v115 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v114, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                    v116 = *a3;
                    v177 = v100[1];
                    v178 = &v177;
                    if (v115 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v116, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))v99 = v113;
                    else
                      ++v100;
                  }
                  v117 = *a3;
                  v177 = *v100;
                  v178 = &v177;
                  v118 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v117, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                  v119 = *a3;
                  v177 = v109;
                  v178 = &v177;
                  v106 = v110;
                  v10 = v170;
                }
                while (v118 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v119, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
                v120 = *v110;
                *v110 = v109;
                a2 = v171;
                v98 = v169;
                if (v120)
                  (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
              }
            }
            v97 = v98 - 1;
          }
          while (v98);
          v121 = v167 >> 3;
          while (2)
          {
            v172 = a2;
            v122 = 0;
            v123 = v173;
            v124 = *v173;
            *v173 = 0;
            v125 = (unint64_t)(v121 - 2) >> 1;
            v176 = v121;
            do
            {
              v126 = &v123[v122 + 1];
              v127 = 2 * v122;
              v122 = (2 * v122) | 1;
              v128 = v127 + 2;
              if (v127 + 2 < v121)
              {
                v129 = *a3;
                v177 = *v126;
                v178 = &v177;
                v130 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v129, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v131 = *a3;
                v177 = v126[1];
                v178 = &v177;
                if (v130 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v131, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))
                {
                  ++v126;
                  v122 = v128;
                }
                v121 = v176;
              }
              v132 = *v126;
              *v126 = 0;
              v133 = *v123;
              *v123 = v132;
              if (v133)
                (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
              v123 = v126;
            }
            while (v122 <= v125);
            v134 = v172 - 1;
            if (v126 == v172 - 1)
            {
              v137 = v172 - 1;
              result = *v126;
              *v126 = v124;
              if (!result)
                goto LABEL_130;
            }
            else
            {
              v135 = *v134;
              *v134 = 0;
              v136 = *v126;
              *v126 = v135;
              if (v136)
                (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
              result = *v134;
              v137 = v172 - 1;
              *v134 = v124;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              v138 = (char *)(v126 + 1) - (char *)v173;
              if (v138 < 9)
                goto LABEL_130;
              v139 = (((unint64_t)v138 >> 3) - 2) >> 1;
              v140 = &v173[v139];
              v141 = *a3;
              v177 = *v140;
              v178 = &v177;
              v142 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v141, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
              v143 = *a3;
              v177 = *v126;
              v178 = &v177;
              v121 = v176;
              result = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v143, &v177, (uint64_t)&std::piecewise_construct, &v178);
              if (v142 >= *(_DWORD *)(result + 24))
                goto LABEL_130;
              v144 = *v126;
              *v126 = 0;
              do
              {
                v145 = v140;
                v146 = *v140;
                *v140 = 0;
                v147 = *v126;
                *v126 = v146;
                if (v147)
                  (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
                if (!v139)
                  break;
                v139 = (v139 - 1) >> 1;
                v140 = &v173[v139];
                v148 = *a3;
                v177 = *v140;
                v178 = &v177;
                v149 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v148, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v150 = *a3;
                v177 = v144;
                v178 = &v177;
                v126 = v145;
                v121 = v176;
              }
              while (v149 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v150, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
              result = *v145;
              *v145 = v144;
              if (!result)
              {
LABEL_130:
                v151 = v121-- <= 2;
                a2 = v137;
                if (v151)
                  return result;
                continue;
              }
            }
            break;
          }
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          goto LABEL_130;
        }
        v11 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(&v8[v10 >> 1], v8, v168, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v8, &v8[v10 >> 1], v168, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v8 + 1, v11 - 1, v166, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v8 + 2, &v8[(v10 >> 1) + 1], v165, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v11 - 1, v11, &v8[(v10 >> 1) + 1], a3);
          v12 = *v8;
          *v8 = *v11;
          *v11 = v12;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v13 = *a3;
          v177 = *(v8 - 1);
          v178 = &v177;
          v14 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v13, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
          v15 = *a3;
          v177 = *v8;
          v178 = &v177;
          if (v14 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v15, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))
          {
            v48 = *v8;
            *v8 = 0;
            v49 = *a3;
            v177 = v48;
            v178 = &v177;
            a2 = v171;
            v50 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v49, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
            v51 = *a3;
            v177 = *v168;
            v178 = &v177;
            if (v50 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v51, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6))
            {
              v55 = v8 + 1;
              do
              {
                v8 = v55;
                if (v55 >= v171)
                  break;
                v56 = *a3;
                v177 = v48;
                v178 = &v177;
                v57 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v56, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v58 = *a3;
                v177 = *v8;
                v178 = &v177;
                v59 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v58, &v177, (uint64_t)&std::piecewise_construct, &v178);
                v55 = v8 + 1;
              }
              while (v57 >= *((_DWORD *)v59 + 6));
            }
            else
            {
              do
              {
                v52 = *a3;
                v177 = v48;
                v178 = &v177;
                v53 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v52, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v54 = *a3;
                v177 = v8[1];
                v178 = &v177;
                ++v8;
              }
              while (v53 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v54, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
            }
            v60 = a4;
            v61 = v171;
            if (v8 < v171)
            {
              v61 = v171;
              do
              {
                v62 = *a3;
                v177 = v48;
                v178 = &v177;
                v63 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v62, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v64 = *a3;
                v177 = *(v61 - 1);
                v178 = &v177;
                --v61;
              }
              while (v63 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v64, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
            }
            while (v8 < v61)
            {
              v65 = *v8;
              *v8 = *v61;
              *v61 = v65;
              do
              {
                v66 = *a3;
                v177 = v48;
                v178 = &v177;
                v67 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v66, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v68 = *a3;
                v177 = v8[1];
                v178 = &v177;
                ++v8;
              }
              while (v67 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v68, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
              do
              {
                v69 = *a3;
                v177 = v48;
                v178 = &v177;
                v70 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v69, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
                v71 = *a3;
                v177 = *(v61 - 1);
                v178 = &v177;
                --v61;
              }
              while (v70 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v71, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
            }
            v72 = v8 - 1;
            if (v8 - 1 != v173)
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *v173;
              *v173 = v73;
              if (v74)
                (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
            }
            a5 = 0;
            result = *v72;
            *v72 = v48;
            a4 = v60;
            if (result)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              a5 = 0;
            }
            continue;
          }
        }
        v16 = 0;
        v17 = *v8;
        *v8 = 0;
        a2 = v171;
        do
        {
          v18 = *a3;
          v177 = v173[v16 + 1];
          v178 = &v177;
          v19 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v18, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
          v20 = *a3;
          v177 = v17;
          v178 = &v177;
          ++v16;
        }
        while (v19 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v20, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
        v21 = &v173[v16];
        v22 = v171;
        if (v16 == 1)
        {
          v22 = v171;
          do
          {
            if (v21 >= v22)
              break;
            v27 = *a3;
            v28 = *--v22;
            v177 = v28;
            v178 = &v177;
            v29 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v27, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
            v30 = *a3;
            v177 = v17;
            v178 = &v177;
          }
          while (v29 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v30, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
        }
        else
        {
          do
          {
            v23 = *a3;
            v24 = *--v22;
            v177 = v24;
            v178 = &v177;
            v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v23, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
            v26 = *a3;
            v177 = v17;
            v178 = &v177;
          }
          while (v25 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v26, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
        }
        if (v21 >= v22)
        {
          v43 = v21 - 1;
        }
        else
        {
          v31 = a4;
          v32 = v21;
          v33 = v22;
          do
          {
            v34 = *v32;
            *v32 = *v33;
            *v33 = v34;
            do
            {
              v35 = *a3;
              v36 = v32[1];
              ++v32;
              v177 = v36;
              v178 = &v177;
              v37 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v35, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
              v38 = *a3;
              v177 = v17;
              v178 = &v177;
            }
            while (v37 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v38, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
            do
            {
              v39 = *a3;
              v40 = *--v33;
              v177 = v40;
              v178 = &v177;
              v41 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v39, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6);
              v42 = *a3;
              v177 = v17;
              v178 = &v177;
            }
            while (v41 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v42, &v177, (uint64_t)&std::piecewise_construct, &v178)+ 6));
          }
          while (v32 < v33);
          v43 = v32 - 1;
          a2 = v171;
          a4 = v31;
        }
        if (v43 != v173)
        {
          v44 = *v43;
          *v43 = 0;
          v45 = *v173;
          *v173 = v44;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
        v46 = *v43;
        *v43 = v17;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        if (v21 < v22)
        {
LABEL_35:
          result = std::__introsort<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,false>(v173, v43, a3, a4, a5 & 1);
          a5 = 0;
          v8 = v43 + 1;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v173, v43, a3);
        v8 = v43 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(v43 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v47)
            continue;
          goto LABEL_35;
        }
        a2 = v43;
        if (!v47)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_1ADE781D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v29 = *a5;
  v30 = &v29;
  v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
  v14 = *a6;
  v29 = *a4;
  v30 = &v29;
  result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v14, &v29, (uint64_t)&std::piecewise_construct, &v30);
  if (v13 < *((_DWORD *)result + 6))
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a6;
    v29 = *a4;
    v30 = &v29;
    v18 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v17, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
    v19 = *a6;
    v29 = *a3;
    v30 = &v29;
    result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v19, &v29, (uint64_t)&std::piecewise_construct, &v30);
    if (v18 < *((_DWORD *)result + 6))
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a6;
      v29 = *a3;
      v30 = &v29;
      v22 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v21, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
      v23 = *a6;
      v29 = *a2;
      v30 = &v29;
      result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v23, &v29, (uint64_t)&std::piecewise_construct, &v30);
      if (v22 < *((_DWORD *)result + 6))
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a6;
        v29 = *a2;
        v30 = &v29;
        v26 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v25, &v29, (uint64_t)&std::piecewise_construct, &v30)+ 6);
        v27 = *a6;
        v29 = *a1;
        v30 = &v29;
        result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v27, &v29, (uint64_t)&std::piecewise_construct, &v30);
        if (v26 < *((_DWORD *)result + 6))
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

_QWORD *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v8 = *a4;
  v27 = *a2;
  v28 = &v27;
  v9 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v8, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
  v10 = *a4;
  v27 = *a1;
  v28 = &v27;
  v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v10, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
  v12 = *a4;
  if (v9 >= v11)
  {
    v27 = *a3;
    v28 = &v27;
    v17 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
    v18 = *a4;
    v27 = *a2;
    v28 = &v27;
    result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v18, &v27, (uint64_t)&std::piecewise_construct, &v28);
    if (v17 < *((_DWORD *)result + 6))
    {
      v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      v20 = *a4;
      v27 = *a2;
      v28 = &v27;
      v21 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v20, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
      v22 = *a4;
      v27 = *a1;
      v28 = &v27;
      result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v22, &v27, (uint64_t)&std::piecewise_construct, &v28);
      if (v21 < *((_DWORD *)result + 6))
      {
        v23 = *a1;
        *a1 = *a2;
        *a2 = v23;
      }
    }
  }
  else
  {
    v27 = *a3;
    v28 = &v27;
    v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
    v14 = *a4;
    v27 = *a2;
    v28 = &v27;
    result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v14, &v27, (uint64_t)&std::piecewise_construct, &v28);
    v16 = *a1;
    if (v13 >= *((_DWORD *)result + 6))
    {
      *a1 = *a2;
      *a2 = v16;
      v24 = *a4;
      v27 = *a3;
      v28 = &v27;
      v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v24, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 6);
      v26 = *a4;
      v27 = *a2;
      v28 = &v27;
      result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v26, &v27, (uint64_t)&std::piecewise_construct, &v28);
      if (v25 >= *((_DWORD *)result + 6))
        return result;
      v16 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v16;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v31 = *(a2 - 1);
      v32 = &v31;
      v9 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v8, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6);
      v10 = *a3;
      v31 = *a1;
      v32 = &v31;
      if (v9 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v10, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6))
      {
        v11 = *a1;
        *a1 = *(v4 - 1);
        *(v4 - 1) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a1 + 1, a1 + 2, a3);
      v13 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v14 = 0;
      v15 = 16;
      v29 = v4;
      break;
  }
  while (1)
  {
    v16 = *a3;
    v31 = *v13;
    v32 = &v31;
    v17 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v16, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6);
    v18 = *a3;
    v31 = *v12;
    v32 = &v31;
    if (v17 < *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v18, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6))
    {
      v30 = v14;
      v19 = 0;
      v20 = *v13;
      *v13 = 0;
      for (i = v15; ; i -= 8)
      {
        v22 = (uint64_t *)((char *)a1 + i);
        v23 = *(uint64_t *)((char *)a1 + i);
        *v22 = 0;
        v22[1] = v23;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (!i)
        {
          v27 = a1;
          goto LABEL_15;
        }
        v24 = *a3;
        v31 = v20;
        v32 = &v31;
        v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v24, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6);
        v26 = *a3;
        v31 = *(uint64_t *)((char *)a1 + i - 8);
        v32 = &v31;
        if (v25 >= *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v26, &v31, (uint64_t)&std::piecewise_construct, &v32)+ 6))break;
        v19 = *v22;
      }
      v27 = (uint64_t *)((char *)a1 + i);
LABEL_15:
      v28 = *v27;
      *v27 = v20;
      v4 = v29;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v14 = v30 + 1;
      if (v30 == 7)
        return v13 + 1 == v29;
    }
    v12 = v13;
    v15 += 8;
    if (++v13 == v4)
      return 1;
  }
}

void sub_1ADE7899C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation(std::unordered_set<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>> const&,std::string)::$_0 &,std::unique_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *>(a1, a2, a3, a5);
  v10 = *a5;
  v23 = *a4;
  v24 = &v23;
  v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v10, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 6);
  v12 = *a5;
  v23 = *a3;
  v24 = &v23;
  result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v12, &v23, (uint64_t)&std::piecewise_construct, &v24);
  if (v11 < *((_DWORD *)result + 6))
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a5;
    v23 = *a3;
    v24 = &v23;
    v16 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v15, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 6);
    v17 = *a5;
    v23 = *a2;
    v24 = &v23;
    result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v17, &v23, (uint64_t)&std::piecewise_construct, &v24);
    if (v16 < *((_DWORD *)result + 6))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a5;
      v23 = *a2;
      v24 = &v23;
      v20 = *((_DWORD *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v19, &v23, (uint64_t)&std::piecewise_construct, &v24)+ 6);
      v21 = *a5;
      v23 = *a1;
      v24 = &v23;
      result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::__emplace_unique_key_args<kaldi::LatticeFasterOnlineDecoder::Token *,std::piecewise_construct_t const&,std::tuple<kaldi::LatticeFasterOnlineDecoder::Token * const&>,std::tuple<>>(v21, &v23, (uint64_t)&std::piecewise_construct, &v24);
      if (v20 < *((_DWORD *)result + 6))
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

_QWORD *fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFst(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = operator new();
  fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(v8, a2, a3, a4);
  *a1 = &unk_1E5D19058;
  a1[1] = v8;
  return a1;
}

void sub_1ADE78BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40676EB28ALL);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::CompactFstImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1D0C8;
  *(_QWORD *)(a1 + 136) = operator new();
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Init(a1, a2);
  return a1;
}

void sub_1ADE78C78(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CompactFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  void *__p[2];
  char v27;
  char v28;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "compact");
  std::string::append(&__str, "_");
  v4 = fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Type();
  v5 = *(char *)(v4 + 23);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)v4;
  else
    v6 = *(const std::string::value_type **)v4;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  std::string::append(&__str, v6, v7);
  v8 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type();
  v9 = *(char *)(v8 + 23);
  if (v9 < 0)
  {
    if (*(_QWORD *)(v8 + 8) != 7)
    {
LABEL_16:
      std::string::append(&__str, "_");
      v11 = fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::Type();
      v12 = *(char *)(v11 + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)v11;
      else
        v13 = *(const std::string::value_type **)v11;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v11 + 23);
      else
        v14 = *(_QWORD *)(v11 + 8);
      std::string::append(&__str, v13, v14);
      goto LABEL_23;
    }
    v8 = *(_QWORD *)v8;
  }
  else if (v9 != 7)
  {
    goto LABEL_16;
  }
  if (*(_DWORD *)v8 != 1886220131 || *(_DWORD *)(v8 + 3) != 1952670064)
    goto LABEL_16;
LABEL_23:
  std::string::operator=((std::string *)(a1 + 16), &__str);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16 != v15)
  {
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v15)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    else
      v17 = 0;
    *(_QWORD *)(a1 + 40) = v17;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v19 = *(_QWORD *)(a1 + 48);
  if (v19 != v18)
  {
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v18)
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    else
      v20 = 0;
    *(_QWORD *)(a1 + 48) = v20;
  }
  v21 = operator new();
  fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::DefaultCompactStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v21, a2);
  *(_QWORD *)(a1 + 152) = v21;
  if (*(_BYTE *)(v21 + 68))
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1);
  if ((v22 & 4) != 0
    || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x200000000, 1) != 0x200000000)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"CompactFstImpl: input fst incompatible with compactor", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (v27 < 0)
      operator delete(__p[0]);
    v23 = *(_QWORD *)(a1 + 8) | 4;
  }
  else
  {
    v23 = v22 | *(_QWORD *)(a1 + 8) & 4 | 1;
  }
  *(_QWORD *)(a1 + 8) = v23;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADE78F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

uint64_t fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>::DefaultCompactStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  char *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  void *__p[2];
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 56) = (*(int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v33 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v31);
  v4 = 0;
  while (1)
  {
    if (!v31)
    {
      if ((int)v33 >= v32)
        goto LABEL_28;
      ++*(_QWORD *)(a1 + 32);
LABEL_8:
      v7 = v33;
      goto LABEL_9;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    v6 = v31;
    if (v5)
      break;
    ++*(_QWORD *)(a1 + 32);
    if (!v6)
      goto LABEL_8;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
LABEL_9:
    v30 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v7, __p);
    while (1)
    {
      while (!__p[0])
      {
        if (v30 >= v28)
          goto LABEL_19;
        ++*(_QWORD *)(a1 + 48);
LABEL_16:
        ++v30;
      }
      v8 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]);
      v9 = __p[0];
      if (v8)
        break;
      ++*(_QWORD *)(a1 + 48);
      if (!v9)
        goto LABEL_16;
      (*(void (**)(void *))(*(_QWORD *)v9 + 40))(v9);
    }
    if (__p[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
      goto LABEL_21;
    }
LABEL_19:
    if (v29)
      --*v29;
LABEL_21:
    LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v7);
    v34 = 2139095040;
    if (*(float *)__p != INFINITY)
      ++v4;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
    else
      ++v33;
  }
  if (v31)
    (*(void (**)(void))(*(_QWORD *)v31 + 8))();
LABEL_28:
  *(_QWORD *)(a1 + 16) = operator new[]();
  v10 = *(_QWORD *)(a1 + 48) + v4;
  *(_QWORD *)(a1 + 40) = v10;
  is_mul_ok(v10, 0xCuLL);
  v11 = (void *)operator new[]();
  v12 = v11;
  if (v10)
    bzero(v11, 12 * ((12 * v10 - 12) / 0xC) + 12);
  *(_QWORD *)(a1 + 24) = v12;
  v14 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v14) = v13;
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v15) = v16;
      LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v15);
      LODWORD(v31) = 2139095040;
      if (*(float *)__p != INFINITY)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v15);
        v17 = *(_QWORD *)(a1 + 24) + 12 * v16++;
        *(_QWORD *)v17 = -1;
        *(_DWORD *)(v17 + 8) = -1;
      }
      v30 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v15, __p);
      for (i = 12 * v16; ; i += 12)
      {
        if (!__p[0])
        {
          if (v30 >= v28)
            goto LABEL_47;
          goto LABEL_40;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]))
          break;
        if (__p[0])
        {
          v19 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
          v20 = __p[0];
          goto LABEL_41;
        }
LABEL_40:
        v20 = 0;
        v19 = (char *)__p[1] + 16 * v30;
LABEL_41:
        v21 = *(_QWORD *)v19;
        v22 = *((_DWORD *)v19 + 3);
        v23 = *(_QWORD *)(a1 + 24) + i;
        *(_QWORD *)v23 = v21;
        *(_DWORD *)(v23 + 8) = v22;
        if (v20)
          (*(void (**)(void *))(*(_QWORD *)v20 + 40))(v20);
        else
          ++v30;
        ++v16;
      }
      if (__p[0])
      {
        (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
        goto LABEL_49;
      }
LABEL_47:
      if (v29)
        --*v29;
LABEL_49:
      if (*(_QWORD *)(a1 + 32) <= (unint64_t)++v15)
      {
        v13 = *(_QWORD *)(a1 + 40);
        goto LABEL_52;
      }
    }
  }
  v16 = 0;
LABEL_52:
  if (v16 != v13)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"DefaultCompactStore: compactor incompatible with fst", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 68) = 1;
  }
  return a1;
}

void sub_1ADE794B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__emplace_multi<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v9[3];

  std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>(a1, a2, a3, (uint64_t)v9);
  v4 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v5;
        if (*((_DWORD *)v9[0] + 8) >= *((_DWORD *)v5 + 8))
          break;
        v5 = (uint64_t *)*v5;
        v6 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      v5 = (uint64_t *)v5[1];
    }
    while (v5);
    v6 = v4 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v7;
}

uint64_t std::__tree<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::__map_value_compare<int,std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>>>::__construct_node<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t result;

  v7 = a1 + 8;
  v8 = operator new(0x88uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100]<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&,0>((uint64_t)v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADE79660(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,quasar::VoiceCommandActiveSetCompilation::CommandSpec>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int const,quasar::VoiceCommandActiveSetCompilation::CommandSpec>::pair[abi:ne180100]<int &,quasar::VoiceCommandActiveSetCompilation::CommandSpec&,0>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  *(_DWORD *)a1 = *a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a3 + 6);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
  }
  else
  {
    v6 = a3[2];
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 6);
    *(_OWORD *)(a1 + 40) = v6;
  }
  std::unordered_set<std::string>::unordered_set(a1 + 64, (uint64_t)a3 + 56);
  return a1;
}

void sub_1ADE7971C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__emplace_multi<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  uint64_t inserted;
  uint64_t v6[3];

  std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>((uint64_t)a1, a2, a3, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__node_insert_multi(a1, v6[0]);
  v6[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_1ADE797A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::__unordered_map_hasher<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,true>,std::__unordered_map_equal<quasar::VoiceCommandActiveSetCompilation::CommandSpec,std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,true>,std::allocator<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>>>::__construct_node<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  unint64_t result;
  char v10;

  v7 = a1 + 16;
  v8 = (char *)operator new(0xB0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&,0>((std::string *)(v8 + 16), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v10, (uint64_t)(v8 + 16));
  *((_QWORD *)v8 + 1) = *((int *)v8 + 10) + 571 * result + 326041;
  return result;
}

void sub_1ADE79850(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::Suite>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<quasar::VoiceCommandActiveSetCompilation::CommandSpec const,quasar::VoiceCommandActiveSetCompilation::Suite>::pair[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::CommandSpec&,quasar::VoiceCommandActiveSetCompilation::Suite&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v7 = a2[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v7;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&this[5], (uint64_t)a3 + 24);
  return this;
}

void sub_1ADE7993C(_Unwind_Exception *a1)
{
  void **v1;

  quasar::VoiceCommandActiveSetCompilation::CommandSpec::~CommandSpec(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1ADE79E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  EARLogger *v44;
  NSObject *v45;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));

  sdapi::SdapiUtil::LocaleInfo::~LocaleInfo(&a29);
  std::__tree<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sdapi::SdapiUtil::LocaleInfo>>>::destroy(v41 - 120, *(_QWORD **)(v41 - 112));
  if (a2 == 1)
  {
    v44 = (EARLogger *)__cxa_begin_catch(a1);
    EARLogger::QuasarOSLogger(v44);
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      -[_EARFormatter initWithLanguage:withSdapiConfig:quasarConfig:].cold.1((uint64_t)v44);

    __cxa_end_catch();
    JUMPOUT(0x1ADE79E10);
  }

  _Unwind_Resume(a1);
}

void sub_1ADE7A388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  EARLogger *v58;
  NSObject *v59;

  if (a2 == 1)
  {
    v58 = (EARLogger *)__cxa_begin_catch(a1);
    EARLogger::QuasarOSLogger(v58);
    v59 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      -[_EARFormatter initWithQuasarConfig:overrideConfigFiles:supportEmojiRecognition:language:skipPathsExistCheck:].cold.1((uint64_t)v58);

    __cxa_end_catch();
    JUMPOUT(0x1ADE7A25CLL);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a52);
  _Block_object_dispose((const void *)(v56 - 152), 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1ADE7A64C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void *v15;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0)
    operator delete(__pa);

  _Unwind_Resume(__p);
}

void sub_1ADE7A6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1ADE7A828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1ADE7AA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  EARLogger *v41;
  NSObject *v42;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);

  if (a2 == 1)
  {
    v41 = (EARLogger *)__cxa_begin_catch(a1);
    EARLogger::QuasarOSLogger(v41);
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      -[_EARFormatter initNcsWithModelRoot:].cold.1((uint64_t)v41);

    __cxa_end_catch();
    JUMPOUT(0x1ADE7AA10);
  }

  _Unwind_Resume(a1);
}

void sub_1ADE7AC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1ADE7B350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39)
{
  uint64_t v39;

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1ADE7B5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1ADE7B7CC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__pa);

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void sub_1ADE7C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v63;
  void *v64;

  a63 = &a39;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);

  _Block_object_dispose(&a48, 8);
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void sub_1ADE7CA20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1ADE7CB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1ADE7CB50()
{
  JUMPOUT(0x1ADE7CB40);
}

void sub_1ADE7CB58()
{
  JUMPOUT(0x1ADE7CB44);
}

void sub_1ADE7CD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1ADE7D2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;

  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1ADE7D9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a68;
  uint64_t v68;

  __p = &a23;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a26;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  __p = &a65;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a68;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v68 - 256);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1ADE7DBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADE7DD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1ADE7E060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43)
{

  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void sub_1ADE7E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a18 = v20 - 56;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);

  _Unwind_Resume(a1);
}

void sub_1ADE7E56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, char a13, uint64_t a14, char ***__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char **a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  if (a20 < 0)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  __p = &a21;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a21 = &a24;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a24 = &a27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);

  _Unwind_Resume(a1);
}

void sub_1ADE7EA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;

  a17 = (void **)&a67;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a17);

  _Unwind_Resume(a1);
}

void sub_1ADE7EB90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADE7EFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t ****a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t ***a38,uint64_t a39,uint64_t a40,uint64_t **a41,uint64_t a42,uint64_t a43,uint64_t *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;

  if (a27 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  a30 = &a38;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a38 = &a41;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a41 = &a44;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a44 = &a47;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a47 = v53 - 232;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  *(_QWORD *)(v53 - 232) = v53 - 208;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 232));
  *(_QWORD *)(v53 - 208) = v53 - 184;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 208));
  *(_QWORD *)(v53 - 184) = v53 - 160;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 184));
  *(_QWORD *)(v53 - 160) = v53 - 136;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 160));
  *(_QWORD *)(v53 - 136) = v53 - 112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 136));

  _Unwind_Resume(a1);
}

void sub_1ADE7F42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a23 < 0)
    operator delete(__p);
  __p = (char *)(v28 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a25;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a28;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1ADE7F638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1ADE7FB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char **a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  uint64_t v31;

  __p = &a19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a19 = &a23;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a23 = (char *)(v31 - 128);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a27;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = &a30;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);

  _Unwind_Resume(a1);
}

void sub_1ADE7FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  if (a18 < 0)
    operator delete(__p);
  *(_QWORD *)(v24 - 56) = &a10;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 56));
  __p = &a19;
  std::vector<std::pair<int,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a19 = &a22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_1ADE800C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(char *a1@<X0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD **v3;
  _QWORD *v4[3];
  int v5;
  __int16 v6;
  char v7;
  int v8;

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  v4[2] = (_QWORD *)1;
  v5 = 1024;
  v6 = 0;
  v7 = 0;
  v8 = 5489;
  if ((a2 & 0xFF00) != 0)
    HIBYTE(v6) = a2;
  quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(a1, (uint64_t)&v3, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
}

void sub_1ADE801B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive *v6;
  quasar::tennessee::nashville *v7;
  _QWORD *result;
  uint64_t v9;
  quasar::tennessee::nashville *v10;
  uint64_t v11;
  std::string __p;

  v6 = (quasar::tennessee::archive::FileSystemDirectoryMutableArchive *)operator new();
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  quasar::tennessee::archive::FileSystemDirectoryMutableArchive::FileSystemDirectoryMutableArchive(v6, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v6;
  quasar::tennessee::nashville::CreateTextNormalizer(&v10, a2, &v11);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(quasar::tennessee::nashville *))(*(_QWORD *)v7 + 8))(v7);
  result = (_QWORD *)operator new();
  v9 = v11;
  *result = &off_1E5D3C768;
  result[1] = v9;
  *a3 = result;
  return result;
}

void sub_1ADE802A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::createTennesseeOptions(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  _BOOL4 hasParam;
  _BOOL4 v7;
  uint64_t Ptree;
  _BOOL4 v9;
  _BOOL4 v10;
  quasar::PTree *v11;
  void *__p[2];
  char v13;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 32) = 1024;
  *(_WORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 38) = 0;
  *(_DWORD *)(a3 + 40) = 5489;
  *(_DWORD *)(a3 + 40) = time(0);
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.tennessee.rng-seed");
  hasParam = quasar::SystemConfig::hasParam(a1, (uint64_t)__p);
  v7 = hasParam;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v7)
      goto LABEL_7;
  }
  else if (!hasParam)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.tennessee.rng-seed");
  Ptree = quasar::SystemConfig::getPtree(a1, (uint64_t)__p);
  *(_DWORD *)(a3 + 40) = quasar::PTree::getInt<int>(Ptree);
  if (v13 < 0)
    operator delete(__p[0]);
LABEL_7:
  if ((a2 & 0xFF00) != 0)
  {
    *(_BYTE *)(a3 + 37) = a2;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.tennessee.deterministic");
  v9 = quasar::SystemConfig::hasParam(a1, (uint64_t)__p);
  v10 = v9;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v10)
      return;
  }
  else if (!v9)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.tennessee.deterministic");
  v11 = (quasar::PTree *)quasar::SystemConfig::getPtree(a1, (uint64_t)__p);
  *(_BYTE *)(a3 + 37) = quasar::PTree::getBool(v11);
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1ADE80470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

void quasar::tennessee::getTennesseePath(quasar::tennessee *this@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 hasParam;
  _BOOL4 v6;
  quasar::PTree *Ptree;
  __int128 *String;
  void *v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::string v14;
  _QWORD v15[3];
  char v16;
  void *v17[2];
  char v18;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v17, "text-proc.tennessee.model-directory");
  hasParam = quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)v17);
  v6 = hasParam;
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (v6)
      goto LABEL_3;
  }
  else if (hasParam)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(v17, "text-proc.tennessee.model-directory");
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)this, (uint64_t)v17);
    String = (__int128 *)quasar::PTree::getString(Ptree);
    quasar::filesystem::Path::Path(a2, String);
    if ((v18 & 0x80000000) == 0)
      return;
    v9 = v17[0];
    goto LABEL_16;
  }
  kaldi::quasar::Vocab::OOvWord((quasar::tennessee *)((char *)this + 40), &v14);
  quasar::filesystem::Path::Path(v15, (__int128 *)&v14);
  std::string::basic_string[abi:ne180100]<0>(v12, "TP");
  quasar::filesystem::Path::operator/((uint64_t)v15, (uint64_t)v12, v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "tennessee");
  quasar::filesystem::Path::operator/((uint64_t)v17, (uint64_t)__p, a2);
  if (v11 < 0)
    operator delete(__p[0]);
  v17[0] = &unk_1E5D343A0;
  if (v19 < 0)
    operator delete(v17[1]);
  if (v13 < 0)
    operator delete(v12[0]);
  v15[0] = &unk_1E5D343A0;
  if (v16 < 0)
    operator delete((void *)v15[1]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v14.__r_.__value_.__r.__words[0];
LABEL_16:
    operator delete(v9);
  }
}

void sub_1ADE80620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v34 - 64) = &unk_1E5D343A0;
  if (*(char *)(v34 - 33) < 0)
    operator delete(*(void **)(v34 - 56));
  if (a21 < 0)
    operator delete(a16);
  if (a34 < 0)
    operator delete(a29);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(quasar::tennessee *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v5[3];
  char v6;
  std::string __p;

  quasar::tennessee::getTennesseePath(a1, v5);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v5, &__p);
  quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer((char *)&__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5[0] = &unk_1E5D343A0;
  if (v6 < 0)
    operator delete((void *)v5[1]);
}

void sub_1ADE80750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(quasar::tennessee *a1@<X0>, __int16 a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5[6];

  quasar::tennessee::createTennesseeOptions((uint64_t)a1, a2, (uint64_t)v5);
  quasar::tennessee::TennesseeTokenizer::createTennesseeTokenizer(a1, (uint64_t)v5, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v5, v5[1]);
}

void sub_1ADE807E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

BOOL quasar::tennessee::TennesseeTokenizer::tokenize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  std::string v16;
  int v17;
  void **v18;
  std::string *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, &v22);
  v4 = v22;
  v5 = v23;
  if (v22 == v23)
  {
    v14 = 0;
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)(v4 + 8);
      if (v6)
      {
        v19 = 0;
        v20 = 0;
        v18 = 0;
        v7 = *(const std::string **)(v4 + 16);
        v8 = 24 * v6;
        do
        {
          memset(&v16, 0, sizeof(v16));
          std::string::operator=(&v16, v7);
          v17 = 0;
          v9 = v19;
          if ((unint64_t)v19 >= v20)
          {
            v11 = (std::string *)std::vector<quasar::TextTokenizer::Token>::__push_back_slow_path<quasar::TextTokenizer::Token const&>((uint64_t *)&v18, (__int128 *)&v16);
          }
          else
          {
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v19, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
            }
            else
            {
              v10 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
              v19->__r_.__value_.__r.__words[2] = v16.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
            }
            LODWORD(v9[1].__r_.__value_.__l.__data_) = v17;
            v11 = (std::string *)((char *)v9 + 32);
          }
          v19 = v11;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          ++v7;
          v8 -= 24;
        }
        while (v8);
        v21 = 0;
        v12 = a3[1];
        if (v12 >= a3[2])
        {
          v13 = std::vector<quasar::TextTokenizer::TokenString>::__push_back_slow_path<quasar::TextTokenizer::TokenString const&>(a3, (uint64_t)&v18);
        }
        else
        {
          std::vector<quasar::TextTokenizer::TokenString>::__construct_one_at_end[abi:ne180100]<quasar::TextTokenizer::TokenString const&>((uint64_t)a3, (uint64_t)&v18);
          v13 = v12 + 32;
        }
        a3[1] = v13;
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      }
      v4 += 24;
    }
    while (v4 != v5);
    v14 = *a3 != a3[1];
  }
  v18 = (void **)&v22;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
  return v14;
}

void sub_1ADE8097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a17 = &a21;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void quasar::tennessee::TennesseeTokenizer::~TennesseeTokenizer(quasar::tennessee::TennesseeTokenizer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D3C768;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E5D3C768;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::OnlineTransducerGraphSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t i;
  unsigned __int8 v7[24];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3B148;
  *(_DWORD *)(v3 + 448) = 0x40000000;
  *(_BYTE *)(v3 + 452) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 456), "");
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 480));
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 1065353216;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 1065353216;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 576) = a1 + 584;
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 800) = 1065353216;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 808) = a1 + 816;
  *(_QWORD *)(a1 + 832) = a1 + 840;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1256) = 0x7FFFFFFF41800000;
  *(_QWORD *)(a1 + 1264) = 0x4120000000000000;
  *(_DWORD *)(a1 + 1272) = 25;
  *(_OWORD *)(a1 + 1276) = xmmword_1AE185E70;
  *(_DWORD *)(a1 + 1292) = 1065353216;
  *(_QWORD *)(a1 + 1296) = 0x3A8000003DCCCCCDLL;
  *(_QWORD *)(a1 + 1304) = -1;
  *(_QWORD *)(a1 + 1312) = -1;
  *(_QWORD *)(a1 + 1320) = 0x7F7FFFFF3F000000;
  *(_OWORD *)(a1 + 1328) = xmmword_1AE185E80;
  *(_QWORD *)(a1 + 1344) = -4282384384;
  *(_BYTE *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1356) = 0x32000003E8;
  *(_DWORD *)(a1 + 1364) = 1065353216;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1372) = 0x1E000000FALL;
  *(_OWORD *)(a1 + 1380) = xmmword_1AE1851D0;
  *(_QWORD *)(a1 + 1396) = 0x3F8000003F800000;
  *(_BYTE *)(a1 + 1404) = 0;
  *(_DWORD *)(a1 + 1408) = 4;
  *(_OWORD *)(a1 + 1416) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_QWORD *)(a1 + 1432) = v4 + 24;
  *(_QWORD *)(a1 + 1440) = v4;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_DWORD *)(a1 + 1464) = -1;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1644) = 0u;
  *(_OWORD *)(a1 + 1660) = 0u;
  *(_OWORD *)(a1 + 1612) = 0u;
  *(_OWORD *)(a1 + 1628) = 0u;
  *(_OWORD *)(a1 + 1580) = 0u;
  *(_OWORD *)(a1 + 1596) = 0u;
  *(_OWORD *)(a1 + 1548) = 0u;
  *(_OWORD *)(a1 + 1564) = 0u;
  *(_OWORD *)(a1 + 1516) = 0u;
  *(_OWORD *)(a1 + 1532) = 0u;
  *(_OWORD *)(a1 + 1484) = 0u;
  *(_OWORD *)(a1 + 1500) = 0u;
  *(_OWORD *)(a1 + 1468) = 0u;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 1800) = 1065353216;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_DWORD *)(a1 + 1864) = 1065353216;
  *(_QWORD *)(a1 + 1872) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 1896, v7, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete(*(void **)&v7[i * 8 + 24]);
  }
  *(_QWORD *)(a1 + 1992) = 0;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 1976) = a1 + 1984;
  *(_BYTE *)(a1 + 2125) = 0;
  *(_BYTE *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_QWORD *)(a1 + 2256) = 0;
  return a1;
}

void sub_1ADE80E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = 0;
  while (1)
  {
    if (*(char *)(v21 + v28 + 47) < 0)
      operator delete(*(void **)(v21 + v28 + 24));
    v28 -= 24;
    if (v28 == -48)
    {
      kaldi::quasar::DynamicClassTagDict::~DynamicClassTagDict((kaldi::quasar::DynamicClassTagDict *)(v19 + 1768));
      if (*(char *)(v19 + 1767) < 0)
        operator delete(*(void **)(v19 + 1744));
      if (*(char *)(v19 + 1743) < 0)
        operator delete(*(void **)(v19 + 1720));
      if (*(char *)(v19 + 1719) < 0)
        operator delete(*(void **)(v19 + 1696));
      if (*(char *)(v19 + 1687) < 0)
        operator delete(*(void **)(v19 + 1664));
      if (*(char *)(v19 + 1663) < 0)
        operator delete(*(void **)(v19 + 1640));
      if (*(char *)(v19 + 1639) < 0)
        operator delete(*(void **)(v19 + 1616));
      if (*(char *)(v19 + 1615) < 0)
        operator delete(*(void **)(v19 + 1592));
      if (*(char *)(v19 + 1591) < 0)
        operator delete(*(void **)(v19 + 1568));
      if (*(char *)(v19 + 1567) < 0)
        operator delete(*(void **)(v19 + 1544));
      if (*(char *)(v19 + 1543) < 0)
        operator delete(*(void **)(v19 + 1520));
      if (*(char *)(v19 + 1519) < 0)
        operator delete(*(void **)(v19 + 1496));
      if (*(char *)(v19 + 1495) < 0)
        operator delete(*(void **)(v19 + 1472));
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v27);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19 + 1432);
      v29 = *(_QWORD *)(v19 + 1424);
      *(_QWORD *)(v19 + 1424) = 0;
      if (v29)
        MEMORY[0x1AF44D190](v29, 0x1000C408195852FLL);
      v30 = *v20;
      *v20 = 0;
      if (v30)
        MEMORY[0x1AF44D190](v30, 0x1000C40605AC02ELL);
      std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v19 + 1248), 0);
      std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)(v19 + 1240), 0);
      std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)(v19 + 1232), 0);
      std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)(v19 + 1224), 0);
      if (*(char *)(v19 + 1223) < 0)
        operator delete(*(void **)(v19 + 1200));
      if (*(char *)(v19 + 1199) < 0)
        operator delete(*(void **)(v19 + 1176));
      if (*(char *)(v19 + 1175) < 0)
        operator delete(*(void **)(v19 + 1152));
      if (*(char *)(v19 + 1151) < 0)
        operator delete(*(void **)(v19 + 1128));
      if (*(char *)(v19 + 1127) < 0)
        operator delete(*(void **)(v19 + 1104));
      if (*(char *)(v19 + 1103) < 0)
        operator delete(*(void **)(v19 + 1080));
      if (*(char *)(v19 + 1079) < 0)
        operator delete(*(void **)(v19 + 1056));
      quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::~DecoderCreationDependencies((quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies *)(v19 + 896));
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v25);
      std::__tree<int>::destroy(v24, *(_QWORD **)(v19 + 840));
      std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v19 + 808, *(_QWORD **)(v19 + 816));
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v19 + 768);
      if (*(char *)(v19 + 767) < 0)
        operator delete(*(void **)(v19 + 744));
      if (*(char *)(v19 + 743) < 0)
        operator delete(*(void **)(v19 + 720));
      if (*(char *)(v19 + 719) < 0)
        operator delete(*(void **)(v19 + 696));
      if (*(char *)(v19 + 695) < 0)
        operator delete(*(void **)(v19 + 672));
      if (*(char *)(v19 + 671) < 0)
        operator delete(*(void **)(v19 + 648));
      if (*(char *)(v19 + 647) < 0)
        operator delete(*(void **)(v19 + 624));
      if (*(char *)(v19 + 623) < 0)
        operator delete(*v26);
      std::__tree<std::string>::destroy(a12, *v23);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v22);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v19 + 496);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
      if (*(char *)(v19 + 479) < 0)
        operator delete(*a11);
      quasar::Decoder::~Decoder((void **)v19);
      _Unwind_Resume(a1);
    }
  }
}

void quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::~DecoderCreationDependencies(quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies *this)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void quasar::OnlineTransducerGraphSearchDecoder::~OnlineTransducerGraphSearchDecoder(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  *(_QWORD *)this = &off_1E5D3B148;
  v2 = (void *)*((_QWORD *)this + 280);
  if (v2)
  {
    *((_QWORD *)this + 281) = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2224);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2208);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2192);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2176);
  if (*((char *)this + 2175) < 0)
    operator delete(*((void **)this + 269));
  if (*((char *)this + 2151) < 0)
    operator delete(*((void **)this + 266));
  v10 = (void **)((char *)this + 2096);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v3 = (void *)*((_QWORD *)this + 259);
  if (v3)
  {
    *((_QWORD *)this + 260) = v3;
    operator delete(v3);
  }
  v10 = (void **)((char *)this + 2048);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v4 = (void *)*((_QWORD *)this + 253);
  if (v4)
  {
    *((_QWORD *)this + 254) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 250);
  if (v5)
  {
    *((_QWORD *)this + 251) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1976, *((_QWORD **)this + 248));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1960);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1944);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 1896);
  v6 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1832);
  v7 = (void *)*((_QWORD *)this + 226);
  if (v7)
  {
    *((_QWORD *)this + 227) = v7;
    operator delete(v7);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 1768);
  if (*((char *)this + 1767) < 0)
    operator delete(*((void **)this + 218));
  if (*((char *)this + 1743) < 0)
    operator delete(*((void **)this + 215));
  if (*((char *)this + 1719) < 0)
    operator delete(*((void **)this + 212));
  if (*((char *)this + 1687) < 0)
    operator delete(*((void **)this + 208));
  if (*((char *)this + 1663) < 0)
    operator delete(*((void **)this + 205));
  if (*((char *)this + 1639) < 0)
    operator delete(*((void **)this + 202));
  if (*((char *)this + 1615) < 0)
    operator delete(*((void **)this + 199));
  if (*((char *)this + 1591) < 0)
    operator delete(*((void **)this + 196));
  if (*((char *)this + 1567) < 0)
    operator delete(*((void **)this + 193));
  if (*((char *)this + 1543) < 0)
    operator delete(*((void **)this + 190));
  if (*((char *)this + 1519) < 0)
    operator delete(*((void **)this + 187));
  if (*((char *)this + 1495) < 0)
    operator delete(*((void **)this + 184));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1448);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1432);
  v8 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v8)
    MEMORY[0x1AF44D190](v8, 0x1000C408195852FLL);
  v9 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v9)
    MEMORY[0x1AF44D190](v9, 0x1000C40605AC02ELL);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 156, 0);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)this + 155, 0);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 154, 0);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)this + 153, 0);
  if (*((char *)this + 1223) < 0)
    operator delete(*((void **)this + 150));
  if (*((char *)this + 1199) < 0)
    operator delete(*((void **)this + 147));
  if (*((char *)this + 1175) < 0)
    operator delete(*((void **)this + 144));
  if (*((char *)this + 1151) < 0)
    operator delete(*((void **)this + 141));
  if (*((char *)this + 1127) < 0)
    operator delete(*((void **)this + 138));
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  if (*((char *)this + 1079) < 0)
    operator delete(*((void **)this + 132));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1040);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1024);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1008);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 992);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 976);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 960);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 944);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 928);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 912);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 896);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 856);
  std::__tree<int>::destroy((uint64_t)this + 832, *((_QWORD **)this + 105));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 808, *((_QWORD **)this + 102));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 768);
  if (*((char *)this + 767) < 0)
    operator delete(*((void **)this + 93));
  if (*((char *)this + 743) < 0)
    operator delete(*((void **)this + 90));
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  if (*((char *)this + 647) < 0)
    operator delete(*((void **)this + 78));
  if (*((char *)this + 623) < 0)
    operator delete(*((void **)this + 75));
  std::__tree<std::string>::destroy((uint64_t)this + 576, *((char **)this + 73));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 536);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 496);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineTransducerGraphSearchDecoder::~OnlineTransducerGraphSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "transducer-graph-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 250, 0, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig::Register((uint64_t)(this + 157), (uint64_t)a2);
  kaldi::EndPointerOptions::Register((uint64_t)(this + 169), (uint64_t)a2);
  kaldi::UtteranceDetectorOptions::Register((uint64_t)(this + 171), (uint64_t)a2);
  kaldi::quasar::TransducerAutoRegressiveDecodableOptions::Register((uint64_t)this + 1380, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[179], a2, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "acoustic-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Transducer acoustic encoder (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 132), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "label-encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Transducer label encoder (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 135), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "joint-predictor-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Transducer joint predictor (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 138), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-model-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Subword neural network language model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 141), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Token symbol table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 144), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "unk-word-symbol");
  std::string::basic_string[abi:ne180100]<0>(v5, "Unknown word symbol");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 147), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-word-start-symbol");
  std::string::basic_string[abi:ne180100]<0>(v5, "First token word symbol in word symbol table");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 150), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "Number of acoustic encoder output frames to compute per chunk.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 176), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "print-best-path-lattice");
  std::string::basic_string[abi:ne180100]<0>(v5, "Print best path lattice for debugging");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 2125, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reference-rspecifier");
  std::string::basic_string[abi:ne180100]<0>(v5, "Reference transcripts for debugging with oracle decoding");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 266), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-reference-rspecifier");
  std::string::basic_string[abi:ne180100]<0>(v5, "Phonetic reference transcripts for debugging with oracle decoding");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 269), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "HCLG FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 184), (uint64_t)v5, 1, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Grammar FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 190), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "Inverted Grammar FST filename (overrides uninverted)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 187), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of BigGrammar FST filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 193), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-fst-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "the interpolation weights for the FST LMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 202), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-total-extra-weight");
  std::string::basic_string[abi:ne180100]<0>(v5, "Max first pass weight for limiting total weight of all extra LMs in the first pass - all-app LM and possibly one more app specific LM");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 265), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of BigGrammar NNLM filename, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 196), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-map-file-ext");
  std::string::basic_string[abi:ne180100]<0>(v5, "the file extension name of the corresponding NNLM word map file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 199), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "big-g-nnet-weight-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "the interpolation weights for the NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 205), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-nce-norm-factor-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "the normalization factor for NCE trained NNLMs, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 208), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rnnlm-max-context-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "maximal context for RNN style LM, no-op for other style of LMs");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 235), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-state-access-recording");
  std::string::basic_string[abi:ne180100]<0>(v5, "Record which states in each FST are accessed, to allow for efficient reordering");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 2124, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(v5, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 237), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(v5, "Map FST/NNLM models into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1884, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 242), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "cache-size");
  std::string::basic_string[abi:ne180100]<0>(v5, "Cache size for lazy replace operation");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-lme");
  std::string::basic_string[abi:ne180100]<0>(v5, "Enable LME");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-lme-template-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "Comma-delimited LME template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 57), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM FST filenames, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 75), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-template-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM templates, in the same order as the classLM-fst-file-list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-nnlm-file-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of class Nnlm filenames, use comma to separate multiple ones");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 87), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-nnlm-template-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classNNLM templates");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 81), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-nnlm-scale-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classNNLM scales");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 84), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-start-name-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM start names, in the same order as the classLM-fst-file-list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 90), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classLM-end-name-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "list of classLM end names, in the same order as the classLM-fst-file-list");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 93), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic-class-lm-emission");
  std::string::basic_string[abi:ne180100]<0>(v5, "If true, enable dynamic classLm emission");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 211), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic-class-lm-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "THe dynamic class tags list separated by comma");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 212), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic-class-lm-smallG-file");
  std::string::basic_string[abi:ne180100]<0>(v5, "The prior for correspoding classLm tags. Each line should contain two columns, tag and log prob");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 218), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "static-class-lm-tag-list");
  std::string::basic_string[abi:ne180100]<0>(v5, "The static tags lit separated by comma. Add this will improve dynamic emission's latency");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 215), (uint64_t)v5, 0, 250, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  MEMORY[0x1AF44C914](this + 199, "wordmap");
  *((_BYTE *)this + 2124) = 0;
  *((_BYTE *)this + 1884) = 0;
  *((_DWORD *)this + 470) = 7;
  *((_BYTE *)this + 1688) = 0;
  *((_DWORD *)this + 530) = 1065353216;
  *((_DWORD *)this + 484) = 4;
  MEMORY[0x1AF44C914](this + 75, "");
  return MEMORY[0x1AF44C914](this + 78, "");
}

void sub_1ADE82820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  fst::DeterminizeLatticePrunedOptions::Register(a1 + 44, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder max active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder minimum #active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice generation beam");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "prune-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Interval (in frames) at which to prune tokens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increment used in decoding-- this parameter is obscure and relates to a speedup in the way the max-active constraint is applied.  Larger is more accurate.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Setting used in decoder to control hash behavior");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-ins-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word insertion penalty applied to each word");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "graph-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for graph scores");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic scores");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 36, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "small-lm-prune-beam-diff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for small LM before checking with big LM; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 68, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-steps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max number of decoder steps. Inactive if negative (default).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 80, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated tokens at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 84, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-forward-links");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated forward links at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 88, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE82EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::finishInit(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  kaldi::quasar::CEAcousticEncoderNet *v2;
  kaldi::quasar::CELabelEncoderNet *v3;
  kaldi::quasar::CEJointPredictorNet *v4;
  kaldi::quasar::CELabelEncoderNet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  kaldi::quasar::CELabelEncoderNet *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int64x2_t *v55;
  void **v56;
  uint64_t *MultiChainMultiAudioBuffer;
  uint64_t v58;
  __int128 *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 *v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  __int128 v71;
  int64x2_t v72;
  _OWORD *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  _DWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64x2_t *v95;
  uint64_t v96;
  uint64_t *v97;
  __int128 *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  __int128 *v106;
  _QWORD *v107;
  _QWORD *v108;
  char *v109;
  __int128 v110;
  int64x2_t v111;
  _OWORD *v112;
  void *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  float *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _DWORD *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *i;
  uint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::string::size_type size;
  uint64_t v142;
  const char *v143;
  void *v144;
  void *v145;
  int v146;
  unsigned __int8 *v147;
  uint64_t v148;
  void **v149;
  int v150;
  int v151;
  int v152;
  int v153;
  BOOL v155;
  BOOL v156;
  const char *v157;
  void *v158;
  int v159;
  void *v160;
  _QWORD *v161;
  _QWORD *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _DWORD *v184;
  int *v185;
  int *v186;
  int v187;
  _BOOL4 v188;
  char *v189;
  char *v190;
  char v191;
  _BOOL4 v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *Text;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  __int128 *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  int *v217;
  void *v218[2];
  char v219;
  std::string v220;
  void *v221;
  char *v222;
  uint64_t v223;
  void *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int8 *v234;
  std::__shared_weak_count *v235;
  void *v236;
  std::__shared_weak_count *v237;
  __int128 v238;
  void *__s1[4];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  __int128 v259;
  uint64_t v260;
  __int128 __p;
  uint64_t v262;
  _QWORD v263[3];
  _QWORD *v264;
  _QWORD v265[3];
  _QWORD *v266;
  _QWORD v267[3];
  _QWORD *v268;
  _BYTE v269[24];
  _BYTE *v270;
  __int128 v271;
  char *v272;
  __int128 *v273;
  uint64_t v274;

  v274 = *MEMORY[0x1E0C80C00];
  v2 = (kaldi::quasar::CEAcousticEncoderNet *)operator new();
  kaldi::quasar::CEAcousticEncoderNet::CEAcousticEncoderNet(v2);
  std::unique_ptr<kaldi::quasar::CEAcousticEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEAcousticEncoderNet **)this + 153, v2);
  v3 = (kaldi::quasar::CELabelEncoderNet *)operator new();
  kaldi::quasar::CELabelEncoderNet::CELabelEncoderNet(v3, (char *)this + 1080);
  std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 154, v3);
  v4 = (kaldi::quasar::CEJointPredictorNet *)operator new();
  kaldi::quasar::CEJointPredictorNet::CEJointPredictorNet(v4, (char *)this + 1104);
  std::unique_ptr<kaldi::quasar::CEJointPredictorNet>::reset[abi:ne180100]((kaldi::quasar::CEJointPredictorNet **)this + 155, v4);
  if (*((char *)this + 1151) < 0)
  {
    if (!*((_QWORD *)this + 142))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*((_BYTE *)this + 1151))
  {
LABEL_5:
    v5 = (kaldi::quasar::CELabelEncoderNet *)operator new();
    kaldi::quasar::CELabelEncoderNet::CELabelEncoderNet(v5, (char *)this + 1128);
    std::unique_ptr<kaldi::quasar::CELabelEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CELabelEncoderNet **)this + 156, v5);
  }
LABEL_6:
  v6 = operator new();
  kaldi::EndPointer::EndPointer(v6, (char *)this + 1352);
  v7 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = v6;
  if (v7)
    MEMORY[0x1AF44D190](v7, 0x1000C40605AC02ELL);
  v8 = operator new();
  kaldi::UtteranceDetector::UtteranceDetector(v8, (char *)this + 1368);
  v9 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = v8;
  if (v9)
    MEMORY[0x1AF44D190](v9, 0x1000C408195852FLL);
  kaldi::quasar::CEAcousticEncoderNet::WarmUp(*((kaldi::quasar::CEAcousticEncoderNet **)this + 153));
  kaldi::quasar::CELabelEncoderNet::WarmUp(*((kaldi::quasar::CELabelEncoderNet **)this + 154));
  kaldi::quasar::CEJointPredictorNet::WarmUp(*((kaldi::quasar::CEJointPredictorNet **)this + 155));
  v10 = (kaldi::quasar::CELabelEncoderNet *)*((_QWORD *)this + 156);
  if (v10)
    kaldi::quasar::CELabelEncoderNet::WarmUp(v10);
  if (*((char *)this + 1519) < 0)
    v11 = *((_QWORD *)this + 188);
  else
    v11 = *((unsigned __int8 *)this + 1519);
  if (v11)
  {
    if (quasar::gLogLevel >= 4)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Using pre-inverted grammar: ", 28);
      v13 = *((char *)this + 1519);
      if (v13 >= 0)
        v14 = (char *)this + 1496;
      else
        v14 = (char *)*((_QWORD *)this + 187);
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)this + 1519);
      else
        v15 = *((_QWORD *)this + 188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__s1);
    }
    __s1[0] = 0;
    __s1[1] = 0;
    quasar::ModelLoader::requestEmbeddedMlock(*((std::string **)this + 46), (unsigned __int8 *)this + 1496, &v271, 1.0);
    *(_OWORD *)__s1 = v271;
    v16 = *((_QWORD *)this + 46);
    v238 = v271;
    if (*((_QWORD *)&v271 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    quasar::ModelLoader::readFstNetwork(v16, (uint64_t)this + 1496, (unsigned __int8 **)&v238, (uint64_t *)&v271);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1960, &v271);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
    if (*((_QWORD *)&v271 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
    if (*((_QWORD *)&v238 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *(_QWORD *)&v271 = (char *)this + 1496;
    v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 247, (const void **)this + 187, (uint64_t)&std::piecewise_construct, (__int128 **)&v271);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v25 + 7, (uint64_t *)this + 245);
    v26 = (std::__shared_weak_count *)__s1[1];
    if (__s1[1])
    {
      v27 = (unint64_t *)((char *)__s1[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Using regular grammar, need to negate in memory: ", 49);
      v30 = *((char *)this + 1543);
      if (v30 >= 0)
        v31 = (char *)this + 1520;
      else
        v31 = (char *)*((_QWORD *)this + 190);
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)this + 1543);
      else
        v32 = *((_QWORD *)this + 191);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__s1);
    }
    v33 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read((uint64_t)this + 1520);
    fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)v33, -1.0);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v33);
    std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>((_QWORD *)this + 245, (uint64_t)v33);
    __s1[0] = (char *)this + 1520;
    v34 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 247, (const void **)this + 190, (uint64_t)&std::piecewise_construct, (__int128 **)__s1);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v34 + 7, (uint64_t *)this + 245);
  }
  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 245) + 64))(*((_QWORD *)this + 245), 0x10000000, 0) != 0x10000000)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__s1, "gInvFst: input label is not sorted!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  v236 = 0;
  v237 = 0;
  quasar::ModelLoader::requestEmbeddedMlock(*((std::string **)this + 46), (unsigned __int8 *)this + 1472, __s1, 1.0);
  v236 = __s1[0];
  v237 = (std::__shared_weak_count *)__s1[1];
  v35 = *((_QWORD *)this + 46);
  v234 = (unsigned __int8 *)__s1[0];
  v235 = (std::__shared_weak_count *)__s1[1];
  if (__s1[1])
  {
    v36 = (unint64_t *)((char *)__s1[1] + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  quasar::ModelLoader::readFstNetwork(v35, (uint64_t)this + 1472, &v234, (uint64_t *)__s1);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1944, (__int128 *)__s1);
  v38 = (std::__shared_weak_count *)__s1[1];
  if (__s1[1])
  {
    v39 = (unint64_t *)((char *)__s1[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v235;
  if (v235)
  {
    p_shared_owners = (unint64_t *)&v235->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  __s1[0] = (char *)this + 1472;
  v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 247, (const void **)this + 184, (uint64_t)&std::piecewise_construct, (__int128 **)__s1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v44 + 7, (uint64_t *)this + 243);
  if (*((_BYTE *)this + 2124) || *((_BYTE *)this + 440))
  {
    if (quasar::gLogLevel >= 5)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"State access recording is enabled. This will slow decoding, so disregard performance.", 85);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__s1);
    }
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(__s1);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1944, (__int128 *)__s1);
    v45 = (std::__shared_weak_count *)__s1[1];
    if (__s1[1])
    {
      v46 = (unint64_t *)((char *)__s1[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    __s1[0] = (char *)this + 1472;
    v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 247, (const void **)this + 184, (uint64_t)&std::piecewise_construct, (__int128 **)__s1);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v48 + 7, (uint64_t *)this + 243);
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(__s1);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1960, (__int128 *)__s1);
    v49 = (std::__shared_weak_count *)__s1[1];
    if (__s1[1])
    {
      v50 = (unint64_t *)((char *)__s1[1] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (*((char *)this + 1519) < 0)
    {
      if (*((_QWORD *)this + 188))
        goto LABEL_81;
    }
    else if (*((_BYTE *)this + 1519))
    {
LABEL_81:
      __s1[0] = (char *)this + 1496;
      v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 247, (const void **)this + 187, (uint64_t)&std::piecewise_construct, (__int128 **)__s1);
LABEL_84:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v52 + 7, (uint64_t *)this + 245);
      goto LABEL_85;
    }
    __s1[0] = (char *)this + 1520;
    v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 247, (const void **)this + 190, (uint64_t)&std::piecewise_construct, (__int128 **)__s1);
    goto LABEL_84;
  }
LABEL_85:
  if (*((char *)this + 1567) < 0)
  {
    if (*((_QWORD *)this + 194))
      goto LABEL_91;
  }
  else if (*((_BYTE *)this + 1567))
  {
    goto LABEL_91;
  }
  if ((*((char *)this + 1591) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 1591))
      goto LABEL_91;
LABEL_390:
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"No BigG FST or NNLM specified. Hint: This is a BigLm decoder.", 61);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if (!*((_QWORD *)this + 197))
    goto LABEL_390;
LABEL_91:
  v231 = 0;
  v232 = 0;
  v233 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 1544), ",", 1, (uint64_t)&v231);
  v230 = 1;
  *(_QWORD *)&v271 = &off_1E5D3E9B0;
  *((_QWORD *)&v271 + 1) = this;
  v272 = &v230;
  v273 = &v271;
  v53 = v231;
  v54 = v232;
  if (v231 != v232)
  {
    v55 = (int64x2_t *)((char *)this + 2048);
    v56 = (void **)((char *)this + 2072);
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      MultiChainMultiAudioBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v58 = (uint64_t)v273;
      if (!v273)
        goto LABEL_96;
      if (v273 != &v271)
        break;
      v270 = v269;
      (*(void (**)(__int128 *, _BYTE *))(v271 + 24))(&v271, v269);
LABEL_98:
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(v53, (uint64_t)&__p, MultiChainMultiAudioBuffer, (uint64_t)v269, &v259);
      v59 = (__int128 *)*((_QWORD *)this + 257);
      v60 = *((_QWORD *)this + 258);
      if ((unint64_t)v59 >= v60)
      {
        v61 = ((uint64_t)v59 - v55->i64[0]) >> 4;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v63 = v60 - v55->i64[0];
        if (v63 >> 3 > v62)
          v62 = v63 >> 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        *(_QWORD *)&v240 = (char *)this + 2064;
        v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 2064, v64);
        v67 = (__int128 *)&v65[16 * v61];
        *v67 = v259;
        v259 = 0uLL;
        v68 = (_QWORD *)*((_QWORD *)this + 257);
        v69 = (_QWORD *)*((_QWORD *)this + 256);
        if (v68 == v69)
        {
          v72 = vdupq_n_s64((unint64_t)v68);
          v70 = &v65[16 * v61];
        }
        else
        {
          v70 = &v65[16 * v61];
          do
          {
            v71 = *((_OWORD *)v68 - 1);
            v68 -= 2;
            *((_OWORD *)v70 - 1) = v71;
            v70 -= 16;
            *v68 = 0;
            v68[1] = 0;
          }
          while (v68 != v69);
          v72 = *v55;
        }
        v73 = v67 + 1;
        *((_QWORD *)this + 256) = v70;
        *((_QWORD *)this + 257) = v67 + 1;
        *(int64x2_t *)&__s1[1] = v72;
        v74 = (void *)*((_QWORD *)this + 258);
        *((_QWORD *)this + 258) = &v65[16 * v66];
        __s1[3] = v74;
        __s1[0] = (void *)v72.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)__s1);
        v75 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
        *((_QWORD *)this + 257) = v73;
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
      }
      else
      {
        *v59 = v259;
        v259 = 0uLL;
        *((_QWORD *)this + 257) = v59 + 1;
      }
      v78 = v270;
      if (v270 == v269)
      {
        v78 = v269;
        v79 = 4;
        goto LABEL_120;
      }
      if (v270)
      {
        v79 = 5;
LABEL_120:
        (*(void (**)(void))(*v78 + 8 * v79))();
      }
      if (SHIBYTE(v262) < 0)
        operator delete((void *)__p);
      v80 = (char *)*((_QWORD *)this + 260);
      v81 = *((_QWORD *)this + 261);
      if ((unint64_t)v80 >= v81)
      {
        v83 = (char *)*v56;
        v84 = (v80 - (_BYTE *)*v56) >> 2;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v86 = v81 - (_QWORD)v83;
        if (v86 >> 1 > v85)
          v85 = v86 >> 1;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 2088, v87);
          v80 = (char *)*((_QWORD *)this + 260);
          v83 = (char *)*((_QWORD *)this + 259);
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[4 * v84];
        *(_DWORD *)v89 = 4;
        v82 = v89 + 4;
        while (v80 != v83)
        {
          v90 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *((_DWORD *)v89 - 1) = v90;
          v89 -= 4;
        }
        *((_QWORD *)this + 259) = v89;
        *((_QWORD *)this + 260) = v82;
        *((_QWORD *)this + 261) = &v88[4 * v87];
        if (v83)
          operator delete(v83);
      }
      else
      {
        *(_DWORD *)v80 = 4;
        v82 = v80 + 4;
      }
      *((_QWORD *)this + 260) = v82;
      v53 += 24;
      if (v53 == v54)
        goto LABEL_140;
    }
    v58 = (*(uint64_t (**)(void))(*(_QWORD *)v273 + 16))();
LABEL_96:
    v270 = (_BYTE *)v58;
    goto LABEL_98;
  }
LABEL_140:
  v227 = 0;
  v228 = 0;
  v229 = 0;
  kaldi::SplitStringToVector((const std::string *)((char *)this + 1568), ",", 1, (uint64_t)&v227);
  if (*((char *)this + 1687) < 0)
    v91 = *((_QWORD *)this + 209);
  else
    v91 = *((unsigned __int8 *)this + 1687);
  if (v91)
  {
    if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1664, ",", 1, (_QWORD *)this + 253) & 1) == 0)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Could not read the NNLM normalization factor info", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
    }
    v93 = v227;
    v92 = v228;
    if (0xAAAAAAAAAAAAAAABLL * ((v228 - v227) >> 3) != (uint64_t)(*((_QWORD *)this + 254) - *((_QWORD *)this + 253)) >> 2)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"the number of NNLM files and the number of NNLM norm factors do not match", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
    }
  }
  else
  {
    LODWORD(__s1[0]) = 0;
    std::vector<float>::assign((char **)this + 253, 0xAAAAAAAAAAAAAAABLL * ((v228 - v227) >> 3), __s1);
    v93 = v227;
    v92 = v228;
  }
  if (v92 != v93)
  {
    v94 = 0;
    v95 = (int64x2_t *)((char *)this + 2096);
    while (1)
    {
      v96 = *(unsigned int *)(*((_QWORD *)this + 253) + 4 * v94);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v97 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
      v267[0] = &off_1E5D3EA08;
      v267[1] = this;
      v267[2] = v96;
      v268 = v267;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(v93 + 24 * v94, (uint64_t)&__p, v97, (uint64_t)v267, &v259);
      v98 = (__int128 *)*((_QWORD *)this + 263);
      v99 = *((_QWORD *)this + 264);
      if ((unint64_t)v98 >= v99)
      {
        v100 = ((uint64_t)v98 - v95->i64[0]) >> 4;
        v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v102 = v99 - v95->i64[0];
        if (v102 >> 3 > v101)
          v101 = v102 >> 3;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
          v103 = 0xFFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        *(_QWORD *)&v240 = (char *)this + 2112;
        v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 2112, v103);
        v106 = (__int128 *)&v104[16 * v100];
        *v106 = v259;
        v259 = 0uLL;
        v107 = (_QWORD *)*((_QWORD *)this + 263);
        v108 = (_QWORD *)*((_QWORD *)this + 262);
        if (v107 == v108)
        {
          v111 = vdupq_n_s64((unint64_t)v107);
          v109 = &v104[16 * v100];
        }
        else
        {
          v109 = &v104[16 * v100];
          do
          {
            v110 = *((_OWORD *)v107 - 1);
            v107 -= 2;
            *((_OWORD *)v109 - 1) = v110;
            v109 -= 16;
            *v107 = 0;
            v107[1] = 0;
          }
          while (v107 != v108);
          v111 = *v95;
        }
        v112 = v106 + 1;
        *((_QWORD *)this + 262) = v109;
        *((_QWORD *)this + 263) = v106 + 1;
        *(int64x2_t *)&__s1[1] = v111;
        v113 = (void *)*((_QWORD *)this + 264);
        *((_QWORD *)this + 264) = &v104[16 * v105];
        __s1[3] = v113;
        __s1[0] = (void *)v111.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)__s1);
        v114 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
        *((_QWORD *)this + 263) = v112;
        if (v114)
        {
          v115 = (unint64_t *)&v114->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
      }
      else
      {
        *v98 = v259;
        v259 = 0uLL;
        *((_QWORD *)this + 263) = v98 + 1;
      }
      v117 = v268;
      if (v268 == v267)
        break;
      if (v268)
      {
        v118 = 5;
LABEL_172:
        (*(void (**)(void))(*v117 + 8 * v118))();
      }
      if (SHIBYTE(v262) < 0)
        operator delete((void *)__p);
      ++v94;
      v93 = v227;
      if (0xAAAAAAAAAAAAAAABLL * ((v228 - v227) >> 3) <= v94)
        goto LABEL_176;
    }
    v117 = v267;
    v118 = 4;
    goto LABEL_172;
  }
LABEL_176:
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1616, ",", 1, &v224) & 1) == 0)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Could not read FST LM interpolation weight info", 47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if ((uint64_t)(*((_QWORD *)this + 257) - *((_QWORD *)this + 256)) >> 4 != (v225 - (_BYTE *)v224) >> 2)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"The number of big FST LMs and the number of weights mismatch", 60);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if ((kaldi::SplitStringToFloats<float>((uint64_t)this + 1640, ",", 1, &v221) & 1) == 0)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Could not read NN LM interpolation weight info", 46);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if ((uint64_t)(*((_QWORD *)this + 263) - *((_QWORD *)this + 262)) >> 4 != (v222 - (_BYTE *)v221) >> 2)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"The number of big NN LMs and the number of weights mismatch", 59);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  v119 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 251) = v119;
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 2000, v119, (char *)v224, v225, (v225 - (_BYTE *)v224) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 2000, *((_QWORD *)this + 251), (char *)v221, v222, (v222 - (_BYTE *)v221) >> 2);
  v120 = (float *)*((_QWORD *)this + 250);
  v121 = (float *)*((_QWORD *)this + 251);
  if (v120 == v121)
  {
    v122 = *((_QWORD *)this + 252);
    if ((unint64_t)v120 >= v122)
    {
      v123 = v122 - (_QWORD)v120;
      v124 = v123 >> 1;
      if ((unint64_t)(v123 >> 1) <= 1)
        v124 = 1;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
        v125 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v125 = v124;
      v126 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 2016, v125);
      v127 = (char *)*((_QWORD *)this + 251);
      v128 = (char *)*((_QWORD *)this + 250);
      v130 = &v126[v129];
      *v126 = 1065353216;
      v121 = (float *)(v126 + 1);
      while (v127 != v128)
      {
        v131 = *((_DWORD *)v127 - 1);
        v127 -= 4;
        *--v126 = v131;
      }
      *((_QWORD *)this + 250) = v126;
      *((_QWORD *)this + 251) = v121;
      *((_QWORD *)this + 252) = v130;
      if (v128)
        operator delete(v128);
    }
    else
    {
      *v120 = 1.0;
      v121 = v120 + 1;
    }
    *((_QWORD *)this + 251) = v121;
    v120 = (float *)*((_QWORD *)this + 250);
  }
  if ((char *)v121 - (char *)v120 == 4 && *v120 != 1.0)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Language model weight must be 1 when using a single LM", 54);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 179), (quasar::OnlineTransducerGraphSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, ",");
  quasar::splitStringSimple((uint64_t)this + 456, (uint64_t *)&__p, (uint64_t *)__s1);
  if (SHIBYTE(v262) < 0)
    operator delete((void *)__p);
  v132 = (unsigned __int8 *)__s1[0];
  for (i = (unsigned __int8 *)__s1[1]; v132 != i; v132 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 496, v132, (uint64_t)v132);
  *(_QWORD *)&__p = __s1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v134 = (uint64_t *)*((_QWORD *)this + 64);
  memset(&v220, 0, sizeof(v220));
  v135 = 0;
  if (v134)
  {
    v136 = v134;
    do
    {
      ++v135;
      v136 = (uint64_t *)*v136;
    }
    while (v136);
  }
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v220, v134, 0, v135);
  v137 = 126
       - 2
       * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 3));
  if (v220.__r_.__value_.__l.__size_ == v220.__r_.__value_.__r.__words[0])
    v138 = 0;
  else
    v138 = v137;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v220.__r_.__value_.__l.__data_, (const void **)v220.__r_.__value_.__l.__size_, (uint64_t)__s1, v138, 1);
  size = v220.__r_.__value_.__l.__size_;
  v140 = v220.__r_.__value_.__r.__words[0];
  if (v220.__r_.__value_.__r.__words[0] != v220.__r_.__value_.__l.__size_)
  {
    v142 = 0;
    v143 = "Cached template ID ";
    while (1)
    {
      *(_QWORD *)&__p = 0;
      if (!v142)
        goto LABEL_233;
      ++v142;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __s1);
      if (SHIBYTE(__s1[2]) >= 0)
        v144 = (void *)HIBYTE(__s1[2]);
      else
        v144 = __s1[1];
      v145 = (void *)*(unsigned __int8 *)(v140 + 23);
      v146 = (char)v145;
      if ((char)v145 < 0)
        v145 = *(void **)(v140 + 8);
      if (v144 != v145)
        break;
      if (v146 >= 0)
        v147 = (unsigned __int8 *)v140;
      else
        v147 = *(unsigned __int8 **)v140;
      if ((HIBYTE(__s1[2]) & 0x80) != 0)
      {
        v157 = v143;
        v158 = __s1[0];
        v159 = memcmp(__s1[0], v147, (size_t)__s1[1]);
        v160 = v158;
        v143 = v157;
        operator delete(v160);
        if (v159)
          goto LABEL_233;
      }
      else if (HIBYTE(__s1[2]))
      {
        v148 = HIBYTE(__s1[2]) - 1;
        v149 = __s1;
        do
        {
          v151 = *(unsigned __int8 *)v149;
          v149 = (void **)((char *)v149 + 1);
          v150 = v151;
          v153 = *v147++;
          v152 = v153;
          v155 = v148-- != 0;
          v156 = v150 == v152;
        }
        while (v150 == v152 && v155);
        if ((HIBYTE(__s1[2]) & 0x80) == 0)
          goto LABEL_227;
LABEL_230:
        operator delete(__s1[0]);
        if (v156)
          goto LABEL_234;
        goto LABEL_233;
      }
LABEL_234:
      *(_QWORD *)&__p = v142;
      if (v142 == -1)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v240 = 0u;
        memset(__s1, 0, sizeof(__s1));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
        v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Could not find \"", 16);
        v212 = *(char *)(v140 + 23);
        if (v212 >= 0)
          v213 = v140;
        else
          v213 = *(_QWORD *)v140;
        if (v212 >= 0)
          v214 = *(unsigned __int8 *)(v140 + 23);
        else
          v214 = *(_QWORD *)(v140 + 8);
        v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, v213, v214);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
      }
      __s1[0] = (void *)v140;
      std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 72, (const void **)v140, (uint64_t)&std::piecewise_construct, (__int128 **)__s1)[7] = v142;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)this + 536, (unint64_t *)&__p, &__p);
      if (quasar::gLogLevel >= 4)
      {
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v247 = 0u;
        v248 = 0u;
        v245 = 0u;
        v246 = 0u;
        v243 = 0u;
        v244 = 0u;
        v241 = 0u;
        v242 = 0u;
        v240 = 0u;
        memset(__s1, 0, sizeof(__s1));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)v143, 19);
        v161 = (_QWORD *)std::ostream::operator<<();
        v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)" for ", 5);
        v163 = *(char *)(v140 + 23);
        if (v163 >= 0)
          v164 = v140;
        else
          v164 = *(_QWORD *)v140;
        if (v163 >= 0)
          v165 = *(unsigned __int8 *)(v140 + 23);
        else
          v165 = *(_QWORD *)(v140 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, v164, v165);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__s1);
      }
      v140 += 24;
      if (v140 == size)
        goto LABEL_244;
    }
    v156 = 0;
    if ((HIBYTE(__s1[2]) & 0x80) != 0)
      goto LABEL_230;
LABEL_227:
    if (v156)
      goto LABEL_234;
LABEL_233:
    v142 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), v140);
    goto LABEL_234;
  }
LABEL_244:
  if (*((char *)this + 623) < 0)
  {
    if (!*((_QWORD *)this + 76))
      goto LABEL_263;
    goto LABEL_248;
  }
  if (*((_BYTE *)this + 623))
  {
LABEL_248:
    __p = 0uLL;
    v262 = 0;
    v259 = 0uLL;
    v260 = 0;
    kaldi::SplitStringToVector((const std::string *)this + 25, ",", 1, (uint64_t)&__p);
    kaldi::SplitStringToVector((const std::string *)this + 26, ",", 1, (uint64_t)&v259);
    v166 = v259;
    if (*((_QWORD *)&v259 + 1) - (_QWORD)v259 != *((_QWORD *)&__p + 1) - (_QWORD)__p)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"The number of classLM templates = ", 34);
      v216 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)", which does not match the number of classLM Fst files = ", 57);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
    }
    if (*((_QWORD *)&v259 + 1) == (_QWORD)v259)
    {
LABEL_262:
      __s1[0] = &v259;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
      __s1[0] = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
      goto LABEL_263;
    }
    v167 = 0;
    while (1)
    {
      v168 = __p;
      v169 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this
                                                                                 + 51));
      v265[0] = &off_1E5D3EA60;
      v265[1] = this;
      v266 = v265;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::loadMasterLmOrCreatePlaceholder(v168 + 24 * v167, v166 + 24 * v167, v169, (uint64_t)v265, __s1);
      v257[0] = (void *)(v259 + 24 * v167);
      v170 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 101, (const void **)v257[0], (uint64_t)&std::piecewise_construct, (__int128 **)v257);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v170 + 7), (__int128 *)__s1);
      v171 = (std::__shared_weak_count *)__s1[1];
      if (__s1[1])
      {
        v172 = (unint64_t *)((char *)__s1[1] + 8);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v174 = v266;
      if (v266 == v265)
        break;
      if (v266)
      {
        v175 = 5;
LABEL_260:
        (*(void (**)(void))(*v174 + 8 * v175))();
      }
      ++v167;
      v166 = v259;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v259 + 1) - v259) >> 3) <= v167)
        goto LABEL_262;
    }
    v174 = v265;
    v175 = 4;
    goto LABEL_260;
  }
LABEL_263:
  if (*((char *)this + 719) < 0)
    v176 = *((_QWORD *)this + 88);
  else
    v176 = *((unsigned __int8 *)this + 719);
  if (*((char *)this + 671) < 0)
    v177 = *((_QWORD *)this + 82);
  else
    v177 = *((unsigned __int8 *)this + 671);
  if ((v176 == 0) != (v177 == 0))
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"ClassNNLM doesn't have either tag or model provided.", 52);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
  }
  if ((*((_BYTE *)this + 719) & 0x80) == 0)
  {
    if (!*((_BYTE *)this + 719))
      goto LABEL_288;
LABEL_274:
    __p = 0uLL;
    v262 = 0;
    kaldi::SplitStringToVector((const std::string *)this + 29, ",", 1, (uint64_t)&__p);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3) >= 2)
    {
      v253 = 0u;
      v254 = 0u;
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      v241 = 0u;
      v242 = 0u;
      v240 = 0u;
      memset(__s1, 0, sizeof(__s1));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"classnnlm file list can only support one neural net ", 52);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__s1);
    }
    std::string::basic_string[abi:ne180100]<0>(__s1, "");
    v178 = (uint64_t *)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*((quasar::SpeechRequestData **)this + 51));
    v263[0] = &off_1E5D3EAB8;
    v263[1] = this;
    v264 = v263;
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder((uint64_t)this + 696, (uint64_t)__s1, v178, (uint64_t)v263, &v259);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 856, &v259);
    v179 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
    if (*((_QWORD *)&v259 + 1))
    {
      v180 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    v182 = v264;
    if (v264 == v263)
    {
      v183 = 4;
      v182 = v263;
    }
    else
    {
      if (!v264)
      {
LABEL_285:
        if (SHIBYTE(__s1[2]) < 0)
          operator delete(__s1[0]);
        __s1[0] = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
        goto LABEL_288;
      }
      v183 = 5;
    }
    (*(void (**)(void))(*v182 + 8 * v183))();
    goto LABEL_285;
  }
  if (*((_QWORD *)this + 88))
    goto LABEL_274;
LABEL_288:
  if (*((_BYTE *)this + 1688))
    quasar::OnlineTransducerGraphSearchDecoder::loadDynamicClassTagDict(this, v139);
  v184 = (_DWORD *)((char *)this + 880);
  v185 = (int *)((char *)this + 884);
  v186 = (int *)((char *)this + 888);
  v217 = (int *)((char *)this + 892);
  *((_OWORD *)this + 55) = 0u;
  v187 = 1;
  do
  {
    while (1)
    {
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), v218);
      std::string::basic_string[abi:ne180100]<0>(__s1, "/");
      if (quasar::startsWith((unsigned __int8 *)v218, (unsigned __int8 *)__s1))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "_S/");
        if (quasar::endsWith((uint64_t *)v218, (uint64_t *)&__p))
        {
          v188 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v259, "_B/");
          if (quasar::endsWith((uint64_t *)v218, (uint64_t *)&v259))
          {
            v188 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v257, "_I/");
            if (quasar::endsWith((uint64_t *)v218, (uint64_t *)v257))
            {
              v188 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v255, "_E/");
              v188 = quasar::endsWith((uint64_t *)v218, (uint64_t *)v255);
              if (v256 < 0)
                operator delete(v255[0]);
            }
            if (v258 < 0)
              operator delete(v257[0]);
          }
          if (SHIBYTE(v260) < 0)
            operator delete((void *)v259);
        }
        if (SHIBYTE(v262) < 0)
          operator delete((void *)__p);
      }
      else
      {
        v188 = 0;
      }
      if (SHIBYTE(__s1[2]) < 0)
      {
        operator delete(__s1[0]);
        if (v188)
        {
LABEL_309:
          v189 = (char *)this + 880;
          v190 = (char *)this + 884;
          if (!*v184)
            goto LABEL_310;
          goto LABEL_311;
        }
      }
      else if (v188)
      {
        goto LABEL_309;
      }
      std::string::basic_string[abi:ne180100]<0>(__s1, "/WORD-DIS-");
      if (quasar::startsWith((unsigned __int8 *)v218, (unsigned __int8 *)__s1))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "/");
        v192 = quasar::endsWith((uint64_t *)v218, (uint64_t *)&__p);
        if (SHIBYTE(v262) < 0)
          operator delete((void *)__p);
      }
      else
      {
        v192 = 0;
      }
      if (SHIBYTE(__s1[2]) < 0)
      {
        operator delete(__s1[0]);
        if (!v192)
          goto LABEL_322;
LABEL_319:
        v189 = (char *)this + 888;
        v190 = (char *)this + 892;
        if (!*v186)
LABEL_310:
          *(_DWORD *)v189 = v187;
LABEL_311:
        *(_DWORD *)v190 = v187++;
        v191 = 1;
        goto LABEL_323;
      }
      if (v192)
        goto LABEL_319;
LABEL_322:
      v191 = 0;
LABEL_323:
      if (v219 < 0)
        break;
      if ((v191 & 1) == 0)
        goto LABEL_327;
    }
    operator delete(v218[0]);
  }
  while ((v191 & 1) != 0);
LABEL_327:
  if (*v184 != 1 || *v185 < 1 || *v185 >= *v186 || *v186 > *v217 || *v217 != v187 - 1)
  {
    *(_QWORD *)v184 = 0;
    *((_QWORD *)this + 111) = 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    v253 = 0u;
    v254 = 0u;
    v251 = 0u;
    v252 = 0u;
    v249 = 0u;
    v250 = 0u;
    v247 = 0u;
    v248 = 0u;
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v241 = 0u;
    v242 = 0u;
    v240 = 0u;
    memset(__s1, 0, sizeof(__s1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"lmePhoneWordSymStart ", 21);
    v193 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)" lmePhoneWordSymEnd ", 20);
    v194 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)" lmeDisambigSymStart ", 21);
    v195 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)" lmeDisambigSymEnd ", 19);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__s1);
  }
  quasar::OnlineTransducerGraphSearchDecoder::findClassLmSymbols(this, (uint64_t)__s1);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign((uint64_t)this + 768, (uint64_t *)__s1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__s1);
  if (*((char *)this + 1199) < 0)
  {
    if (!*((_QWORD *)this + 148))
      goto LABEL_340;
    goto LABEL_339;
  }
  if (*((_BYTE *)this + 1199))
LABEL_339:
    *((_DWORD *)this + 366) = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)this + 1176);
LABEL_340:
  if (*((char *)this + 1223) < 0)
  {
    if (!*((_QWORD *)this + 151))
      goto LABEL_345;
    goto LABEL_344;
  }
  if (*((_BYTE *)this + 1223))
LABEL_344:
    *((_DWORD *)this + 367) = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)this + 1200);
LABEL_345:
  if (*((char *)this + 1175) < 0)
  {
    if (!*((_QWORD *)this + 145))
      goto LABEL_356;
  }
  else if (!*((_BYTE *)this + 1175))
  {
    goto LABEL_356;
  }
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__s1);
  Text = fst::SymbolTable::ReadText((uint64_t)this + 1152);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(&__p, (uint64_t)Text);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1448, &__p);
  v197 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v198 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  if (SHIBYTE(__s1[3]) < 0)
    operator delete(__s1[1]);
LABEL_356:
  if (*((char *)this + 2151) < 0)
  {
    if (!*((_QWORD *)this + 267))
      goto LABEL_365;
  }
  else if (!*((_BYTE *)this + 2151))
  {
    goto LABEL_365;
  }
  std::allocate_shared[abi:ne180100]<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,std::string &,void>((std::string *)((char *)this + 2128), __s1);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 2176, (__int128 *)__s1);
  v200 = (std::__shared_weak_count *)__s1[1];
  if (__s1[1])
  {
    v201 = (unint64_t *)((char *)__s1[1] + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
LABEL_365:
  if (*((char *)this + 2175) < 0)
  {
    if (!*((_QWORD *)this + 270))
      goto LABEL_374;
  }
  else if (!*((_BYTE *)this + 2175))
  {
    goto LABEL_374;
  }
  std::allocate_shared[abi:ne180100]<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,std::string &,void>((std::string *)((char *)this + 2152), __s1);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 2192, (__int128 *)__s1);
  v203 = (std::__shared_weak_count *)__s1[1];
  if (__s1[1])
  {
    v204 = (unint64_t *)((char *)__s1[1] + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
LABEL_374:
  __s1[0] = &v220;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  if (v221)
  {
    v222 = (char *)v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = (char *)v224;
    operator delete(v224);
  }
  __s1[0] = &v227;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  v206 = v273;
  if (v273 == &v271)
  {
    v207 = 4;
    v206 = &v271;
LABEL_382:
    (*(void (**)(void))(*(_QWORD *)v206 + 8 * v207))();
  }
  else if (v273)
  {
    v207 = 5;
    goto LABEL_382;
  }
  __s1[0] = &v231;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  v208 = v237;
  if (v237)
  {
    v209 = (unint64_t *)&v237->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
}

void sub_1ADE85198()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  v1 = *(_QWORD **)(v0 - 176);
  if (v1 == (_QWORD *)(v0 - 200))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 200);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  if (SLOBYTE(STACK[0x247]) < 0)
    JUMPOUT(0x1ADE85398);
  JUMPOUT(0x1ADE8539CLL);
}

void sub_1ADE851AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  v1 = *(_QWORD **)(v0 - 144);
  if (v1 == (_QWORD *)(v0 - 168))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 168);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  JUMPOUT(0x1ADE853ACLL);
}

void sub_1ADE851C4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADE853F4);
}

void sub_1ADE851E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v36 = *(_QWORD **)(v35 - 208);
  if (v36 == (_QWORD *)(v35 - 232))
  {
    v37 = 4;
    v36 = (_QWORD *)(v35 - 232);
  }
  else
  {
    if (!v36)
    {
LABEL_6:
      a35 = (void **)&STACK[0x210];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a35);
      a35 = (void **)&STACK[0x230];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a35);
      JUMPOUT(0x1ADE8536CLL);
    }
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
  goto LABEL_6;
}

void sub_1ADE85274()
{
  JUMPOUT(0x1ADE852B0);
}

void sub_1ADE852C0()
{
  JUMPOUT(0x1ADE85370);
}

void sub_1ADE852CC()
{
  JUMPOUT(0x1ADE853ACLL);
}

void sub_1ADE85310(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  JUMPOUT(0x1ADE8536CLL);
}

void sub_1ADE85368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  STACK[0x230] = (unint64_t)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  STACK[0x230] = (unint64_t)&a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  v33 = *(_QWORD **)(v31 - 112);
  if (v33 == (_QWORD *)(v31 - 136))
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 136);
  }
  else
  {
    if (!v33)
      goto LABEL_10;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_10:
  *(_QWORD *)(v31 - 136) = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::loadDynamicClassTagDict(quasar::OnlineTransducerGraphSearchDecoder *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  uint64_t v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  size_t v16;
  std::string *p_p;
  const void *v18;
  const void **v19;
  size_t v20;
  void *v21;
  const void *v22;
  int v23;
  std::locale::__imp *locale;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  std::locale::__imp *v31;
  int v32;
  uint64_t v33;
  int v34;
  std::locale::__imp *v35;
  std::string::size_type size;
  std::string *v37;
  uint64_t v38;
  int v39;
  int v40;
  std::locale::__imp *v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string *v66;
  std::string::size_type v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unsigned __int8 v79;
  int v80;
  int v81;
  std::string __p;
  std::locale v83[2];
  __int128 v84;
  void *v85[4];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99[8];
  _BYTE v100[32];
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[32];
  int v109;
  _BYTE v110[32];
  int v111;
  __int128 __s;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v129 = *MEMORY[0x1E0C80C00];
  memset(v110, 0, sizeof(v110));
  v111 = 1065353216;
  memset(v108, 0, sizeof(v108));
  v109 = 1065353216;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  kaldi::SplitStringToVector((const std::string *)(v2 + 1696), ",", 1, (uint64_t)&v105);
  kaldi::SplitStringToVector((const std::string *)(v2 + 1720), ",", 1, (uint64_t)&v102);
  memset(v100, 0, sizeof(v100));
  v101 = 1065353216;
  if ((*(char *)(v2 + 1767) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v2 + 1767))
      goto LABEL_3;
LABEL_106:
    v127 = 0uLL;
    v128 = 0uLL;
    v125 = 0uLL;
    v126 = 0uLL;
    v123 = 0uLL;
    v124 = 0uLL;
    v121 = 0uLL;
    v122 = 0uLL;
    v119 = 0uLL;
    v120 = 0uLL;
    v117 = 0uLL;
    v118 = 0uLL;
    v115 = 0uLL;
    v116 = 0uLL;
    v113 = 0uLL;
    v114 = 0uLL;
    __s = 0uLL;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"The dyanamic classlm tag prior file name is empty", 49);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
  }
  if (!*(_QWORD *)(v2 + 1752))
    goto LABEL_106;
LABEL_3:
  kaldi::Input::Input(v99, v2 + 1744, 0);
  v3 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v99);
  v4 = *(_QWORD *)(*v3 - 24);
  if (*(_DWORD *)((char *)v3 + v4 + 32))
  {
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    __s = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__s);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"SymbolTable::ReadText: Can't open dyanamic classlm tag file ", 60);
    v74 = *(char *)(v2 + 1767);
    if (v74 >= 0)
      v75 = v2 + 1744;
    else
      v75 = *(_QWORD *)(v2 + 1744);
    if (v74 >= 0)
      v76 = *(unsigned __int8 *)(v2 + 1767);
    else
      v76 = *(_QWORD *)(v2 + 1752);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, v76);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__s);
  }
  v5 = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  v6 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 24);
  v7 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v3 + v4));
    v8 = std::locale::use_facet(v83, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v83);
    v9 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&__s);
    std::istringstream::basic_istringstream[abi:ne180100](v83, &__p, 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v83, (uint64_t)&__p);
    v10 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 1432), (uint64_t)&__p);
    v81 = 0;
    MEMORY[0x1AF44CB0C](v83, &v81);
    v11 = v81;
    v80 = v10;
    v77 = &v80;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v100, &v80, (uint64_t)&std::piecewise_construct, (_DWORD **)&v77)+ 5) = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v83[0].__locale_ = v5;
    *(std::locale::__imp **)((char *)&v83[0].__locale_ + *((_QWORD *)v5 - 3)) = v6;
    *(_QWORD *)&v84 = v7;
    if (SBYTE7(v88) < 0)
      operator delete((void *)v87);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1AF44D094]((char *)&v89 + 8);
    v4 = *(_QWORD *)(*v3 - 24);
  }
  if (v106 != v105)
  {
    v12 = 0;
    if ((unint64_t)((v106 - v105) / 24) <= 1)
      v13 = 1;
    else
      v13 = (v106 - v105) / 24;
    do
    {
      v14 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 1432), v105 + 24 * v12);
      if (v14 == -1)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v86 = 0u;
        v84 = 0u;
        memset(v85, 0, sizeof(v85));
        *(_OWORD *)&v83[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Could not find \"", 16);
        v60 = v105 + 24 * v12;
        v61 = *(char *)(v60 + 23);
        if (v61 >= 0)
          v62 = v105 + 24 * v12;
        else
          v62 = *(_QWORD *)v60;
        if (v61 >= 0)
          v63 = *(unsigned __int8 *)(v60 + 23);
        else
          v63 = *(_QWORD *)(v60 + 8);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v62, v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v83);
      }
      v15 = (const void **)(v105 + 24 * v12);
      if (*((char *)v15 + 23) >= 0)
        v16 = *((unsigned __int8 *)v15 + 23);
      else
        v16 = (size_t)v15[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v16 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if (*((char *)v15 + 23) >= 0)
          v18 = v15;
        else
          v18 = *v15;
        memmove(p_p, v18, v16);
      }
      strcpy((char *)p_p + v16, "-start");
      v19 = (const void **)(v105 + 24 * v12);
      if (*((char *)v19 + 23) >= 0)
        v20 = *((unsigned __int8 *)v19 + 23);
      else
        v20 = (size_t)v19[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v77, v20 + 4);
      if ((v79 & 0x80u) == 0)
        v21 = &v77;
      else
        v21 = v77;
      if (v20)
      {
        if (*((char *)v19 + 23) >= 0)
          v22 = v19;
        else
          v22 = *v19;
        memmove(v21, v22, v20);
      }
      strcpy((char *)v21 + v20, "-end");
      v23 = v14 + 1;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 1432), v83);
      if ((SBYTE7(v84) & 0x80u) == 0)
        locale = (std::locale::__imp *)BYTE7(v84);
      else
        locale = v83[1].__locale_;
      v25 = v79;
      if ((v79 & 0x80u) != 0)
        v25 = v78;
      if (locale == (std::locale::__imp *)v25)
      {
        if ((v79 & 0x80u) == 0)
          v26 = (unsigned __int8 *)&v77;
        else
          v26 = (unsigned __int8 *)v77;
        if ((BYTE7(v84) & 0x80) != 0)
        {
          v31 = v83[0].__locale_;
          v32 = memcmp(v83[0].__locale_, v26, (size_t)v83[1].__locale_);
          operator delete(v31);
          if (!v32)
            goto LABEL_63;
        }
        else
        {
          if (!BYTE7(v84))
            goto LABEL_63;
          v27 = 0;
          do
          {
            v28 = *((unsigned __int8 *)&v83[0].__locale_ + v27);
            v29 = v26[v27];
          }
          while (v28 == v29 && BYTE7(v84) - 1 != v27++);
          if (v28 == v29)
            goto LABEL_63;
        }
      }
      else if ((BYTE7(v84) & 0x80) != 0)
      {
        operator delete(v83[0].__locale_);
      }
      v33 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 1432), (uint64_t)&v77);
      v23 = v33;
      if (v33 == -1)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v86 = 0u;
        v84 = 0u;
        memset(v85, 0, sizeof(v85));
        *(_OWORD *)&v83[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Could not find \"", 16);
        if ((v79 & 0x80u) == 0)
          v70 = &v77;
        else
          v70 = v77;
        if ((v79 & 0x80u) == 0)
          v71 = v79;
        else
          v71 = v78;
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v83);
      }
LABEL_63:
      v34 = v14 + 2;
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)(v2 + 1432), v83);
      if ((SBYTE7(v84) & 0x80u) == 0)
        v35 = (std::locale::__imp *)BYTE7(v84);
      else
        v35 = v83[1].__locale_;
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v35 != (std::locale::__imp *)size)
      {
        if ((BYTE7(v84) & 0x80) != 0)
          operator delete(v83[0].__locale_);
LABEL_85:
        v44 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 1432), (uint64_t)&__p);
        v34 = v44;
        if (v44 == -1)
        {
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v86 = 0u;
          v84 = 0u;
          memset(v85, 0, sizeof(v85));
          *(_OWORD *)&v83[0].__locale_ = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
          v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Could not find \"", 16);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &__p;
          else
            v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v67 = __p.__r_.__value_.__l.__size_;
          v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v83);
        }
        goto LABEL_86;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((BYTE7(v84) & 0x80) != 0)
      {
        v42 = v83[0].__locale_;
        v43 = memcmp(v83[0].__locale_, v37, (size_t)v83[1].__locale_);
        operator delete(v42);
        if (v43)
          goto LABEL_85;
      }
      else if (BYTE7(v84))
      {
        v38 = 0;
        do
        {
          v39 = *((unsigned __int8 *)&v83[0].__locale_ + v38);
          v40 = v37->__r_.__value_.__s.__data_[v38];
        }
        while (v39 == v40 && BYTE7(v84) - 1 != v38++);
        if (v39 != v40)
          goto LABEL_85;
      }
LABEL_86:
      v81 = v14;
      v83[0].__locale_ = (std::locale::__imp *)&v81;
      v45 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v110, &v81, (uint64_t)&std::piecewise_construct, v83);
      *((_DWORD *)v45 + 5) = v34;
      *((_DWORD *)v45 + 6) = v23;
      if ((char)v79 < 0)
        operator delete(v77);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (v12 != v13);
  }
  if (v103 != v102)
  {
    v46 = 0;
    if ((unint64_t)((v103 - v102) / 24) <= 1)
      v47 = 1;
    else
      v47 = (v103 - v102) / 24;
    do
    {
      v48 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v2 + 1432), v102 + v46);
      if (v48 == -1)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v86 = 0u;
        v84 = 0u;
        memset(v85, 0, sizeof(v85));
        *(_OWORD *)&v83[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Could not find \"", 16);
        v55 = *(char *)(v105 + v46 + 23);
        if (v55 >= 0)
          v56 = v105 + v46;
        else
          v56 = *(_QWORD *)(v105 + v46);
        if (v55 >= 0)
          v57 = *(unsigned __int8 *)(v105 + v46 + 23);
        else
          v57 = *(_QWORD *)(v105 + v46 + 8);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v83);
      }
      LODWORD(v83[0].__locale_) = v48;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v108, (int *)v83, v83);
      v46 += 24;
      --v47;
    }
    while (v47);
  }
  kaldi::quasar::DynamicClassTagDict::DynamicClassTagDict((uint64_t)v83, (uint64_t)v110, (uint64_t)v100, (uint64_t)v108);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(v2 + 1768, (uint64_t *)v83);
  v49 = *(void **)(v2 + 1808);
  if (v49)
  {
    *(_QWORD *)(v2 + 1816) = v49;
    operator delete(v49);
    *(_QWORD *)(v2 + 1808) = 0;
    *(_QWORD *)(v2 + 1816) = 0;
    *(_QWORD *)(v2 + 1824) = 0;
  }
  *(_OWORD *)(v2 + 1808) = *(_OWORD *)&v85[1];
  *(void **)(v2 + 1824) = v85[3];
  memset(&v85[1], 0, 24);
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(v2 + 1832, (uint64_t *)&v86);
  v50 = *((_QWORD *)&v88 + 1);
  *((_QWORD *)&v88 + 1) = 0;
  v51 = *(_QWORD *)(v2 + 1872);
  *(_QWORD *)(v2 + 1872) = v50;
  if (v51)
  {
    MEMORY[0x1AF44D160](v51, 0x1000C8052888210);
    v52 = *((_QWORD *)&v88 + 1);
    *((_QWORD *)&v88 + 1) = 0;
    if (v52)
      MEMORY[0x1AF44D160](v52, 0x1000C8052888210);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v86);
  if (v85[1])
  {
    v85[2] = v85[1];
    operator delete(v85[1]);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v83);
  kaldi::Input::~Input((kaldi::Input *)v99);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v100);
  *(_QWORD *)&__s = &v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  *(_QWORD *)&__s = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v108);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v110);
}

void sub_1ADE85ECC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  JUMPOUT(0x1ADE85F58);
}

void sub_1ADE85EEC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADE85F98);
}

void sub_1ADE85F00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a20);
  JUMPOUT(0x1ADE85F58);
}

void sub_1ADE85F44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale(&a17);
  JUMPOUT(0x1ADE85F58);
}

void sub_1ADE85F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,int a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  char a66;
  char a72;

  kaldi::Input::~Input((kaldi::Input *)&a52);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a54);
  STACK[0x220] = (unint64_t)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a66);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::findClassLmSymbols(quasar::OnlineTransducerGraphSearchDecoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  __int128 *v6;
  __int128 v7;
  float v8;
  std::string::size_type size;
  void *v10;
  std::string *v11;
  std::string::size_type v12;
  void *v13;
  std::string *v14;
  int v15;
  void *v16;
  void *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v23;
  int v24;
  int v25;
  void *v26;
  void *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  void *v43;
  unint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  void *v51;
  int v52;
  uint64_t v53;
  int v54;
  char *v55;
  void *v56;
  unint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  void *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  std::string::size_type v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  int v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  int v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  std::string v104;
  void *__p[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _DWORD *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128[3];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  kaldi::SplitStringToVector((const std::string *)this + 27, ",", 1, (uint64_t)&v125);
  kaldi::SplitStringToFloats<float>((uint64_t)this + 672, ",", 1, &v122);
  if (v123 == (_BYTE *)v122)
  {
    v3 = v125;
    v4 = v126;
  }
  else
  {
    v3 = v125;
    v4 = v126;
    if (0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) != (v123 - (_BYTE *)v122) >> 2)
    {
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not match classLM scale number", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  if (v4 != v3)
  {
    for (i = 0; 0xAAAAAAAAAAAAAAABLL * ((v126 - v125) >> 3) > i; ++i)
    {
      v6 = (__int128 *)(v3 + 24 * i);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v7;
      }
      v103 = 0;
      v103 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)&v104);
      if (v123 == (_BYTE *)v122)
        v8 = 1.0;
      else
        v8 = *(float *)&v122[i];
      v100 = &v103;
      *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 104, &v103, (uint64_t)&std::piecewise_construct, (unsigned int **)&v100)+ 8) = v8;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        size = v104.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v100, size + 6);
      if (v102 >= 0)
        v10 = &v100;
      else
        v10 = v100;
      if (size)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v104;
        else
          v11 = (std::string *)v104.__r_.__value_.__r.__words[0];
        memmove(v10, v11, size);
      }
      strcpy((char *)v10 + size, "-start");
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        v12 = v104.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v97, v12 + 4);
      if (v99 >= 0)
        v13 = &v97;
      else
        v13 = v97;
      if (v12)
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v104;
        else
          v14 = (std::string *)v104.__r_.__value_.__r.__words[0];
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "-end");
      v15 = v103 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      if ((SBYTE7(v106) & 0x80u) == 0)
        v16 = (void *)BYTE7(v106);
      else
        v16 = __p[1];
      v17 = (void *)HIBYTE(v99);
      if (v99 < 0)
        v17 = (void *)v98;
      if (v16 == v17)
      {
        if (v99 >= 0)
          v18 = (unsigned __int8 *)&v97;
        else
          v18 = (unsigned __int8 *)v97;
        if ((BYTE7(v106) & 0x80) != 0)
        {
          v23 = __p[0];
          v24 = memcmp(__p[0], v18, (size_t)__p[1]);
          operator delete(v23);
          if (!v24)
            goto LABEL_58;
        }
        else
        {
          if (!BYTE7(v106))
            goto LABEL_58;
          v19 = 0;
          do
          {
            v20 = *((unsigned __int8 *)__p + v19);
            v21 = v18[v19];
          }
          while (v20 == v21 && BYTE7(v106) - 1 != v19++);
          if (v20 == v21)
            goto LABEL_58;
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      v15 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)&v97);
      if (v15 == -1)
      {
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        if (v99 >= 0)
          v69 = &v97;
        else
          v69 = v97;
        if (v99 >= 0)
          v70 = HIBYTE(v99);
        else
          v70 = v98;
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_58:
      v25 = v103 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      if ((SBYTE7(v106) & 0x80u) == 0)
        v26 = (void *)BYTE7(v106);
      else
        v26 = __p[1];
      v27 = (void *)HIBYTE(v102);
      if (v102 < 0)
        v27 = (void *)v101;
      if (v26 != v27)
      {
        if ((BYTE7(v106) & 0x80) != 0)
          operator delete(__p[0]);
LABEL_80:
        v25 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)&v100);
        if (v25 == -1)
        {
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          if (v102 >= 0)
            v73 = &v100;
          else
            v73 = v100;
          if (v102 >= 0)
            v74 = HIBYTE(v102);
          else
            v74 = v101;
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_81;
      }
      if (v102 >= 0)
        v28 = (unsigned __int8 *)&v100;
      else
        v28 = (unsigned __int8 *)v100;
      if ((BYTE7(v106) & 0x80) != 0)
      {
        v33 = __p[0];
        v34 = memcmp(__p[0], v28, (size_t)__p[1]);
        operator delete(v33);
        if (v34)
          goto LABEL_80;
      }
      else if (BYTE7(v106))
      {
        v29 = 0;
        do
        {
          v30 = *((unsigned __int8 *)__p + v29);
          v31 = v28[v29];
        }
        while (v30 == v31 && BYTE7(v106) - 1 != v29++);
        if (v30 != v31)
          goto LABEL_80;
      }
LABEL_81:
      v128[0] = &v103;
      v35 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, &v103, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v35 + 5) = v25;
      *((_DWORD *)v35 + 6) = v15;
      if (SHIBYTE(v99) < 0)
        operator delete(v97);
      if (SHIBYTE(v102) < 0)
        operator delete(v100);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      v3 = v125;
    }
  }
  if (*((char *)this + 647) < 0)
  {
    if (!*((_QWORD *)this + 79))
      goto LABEL_155;
  }
  else if (!*((_BYTE *)this + 647))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 743) < 0)
  {
    if (!*((_QWORD *)this + 91))
      goto LABEL_155;
  }
  else if (!*((_BYTE *)this + 743))
  {
    goto LABEL_155;
  }
  if (*((char *)this + 767) < 0)
  {
    if (!*((_QWORD *)this + 94))
      goto LABEL_155;
    goto LABEL_100;
  }
  if (*((_BYTE *)this + 767))
  {
LABEL_100:
    memset(&v104, 0, sizeof(v104));
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    kaldi::SplitStringToVector((const std::string *)this + 26, ",", 1, (uint64_t)&v104);
    kaldi::SplitStringToVector((const std::string *)this + 30, ",", 1, (uint64_t)&v100);
    kaldi::SplitStringToVector((const std::string *)this + 31, ",", 1, (uint64_t)&v97);
    v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v101 - (uint64_t)v100) >> 3) != v36
      || 0xAAAAAAAAAAAAAAABLL * ((v98 - (uint64_t)v97) >> 3) != v36)
    {
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v114 = 0u;
      v115 = 0u;
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)" Expected number of classLM symbols for base/start/end match: ", 62);
      v94 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" ", 1);
      v95 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (v104.__r_.__value_.__l.__size_ == v104.__r_.__value_.__r.__words[0])
    {
LABEL_154:
      __p[0] = &v97;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v100;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_155;
    }
    v37 = 0;
    if (v36 <= 1)
      v38 = 1;
    else
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104.__r_.__value_.__l.__size_ - v104.__r_.__value_.__r.__words[0]) >> 3);
    while (1)
    {
      v39 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), v104.__r_.__value_.__r.__words[0] + 24 * v37);
      v40 = v39;
      if (v39 == -1)
      {
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        v77 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        v78 = *(char *)(v77 + 23);
        if (v78 >= 0)
          v79 = v104.__r_.__value_.__r.__words[0] + 24 * v37;
        else
          v79 = *(_QWORD *)v77;
        if (v78 >= 0)
          v80 = *(unsigned __int8 *)(v77 + 23);
        else
          v80 = *(_QWORD *)(v77 + 8);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v79, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v41 = v39 + 1;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      v42 = (char *)v97 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0)
        v43 = (void *)BYTE7(v106);
      else
        v43 = __p[1];
      v44 = v42[23];
      v45 = (char)v44;
      if ((v44 & 0x80u) != 0)
        v44 = *((_QWORD *)v42 + 1);
      if (v43 == (void *)v44)
      {
        if (v45 >= 0)
          v46 = (char *)v97 + 24 * v37;
        else
          v46 = *(char **)v42;
        if ((BYTE7(v106) & 0x80) != 0)
        {
          v51 = __p[0];
          v52 = memcmp(__p[0], v46, (size_t)__p[1]);
          operator delete(v51);
          if (!v52)
            goto LABEL_130;
        }
        else
        {
          if (!BYTE7(v106))
            goto LABEL_130;
          v47 = 0;
          do
          {
            v48 = *((unsigned __int8 *)__p + v47);
            v49 = v46[v47];
          }
          while (v48 == v49 && BYTE7(v106) - 1 != v47++);
          if (v48 == v49)
            goto LABEL_130;
        }
      }
      else if ((BYTE7(v106) & 0x80) != 0)
      {
        operator delete(__p[0]);
      }
      v53 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)v97 + 24 * v37);
      v41 = v53;
      if (v53 == -1)
      {
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v112 = 0u;
        v113 = 0u;
        v110 = 0u;
        v111 = 0u;
        v108 = 0u;
        v109 = 0u;
        v106 = 0u;
        v107 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
        v83 = (char *)v97 + 24 * v37;
        v84 = v83[23];
        if (v84 >= 0)
          v85 = (char *)v97 + 24 * v37;
        else
          v85 = *(char **)v83;
        if (v84 >= 0)
          v86 = v83[23];
        else
          v86 = *((_QWORD *)v83 + 1);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v85, v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\" in base symbol table", 22);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_130:
      v54 = v40 + 2;
      quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 179), __p);
      v55 = (char *)v100 + 24 * v37;
      if ((SBYTE7(v106) & 0x80u) == 0)
        v56 = (void *)BYTE7(v106);
      else
        v56 = __p[1];
      v57 = v55[23];
      v58 = (char)v57;
      if ((v57 & 0x80u) != 0)
        v57 = *((_QWORD *)v55 + 1);
      if (v56 != (void *)v57)
      {
        if ((BYTE7(v106) & 0x80) != 0)
          operator delete(__p[0]);
LABEL_152:
        v66 = quasar::QsrTextSymbolTable::Find(*((_QWORD *)this + 179), (uint64_t)v100 + 24 * v37);
        v54 = v66;
        if (v66 == -1)
        {
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find \"", 16);
          v89 = (char *)v100 + 24 * v37;
          v90 = v89[23];
          if (v90 >= 0)
            v91 = (char *)v100 + 24 * v37;
          else
            v91 = *(char **)v89;
          if (v90 >= 0)
            v92 = v89[23];
          else
            v92 = *((_QWORD *)v89 + 1);
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v91, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\" in base symbol table", 22);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        goto LABEL_153;
      }
      if (v58 >= 0)
        v59 = (char *)v100 + 24 * v37;
      else
        v59 = *(char **)v55;
      if ((BYTE7(v106) & 0x80) != 0)
      {
        v64 = __p[0];
        v65 = memcmp(__p[0], v59, (size_t)__p[1]);
        operator delete(v64);
        if (v65)
          goto LABEL_152;
      }
      else if (BYTE7(v106))
      {
        v60 = 0;
        do
        {
          v61 = *((unsigned __int8 *)__p + v60);
          v62 = v59[v60];
        }
        while (v61 == v62 && BYTE7(v106) - 1 != v60++);
        if (v61 != v62)
          goto LABEL_152;
      }
LABEL_153:
      LODWORD(__p[0]) = v40;
      v128[0] = __p;
      v67 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a2, (int *)__p, (uint64_t)&std::piecewise_construct, v128);
      *((_DWORD *)v67 + 5) = v54;
      *((_DWORD *)v67 + 6) = v41;
      if (++v37 == v38)
        goto LABEL_154;
    }
  }
LABEL_155:
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  __p[0] = &v125;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADE86BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v30;
  uint64_t v31;
  void **v32;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  v30 = *(void **)(v28 - 176);
  if (v30)
  {
    *(_QWORD *)(v28 - 168) = v30;
    operator delete(v30);
  }
  v32 = (void **)(v28 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v31);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::writeRecordedStateAccessForFst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  if (v4)
  {
    if (*(_QWORD *)a2)
    {
      if (v8)
      {
        v9 = v8;
        v10 = *(std::__shared_weak_count **)(a2 + 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (quasar::gLogLevel >= 4)
        {
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v24 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Write accessed states for ", 26);
          v14 = *(char *)(a3 + 23);
          if (v14 >= 0)
            v15 = a3;
          else
            v15 = *(_QWORD *)a3;
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(a3 + 23);
          else
            v16 = *(_QWORD *)(a3 + 8);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" to ", 4);
          v19 = *(char *)(a4 + 23);
          if (v19 >= 0)
            v20 = a4;
          else
            v20 = *(_QWORD *)a4;
          if (v19 >= 0)
            v21 = *(unsigned __int8 *)(a4 + 23);
          else
            v21 = *(_QWORD *)(a4 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v24);
        }
        std::ofstream::basic_ofstream(&v24);
        quasar::StateAccessRecordingFst::WriteRecordedStateAccesses(v9);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24)), *(_DWORD *)((char *)&v26 + *(_QWORD *)(v24 - 24)) | 4);
        *(_QWORD *)&v24 = *MEMORY[0x1E0DE4F48];
        *(_QWORD *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
        MEMORY[0x1AF44CA70]((char *)&v24 + 8);
        std::ostream::~ostream();
        MEMORY[0x1AF44D094](v41);
        if (v10)
        {
          v22 = (unint64_t *)&v10->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
    }
  }
  else if (quasar::gLogLevel >= 5)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"FST File empty", 14);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v24);
  }
}

void sub_1ADE86EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::writeRecordedStateAccesses(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *p_str;
  char *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *v14;
  pid_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  void *v29;
  unsigned __int8 v30;
  _BOOL8 v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  __int128 *v47;
  __int128 *v48;
  BOOL v49;
  _QWORD v50[2];
  std::runtime_error v51;
  _BYTE v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  std::string v68;
  std::string v69;
  void *v70;
  _BYTE v71[15];
  unsigned __int8 v72;
  void *v73;
  std::__shared_weak_count *v74;
  std::string __str;
  const void *v76;
  std::__shared_weak_count *v77;
  _QWORD v78[5];

  v78[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 2124) || *(_BYTE *)(a1 + 440))
  {
    v3 = *(__int128 **)(a1 + 1976);
    v4 = (__int128 *)(a1 + 1984);
    if (v3 != (__int128 *)(a1 + 1984))
    {
      while (1)
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__str, v3 + 2);
        if (v76)
        {
          if (v5)
            break;
        }
LABEL_85:
        v44 = v77;
        if (v77)
        {
          p_shared_owners = (unint64_t *)&v77->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v47 = (__int128 *)*((_QWORD *)v3 + 1);
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = *(__int128 **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (__int128 *)*((_QWORD *)v3 + 2);
            v49 = *(_QWORD *)v48 == (_QWORD)v3;
            v3 = v48;
          }
          while (!v49);
        }
        v3 = v48;
        if (v48 == v4)
          return;
      }
      v73 = v5;
      v74 = v77;
      if (v77)
      {
        v6 = (unint64_t *)&v77->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      std::string::basic_string[abi:ne180100]<0>(&v70, "");
      if (*(char *)(a2 + 23) < 0)
      {
        if (*(_QWORD *)(a2 + 8))
        {
LABEL_11:
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __str.__r_.__value_.__l.__size_;
          else
            p_str = &__str;
          v10 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
          while (size)
          {
            v11 = v10[size--];
            if (v11 == 47)
              goto LABEL_45;
          }
          size = -1;
LABEL_45:
          std::string::basic_string((std::string *)v52, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v69);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, (uint64_t)&v68);
          if (v52[23] >= 0)
            v24 = v52;
          else
            v24 = *(const std::string::value_type **)v52;
          if (v52[23] >= 0)
            v25 = v52[23];
          else
            v25 = *(_QWORD *)&v52[8];
          v26 = std::string::append(&v68, v24, v25);
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v69.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          v28 = std::string::append(&v69, ".recorded_state_accesses");
          v29 = (void *)v28->__r_.__value_.__r.__words[0];
          v78[0] = v28->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v78 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
          v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if ((char)v72 < 0)
            operator delete(v70);
          v70 = v29;
          *(_QWORD *)v71 = v78[0];
          *(_QWORD *)&v71[7] = *(_QWORD *)((char *)v78 + 7);
          v72 = v30;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
          if ((v52[23] & 0x80000000) == 0)
            goto LABEL_60;
          v23 = *(void **)v52;
          goto LABEL_59;
        }
      }
      else if (*(_BYTE *)(a2 + 23))
      {
        goto LABEL_11;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v12 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v69, v12 + 1);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v69;
      else
        v13 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &__str;
        else
          v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v13, v14, v12);
      }
      *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 46;
      v15 = getpid();
      std::to_string(&v68, v15);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v68;
      else
        v16 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v17 = v68.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v69, (const std::string::value_type *)v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *(_QWORD *)&v52[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)v52 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append((std::string *)v52, ".recorded_state_accesses");
      v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v78[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v78 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if ((char)v72 < 0)
        operator delete(v70);
      v70 = v21;
      *(_QWORD *)v71 = v78[0];
      *(_QWORD *)&v71[7] = *(_QWORD *)((char *)v78 + 7);
      v72 = v22;
      if ((v52[23] & 0x80000000) != 0)
        operator delete(*(void **)v52);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
      v23 = (void *)v69.__r_.__value_.__r.__words[0];
LABEL_59:
      operator delete(v23);
LABEL_60:
      v31 = quasar::filesystem::exists((char *)&v70);
      if (v31)
      {
        if (quasar::gLogLevel >= 1)
        {
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v53 = 0u;
          memset(v52, 0, sizeof(v52));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"State access file [", 19);
          if ((v72 & 0x80u) == 0)
            v33 = &v70;
          else
            v33 = (void **)v70;
          if ((v72 & 0x80u) == 0)
            v34 = v72;
          else
            v34 = *(_QWORD *)v71;
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] exists", 8);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v52);
        }
        std::runtime_error::runtime_error(&v51, "State access file exists - not overwriting");
        std::runtime_error::~runtime_error(&v51);
      }
      v36 = v77;
      v50[0] = v76;
      v50[1] = v77;
      if (v77)
      {
        v37 = (unint64_t *)&v77->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      quasar::OnlineTransducerGraphSearchDecoder::writeRecordedStateAccessForFst(v31, (uint64_t)v50, (uint64_t)&__str, (uint64_t)&v70);
      if (v36)
      {
        v39 = (unint64_t *)&v36->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if ((char)v72 < 0)
        operator delete(v70);
      v41 = v74;
      if (v74)
      {
        v42 = (unint64_t *)&v74->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      goto LABEL_85;
    }
  }
}

void sub_1ADE8747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v18 - 225) < 0)
    operator delete(*(void **)(v18 - 248));
  if (*(char *)(v18 - 201) < 0)
    operator delete(*(void **)(v18 - 224));
  if (*(char *)(v18 - 177) < 0)
    operator delete(*(void **)(v18 - 200));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18 - 176);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair(v18 - 160);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::resetAccessedStatesCounts(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  __int128 *v1;
  char *v2;
  quasar::StateAccessRecordingFst *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  BOOL v14;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v17;

  if (*((_BYTE *)this + 2124) || *((_BYTE *)this + 440))
  {
    v1 = (__int128 *)*((_QWORD *)this + 247);
    v2 = (char *)this + 1984;
    if (v1 != (__int128 *)((char *)this + 1984))
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<quasar::PMRegexEnumerator>>::pair[abi:ne180100](&__p, v1 + 2);
        if (lpsrc)
        {
          if (v3)
          {
            v4 = v17;
            if (v17)
            {
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v6 = __ldxr(p_shared_owners);
              while (__stxr(v6 + 1, p_shared_owners));
            }
            quasar::StateAccessRecordingFst::ResetAccessedStatesCounts(v3);
            if (v4)
            {
              v7 = (unint64_t *)&v4->__shared_owners_;
              do
                v8 = __ldaxr(v7);
              while (__stlxr(v8 - 1, v7));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
            }
          }
        }
        v9 = v17;
        if (v17)
        {
          v10 = (unint64_t *)&v17->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (__int128 *)*((_QWORD *)v1 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(__int128 **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (__int128 *)*((_QWORD *)v1 + 2);
            v14 = *(_QWORD *)v13 == (_QWORD)v1;
            v1 = v13;
          }
          while (!v14);
        }
        v1 = v13;
      }
      while (v13 != (__int128 *)v2);
    }
  }
}

void sub_1ADE876E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4, uint64_t a5)
{
  kaldi::quasar::CEAcousticEncoderNet *v10;
  kaldi::quasar::CEAcousticEncoderNet *v11;
  unint64_t *v12;
  unint64_t v13;
  kaldi::quasar::CEAcousticEncoderNet *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  const std::string::value_type *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  __int128 v37[2];
  kaldi::quasar::CEAcousticEncoderNet *v38[80];

  quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding((quasar::OnlineTransducerGraphSearchDecoder *)a1);
  quasar::OnlineTransducerGraphSearchDecoder::setUpDecoding(a1, a2, a3, a4);
  v10 = *(kaldi::quasar::CEAcousticEncoderNet **)a2;
  v11 = *(kaldi::quasar::CEAcousticEncoderNet **)(a2 + 8);
  v38[78] = *(kaldi::quasar::CEAcousticEncoderNet **)a2;
  v38[79] = v11;
  if (v11)
  {
    v12 = (unint64_t *)((char *)v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v10 = *(kaldi::quasar::CEAcousticEncoderNet **)a2;
  }
  v14 = *(kaldi::quasar::CEAcousticEncoderNet **)(a1 + 1224);
  v15 = *(_QWORD *)(a1 + 1232);
  v16 = *(_QWORD *)(a1 + 1240);
  v17 = *(_QWORD *)(a1 + 1416);
  v18 = *(_QWORD *)(a1 + 1424);
  v19 = *(_QWORD *)(a1 + 1248);
  *(__int128 *)((char *)v37 + 12) = *(_OWORD *)(a1 + 1392);
  v37[0] = *(_OWORD *)(a1 + 1380);
  kaldi::quasar::TransducerAutoRegressiveDecodable::TransducerAutoRegressiveDecodable((uint64_t)v38, (uint64_t)v10, v14, v15, v16, v17, v18, v19, v37, *(_DWORD *)(a1 + 1408));
  v20 = quasar::OnlineTransducerGraphSearchDecoder::decodeUtterance(a1, (_BYTE *)a2, a3, (uint64_t)a4, a5, v38);
  if (*(_BYTE *)(a1 + 440))
  {
    v21 = *((_QWORD *)*a4 + 3);
    if (*(char *)(v21 + 535) < 0)
    {
      if (!*(_QWORD *)(v21 + 520))
        goto LABEL_20;
    }
    else if (!*(_BYTE *)(v21 + 535))
    {
      goto LABEL_20;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v21 + 512), 47, (uint64_t)&v34);
    v22 = *((_QWORD *)*a4 + 3);
    v25 = *(const std::string::value_type **)(v22 + 128);
    v23 = v22 + 128;
    v24 = v25;
    v26 = *(char *)(v23 + 23);
    if (v26 >= 0)
      v27 = (const std::string::value_type *)v23;
    else
      v27 = v24;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(v23 + 23);
    else
      v28 = *(_QWORD *)(v23 + 8);
    v29 = std::string::append(&v34, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v36 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    quasar::filesystem::create_directories((char *)__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, __p);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
  }
LABEL_20:
  quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding((quasar::OnlineTransducerGraphSearchDecoder *)a1);
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable((kaldi::quasar::TransducerAutoRegressiveDecodable *)v38);
  if (v11)
  {
    v31 = (unint64_t *)((char *)v11 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(kaldi::quasar::CEAcousticEncoderNet *))(*(_QWORD *)v11 + 16))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }
  return v20;
}

void sub_1ADE878EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  quasar::OnlineTransducerGraphSearchDecoder *v29;
  uint64_t v30;
  const std::runtime_error *v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  const std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;

  if (a17 < 0)
    operator delete(__p);
  kaldi::quasar::TransducerAutoRegressiveDecodable::~TransducerAutoRegressiveDecodable((kaldi::quasar::TransducerAutoRegressiveDecodable *)&a29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v30 - 80);
  if (a2 == 2)
  {
    v33 = (const std::runtime_error *)__cxa_begin_catch(a1);
    quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding(v29);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v35 = std::runtime_error::runtime_error(exception, v33);
    v35->__vftable = (std::runtime_error_vtbl *)&off_1E5D336D8;
  }
  if (a2 == 1)
  {
    v36 = (const std::runtime_error *)__cxa_begin_catch(a1);
    quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding(v29);
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v38 = std::runtime_error::runtime_error(v37, v36);
    v38->__vftable = (std::runtime_error_vtbl *)&off_1E5D33DA8;
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::cleanUpAfterDecoding(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  if (*((_BYTE *)this + 440))
    quasar::OnlineTransducerGraphSearchDecoder::resetAccessedStatesCounts(this);
  quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::clear((quasar::OnlineTransducerGraphSearchDecoder *)((char *)this + 896));
}

void quasar::OnlineTransducerGraphSearchDecoder::setUpDecoding(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  char *v7;
  _QWORD **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *j;
  _QWORD *v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *size;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  double *v44;
  clockid_t v45;
  double v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::string *v51;
  __int128 v52;
  uint64_t *v54;
  uint64_t v55;
  std::string v56;
  std::string v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62;
  std::__shared_weak_count *v63;
  void *v64[2];
  std::__shared_weak_count *v65;
  int v66;
  _QWORD **v67;
  _QWORD *v68[3];

  quasar::OnlineTransducerGraphSearchDecoder::loadLmeData(a1, a2, a3, a4);
  v55 = a2;
  quasar::OnlineTransducerGraphSearchDecoder::setUpDecoderPassData(a1, a2, (uint64_t)a4);
  v7 = (char *)operator new(0x48uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_1E5D420C8;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  v64[1] = v7;
  *(_OWORD *)(v7 + 24) = 0u;
  v64[0] = v7 + 24;
  v8 = (_QWORD **)(a1 + 1024);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 1024, (__int128 *)v64);
  v9 = (std::__shared_weak_count *)v64[1];
  if (v64[1])
  {
    v10 = (unint64_t *)((char *)v64[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(v55 + 216);
  v54 = (uint64_t *)a4;
  if (v12)
  {
    std::set<int>::set[abi:ne180100]((uint64_t *)&v67, v12 + 32);
  }
  else
  {
    v68[0] = 0;
    v68[1] = 0;
    v67 = v68;
  }
  v13 = *(uint64_t **)(a1 + 2048);
  for (i = *(uint64_t **)(a1 + 2056); v13 != i; v13 += 2)
  {
    v15 = *v8;
    v16 = *(_DWORD *)(v55 + 448);
    v17 = *v13;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v17, (uint64_t)__p, &v62);
    LODWORD(v64[0]) = v16;
    v64[1] = v62;
    v65 = v63;
    if (v63)
    {
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v66 = -1;
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v15, (unsigned int *)v64, *(uint64_t **)(a1 + 480), 0, 0, *(_DWORD *)(a1 + 448), 0x20000uLL, (uint64_t)&v67);
    v20 = v65;
    if (v65)
    {
      v21 = (unint64_t *)&v65->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v63;
    if (v63)
    {
      v24 = (unint64_t *)&v63->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v61 < 0)
      operator delete(__p[0]);
  }
  v26 = *(uint64_t **)(a1 + 2096);
  for (j = *(uint64_t **)(a1 + 2104); v26 != j; v26 += 2)
  {
    v28 = *v8;
    v29 = *v26;
    std::string::basic_string[abi:ne180100]<0>(v64, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v29, (uint64_t)v64, &v57);
    v30 = (const void *)v57.__r_.__value_.__r.__words[0];
    v31 = *(_QWORD *)(a1 + 480);
    v32 = *(_QWORD *)(v31 + 48);
    if (v32)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v32, (uint64_t)__p, &v58);
      v33 = v58;
    }
    else
    {
      v33 = 0;
    }
    kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v28, v30, (unsigned int **)v31, (_QWORD *)(v55 + 408), (__int32 **)(v31 + 24), a1 + 832, v33, 0, -1.0, 0, 0x20000uLL, a1 + 536);
    if (v32)
    {
      v34 = v59;
      if (v59)
      {
        v35 = (unint64_t *)&v59->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v61 < 0)
        operator delete(__p[0]);
    }
    size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      v38 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SHIBYTE(v65) < 0)
      operator delete(v64[0]);
  }
  v40 = *v54;
  if (*(float *)(a1 + 2120) > 0.0)
  {
    v41 = *(_QWORD *)(v40 + 24);
    v42 = *(_QWORD **)(v41 + 272);
    v43 = *(_QWORD **)(v41 + 280);
    if (v42 != v43)
    {
      do
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD ***, uint64_t, uint64_t))(*(_QWORD *)*v42 + 16))(*v42, *(_QWORD *)(a1 + 1024), *(_QWORD *)(a1 + 480), *(unsigned int *)(v55 + 448), 0, 0, *(unsigned int *)(a1 + 448), &v67, v55 + 408, 0x20000);
        v42 += 2;
      }
      while (v42 != v43);
      v40 = *v54;
    }
  }
  quasar::SpeechRequestData::getRecogRequestTimer(v40, v64);
  v44 = (double *)v64[0];
  v46 = (kaldi::Timer::GetSeconds((kaldi::Timer *)5, v45) - *v44 - *(double *)(a1 + 872)) * 1000.0;
  v47 = (std::__shared_weak_count *)v64[1];
  if (v64[1])
  {
    v48 = (unint64_t *)((char *)v64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(_QWORD *)(*a3 + 424);
  *(double *)(v50 + 16) = v46 + *(double *)(v50 + 16);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)a1, &v57);
  v51 = std::string::append(&v57, ":lmeLoadingTime");
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v65 = (std::__shared_weak_count *)v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)v64 = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v56, v46);
  quasar::SpeechRequestResultData::addDump(v50, (__int128 *)v64, &v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  quasar::OnlineTransducerGraphSearchDecoder::decoderObjectSetup(a1, v55, (uint64_t)a3, (uint64_t)v54);
  std::__tree<int>::destroy((uint64_t)&v67, v68[0]);
}

void sub_1ADE87F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  std::__tree<int>::destroy(v43 - 128, *(_QWORD **)(v43 - 120));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::decodeUtterance(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, uint64_t a5, kaldi::quasar::CEAcousticEncoderNet **a6)
{
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  int *v15;
  int32x2_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  BOOL RawLattice;
  int v34;
  uint64_t v35;
  void *v36;
  int v37;
  uint64_t *v38;
  int *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  uint64_t v73;
  float v74;
  double *v75;
  unint64_t v76;
  double *v77;
  double *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  double *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  int v98;
  float v99;
  uint64_t v100;
  float v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  std::string *v111;
  uint64_t v112;
  float v113;
  double *v114;
  unint64_t v115;
  double *v116;
  double *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  int v130;
  int v131;
  void *v133;
  int v134;
  unsigned int v136;
  int v137;
  int v138;
  unsigned __int8 v139;
  int v140;
  int32x2_t v141;
  int32x2_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *__p[2];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  std::string v166[2];
  void *v167;
  char v168;
  void *v169;
  char v170;
  void *v171;
  char v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  int32x2_t v190;
  int32x2_t v191;
  int32x2_t v192;
  std::string **v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  std::string *v199;
  std::string *v200;
  unint64_t v201;
  __int128 v202;
  uint64_t v203;
  float32x2_t v204;
  std::vector<int> v205;
  std::vector<int> v206;
  uint64_t *v207;
  std::vector<int> v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v173);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 320, &v173);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  memset(&v206, 0, sizeof(v206));
  memset(&v205, 0, sizeof(v205));
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  v134 = 0;
  v14 = 0;
  v131 = kaldi::quasar::TransducerAutoRegressiveDecodable::FrameSubsamplingFactor(a6) * v13;
  v15 = &quasar::gLogLevel;
  v16 = vdup_n_s32(0x7F800000u);
  while (!kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6)
       && (kaldi::quasar::TransducerAutoRegressiveDecodable::EndPointed((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6) & 1) == 0)
  {
    if ((int)kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6) >= 1)
      kaldi::quasar::TransducerAutoRegressiveDecodable::Reset((uint64_t)a6, &v206);
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitDecoding(*(_QWORD *)(a1 + 1040));
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD *)(a1 + 1040);
      v20 = *(_DWORD *)(v19 + 272);
      if (v20 < 0)
        v20 = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 7))(a6);
      v21 = *(_QWORD *)(v19 + 104);
      if (v20 < (unint64_t)((v21 - *(_QWORD *)(v19 + 96)) >> 3) || !*(_DWORD *)(v21 - 8))
        break;
      v22 = *(_QWORD *)(a5 + 24);
      if (!v22)
        std::__throw_bad_function_call[abi:ne180100]();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22))
      {
        if (*v15 >= 4)
        {
          v188 = 0u;
          v189 = 0u;
          v186 = 0u;
          v187 = 0u;
          v184 = 0u;
          v185 = 0u;
          v182 = 0u;
          v183 = 0u;
          v180 = 0u;
          v181 = 0u;
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          v174 = 0u;
          v175 = 0u;
          v173 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Recognition cancelled", 21);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v173);
        }
        v34 = 1;
        v136 = 1;
        if (!v18)
          goto LABEL_91;
LABEL_90:
        operator delete(v18);
        goto LABEL_91;
      }
      if ((int)kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AdvanceDecoding(*(_QWORD *)(a1 + 1040), (uint64_t)a6, 1) >= 1)
      {
        *(_DWORD *)(*a3 + 576) = kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6)
                               + v14;
        if (a2[561])
        {
          v23 = v131
              * kaldi::quasar::TransducerAutoRegressiveDecodable::NumTotalEncodedFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6);
          if (v134 != (_DWORD)v23)
          {
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*a3 + 560) + 72))(*(_QWORD *)(*a3 + 560), v23);
            v134 = v23;
          }
        }
        v24 = *(_QWORD *)(a1 + 1040);
        v25 = *(_DWORD *)(v24 + 272);
        if (v25 < 0)
          v25 = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 7))(a6);
        v26 = *(_QWORD *)(v24 + 104);
        if (v25 >= (unint64_t)((v26 - *(_QWORD *)(v24 + 96)) >> 3) && *(_DWORD *)(v26 - 8))
        {
          memset(v166, 0, 24);
          kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetPartialResult(*(_QWORD *)(a1 + 1040), 1, (int **)v166, (int **)&v202);
          LODWORD(v208.__begin_) = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 6))(a6);
          HIDWORD(v208.__begin_) = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 4))(a6);
          std::set<int>::set[abi:ne180100]((uint64_t)__p, (int *)&v208, 2);
          kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessLabels(v166, &v202, (uint64_t)__p, *(_DWORD *)(a1 + 1468), *(_DWORD *)(a1 + 1464), &v173);
          std::__tree<int>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
          v27 = (void *)*((_QWORD *)&v174 + 1);
          if ((_QWORD)v175 - *((_QWORD *)&v174 + 1) != v17 - (_QWORD)v18
            || memcmp(*((const void **)&v174 + 1), v18, v175 - *((_QWORD *)&v174 + 1)))
          {
            memset(&v208, 0, sizeof(v208));
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v208, v205.__begin_, (uint64_t)v205.__end_, v205.__end_ - v205.__begin_);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v208, (uint64_t)v208.__end_, *((char **)&v174 + 1), (char *)v175, (uint64_t)(v175 - *((_QWORD *)&v174 + 1)) >> 2);
            quasar::SymbolTableList::lookup(*(uint64_t **)(*a3 + 472), &v208.__begin_, (uint64_t *)(*a3 + 48), (char **)(*a3 + 72), 1);
            if (a2[561])
            {
              v137 = v14;
              v28 = *a3;
              v29 = *(_QWORD *)(*a3 + 560);
              v30 = *(unsigned int *)(*(_QWORD *)a4 + 12);
              v200 = 0;
              v199 = 0;
              v201 = 0;
              v197 = 0;
              v196 = 0;
              v198 = 0;
              v194 = 0;
              v193 = 0;
              v195 = 0;
              LOBYTE(__p[0]) = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
              LOWORD(v130) = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, std::string **, void **, std::string ***, int, void **))(*(_QWORD *)v29 + 24))(v29, v28 + 48, v30, 1, 0, 0, &v199, &v196, &v193, v130, __p);
              v14 = v137;
              if (SHIBYTE(v150) < 0)
                operator delete(__p[1]);
              __p[0] = &v193;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0] = &v196;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0] = &v199;
              std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            }
            if (v18)
              operator delete(v18);
            v18 = (void *)*((_QWORD *)&v174 + 1);
            v17 = v175;
            *((_QWORD *)&v174 + 1) = 0;
            v175 = 0uLL;
            if (v208.__begin_)
            {
              v208.__end_ = v208.__begin_;
              operator delete(v208.__begin_);
              v27 = (void *)*((_QWORD *)&v174 + 1);
            }
            else
            {
              v27 = 0;
            }
          }
          if (v27)
          {
            *(_QWORD *)&v175 = v27;
            operator delete(v27);
          }
          if ((_QWORD)v173)
          {
            *((_QWORD *)&v173 + 1) = v173;
            operator delete((void *)v173);
          }
          if ((_QWORD)v202)
          {
            *((_QWORD *)&v202 + 1) = v202;
            operator delete((void *)v202);
          }
          if (v166[0].__r_.__value_.__r.__words[0])
          {
            v166[0].__r_.__value_.__l.__size_ = v166[0].__r_.__value_.__r.__words[0];
            operator delete(v166[0].__r_.__value_.__l.__data_);
          }
        }
      }
    }
    v138 = kaldi::quasar::TransducerAutoRegressiveDecodable::NumDecodedInputFrames((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6);
    if (*(float *)(*(_QWORD *)(a1 + 1040) + 144) == INFINITY && *v15 >= 4)
    {
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      v174 = 0u;
      v175 = 0u;
      v173 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Decoder did not reach final-state, outputting partial traceback.", 64);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v173);
    }
    v32 = v14;
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v193);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a3 + 320) + 24))(*(_QWORD *)(*a3 + 320)) == -1)
    {
      if (kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(*(_QWORD *)(a1 + 1040), *(_QWORD *)(*a3 + 320)))
      {
        fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(*(_QWORD *)(*a3 + 320));
        v35 = *(_QWORD *)(*a3 + 320);
        v192 = v16;
        fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v35, (uint64_t)&v193, 1, 0, 0, (uint64_t *)&v192, -1, 0);
LABEL_65:
        memset(v166, 0, 24);
        v202 = 0uLL;
        v203 = 0;
        fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v193, (uint64_t)v166, (uint64_t)&v202, (int32x2_t *)&v207, 1);
        LODWORD(v208.__begin_) = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 6))(a6);
        HIDWORD(v208.__begin_) = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 4))(a6);
        std::set<int>::set[abi:ne180100]((uint64_t)__p, (int *)&v208, 2);
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessLabels(v166, &v202, (uint64_t)__p, *(_DWORD *)(a1 + 1468), *(_DWORD *)(a1 + 1464), &v173);
        std::__tree<int>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v206, (uint64_t)v206.__end_, (char *)v173, *((char **)&v173 + 1), (uint64_t)(*((_QWORD *)&v173 + 1) - v173) >> 2);
        v14 = v32;
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v205, (uint64_t)v205.__end_, *((char **)&v174 + 1), (char *)v175, (uint64_t)(v175 - *((_QWORD *)&v174 + 1)) >> 2);
        v204 = vadd_f32(v204, (float32x2_t)v207);
        if ((_QWORD)v175 - *((_QWORD *)&v174 + 1) != v17 - (_QWORD)v18
          || memcmp(*((const void **)&v174 + 1), v18, v17 - (_QWORD)v18))
        {
          quasar::SymbolTableList::lookup(*(uint64_t **)(*a3 + 472), &v205.__begin_, (uint64_t *)(*a3 + 48), (char **)(*a3 + 72), 1);
          if (a2[561])
          {
            v133 = v18;
            v38 = a3;
            v39 = v15;
            v40 = v38;
            v41 = *v38;
            v42 = *(_QWORD *)(*v38 + 560);
            v43 = *(unsigned int *)(*(_QWORD *)a4 + 12);
            memset(&v208, 0, sizeof(v208));
            v200 = 0;
            v199 = 0;
            v201 = 0;
            v197 = 0;
            v196 = 0;
            v198 = 0;
            LOBYTE(__p[0]) = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
            LOWORD(v130) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, std::vector<int> *, std::string **, void **, int, void **))(*(_QWORD *)v42 + 24))(v42, v41 + 48, v43, 1, 0, 0, &v208, &v199, &v196, v130, __p);
            v15 = v39;
            v14 = v32;
            if (SHIBYTE(v150) < 0)
              operator delete(__p[1]);
            __p[0] = &v196;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = &v199;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = &v208;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            a3 = v40;
            v18 = v133;
          }
        }
        if (*((_QWORD *)&v174 + 1))
        {
          *(_QWORD *)&v175 = *((_QWORD *)&v174 + 1);
          operator delete(*((void **)&v174 + 1));
        }
        if ((_QWORD)v173)
        {
          *((_QWORD *)&v173 + 1) = v173;
          operator delete((void *)v173);
        }
        if ((_QWORD)v202)
        {
          *((_QWORD *)&v202 + 1) = v202;
          operator delete((void *)v202);
        }
        if (v166[0].__r_.__value_.__r.__words[0])
        {
          v166[0].__r_.__value_.__l.__size_ = v166[0].__r_.__value_.__r.__words[0];
          operator delete(v166[0].__r_.__value_.__l.__data_);
        }
        v34 = 0;
        goto LABEL_86;
      }
      if (*v15 >= 4)
      {
        v188 = 0u;
        v189 = 0u;
        v186 = 0u;
        v187 = 0u;
        v184 = 0u;
        v185 = 0u;
        v182 = 0u;
        v183 = 0u;
        v180 = 0u;
        v181 = 0u;
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v174 = 0u;
        v175 = 0u;
        v173 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Failed to get raw recognition lattice.", 38);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v173);
        v136 = 2;
        v34 = 1;
        goto LABEL_86;
      }
      v136 = 2;
    }
    else
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(__p);
      RawLattice = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(*(_QWORD *)(a1 + 1040), (uint64_t)__p);
      if (RawLattice)
      {
        fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)__p);
        v191 = v16;
        fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)__p, (uint64_t)&v193, 1, 0, 0, (uint64_t *)&v191, -1, 0);
        fst::Concat<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(*(_QWORD *)(*a3 + 320), (uint64_t)__p);
      }
      else
      {
        if (*v15 >= 4)
        {
          v188 = 0u;
          v189 = 0u;
          v186 = 0u;
          v187 = 0u;
          v184 = 0u;
          v185 = 0u;
          v182 = 0u;
          v183 = 0u;
          v180 = 0u;
          v181 = 0u;
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          v174 = 0u;
          v175 = 0u;
          v173 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Failed to get raw recognition lattice.", 38);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v173);
        }
        v136 = 2;
      }
      __p[0] = &unk_1E5D25580;
      v36 = __p[1];
      if (__p[1] && (v37 = *((_DWORD *)__p[1] + 14) - 1, (*((_DWORD *)__p[1] + 14) = v37) == 0))
      {
        (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
        if (RawLattice)
          goto LABEL_65;
      }
      else if (RawLattice)
      {
        goto LABEL_65;
      }
    }
    v34 = 1;
    v14 = v32;
LABEL_86:
    v193 = (std::string **)&unk_1E5D25580;
    v44 = v194;
    if (v194)
    {
      v45 = *(_DWORD *)(v194 + 56) - 1;
      *(_DWORD *)(v194 + 56) = v45;
      if (!v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    }
    v14 += v138;
    if (v18)
      goto LABEL_90;
LABEL_91:
    if (v34)
      goto LABEL_241;
  }
  *(_DWORD *)(*a3 + 576) = v14;
  *(_BYTE *)(*a3 + 580) = kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6);
  v46 = kaldi::quasar::TransducerAutoRegressiveDecodable::AllFramesDecoded((kaldi::quasar::TransducerAutoRegressiveDecodable *)a6);
  v47 = *a3;
  *(_BYTE *)(*a3 + 581) = v46;
  v48 = operator new(0x30uLL);
  v48[1] = 0;
  v48[2] = 0;
  *v48 = &unk_1E5D456D0;
  v48[4] = 0;
  v48[5] = 0;
  v48[3] = 0;
  *(_QWORD *)&v173 = v48 + 3;
  *((_QWORD *)&v173 + 1) = v48;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v47 + 352, &v173);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = operator new(0x30uLL);
  v52[2] = 0;
  *v52 = &unk_1E5D458C8;
  v52[1] = 0;
  v52[4] = 0;
  v52[5] = 0;
  v52[3] = 0;
  *(_QWORD *)&v173 = v52 + 3;
  *((_QWORD *)&v173 + 1) = v52;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 392, &v173);
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v196);
  v56 = *(_QWORD *)(*a3 + 320);
  v190 = vdup_n_s32(0x7F800000u);
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v56, (uint64_t)&v196, 1, 0, 0, (uint64_t *)&v190, -1, 0);
  if (*(_BYTE *)(a1 + 2125))
  {
    fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v196);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v173);
    v57 = *(_QWORD *)(a1 + 1448);
    v58 = *(_QWORD *)(a1 + 1432);
    v60 = *(int **)(v58 + 96);
    v59 = *(int **)(v58 + 104);
    v208.__begin_ = v60;
    v208.__end_ = v59;
    if (v59)
    {
      v61 = (unint64_t *)(v59 + 2);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    std::string::basic_string[abi:ne180100]<0>(&v202, "");
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FstPrinter((uint64_t)v166, (uint64_t)&v196, v57, (uint64_t)v60, 0, 0, 1, (__int128 *)__p, &v202);
    if (SHIBYTE(v203) < 0)
      operator delete((void *)v202);
    if (SBYTE7(v150) < 0)
      operator delete(__p[0]);
    if (v59)
    {
      v63 = (unint64_t *)(v59 + 2);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        (*(void (**)(int *))(*(_QWORD *)v59 + 16))(v59);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v59);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "string");
    fst::FstPrinter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Print(v166, (std::string::size_type)&v174, (std::string *)__p);
    if (SBYTE7(v150) < 0)
      operator delete(__p[0]);
    if (*v15 >= 4)
    {
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v153 = 0u;
      v151 = 0u;
      v152 = 0u;
      *(_OWORD *)__p = 0u;
      v150 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Best path weight (graph,acoustic): ", 35);
      fst::operator<<<float>(v65, (float *)&v204);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      if (*v15 >= 4)
      {
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v153 = 0u;
        v151 = 0u;
        v152 = 0u;
        *(_OWORD *)__p = 0u;
        v150 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Best path lattice:\n", 19);
        std::stringbuf::str();
        if (v203 >= 0)
          v67 = &v202;
        else
          v67 = (__int128 *)v202;
        if (v203 >= 0)
          v68 = HIBYTE(v203);
        else
          v68 = *((_QWORD *)&v202 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
        if (SHIBYTE(v203) < 0)
          operator delete((void *)v202);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
    }
    if (v172 < 0)
      operator delete(v171);
    if (v170 < 0)
      operator delete(v169);
    if (v168 < 0)
      operator delete(v167);
    *(_QWORD *)&v173 = *MEMORY[0x1E0DE4F50];
    v69 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v173 + *(_QWORD *)(v173 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v174 = v69;
    *((_QWORD *)&v174 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v179) < 0)
      operator delete(*((void **)&v178 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v181);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v150 = 0;
  memset(v166, 0, 24);
  fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v196, (uint64_t)__p, (uint64_t)v166, (int32x2_t *)&v207, 1);
  LODWORD(v208.__begin_) = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 6))(a6);
  HIDWORD(v208.__begin_) = (*((uint64_t (**)(kaldi::quasar::CEAcousticEncoderNet **))*a6 + 4))(a6);
  std::set<int>::set[abi:ne180100]((uint64_t)&v202, (int *)&v208, 2);
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessLabels(__p, v166, (uint64_t)&v202, *(_DWORD *)(a1 + 1468), *(_DWORD *)(a1 + 1464), &v173);
  std::__tree<int>::destroy((uint64_t)&v202, *((_QWORD **)&v202 + 1));
  v202 = 0uLL;
  v203 = 0;
  memset(&v208, 0, sizeof(v208));
  quasar::SymbolTableList::lookup(*(uint64_t **)(*a3 + 472), (int **)&v174 + 1, (uint64_t *)&v202, (char **)&v208, 1);
  v200 = 0;
  v199 = 0;
  v201 = 0;
  v71 = *((_QWORD *)&v202 + 1);
  v70 = v202;
  if ((_QWORD)v202 != *((_QWORD *)&v202 + 1))
  {
    v72 = 0;
    do
    {
      LODWORD(v193) = 0;
      v141.i32[0] = 0;
      v148 = 1;
      LOBYTE(v140) = 1;
      if ((unint64_t)v72 >= v201)
      {
        v72 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v199, v70, (int *)&v193, (int *)&v141, (int *)&v148 + 1, (int *)&v148, (unsigned __int8 *)&v140);
      }
      else
      {
        std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v201, v72, v70, (int *)&v193, (int *)&v141, (int *)&v148 + 1, (int *)&v148, (unsigned __int8 *)&v140);
        v72 = (std::string *)((char *)v72 + 224);
      }
      v200 = v72;
      v70 += 24;
    }
    while (v70 != v71);
    if (v199 != v72)
      v72[-8].__r_.__value_.__s.__data_[12] = 0;
  }
  std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](*(uint64_t **)(*a3 + 352), (uint64_t)&v199);
  v73 = *(_QWORD *)(*a3 + 392);
  v74 = *(float *)&v207 + *((float *)&v207 + 1);
  v75 = *(double **)(v73 + 8);
  v76 = *(_QWORD *)(v73 + 16);
  if ((unint64_t)v75 >= v76)
  {
    v78 = *(double **)v73;
    v79 = ((uint64_t)v75 - *(_QWORD *)v73) >> 3;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v81 = v76 - (_QWORD)v78;
    if (v81 >> 2 > v80)
      v80 = v81 >> 2;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
      v82 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    if (v82)
    {
      v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v73 + 16, v82);
      v78 = *(double **)v73;
      v75 = *(double **)(v73 + 8);
    }
    else
    {
      v83 = 0;
    }
    v84 = (double *)&v83[8 * v79];
    v85 = &v83[8 * v82];
    *v84 = v74;
    v77 = v84 + 1;
    while (v75 != v78)
    {
      v86 = *((_QWORD *)v75-- - 1);
      *((_QWORD *)v84-- - 1) = v86;
    }
    *(_QWORD *)v73 = v84;
    *(_QWORD *)(v73 + 8) = v77;
    *(_QWORD *)(v73 + 16) = v85;
    if (v78)
      operator delete(v78);
  }
  else
  {
    *v75 = v74;
    v77 = v75 + 1;
  }
  *(_QWORD *)(v73 + 8) = v77;
  v193 = &v199;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  if (v208.__begin_)
  {
    v208.__end_ = v208.__begin_;
    operator delete(v208.__begin_);
  }
  v208.__begin_ = (std::vector<int>::pointer)&v202;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
  if (*((_QWORD *)&v174 + 1))
  {
    *(_QWORD *)&v175 = *((_QWORD *)&v174 + 1);
    operator delete(*((void **)&v174 + 1));
  }
  if ((_QWORD)v173)
  {
    *((_QWORD *)&v173 + 1) = v173;
    operator delete((void *)v173);
  }
  if (v166[0].__r_.__value_.__r.__words[0])
  {
    v166[0].__r_.__value_.__l.__size_ = v166[0].__r_.__value_.__r.__words[0];
    operator delete(v166[0].__r_.__value_.__l.__data_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v196 = &unk_1E5D25580;
  v87 = v197;
  if (v197)
  {
    v88 = *(_DWORD *)(v197 + 56) - 1;
    *(_DWORD *)(v197 + 56) = v88;
    if (!v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  }
  v89 = *(_QWORD *)(*a3 + 320);
  *(_QWORD *)&v173 = ((unint64_t)*(unsigned int *)(a1 + 1464) << 32) | 0xFFFFFFFF;
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,quasar::UnkMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v89, (int *)&v173);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v173);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 152, &v173);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *(_QWORD *)(a1 + 1040);
  v94 = *a3;
  v95 = *(_QWORD *)(*(_QWORD *)(*a3 + 320) + 8);
  ++*(_DWORD *)(v95 + 56);
  v146 = &unk_1E5D28830;
  v147 = v95;
  v96 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeterminizeLattice(v93, &v146, *(_QWORD *)(v94 + 152));
  v146 = &unk_1E5D25580;
  v97 = v147;
  if (v147 && (v98 = *(_DWORD *)(v147 + 56) - 1, (*(_DWORD *)(v147 + 56) = v98) == 0))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
    if (!v96)
      goto LABEL_238;
LABEL_183:
    if (*(float *)(a1 + 1292) == 0.0)
      v99 = 1.0;
    else
      v99 = *(float *)(a1 + 1292);
    v100 = *a3;
    *(float *)(*a3 + 504) = v99;
    if (*(float *)(a1 + 1288) == 0.0)
      v101 = 1.0;
    else
      v101 = *(float *)(a1 + 1288);
    *(float *)(v100 + 508) = v101;
    if (v99 != 1.0 || v101 != 1.0)
    {
      std::vector<std::vector<double>>::vector(&v173, 2uLL);
      __p[0] = 0;
      std::vector<fst::LatticeWeightTpl<float>>::resize(v173, 2uLL, __p);
      __p[0] = 0;
      std::vector<fst::LatticeWeightTpl<float>>::resize(v173 + 24, 2uLL, __p);
      v103 = v173;
      **(double **)v173 = 1.0 / v101;
      *(double *)(*(_QWORD *)(v103 + 24) + 8) = 1.0 / v99;
      fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>((double ***)&v173, *(_QWORD *)(*a3 + 320));
      __p[0] = &v173;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v196);
    v104 = *(_QWORD *)(*a3 + 152);
    v105 = *(unsigned int *)(*(_QWORD *)a4 + 16);
    v142 = vdup_n_s32(0x7F800000u);
    v144 = 0;
    v145 = 0;
    v143 = 0;
    fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(v104, (uint64_t)&v196, v105, 0, 0, (uint64_t *)&v142, -1, 0);
    if (v143)
    {
      v144 = v143;
      operator delete(v143);
    }
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v193);
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v196, (uint64_t)&v193, 1);
    v173 = 0uLL;
    *(_QWORD *)&v174 = 0;
    fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v193, (uint64_t *)&v173);
    v107 = *((_QWORD *)&v173 + 1);
    v106 = v173;
    if ((_QWORD)v173 != *((_QWORD *)&v173 + 1))
    {
      v108 = 1;
      do
      {
        if ((v108 & 1) == 0)
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v150 = 0;
          memset(v166, 0, 24);
          fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(v106, (uint64_t)__p, (uint64_t)v166, &v141, 0);
          v202 = 0uLL;
          v203 = 0;
          memset(&v208, 0, sizeof(v208));
          quasar::SymbolTableList::lookup(*(uint64_t **)(*a3 + 472), (int **)v166, (uint64_t *)&v202, (char **)&v208, 1);
          v200 = 0;
          v199 = 0;
          v201 = 0;
          v110 = *((_QWORD *)&v202 + 1);
          v109 = v202;
          if ((_QWORD)v202 != *((_QWORD *)&v202 + 1))
          {
            v111 = 0;
            do
            {
              LODWORD(v207) = 0;
              v148 = 0;
              v140 = 1;
              v139 = 1;
              if ((unint64_t)v111 >= v201)
              {
                v111 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v199, v109, (int *)&v207, (int *)&v148 + 1, (int *)&v148, &v140, &v139);
              }
              else
              {
                std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v201, v111, v109, (int *)&v207, (int *)&v148 + 1, (int *)&v148, &v140, &v139);
                v111 = (std::string *)((char *)v111 + 224);
              }
              v200 = v111;
              v109 += 24;
            }
            while (v109 != v110);
            if (v199 != v111)
              v111[-8].__r_.__value_.__s.__data_[12] = 0;
          }
          std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](*(uint64_t **)(*a3 + 352), (uint64_t)&v199);
          v112 = *(_QWORD *)(*a3 + 392);
          v113 = *(float *)v141.i32 + *(float *)&v141.i32[1];
          v114 = *(double **)(v112 + 8);
          v115 = *(_QWORD *)(v112 + 16);
          if ((unint64_t)v114 >= v115)
          {
            v117 = *(double **)v112;
            v118 = ((uint64_t)v114 - *(_QWORD *)v112) >> 3;
            v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v120 = v115 - (_QWORD)v117;
            if (v120 >> 2 > v119)
              v119 = v120 >> 2;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v119;
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v112 + 16, v121);
              v117 = *(double **)v112;
              v114 = *(double **)(v112 + 8);
            }
            else
            {
              v122 = 0;
            }
            v123 = (double *)&v122[8 * v118];
            *v123 = v113;
            v116 = v123 + 1;
            while (v114 != v117)
            {
              v124 = *((_QWORD *)v114-- - 1);
              *((_QWORD *)v123-- - 1) = v124;
            }
            *(_QWORD *)v112 = v123;
            *(_QWORD *)(v112 + 8) = v116;
            *(_QWORD *)(v112 + 16) = &v122[8 * v121];
            if (v117)
              operator delete(v117);
          }
          else
          {
            *v114 = v113;
            v116 = v114 + 1;
          }
          *(_QWORD *)(v112 + 8) = v116;
          v207 = (uint64_t *)&v199;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          if (v208.__begin_)
          {
            v208.__end_ = v208.__begin_;
            operator delete(v208.__begin_);
          }
          v208.__begin_ = (std::vector<int>::pointer)&v202;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
          if (v166[0].__r_.__value_.__r.__words[0])
          {
            v166[0].__r_.__value_.__l.__size_ = v166[0].__r_.__value_.__r.__words[0];
            operator delete(v166[0].__r_.__value_.__l.__data_);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        v108 = 0;
        v106 += 16;
      }
      while (v106 != v107);
    }
    __p[0] = &v173;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v193 = (std::string **)&unk_1E5D25580;
    v125 = v194;
    if (v194)
    {
      v126 = *(_DWORD *)(v194 + 56) - 1;
      *(_DWORD *)(v194 + 56) = v126;
      if (!v126)
        (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
    }
    v196 = &unk_1E5D25800;
    v127 = v197;
    if (v197)
    {
      v128 = *(_DWORD *)(v197 + 56) - 1;
      *(_DWORD *)(v197 + 56) = v128;
      if (!v128)
        (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
    }
    v136 = 0;
  }
  else
  {
    if (v96)
      goto LABEL_183;
LABEL_238:
    if (*v15 >= 4)
    {
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      v174 = 0u;
      v175 = 0u;
      v173 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v173);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v173, (uint64_t)"Failed to determinize raw recognition lattice.", 46);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v173);
    }
    v136 = 2;
  }
LABEL_241:
  if (v205.__begin_)
  {
    v205.__end_ = v205.__begin_;
    operator delete(v205.__begin_);
  }
  if (v206.__begin_)
  {
    v206.__end_ = v206.__begin_;
    operator delete(v206.__begin_);
  }
  return v136;
}

void sub_1ADE89794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  if (a37 < 0)
    operator delete(__p);
  a31 = &STACK[0x370];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = &STACK[0x388];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (void *)(v39 - 256);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  v41 = (void *)v38[108];
  if (v41)
  {
    v38[109] = v41;
    operator delete(v41);
  }
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&STACK[0x240]);
  v42 = (void *)v38[97];
  if (v42)
  {
    v38[98] = v42;
    operator delete(v42);
  }
  v43 = (void *)v38[34];
  if (v43)
  {
    v38[35] = v43;
    operator delete(v43);
  }
  if (v37)
    operator delete(v37);
  v44 = (void *)v38[101];
  if (v44)
  {
    v38[102] = v44;
    operator delete(v44);
  }
  v45 = (void *)v38[104];
  if (v45)
  {
    v38[105] = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InitDecoding(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int v9;
  uint64_t v10;

  *(_DWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != -1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = -1;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 64);
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v7 + 24) = v6;
      v6 = v7;
    }
    while (v5);
    *(_QWORD *)(a1 + 64) = v7;
  }
  kaldi::quasar::E2ETokenHeap::Clear((kaldi::quasar::E2ETokenHeap *)(a1 + 360));
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 308) = 0;
  v8 = vdup_n_s32(0x7F800000u);
  *(int32x2_t *)(a1 + 144) = v8;
  *(_DWORD *)(a1 + 152) = 2139095040;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)(a1 + 320));
  *(_QWORD *)(a1 + 308) = 0;
  std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 96, 1uLL);
  std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(a1 + 120, 1uLL);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
  v10 = (***(uint64_t (****)(_QWORD))(a1 + 288))(*(_QWORD *)(a1 + 288));
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, (v10 << 32) + v9, 0, *(_DWORD *)(a1 + 8), 0, 0, 0.0);
  *(_WORD *)(a1 + 472) = 0;
  *(int32x2_t *)(a1 + 600) = v8;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, *(_DWORD *)(a1 + 8), *(float *)(a1 + 192));
  ++*(_DWORD *)(a1 + 8);
}

uint64_t kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AdvanceDecoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  clockid_t v14;

  if (!(_DWORD)a3)
    return 0;
  v6 = 0;
  v7 = a1 + 96;
  v8 = a1 + 120;
  while (1)
  {
    v9 = *(_DWORD *)(a1 + 272);
    if (v9 < 0)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v10 = *(_QWORD *)(a1 + 104);
    if (v9 < (unint64_t)((v10 - *(_QWORD *)(a1 + 96)) >> 3) || !*(_DWORD *)(v10 - 8))
      break;
    std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(v7, *(int *)(a1 + 8) + 1);
    std::vector<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList,std::allocator<kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TokenList>>::resize(v8, *(int *)(a1 + 8) + 1);
    v11 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::AutoRegressiveDecodableInterface>(a1, a2, *(_DWORD *)(a1 + 8));
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(a1, *(_DWORD *)(a1 + 8), v11);
    v12 = *(_DWORD *)(a1 + 272);
    if (v12 < 0)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v13 = *(_QWORD *)(a1 + 104);
    if (v12 >= (unint64_t)((v13 - *(_QWORD *)(a1 + 96)) >> 3) && *(_DWORD *)(v13 - 8))
    {
      v14 = *(_DWORD *)(a1 + 8);
      if (!((int)v14 % *(_DWORD *)(a1 + 208)))
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens((uint64_t *)a1, v14, *(float *)(a1 + 204) * *(float *)(a1 + 232));
    }
    else
    {
      kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(a1, *(_DWORD *)(a1 + 8), 0);
    }
    ++*(_DWORD *)(a1 + 8);
    v6 = (v6 + 1);
    if ((_DWORD)a3 == (_DWORD)v6)
      return a3;
  }
  return v6;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetPartialResult(uint64_t a1@<X0>, char a2@<W1>, int **a3@<X2>, int **a4@<X8>)
{
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  int v21;
  unint64_t v22;
  int *v23;
  int *v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int *v31;
  int v32;
  int v33;
  unint64_t v34;
  int *v35;
  int *v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  unsigned int v45;
  int *v46;
  int *v47;
  int *v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  int *v53;
  int *v54;
  unint64_t v56;
  int v57;
  _QWORD v58[35];

  v8 = *(unint64_t **)(a1 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(float *)(a1 + 224);
    v12 = INFINITY;
    v13 = INFINITY;
    do
    {
      if (v11 == 0.0)
      {
        v17 = 0.0;
      }
      else
      {
        v14 = *v8;
        v15 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184), *v8);
        v16 = INFINITY;
        if (v15 != INFINITY)
          v16 = v15
              + (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 288) + 16))(*(_QWORD *)(a1 + 288), HIDWORD(v14));
        v11 = *(float *)(a1 + 224);
        v17 = v16 * v11;
      }
      v18 = *(_QWORD *)(a1 + 360);
      v19 = (float *)(v18 + 36 * *((unsigned int *)v8 + 4));
      v20 = v17 + *v19;
      if (v12 > v20)
      {
        v12 = v20;
        v9 = v18 + 36 * *((unsigned int *)v8 + 4);
      }
      if (v13 > *v19)
      {
        v13 = *v19;
        v10 = v18 + 36 * *((unsigned int *)v8 + 4);
      }
      v8 = (unint64_t *)v8[3];
    }
    while (v8);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  if (!(v9 | v10))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"GetPartialResult: decoding is finished: not producing partial result.", 69);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (!v9)
    v9 = v10;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
    a3[1] = *a3;
  if (v9)
  {
    while (1)
    {
      v21 = *(_DWORD *)(v9 + 32) & 0x7FFFFFFF;
      if ((a2 & 1) == 0 && !v21)
        break;
      v23 = a4[1];
      v22 = (unint64_t)a4[2];
      if ((unint64_t)v23 >= v22)
      {
        v25 = *a4;
        v26 = v23 - *a4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v29);
          v25 = *a4;
          v23 = a4[1];
        }
        else
        {
          v30 = 0;
        }
        v31 = (int *)&v30[4 * v26];
        *v31 = v21;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *--v23;
          *--v31 = v32;
        }
        *a4 = v31;
        a4[1] = v24;
        a4[2] = (int *)&v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      a4[1] = v24;
      if (a3)
        goto LABEL_45;
LABEL_64:
      v45 = *(_DWORD *)(v9 + 28) & 0x3FFFFFF;
      if (!v45)
      {
        v47 = *a4;
        v46 = a4[1];
        if (*a4 != v46)
        {
          v48 = v46 - 1;
          if (v48 > v47)
          {
            v49 = (unint64_t)(v47 + 1);
            do
            {
              v50 = *(_DWORD *)(v49 - 4);
              *(_DWORD *)(v49 - 4) = *v48;
              *v48-- = v50;
              v51 = v49 >= (unint64_t)v48;
              v49 += 4;
            }
            while (!v51);
          }
        }
        goto LABEL_71;
      }
      v9 = *(_QWORD *)(a1 + 360) + 36 * v45;
    }
    if (!a3)
      goto LABEL_64;
LABEL_45:
    v33 = *(_DWORD *)(v9 + 24) & 0x7FFFFFFF;
    if ((a2 & 1) != 0 || v33)
    {
      v35 = a3[1];
      v34 = (unint64_t)a3[2];
      if ((unint64_t)v35 >= v34)
      {
        v37 = *a3;
        v38 = v35 - *a3;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v40 = v34 - (_QWORD)v37;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v41);
          v37 = *a3;
          v35 = a3[1];
        }
        else
        {
          v42 = 0;
        }
        v43 = (int *)&v42[4 * v38];
        *v43 = v33;
        v36 = v43 + 1;
        while (v35 != v37)
        {
          v44 = *--v35;
          *--v43 = v44;
        }
        *a3 = v43;
        a3[1] = v36;
        a3[2] = (int *)&v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      a3[1] = v36;
    }
    goto LABEL_64;
  }
LABEL_71:
  if (a3)
  {
    v52 = (unint64_t)*a3;
    v53 = a3[1];
    v54 = v53 - 1;
    if (*a3 != v53 && (unint64_t)v54 > v52)
    {
      v56 = v52 + 4;
      do
      {
        v57 = *(_DWORD *)(v56 - 4);
        *(_DWORD *)(v56 - 4) = *v54;
        *v54-- = v57;
        v51 = v56 >= (unint64_t)v54;
        v56 += 4;
      }
      while (!v51);
    }
  }
}

void sub_1ADE8A3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessLabels(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  int v7;
  char v11;
  int v12;
  int v13;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int *v23;
  int v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  uint64_t *i;
  int v36;
  int v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  int *v48;
  void *v49;
  char *v50;
  BOOL v51;
  char *v52;
  int v53;
  BOOL v54;
  char *v55;
  char *v57;
  int v58;
  char *v59;
  _QWORD *v60;
  char *__p;
  int *v64;
  char *v65;
  void *v66;
  int *v67;
  int *v68;

  v6 = a1[1] - *a1;
  if (v6 >> 2 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v66, "ilabels.size() == olabels.size()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v66);
  }
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  v7 = ((unint64_t)v6 >> 2) - 1;
  if (v7 < 0)
  {
    v49 = 0;
    v48 = 0;
  }
  else
  {
    v60 = a6;
    v11 = 1;
    do
    {
      v12 = *(_DWORD *)(*a1 + 4 * v7);
      v13 = *(_DWORD *)(*a2 + 4 * v7);
      if (v13 < 1 || v13 == a5)
      {
        v11 |= v13 == a5;
      }
      else
      {
        v15 = v64;
        if (v64 >= (int *)v65)
        {
          v17 = (int *)__p;
          v18 = ((char *)v64 - __p) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            goto LABEL_88;
          v20 = v65 - __p;
          if ((v65 - __p) >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65, v21);
            v17 = (int *)__p;
            v15 = v64;
          }
          else
          {
            v22 = 0;
          }
          v23 = (int *)&v22[4 * v18];
          *v23 = v13;
          v16 = v23 + 1;
          while (v15 != v17)
          {
            v24 = *--v15;
            *--v23 = v24;
          }
          __p = (char *)v23;
          v65 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v64 = v13;
          v16 = v64 + 1;
        }
        v11 = 0;
        v64 = v16;
      }
      if (v12 >= 1)
      {
        v25 = v67;
        if (v67 >= v68)
        {
          v27 = (int *)v66;
          v28 = ((char *)v67 - (_BYTE *)v66) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
LABEL_88:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = (char *)v68 - (_BYTE *)v66;
          if (((char *)v68 - (_BYTE *)v66) >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68, v31);
            v27 = (int *)v66;
            v25 = v67;
          }
          else
          {
            v32 = 0;
          }
          v33 = (int *)&v32[4 * v28];
          *v33 = v12;
          v26 = v33 + 1;
          while (v25 != v27)
          {
            v34 = *--v25;
            *--v33 = v34;
          }
          v66 = v33;
          v67 = v26;
          v68 = (int *)&v32[4 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v67 = v12;
          v26 = v25 + 1;
        }
        v67 = v26;
        if ((v11 & 1) != 0)
        {
          for (i = *(uint64_t **)(a3 + 8); i; i = (uint64_t *)*i)
          {
            v36 = *((_DWORD *)i + 7);
            if (v12 >= v36)
            {
              if (v36 >= v12)
                goto LABEL_67;
              ++i;
            }
          }
          v37 = v12 + a4;
          v38 = v64;
          if (v64 >= (int *)v65)
          {
            v40 = (int *)__p;
            v41 = ((char *)v64 - __p) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v43 = v65 - __p;
            if ((v65 - __p) >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65, v44);
              v40 = (int *)__p;
              v38 = v64;
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[4 * v41];
            *(_DWORD *)v46 = v37;
            v39 = (int *)(v46 + 4);
            while (v38 != v40)
            {
              v47 = *--v38;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            __p = v46;
            v65 = &v45[4 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *v64 = v37;
            v39 = v64 + 1;
          }
          v64 = v39;
        }
      }
LABEL_67:
      v51 = v7-- <= 0;
    }
    while (!v51);
    v49 = v66;
    v48 = v67;
    v50 = (char *)(v67 - 1);
    v51 = v66 != v67 && v50 > v66;
    if (v51)
    {
      v52 = (char *)v66 + 4;
      a6 = v60;
      do
      {
        v53 = *((_DWORD *)v52 - 1);
        *((_DWORD *)v52 - 1) = *(_DWORD *)v50;
        *(_DWORD *)v50 = v53;
        v50 -= 4;
        v54 = v52 >= v50;
        v52 += 4;
      }
      while (!v54);
    }
    else
    {
      a6 = v60;
    }
  }
  v55 = (char *)(v64 - 1);
  if (__p != (char *)v64 && v55 > __p)
  {
    v57 = __p + 4;
    do
    {
      v58 = *((_DWORD *)v57 - 1);
      *((_DWORD *)v57 - 1) = *(_DWORD *)v55;
      *(_DWORD *)v55 = v58;
      v55 -= 4;
      v54 = v57 >= v55;
      v57 += 4;
    }
    while (!v54);
  }
  *a6 = v49;
  a6[1] = v48;
  a6[2] = v68;
  a6[3] = __p;
  v59 = v65;
  a6[4] = v64;
  a6[5] = v59;
}

void sub_1ADE8A7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1ADE8A828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t j;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int k;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t m;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t n;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD v45[2];
  uint64_t v46;
  _DWORD v47[2];
  _DWORD *v48[2];
  int v49;
  unsigned int v50;
  _OWORD v51[2];
  int v52;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v6 = *(_DWORD *)(a1 + 308);
  memset(v51, 0, sizeof(v51));
  v52 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>((uint64_t)v51, v6 / 2 + 3);
  if (**(_DWORD **)(a1 + 96))
  {
    v7 = 0;
    v40 = ((unint64_t)(v4 - v5) >> 3);
    v41 = ((unint64_t)(v4 - v5) >> 3) - 1;
    do
    {
      v50 = 0;
      for (i = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 8 * v7); ; LODWORD(i) = *(_DWORD *)(v9 + 36 * i + 12))
      {
        v50 = i;
        if (!(_DWORD)i)
          break;
        v9 = *(_QWORD *)(a1 + 360);
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        v48[0] = &v50;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5) = v10;
      }
      if (!v7 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) >= 1)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, (v11 - 1));
      }
      v50 = 0;
      for (j = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 8 * v7); ; LODWORD(j) = *(_DWORD *)(v13 + 36 * j + 12))
      {
        v50 = j;
        if (!(_DWORD)j)
          break;
        v13 = *(_QWORD *)(a1 + 360);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        v48[0] = &v50;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5) = v14;
      }
      ++v7;
    }
    while (v7 != v40);
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"init:", 5);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" buckets:", 9);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" load:", 6);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" max:", 5);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48);
    }
    v19 = 0;
    LODWORD(v20) = 0;
    v21 = 0;
    v22 = 0;
    v42 = (_QWORD *)(a1 + 320);
LABEL_19:
    v50 = 0;
    v39 = 8 * v19;
    for (k = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 8 * v19); ; k = *(_DWORD *)(v26 + 36 * v43 + 12))
    {
      v50 = k;
      if (!k)
        break;
      v48[0] = &v50;
      v24 = v21;
      v25 = v19;
      v20 = *((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5);
      v26 = *(_QWORD *)(a1 + 360);
      v43 = v50;
      for (m = *(unsigned int *)(v26 + 36 * v50 + 8); (_DWORD)m; m = *(unsigned int *)(v28 + 24 * m + 16))
      {
        v28 = *(_QWORD *)(a1 + 376);
        v29 = *((_DWORD *)std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v51, (unsigned int *)(v28 + 24 * m))+ 5);
        v30 = v28 + 24 * m;
        v31 = *(_DWORD *)(v30 + 4);
        LODWORD(v48[0]) = *(_DWORD *)(v30 + 20) & 0x7FFFFFFF;
        HIDWORD(v48[0]) = v31;
        v48[1] = *(_DWORD **)(v30 + 8);
        v49 = v29;
        if (v31 == *(_DWORD *)(a1 + 284))
          HIDWORD(v48[0]) = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)a2 + 208))(a2, v20, v48);
        ++v22;
      }
      v19 = v25;
      if (v25 == v41)
      {
        v32 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v42, &v50);
        v21 = v24;
        if (*(float *)(a1 + 144) == INFINITY)
        {
          v46 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v20, &v46);
        }
        else
        {
          if (*((float *)v32 + 5) == INFINITY)
            continue;
          v47[0] = *((_DWORD *)v32 + 5);
          v47[1] = 0;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v20, v47);
        }
        v21 = (v24 + 1);
      }
      else
      {
        v21 = v24;
      }
    }
    v50 = 0;
    for (n = *(unsigned int *)(*(_QWORD *)(a1 + 120) + v39); ; LODWORD(n) = *(_DWORD *)(v34 + 36 * n + 12))
    {
      v50 = n;
      if (!(_DWORD)n)
      {
        if (++v19 == v40)
        {
          if (kaldi::g_kaldi_verbose_level > 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48, 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"GetRawLattice: NumStates ", 25);
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
            v36 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" NumArcs ", 9);
            v37 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" NumFinal ", 10);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v48);
          }
          v17 = (_DWORD)v20 != 0;
          goto LABEL_45;
        }
        goto LABEL_19;
      }
      v34 = *(_QWORD *)(a1 + 360);
      v48[0] = &v50;
      v20 = *((unsigned int *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v51, &v50, (uint64_t)&std::piecewise_construct, v48)+ 5);
      v35 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v42, &v50);
      if (*(float *)(a1 + 144) == INFINITY)
      {
        v44 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v20, &v44);
      }
      else
      {
        if (*((float *)v35 + 5) == INFINITY)
          continue;
        v45[0] = *((_DWORD *)v35 + 5);
        v45[1] = 0;
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a2 + 184))(a2, v20, v45);
      }
      v21 = (v21 + 1);
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"GetRawLattice: no tokens active on frame 0: not producing lattice.", 66);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
  }
  v17 = 0;
LABEL_45:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v51);
  return v17;
}

void sub_1ADE8AE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v11 - 144);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DeterminizeLattice(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  double v11;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[34];

  if ((*((uint64_t (**)(void **))*a2 + 14))(a2))
  {
    v6 = (*((uint64_t (**)(void **))*a2 + 14))(a2);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  else
  {
    v7 = 0;
  }
  if ((*((uint64_t (**)(void **))*a2 + 15))(a2))
  {
    v8 = (*((uint64_t (**)(void **))*a2 + 15))(a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  else
  {
    v9 = 0;
  }
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a2);
  (*((void (**)(void **, uint64_t))*a2 + 35))(a2, v9);
  (*((void (**)(void **, uint64_t))*a2 + 36))(a2, v7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a2);
  if (v10)
  {
    fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)a2);
    v11 = *(float *)(a1 + 204);
    v13 = *(_OWORD *)(a1 + 236);
    v14 = *(_QWORD *)(a1 + 252);
    fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>(a2, a3, &v13, v11);
    fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a3);
    if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, 0x4000000000, 1))
      fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a3);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Topological sorting of state-level lattice failed (probably your lexicon has empty words or your LM has epsilon cycles; this is a bad idea.)",
      140);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
  }
  return v10;
}

void sub_1ADE8B02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::loadLmeData(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  double *v22;
  clockid_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD *LmeDataStreams;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  BOOL v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  clockid_t v103;
  __n128 v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  __int128 *v109;
  uint64_t *v110;
  uint64_t *v111;
  __int128 v112;
  std::__shared_weak_count *size;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  __int128 v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  int v134;
  std::string::size_type v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  clockid_t v151;
  __n128 v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  char **v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t *v177;
  std::__shared_weak_count *v178;
  int v179;
  __int128 v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  __int128 v183[2];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::string v204;
  __int128 v205;
  __int128 v206;
  uint64_t *v207;
  _QWORD *v208[2];
  __int128 v209;
  __int128 v210;
  int v211;
  unint64_t v212;
  std::__shared_weak_count *v213;

  v4 = (uint64_t *)a4;
  v7 = a1;
  if (*(_BYTE *)(a1 + 452) && (quasar::SpeechRequestData::isLoadLmeProfile(*a4) & 1) == 0)
  {
    v165 = *(_QWORD *)(v7 + 480);
    if (a2 + 320 != v165)
    {
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(a2 + 320, *(_QWORD *)v165, *(_QWORD *)(v165 + 8), (uint64_t)(*(_QWORD *)(v165 + 8) - *(_QWORD *)v165) >> 5);
      v165 = *(_QWORD *)(v7 + 480);
    }
    std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v165 + 88), v183);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*a3 + 472, v183);
    v166 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
    if (*((_QWORD *)&v183[0] + 1))
    {
      v167 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v169 = *(_QWORD *)(v7 + 480);
    v170 = (uint64_t *)(*a3 + 584);
    if (v170 != (uint64_t *)(v169 + 64))
      std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v170, *(__int128 **)(v169 + 64), *(__int128 **)(v169 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v169 + 72) - *(_QWORD *)(v169 + 64)) >> 3));
  }
  else
  {
    v174 = a2;
    v10 = a2 + 320;
    v9 = *(_QWORD *)(a2 + 320);
    v8 = *(_QWORD *)(v10 + 8);
    if (v8 != v9)
    {
      do
      {
        v11 = v8 - 32;
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v8 - 24);
        v8 = v11;
      }
      while (v11 != v9);
    }
    *(_QWORD *)(v174 + 328) = v9;
    *(_QWORD *)(v174 + 352) = *(_QWORD *)(v174 + 344);
    std::__tree<int>::destroy(v174 + 368, *(_QWORD **)(v174 + 376));
    *(_QWORD *)(v174 + 376) = 0;
    *(_QWORD *)(v174 + 384) = 0;
    *(_QWORD *)(v174 + 368) = v174 + 376;
    v183[0] = 0uLL;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v174 + 392, v183);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
    if (*((_QWORD *)&v183[0] + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)(*a3 + 584));
    quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
    v15 = *(uint64_t **)(*a3 + 472);
    v16 = *(std::__shared_weak_count **)(v7 + 1440);
    v212 = *(_QWORD *)(v7 + 1432);
    v213 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    quasar::SymbolTableList::addSymbolTable(v15, &v212, 0, -1);
    v19 = v213;
    if (v213)
    {
      v20 = (unint64_t *)&v213->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (*(_BYTE *)(v7 + 452))
    {
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, v183);
      v22 = *(double **)&v183[0];
      *(double *)(v7 + 872) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v23) - *v22;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
      if (*((_QWORD *)&v183[0] + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v209 = 0u;
      v210 = 0u;
      v211 = 1065353216;
      v208[0] = 0;
      v208[1] = 0;
      v207 = (uint64_t *)v208;
      v171 = a3;
      v177 = v4;
      if (*(_BYTE *)(v7 + 452))
      {
        v27 = 0;
        v28 = (_QWORD *)(v7 + 496);
        v29 = &std::piecewise_construct;
        v175 = v7;
        do
        {
          LmeDataStreams = (_QWORD *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
          if (v27 >= (uint64_t)(LmeDataStreams[1] - *LmeDataStreams) >> 4)
            break;
          v31 = *(_OWORD *)(*(_QWORD *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4)
                          + 16 * v27);
          v206 = v31;
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
            v205 = v31;
            do
              v35 = __ldxr(v33);
            while (__stxr(v35 + 1, v33));
          }
          else
          {
            v205 = (unint64_t)v31;
          }
          v36 = quasar::OnlineTransducerGraphSearchDecoder::readAndCheckLmeData(v7, (uint64_t **)&v205);
          if (v32)
          {
            v37 = (unint64_t *)&v32->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          memset(&v204, 0, sizeof(v204));
          v39 = v206;
          if ((v36 & 0xFFFFFFFD) != 1)
          {
            v47 = *a3;
            LODWORD(v183[0]) = *(_DWORD *)(v206 + 40);
            *(_QWORD *)((char *)v183 + 4) = v36;
            goto LABEL_119;
          }
          v41 = *(_QWORD **)v206;
          v40 = *(std::__shared_weak_count **)(v206 + 8);
          v202 = *(_QWORD *)v206;
          v203 = v40;
          if (v40)
          {
            v42 = (unint64_t *)&v40->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          std::string::operator=(&v204, (const std::string *)(v39 + 16));
          v201 = 0;
          LODWORD(v199) = v41[20];
          *(_QWORD *)&v183[0] = &v199;
          v201 = *((int *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v207, (int *)&v199, (uint64_t)v29, (unsigned int **)v183)+ 8);
          v45 = v41[20];
          v44 = v41[21];
          LODWORD(v199) = v45;
          *(_QWORD *)&v183[0] = &v199;
          v46 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v207, (int *)&v199, (uint64_t)v29, (unsigned int **)v183);
          *((_DWORD *)v46 + 8) += v44 - v45 + 1;
          if (v201)
          {
            std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,void>(v41 + 28, &v201, &v199);
          }
          else
          {
            v48 = (std::__shared_weak_count *)v41[29];
            v199 = v41[28];
            v200 = v48;
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }
          }
          if (quasar::gLogLevel >= 4)
          {
            v197 = 0u;
            v198 = 0u;
            v195 = 0u;
            v196 = 0u;
            v193 = 0u;
            v194 = 0u;
            v191 = 0u;
            v192 = 0u;
            v189 = 0u;
            v190 = 0u;
            v187 = 0u;
            v188 = 0u;
            v185 = 0u;
            v186 = 0u;
            v184 = 0u;
            memset(v183, 0, sizeof(v183));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v183);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"LME container ", 14);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": offset ", 9);
            v52 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" firstKey ", 10);
            v53 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" lastKey ", 9);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v183);
          }
          v54 = *(uint64_t **)(*a3 + 472);
          v181 = v199;
          v182 = v200;
          if (v200)
          {
            v55 = (unint64_t *)&v200->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v57 = (uint64_t)v29;
          v58 = quasar::SymbolTableList::addSymbolTable(v54, &v181, v201 + v41[20], v27);
          v59 = v58;
          v60 = v182;
          if (!v182)
            goto LABEL_58;
          v61 = (unint64_t *)&v182->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
            if (!v59)
            {
LABEL_105:
              v91 = 0;
              v36 = 6;
              goto LABEL_108;
            }
          }
          else
          {
LABEL_58:
            if (!v58)
              goto LABEL_105;
          }
          v63 = *(unsigned __int8 **)(v202 + 200);
          v64 = (unsigned __int8 *)(v202 + 208);
          if (v63 != (unsigned __int8 *)(v202 + 208))
          {
            v65 = 0;
            while (1)
            {
              if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v28, v63 + 32))
              {
                v66 = *((_QWORD *)v63 + 7);
                if (v66)
                {
                  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66) & 0x80000000) == 0)
                  {
                    v67 = *((_QWORD *)v63 + 7);
                    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
                    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 40))(v67, v68))
                    {
                      *(_QWORD *)&v183[0] = v63 + 32;
                      v69 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v209, v63 + 32, v57, (__int128 **)v183);
                      v70 = v201;
                      if (v201)
                      {
                        v71 = *((_QWORD *)v63 + 7);
                        v179 = v201;
                        std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,void>(v71, &v179, &v180);
                        v183[0] = v180;
                        v180 = 0uLL;
                      }
                      else
                      {
                        v79 = *((_QWORD *)v63 + 8);
                        *(_QWORD *)&v183[0] = *((_QWORD *)v63 + 7);
                        *((_QWORD *)&v183[0] + 1) = v79;
                        if (v79)
                        {
                          v80 = (unint64_t *)(v79 + 8);
                          do
                            v81 = __ldxr(v80);
                          while (__stxr(v81 + 1, v80));
                        }
                      }
                      std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v69 + 5, v183);
                      v82 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
                      if (!*((_QWORD *)&v183[0] + 1))
                        goto LABEL_89;
                      v83 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
                      do
                        v84 = __ldaxr(v83);
                      while (__stlxr(v84 - 1, v83));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                        if (v70)
                        {
LABEL_90:
                          v85 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
                          if (*((_QWORD *)&v180 + 1))
                          {
                            v86 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
                            do
                              v87 = __ldaxr(v86);
                            while (__stlxr(v87 - 1, v86));
                            if (!v87)
                            {
                              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                              std::__shared_weak_count::__release_weak(v85);
                            }
                          }
                        }
                      }
                      else
                      {
LABEL_89:
                        if (v70)
                          goto LABEL_90;
                      }
                      v65 = 1;
                      goto LABEL_97;
                    }
                  }
                }
                if (quasar::gLogLevel >= 4)
                {
                  v197 = 0u;
                  v198 = 0u;
                  v195 = 0u;
                  v196 = 0u;
                  v193 = 0u;
                  v194 = 0u;
                  v191 = 0u;
                  v192 = 0u;
                  v189 = 0u;
                  v190 = 0u;
                  v187 = 0u;
                  v188 = 0u;
                  v185 = 0u;
                  v186 = 0u;
                  v184 = 0u;
                  memset(v183, 0, sizeof(v183));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v183);
                  v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"Ignoring null or arc-less FST for template ", 43);
                  v73 = (char)v63[55];
                  if (v73 >= 0)
                    v74 = (uint64_t)(v63 + 32);
                  else
                    v74 = *((_QWORD *)v63 + 4);
                  if (v73 >= 0)
                    v75 = v63[55];
                  else
                    v75 = *((_QWORD *)v63 + 5);
LABEL_81:
                  v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" in stream # ", 13);
                  v78 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)".", 1);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v183);
                }
              }
              else if (quasar::gLogLevel >= 4)
              {
                v197 = 0u;
                v198 = 0u;
                v195 = 0u;
                v196 = 0u;
                v193 = 0u;
                v194 = 0u;
                v191 = 0u;
                v192 = 0u;
                v189 = 0u;
                v190 = 0u;
                v187 = 0u;
                v188 = 0u;
                v185 = 0u;
                v186 = 0u;
                v184 = 0u;
                memset(v183, 0, sizeof(v183));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v183);
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"Ignoring unsupported template ", 30);
                v76 = (char)v63[55];
                if (v76 >= 0)
                  v74 = (uint64_t)(v63 + 32);
                else
                  v74 = *((_QWORD *)v63 + 4);
                if (v76 >= 0)
                  v75 = v63[55];
                else
                  v75 = *((_QWORD *)v63 + 5);
                goto LABEL_81;
              }
LABEL_97:
              v88 = (unsigned __int8 *)*((_QWORD *)v63 + 1);
              if (v88)
              {
                do
                {
                  v89 = v88;
                  v88 = *(unsigned __int8 **)v88;
                }
                while (v88);
              }
              else
              {
                do
                {
                  v89 = (unsigned __int8 *)*((_QWORD *)v63 + 2);
                  v90 = *(_QWORD *)v89 == (_QWORD)v63;
                  v63 = v89;
                }
                while (!v90);
              }
              v63 = v89;
              if (v89 == v64)
                goto LABEL_107;
            }
          }
          v65 = 0;
LABEL_107:
          v91 = v65 & 1;
          a3 = v171;
LABEL_108:
          v29 = (void *)v57;
          v92 = v200;
          v7 = v175;
          if (v200)
          {
            v93 = (unint64_t *)&v200->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v95 = v203;
          if (v203)
          {
            v96 = (unint64_t *)&v203->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          v47 = *a3;
          LODWORD(v183[0]) = *(_DWORD *)(v206 + 40);
          *(_QWORD *)((char *)v183 + 4) = __PAIR64__(v91, v36);
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v183[1], v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
            goto LABEL_120;
          }
LABEL_119:
          v183[1] = *(_OWORD *)&v204.__r_.__value_.__l.__data_;
          *(_QWORD *)&v184 = *((_QWORD *)&v204.__r_.__value_.__l + 2);
LABEL_120:
          std::vector<quasar::LmeInfo>::emplace_back<quasar::LmeInfo>((uint64_t *)(v47 + 584), (uint64_t *)v183);
          v4 = v177;
          if (SBYTE7(v184) < 0)
            operator delete(*(void **)&v183[1]);
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v204.__r_.__value_.__l.__data_);
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
          if (*((_QWORD *)&v206 + 1))
          {
            v99 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          ++v27;
        }
        while (*(_BYTE *)(v7 + 452));
      }
      v101 = (_QWORD *)quasar::SpeechRequestData::getLmeDataStreams((quasar::SpeechRequestData *)*v4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*a3 + 592) - *(_QWORD *)(*a3 + 584)) >> 3) != (uint64_t)(v101[1] - *v101) >> 4
        && quasar::gLogLevel >= 2)
      {
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        v185 = 0u;
        v186 = 0u;
        v184 = 0u;
        memset(v183, 0, sizeof(v183));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v183);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"lmeDataStreams and lmeInfos size mismatch. Should NEVER happen", 62);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v183);
      }
      *(_QWORD *)(v7 + 2248) = *(_QWORD *)(v7 + 2240);
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, v183);
      v104.n128_f64[0] = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v103);
      v105 = v174 + 320;
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
      if (*((_QWORD *)&v183[0] + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, v104);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = (__int128 *)v210;
      if ((_QWORD)v210)
      {
        v176 = (int *)(v7 + 888);
        v172 = (char **)(v7 + 2240);
        v173 = (int *)(v7 + 892);
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v7 + 496), (unsigned __int8 *)v109 + 16))
          {
            v110 = (uint64_t *)*((_QWORD *)v109 + 5);
            v111 = (uint64_t *)*((_QWORD *)v109 + 6);
            if (v110 != v111)
            {
              *(_OWORD *)&v204.__r_.__value_.__l.__data_ = 0uLL;
              if ((unint64_t)((char *)v111 - (char *)v110) >= 0x11 && *v176 && *v173)
              {
                std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFst,std::allocator<fst::quasar::MergeTrieFst>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>((uint64_t)v109 + 40, v176, v173, v109 + 1, v183);
                v112 = v183[0];
                v183[0] = 0uLL;
                size = (std::__shared_weak_count *)v204.__r_.__value_.__l.__size_;
                *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v112;
                if (size)
                {
                  v114 = (unint64_t *)&size->__shared_owners_;
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                v116 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
                if (*((_QWORD *)&v183[0] + 1))
                {
                  v117 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                }
              }
              else
              {
                std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v204, v110);
              }
              v123 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(v7 + 576, (const void **)v109 + 2);
              v124 = *(_OWORD *)&v204.__r_.__value_.__l.__data_;
              v178 = (std::__shared_weak_count *)v204.__r_.__value_.__l.__size_;
              if (v204.__r_.__value_.__l.__size_)
              {
                v125 = (unint64_t *)(v204.__r_.__value_.__l.__size_ + 8);
                do
                  v126 = __ldxr(v125);
                while (__stxr(v126 + 1, v125));
                LODWORD(v183[0]) = v123;
                *(__int128 *)((char *)v183 + 8) = v124;
                do
                  v127 = __ldxr(v125);
                while (__stxr(v127 + 1, v125));
              }
              else
              {
                LODWORD(v183[0]) = v123;
                *((_QWORD *)&v183[0] + 1) = v204.__r_.__value_.__r.__words[0];
                *(_QWORD *)&v183[1] = 0;
              }
              DWORD2(v183[1]) = 0;
              std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100]((uint64_t *)v105, (uint64_t)v183);
              v128 = *(std::__shared_weak_count **)&v183[1];
              if (*(_QWORD *)&v183[1])
              {
                v129 = (unint64_t *)(*(_QWORD *)&v183[1] + 8);
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              if (v178)
              {
                v131 = (unint64_t *)&v178->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              if (*(_QWORD *)(v7 + 2192))
              {
                v133 = quasar::QsrTextSymbolTable::Find(*(_QWORD *)(v7 + 1432), (uint64_t)(v109 + 1));
                v134 = v133;
                v135 = v204.__r_.__value_.__r.__words[0];
                v136 = *(_QWORD *)(v7 + 2248);
                v137 = *(_QWORD *)(v7 + 2256);
                if (v136 >= v137)
                {
                  v139 = (uint64_t)(v136 - (_QWORD)*v172) >> 4;
                  v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v141 = v137 - (_QWORD)*v172;
                  if (v141 >> 3 > v140)
                    v140 = v141 >> 3;
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0)
                    v142 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v142 = v140;
                  if (v142)
                    v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v7 + 2256, v142);
                  else
                    v143 = 0;
                  v144 = &v143[16 * v139];
                  *(_DWORD *)v144 = v134;
                  *((_QWORD *)v144 + 1) = v135;
                  v145 = *(char **)(v7 + 2248);
                  v146 = *(char **)(v7 + 2240);
                  v147 = v144;
                  if (v145 == v146)
                  {
                    v4 = v177;
                  }
                  else
                  {
                    v4 = v177;
                    do
                    {
                      *((_OWORD *)v147 - 1) = *((_OWORD *)v145 - 1);
                      v147 -= 16;
                      v145 -= 16;
                    }
                    while (v145 != v146);
                    v145 = *v172;
                  }
                  *(_QWORD *)(v7 + 2240) = v147;
                  v138 = v144 + 16;
                  *(_QWORD *)(v7 + 2248) = v144 + 16;
                  *(_QWORD *)(v7 + 2256) = &v143[16 * v142];
                  if (v145)
                    operator delete(v145);
                }
                else
                {
                  *(_DWORD *)v136 = v133;
                  *(_QWORD *)(v136 + 8) = v135;
                  v138 = (char *)(v136 + 16);
                }
                *(_QWORD *)(v7 + 2248) = v138;
              }
              v148 = (std::__shared_weak_count *)v204.__r_.__value_.__l.__size_;
              if (v204.__r_.__value_.__l.__size_)
              {
                v149 = (unint64_t *)(v204.__r_.__value_.__l.__size_ + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
            }
          }
          else if (quasar::gLogLevel >= 4)
          {
            v197 = 0u;
            v198 = 0u;
            v195 = 0u;
            v196 = 0u;
            v193 = 0u;
            v194 = 0u;
            v191 = 0u;
            v192 = 0u;
            v189 = 0u;
            v190 = 0u;
            v187 = 0u;
            v188 = 0u;
            v185 = 0u;
            v186 = 0u;
            v184 = 0u;
            memset(v183, 0, sizeof(v183));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v183);
            v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"Ignoring unsupported template ", 30);
            v120 = *((char *)v109 + 39);
            if (v120 >= 0)
              v121 = (uint64_t)(v109 + 1);
            else
              v121 = *((_QWORD *)v109 + 2);
            if (v120 >= 0)
              v122 = *((unsigned __int8 *)v109 + 39);
            else
              v122 = *((_QWORD *)v109 + 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, v121, v122);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v183);
          }
          v109 = *(__int128 **)v109;
        }
        while (v109);
      }
      quasar::SpeechRequestData::getRecogRequestTimer(*v4, v183);
      v152.n128_f64[0] = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v151);
      v153 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
      if (*((_QWORD *)&v183[0] + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v153->__on_zero_shared)(v153, v152);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      if (quasar::gLogLevel >= 4)
      {
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        v185 = 0u;
        v186 = 0u;
        v184 = 0u;
        memset(v183, 0, sizeof(v183));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v183);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"lmeMergeInitTime ", 17);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v183);
      }
      quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels((const std::string *)v7, v171, (quasar::SpeechRequestData **)v4, (uint64_t *)v105, v174 + 344, (quasar::Location *)(v174 + 232), (std::vector<std::string> **)v183);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v174 + 456, v183);
      v156 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
      if (*((_QWORD *)&v183[0] + 1))
      {
        v157 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      quasar::OnlineTransducerGraphSearchDecoder::appendEmptyFsts((_QWORD *)v7, (uint64_t *)v105);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v174 + 392), (uint64_t *)(v7 + 856));
      quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::clear(*(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies **)(v7 + 480));
      v159 = *(_QWORD *)(v7 + 480);
      if (v159 != v105)
      {
        std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(v159, *(_QWORD *)(v174 + 320), *(_QWORD *)(v174 + 328), (uint64_t)(*(_QWORD *)(v174 + 328) - *(_QWORD *)(v174 + 320)) >> 5);
        v105 = *(_QWORD *)(v7 + 480);
      }
      if (v105 + 24 != v174 + 344)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v105 + 24), *(char **)(v174 + 344), *(_QWORD *)(v174 + 352), (uint64_t)(*(_QWORD *)(v174 + 352) - *(_QWORD *)(v174 + 344)) >> 2);
        v105 = *(_QWORD *)(v7 + 480);
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v105 + 48), (uint64_t *)(v7 + 856));
      v160 = *v171;
      v161 = (uint64_t *)(*(_QWORD *)(v7 + 480) + 64);
      if (v161 != (uint64_t *)(*v171 + 584))
      {
        std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(v161, *(__int128 **)(v160 + 584), *(__int128 **)(v160 + 592), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v160 + 592) - *(_QWORD *)(v160 + 584)) >> 3));
        v160 = *v171;
      }
      std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>(*(uint64_t **)(v160 + 472), v183);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*(_QWORD *)(v7 + 480) + 88, v183);
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v183[0] + 1);
      if (*((_QWORD *)&v183[0] + 1))
      {
        v163 = (unint64_t *)(*((_QWORD *)&v183[0] + 1) + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      std::__tree<int>::destroy((uint64_t)&v207, v208[0]);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table((uint64_t)&v209);
    }
  }
}

void sub_1ADE8C18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1 - 216, *(_QWORD **)(v1 - 208));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table(v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t **quasar::OnlineTransducerGraphSearchDecoder::setUpDecoderPassData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *j;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t **result;
  std::string::size_type v56;
  std::__shared_weak_count *v57;
  std::string v58;
  __int128 v59;
  void *v60;
  std::__shared_weak_count *v61;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v64;
  __int128 v65;

  v6 = *(_QWORD *)(a1 + 1432);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 96) + 112))(*(_QWORD *)(v6 + 96));
  if ((v7 & 0x8000000000000000) == 0)
    v7 += *(_QWORD *)(v6 + 120);
  *(_DWORD *)(a2 + 448) = v7;
  *(_QWORD *)(a2 + 688) = *(unsigned int *)(a1 + 1936);
  if (a2 + 696 != a1 + 1896)
  {
    *(_DWORD *)(a2 + 728) = *(_DWORD *)(a1 + 1928);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a2 + 696), *(uint64_t **)(a1 + 1912), 0);
  }
  v9 = *(_QWORD *)(a2 + 248);
  for (i = *(_QWORD *)(a2 + 256);
        i != v9;
  *(_QWORD *)(a2 + 256) = v9;
  v10 = *(uint64_t **)(a1 + 2048);
  for (j = *(uint64_t **)(a1 + 2056); v10 != j; v10 += 2)
  {
    v12 = v10[1];
    *(_QWORD *)&v65 = *v10;
    *((_QWORD *)&v65 + 1) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    if (*(_BYTE *)(a1 + 2124) || *(_BYTE *)(a1 + 440))
    {
      v15 = *v10;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v15, (uint64_t)&__p, &lpsrc);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (lpsrc)
      {
        if (v16)
        {
          v17 = (uint64_t)v16;
          v60 = v16;
          v61 = v64;
          if (v64)
          {
            p_shared_owners = (unint64_t *)&v64->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPath(*v10, &__p);
          quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(*v10, &v58);
          quasar::StateAccessRecordingFst::getWrappedFst(v17, &v56);
          std::allocate_shared[abi:ne180100]<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::string,std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,void>((__int128 *)&__p, (uint64_t)&v58, &v56, &v59);
          v20 = v59;
          v59 = 0uLL;
          v21 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
          v65 = v20;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v24 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          if (*((_QWORD *)&v59 + 1))
          {
            v25 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = v57;
          if (v57)
          {
            v28 = (unint64_t *)&v57->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v58.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v30 = v61;
          if (v61)
          {
            v31 = (unint64_t *)&v61->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
      }
      v33 = v64;
      if (v64)
      {
        v34 = (unint64_t *)&v64->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)(a2 + 248), &v65);
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  if (a2 + 272 != a1 + 2096)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(a2 + 272, *(uint64_t **)(a1 + 2096), *(uint64_t **)(a1 + 2104), (uint64_t)(*(_QWORD *)(a1 + 2104) - *(_QWORD *)(a1 + 2096)) >> 4);
  v39 = (void **)(a2 + 296);
  if (a2 + 296 != a1 + 2000)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 296), *(char **)(a1 + 2000), *(_QWORD *)(a1 + 2008), (uint64_t)(*(_QWORD *)(a1 + 2008) - *(_QWORD *)(a1 + 2000)) >> 2);
  if (*(float *)(a1 + 2120) > 0.0)
  {
    v40 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    v41 = *(_QWORD *)(v40 + 272);
    v42 = *(_QWORD *)(v40 + 280);
    if (v41 != v42)
    {
      v43 = (_QWORD *)(a2 + 312);
      v44 = *(char **)(a2 + 304);
      do
      {
        v45 = *(_DWORD *)(*(_QWORD *)v41 + 12);
        if ((unint64_t)v44 >= *v43)
        {
          v47 = (char *)*v39;
          v48 = (v44 - (_BYTE *)*v39) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = *v43 - (_QWORD)v47;
          if (v50 >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 312, v51);
            v47 = *(char **)(a2 + 296);
            v44 = *(char **)(a2 + 304);
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = v45;
          v46 = v53 + 4;
          while (v44 != v47)
          {
            v54 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          *(_QWORD *)(a2 + 296) = v53;
          *(_QWORD *)(a2 + 304) = v46;
          *(_QWORD *)(a2 + 312) = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v44 = v45;
          v46 = v44 + 4;
        }
        *(_QWORD *)(a2 + 304) = v46;
        v41 += 16;
        v44 = v46;
      }
      while (v41 != v42);
    }
  }
  if (a2 + 408 != a1 + 768)
  {
    *(_DWORD *)(a2 + 440) = *(_DWORD *)(a1 + 800);
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,std::pair<int,int>>,void *> *>>((_QWORD *)(a2 + 408), *(_QWORD **)(a1 + 784), 0);
  }
  result = (uint64_t **)(a2 + 368);
  if (a2 + 368 != a1 + 832)
    return std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,float>,std::__tree_node<std::__value_type<int,float>,void *> *,long>>(result, *(_QWORD **)(a1 + 832), (_QWORD *)(a1 + 840));
  return result;
}

void sub_1ADE8C804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::decoderObjectSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  float v9;
  char *v10;
  char *v11;
  float v12;
  char *v13;
  uint64_t v14;
  float v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  uint64_t *v30;
  float v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  int v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 **v64;
  std::string *v65;
  std::__shared_weak_count *size;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 **v78;
  _QWORD *v79;
  int v80;
  _QWORD *v81;
  unint64_t v82;
  const void **i;
  std::string::size_type v84;
  int v85;
  int v86;
  char **v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  fst *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string::size_type v111;
  void **v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  fst *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string::size_type v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  _QWORD *v137;
  int v138;
  uint64_t v139;
  int v140;
  std::string::size_type v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  void *v149[2];
  char v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  std::string __p;
  std::string v158[2];
  void *v159;
  char v160;
  void *v161;
  char v162;
  void *v163;
  char v164;
  uint64_t (**v165)(void **);
  uint64_t v166;
  char **v167;
  char *v168[2];
  void *v169;
  uint64_t v170;
  void *v171;
  _QWORD *v172;
  void *v173;
  uint64_t v174;
  std::string v175;
  unint64_t v176;
  void *v177[3];
  _QWORD **v178;
  _QWORD *v179[2];
  std::string::size_type v180;
  std::__shared_weak_count *v181;
  _BYTE __str[32];
  _QWORD v183[4];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;

  v8 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  v9 = *(float *)(a1 + 2120);
  if (v9 <= 0.0)
  {
    v10 = *(char **)(v8 + 272);
    v11 = *(char **)(v8 + 280);
    v12 = 0.0;
  }
  else
  {
    v10 = *(char **)(v8 + 272);
    v11 = *(char **)(v8 + 280);
    v12 = 0.0;
    if (v10 != v11)
    {
      v13 = *(char **)(v8 + 272);
      do
      {
        v14 = *(_QWORD *)v13;
        v13 += 16;
        v12 = v12 + *(float *)(v14 + 12);
      }
      while (v13 != v11);
    }
    if (v12 >= v9)
    {
      v15 = v9 / v12;
      if (quasar::gLogLevel >= 5)
      {
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        v185 = 0u;
        v186 = 0u;
        v184 = 0u;
        memset(v183, 0, sizeof(v183));
        memset(__str, 0, sizeof(__str));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Extra LM weight exceeds max-total-extra-weight, rescaling with ", 63);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
        v10 = *(char **)(v8 + 272);
        v11 = *(char **)(v8 + 280);
      }
      if (v10 != v11)
      {
        v16 = v10;
        do
        {
          v17 = *(_QWORD *)v16;
          v16 += 16;
          *(float *)(v17 + 12) = v15 * *(float *)(v17 + 12);
        }
        while (v16 != v11);
      }
      v12 = *(float *)(a1 + 2120);
    }
  }
  v148 = a4;
  v18 = *(_QWORD *)(a1 + 1024);
  if (((v11 - v10) >> 4) + ((uint64_t)(*(_QWORD *)(a1 + 2008) - *(_QWORD *)(a1 + 2000)) >> 2) != (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 4)
  {
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    v184 = 0u;
    memset(v183, 0, sizeof(v183));
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "some FST/NN LMs failed to load");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>(*(_QWORD *)(a1 + 1960), __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 896, (__int128 *)__str);
  v19 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v180 = 0;
  v181 = 0;
  if (*(_QWORD *)(v18 + 8) - *(_QWORD *)v18 == 16)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v180, *(uint64_t **)v18);
  }
  else
  {
    v22 = operator new(0x30uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &unk_1E5D45858;
    v22[4] = 0;
    v22[5] = 0;
    v22[3] = 0;
    *(_QWORD *)__str = v22 + 3;
    *(_QWORD *)&__str[8] = v22;
    v23 = (uint64_t **)(a1 + 992);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 992, (__int128 *)__str);
    v24 = *(std::__shared_weak_count **)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(_QWORD *)(a1 + 2000);
    if (*(_QWORD *)(a1 + 2008) != v27)
    {
      v28 = 0;
      v29 = 1.0 - v12;
      do
      {
        v30 = *v23;
        v31 = *(float *)(v27 + 4 * v28);
        v32 = *(_OWORD *)(*(_QWORD *)v18 + 16 * v28);
        *(_OWORD *)__str = v32;
        if (*((_QWORD *)&v32 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        *(float *)&__str[16] = v29 * v31;
        std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v30, (uint64_t)__str);
        v35 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v36 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        *(float *)(*(_QWORD *)(a2 + 296) + 4 * v28) = v29 * *(float *)(*(_QWORD *)(a2 + 296) + 4 * v28);
        ++v28;
        v27 = *(_QWORD *)(a1 + 2000);
      }
      while (v28 < (*(_QWORD *)(a1 + 2008) - v27) >> 2);
    }
    v38 = *(_QWORD *)(v8 + 272);
    if (*(_QWORD *)(v8 + 280) != v38)
    {
      v39 = 0;
      do
      {
        v40 = *(uint64_t **)(a1 + 992);
        v41 = *(_DWORD *)(*(_QWORD *)(v38 + 16 * v39) + 12);
        v42 = *(_OWORD *)(*(_QWORD *)v18 + 16 * (v39 + ((*(_QWORD *)(a1 + 2008) - *(_QWORD *)(a1 + 2000)) >> 2)));
        *(_OWORD *)__str = v42;
        if (*((_QWORD *)&v42 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        *(_DWORD *)&__str[16] = v41;
        std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100](v40, (uint64_t)__str);
        v45 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v46 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        ++v39;
        v38 = *(_QWORD *)(v8 + 272);
      }
      while (v39 < (*(_QWORD *)(v8 + 280) - v38) >> 4);
    }
    v48 = *v23;
    LODWORD(v158[0].__r_.__value_.__l.__data_) = 0;
    std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType,void>(v48, (int *)v158, __str);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 976, (__int128 *)__str);
    v49 = *(std::__shared_weak_count **)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v50 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v180, (uint64_t *)(a1 + 976));
  }
  v52 = *(_QWORD *)(a2 + 216);
  if (v52)
  {
    std::set<int>::set[abi:ne180100]((uint64_t *)&v178, v52 + 32);
  }
  else
  {
    v179[0] = 0;
    v179[1] = 0;
    v178 = v179;
  }
  quasar::DecoderPassData::getLeftContextLabels(a2, *(_QWORD *)(*(_QWORD *)a3 + 472), (_QWORD *)(a1 + 1896), (uint64_t)&v178, (char **)v177);
  if (quasar::gLogLevel >= 4)
  {
    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    v191 = 0u;
    v192 = 0u;
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    v185 = 0u;
    v186 = 0u;
    v184 = 0u;
    memset(v183, 0, sizeof(v183));
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Using ", 6);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" symbol(s) for left context from ", 33);
    v54 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" word(s)", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
  }
  v158[0].__r_.__value_.__r.__words[0] = v180;
  std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::vector<int> &,void>(v158, (unsigned int **)v177, __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 1008, (__int128 *)__str);
  v55 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v56 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>> &,void>((uint64_t *)(a1 + 896), (uint64_t *)(a1 + 1008), __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 928, (__int128 *)__str);
  v58 = *(std::__shared_weak_count **)&__str[8];
  v59 = v148;
  if (*(_QWORD *)&__str[8])
  {
    v60 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v62 = *(_QWORD **)(a1 + 2176);
  if (v62)
  {
    v63 = *(_QWORD *)(*(_QWORD *)v148 + 24);
    kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(*(_QWORD **)(a1 + 2176));
    v64 = (__int128 **)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v62 + 16))(*v62, v63 + 128);
    memset(__str, 0, 24);
    v65 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)__str, *v64, v64[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v64[1] - (char *)*v64) >> 3));
    quasar::OnlineTransducerGraphSearchDecoder::createReferenceFst((uint64_t)v65, (__int128 **)__str, a3, v148, *(_QWORD *)(a1 + 2208));
    std::allocate_shared[abi:ne180100]<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>(*(_QWORD *)(a1 + 2208), v158);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 944, (__int128 *)v158);
    size = (std::__shared_weak_count *)v158[0].__r_.__value_.__l.__size_;
    if (v158[0].__r_.__value_.__l.__size_)
    {
      v67 = (unint64_t *)(v158[0].__r_.__value_.__l.__size_ + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 912), (uint64_t *)(a1 + 928));
    std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t *)(a1 + 912), (uint64_t *)(a1 + 944), v158);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 928, (__int128 *)v158);
    v69 = (std::__shared_weak_count *)v158[0].__r_.__value_.__l.__size_;
    v59 = v148;
    if (v158[0].__r_.__value_.__l.__size_)
    {
      v70 = (unint64_t *)(v158[0].__r_.__value_.__l.__size_ + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
  }
  LODWORD(v72) = *(_DWORD *)(a1 + 48);
  if ((_DWORD)v72)
    v72 = v72;
  else
    v72 = 0x20000;
  v176 = v72;
  std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,unsigned long const&,void>((uint64_t *)(a1 + 928), &v176, __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 960, (__int128 *)__str);
  v73 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v74 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(_QWORD **)(a1 + 2192);
  if (v76)
  {
    v77 = *(_QWORD *)(*(_QWORD *)v59 + 24);
    kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(*(_QWORD **)(a1 + 2192));
    v78 = (__int128 **)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v76 + 16))(*v76, v77 + 128);
    memset(&v175, 0, sizeof(v175));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v175, *v78, v78[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v78[1] - (char *)*v78) >> 3));
    v79 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v173);
    quasar::OnlineTransducerGraphSearchDecoder::createReferenceFst((uint64_t)v79, (__int128 **)&v175, a3, v59, (uint64_t)&v173);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v171);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v169);
    v80 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v171);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v171);
    v81 = v172;
    *((_DWORD *)v172 + 22) = v80;
    v82 = (*(uint64_t (**)(_QWORD *))(*v81 + 24))(v81);
    v81[1] = v82 & 0xCCFFFFF0007 | (((v82 >> 35) & 1) << 37) | v81[1] & 4;
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v171, v80, 0.0);
    v168[0] = 0;
    v168[1] = 0;
    v167 = v168;
    v84 = v175.__r_.__value_.__l.__size_;
    for (i = (const void **)v175.__r_.__value_.__r.__words[0]; i != (const void **)v84; i += 3)
    {
      if (v168 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v167, i))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v167, i, (uint64_t)i);
        *(_DWORD *)__str = quasar::SymbolTableList::strToSymbolId(*(_QWORD *)(*(_QWORD *)a3 + 472), (uint64_t)i);
        *(_QWORD *)&__str[4] = *(unsigned int *)__str;
        *(_DWORD *)&__str[12] = v80;
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v171);
        fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v172, v80, (float *)__str);
      }
    }
    v85 = quasar::QsrTextSymbolTable::NumSymbols(*(quasar::QsrTextSymbolTable **)(a1 + 1432));
    v86 = v85;
    v87 = (char **)(a1 + 2240);
    v88 = *(_QWORD *)(a1 + 2248);
    v89 = *(_QWORD *)(a1 + 2256);
    if (v88 >= v89)
    {
      v92 = (uint64_t)(v88 - (_QWORD)*v87) >> 4;
      v93 = v92 + 1;
      if ((unint64_t)(v92 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v94 = v89 - (_QWORD)*v87;
      if (v94 >> 3 > v93)
        v93 = v94 >> 3;
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
        v95 = 0xFFFFFFFFFFFFFFFLL;
      else
        v95 = v93;
      if (v95)
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 2256, v95);
      else
        v96 = 0;
      v97 = &v96[16 * v92];
      v98 = &v96[16 * v95];
      *(_DWORD *)v97 = v86;
      *((_QWORD *)v97 + 1) = &v171;
      v90 = v97 + 16;
      v99 = *(char **)(a1 + 2248);
      v100 = *(char **)(a1 + 2240);
      if (v99 != v100)
      {
        do
        {
          *((_OWORD *)v97 - 1) = *((_OWORD *)v99 - 1);
          v97 -= 16;
          v99 -= 16;
        }
        while (v99 != v100);
        v99 = *v87;
      }
      *(_QWORD *)(a1 + 2240) = v97;
      *(_QWORD *)(a1 + 2248) = v90;
      *(_QWORD *)(a1 + 2256) = v98;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_DWORD *)v88 = v85;
      *(_QWORD *)(v88 + 8) = &v171;
      v90 = (char *)(v88 + 16);
    }
    *(_QWORD *)(a1 + 2248) = v90;
    v101 = quasar::QsrTextSymbolTable::NumSymbols(*(quasar::QsrTextSymbolTable **)(a1 + 1432));
    __str[0] = FLAGS_fst_default_cache_gc;
    *(_OWORD *)&__str[8] = (unint64_t)FLAGS_fst_default_cache_gc_limit;
    *(_QWORD *)&__str[24] = v101;
    v183[0] = 0x100000002;
    *(_OWORD *)&v183[1] = xmmword_1AE146E50;
    LOBYTE(v183[3]) = 0;
    *(_QWORD *)&v184 = 0;
    fst::Replace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((_QWORD *)(a1 + 2240), (uint64_t)&v169, (uint64_t)__str);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v169);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v165);
    __str[0] = 1;
    *(_DWORD *)&__str[4] = 0;
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v169, (uint64_t)&v173, (uint64_t)&v165, (uint64_t)__str);
    *(_DWORD *)__str = 1;
    fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v165, __str);
    v102 = v165[14]((void **)&v165);
    ((void (*)(uint64_t (***)(void **), uint64_t))v165[36])(&v165, v102);
    fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v165, 1, -1, INFINITY, 0.00097656);
    fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v165);
    if (quasar::gLogLevel >= 4)
    {
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v189 = 0u;
      v190 = 0u;
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      v184 = 0u;
      memset(v183, 0, sizeof(v183));
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"This is the phonetic reference FST projected to the input side", 62);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
    }
    v103 = *(_QWORD *)(a1 + 1432);
    v105 = *(void **)(v103 + 96);
    v104 = *(std::__shared_weak_count **)(v103 + 104);
    v149[0] = v105;
    v149[1] = v104;
    if (v104)
    {
      p_shared_owners = (unint64_t *)&v104->__shared_owners_;
      do
        v107 = __ldxr(p_shared_owners);
      while (__stxr(v107 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__str, " ");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v108 = (fst *)fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstPrinter((uint64_t)v158, (uint64_t)&v165, (uint64_t)v105, 0, 0, 0, 1, (__int128 *)__str, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (v104)
    {
      v109 = (unint64_t *)&v104->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v111 = fst::cout(v108);
    std::string::basic_string[abi:ne180100]<0>(__str, "standard output");
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Print(v158, v111, (std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v155, *(_QWORD *)(a1 + 1944));
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v155);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v165);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__str);
    v112 = (void **)(a1 + 2224);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2224, (__int128 *)__str);
    v113 = *(std::__shared_weak_count **)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v114 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = *v112;
    __str[0] = 1;
    *(_DWORD *)&__str[4] = 0;
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v155, (uint64_t)&v165, (uint64_t)v116, (uint64_t)__str);
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(*v112);
    if (quasar::gLogLevel >= 4)
    {
      v195 = 0u;
      v196 = 0u;
      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      v189 = 0u;
      v190 = 0u;
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      v184 = 0u;
      memset(v183, 0, sizeof(v183));
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Oracle FST has ", 15);
      (*(void (**)(void *))(*(_QWORD *)*v112 + 160))(*v112);
      v117 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" states", 7);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
    }
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v153);
    fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)*v112, (uint64_t)&v153, 1, 0, 0, -1, 0, INFINITY);
    v118 = *(_QWORD *)(a1 + 1448);
    v119 = *(_QWORD *)(a1 + 1432);
    v121 = *(_QWORD *)(v119 + 96);
    v120 = *(std::__shared_weak_count **)(v119 + 104);
    v151 = v121;
    v152 = v120;
    if (v120)
    {
      v122 = (unint64_t *)&v120->__shared_owners_;
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    std::string::basic_string[abi:ne180100]<0>(v149, "");
    v124 = (fst *)fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstPrinter((uint64_t)__str, (uint64_t)&v153, v118, v121, 0, 0, 1, (__int128 *)&__p, (__int128 *)v149);
    if (v150 < 0)
      operator delete(v149[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v125 = v152;
    if (v152)
    {
      v126 = (unint64_t *)&v152->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = fst::cout(v124);
    std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
    fst::FstPrinter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Print((std::string *)__str, v128, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v91 = *v112;
    if (SHIBYTE(v187) < 0)
      operator delete(*((void **)&v186 + 1));
    if (SBYTE7(v186) < 0)
      operator delete((void *)v185);
    if (SBYTE7(v184) < 0)
      operator delete((void *)v183[2]);
    v153 = &unk_1E5D256C0;
    v129 = v154;
    if (v154)
    {
      v130 = *(_DWORD *)(v154 + 56) - 1;
      *(_DWORD *)(v154 + 56) = v130;
      if (!v130)
        (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
    }
    v155 = &unk_1E5D256C0;
    v131 = v156;
    if (v156)
    {
      v132 = *(_DWORD *)(v156 + 56) - 1;
      *(_DWORD *)(v156 + 56) = v132;
      if (!v132)
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
    }
    if (v164 < 0)
      operator delete(v163);
    if (v162 < 0)
      operator delete(v161);
    if (v160 < 0)
      operator delete(v159);
    v165 = (uint64_t (**)(void **))&unk_1E5D256C0;
    v133 = v166;
    if (v166)
    {
      v134 = *(_DWORD *)(v166 + 56) - 1;
      *(_DWORD *)(v166 + 56) = v134;
      if (!v134)
        (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
    }
    std::__tree<std::string>::destroy((uint64_t)&v167, v168[0]);
    v169 = &unk_1E5D256C0;
    v135 = v170;
    if (v170)
    {
      v136 = *(_DWORD *)(v170 + 56) - 1;
      *(_DWORD *)(v170 + 56) = v136;
      if (!v136)
        (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
    }
    v171 = &unk_1E5D256C0;
    v137 = v172;
    if (v172)
    {
      v138 = *((_DWORD *)v172 + 14) - 1;
      *((_DWORD *)v172 + 14) = v138;
      if (!v138)
        (*(void (**)(_QWORD *))(*v137 + 8))(v137);
    }
    v173 = &unk_1E5D256C0;
    v139 = v174;
    if (v174)
    {
      v140 = *(_DWORD *)(v174 + 56) - 1;
      *(_DWORD *)(v174 + 56) = v140;
      if (!v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
    }
    *(_QWORD *)__str = &v175;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  }
  else
  {
    v91 = *(void **)(a1 + 1944);
  }
  v158[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 960);
  if (*(_BYTE *)(a1 + 1688))
    v141 = a1 + 1768;
  else
    v141 = 0;
  v175.__r_.__value_.__r.__words[0] = v141;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,void>((uint64_t)v91, a1 + 1256, v158, (uint64_t *)&v175, __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 1040, (__int128 *)__str);
  v142 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v143 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v177[0])
  {
    v177[1] = v177[0];
    operator delete(v177[0]);
  }
  std::__tree<int>::destroy((uint64_t)&v178, v179[0]);
  v145 = v181;
  if (v181)
  {
    v146 = (unint64_t *)&v181->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
}

void sub_1ADE8D9AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  __break(1u);
}

void sub_1ADE8D9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _DWORD *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  int v66;

  if (a26 < 0)
    operator delete(__p);
  fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstPrinter((uint64_t)&a66);
  if (a18)
  {
    v66 = a18[14] - 1;
    a18[14] = v66;
    if (!v66)
      (*(void (**)(_DWORD *))(*(_QWORD *)a18 + 8))(a18);
  }
  JUMPOUT(0x1ADE8DB84);
}

void sub_1ADE8DAAC()
{
  JUMPOUT(0x1ADE8DBB8);
}

void sub_1ADE8DAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  uint64_t v71;
  int v72;

  if (a26 < 0)
    operator delete(__p);
  if (a71 < 0)
    operator delete(a66);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a43 = &unk_1E5D256C0;
  v71 = a44;
  if (a44)
  {
    v72 = *(_DWORD *)(a44 + 56) - 1;
    *(_DWORD *)(a44 + 56) = v72;
    if (!v72)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  }
  JUMPOUT(0x1ADE8DC4CLL);
}

void sub_1ADE8DB20()
{
  JUMPOUT(0x1ADE8DC8CLL);
}

void sub_1ADE8DB28()
{
  JUMPOUT(0x1ADE8DCC0);
}

void sub_1ADE8DB34()
{
  JUMPOUT(0x1ADE8DCF4);
}

void sub_1ADE8DB3C()
{
  JUMPOUT(0x1ADE8DCF8);
}

void sub_1ADE8DB68()
{
  JUMPOUT(0x1ADE8DD14);
}

void sub_1ADE8DB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a63);
  JUMPOUT(0x1ADE8DB84);
}

void sub_1ADE8DB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _DWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,char a42,char *a43,uint64_t a44,void *a45,uint64_t a46,void *a47,uint64_t a48,void *a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,char a58,_QWORD *a59,uint64_t a60,char a61)
{
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;

  if (a20)
  {
    v62 = a20[14] - 1;
    a20[14] = v62;
    if (!v62)
      (*(void (**)(_DWORD *))(*(_QWORD *)a20 + 8))(a20);
  }
  fst::FstPrinter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::~FstPrinter((uint64_t)&a24);
  a40 = &unk_1E5D256C0;
  v63 = a41;
  if (a41)
  {
    v64 = *(_DWORD *)(a41 + 56) - 1;
    *(_DWORD *)(a41 + 56) = v64;
    if (!v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
  std::__tree<std::string>::destroy((uint64_t)&a42, a43);
  a45 = &unk_1E5D256C0;
  v65 = a46;
  if (a46)
  {
    v66 = *(_DWORD *)(a46 + 56) - 1;
    *(_DWORD *)(a46 + 56) = v66;
    if (!v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  a47 = &unk_1E5D256C0;
  v67 = a48;
  if (a48)
  {
    v68 = *(_DWORD *)(a48 + 56) - 1;
    *(_DWORD *)(a48 + 56) = v68;
    if (!v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  }
  a49 = &unk_1E5D256C0;
  v69 = a50;
  if (a50)
  {
    v70 = *(_DWORD *)(a50 + 56) - 1;
    *(_DWORD *)(a50 + 56) = v70;
    if (!v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  }
  a24 = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (__p)
  {
    a56 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<int>::destroy((uint64_t)&a58, a59);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_1ADE8DBCC()
{
  JUMPOUT(0x1ADE8DD04);
}

void sub_1ADE8DBD4()
{
  JUMPOUT(0x1ADE8DC58);
}

void sub_1ADE8DBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a63);
  JUMPOUT(0x1ADE8DD04);
}

void sub_1ADE8DC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  JUMPOUT(0x1ADE8DD20);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::createReferenceFst(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v25;
  _QWORD *v26;
  std::string __p;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if (quasar::gLogLevel >= 4)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"The reference for utterance ", 28);
    v10 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v13 = *(_QWORD *)(v10 + 128);
    v11 = v10 + 128;
    v12 = v13;
    v14 = *(char *)(v11 + 23);
    if (v14 >= 0)
      v15 = v11;
    else
      v15 = v12;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v11 + 23);
    else
      v16 = *(_QWORD *)(v11 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is:", 4);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a5 + 224))(a5);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 200))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 176))(a5, v18);
  v19 = *a2;
  v20 = a2[1];
  if (*a2 == v20)
  {
    v22 = v18;
  }
  else
  {
    do
    {
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v21 = *v19;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 200))(a5);
      LODWORD(v29) = quasar::SymbolTableList::strToSymbolId(*(_QWORD *)(*(_QWORD *)a3 + 472), (uint64_t)&__p);
      *(_QWORD *)((char *)&v29 + 4) = v29;
      HIDWORD(v29) = v22;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a5 + 208))(a5, v18, &v29);
      if (quasar::gLogLevel >= 4)
      {
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(symbol ID = ", 13);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")", 1);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v19 = (__int128 *)((char *)v19 + 24);
      v18 = v22;
    }
    while (v19 != v20);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a5 + 184))(a5, v22, 0.0);
}

void sub_1ADE8DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::readAndCheckLmeData(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type size;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  std::string v64;
  std::string v65;
  std::string v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  v2 = *a2;
  if (!*a2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME container ", 14);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  if (quasar::gLogLevel >= 4)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Reading LME container ", 22);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" for user ", 10);
    v7 = *((char *)*a2 + 39);
    if (v7 >= 0)
      v8 = (uint64_t)(*a2 + 2);
    else
      v8 = (*a2)[2];
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)*a2 + 39);
    else
      v9 = (*a2)[3];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
    v2 = *a2;
  }
  v10 = *v2;
  if (!*v2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME container data ", 19);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  v11 = *(unsigned int *)(v10 + 268);
  if ((_DWORD)v11 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME data stream ", 16);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is null.", 9);
LABEL_18:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
      return 2;
    }
    return 2;
  }
  if ((v11 & 0xFFFFFFFD) == 4)
    return v11;
  v16 = *(unsigned __int8 *)(v10 + 199);
  if ((v16 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(v10 + 199);
  else
    v17 = *(_QWORD *)(v10 + 184);
  v18 = *(unsigned __int8 *)(a1 + 231);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a1 + 216);
  if (v17 != v18)
    goto LABEL_38;
  if (v19 >= 0)
    v20 = (unsigned __int8 *)(a1 + 208);
  else
    v20 = *(unsigned __int8 **)(a1 + 208);
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v10 + 176), v20, *(_QWORD *)(v10 + 184)))
    {
LABEL_38:
      if (quasar::gLogLevel >= 2)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"LME data stream ", 16);
        v22 = (_QWORD *)std::ostream::operator<<();
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" has phone set version ", 23);
        v24 = *(char *)(v10 + 199);
        if (v24 >= 0)
          v25 = v10 + 176;
        else
          v25 = *(_QWORD *)(v10 + 176);
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v10 + 199);
        else
          v26 = *(_QWORD *)(v10 + 184);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" which is different from model phone set version ", 49);
        v29 = *(char *)(a1 + 231);
        if (v29 >= 0)
          v30 = a1 + 208;
        else
          v30 = *(_QWORD *)(a1 + 208);
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(a1 + 231);
        else
          v31 = *(_QWORD *)(a1 + 216);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)". This data stream will not be used.", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v67);
      }
      return 5;
    }
  }
  else if (*(_BYTE *)(v10 + 199))
  {
    v21 = (unsigned __int8 *)(v10 + 176);
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v16)
        goto LABEL_53;
    }
    goto LABEL_38;
  }
LABEL_53:
  if (*(_BYTE *)(v10 + 392))
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v67, "Compatibility check unimplemented");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v67);
  }
  v33 = *(_QWORD *)(v10 + 160);
  if (v33 == -1 || (v34 = *(_QWORD *)(v10 + 168), v34 == -1))
  {
    if (quasar::gLogLevel >= 4)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Bad LME data (empty): stream=", 29);
      v46 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", symTableFirstKey=", 19);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", symTableLastKey=", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
    }
    return 6;
  }
  if (v34 < v33)
    goto LABEL_91;
  v35 = *(_QWORD *)(v10 + 224);
  v36 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v35 + 96) + 112))(*(_QWORD *)(v35 + 96), v20);
  if ((v36 & 0x8000000000000000) == 0)
    v36 += *(_QWORD *)(v35 + 120);
  if (v34 != v36 - 1)
  {
LABEL_91:
    if (quasar::gLogLevel >= 1)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Bad LME data (invalid last key): stream=", 40);
      v48 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", symTableFirstKey=", 19);
      v49 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", symTableLastKey=", 18);
      v50 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", symTable->AvailableKey()=", 27);
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v10 + 224) + 96) + 112))(*(_QWORD *)(*(_QWORD *)(v10 + 224) + 96));
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v67);
    }
    return 6;
  }
  if ((_DWORD)v11 == 1)
  {
    if (!*(_QWORD *)(a1 + 320) || (v37 = *(_QWORD **)(v10 + 240), v37 == (_QWORD *)(v10 + 248)))
    {
LABEL_86:
      if (*(_DWORD *)(v10 + 264) >= *(_DWORD *)(a1 + 328))
        return 1;
      if (quasar::gLogLevel >= 4)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"G2P model version ", 18);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" in blob is older than datapack's version ", 42);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
      }
    }
    else
    {
      while (1)
      {
        if (*((char *)v37 + 55) < 0)
          std::string::__init_copy_ctor_external(&v66, (const std::string::value_type *)v37[4], v37[5]);
        else
          v66 = *(std::string *)(v37 + 4);
        if (*((char *)v37 + 79) < 0)
          std::string::__init_copy_ctor_external(&v65, (const std::string::value_type *)v37[7], v37[8]);
        else
          v65 = *(std::string *)(v37 + 7);
        memset(&v64, 0, sizeof(v64));
        v38 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 256, (const void **)&v66.__r_.__value_.__l.__data_);
        if (a1 + 264 == v38)
          v39 = &v66;
        else
          v39 = (std::string *)(v38 + 56);
        std::string::operator=(&v64, v39);
        v40 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 304, (const void **)&v64.__r_.__value_.__l.__data_);
        v41 = v40;
        if (a1 + 312 == v40)
        {
          if (quasar::gLogLevel < 4)
            goto LABEL_118;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Category ", 9);
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v66;
          else
            v52 = (std::string *)v66.__r_.__value_.__r.__words[0];
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          else
            size = v66.__r_.__value_.__l.__size_;
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" in blob is not supported by datapack.", 38);
          goto LABEL_117;
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v40 + 56), (unsigned __int8 *)&v65))
        {
          break;
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        v42 = (_QWORD *)v37[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (_QWORD *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v37[2];
            v44 = *v43 == (_QWORD)v37;
            v37 = v43;
          }
          while (!v44);
        }
        v37 = v43;
        if (v43 == (_QWORD *)(v10 + 248))
          goto LABEL_86;
      }
      if (quasar::gLogLevel < 4)
        goto LABEL_118;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v67);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v67, (uint64_t)"Category ", 9);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v66;
      else
        v56 = (std::string *)v66.__r_.__value_.__r.__words[0];
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        v57 = v66.__r_.__value_.__l.__size_;
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in blob uses different enumeration type (", 42);
      v60 = *(char *)(v41 + 79);
      if (v60 >= 0)
        v61 = v41 + 56;
      else
        v61 = *(_QWORD *)(v41 + 56);
      if (v60 >= 0)
        v62 = *(unsigned __int8 *)(v41 + 79);
      else
        v62 = *(_QWORD *)(v41 + 64);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") in datapack.", 14);
LABEL_117:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v67);
LABEL_118:
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
    }
    return 3;
  }
  return v11;
}

uint64_t std::vector<quasar::LmeInfo>::emplace_back<quasar::LmeInfo>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v20[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    v20[4] = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[40 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[40 * v14];
    v17 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v16 = v17;
    v18 = *((_OWORD *)a2 + 1);
    *((_QWORD *)v16 + 4) = a2[4];
    *((_OWORD *)v16 + 1) = v18;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    v20[2] = v16 + 40;
    std::vector<quasar::LmeInfo>::__swap_out_circular_buffer(a1, v20);
    v10 = a1[1];
    std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    v9 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v7 + 32) = a2[4];
    *(_OWORD *)(v7 + 16) = v9;
    a2[3] = 0;
    a2[4] = 0;
    a2[2] = 0;
    v10 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v10;
  return v10 - 40;
}

void sub_1ADE8EAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(const std::string *a1@<X0>, uint64_t *a2@<X1>, quasar::SpeechRequestData **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, quasar::Location *a6@<X5>, std::vector<std::string> **a7@<X8>)
{
  std::__assoc_sub_state **Location;
  uint64_t v15;
  uint64_t v16;
  uint64_t data;
  uint64_t RegionId;
  uint64_t *size;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::vector<std::string> *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  std::vector<std::string> *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const void **v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::string *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const void **v61;
  const void ***v62;
  BOOL v63;
  uint64_t v64;
  std::vector<std::string> *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::string::size_type i;
  std::string::size_type v70;
  _QWORD *v71;
  int v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  std::string *v77;
  std::string::size_type v78;
  int v79;
  unint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  uint64_t v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  uint64_t v95;
  std::vector<std::string> **v96;
  std::string v97;
  std::string v98;
  __int128 v99;
  std::string v100;
  void *__p[4];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  const void **v117;
  _QWORD *v118[2];
  uint64_t *v119[3];
  void *v120[2];
  uint64_t v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  std::string v128;
  std::string *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  Location = (std::__assoc_sub_state **)quasar::SpeechRequestData::getLocation(*a3);
  *(double *)a6 = quasar::Location::fromSharedFuture(Location);
  *((_QWORD *)a6 + 1) = v15;
  v16 = *(_QWORD *)(*a2 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "geoLocationStatus");
  quasar::Location::statusAsString(a6, &v128);
  quasar::SpeechRequestResultData::addDumpAA(v16, (__int128 *)__p, &v128);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v120[0] = 0;
  v120[1] = 0;
  v121 = 0;
  data = (uint64_t)a1[17].__r_.__value_.__l.__data_;
  RegionId = quasar::SpeechRequestData::getRegionId(*a3);
  quasar::Geography::getGeoContext(data, a6, (uint64_t)v120, RegionId, a7);
  quasar::OnlineTransducerGraphSearchDecoder::logGeoLmMetrics((uint64_t)a1, *a2, a6, (unsigned __int8 *)v120, (uint64_t)*a7);
  v96 = a7;
  quasar::OnlineTransducerGraphSearchDecoder::mergeRegionalClassLms(&a1[33].__r_.__value_.__r.__words[2], (const void ***)*a7, (uint64_t *)v119);
  v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E5D3EB10;
  v128.__r_.__value_.__l.__size_ = (std::string::size_type)a1;
  v129 = &v128;
  size = (uint64_t *)a1[85].__r_.__value_.__l.__size_;
  v20 = (uint64_t *)a1[85].__r_.__value_.__r.__words[2];
  while (size != v20)
  {
    v21 = *size;
    v22 = *a2;
    v23 = *a7;
    v24 = (uint64_t)v129;
    if (!v129)
      goto LABEL_10;
    if (v129 != &v128)
    {
      v24 = (*(uint64_t (**)(void))(v129->__r_.__value_.__r.__words[0] + 16))();
LABEL_10:
      v127 = (_BYTE *)v24;
      goto LABEL_12;
    }
    v127 = v126;
    (*(void (**)(std::string *, _BYTE *))(v128.__r_.__value_.__r.__words[0] + 24))(&v128, v126);
LABEL_12:
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::resolvePlaceholder(v21, v119, (uint64_t *)(v22 + 424), (uint64_t)&v23[2], (uint64_t)v126, 1);
    v25 = v127;
    if (v127 == v126)
    {
      v25 = v126;
      v26 = 4;
    }
    else
    {
      if (!v127)
        goto LABEL_17;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_17:
    size += 2;
  }
  v27 = (uint64_t *)a1[87].__r_.__value_.__l.__size_;
  v28 = (uint64_t *)a1[87].__r_.__value_.__r.__words[2];
  if (v27 != v28)
  {
    while (1)
    {
      v29 = *v27;
      v30 = *v96;
      v31 = *a2;
      v124[0] = &off_1E5D3EB68;
      v125 = v124;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v29, (uint64_t **)&v30[1], (uint64_t *)(v31 + 424), (uint64_t)&v30[2], (uint64_t)v124, 0);
      v32 = v125;
      if (v125 == v124)
        break;
      if (v125)
      {
        v33 = 5;
LABEL_23:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      v27 += 2;
      if (v27 == v28)
        goto LABEL_25;
    }
    v32 = v124;
    v33 = 4;
    goto LABEL_23;
  }
LABEL_25:
  quasar::OnlineTransducerGraphSearchDecoder::filterOutUnsupportedPlaceholders((uint64_t)a1, (const void ***)v119, (uint64_t)&v117);
  v34 = v117;
  if (v117 != (const void **)v118)
  {
    do
    {
      if (quasar::gLogLevel >= 4)
      {
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v107 = 0u;
        v108 = 0u;
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v102 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
        v36 = *((char *)v34 + 55);
        if (v36 >= 0)
          v37 = (uint64_t)(v34 + 4);
        else
          v37 = (uint64_t)v34[4];
        if (v36 >= 0)
          v38 = *((unsigned __int8 *)v34 + 55);
        else
          v38 = (uint64_t)v34[5];
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" assigned to FST from ", 22);
        quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v34[7], &v100);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v100;
        else
          v41 = (std::string *)v100.__r_.__value_.__r.__words[0];
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        else
          v42 = v100.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v43 = (uint64_t)v34[7];
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getCachedModel(v43, (uint64_t)__p, &v97);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v44 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)&a1[24], v34 + 4);
      v45 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
      v99 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        LODWORD(__p[0]) = v44;
        *(_OWORD *)&__p[1] = v45;
        do
          v48 = __ldxr(v46);
        while (__stxr(v48 + 1, v46));
      }
      else
      {
        LODWORD(__p[0]) = v44;
        __p[1] = v97.__r_.__value_.__l.__data_;
        __p[2] = 0;
      }
      LODWORD(__p[3]) = 1;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a4, (uint64_t)__p);
      v49 = (std::__shared_weak_count *)__p[2];
      if (__p[2])
      {
        v50 = (unint64_t *)((char *)__p[2] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = *(_QWORD *)(*a2 + 424);
      std::operator+<char>();
      v56 = std::string::append(&v100, "]");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      __p[2] = (void *)v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr((uint64_t)v34[7], &v98);
      quasar::SpeechRequestResultData::addDumpAA(v55, (__int128 *)__p, &v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      v58 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (const void **)v34[1];
      if (v61)
      {
        do
        {
          v62 = (const void ***)v61;
          v61 = (const void **)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (const void ***)v34[2];
          v63 = *v62 == v34;
          v34 = (const void **)v62;
        }
        while (!v63);
      }
      v34 = (const void **)v62;
    }
    while (v62 != v118);
  }
  memset(&v100, 0, sizeof(v100));
  kaldi::SplitStringToVector(a1 + 27, ",", 1, (uint64_t)&v100);
  if (v100.__r_.__value_.__r.__words[0] != v100.__r_.__value_.__l.__size_)
  {
    v64 = a1[35].__r_.__value_.__r.__words[2];
    if (v64)
    {
      v65 = *v96;
      v66 = *a2;
      v122[0] = &off_1E5D3EBC0;
      v123 = v122;
      quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::resolvePlaceholder(v64, (uint64_t **)&v65[1], (uint64_t *)(v66 + 424), (uint64_t)&v65[2], (uint64_t)v122, 0);
      v67 = v123;
      if (v123 == v122)
      {
        v68 = 4;
        v67 = v122;
      }
      else
      {
        if (!v123)
          goto LABEL_85;
        v68 = 5;
      }
      (*(void (**)(void))(*v67 + 8 * v68))();
    }
  }
LABEL_85:
  v70 = v100.__r_.__value_.__l.__size_;
  for (i = v100.__r_.__value_.__r.__words[0]; i != v70; i += 24)
  {
    if (quasar::gLogLevel >= 4)
    {
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v102 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ClassLM template ", 17);
      v72 = *(char *)(i + 23);
      if (v72 >= 0)
        v73 = i;
      else
        v73 = *(_QWORD *)i;
      if (v72 >= 0)
        v74 = *(unsigned __int8 *)(i + 23);
      else
        v74 = *(_QWORD *)(i + 8);
      v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" assigned to NNLM from ", 23);
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(a1[35].__r_.__value_.__r.__words[2], &v98);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v98;
      else
        v77 = (std::string *)v98.__r_.__value_.__r.__words[0];
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      else
        v78 = v98.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v79 = *(_DWORD *)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)&a1[24], (const void **)i);
    v81 = *(_DWORD **)(a5 + 8);
    v80 = *(_QWORD *)(a5 + 16);
    if ((unint64_t)v81 >= v80)
    {
      v83 = *(_DWORD **)a5;
      v84 = ((uint64_t)v81 - *(_QWORD *)a5) >> 2;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v86 = v80 - (_QWORD)v83;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v87);
        v83 = *(_DWORD **)a5;
        v81 = *(_DWORD **)(a5 + 8);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[4 * v84];
      *(_DWORD *)v89 = v79;
      v82 = v89 + 4;
      while (v81 != v83)
      {
        v90 = *--v81;
        *((_DWORD *)v89 - 1) = v90;
        v89 -= 4;
      }
      *(_QWORD *)a5 = v89;
      *(_QWORD *)(a5 + 8) = v82;
      *(_QWORD *)(a5 + 16) = &v88[4 * v87];
      if (v83)
        operator delete(v83);
    }
    else
    {
      *v81 = v79;
      v82 = v81 + 1;
    }
    *(_QWORD *)(a5 + 8) = v82;
    v91 = *(_QWORD *)(*a2 + 424);
    std::operator+<char>();
    v92 = std::string::append(&v98, "]");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    __p[2] = (void *)v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getOriginStr(a1[35].__r_.__value_.__r.__words[2], &v97);
    quasar::SpeechRequestResultData::addDumpAA(v91, (__int128 *)__p, &v97);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
  }
  __p[0] = &v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v117, v118[0]);
  v94 = v129;
  if (v129 == &v128)
  {
    v95 = 4;
    v94 = &v128;
  }
  else
  {
    if (!v129)
      goto LABEL_130;
    v95 = 5;
  }
  (*(void (**)(void))(v94->__r_.__value_.__r.__words[0] + 8 * v95))();
LABEL_130:
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v119, v119[1]);
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
}

void sub_1ADE8F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61)
{
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v64 = *(_QWORD **)(v62 - 208);
  if (v64 == v61)
  {
    v65 = 4;
    v64 = (_QWORD *)(v62 - 232);
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  a23 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a57, (_QWORD *)a58);
  v66 = *(_QWORD **)(v62 - 112);
  if (v66 == (_QWORD *)(v62 - 136))
  {
    v67 = 4;
    v66 = (_QWORD *)(v62 - 136);
  }
  else
  {
    if (!v66)
      goto LABEL_11;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_11:
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&a60, (_QWORD *)a61);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  if (*(char *)(v62 - 233) < 0)
    operator delete(*(void **)(v62 - 256));
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::appendEmptyFsts(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _DWORD *i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;

  v2 = a1[74];
  if (v2)
  {
    if (v2 != (a2[1] - *a2) >> 5)
    {
      v4 = (_QWORD *)a1[72];
      v5 = a1 + 73;
      if (v4 != a1 + 73)
      {
        do
        {
          v6 = *((_DWORD *)v4 + 14);
          for (i = (_DWORD *)*a2; i != (_DWORD *)a2[1]; i += 8)
          {
            if (*i == v6)
              goto LABEL_13;
          }
          v15 = 0;
          v16 = 0;
          v14 = v6;
          v17 = -1;
          std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v14);
          v8 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
LABEL_13:
          v11 = (_QWORD *)v4[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v4[2];
              v13 = *v12 == (_QWORD)v4;
              v4 = v12;
            }
            while (!v13);
          }
          v4 = v12;
        }
        while (v12 != v5);
      }
    }
  }
}

void sub_1ADE8F80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::clear(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    do
    {
      v4 = v2 - 32;
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2 - 24);
      v2 = v4;
    }
    while (v4 != v3);
  }
  *((_QWORD *)this + 1) = v3;
  std::vector<quasar::LmeInfo>::__clear[abi:ne180100]((uint64_t *)this + 8);
  return quasar::SymbolTableList::clear(*((quasar::SymbolTableList **)this + 11));
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::logGeoLmMetrics(uint64_t a1, uint64_t a2, quasar::Location *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t result;
  _BYTE *v11;
  _BOOL4 isUndefined;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v27;
  uint64_t v29;
  std::string __p;
  void *v31[2];
  char v32;

  result = quasar::Geography::wasConfigLoaded(*(quasar::Geography **)(a1 + 408));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(a2 + 424) + 128) = 1;
    if (quasar::Location::isKnown(a3))
    {
      v11 = *(_BYTE **)(a2 + 424);
      v11[129] = 1;
    }
    else if (quasar::Location::isDenied(a3))
    {
      v11 = *(_BYTE **)(a2 + 424);
      v11[130] = 1;
    }
    else
    {
      isUndefined = quasar::Location::isUndefined(a3);
      v11 = *(_BYTE **)(a2 + 424);
      if (isUndefined)
        v11[131] = 1;
    }
    v13 = (*(_QWORD *)(a5 + 16) | *(_QWORD *)(a5 + 40)) != 0;
    std::string::basic_string[abi:ne180100]<0>(v31, "geoContextFound");
    std::to_string(&__p, v13);
    quasar::SpeechRequestResultData::addDumpAA((uint64_t)v11, (__int128 *)v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(v31[0]);
    *(_BYTE *)(*(_QWORD *)(a2 + 424) + 132) = v13;
    result = quasar::Geography::getGeoMemoriesConfig(*(quasar::Geography **)(a1 + 408));
    if (*(_BYTE *)result)
    {
      v14 = *(_QWORD *)(a2 + 424);
      *(_BYTE *)(v14 + 133) = 1;
      v15 = a4[23];
      if ((v15 & 0x80u) != 0)
        v15 = *((_QWORD *)a4 + 1);
      v16 = v15 != 0;
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdWasCached");
      std::to_string(&__p, v16);
      quasar::SpeechRequestResultData::addDumpAA(v14, (__int128 *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      v17 = *(unsigned __int8 *)(a5 + 71);
      if ((v17 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(a5 + 71);
      else
        v18 = *(_QWORD *)(a5 + 56);
      v19 = a4[23];
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *((_QWORD *)a4 + 1);
      if (v18 == v19)
      {
        v21 = (const void **)(a5 + 48);
        if (v20 >= 0)
          v22 = a4;
        else
          v22 = *(unsigned __int8 **)a4;
        if ((v17 & 0x80) != 0)
        {
          v27 = memcmp(*v21, v22, *(_QWORD *)(a5 + 56)) != 0;
        }
        else if (*(_BYTE *)(a5 + 71))
        {
          v23 = v17 - 1;
          do
          {
            v25 = *(unsigned __int8 *)v21;
            v21 = (const void **)((char *)v21 + 1);
            v24 = v25;
            v26 = *v22++;
            v27 = v24 != v26;
          }
          while (v24 == v26 && v23-- != 0);
        }
        else
        {
          v27 = 0;
        }
      }
      else
      {
        v27 = 1;
      }
      v29 = *(_QWORD *)(a2 + 424);
      std::string::basic_string[abi:ne180100]<0>(v31, "geoLastRegionIdCacheMiss");
      std::to_string(&__p, v27);
      quasar::SpeechRequestResultData::addDumpAA(v29, (__int128 *)v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      *(_BYTE *)(*(_QWORD *)(a2 + 424) + 134) = v27;
      result = quasar::Location::isUndefined(a3);
      if ((_DWORD)result)
      {
        if (v13)
          *(_BYTE *)(*(_QWORD *)(a2 + 424) + 135) = 1;
      }
    }
  }
  return result;
}

void sub_1ADE8FB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineTransducerGraphSearchDecoder::mergeRegionalClassLms(_QWORD *a1@<X0>, const void ***a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string::size_type size;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::string v61;

  std::map<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::map[abi:ne180100](a3, a2);
  v7 = (_QWORD *)*a1;
  v5 = a1 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::getPlaceholder(v6[7], &v61);
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v61.__r_.__value_.__l.__size_;
      if (size)
      {
        if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_))
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          v32 = *((char *)v6 + 55);
          if (v32 >= 0)
            v33 = (uint64_t)(v6 + 4);
          else
            v33 = v6[4];
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v6 + 55);
          else
            v34 = v6[5];
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)": placeholder ", 14);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &v61;
          else
            v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          else
            v38 = v61.__r_.__value_.__l.__size_;
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not found in regional map", 26);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v44);
        }
        v9 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)&v61.__r_.__value_.__l.__data_);
        if (a3 + 1 == (uint64_t *)v9)
        {
          v9 = 0;
          v10 = 0;
          v43 = 0;
        }
        else
        {
          std::__tree<std::string>::__remove_node_pointer((uint64_t **)a3, (uint64_t *)v9);
          v10 = 1;
        }
        v42 = (void *)v9;
        BYTE1(v43) = v10;
        std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v6 + 4));
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>>>((uint64_t **)a3, (uint64_t *)&v42, (uint64_t)&v40);
        v17 = v41;
        if (v41)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v41 + 32);
          operator delete(v17);
          v41 = 0;
        }
        if (quasar::gLogLevel >= 4)
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using location-specific classLM slot for template=", 50);
          v19 = *((char *)v6 + 55);
          if (v19 >= 0)
            v20 = (uint64_t)(v6 + 4);
          else
            v20 = v6[4];
          if (v19 >= 0)
            v21 = *((unsigned __int8 *)v6 + 55);
          else
            v21 = v6[5];
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", using placeholder ", 20);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v61;
          else
            v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          else
            v25 = v61.__r_.__value_.__l.__size_;
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" from regional map", 18);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
        v27 = v42;
        if (v42)
        {
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v42 + 32);
          operator delete(v27);
        }
      }
      else
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, (const void **)v6 + 4, (__int128 *)v6 + 2);
        if ((v11 & 1) != 0 && quasar::gLogLevel >= 4)
        {
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Using decoder-specific classLM slot for template=", 49);
          v13 = *((char *)v6 + 55);
          if (v13 >= 0)
            v14 = (uint64_t)(v6 + 4);
          else
            v14 = v6[4];
          if (v13 >= 0)
            v15 = *((unsigned __int8 *)v6 + 55);
          else
            v15 = v6[5];
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", location-specific slot not available", 38);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
        }
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      v28 = (_QWORD *)v6[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v6[2];
          v30 = *v29 == (_QWORD)v6;
          v6 = v29;
        }
        while (!v30);
      }
      v6 = v29;
    }
    while (v29 != v5);
  }
}

void sub_1ADE8FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  if (*(char *)(v8 - 89) < 0)
    operator delete(*(void **)(v8 - 112));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v7, *(_QWORD **)(v7 + 8));
  _Unwind_Resume(a1);
}

void sub_1ADE8FF14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 89) < 0)
    operator delete(*(void **)(v2 - 112));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1ADE8FF1C()
{
  JUMPOUT(0x1ADE8FF50);
}

void sub_1ADE8FF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100]((void **)va);
  JUMPOUT(0x1ADE8FF40);
}

void quasar::OnlineTransducerGraphSearchDecoder::filterOutUnsupportedPlaceholders(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  const void ***v4;
  const void **v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void ***v12;
  BOOL v13;
  _OWORD v14[17];

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    v6 = (_QWORD *)(a1 + 496);
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v6, (unsigned __int8 *)v5 + 32))
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a3, v5 + 4, (__int128 *)v5 + 2);
      }
      else if (quasar::gLogLevel >= 4)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Filtering out unsupported / unused placeholder ", 47);
        v8 = *((char *)v5 + 55);
        if (v8 >= 0)
          v9 = (uint64_t)(v5 + 4);
        else
          v9 = (uint64_t)v5[4];
        if (v8 >= 0)
          v10 = *((unsigned __int8 *)v5 + 55);
        else
          v10 = (uint64_t)v5[5];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v14);
      }
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v13 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v13);
      }
      v5 = (const void **)v12;
    }
    while (v12 != v4);
  }
}

void sub_1ADE900A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies::clear(quasar::OnlineTransducerGraphSearchDecoder::DecoderCreationDependencies *this)
{
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](this);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 4);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 8);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 10);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 12);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 16);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 14);
}

uint64_t quasar::OnlineTransducerGraphSearchDecoder::supportsEager(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  return 0;
}

void quasar::OnlineTransducerGraphSearchDecoder::clearCaches(quasar::OnlineTransducerGraphSearchDecoder *this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (uint64_t *)*((_QWORD *)this + 262);
  for (i = (uint64_t *)*((_QWORD *)this + 263); v1 != i; v1 += 2)
  {
    v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v3, (uint64_t)__p, &v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v4 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADE901E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::DeterminizeLatticePrunedOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tolerance used in determinization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-mem");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum approximate memory usage in determinization (real usage might be many times this)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-arcs");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of arcs in output FST (total, not per state");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-states");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of arcs in output FST (total, not per state");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-loop");
  std::string::basic_string[abi:ne180100]<0>(__p, "Option used to detect a particular type of determinization failure, typically due to invalid input (e.g., negative-cost loops)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "retry-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls pruning un-determinized lattice and retrying determinization: if effective-beam < retry-cutoff * beam, we prune the raw lattice and retry.  Avoids ever getting empty output for long segments.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADE90460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADE904F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar34OnlineTransducerGraphSearchDecoder23LmeCreationDependenciesENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44CF8;
  a1[1] = 0;
  quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::LmeCreationDependencies((quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *)(a1 + 3));
  return a1;
}

void sub_1ADE9053C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::OnlineLatticeBiglmLmeFasterDecoder::LmeCreationDependencies>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies::LmeCreationDependencies(quasar::OnlineTransducerGraphSearchDecoder::LmeCreationDependencies *this)
{
  _QWORD *v2;

  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &unk_1E5D42D40;
  v2[4] = 0;
  v2[5] = 0;
  v2[3] = 0;
  *((_QWORD *)this + 11) = v2 + 3;
  *((_QWORD *)this + 12) = v2;
  return this;
}

void sub_1ADE90630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  a10 = (void **)(v10 + 64);
  std::vector<quasar::LmeInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 + 48);
  v12 = *(void **)(v10 + 24);
  if (v12)
  {
    *(_QWORD *)(v10 + 32) = v12;
    operator delete(v12);
  }
  a10 = (void **)v10;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3E9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20[17];
  __int128 v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (**(_BYTE **)(a1 + 16))
  {
    quasar::ModelLoader::requestEmbeddedMlock(*(std::string **)(v6 + 368), a2, v20, 1.0);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
    v8 = *(_QWORD *)(v6 + 368);
    v21 = v20[0];
    if (*((_QWORD *)&v20[0] + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD *)(v6 + 368);
    v21 = 0uLL;
  }
  quasar::ModelLoader::readFstNetwork(v8, (uint64_t)a2, (unsigned __int8 **)&v21, a3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, 0x10000000, 0) != 0x10000000)
  {
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"bigGFst: input label is not sorted!", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  if (*(_BYTE *)(v6 + 2124) || *(_BYTE *)(v6 + 440))
  {
    std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(v20);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, v20);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v20[0] + 1);
    if (*((_QWORD *)&v20[0] + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v20[0] + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  *(_QWORD *)&v20[0] = a2;
  v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 1976), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v17 + 7, a3);
  **(_BYTE **)(a1 + 16) = 0;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1ADE90914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3EA08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3EA08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 368), a2, *(_QWORD *)(a1 + 8) + 1592, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 1884), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1880), a3, *(float *)(a1 + 16));
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADE90B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *this)
{
  std::string *v4;
  uint64_t *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v6[2], v6[3]);
        v4 = v12;
      }
      else
      {
        v7 = *((_OWORD *)v6 + 1);
        v4->__r_.__value_.__r.__words[2] = v6[4];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (uint64_t *)*v6;
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADE90BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3EA60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3EA60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;

  v5 = *(_QWORD *)(a1 + 8);
  quasar::ModelLoader::requestEmbeddedMlock(*(std::string **)(v5 + 368), a2, &v15, 1.0);
  v6 = v16;
  v7 = *(_QWORD *)(v5 + 368);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::ModelLoader::readFstNetwork(v7, (uint64_t)a2, &v15, a3);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADE90D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (a10)
  std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::operator()(v10 == 0, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3EAB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3EAB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::ModelLoader::readNeuralNetworkLm(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 368), a2, *(_QWORD *)(a1 + 8) + 1592, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 1884), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1880), a3, 0.0);
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::finishInit(void)::$_3>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,std::string &,void>@<X0>(std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE90ED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>,0>(_QWORD *a1, std::string *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41A38;
  a1[1] = 0;
  kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::RandomAccessTableReader(a1 + 3, a2);
  return a1;
}

void sub_1ADE90F20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41A38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__shared_ptr_emplace<kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader((_QWORD *)(a1 + 24));
}

uint64_t *kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::RandomAccessTableReader(uint64_t *a1, std::string *this)
{
  _QWORD *v5;
  int v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD v10[34];

  *a1 = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this->__r_.__value_.__l.__size_)
      return a1;
  }
  else if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    return a1;
  }
  if ((kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::Open(a1, this) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Error opening RandomAccessTableReader object  (rspecifier is: ", 62);
    v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v6 >= 0)
      v7 = this;
    else
      v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, size);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, ")");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::TokenVectorHolder>::Open(uint64_t *a1, std::string *this)
{
  int v4;
  uint64_t v5;
  uint64_t (**v6)(int, std::string *);
  _QWORD *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  uint64_t result;
  int v12;
  _QWORD v13[34];

  if (*a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "RandomAccessTableReader::Open(): already open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v12 = 0;
  v4 = kaldi::ClassifyRspecifier(this, 0, (uint64_t)&v12);
  if (v4 == 1)
  {
    if (BYTE1(v12))
    {
      if (BYTE2(v12))
      {
        v5 = operator new();
        *(_OWORD *)(v5 + 8) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        v6 = &off_1E5D2B288;
        *(_QWORD *)v5 = &off_1E5D2B288;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
      }
      else
      {
        v5 = operator new();
        *(_OWORD *)(v5 + 8) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        v6 = &off_1E5D2B1F8;
        *(_QWORD *)v5 = &off_1E5D2B1F8;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
        *(_QWORD *)(v5 + 104) = -1;
        *(_QWORD *)(v5 + 112) = -1;
      }
    }
    else
    {
      v5 = operator new();
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_QWORD *)(v5 + 72) = 0;
      v6 = &off_1E5D2B318;
      *(_QWORD *)v5 = &off_1E5D2B318;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_QWORD *)(v5 + 120) = 0;
      *(_BYTE *)(v5 + 128) = 0;
      *(_QWORD *)(v5 + 144) = 0;
      *(_QWORD *)(v5 + 152) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_DWORD *)(v5 + 112) = 1056964608;
    }
LABEL_19:
    *a1 = v5;
    if ((BOOL)(*v6)(v5, this))
      return 1;
    if (*a1)
      (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
    result = 0;
    *a1 = 0;
    return result;
  }
  if (v4 == 2)
  {
    v5 = operator new();
    v6 = &off_1E5D2AFD0;
    *(_QWORD *)v5 = &off_1E5D2AFD0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_DWORD *)(v5 + 152) = 0;
    goto LABEL_19;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RandomAccessTableReader::Open(), invalid rspecifier: ", 53);
    v8 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = this;
    else
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v8 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, size);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
  }
  return 0;
}

void sub_1ADE912C4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::Open(uint64_t a1, std::string *this)
{
  std::string *v4;
  int v5;
  _BOOL8 result;
  unint64_t v7;
  const void **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  size_t v21;
  int v22;
  int v23;
  const void **v24;
  size_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *v28;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v31;
  size_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  std::string v38;
  std::string __p;
  _QWORD v40[35];

  if ((*(_DWORD *)(a1 + 152) - 2) <= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, " Opening already open RandomAccessTableReader: call Close first.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  v4 = (std::string *)(a1 + 48);
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 16);
  v5 = 1;
  result = kaldi::ReadScriptFile((uint64_t)v4, 1, (std::vector<std::pair<std::string, std::string>> *)(a1 + 120));
  if (result)
  {
    std::string::operator=((std::string *)(a1 + 24), this);
    if (!*(_BYTE *)(a1 + 17))
    {
      v7 = *(_QWORD *)(a1 + 120);
      v8 = *(const void ***)(a1 + 128);
      v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v8 - v7) >> 4));
      if (v8 == (const void **)v7)
        v10 = 0;
      else
        v10 = v9;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(v7, v8, (uint64_t)v40, v10, 1);
    }
    v11 = *(_QWORD *)(a1 + 120);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v11) >> 4) <= 1)
      v12 = 1;
    else
      v12 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v11) >> 4);
    v13 = -48;
    do
    {
      if (!--v12)
      {
        result = 1;
        v5 = 2;
        goto LABEL_67;
      }
      v14 = v11 + v13 + 96;
      v15 = (_QWORD *)(v11 + v13 + 48);
      v16 = *(unsigned __int8 *)(v11 + v13 + 71);
      if (*(char *)(v11 + v13 + 71) < 0)
      {
        v17 = *(_QWORD *)(v11 + v13 + 56);
        v15 = (_QWORD *)*v15;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v11 + v13 + 71);
      }
      v13 += 48;
      v18 = *(char *)(v14 + 23);
      if (v18 >= 0)
        v19 = *(unsigned __int8 *)(v14 + 23);
      else
        v19 = *(_QWORD *)(v14 + 8);
      if (v18 >= 0)
        v20 = (unsigned __int8 *)v14;
      else
        v20 = *(unsigned __int8 **)v14;
      if (v19 >= v17)
        v21 = v17;
      else
        v21 = v19;
      v22 = memcmp(v15, v20, v21);
      if (v17 >= v19)
        v23 = 0;
      else
        v23 = -1;
      if (v22)
        v23 = v22;
    }
    while (v23 < 0);
    v24 = (const void **)(v11 + v13);
    v25 = *(_QWORD *)(v11 + v13 + 8);
    if ((v16 & 0x80u) == 0)
      v26 = v16;
    else
      v26 = *(_QWORD *)(v11 + v13 + 8);
    v27 = " is not sorted (remove s, option or add ns, option): key is ";
    if (v26 == v19)
    {
      if ((v16 & 0x80) != 0)
      {
        if (!memcmp(*v24, v20, v25))
          v27 = " contains duplicate key: ";
      }
      else if ((_DWORD)v16)
      {
        while (*(unsigned __int8 *)v24 == *v20)
        {
          v24 = (const void **)((char *)v24 + 1);
          ++v20;
          if (!--v16)
          {
            v27 = " contains duplicate key: ";
            break;
          }
        }
      }
      else
      {
        v27 = " contains duplicate key: ";
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Script file ", 12);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v38 = *v4;
      kaldi::PrintableRxfilename((uint64_t)&v38, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, size);
      v32 = strlen(v27);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v27, v32);
      v34 = *(_QWORD *)(a1 + 120) + v13;
      v35 = *(char *)(v34 + 23);
      if (v35 >= 0)
        v36 = *(_QWORD *)(a1 + 120) + v13;
      else
        v36 = *(_QWORD *)v34;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(v34 + 23);
      else
        v37 = *(_QWORD *)(v34 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    }
    result = 0;
    v5 = 1;
  }
LABEL_67:
  *(_DWORD *)(a1 + 152) = v5;
  return result;
}

void sub_1ADE91638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::HasKey(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, a2, a1[19]);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, const void **a2)
{
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  const void **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  _QWORD *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD v39[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "RandomAccessTableReaderWriter: Value() called on not-open object.");
    goto LABEL_44;
  }
  v4 = *(_DWORD *)(a1 + 152);
  if ((v4 - 3) > 1)
    goto LABEL_19;
  v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  v7 = (const void *)*(unsigned __int8 *)(a1 + 95);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = *(const void **)(a1 + 80);
  if (v6 != v7)
    goto LABEL_19;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a1 + 72);
  else
    v9 = *(unsigned __int8 **)(a1 + 72);
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*a2, v9, (size_t)a2[1]))
    {
LABEL_19:
      if (((*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, 1) & 1) != 0)
      {
        v11 = *((unsigned __int8 *)a2 + 23);
        v12 = a2[1];
        if ((v11 & 0x80u) == 0)
          v12 = (const void *)*((unsigned __int8 *)a2 + 23);
        v13 = (const void *)*(unsigned __int8 *)(a1 + 95);
        v14 = (char)v13;
        if ((char)v13 < 0)
          v13 = *(const void **)(a1 + 80);
        if (v12 == v13)
        {
          v15 = v14 >= 0 ? (unsigned __int8 *)(a1 + 72) : *(unsigned __int8 **)(a1 + 72);
          if ((v11 & 0x80) == 0 && *((_BYTE *)a2 + 23))
          {
            v16 = v11 - 1;
            v17 = a2;
            do
            {
              v19 = *(unsigned __int8 *)v17;
              v17 = (const void **)((char *)v17 + 1);
              v18 = v19;
              v21 = *v15++;
              v20 = v21;
              v23 = v16-- != 0;
            }
            while (v18 == v20 && v23);
          }
        }
        goto LABEL_38;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"RandomAccessTableReader::Value(), could not get item for key ", 61);
      v26 = *((char *)a2 + 23);
      if (v26 >= 0)
        v27 = a2;
      else
        v27 = (void *)*a2;
      if (v26 >= 0)
        v28 = *((unsigned __int8 *)a2 + 23);
      else
        v28 = (uint64_t)a2[1];
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", rspecifier is ", 16);
      v33 = *(_QWORD *)(a1 + 24);
      v32 = a1 + 24;
      v31 = v33;
      v34 = *(char *)(v32 + 23);
      if (v34 >= 0)
        v35 = v32;
      else
        v35 = v31;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v32 + 23);
      else
        v36 = *(_QWORD *)(v32 + 8);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v35, v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"[to ignore this ", 16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v38, ", add the p, (permissive) option to the rspecifier.");
LABEL_44:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
    }
  }
  else if (*((_BYTE *)a2 + 23))
  {
    v10 = a2;
    while (*(unsigned __int8 *)v10 == *v9)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v9;
      if (!--v5)
        goto LABEL_37;
    }
    goto LABEL_19;
  }
LABEL_37:
  if (v4 != 3)
  {
    if (!*(_BYTE *)(a1 + 16))
      return a1 + 96;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Value called twice for the same key\n");
    goto LABEL_44;
  }
LABEL_38:
  *(_DWORD *)(a1 + 152) = 4;
  if (*(_BYTE *)(a1 + 16))
    kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::MakeTombstone((_QWORD *)a1, (unsigned __int8 *)a2);
  return a1 + 96;
}

void sub_1ADE918A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::Close(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD v5[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Close() called on RandomAccessTableReader that was not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v3 = *(_QWORD *)(a1 + 120);
  for (i = *(_QWORD *)(a1 + 128);
        i != v3;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](a1 + 136, i))
  {
    i -= 48;
  }
  *(_QWORD *)(a1 + 128) = v3;
  MEMORY[0x1AF44C914](a1 + 72, "");
  return 1;
}

void kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderScriptImpl(a1);
  JUMPOUT(0x1AF44D190);
}

BOOL kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::IsOpen(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 152) - 2) < 3;
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::HasKeyInternal(uint64_t a1, std::string *a2, int a3)
{
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string::size_type size;
  std::string v20;
  std::string v21;
  std::string __p;
  unint64_t v23;
  _QWORD v24[34];

  if (*(_DWORD *)(a1 + 152) <= 1u)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "HasKey called on RandomAccessTableReader object that is not open.");
    goto LABEL_49;
  }
  kaldi::IsToken((uint64_t *)a2);
  v23 = 0;
  result = kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::LookupKey((_QWORD *)a1, (unsigned __int8 *)a2, &v23);
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(a1 + 16))
  {
    v7 = *(_QWORD *)(a1 + 120) + 48 * v23;
    if (*(char *)(v7 + 47) < 0)
    {
      if (*(_QWORD *)(v7 + 32))
        goto LABEL_6;
    }
    else if (*(_BYTE *)(v7 + 47))
    {
      goto LABEL_6;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"HasKey called on key whose value was already read, and  you specified the \"once\" option (o,): try removing o, or adding no, : rspecifier is ", 141);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, a1 + 24);
LABEL_49:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
LABEL_6:
  if (!a3)
    return 1;
  if ((kaldi::Input::OpenInternal((_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 120) + 48 * v23 + 24, 1, 0) & 1) != 0)
  {
    if ((*(_DWORD *)(a1 + 152) - 3) <= 1)
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
    v8 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
    if (kaldi::TokenVectorHolder::Read((uint64_t *)(a1 + 96), v8))
    {
      *(_DWORD *)(a1 + 152) = 3;
      std::string::operator=((std::string *)(a1 + 72), a2);
      return 1;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"RandomAccessTableReader: error reading object from stream ", 58);
      v14 = *(_QWORD *)(a1 + 120) + 48 * v23;
      if (*(char *)(v14 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v14 + 24), *(_QWORD *)(v14 + 32));
      }
      else
      {
        v15 = *(_OWORD *)(v14 + 24);
        v20.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 40);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
      }
      kaldi::PrintableRxfilename((uint64_t)&v20, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    result = 0;
    *(_DWORD *)(a1 + 152) = 2;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"RandomAccessTableReader: error opening stream ", 46);
      v10 = *(_QWORD *)(a1 + 120) + 48 * v23;
      if (*(char *)(v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v10 + 24), *(_QWORD *)(v10 + 32));
      }
      else
      {
        v11 = *(_OWORD *)(v10 + 24);
        v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 40);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      }
      kaldi::PrintableRxfilename((uint64_t)&v21, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &__p;
      else
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v17 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v16, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
    return 0;
  }
  return result;
}

void sub_1ADE91D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::MakeTombstone(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD v4[34];
  unint64_t v5;

  v5 = 0;
  if ((kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::LookupKey(a1, a2, &v5) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "RandomAccessTableReader object in inconsistent state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return MEMORY[0x1AF44C914](a1[15] + 48 * v5 + 24, "");
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::LookupKey(_QWORD *a1, unsigned __int8 *a2, unint64_t *a3)
{
  unsigned __int8 *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  const void **v20;
  const void **v21;
  const void **v22;
  const void **v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  int v27;
  unsigned __int8 *v28;
  const void **v29;
  uint64_t v30;
  unint64_t v32;
  std::string v33;
  void *__p;
  char v35;
  char v36;
  char v37;

  v4 = a2;
  v6 = a1[18];
  v7 = a1[15];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[16] - v7) >> 4);
  if (v6 < v8)
  {
    v9 = (unsigned __int8 *)(v7 + 48 * v6);
    v10 = v9[23];
    if ((v10 & 0x80u) == 0)
      v11 = v9[23];
    else
      v11 = *((_QWORD *)v9 + 1);
    v12 = a2[23];
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a2 + 1);
    if (v11 == v12)
    {
      if (v13 < 0)
        a2 = *(unsigned __int8 **)a2;
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v9, a2, *((_QWORD *)v9 + 1)))
          goto LABEL_48;
      }
      else
      {
        if (!v9[23])
          goto LABEL_48;
        while (*v9 == *a2)
        {
          ++v9;
          ++a2;
          if (!--v10)
            goto LABEL_48;
        }
      }
    }
  }
  a1[18] = ++v6;
  if (v6 >= v8)
    goto LABEL_32;
  v14 = (unsigned __int8 *)(v7 + 48 * v6);
  v15 = v14[23];
  if ((v15 & 0x80u) == 0)
    v16 = v14[23];
  else
    v16 = *((_QWORD *)v14 + 1);
  v17 = v4[23];
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *((_QWORD *)v4 + 1);
  if (v16 != v17)
    goto LABEL_32;
  if (v18 >= 0)
    v19 = v4;
  else
    v19 = *(unsigned __int8 **)v4;
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v14, v19, *((_QWORD *)v14 + 1)))
      goto LABEL_32;
LABEL_48:
    *a3 = v6;
    return 1;
  }
  if (!v14[23])
    goto LABEL_48;
  while (*v14 == *v19)
  {
    ++v14;
    ++v19;
    if (!--v15)
      goto LABEL_48;
  }
LABEL_32:
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(&v33, (__int128 *)v4, "");
  v20 = (const void **)a1[15];
  v21 = (const void **)a1[16];
  v36 = 0;
  v22 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,std::string> *>,std::__wrap_iter<std::pair<std::string,std::string> *>,std::pair<std::string,std::string>,std::__identity,std::__less<void,void>>(v20, v21, (const void **)&v33.__r_.__value_.__l.__data_, (uint64_t)&v37);
  v23 = v22;
  if ((const void **)a1[16] != v22)
  {
    v24 = *((unsigned __int8 *)v22 + 23);
    if ((v24 & 0x80u) == 0)
      v25 = (const void *)*((unsigned __int8 *)v22 + 23);
    else
      v25 = v22[1];
    v26 = (const void *)v4[23];
    v27 = (char)v26;
    if ((char)v26 < 0)
      v26 = (const void *)*((_QWORD *)v4 + 1);
    if (v25 == v26)
    {
      if (v27 >= 0)
        v28 = v4;
      else
        v28 = *(unsigned __int8 **)v4;
      if ((v24 & 0x80) == 0)
      {
        if (*((_BYTE *)v22 + 23))
        {
          v29 = v22;
          while (*(unsigned __int8 *)v29 == *v28)
          {
            v29 = (const void **)((char *)v29 + 1);
            ++v28;
            if (!--v24)
              goto LABEL_56;
          }
          goto LABEL_50;
        }
LABEL_56:
        v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1[15]) >> 4);
        *a3 = v32;
        a1[18] = v32;
        v30 = 1;
        goto LABEL_51;
      }
      if (!memcmp(*v22, v28, (size_t)v22[1]))
        goto LABEL_56;
    }
  }
LABEL_50:
  v30 = 0;
LABEL_51:
  if (v35 < 0)
    operator delete(__p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return v30;
}

void sub_1ADE9205C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::RandomAccessTableReaderScriptImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderScriptImpl(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E5D2AFD0;
  if ((*(_DWORD *)(a1 + 152) - 3) <= 1)
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 96));
  v3 = (void **)(a1 + 120);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

BOOL kaldi::TokenVectorHolder::Read(uint64_t *a1, _QWORD *a2)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  int v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  std::locale v12;
  std::string v13;

  std::vector<std::string>::__clear[abi:ne180100](a1);
  memset(&v13, 0, sizeof(v13));
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v4 = std::locale::use_facet(&v12, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v12);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v13, v5);
  v6 = *(_DWORD *)((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5;
  if (v6)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"BasicVectorHolder::Read, error reading line ", 44);
      v8 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
      if ((v8 & 2) != 0)
        v9 = "[eof]";
      else
        v9 = "";
      if ((v8 & 2) != 0)
        v10 = 5;
      else
        v10 = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    }
  }
  else
  {
    kaldi::SplitStringToVector(&v13, " \t\n\r\f\v", 1, (uint64_t)a1);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v6 == 0;
}

void sub_1ADE92260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 33) < 0)
    operator delete(*(void **)(v10 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::Open(uint64_t a1, std::string *this)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  std::string *p_p;
  std::string::size_type size;
  std::string v10;
  std::string __p;
  _QWORD v12[34];

  if (*(_DWORD *)(a1 + 76) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader::Open, error closing previous input.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 72);
  v4 = kaldi::Input::OpenInternal((_QWORD *)(a1 + 8), a1 + 48, 0, 0);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"TableReader: failed to open stream ", 35);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v10 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    }
    v5 = 0;
  }
  *(_DWORD *)(a1 + 76) = v5;
  return v4;
}

void sub_1ADE9245C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, std::string *a2)
{
  std::string *v2;
  uint64_t v4;
  std::string::size_type v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t size;
  _QWORD *v21;
  _QWORD *v22;
  std::string __p;
  std::string v24;
  _QWORD v25[34];

  v2 = a2;
  if (!kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, a2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    v18 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = (uint64_t)v2;
    else
      v19 = v2->__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    else
      size = v2->__r_.__value_.__l.__size_;
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, size);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      __p = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&__p, &v24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (uint64_t)&v24);
    std::string::~string(&v24);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  v5 = v2->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v5 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  v6 = *(unsigned __int8 *)(a1 + 39);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 24);
  if (v5 == v6)
  {
    v8 = v7 >= 0 ? (unsigned __int8 *)(a1 + 16) : *(unsigned __int8 **)(a1 + 16);
    if ((v4 & 0x80) == 0 && *((_BYTE *)&v2->__r_.__value_.__s + 23))
    {
      v9 = v4 - 1;
      do
      {
        v11 = v2->__r_.__value_.__s.__data_[0];
        v2 = (std::string *)((char *)v2 + 1);
        v10 = v11;
        v13 = *v8++;
        v12 = v13;
        v15 = v9-- != 0;
      }
      while (v10 == v12 && v15);
    }
  }
  return *(_QWORD *)(a1 + 40);
}

void kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderDSortedArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen(uint64_t a1)
{
  unsigned int v1;
  _QWORD v3[34];

  v1 = *(_DWORD *)(a1 + 76);
  if (v1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x1Eu >> v1) & 1;
}

BOOL kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(uint64_t a1, std::string *__str)
{
  std::string *v4;
  size_t v5;
  int v6;
  std::string::size_type size;
  std::string *v8;
  size_t v9;
  std::string *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL8 v15;
  char v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  void **v27;
  size_t v28;
  const void *v29;
  std::string::size_type v30;
  std::string *p_p;
  size_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  std::string *v48;
  std::string::size_type v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string __p;
  void **v53[35];

  v4 = (std::string *)(a1 + 80);
  v5 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
    goto LABEL_23;
  }
  v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v6 >= 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((v5 & 0x80u) == 0)
    v9 = v5;
  else
    v9 = *(_QWORD *)(a1 + 88);
  if ((v5 & 0x80u) == 0)
    v10 = v4;
  else
    v10 = *(std::string **)(a1 + 80);
  if (v9 >= size)
    v11 = size;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = size < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"cs\" option ", 54);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"but are not calling with keys in sorted order: ", 47);
    v47 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v47 >= 0)
      v48 = __str;
    else
      v48 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v47 >= 0)
      v49 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v49 = __str->__r_.__value_.__l.__size_;
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" < ", 3);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51, (uint64_t)v4);
LABEL_93:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
  }
LABEL_23:
  std::string::operator=(v4, __str);
  v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
    v14 = *(_DWORD *)(a1 + 76);
  }
  if ((v14 - 3) < 2)
    return 0;
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v53, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_93;
  }
  v16 = 0;
  memset(&__p, 0, sizeof(__p));
  v17 = *(unsigned __int8 *)(a1 + 39);
  while (1)
  {
    v18 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v19 = __str->__r_.__value_.__l.__size_;
    if (v18 >= 0)
      v20 = __str;
    else
      v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v21 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(a1 + 24);
    v22 = v21 >= 0 ? (const void *)(a1 + 16) : *(const void **)(a1 + 16);
    v23 = v17 >= v19 ? v19 : v17;
    v24 = memcmp(v20, v22, v23);
    v25 = v19 < v17 ? -1 : v17 < v19;
    v26 = v24 ? v24 : v25;
    if (v26 < 1)
      break;
    std::string::operator=(&__p, (const std::string *)(a1 + 16));
    v53[0] = *(void ***)(a1 + 40);
    v27 = v53[0];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v53);
    MEMORY[0x1AF44D190](v27, 0x20C40960023A9);
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 76) = 1;
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*(_DWORD *)(a1 + 76) != 2)
      break;
    v17 = *(unsigned __int8 *)(a1 + 39);
    if (*(char *)(a1 + 39) < 0)
    {
      v29 = *(const void **)(a1 + 16);
      v28 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v28 = *(unsigned __int8 *)(a1 + 39);
      v29 = (const void *)(a1 + 16);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v30 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v30 >= v28)
      v32 = v28;
    else
      v32 = v30;
    v33 = memcmp(v29, p_p, v32);
    if (v28 < v30)
      v34 = -1;
    else
      v34 = v30 < v28;
    if (v33)
      v34 = v33;
    if (v34 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"RandomAccessTableReader: you provided the \"s\" option ", 53);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" (sorted order), but keys are out of order or duplicated: ", 58);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v38 = __p.__r_.__value_.__l.__size_;
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" is followed by ", 16);
      v41 = *(char *)(a1 + 39);
      if (v41 >= 0)
        v42 = a1 + 16;
      else
        v42 = *(_QWORD *)(a1 + 16);
      if (v41 >= 0)
        v43 = *(unsigned __int8 *)(a1 + 39);
      else
        v43 = *(_QWORD *)(a1 + 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
    }
  }
  v15 = v26 == 0;
  if (v16 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1ADE929D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  void *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  std::string *v25;
  std::string::size_type v26;
  std::string v27;
  std::string v28;
  std::string v29;
  char v30;
  std::string v31;
  std::string __p;
  void **v33[34];

  if (*(_DWORD *)(a1 + 76) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v33, "TableReader: ReadNextObject() called from wrong state.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  v2 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), 0);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, a1 + 16);
  v3 = *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32);
  if ((v3 & 2) != 0)
  {
    v5 = 3;
LABEL_31:
    *(_DWORD *)(a1 + 76) = v5;
    return;
  }
  if ((v3 & 5) != 0)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
    {
LABEL_30:
      v5 = 4;
      goto LABEL_31;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Error reading archive ", 22);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v31 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v31, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      goto LABEL_30;
    }
    v11 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v11);
    goto LABEL_29;
  }
  v6 = std::istream::peek();
  if (v6 != 9)
  {
    if (v6 == 10)
      goto LABEL_12;
    if (v6 != 32)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        goto LABEL_30;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid archive file format: expected space after key ", 54);
      v13 = *(char *)(a1 + 39);
      if (v13 >= 0)
        v14 = a1 + 16;
      else
        v14 = *(_QWORD *)(a1 + 16);
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a1 + 39);
      else
        v15 = *(_QWORD *)(a1 + 24);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", got character ", 16);
      v30 = std::istream::peek();
      kaldi::CharToString((kaldi *)&v30, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v19 = __p.__r_.__value_.__l.__size_;
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", reading ", 10);
      if (*(char *)(a1 + 71) < 0)
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
      else
        v28 = *(std::string *)(a1 + 48);
      kaldi::PrintableRxfilename((uint64_t)&v28, &v29);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v29;
      else
        v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        v26 = v29.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v25, v26);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      v11 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_28;
    }
  }
  std::istream::get();
LABEL_12:
  v7 = (uint64_t *)operator new();
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *(_QWORD *)(a1 + 40) = v7;
  if (kaldi::TokenVectorHolder::Read(v7, v2))
  {
    v5 = 2;
    goto LABEL_31;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Object read failed, reading archive ", 36);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v27 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v27, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &__p;
    else
      v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v23 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v22, v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
  }
  *(_DWORD *)(a1 + 76) = 4;
  v24 = *(_QWORD *)(a1 + 40);
  if (v24)
  {
    v33[0] = *(void ***)(a1 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
    MEMORY[0x1AF44D190](v24, 0x20C40960023A9);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_1ADE92EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a27);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::CloseInternal(uint64_t a1)
{
  int v2;
  void **v3;
  _QWORD *v4;
  void **v6[34];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Close() called on TableReader twice or otherwise wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if (*(_QWORD *)(a1 + 8))
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  v2 = *(_DWORD *)(a1 + 76);
  if (v2 == 2)
  {
    v6[0] = *(void ***)(a1 + 40);
    v3 = v6[0];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v6);
    MEMORY[0x1AF44D190](v3, 0x20C40960023A9);
    *(_QWORD *)(a1 + 40) = 0;
    v2 = *(_DWORD *)(a1 + 76);
  }
  *(_DWORD *)(a1 + 76) = 0;
  if (v2 == 4)
  {
    if (!*(_BYTE *)(a1 + 75))
      return 0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"RandomAccessTableReader, error state detected closing reader.  ", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Ignoring it because you specified permissive mode.", 50);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
  }
  return 1;
}

void sub_1ADE9301C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::RandomAccessTableReaderDSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderDSortedArchiveImpl(uint64_t a1)
{
  _QWORD v3[34];

  *(_QWORD *)a1 = &off_1E5D2B288;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase(a1);
}

uint64_t kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5D2B168;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  std::string __p;
  std::string v8;
  _QWORD v9[34];
  uint64_t v10;

  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  v10 = 0;
  result = kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, a2, &v10);
  if ((_DWORD)result && *(_BYTE *)(a1 + 72) && !*(_QWORD *)(*(_QWORD *)(a1 + 80) + 32 * v10 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error: HasKey called after Value() already called for ", 54);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" that key, and once (o) option specified: ", 42);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      __p = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&__p, &v8);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v8);
    std::string::~string(&v8);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  _QWORD v21[34];
  uint64_t v22;

  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  v22 = 0;
  if (!kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v22))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v18 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v18, &v20);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&v20);
    std::string::~string(&v20);
    v17 = &v18;
LABEL_26:
    std::string::~string(v17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 32 * v22 + 24);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Error: Value() called more than once for key ", 45);
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and once (o) option specified: ", 32);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      v19 = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&v19, &v20);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&v20);
    std::string::~string(&v20);
    v17 = &v19;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 72))
    *(_QWORD *)(a1 + 112) = v22;
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::Close(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v9;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1 + 10;
  if (v3 != v2)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *(_QWORD *)(v2 + v6);
      if (v7)
      {
        v9 = *(void ***)(v2 + v6);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
        MEMORY[0x1AF44D190](v7, 0x20C40960023A9);
        v2 = a1[10];
        v3 = a1[11];
      }
      ++v5;
      v6 += 32;
    }
    while (v5 < (v3 - v2) >> 5);
  }
  std::vector<quasar::TextTokenizer::Token>::__clear[abi:ne180100](v4);
  a1[13] = -1;
  a1[14] = -1;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::CloseInternal((uint64_t)a1);
}

void kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderSortedArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = *(_QWORD *)(result + 112);
  if (v1 != -1)
  {
    v2 = result;
    v4 = *(void ***)(*(_QWORD *)(result + 80) + 32 * v1 + 24);
    v3 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    result = MEMORY[0x1AF44D190](v3, 0x20C40960023A9);
    *(_QWORD *)(*(_QWORD *)(v2 + 80) + 32 * *(_QWORD *)(v2 + 112) + 24) = 0;
    *(_QWORD *)(v2 + 112) = -1;
  }
  return result;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char v16;
  unint64_t *v17;
  int v18;
  size_t v19;
  const std::string::value_type *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  char v28;
  size_t v29;
  const void *v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  std::string::size_type v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  const void **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  _QWORD *v67;
  std::string *v68;
  std::string::size_type size;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  _OWORD *v83;
  std::string v84;
  uint64_t v85;
  std::string v86;
  std::string v87;
  char *v88;
  uint64_t v89;
  char v90;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 104);
  v82 = (uint64_t *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  if (v7 >= (v8 - v6) >> 5)
    goto LABEL_16;
  v9 = (unsigned __int8 *)(v6 + 32 * v7);
  v10 = v9[23];
  if ((v10 & 0x80u) == 0)
    v11 = v9[23];
  else
    v11 = *((_QWORD *)v9 + 1);
  v12 = a2[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 1);
  if (v11 != v12)
    goto LABEL_16;
  if (v13 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, a2, *((_QWORD *)v9 + 1)))
      goto LABEL_16;
LABEL_111:
    *a3 = v7;
    return 1;
  }
  if (!v9[23])
    goto LABEL_111;
  while (*v9 == *a2)
  {
    ++v9;
    ++a2;
    if (!--v10)
      goto LABEL_111;
  }
LABEL_16:
  v14 = *(_DWORD *)(a1 + 76);
  if (v14 == 1)
  {
    v16 = 0;
    v83 = (_OWORD *)(a1 + 16);
    v17 = (unint64_t *)(a1 + 96);
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 80);
      v8 = *(_QWORD *)(a1 + 88);
      if (v6 != v8)
      {
        v18 = *(char *)(v8 - 9);
        v15 = (char)v4[23];
        if (v15 >= 0)
          v19 = v4[23];
        else
          v19 = *((_QWORD *)v4 + 1);
        if (v15 >= 0)
          v20 = (const std::string::value_type *)v4;
        else
          v20 = *(const std::string::value_type **)v4;
        if (v18 >= 0)
          v21 = *(unsigned __int8 *)(v8 - 9);
        else
          v21 = *(_QWORD *)(v8 - 24);
        if (v18 >= 0)
          v22 = (const void *)(v8 - 32);
        else
          v22 = *(const void **)(v8 - 32);
        if (v21 >= v19)
          v23 = v19;
        else
          v23 = v21;
        v24 = memcmp(v20, v22, v23);
        if (v19 < v21)
          v25 = -1;
        else
          v25 = v21 < v19;
        if (v24)
          v25 = v24;
        if (v25 < 1)
          break;
      }
      kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
      v26 = *(_DWORD *)(a1 + 76);
      if (v26 == 2)
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *(_BYTE *)(a1 + 39);
        if (*(_QWORD *)(a1 + 80) != v27)
        {
          v29 = *(unsigned __int8 *)(a1 + 39);
          v30 = (const void *)(a1 + 16);
          if ((*(_BYTE *)(a1 + 39) & 0x80) != 0)
          {
            v30 = *(const void **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
          }
          v31 = *(char *)(v27 - 9);
          if (v31 >= 0)
            v32 = *(unsigned __int8 *)(v27 - 9);
          else
            v32 = *(_QWORD *)(v27 - 24);
          if (v31 >= 0)
            v33 = (const void *)(v27 - 32);
          else
            v33 = *(const void **)(v27 - 32);
          if (v32 >= v29)
            v34 = v29;
          else
            v34 = v32;
          v35 = memcmp(v30, v33, v34);
          if (v29 < v32)
            v36 = -1;
          else
            v36 = v32 < v29;
          if (v35)
            v36 = v35;
          if (v36 <= 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"RandomAccessTableReader: you provide the sorted (s) ", 52);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"option but keys in archive ", 27);
            if (*(char *)(a1 + 71) < 0)
              std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
            else
              v86 = *(std::string *)(a1 + 48);
            kaldi::PrintableRxfilename((uint64_t)&v86, &v84);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &v84;
            else
              v68 = (std::string *)v84.__r_.__value_.__r.__words[0];
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
            else
              size = v84.__r_.__value_.__l.__size_;
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, size);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" are not ", 9);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"in sorted order: ", 17);
            v73 = *(_QWORD *)(a1 + 88);
            v76 = *(_QWORD *)(v73 - 32);
            v74 = v73 - 32;
            v75 = v76;
            v77 = *(char *)(v74 + 23);
            if (v77 >= 0)
              v78 = v74;
            else
              v78 = v75;
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(v74 + 23);
            else
              v79 = *(_QWORD *)(v74 + 8);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v78, v79);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" is followed by ", 16);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v81, (uint64_t)v83);
            std::string::~string(&v84);
            std::string::~string(&v86);
LABEL_126:
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v87);
          }
        }
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
          v37 = *(_QWORD *)(a1 + 40);
          v27 = *(_QWORD *)(a1 + 88);
        }
        else
        {
          v37 = *(_QWORD *)(a1 + 40);
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *v83;
          v84.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 32);
        }
        v85 = v37;
        if (v27 >= *v17)
        {
          v39 = (uint64_t)(v27 - *v82) >> 5;
          if ((unint64_t)(v39 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v40 = *v17 - *v82;
          v41 = v40 >> 4;
          if (v40 >> 4 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
            v42 = 0x7FFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          v89 = a1 + 96;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 96, v42);
          v44 = (std::string::size_type)&v43[32 * v39];
          v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
          v87.__r_.__value_.__l.__size_ = v44;
          v88 = &v43[32 * v45];
          v46 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(_QWORD *)(v44 + 16) = *((_QWORD *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)v44 = v46;
          memset(&v84, 0, sizeof(v84));
          *(_QWORD *)(v44 + 24) = v85;
          v87.__r_.__value_.__r.__words[2] = v44 + 32;
          std::vector<std::pair<std::string,kaldi::TokenVectorHolder *>>::__swap_out_circular_buffer(v82, &v87);
          v47 = *(_QWORD *)(a1 + 88);
          std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v87);
          v48 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a1 + 88) = v47;
          if (v48 < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
        }
        else
        {
          v38 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)&v84.__r_.__value_.__l + 2);
          *(_OWORD *)v27 = v38;
          memset(&v84, 0, sizeof(v84));
          *(_QWORD *)(v27 + 24) = v85;
          *(_QWORD *)(a1 + 88) = v27 + 32;
        }
        *(_QWORD *)(a1 + 40) = 0;
        v26 = 1;
        *(_DWORD *)(a1 + 76) = 1;
      }
      v16 = 1;
      if (v26 != 1)
      {
        v6 = *(_QWORD *)(a1 + 80);
        v8 = *(_QWORD *)(a1 + 88);
        goto LABEL_96;
      }
    }
    if ((v16 & 1) == 0)
      goto LABEL_19;
LABEL_96:
    if (v6 == v8)
      return 0;
    v56 = *(unsigned __int8 *)(v8 - 9);
    if ((v56 & 0x80u) == 0)
      v57 = *(unsigned __int8 *)(v8 - 9);
    else
      v57 = *(_QWORD *)(v8 - 24);
    v58 = v4[23];
    v59 = (char)v58;
    if ((v58 & 0x80u) != 0)
      v58 = *((_QWORD *)v4 + 1);
    if (v57 != v58)
      return 0;
    v60 = (const void **)(v8 - 32);
    if (v59 >= 0)
      v61 = v4;
    else
      v61 = *(unsigned __int8 **)v4;
    if ((v56 & 0x80) != 0)
    {
      if (memcmp(*v60, v61, *(_QWORD *)(v8 - 24)))
        return 0;
    }
    else if (*(_BYTE *)(v8 - 9))
    {
      while (*(unsigned __int8 *)v60 == *v61)
      {
        v60 = (const void **)((char *)v60 + 1);
        ++v61;
        if (!--v56)
          goto LABEL_119;
      }
      return 0;
    }
LABEL_119:
    v64 = ((v8 - v6) >> 5) - 1;
    *a3 = v64;
    *(_QWORD *)(a1 + 104) = v64;
    return 1;
  }
  if (!v14)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v87, "Trying to access a RandomAccessTableReader object that is not open.");
    goto LABEL_126;
  }
  LOBYTE(v15) = v4[23];
LABEL_19:
  if ((v15 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    v6 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v87 = *(std::string *)v4;
  }
  v88 = 0;
  v90 = 0;
  v49 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::__wrap_iter<std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *> *>,std::pair<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__identity,kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::KaldiObjectHolder<quasar::KaldiString>>::PairCompare>(v6, v8, (const void **)&v87.__r_.__value_.__l.__data_);
  v50 = v49;
  if (*(_QWORD *)(a1 + 88) == v49)
    goto LABEL_113;
  v51 = v4[23];
  if ((v51 & 0x80u) == 0)
    v52 = v4[23];
  else
    v52 = *((_QWORD *)v4 + 1);
  v53 = *(unsigned __int8 *)(v49 + 23);
  v54 = (char)v53;
  if ((v53 & 0x80u) != 0)
    v53 = *(_QWORD *)(v49 + 8);
  if (v52 != v53)
    goto LABEL_113;
  if (v54 >= 0)
    v55 = (unsigned __int8 *)v49;
  else
    v55 = *(unsigned __int8 **)v49;
  if ((v51 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v55, *((_QWORD *)v4 + 1)))
    {
LABEL_113:
      v62 = 0;
      goto LABEL_114;
    }
  }
  else if (v4[23])
  {
    while (*v4 == *v55)
    {
      ++v4;
      ++v55;
      if (!--v51)
        goto LABEL_116;
    }
    goto LABEL_113;
  }
LABEL_116:
  v63 = (v50 - *(_QWORD *)(a1 + 80)) >> 5;
  *a3 = v63;
  *(_QWORD *)(a1 + 104) = v63;
  v62 = 1;
LABEL_114:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  return v62;
}

void sub_1ADE93BB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a27);
}

void sub_1ADE93C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x1ADE93C2CLL);
  JUMPOUT(0x1ADE93C30);
}

uint64_t std::vector<std::pair<std::string,kaldi::TokenVectorHolder *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,kaldi::TokenVectorHolder *>>,std::reverse_iterator<std::pair<std::string,kaldi::TokenVectorHolder *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t kaldi::RandomAccessTableReaderSortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderSortedArchiveImpl(void **a1)
{
  void **v3[34];

  *a1 = &off_1E5D2B1F8;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen((uint64_t)a1)
    && ((*((uint64_t (**)(void **))*a1 + 3))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  v3[0] = a1 + 10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v3);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase((uint64_t)a1);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HasKey(uint64_t a1, unsigned __int8 *a2)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  return kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, a2, 0);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::Value(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string __p;
  std::string v12;
  _QWORD v13[34];
  uint64_t v14;

  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(a1);
  v14 = 0;
  if (!kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(a1, (unsigned __int8 *)a2, &v14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"RandomAccessTableReader: Value() called but no such key ", 56);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" in archive ", 12);
    if (*(char *)(a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    else
      __p = *(std::string *)(a1 + 48);
    kaldi::PrintableRxfilename((uint64_t)&__p, &v12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&v12);
    std::string::~string(&v12);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return v14;
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::Close(uint64_t a1)
{
  _QWORD *i;
  uint64_t v3;
  void **v5;

  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    v3 = i[5];
    if (v3)
    {
      v5 = (void **)i[5];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
      MEMORY[0x1AF44D190](v3, 0x20C40960023A9);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 80);
  MEMORY[0x1AF44C914](a1 + 136, "");
  *(_BYTE *)(a1 + 128) = 0;
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::CloseInternal(a1);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderUnsortedArchiveImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::HandlePendingDelete(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  void **v11[35];
  std::string v12;

  if (*(_BYTE *)(a1 + 128))
  {
    *(_BYTE *)(a1 + 128) = 0;
    v2 = *(_QWORD *)(a1 + 120);
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
    {
      v11[0] = *(void ***)(v2 + 40);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v11);
      MEMORY[0x1AF44D190](v3, 0x20C40960023A9);
    }
    if (*(char *)(a1 + 159) < 0)
      v4 = *(_QWORD *)(a1 + 144);
    else
      v4 = *(unsigned __int8 *)(a1 + 159);
    v5 = *(_QWORD *)(a1 + 120);
    if (!v4)
    {
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(v5 + 16));
      v5 = *(_QWORD *)(a1 + 120);
    }
    if (*(char *)(v5 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v5 + 16), *(_QWORD *)(v5 + 24));
      v5 = *(_QWORD *)(a1 + 120);
    }
    else
    {
      v12 = *(std::string *)(v5 + 16);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase((_QWORD *)(a1 + 80), (uint64_t *)v5);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, 3);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"After deleting holder for key: ", 31);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v12;
      else
        v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      else
        size = v12.__r_.__value_.__l.__size_;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", map size = ", 13);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_1ADE941A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 41) < 0)
    operator delete(*(void **)(v10 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::FindKeyInternal(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t result;
  const void **v9;
  int v10;
  unsigned __int8 *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::string __p;
  std::string v40;
  std::string v41;
  uint64_t v42;

  v6 = a1 + 80;
  v7 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::find<std::string>((_QWORD *)(a1 + 80), (char *)a2);
  if (v7)
  {
    if (a3)
    {
      *a3 = *((_QWORD *)v7 + 5);
      if (*(_BYTE *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 120) = v7;
        goto LABEL_5;
      }
    }
    return 1;
  }
  if (*(_DWORD *)(a1 + 76) != 1)
  {
LABEL_33:
    if (*(_BYTE *)(a1 + 72))
    {
      v20 = a2[23];
      if ((v20 & 0x80u) == 0)
        v21 = a2[23];
      else
        v21 = *((_QWORD *)a2 + 1);
      v22 = *(unsigned __int8 *)(a1 + 159);
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a1 + 144);
      if (v21 == v22)
      {
        if (v23 >= 0)
          v24 = (unsigned __int8 *)(a1 + 136);
        else
          v24 = *(unsigned __int8 **)(a1 + 136);
        if ((v20 & 0x80) == 0)
        {
          if (a2[23])
          {
            v25 = a2;
            while (*v25 == *v24)
            {
              ++v25;
              ++v24;
              if (!--v20)
                goto LABEL_48;
            }
            return 0;
          }
LABEL_48:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"RandomAccessTableReader: you specified the once (o) option but you are calling using key ", 89);
          v27 = (char)a2[23];
          if (v27 >= 0)
            v28 = (uint64_t)a2;
          else
            v28 = *(_QWORD *)a2;
          if (v27 >= 0)
            v29 = a2[23];
          else
            v29 = *((_QWORD *)a2 + 1);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
          v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" more than once: archive is ", 28);
          if (*(char *)(a1 + 71) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
          else
            __p = *(std::string *)(a1 + 48);
          kaldi::PrintableRxfilename((uint64_t)&__p, &v40);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (uint64_t)&v40);
          std::string::~string(&v40);
          std::string::~string(&__p);
          goto LABEL_73;
        }
        if (!memcmp(*(const void **)a2, v24, *((_QWORD *)a2 + 1)))
          goto LABEL_48;
      }
    }
    return 0;
  }
  v9 = (const void **)(a1 + 16);
  while (1)
  {
    kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::ReadNextObject(a1);
    v10 = *(_DWORD *)(a1 + 76);
    if (v10 == 2)
      break;
LABEL_32:
    if (v10 != 1)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 76) = 1;
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 32);
  }
  v42 = *(_QWORD *)(a1 + 40);
  v11 = std::__hash_table<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,kaldi::StringHasher,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>,std::equal_to<std::string>,kaldi::StringHasher,true>,std::allocator<std::__hash_value_type<std::string,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,kaldi::KaldiObjectHolder<quasar::KaldiString> *>>(v6, (char *)&v41, (uint64_t)&v41);
  v13 = v12;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (!v13)
  {
    v32 = *(_QWORD *)(a1 + 40);
    if (v32)
    {
      v41.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 40);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      MEMORY[0x1AF44D190](v32, 0x20C40960023A9);
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Error in RandomAccessTableReader: duplicate key ", 48);
    v34 = *(char *)(a1 + 39);
    if (v34 >= 0)
      v35 = a1 + 16;
    else
      v35 = *(_QWORD *)(a1 + 16);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(a1 + 39);
    else
      v36 = *(_QWORD *)(a1 + 24);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" in archive ", 12);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, a1 + 48);
LABEL_73:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  *(_QWORD *)(a1 + 40) = 0;
  v14 = *(unsigned __int8 *)(a1 + 39);
  if ((v14 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(a1 + 39);
  else
    v15 = *(_QWORD *)(a1 + 24);
  v16 = a2[23];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 1);
  if (v15 != v16)
    goto LABEL_31;
  if (v17 >= 0)
    v18 = a2;
  else
    v18 = *(unsigned __int8 **)a2;
  if ((v14 & 0x80) == 0)
  {
    if (!*(_BYTE *)(a1 + 39))
      goto LABEL_56;
    v19 = (unsigned __int8 *)(a1 + 16);
    while (*v19 == *v18)
    {
      ++v19;
      ++v18;
      if (!--v14)
        goto LABEL_56;
    }
    goto LABEL_31;
  }
  if (memcmp(*v9, v18, *(_QWORD *)(a1 + 24)))
  {
LABEL_31:
    v10 = *(_DWORD *)(a1 + 76);
    goto LABEL_32;
  }
LABEL_56:
  if (!a3)
    return 1;
  *a3 = *((_QWORD *)v11 + 5);
  if (!*(_BYTE *)(a1 + 72))
    return 1;
  *(_QWORD *)(a1 + 120) = v11;
LABEL_5:
  result = 1;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t kaldi::RandomAccessTableReaderUnsortedArchiveImpl<kaldi::TokenVectorHolder>::~RandomAccessTableReaderUnsortedArchiveImpl(uint64_t a1)
{
  _QWORD v3[34];

  *(_QWORD *)a1 = &off_1E5D2B318;
  if (kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::IsOpen(a1)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Error closing RandomAccessTableReader\n", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 80);
  return kaldi::RandomAccessTableReaderArchiveImplBase<kaldi::TokenVectorHolder>::~RandomAccessTableReaderArchiveImplBase(a1);
}

uint64_t kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, int a6, float a7)
{
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t i;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  char v30;

  v11 = (uint64_t *)(a1 + 16);
  v12 = a2 + 7853 * a3;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = v12 % *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(v13 + 16 * v14 + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(v13 + 16 * v14);
    v17 = (uint64_t *)(a1 + 16);
    if (v16 != -1)
      v17 = (uint64_t *)(*(_QWORD *)(v13 + 16 * v16 + 8) + 24);
    v18 = *(_QWORD *)(v15 + 24);
    for (i = *v17; i != v18; i = *(_QWORD *)(i + 24))
    {
      if (*(_QWORD *)i == a2 && *(_QWORD *)(i + 8) == a3)
      {
        v22 = *(unsigned int *)(i + 16);
        v29 = (float *)(*(_QWORD *)(a1 + 360) + 36 * v22);
        if (*v29 > a7)
        {
          *v29 = a7;
          if (!a5)
            return v22;
          goto LABEL_20;
        }
        if (!a5)
          return v22;
        v30 = 0;
        goto LABEL_21;
      }
    }
  }
  v21 = (int *)(*(_QWORD *)(a1 + 96) + 8 * a4);
  v22 = kaldi::quasar::E2ETokenHeap::NewToken((kaldi::quasar::E2ETokenHeap *)(a1 + 360), a7, 0.0, 0, *v21, a6);
  *v21 = v22;
  ++*(_DWORD *)(a1 + 308);
  v23 = v12 % *(_QWORD *)(a1 + 32);
  v24 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * v23);
  v25 = kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::New(v11);
  *(_QWORD *)v25 = a2;
  *(_QWORD *)(v25 + 8) = a3;
  *(_DWORD *)(v25 + 16) = v22;
  v26 = v24 + 1;
  v27 = v24[1];
  if (v27)
  {
    *(_QWORD *)(v25 + 24) = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = v25;
    *v26 = v25;
    if (!a5)
      return v22;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 24);
    if (v28 != -1)
      v11 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16 * v28 + 8) + 24);
    *v11 = v25;
    *(_QWORD *)(v25 + 24) = 0;
    *v26 = v25;
    *v24 = v28;
    *(_QWORD *)(a1 + 24) = v23;
    if (!a5)
      return v22;
  }
LABEL_20:
  v30 = 1;
LABEL_21:
  *a5 = v30;
  return v22;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessNonemitting(uint64_t a1, int a2, float a3)
{
  char *v3;
  __int128 *v4;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  int *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  uint64_t v64;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = *(char **)(a1 + 160);
  v59 = (_QWORD *)(a1 + 160);
  v4 = *(__int128 **)(a1 + 16);
  if (v4)
  {
    v7 = (_QWORD *)(a1 + 176);
    do
    {
      v69 = *v4;
      v8 = *((_DWORD *)v4 + 4);
      if ((unint64_t)v3 >= *v7)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*v59] >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v7 - *v59) >> 3) > v10)
          v10 = 0x5555555555555556 * ((uint64_t)(*v7 - *v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - *v59) >> 3) >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v7, v11);
        else
          v12 = 0;
        v13 = &v12[24 * v9];
        *(_OWORD *)v13 = v69;
        *((_DWORD *)v13 + 4) = v8;
        v15 = *(char **)(a1 + 160);
        v14 = *(char **)(a1 + 168);
        v16 = v13;
        if (v14 != v15)
        {
          do
          {
            v17 = *(_OWORD *)(v14 - 24);
            *((_QWORD *)v16 - 1) = *((_QWORD *)v14 - 1);
            *(_OWORD *)(v16 - 24) = v17;
            v16 -= 24;
            v14 -= 24;
          }
          while (v14 != v15);
          v14 = (char *)*v59;
        }
        v3 = v13 + 24;
        *(_QWORD *)(a1 + 160) = v16;
        *(_QWORD *)(a1 + 168) = v13 + 24;
        *(_QWORD *)(a1 + 176) = &v12[24 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_OWORD *)v3 = *v4;
        *((_DWORD *)v3 + 4) = v8;
        v3 += 24;
      }
      *(_QWORD *)(a1 + 168) = v3;
      v4 = (__int128 *)*((_QWORD *)v4 + 3);
    }
    while (v4);
    v58 = (uint64_t)v7;
    if ((char *)*v59 != v3)
    {
      do
      {
        v20 = *((_QWORD *)v3 - 3);
        v18 = *((_QWORD *)v3 - 2);
        v19 = v3 - 24;
        v21 = *((unsigned int *)v19 + 4);
        *(_QWORD *)(a1 + 168) = v19;
        v64 = *(_QWORD *)(a1 + 360);
        v66 = (float *)(v64 + 36 * v21);
        v67 = v18;
        v22 = *v66;
        if (*v66 <= a3)
        {
          v23 = v64 + 36 * v21;
          *(_DWORD *)(v23 + 8) = 0;
          v24 = (int *)(v23 + 8);
          (*(void (**)(_QWORD, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 184) + 80))(*(_QWORD *)(a1 + 184), v20, a1 + 608, 0);
          v68 = HIDWORD(v20);
          v26 = *(_QWORD *)(a1 + 624);
          v27 = *(_QWORD *)(a1 + 632);
          if (v26 != v27)
          {
            v62 = 0;
            v25.n128_u32[1] = HIDWORD(v21);
            v28 = (_DWORD *)(v64 + 36 * v21);
            v63 = v28 + 7;
            v61 = v28 + 8;
            v60 = v28 + 5;
            while (1)
            {
              if (*(_DWORD *)v26)
              {
                if (*(_BYTE *)(a1 + 304))
                  goto LABEL_72;
                goto LABEL_26;
              }
              if ((v29 = *(unsigned int *)(v26 + 4),
                    v30 = *(float *)(v26 + 8),
                    v31 = *(int *)(v26 + 12),
                    v25.n128_u32[0] = *(_DWORD *)(a1 + 224),
                    (int)v29 >= *(_DWORD *)(a1 + 264))
                && (int)v29 <= *(_DWORD *)(a1 + 268)
                || (v25.n128_f32[0] = (float)(v22 + (float)(v25.n128_f32[0] * v30)) - *(float *)(a1 + 260),
                    v25.n128_f32[0] <= a3))
              {
                v32 = *(_QWORD *)(a1 + 296);
                if (!v32)
                  break;
                if (!(*v63 >> 26))
                  break;
                LODWORD(v69) = *(_DWORD *)(v26 + 4);
                if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v32 + 64), (int *)&v69))break;
              }
LABEL_26:
              v26 += 16;
              if (v26 == v27)
                goto LABEL_72;
            }
            if ((_DWORD)v29)
            {
              if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __int128 *, __n128))(**(_QWORD **)(a1 + 288)
                                                                                            + 32))(*(_QWORD *)(a1 + 288), v68, v29, &v69, v25) & 1) != 0)
              {
                v33 = NAN;
                if (v30 != -INFINITY)
                {
                  v33 = NAN;
                  if (*((float *)&v69 + 2) != -INFINITY)
                  {
                    v33 = INFINITY;
                    if (*((float *)&v69 + 2) != INFINITY && v30 != INFINITY)
                      v33 = v30 + *((float *)&v69 + 2);
                  }
                }
                LODWORD(v29) = DWORD1(v69);
                v35 = HIDWORD(v69);
                v36 = *(float *)(a1 + 224);
                v37 = v33;
                if (!DWORD1(v69))
                {
                  v38 = 0.0;
                  goto LABEL_48;
                }
              }
              else
              {
                v36 = *(float *)(a1 + 224);
                v37 = INFINITY;
                v35 = HIDWORD(v20);
              }
              v38 = *(float *)(a1 + 220);
            }
            else
            {
              v36 = *(float *)(a1 + 224);
              v37 = v30;
              v38 = 0.0;
              v35 = HIDWORD(v20);
            }
LABEL_48:
            v25.n128_f64[0] = v36 * (v37 + v38);
            v39 = v25.n128_f64[0];
            if ((float)(v22 + v39) < a3)
            {
              LOBYTE(v69) = 0;
              v40 = v31 + (v35 << 32);
              v41 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v40, v67, a2, (char *)&v69, *v63 >> 26, v22 + v39);
              v42 = *(_QWORD *)(a1 + 360);
              if ((*v61 & 0x80000000) != 0)
                *(_DWORD *)(v42 + 36 * v41 + 32) |= 0x80000000;
              if ((_BYTE)v69)
              {
                v43 = v42 + 36 * v41;
                *(_DWORD *)(v43 + 24) &= 0x80000000;
                *(int8x8_t *)(v43 + 28) = vorr_s8(vand_s8(*(int8x8_t *)(v43 + 28), (int8x8_t)0x80000000FC000000), (int8x8_t)__PAIR64__(v29, v21));
                *(_DWORD *)(v43 + 16) = v35;
                *(_DWORD *)(v43 + 20) = *v60;
              }
              *v24 = kaldi::quasar::E2ETokenHeap::NewForwardLink((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v41, 0, v29, v39, 0.0, *v24);
              ++*(_DWORD *)(a1 + 312);
              if ((_BYTE)v69)
              {
                v45 = *(uint64_t **)(a1 + 168);
                v44 = *(_QWORD *)(a1 + 176);
                if ((unint64_t)v45 >= v44)
                {
                  v47 = (char *)*v59;
                  v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v45 - *v59) >> 3);
                  v49 = v48 + 1;
                  if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v47) >> 3);
                  if (2 * v50 > v49)
                    v49 = 2 * v50;
                  if (v50 >= 0x555555555555555)
                    v51 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v51 = v49;
                  if (v51)
                  {
                    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v58, v51);
                    v47 = *(char **)(a1 + 160);
                    v45 = *(uint64_t **)(a1 + 168);
                  }
                  else
                  {
                    v52 = 0;
                  }
                  v53 = &v52[24 * v48];
                  *(_QWORD *)v53 = v40;
                  *((_QWORD *)v53 + 1) = v67;
                  *((_DWORD *)v53 + 4) = v41;
                  v54 = v53;
                  if (v45 != (uint64_t *)v47)
                  {
                    do
                    {
                      v25 = *(__n128 *)(v45 - 3);
                      *((_QWORD *)v54 - 1) = *(v45 - 1);
                      *(__n128 *)(v54 - 24) = v25;
                      v54 -= 24;
                      v45 -= 3;
                    }
                    while (v45 != (uint64_t *)v47);
                    v47 = (char *)*v59;
                  }
                  v46 = v53 + 24;
                  *(_QWORD *)(a1 + 160) = v54;
                  *(_QWORD *)(a1 + 168) = v53 + 24;
                  *(_QWORD *)(a1 + 176) = &v52[24 * v51];
                  if (v47)
                    operator delete(v47);
                }
                else
                {
                  *v45 = v40;
                  v45[1] = v67;
                  v46 = (char *)(v45 + 3);
                  *((_DWORD *)v45 + 4) = v41;
                }
                *(_QWORD *)(a1 + 168) = v46;
                v62 = 1;
              }
            }
            goto LABEL_26;
          }
          v62 = 0;
LABEL_72:
          if (*(_QWORD *)(a1 + 296)
            && ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184)) == (_DWORD)v20
             || a3 != INFINITY && (*(_DWORD *)(v64 + 36 * v21 + 32) & 0x80000000) != 0))
          {
            if (*(_DWORD *)(v64 + 36 * v21 + 28) >> 26)
            {
              if ((v62 & 1) == 0 && (*(_DWORD *)(v64 + 36 * v21 + 32) & 0x7FFFFFFF) == 0)
              {
                LODWORD(v69) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 40)
                                         + 12 * (*(_DWORD *)(v64 + 36 * v21 + 28) >> 26)
                                         + 8);
                kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, (uint64_t)v66, v21, a2, v20, v68, v67, &v69, a3, 1, 0, 0);
              }
            }
            else
            {
              v55 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 40);
              if (*(_QWORD *)(*(_QWORD *)(a1 + 296) + 48) - v55 != 12)
              {
                v56 = 0;
                v57 = 1;
                do
                {
                  *(_QWORD *)&v69 = *(_QWORD *)(v55 + v56 + 12);
                  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(a1, (uint64_t)v66, v21, a2, v20, v68, v67, &v69, a3, 2, 1, v57++);
                  v55 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 40);
                  v56 += 12;
                }
                while (v57 != 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 296) + 48) - v55) >> 2));
              }
            }
          }
        }
        v3 = *(char **)(a1 + 168);
      }
      while (*(char **)(a1 + 160) != v3);
    }
  }
}

uint64_t kaldi::quasar::E2ETokenHeap::Clear(kaldi::quasar::E2ETokenHeap *this)
{
  _QWORD v3[2];
  uint64_t v4;

  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)this);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16);
  kaldi::quasar::E2ETokenHeap::E2ETokenHeap((kaldi::quasar::E2ETokenHeap *)v3, *((_DWORD *)this + 8), *((_DWORD *)this + 9));
  kaldi::quasar::E2ETokenHeap::operator=(this, v3);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)&v4);
  return kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)v3);
}

void sub_1ADE94F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::quasar::E2ETokenHeap::~E2ETokenHeap((kaldi::quasar::E2ETokenHeap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _BYTE v7[272];

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    if (*(_DWORD *)(result + 8))
    {
      result = MEMORY[0x1AF44E9CC](*MEMORY[0x1E0C83DA0]);
      if ((_DWORD)result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        v2 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        v3 = (_QWORD *)std::ostream::operator<<();
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        v5 = strlen((const char *)(0x80000001AE1868CELL & 0x7FFFFFFFFFFFFFFFLL));
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001AE1868CELL & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  _BYTE v7[272];

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    if (*(_DWORD *)(result + 8))
    {
      result = MEMORY[0x1AF44E9CC](*MEMORY[0x1E0C83DA0]);
      if ((_DWORD)result)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        v2 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": Could not vm_deallocate ", 26);
        v3 = (_QWORD *)std::ostream::operator<<();
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bytes of ", 10);
        v5 = strlen((const char *)(0x80000001AE1868F2 & 0x7FFFFFFFFFFFFFFFLL));
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, 0x80000001AE1868F2 & 0x7FFFFFFFFFFFFFFFLL, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

_QWORD *kaldi::quasar::E2ETokenHeap::operator=(_QWORD *a1, _QWORD *a2)
{
  if (a1 != a2)
  {
    kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)a1);
    *a1 = *a2;
    a1[1] = a2[1];
    *a2 = 0;
    a2[1] = 0;
    kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)(a1 + 2));
    a1[2] = a2[2];
    a1[3] = a2[3];
    a2[2] = 0;
    a2[3] = 0;
  }
  a1[4] = a2[4];
  return a1;
}

void kaldi::quasar::E2ETokenHeap::~E2ETokenHeap(kaldi::quasar::E2ETokenHeap *this)
{
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)this + 16);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)this);
}

kaldi::quasar::E2ETokenHeap *kaldi::quasar::E2ETokenHeap::E2ETokenHeap(kaldi::quasar::E2ETokenHeap *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;

  v6 = kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::LazyBuffer((uint64_t)this, a2, 0);
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::LazyBuffer(v6 + 16, a3, 0);
  *((_DWORD *)this + 8) = a2;
  *((_DWORD *)this + 9) = a3;
  return this;
}

void sub_1ADE95270(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  vm_address_t address;
  _QWORD v13[34];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3)
    *(_DWORD *)(a1 + 12) = a2;
  address = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 36 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      v8 = strlen((const char *)(0x80000001AE1868CELL & 0x7FFFFFFFFFFFFFFFLL));
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001AE1868CELL & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
  }
  *(_QWORD *)a1 = address;
  return a1;
}

void sub_1ADE953EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1ADE95400(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::LazyBuffer(uint64_t a1, unsigned int a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  vm_address_t address;
  _QWORD v13[34];

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "count > 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (a3)
    *(_DWORD *)(a1 + 12) = a2;
  address = 0;
  if (vm_allocate(*MEMORY[0x1E0C83DA0], &address, 24 * a2, 1711276033))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": Could not vm_allocate ", 24);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
      v8 = strlen((const char *)(0x80000001AE1868F2 & 0x7FFFFFFFFFFFFFFFLL));
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001AE1868F2 & 0x7FFFFFFFFFFFFFFFLL, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
  }
  *(_QWORD *)a1 = address;
  return a1;
}

void sub_1ADE95574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1ADE95588(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::E2ETokenHeap::NewToken(kaldi::quasar::E2ETokenHeap *this, float a2, float a3, int a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  std::runtime_error *exception;

  v7 = *((_QWORD *)this + 1);
  result = HIDWORD(v7);
  if (HIDWORD(v7) == (_DWORD)v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  *((_DWORD *)this + 3) = HIDWORD(v7) + 1;
  v9 = *(_QWORD *)this + 36 * HIDWORD(v7);
  *(float *)v9 = a2;
  *(float *)(v9 + 4) = a3;
  *(_DWORD *)(v9 + 8) = a4;
  *(_DWORD *)(v9 + 12) = a5;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 28) = (a6 << 26);
  return result;
}

void sub_1ADE95620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::New(_QWORD *a1)
{
  uint64_t result;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  result = a1[6];
  if (!result)
  {
    v3 = (char **)(a1 + 7);
    do
    {
      v4 = operator new[]();
      v5 = v4;
      for (i = 0; i != 0x8000; i += 32)
      {
        v7 = (_QWORD *)(v4 + i);
        *v7 = 0;
        v7[1] = 0;
      }
      v8 = -32736;
      do
      {
        *(_QWORD *)(v4 + v8 + 32760) = v4 + v8 + 0x8000;
        v8 += 32;
      }
      while (v8);
      *(_QWORD *)(v4 + 32760) = 0;
      a1[6] = v4;
      v10 = (uint64_t *)a1[8];
      v9 = a1[9];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - *v3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)*v3;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 9), v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v5;
        v11 = v17 + 1;
        v19 = (char *)a1[7];
        v18 = (char *)a1[8];
        if (v18 != v19)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = *v3;
        }
        a1[7] = v17;
        a1[8] = v11;
        a1[9] = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v10 = v4;
        v11 = v10 + 1;
      }
      a1[8] = v11;
      result = a1[6];
    }
    while (!result);
  }
  a1[6] = *(_QWORD *)(result + 24);
  return result;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::emitClassTag(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, _DWORD *a8, float a9, int a10, char a11, int a12)
{
  uint64_t v12;
  float v19;
  _DWORD *v20;
  float v21;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  int v43;
  char v47[8];
  float v48;
  unsigned int v49;

  v12 = a10;
  if (a10)
  {
    v19 = *(float *)a2;
    if (!a11
      || (float)((float)(v19
                       + (float)(*(float *)(a1 + 224)
                               * *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 104) + 4 * a12)))
               - *(float *)(a1 + 260)) <= a9)
    {
      v43 = a10 - 1;
      if (a10 < 1)
      {
        v21 = 0.0;
      }
      else
      {
        v20 = a8;
        v21 = 0.0;
        do
        {
          if (*v20++)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 32))(*(_QWORD *)(a1 + 288), a6))
            {
              v23 = v48 + 0.0;
              if (v48 == INFINITY)
                v23 = INFINITY;
              if (v48 == -INFINITY)
                v23 = NAN;
              v24 = v23;
              a6 = v49;
            }
            else
            {
              v24 = INFINITY;
            }
          }
          else
          {
            v24 = 0.0;
          }
          v25 = *(float *)(a1 + 224);
          v19 = v19 + (float)(v25 * v24);
          v21 = v21 + (float)(v25 * v24);
          --v12;
        }
        while (v12);
      }
      if (v19 < a9)
      {
        v47[0] = 0;
        v26 = (a6 << 32) + a5;
        v27 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v26, a7, a4, v47, a12, v19);
        v28 = *(_QWORD *)(a1 + 360);
        *(_DWORD *)(a2 + 8) = kaldi::quasar::E2ETokenHeap::NewForwardLink((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v27, 0, a8[v43], v21, 0.0, *(_DWORD *)(a2 + 8));
        if (v47[0])
        {
          v29 = (_DWORD *)(v28 + 36 * v27);
          v30 = v29[7] & 0xFC000000 | a3;
          v29[6] &= 0x80000000;
          v29[7] = v30;
          v29[8] = v29[8] & 0x80000000 | a8[v43];
          v29[4] = a6;
          v31 = *(_QWORD *)(a1 + 176);
          v32 = *(uint64_t **)(a1 + 168);
          if ((unint64_t)v32 >= v31)
          {
            v34 = *(uint64_t **)(a1 + 160);
            v35 = 0xAAAAAAAAAAAAAAABLL * (v32 - v34);
            v36 = v35 + 1;
            if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v34) >> 3);
            if (2 * v37 > v36)
              v36 = 2 * v37;
            if (v37 >= 0x555555555555555)
              v38 = 0xAAAAAAAAAAAAAAALL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 176, v38);
              v34 = *(uint64_t **)(a1 + 160);
              v32 = *(uint64_t **)(a1 + 168);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[24 * v35];
            v41 = &v39[24 * v38];
            *(_QWORD *)v40 = v26;
            *((_QWORD *)v40 + 1) = a7;
            *((_DWORD *)v40 + 4) = v27;
            v33 = v40 + 24;
            if (v32 != v34)
            {
              do
              {
                v42 = *(_OWORD *)(v32 - 3);
                *((_QWORD *)v40 - 1) = *(v32 - 1);
                *(_OWORD *)(v40 - 24) = v42;
                v40 -= 24;
                v32 -= 3;
              }
              while (v32 != v34);
              v34 = *(uint64_t **)(a1 + 160);
            }
            *(_QWORD *)(a1 + 160) = v40;
            *(_QWORD *)(a1 + 168) = v33;
            *(_QWORD *)(a1 + 176) = v41;
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v32 = v26;
            v32[1] = a7;
            v33 = (char *)(v32 + 3);
            *((_DWORD *)v32 + 4) = v27;
          }
          *(_QWORD *)(a1 + 168) = v33;
        }
      }
    }
  }
}

uint64_t kaldi::quasar::E2ETokenHeap::NewForwardLink(kaldi::quasar::E2ETokenHeap *this, int a2, int a3, int a4, float a5, float a6, int a7)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  std::runtime_error *exception;

  v8 = *((_QWORD *)this + 3);
  result = HIDWORD(v8);
  if (HIDWORD(v8) == (_DWORD)v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    kaldi::quasar::TooManyForwardLinksError::TooManyForwardLinksError(exception, "Ran out of forward links in storage");
  }
  *((_DWORD *)this + 7) = HIDWORD(v8) + 1;
  v10 = *((_QWORD *)this + 2) + 24 * HIDWORD(v8);
  *(_DWORD *)v10 = a2;
  *(_DWORD *)(v10 + 4) = a4;
  *(float *)(v10 + 8) = a5;
  *(float *)(v10 + 12) = a6;
  *(_DWORD *)(v10 + 16) = a7;
  *(_DWORD *)(v10 + 20) = a3;
  return result;
}

void sub_1ADE95B04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ProcessEmitting<kaldi::AutoRegressiveDecodableInterface>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float *v14;
  int *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  _DWORD *v27;
  int v28;
  int v29;
  double v30;
  float v31;
  float v32;
  _BYTE *v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  _DWORD *v38;
  int v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  kaldi::quasar::E2ETokenHeap *v45;
  _QWORD *v46;
  int v47;
  int v48;
  float v49;
  uint64_t v50;
  float *v51;
  unsigned int *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  int *v62;
  _DWORD *v63;
  int v64;
  int v65;
  __n128 v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  float v71;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  float v77;
  float v78;
  int v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int8x8_t *v85;
  int v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  unint64_t v90;
  unint64_t v91;
  int *v92;
  _DWORD *v93;
  int v94;
  int v95;
  int v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  unsigned int v110;
  int v111;
  float32x2_t v112;
  float v113;
  _DWORD *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int *v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  _DWORD *v125;
  unsigned int v126;
  unsigned int v127;
  _DWORD *v128;
  unsigned int v129;
  unsigned int v130;
  _DWORD *v131;
  float *v132;
  uint64_t v133;
  float v134;
  unsigned int v135;
  void *__p;
  void *v137;
  uint64_t v138;
  void *v139;
  _BYTE *v140;
  _QWORD *v141;
  _QWORD *v142;
  unsigned int *v143;
  unint64_t v144;
  unsigned int *v145;
  float v146;
  unsigned int v147;

  if (*(_BYTE *)(a1 + 472))
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(a1);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 != -1)
  {
    v6 = *(_QWORD *)(a1 + 40);
    do
    {
      v7 = (uint64_t *)(v6 + 16 * v5);
      v7[1] = 0;
      v5 = *v7;
    }
    while (v5 != -1);
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = -1;
  v143 = 0;
  v144 = 0;
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(a1, v8, &v144, &v143, (uint64_t)&v141);
  v9 = (unint64_t)(float)(*(float *)(a1 + 216) * (float)v144);
  if (*(_QWORD *)(a1 + 32) < v9)
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, v9);
  v10 = *(float *)(a1 + 152);
  std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(&v139, v141, &v142);
  __p = 0;
  v137 = 0;
  v138 = 0;
  v117 = a3 - 1;
  if (((**(uint64_t (***)(uint64_t))a2)(a2) & 1) == 0)
    goto LABEL_139;
  if (!v143)
    goto LABEL_55;
  v11 = *v143;
  v130 = v143[1];
  v12 = v143[4];
  v13 = *(_QWORD *)(a1 + 360);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 184) + 80))(*(_QWORD *)(a1 + 184), v11, a1 + 608, 0);
  v124 = v11;
  v132 = (float *)(v13 + 36 * v12);
  v14 = *(float **)(a1 + 624);
  v15 = *(int **)(a1 + 632);
  v118 = v8;
  v126 = v12;
  if (v14 == (float *)v15)
  {
    v16 = v13;
  }
  else
  {
    v16 = v13;
    v128 = (_DWORD *)(v13 + 36 * v12 + 20);
    do
    {
      v17 = *v14;
      if (*(_DWORD *)v14)
      {
        v18 = *((unsigned int *)v14 + 1);
        v19 = v14[2];
        if (LODWORD(v17) != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
        {
          if ((_DWORD)v18)
          {
            if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, unsigned int **))(**(_QWORD **)(a1 + 288)
                                                                                          + 32))(*(_QWORD *)(a1 + 288), v130, v18, &v145))
            {
              v20 = NAN;
              if (v19 != -INFINITY)
              {
                v20 = NAN;
                if (v146 != -INFINITY)
                {
                  v20 = INFINITY;
                  if (v146 != INFINITY && v19 != INFINITY)
                    v20 = v19 + v146;
                }
              }
              LODWORD(v18) = HIDWORD(v145);
            }
            else
            {
              v20 = INFINITY;
            }
            v19 = v20;
          }
          v22 = v139;
          v23 = v140;
          if (v140 != v139)
          {
            v24 = (v140 - (_BYTE *)v139) >> 2;
            v23 = v139;
            do
            {
              v25 = v24 >> 1;
              v26 = (int *)&v23[4 * (v24 >> 1)];
              v28 = *v26;
              v27 = v26 + 1;
              v24 += ~(v24 >> 1);
              if (v28 < *v128)
                v23 = v27;
              else
                v24 = v25;
            }
            while (v24);
          }
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
          if ((_DWORD)v18)
            v30 = *(float *)(a1 + 220);
          else
            v30 = 0.0;
          v31 = (v30 + v19) * *(float *)(a1 + 224);
          v32 = *(float *)(a1 + 192)
              + (float)((float)(*v132
                              - (float)(*((float *)__p + (int)(LODWORD(v17) + v29 * ((unint64_t)(v23 - v22) >> 2)))
                                      * *(float *)(a1 + 228)))
                      + v31);
          if (v32 < v10)
            v10 = v32;
        }
      }
      v14 += 4;
    }
    while (v14 != (float *)v15);
  }
  v34 = v139;
  v33 = v140;
  if (v140 != v139)
  {
    v35 = (v140 - (_BYTE *)v139) >> 2;
    v33 = v139;
    do
    {
      v36 = v35 >> 1;
      v37 = (int *)&v33[4 * (v35 >> 1)];
      v39 = *v37;
      v38 = v37 + 1;
      v35 += ~(v35 >> 1);
      if (v39 < *(_DWORD *)(v16 + 36 * v126 + 20))
        v33 = v38;
      else
        v35 = v36;
    }
    while (v35);
  }
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v41 = *v132
      - (float)(*(float *)(a1 + 228)
              * *((float *)__p
                + (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2)
                      + v40 * ((unint64_t)(v33 - v34) >> 2))));
  if (v41 >= v10)
  {
    v8 = v118;
    goto LABEL_55;
  }
  v8 = v118;
  if (*(float *)(a1 + 224) == 0.0)
  {
    v44 = 0.0;
    goto LABEL_136;
  }
  v42 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184), v124);
  v43 = INFINITY;
  if (v42 != INFINITY)
    v43 = v42 + (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 288) + 16))(*(_QWORD *)(a1 + 288), v130);
  v44 = v43 * *(float *)(a1 + 224);
  if (v44 != INFINITY)
  {
LABEL_136:
    v113 = (float)(v41 + v44) + *(float *)(a1 + 192);
    if (v113 < v10)
      v10 = v113;
    if (!v118)
      goto LABEL_139;
    goto LABEL_56;
  }
  if ((float)(v41 + *(float *)(a1 + 192)) < v10)
  {
    v10 = v41 + *(float *)(a1 + 192);
    if (!v118)
      goto LABEL_139;
    goto LABEL_56;
  }
LABEL_55:
  if (v8)
  {
LABEL_56:
    v45 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
    while (1)
    {
      v46 = v142;
      if (v142)
      {
        v129 = *(_DWORD *)(v8 + 4);
        v127 = *(_DWORD *)(v8 + 16);
        v122 = *(_QWORD *)v45;
        v123 = *(_QWORD *)(v8 + 8);
        v133 = *(_QWORD *)v45 + 36 * v127;
        v131 = (_DWORD *)(v133 + 20);
        v47 = *(_DWORD *)(v133 + 20);
        while (1)
        {
          v48 = *((_DWORD *)v46 + 7);
          if (v47 >= v48)
            break;
LABEL_62:
          v46 = (_QWORD *)*v46;
          if (!v46)
            goto LABEL_63;
        }
        if (v48 < v47)
        {
          ++v46;
          goto LABEL_62;
        }
        v119 = v8;
        v116 = *(_DWORD *)v8;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 80))(*(_QWORD *)(a1 + 184));
        v51 = *(float **)(a1 + 624);
        v52 = *(unsigned int **)(a1 + 632);
        if (v51 != (float *)v52)
        {
          v53 = (int *)(v122 + 36 * v127);
          v125 = v53 + 7;
          v115 = v53 + 8;
          v121 = v53 + 2;
          while (2)
          {
            v54 = *(unsigned int *)v51;
            if (!(_DWORD)v54)
              goto LABEL_112;
            v55 = *((unsigned int *)v51 + 1);
            v56 = v51[2];
            v57 = *((int *)v51 + 3);
            if ((_DWORD)v54 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
              goto LABEL_112;
            v59 = v139;
            v58 = v140;
            if (v140 != v139)
            {
              v60 = (v140 - (_BYTE *)v139) >> 2;
              v58 = v139;
              do
              {
                v61 = v60 >> 1;
                v62 = (int *)&v58[4 * (v60 >> 1)];
                v64 = *v62;
                v63 = v62 + 1;
                v60 += ~(v60 >> 1);
                if (v64 < *v131)
                  v58 = v63;
                else
                  v60 = v61;
              }
              while (v60);
            }
            v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
            v66.n128_u32[0] = *(_DWORD *)(a1 + 224);
            v67 = *(float *)(a1 + 228);
            v68 = -(float)(*((float *)__p + (int)(v54 + v65 * ((unint64_t)(v58 - v59) >> 2))) * v67);
            v69 = *(float *)v133
                - (float)(*((float *)__p + (int)(v54 + v65 * ((unint64_t)(v58 - v59) >> 2))) * v67);
            if ((int)v55 < *(_DWORD *)(a1 + 264) || (int)v55 > *(_DWORD *)(a1 + 268))
            {
              v66.n128_f32[0] = (float)((float)(v56 * v66.n128_f32[0]) + v69) - *(float *)(a1 + 260);
              if (v66.n128_f32[0] > v10)
                goto LABEL_112;
            }
            v70 = *(_QWORD *)(a1 + 296);
            if (v70)
            {
              if (*v125 >> 26)
              {
                LODWORD(v145) = v55;
                if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v70 + 64), (int *)&v145))
                {
                  goto LABEL_112;
                }
              }
            }
            if ((_DWORD)v55)
            {
              if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unsigned int **, __n128))(**(_QWORD **)(a1 + 288)
                                                                                                + 32))(*(_QWORD *)(a1 + 288), v129, v55, &v145, v66) & 1) != 0)
              {
                v71 = NAN;
                if (v56 != -INFINITY)
                {
                  v71 = NAN;
                  if (v146 != -INFINITY)
                  {
                    v71 = INFINITY;
                    if (v146 != INFINITY && v56 != INFINITY)
                      v71 = v56 + v146;
                  }
                }
                LODWORD(v55) = HIDWORD(v145);
                v73 = v147;
                v74 = *(float *)(a1 + 224);
                v75 = v71;
                if (!HIDWORD(v145))
                {
                  v76 = 0.0;
LABEL_96:
                  v77 = v74 * (v75 + v76);
                  v78 = v69 + v77;
                  if (v78 <= v10 && v78 != INFINITY)
                  {
                    if ((float)(v78 + *(float *)(a1 + 192)) < v10)
                      v10 = v78 + *(float *)(a1 + 192);
                    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
                    v81 = (v123 >> 2) + (v123 << 6) + (v54 - 1640531527);
                    if ((_DWORD)v54 == v80)
                      v81 = 0;
                    LOBYTE(v135) = 0;
                    v82 = kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::FindOrAddToken(a1, v57 + (v73 << 32), v123 ^ v81, a3, (char *)&v135, *v125 >> 26, v78);
                    if ((_BYTE)v135)
                    {
                      v83 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 8))(a2, v117, *v131, v54);
                      v84 = *(_QWORD *)(a1 + 360) + 36 * v82;
                      v86 = *(_DWORD *)(v84 + 32);
                      v85 = (int8x8_t *)(v84 + 32);
                      v85[-1] = vorr_s8(vand_s8(v85[-1], (int8x8_t)0xFC00000080000000), (int8x8_t)__PAIR64__(v127, v54));
                      v85->i32[0] = v86 & 0x80000000 | v55;
                      v85[-2].i32[0] = v73;
                      v85[-2].i32[1] = HIDWORD(v83);
                      v87 = *(_QWORD *)(a1 + 296);
                      if (v87)
                      {
                        if ((_DWORD)v55)
                        {
                          LODWORD(v145) = v55;
                          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(v87 + 64), (int *)&v145))goto LABEL_110;
                        }
                      }
                      if (*v125 >> 26 && (*v115 & 0x80000000) != 0)
LABEL_110:
                        v85->i32[0] |= 0x80000000;
                    }
                    *v121 = kaldi::quasar::E2ETokenHeap::NewForwardLink((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v82, v54, v55, v77, v68, *v121);
                    ++*(_DWORD *)(a1 + 312);
                  }
LABEL_112:
                  v51 += 4;
                  if (v51 == (float *)v52)
                    goto LABEL_113;
                  continue;
                }
              }
              else
              {
                v74 = *(float *)(a1 + 224);
                v75 = INFINITY;
                v73 = v129;
              }
              v76 = *(float *)(a1 + 220);
              goto LABEL_96;
            }
            break;
          }
          v74 = *(float *)(a1 + 224);
          v75 = v56;
          v76 = 0.0;
          v73 = v129;
          goto LABEL_96;
        }
LABEL_113:
        v88 = v139;
        v89 = v140;
        if (v140 == v139)
        {
          v45 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
        }
        else
        {
          v90 = (v140 - (_BYTE *)v139) >> 2;
          v89 = v139;
          v45 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
          do
          {
            v91 = v90 >> 1;
            v92 = (int *)&v89[4 * (v90 >> 1)];
            v94 = *v92;
            v93 = v92 + 1;
            v90 += ~(v90 >> 1);
            if (v94 < *v131)
              v89 = v93;
            else
              v90 = v91;
          }
          while (v90);
        }
        v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v97 = *(float *)(a1 + 228);
        v98 = -(float)(*((float *)__p + (int)(v96 + v95 * ((unint64_t)(v89 - v88) >> 2))) * v97);
        v99 = (float)(*(float *)v133
                    - (float)(*((float *)__p + (int)(v96 + v95 * ((unint64_t)(v89 - v88) >> 2))) * v97))
            + 0.0;
        if (v99 > v10)
        {
          v49 = v10;
          v8 = v119;
          goto LABEL_64;
        }
        v8 = v119;
        v134 = v99;
        if (*(float *)(a1 + 224) == 0.0)
        {
          v102 = 0.0;
        }
        else
        {
          v100 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184), v116);
          v101 = INFINITY;
          if (v100 != INFINITY)
            v101 = v100
                 + (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 288) + 16))(*(_QWORD *)(a1 + 288), v129);
          v99 = v134;
          v102 = v101 * *(float *)(a1 + 224);
          if (v102 == INFINITY)
          {
            v49 = v134 + *(float *)(a1 + 192);
            v102 = INFINITY;
            goto LABEL_132;
          }
        }
        if ((float)(v99 + v102) <= v10)
        {
          v49 = (float)(v99 + v102) + *(float *)(a1 + 204);
          if (v49 >= *(float *)(a1 + 152))
            goto LABEL_133;
          *(float *)(a1 + 152) = v49;
LABEL_132:
          if (v49 >= v10)
LABEL_133:
            v49 = v10;
          v103 = *v131;
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
          HIDWORD(v103) = (unint64_t)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v117, v103, v104) >> 32;
          v135 = 0;
          v105 = (int *)(*(_QWORD *)(a1 + 120) + 8 * a3);
          v106 = kaldi::quasar::E2ETokenHeap::NewToken(v45, v134, 0.0, 0, *v105, *(_DWORD *)(v122 + 36 * v127 + 28) >> 26);
          *v105 = v106;
          ++*(_DWORD *)(a1 + 308);
          v135 = v106;
          v107 = *(_QWORD *)(a1 + 360);
          *(_DWORD *)(v107 + 36 * v106 + 28) = *(_DWORD *)(v107 + 36 * v106 + 28) & 0xFC000000 | v127;
          v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
          v109 = (_DWORD *)(v107 + 36 * v106);
          v110 = v109[6] & 0x80000000 | v108;
          v109[5] = HIDWORD(v103);
          v109[6] = v110;
          v109[8] &= 0x80000000;
          v109[4] = v129;
          LODWORD(v103) = v135;
          v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
          *(_DWORD *)(v122 + 36 * v127 + 8) = kaldi::quasar::E2ETokenHeap::NewForwardLink(v45, v103, v111, 0, 0.0, v98, *(_DWORD *)(v122 + 36 * v127 + 8));
          ++*(_DWORD *)(a1 + 312);
          v145 = &v135;
          *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, &v135, (uint64_t)&std::piecewise_construct, &v145)+ 5) = v102;
          v112.f32[0] = v134 + v102;
          v112.f32[1] = v134;
          *(int8x8_t *)(a1 + 144) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a1 + 144), v112), (int8x8_t)v112, *(int8x8_t *)(a1 + 144));
          goto LABEL_64;
        }
      }
LABEL_63:
      v49 = v10;
LABEL_64:
      v50 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v8;
      v10 = v49;
      v8 = v50;
      if (!v50)
        goto LABEL_140;
    }
  }
LABEL_139:
  v49 = v10;
LABEL_140:
  if (__p)
  {
    v137 = __p;
    operator delete(__p);
  }
  if (v139)
  {
    v140 = v139;
    operator delete(v139);
  }
  std::__tree<int>::destroy((uint64_t)&v141, v142);
  return v49;
}

void sub_1ADE96700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,_QWORD *a35)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  std::__tree<int>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(uint64_t a1, int a2, int a3)
{
  signed int v4;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[35];
  char v13;

  if (!*(_BYTE *)(a1 + 472))
  {
    v4 = a2;
    *(_BYTE *)(a1 + 472) = 1;
    *(_BYTE *)(a1 + 473) = a3;
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(a1, a2, a3);
    if (v4 >= 1)
    {
      do
      {
        LOBYTE(v12[0]) = 0;
        v13 = 0;
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(a1, v4 - 1, v12, &v13, a3, 0.0);
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame((uint64_t *)a1, v4, a3);
        v6 = v4-- != 0;
      }
      while (v4 != 0 && v6);
    }
    kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame((uint64_t *)a1, 0, a3);
    if (kaldi::g_kaldi_verbose_level > 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"PruneActiveTokensFinal: pruned tokens from ", 43);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to ", 4);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" links from ", 12);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" to ", 4);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" pruned_tok_frames_ ", 20);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" pruned_link_toks_ ", 19);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
  }
}

void sub_1ADE96914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokens(uint64_t *a1, clockid_t a2, float a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[35];
  char v15;

  if ((int)a2 >= 1)
  {
    v5 = a2;
    v6 = a1[12];
    v7 = (8 * a2) | 5;
    v8 = a2;
    do
    {
      v9 = v8 - 1;
      if (*(_BYTE *)(v6 + 8 * (v8 - 1) + 4))
      {
        LOBYTE(v14[0]) = 0;
        v15 = 0;
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks((uint64_t)a1, v8 - 1, v14, &v15, 0, a3);
        v6 = a1[12];
        if (v8 >= 2 && LOBYTE(v14[0]))
          *(_BYTE *)(v6 + 8 * (v8 - 2) + 4) = 1;
        v10 = (v8 - 1);
        if (v15)
          *(_BYTE *)(v6 + 8 * v10 + 5) = 1;
        *(_BYTE *)(v6 + 8 * v10 + 4) = 0;
      }
      if ((uint64_t)v8 < v5 && *(_BYTE *)(v6 + v7))
      {
        kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(a1, v8, 0);
        v6 = a1[12];
        *(_BYTE *)(v6 + v7) = 0;
      }
      v7 -= 8;
      --v8;
    }
    while (v9 + 1 > 1);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"PruneActiveTokens: pruned tokens from ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" to ", 4);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" links from ", 12);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v14);
  }
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks((uint64_t)a1, a2);
}

void sub_1ADE96AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::UndoPruneActiveTokensFinal(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *i;
  unsigned int v23;
  uint64_t j;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int v39[71];

  if (!*(_BYTE *)(a1 + 473))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, "Cannot undo PruneActiveTokensFinal(undoable=false)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  v2 = *(_QWORD *)(a1 + 528);
  v3 = (unint64_t)(*(_QWORD *)(a1 + 536) - v2) >> 2;
  if ((int)v3 - 1 >= 0)
  {
    v4 = *(_QWORD *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 360);
    v6 = (int *)(v2 + 4 * (v3 - 1));
    v7 = *(_QWORD *)(a1 + 408);
    do
    {
      v8 = *v6--;
      v9 = 8 * v8;
      LODWORD(v8) = *(_DWORD *)(v7 - 4);
      v7 -= 4;
      *(_DWORD *)(v5 + 36 * v8 + 12) = *(_DWORD *)(v4 + v9);
      *(_DWORD *)(v4 + v9) = v8;
      ++*(_DWORD *)(a1 + 308);
      LODWORD(v3) = v3 - 1;
    }
    while ((_DWORD)v3);
    *(_QWORD *)(a1 + 408) = v7;
  }
  v10 = *(_QWORD *)(a1 + 552);
  v11 = (unint64_t)(*(_QWORD *)(a1 + 560) - v10) >> 2;
  if ((int)v11 - 1 >= 0)
  {
    v12 = *(_QWORD *)(a1 + 120);
    v13 = *(_QWORD *)(a1 + 360);
    v14 = (int *)(v10 + 4 * (v11 - 1));
    v15 = *(_QWORD *)(a1 + 432);
    do
    {
      v16 = *v14--;
      v17 = 8 * v16;
      LODWORD(v16) = *(_DWORD *)(v15 - 4);
      v15 -= 4;
      *(_DWORD *)(v13 + 36 * v16 + 12) = *(_DWORD *)(v12 + v17);
      *(_DWORD *)(v12 + v17) = v16;
      ++*(_DWORD *)(a1 + 308);
      LODWORD(v11) = v11 - 1;
    }
    while ((_DWORD)v11);
    *(_QWORD *)(a1 + 432) = v15;
  }
  v18 = *(unsigned int **)(a1 + 480);
  v19 = *(unsigned int **)(a1 + 488);
  if (v18 != v19)
  {
    v20 = *(_QWORD *)(a1 + 360);
    do
    {
      *(_DWORD *)(v20 + 36 * *v18 + 4) = v18[1];
      v18 += 2;
    }
    while (v18 != v19);
  }
  v21 = *(unsigned int **)(a1 + 504);
  for (i = *(unsigned int **)(a1 + 512); v21 != i; v21 += 2)
  {
    v23 = v21[1];
    *(_QWORD *)v39 = v21;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, v21, (uint64_t)&std::piecewise_construct, (_DWORD **)v39)+ 5) = v23;
  }
  for (j = *(_QWORD *)(a1 + 16); j; j = *(_QWORD *)(j + 24))
  {
    v39[0] = *(_DWORD *)(j + 16);
    std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>((_QWORD *)(a1 + 320), v39);
  }
  v25 = *(_QWORD *)(a1 + 576);
  v26 = (unint64_t)(*(_QWORD *)(a1 + 584) - v25) >> 2;
  if ((int)v26 - 1 >= 0)
  {
    v27 = *(_QWORD *)(a1 + 360);
    v28 = *(_QWORD *)(a1 + 376);
    v29 = *(_QWORD *)(a1 + 456);
    v30 = *(_DWORD *)(a1 + 312) + 1;
    v31 = (unsigned int *)(v25 + 4 * (v26 - 1));
    do
    {
      v33 = *v31--;
      v32 = v33;
      v34 = *(_DWORD *)(v29 - 4);
      v29 -= 4;
      v35 = v27 + 36 * v32;
      *(_DWORD *)(v28 + 24 * v34 + 16) = *(_DWORD *)(v35 + 8);
      *(_DWORD *)(v35 + 8) = v34;
      *(_DWORD *)(a1 + 312) = v30++;
      LODWORD(v26) = v26 - 1;
    }
    while ((_DWORD)v26);
    *(_QWORD *)(a1 + 456) = v29;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 600);
  *(_WORD *)(a1 + 472) = 0;
  *(int32x2_t *)(a1 + 600) = vdup_n_s32(0x7F800000u);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 584) = v25;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"UndoPruneActiveTokensFinal: restored tokens from ", 49);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" to ", 4);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" links from ", 12);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39);
  }
}

void sub_1ADE96E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  float v35;
  int *begin;
  int *end;
  int v38;
  std::vector<int>::pointer v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  std::vector<int>::pointer v45;
  int *v46;
  unint64_t v47;
  int *v48;
  unint64_t v49;
  std::vector<int>::pointer v50;
  std::vector<int> v53;
  void *v54;
  char *v55;
  char *v56;
  void *__p;
  char *v58;
  char *v59;
  void **p_p;

  __p = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if (a2)
  {
    v7 = a2;
    v8 = 0;
    v9 = 0;
    v10 = INFINITY;
    do
    {
      v11 = *(_DWORD *)(v7 + 16);
      v12 = *(_QWORD *)(a1 + 360);
      v13 = (_DWORD *)(v12 + 36 * v11);
      v14 = v58;
      if (v58 >= v59)
      {
        v16 = (char *)__p;
        v17 = (v58 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v20);
          v16 = (char *)__p;
          v14 = v58;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = *v13;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        __p = v22;
        v58 = v15;
        v59 = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v58 = *v13;
        v15 = v14 + 4;
      }
      v58 = v15;
      v24 = (_DWORD *)(v12 + 36 * v11 + 20);
      v25 = v55;
      if (v55 >= v56)
      {
        v27 = (char *)v54;
        v28 = (v55 - (_BYTE *)v54) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v30 = v56 - (_BYTE *)v54;
        if ((v56 - (_BYTE *)v54) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v56, v31);
          v27 = (char *)v54;
          v25 = v55;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * v28];
        *(_DWORD *)v33 = *v24;
        v26 = v33 + 4;
        while (v25 != v27)
        {
          v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v54 = v33;
        v55 = v26;
        v56 = &v32[4 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_DWORD *)v55 = *v24;
        v26 = v25 + 4;
      }
      v55 = v26;
      v35 = *(float *)v13;
      if (*(float *)v13 < v10)
      {
        v9 = *v24;
        if (a4)
          *a4 = v7;
        v10 = v35;
      }
      v7 = *(_QWORD *)(v7 + 24);
      ++v8;
    }
    while (v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  if (a3)
    *a3 = v8;
  if (*(_DWORD *)(a1 + 196) == 1)
  {
    LODWORD(v53.__begin_) = v9;
    std::set<int>::set[abi:ne180100](a5, (int *)&v53, 1);
  }
  else
  {
    std::vector<int>::vector(&v53, (v58 - (_BYTE *)__p) >> 2);
    begin = v53.__begin_;
    end = v53.__end_;
    if (v53.__begin_ != v53.__end_)
    {
      v38 = 0;
      v39 = v53.__begin_;
      do
        *v39++ = v38++;
      while (v39 != end);
    }
    v40 = *(int *)(a1 + 196);
    if (end - begin <= v40)
    {
      p_p = &__p;
      if ((char *)end - (char *)begin < 513)
      {
        v41 = 0;
        v43 = 0;
      }
      else
      {
        v41 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
        v43 = v42;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(begin, end, (uint64_t **)&p_p, end - begin, v41, v43);
      if (v41)
        operator delete(v41);
    }
    else
    {
      p_p = &__p;
      if ((_DWORD)v40)
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(begin, &begin[v40], end, (uint64_t **)&p_p);
    }
    v44 = *(int *)(a1 + 200);
    v45 = v53.__begin_;
    v46 = v53.__end_;
    v47 = v53.__end_ - v53.__begin_;
    if (v47 > v44)
    {
      v48 = &v53.__begin_[v44];
      v49 = *(int *)(a1 + 196);
      if (v47 <= v49)
        v50 = v53.__end_;
      else
        v50 = &v53.__begin_[v49];
      if (v48 != v50)
      {
        while (*((float *)__p + *v48) <= (float)(*((float *)__p + *v53.__begin_) + *(float *)(a1 + 192)))
        {
          if (++v48 == v50)
          {
            v48 = v50;
            break;
          }
        }
      }
      if (v48 != v53.__end_)
      {
        v46 = v48;
        v53.__end_ = v48;
      }
    }
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)a5 = a5 + 8;
    if (v45 != v46)
    {
      do
      {
        std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v54 + *v45, (_DWORD *)v54 + *v45);
        ++v45;
      }
      while (v45 != v46);
      v46 = v53.__begin_;
    }
    if (v46)
    {
      v53.__end_ = v46;
      operator delete(v46);
    }
  }
  if (v54)
  {
    v55 = (char *)v54;
    operator delete(v54);
  }
  if (__p)
  {
    v58 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADE97268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(int *a1, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      v13 = a2;
      do
      {
        v14 = *v13;
        v15 = *a1;
        if (*(float *)(**a4 + 4 * v14) < *(float *)(**a4 + 4 * v15))
        {
          *v13 = v15;
          *a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, a4, v9, a1);
        }
        ++v13;
      }
      while (v13 != a3);
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 | 1;
      v7 = (int *)(result + 4 * (v5 | 1));
      v8 = v5 + 2;
      v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) >= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v14;
          }
          v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) >= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(int *result, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && *(float *)(*v6 + 4 * *result) < *(float *)(*v6 + 4 * result[1]))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _DWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (int *)(result + 4 * v4);
    v6 = *v5;
    v9 = *(int *)(a2 - 4);
    v7 = (_DWORD *)(a2 - 4);
    v8 = v9;
    v10 = **a3;
    v11 = *(float *)(v10 + 4 * v9);
    if (*(float *)(v10 + 4 * v6) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (int *)(result + 4 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * v6) < v11);
      *v12 = v8;
    }
  }
  return result;
}

int *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v14;
  int *v15;
  unint64_t v16;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(float *)(**a3 + 4 * v9) < *(float *)(**a3 + 4 * v10))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,int *,int *,std::__wrap_iter<int *>>(a5, &a5[v14], &a5[v14], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, a2, a3);
    }
  }
  return result;
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  _DWORD *v11;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = **a3;
      v6 = result;
      do
      {
        v7 = *v6;
        v6 = v3;
        v8 = *v3;
        v9 = *(float *)(v5 + 4 * v8);
        if (v9 < *(float *)(v5 + 4 * v7))
        {
          v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v7;
            if (!v10)
              break;
            v7 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 >= *(float *)(v5 + 4 * v7))
            {
              v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v8;
        }
        v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *result;
      if (*(float *)(**a3 + 4 * v10) >= *(float *)(**a3 + 4 * v11))
      {
        *a5 = v11;
        v12 = *(a2 - 1);
      }
      else
      {
        *a5 = v10;
        v12 = *result;
      }
      a5[1] = v12;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(result, a2, a5, a3);
    }
  }
  return result;
}

int *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,int *,int *,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, int *a4, _DWORD *a5, _QWORD **a6)
{
  _QWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  int v10;
  uint64_t v11;

  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    v6 = *a6;
    while (a3 != a4)
    {
      v7 = *a3;
      v8 = *(float *)(*v6 + 4 * v7);
      v9 = *(float *)(*v6 + 4 * *result);
      if (v8 >= v9)
        LODWORD(v7) = *result;
      result += v8 >= v9;
      a3 += v8 < v9;
      *a5++ = v7;
      if (result == a2)
        goto LABEL_9;
    }
    if (result != a2)
    {
      v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

int *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t **v45;

  if (a6)
  {
    v9 = a6;
    v12 = result;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(v12, a2, a3, a4, a5, v9, a7);
      if (!a5)
        return result;
      v13 = 0;
      v14 = *a2;
      v15 = **a4;
      v16 = -a5;
      while (1)
      {
        v17 = v12[v13 / 4];
        if (*(float *)(v15 + 4 * v14) < *(float *)(v15 + 4 * v17))
          break;
        v13 += 4;
        if (__CFADD__(v16++, 1))
          return result;
      }
      v44 = a8;
      v45 = a4;
      v43 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          v12[v13 / 4] = v14;
          *a2 = v17;
          return result;
        }
        if (v16 <= 0)
          v29 = -v16;
        else
          v29 = 1 - v16;
        v28 = v29 >> 1;
        v22 = (char *)&v12[(v29 >> 1) + v13 / 4];
        v21 = (char *)a2;
        if (a2 != a3)
        {
          v30 = a3 - a2;
          v21 = (char *)a2;
          do
          {
            v31 = v30 >> 1;
            v32 = &v21[4 * (v30 >> 1)];
            v34 = *(int *)v32;
            v33 = v32 + 4;
            v30 += ~(v30 >> 1);
            if (*(float *)(v15 + 4 * v34) < *(float *)(v15 + 4 * *(int *)v22))
              v21 = v33;
            else
              v30 = v31;
          }
          while (v30);
        }
        v20 = (v21 - (char *)a2) >> 2;
      }
      else
      {
        if (v9 >= 0)
          v19 = v9;
        else
          v19 = v9 + 1;
        v20 = v19 >> 1;
        v21 = (char *)&a2[v19 >> 1];
        v22 = (char *)a2;
        if ((char *)a2 - (char *)v12 != v13)
        {
          v23 = (uint64_t)((char *)a2 - (char *)v12 - v13) >> 2;
          v22 = (char *)&v12[v13 / 4];
          do
          {
            v24 = v23 >> 1;
            v25 = &v22[4 * (v23 >> 1)];
            v27 = *(int *)v25;
            v26 = v25 + 4;
            v23 += ~(v23 >> 1);
            if (*(float *)(v15 + 4 * *(int *)v21) < *(float *)(v15 + 4 * v27))
              v23 = v24;
            else
              v22 = v26;
          }
          while (v23);
        }
        v28 = (uint64_t)(v22 - (char *)v12 - v13) >> 2;
      }
      a5 = -(v28 + v16);
      v35 = v9 - v20;
      v36 = v28;
      v37 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v22, (char *)a2, v21);
      v38 = v36;
      v39 = (int *)v37;
      if (v38 + v20 >= v9 - (v38 + v20) - v16)
      {
        v42 = v38;
        result = (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(v37, v21, v43, v45, a5, v35, a7, v44);
        a2 = (int *)v22;
        a4 = v45;
        v35 = v20;
        a8 = v44;
        a5 = v42;
        a3 = v39;
        v12 = (int *)((char *)v12 + v13);
      }
      else
      {
        v40 = v22;
        a4 = v45;
        v41 = v20;
        a8 = v44;
        result = (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(&v12[v13 / 4], v40, v37, v45, v38, v41, a7, v44);
        v12 = v39;
        a2 = (int *)v21;
        a3 = v43;
      }
      v9 = v35;
    }
    while (v35);
  }
  return result;
}

int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, uint64_t **a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v4 = *result++;
    *a3 = v4;
    if (result != a2)
    {
      v5 = 0;
      v6 = **a4;
      v7 = a3;
      v8 = a3;
      do
      {
        v10 = *v8++;
        v9 = v10;
        v11 = *result;
        if (*(float *)(v6 + 4 * v11) >= *(float *)(v6 + 4 * v10))
        {
          *v8 = v11;
        }
        else
        {
          v7[1] = v9;
          v12 = a3;
          if (v7 != a3)
          {
            v13 = v5;
            while (1)
            {
              v12 = (int *)((char *)a3 + v13);
              v14 = *(int *)((char *)a3 + v13 - 4);
              if (*(float *)(v6 + 4 * *result) >= *(float *)(v6 + 4 * v14))
                break;
              *v12 = v14;
              v13 -= 4;
              if (!v13)
              {
                v12 = a3;
                break;
              }
            }
          }
          *v12 = *result;
        }
        ++result;
        v5 += 4;
        v7 = v8;
      }
      while (result != a2);
    }
  }
  return result;
}

int *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, int *a4, _DWORD *a5, _QWORD **a6)
{
  _QWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  int v10;
  uint64_t v11;

  if (result == a2)
  {
LABEL_9:
    while (a3 != a4)
    {
      v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    v6 = *a6;
    while (a3 != a4)
    {
      v7 = *a3;
      v8 = *(float *)(*v6 + 4 * v7);
      v9 = *(float *)(*v6 + 4 * *result);
      if (v8 >= v9)
        LODWORD(v7) = *result;
      a3 += v8 < v9;
      result += v8 >= v9;
      *a5++ = v7;
      if (result == a2)
        goto LABEL_9;
    }
    if (result != a2)
    {
      v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

int *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneStates(kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem *,unsigned long *,kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::Elem **)::{lambda(int,int)#2} &,std::__wrap_iter<int *>>(int *result, int *a2, int *a3, _QWORD **a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v11 = 0;
      do
      {
        *(_DWORD *)&__src[v11] = result[v11 / 4];
        v11 += 4;
      }
      while (&result[v11 / 4] != a2);
      if (v11)
      {
        v12 = *a4;
        v13 = __src;
        while (a2 != a3)
        {
          v14 = *a2;
          v15 = *(float *)(*v12 + 4 * v14);
          v16 = *(float *)(*v12 + 4 * *(int *)v13);
          if (v15 >= v16)
            LODWORD(v14) = *(_DWORD *)v13;
          a2 += v15 < v16;
          v13 += 4 * (v15 >= v16);
          *result++ = v14;
          if (&__src[v11] == v13)
            return result;
        }
        return (int *)memmove(result, v13, __src - v13 + v11);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_DWORD *)&__src[v7 * 4] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 4)
    {
      v8 = &__src[v7 * 4];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = *((int *)v8 - 1);
        if (*(float *)(**a4 + 4 * v10) >= *(float *)(**a4 + 4 * *(a2 - 1)))
          v8 -= 4;
        else
          LODWORD(v10) = *--a2;
        *v9-- = v10;
        if (v8 == __src)
          return result;
      }
      v17 = 0;
      do
      {
        v9[v17] = *(_DWORD *)&v8[v17 * 4 - 4];
        --v17;
      }
      while (&v8[v17 * 4] != __src);
    }
  }
  return result;
}

_QWORD *std::vector<int>::vector<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    std::vector<int>::__vallocate[abi:ne180100](result, a4);
    return (_QWORD *)std::vector<int>::__construct_at_end<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>,std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v6, a2, a3);
  }
  return result;
}

void sub_1ADE97FD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinksFinal(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  char **v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  float v43;
  float v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  float v50;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  unint64_t v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  float v71;
  uint64_t v72;
  float *v73;
  float v74;
  float v75;
  uint64_t v76;
  char **v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  void **v103;
  uint64_t v104;
  void **v105;
  _DWORD *v107[34];
  unsigned int v108;

  if (a3)
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a1 + 144);
  v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    v5 = (char **)(a1 + 480);
    v104 = a1 + 496;
    do
    {
      v6 = *v4;
      v7 = *((_DWORD *)v4 + 4);
      v108 = v7;
      v8 = *(_QWORD *)(a1 + 360);
      if (*(float *)(a1 + 224) == 0.0)
      {
        v12 = 0.0;
      }
      else
      {
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184), v6);
        v10 = INFINITY;
        if (*(_DWORD *)(v8 + 36 * v7 + 28) >> 26)
          v11 = INFINITY;
        else
          v11 = v9;
        if (v11 != INFINITY)
          v10 = v11
              + (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 288) + 16))(*(_QWORD *)(a1 + 288), HIDWORD(v6));
        v12 = v10 * *(float *)(a1 + 224);
      }
      v13 = (float *)(v8 + 36 * v7);
      v107[0] = &v108;
      *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, &v108, (uint64_t)&std::piecewise_construct, v107)+ 5) = v12;
      v14 = v12 + *v13;
      v15 = *(float *)(a1 + 148);
      if (v14 >= *(float *)(a1 + 144))
        v14 = *(float *)(a1 + 144);
      *(float *)(a1 + 144) = v14;
      v16 = *v13;
      if (*v13 >= v15)
        v16 = v15;
      *(float *)(a1 + 148) = v16;
      if (a3)
      {
        v17 = v108 | ((unint64_t)*(unsigned int *)(v8 + 36 * v7 + 4) << 32);
        v19 = *(unint64_t **)(a1 + 488);
        v18 = *(_QWORD *)(a1 + 496);
        if ((unint64_t)v19 >= v18)
        {
          v21 = ((char *)v19 - *v5) >> 3;
          if ((unint64_t)(v21 + 1) >> 61)
LABEL_130:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v18 - (_QWORD)*v5;
          v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v104, v24);
          else
            v25 = 0;
          v26 = (unint64_t *)&v25[8 * v21];
          *v26 = v17;
          v20 = v26 + 1;
          v28 = *(char **)(a1 + 480);
          v27 = *(char **)(a1 + 488);
          if (v27 != v28)
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *--v26 = v29;
            }
            while (v27 != v28);
            v27 = *v5;
          }
          *(_QWORD *)(a1 + 480) = v26;
          *(_QWORD *)(a1 + 488) = v20;
          *(_QWORD *)(a1 + 496) = &v25[8 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v19 = v17;
          v20 = v19 + 1;
        }
        *(_QWORD *)(a1 + 488) = v20;
      }
      v4 = (uint64_t *)v4[3];
    }
    while (v4);
  }
  v30 = a2;
  v103 = (void **)(a1 + 576);
  v105 = (void **)(a1 + 448);
  v100 = a1 + 320;
  v98 = 8 * v30;
  do
  {
    v108 = 0;
    v31 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + v98);
    v108 = v31;
    if (!(_DWORD)v31)
      break;
    v99 = 0;
    do
    {
      v32 = *(_QWORD *)(a1 + 360);
      v107[0] = &v108;
      v33 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v100, &v108, (uint64_t)&std::piecewise_construct, v107);
      v34 = *(float *)(a1 + 144);
      if (v34 == INFINITY)
        v35 = *(float *)(a1 + 148);
      else
        v35 = v34 - v33[5];
      v36 = v32 + 36 * v31;
      v37 = *(float *)v36 - v35;
      v101 = v32;
      v38 = *(unsigned int *)(v36 + 8);
      if (*(_DWORD *)(v36 + 8))
      {
        v39 = 0;
        do
        {
          v40 = *(_QWORD *)(a1 + 376);
          v41 = (float *)(v40 + 24 * v38);
          v42 = (float *)(*(_QWORD *)(a1 + 360) + 36 * *(unsigned int *)v41);
          v43 = v42[1];
          v44 = v43 + (float)((float)((float)(*(float *)v36 + v41[3]) + v41[2]) - *v42);
          if (v44 <= *(float *)(a1 + 204))
          {
            if (v44 >= 0.0)
            {
              v50 = v43 + (float)((float)((float)(*(float *)v36 + v41[3]) + v41[2]) - *v42);
            }
            else
            {
              v50 = 0.0;
              if (v44 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Negative extra_cost: ", 21);
                std::ostream::operator<<();
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
              }
            }
            if (v50 < v37)
              v37 = v50;
            v45 = *(unsigned int *)(v40 + 24 * v38 + 16);
            v39 = v38;
          }
          else
          {
            v45 = *(unsigned int *)(v40 + 24 * v38 + 16);
            v46 = (_DWORD *)(v40 + 24 * v39 + 16);
            if (!v39)
              v46 = (_DWORD *)(v36 + 8);
            *v46 = v45;
            if (a3)
            {
              v48 = *(char **)(a1 + 456);
              v47 = *(_QWORD *)(a1 + 464);
              if ((unint64_t)v48 >= v47)
              {
                v52 = (char *)*v105;
                v53 = (v48 - (_BYTE *)*v105) >> 2;
                v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v55 = v47 - (_QWORD)v52;
                if (v55 >> 1 > v54)
                  v54 = v55 >> 1;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                  v56 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 464, v56);
                  v52 = *(char **)(a1 + 448);
                  v48 = *(char **)(a1 + 456);
                }
                else
                {
                  v57 = 0;
                }
                v58 = &v57[4 * v53];
                *(_DWORD *)v58 = v38;
                v49 = v58 + 4;
                while (v48 != v52)
                {
                  v59 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                *(_QWORD *)(a1 + 448) = v58;
                *(_QWORD *)(a1 + 456) = v49;
                *(_QWORD *)(a1 + 464) = &v57[4 * v56];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *(_DWORD *)v48 = v38;
                v49 = v48 + 4;
              }
              *(_QWORD *)(a1 + 456) = v49;
              v60 = *(char **)(a1 + 584);
              v61 = *(_QWORD *)(a1 + 592);
              if ((unint64_t)v60 >= v61)
              {
                v63 = (char *)*v103;
                v64 = (v60 - (_BYTE *)*v103) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v66 = v61 - (_QWORD)v63;
                if (v66 >> 1 > v65)
                  v65 = v66 >> 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 592, v67);
                  v60 = *(char **)(a1 + 584);
                  v63 = *(char **)(a1 + 576);
                }
                else
                {
                  v68 = 0;
                }
                v69 = &v68[4 * v64];
                *(_DWORD *)v69 = v108;
                v62 = v69 + 4;
                while (v60 != v63)
                {
                  v70 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                *(_QWORD *)(a1 + 576) = v69;
                *(_QWORD *)(a1 + 584) = v62;
                *(_QWORD *)(a1 + 592) = &v68[4 * v67];
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *(_DWORD *)v60 = v108;
                v62 = v60 + 4;
              }
              *(_QWORD *)(a1 + 584) = v62;
            }
            --*(_DWORD *)(a1 + 312);
          }
          v38 = v45;
        }
        while (v45);
      }
      v71 = INFINITY;
      if (v37 <= *(float *)(a1 + 204))
        v71 = v37;
      v72 = v101 + 36 * v31;
      v74 = *(float *)(v72 + 4);
      v73 = (float *)(v72 + 4);
      v75 = v74;
      if (v74 != v71
        && (COERCE_INT(fabs(v75 - v71)) > 2139095039
         || fabsf(v75 - v71) > (float)((float)(fabsf(v75) + fabsf(v71)) * 0.00001)))
      {
        v99 = 1;
      }
      *v73 = v71;
      v31 = *(unsigned int *)(v101 + 36 * v31 + 12);
      v108 = v31;
    }
    while ((_DWORD)v31);
  }
  while ((v99 & 1) != 0);
  v76 = *(unsigned int *)(*(_QWORD *)(a1 + 120) + v98);
  v108 = v76;
  if ((_DWORD)v76)
  {
    v77 = (char **)(a1 + 480);
    do
    {
      v78 = *(_QWORD *)(a1 + 360);
      if (a3)
      {
        v79 = v76 | ((unint64_t)*(unsigned int *)(v78 + 36 * v76 + 4) << 32);
        v81 = *(unint64_t **)(a1 + 488);
        v80 = *(_QWORD *)(a1 + 496);
        if ((unint64_t)v81 >= v80)
        {
          v83 = ((char *)v81 - *v77) >> 3;
          if ((unint64_t)(v83 + 1) >> 61)
            goto LABEL_130;
          v84 = v80 - (_QWORD)*v77;
          v85 = v84 >> 2;
          if (v84 >> 2 <= (unint64_t)(v83 + 1))
            v85 = v83 + 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v85;
          if (v86)
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 496, v86);
          else
            v87 = 0;
          v88 = (unint64_t *)&v87[8 * v83];
          *v88 = v79;
          v82 = v88 + 1;
          v90 = *(char **)(a1 + 480);
          v89 = *(char **)(a1 + 488);
          if (v89 != v90)
          {
            do
            {
              v91 = *((_QWORD *)v89 - 1);
              v89 -= 8;
              *--v88 = v91;
            }
            while (v89 != v90);
            v89 = *v77;
          }
          *(_QWORD *)(a1 + 480) = v88;
          *(_QWORD *)(a1 + 488) = v82;
          *(_QWORD *)(a1 + 496) = &v87[8 * v86];
          if (v89)
            operator delete(v89);
        }
        else
        {
          *v81 = v79;
          v82 = v81 + 1;
        }
        *(_QWORD *)(a1 + 488) = v82;
      }
      v107[0] = &v108;
      v92 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v100, &v108, (uint64_t)&std::piecewise_construct, v107);
      v93 = *(float *)(a1 + 144);
      if (v93 == INFINITY)
        v94 = *(float *)(a1 + 148);
      else
        v94 = v93 - v92[5];
      v95 = *(float *)(v78 + 36 * v76) - v94;
      v96 = v78 + 36 * v76;
      *(float *)(v96 + 4) = v95;
      v97 = (_DWORD *)(v96 + 4);
      if (v95 > *(float *)(a1 + 204))
        *v97 = 2139095040;
      v76 = *(unsigned int *)(v78 + 36 * v76 + 12);
      v108 = v76;
    }
    while ((_DWORD)v76);
  }
}

void sub_1ADE98734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneForwardLinks(uint64_t a1, unsigned int a2, _BYTE *a3, _BYTE *a4, int a5, float a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  uint64_t v29;
  float *v30;
  float v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  float v41;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  char *v51;
  unint64_t v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float *v83;
  float v84;
  uint64_t v85;
  uint64_t v87;
  char **v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  void **v94;
  void **v95;
  unsigned int i;
  _DWORD *v99[34];

  *a3 = 0;
  *a4 = 0;
  v88 = (char **)(a1 + 480);
  v87 = a1 + 496;
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 8 * a2);
  v85 = 8 * a2;
  if ((_DWORD)v8)
  {
    v94 = (void **)(a1 + 576);
    v95 = (void **)(a1 + 448);
    v90 = a1 + 592;
    v91 = a1 + 464;
    v89 = a5;
    do
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(a1 + 360);
        if ((v89 & 1) != 0)
        {
          v11 = *(_QWORD *)(a1 + 360);
          v12 = v8 | ((unint64_t)*(unsigned int *)(v10 + 36 * v8 + 4) << 32);
          v14 = *(unint64_t **)(a1 + 488);
          v13 = *(_QWORD *)(a1 + 496);
          if ((unint64_t)v14 >= v13)
          {
            v16 = ((char *)v14 - *v88) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
LABEL_110:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v17 = v13 - (_QWORD)*v88;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v19);
            else
              v20 = 0;
            v21 = (unint64_t *)&v20[8 * v16];
            *v21 = v12;
            v15 = v21 + 1;
            v23 = *(char **)(a1 + 480);
            v22 = *(char **)(a1 + 488);
            if (v22 != v23)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *--v21 = v24;
              }
              while (v22 != v23);
              v22 = *v88;
            }
            *(_QWORD *)(a1 + 480) = v21;
            *(_QWORD *)(a1 + 488) = v15;
            *(_QWORD *)(a1 + 496) = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          *(_QWORD *)(a1 + 488) = v15;
          v10 = v11;
        }
        v93 = v9;
        v25 = v10 + 36 * v8;
        v28 = *(_DWORD *)(v25 + 8);
        v27 = (_DWORD *)(v25 + 8);
        v26 = v28;
        v92 = v10;
        if (v28)
        {
          v29 = 0;
          v30 = (float *)(v10 + 36 * v8);
          v31 = INFINITY;
          do
          {
            v32 = *(_QWORD *)(a1 + 376);
            v33 = (float *)(v32 + 24 * v26);
            v34 = (float *)(*(_QWORD *)(a1 + 360) + 36 * *(unsigned int *)v33);
            v35 = v34[1] + (float)((float)((float)(*v30 + v33[3]) + v33[2]) - *v34);
            if (v35 <= *(float *)(a1 + 204))
            {
              if (v35 >= 0.0)
              {
                v41 = v34[1] + (float)((float)((float)(*v30 + v33[3]) + v33[2]) - *v34);
              }
              else
              {
                v41 = 0.0;
                if (v35 < -0.01 && kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Negative extra_cost: ", 21);
                  std::ostream::operator<<();
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
                }
              }
              if (v41 < v31)
                v31 = v41;
              v37 = *(unsigned int *)(v32 + 24 * v26 + 16);
              v29 = v26;
            }
            else
            {
              v36 = v27;
              if (v29)
                v36 = (_DWORD *)(*(_QWORD *)(a1 + 376) + 24 * v29 + 16);
              v37 = *(unsigned int *)(v32 + 24 * v26 + 16);
              *v36 = v37;
              if (a5)
              {
                v39 = *(char **)(a1 + 456);
                v38 = *(_QWORD *)(a1 + 464);
                if ((unint64_t)v39 >= v38)
                {
                  v43 = (char *)*v95;
                  v44 = (v39 - (_BYTE *)*v95) >> 2;
                  v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v46 = v38 - (_QWORD)v43;
                  if (v46 >> 1 > v45)
                    v45 = v46 >> 1;
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                    v47 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v47 = v45;
                  if (v47)
                  {
                    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v91, v47);
                    v43 = *(char **)(a1 + 448);
                    v39 = *(char **)(a1 + 456);
                  }
                  else
                  {
                    v48 = 0;
                  }
                  v49 = &v48[4 * v44];
                  *(_DWORD *)v49 = v26;
                  v40 = v49 + 4;
                  while (v39 != v43)
                  {
                    v50 = *((_DWORD *)v39 - 1);
                    v39 -= 4;
                    *((_DWORD *)v49 - 1) = v50;
                    v49 -= 4;
                  }
                  *(_QWORD *)(a1 + 448) = v49;
                  *(_QWORD *)(a1 + 456) = v40;
                  *(_QWORD *)(a1 + 464) = &v48[4 * v47];
                  if (v43)
                    operator delete(v43);
                }
                else
                {
                  *(_DWORD *)v39 = v26;
                  v40 = v39 + 4;
                }
                *(_QWORD *)(a1 + 456) = v40;
                v51 = *(char **)(a1 + 584);
                v52 = *(_QWORD *)(a1 + 592);
                if ((unint64_t)v51 >= v52)
                {
                  v54 = (char *)*v94;
                  v55 = (v51 - (_BYTE *)*v94) >> 2;
                  v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v57 = v52 - (_QWORD)v54;
                  if (v57 >> 1 > v56)
                    v56 = v57 >> 1;
                  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                    v58 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v58 = v56;
                  if (v58)
                  {
                    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v90, v58);
                    v51 = *(char **)(a1 + 584);
                    v54 = *(char **)(a1 + 576);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = &v59[4 * v55];
                  *(_DWORD *)v60 = v8;
                  v53 = v60 + 4;
                  while (v51 != v54)
                  {
                    v61 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v60 - 1) = v61;
                    v60 -= 4;
                  }
                  *(_QWORD *)(a1 + 576) = v60;
                  *(_QWORD *)(a1 + 584) = v53;
                  *(_QWORD *)(a1 + 592) = &v59[4 * v58];
                  if (v54)
                    operator delete(v54);
                }
                else
                {
                  *(_DWORD *)v51 = v8;
                  v53 = v51 + 4;
                }
                *(_QWORD *)(a1 + 584) = v53;
              }
              *a4 = 1;
              --*(_DWORD *)(a1 + 312);
            }
            v26 = v37;
          }
          while (v37);
        }
        else
        {
          v31 = INFINITY;
        }
        v62 = v92 + 36 * v8;
        v9 = v93;
        if (vabds_f32(v31, *(float *)(v62 + 4)) > a6)
          v9 = 1;
        *(float *)(v62 + 4) = v31;
        v8 = *(unsigned int *)(v62 + 12);
      }
      while ((_DWORD)v8);
      if ((v9 & 1) == 0)
        break;
      v89 = 0;
      *a3 = 1;
      v8 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + v85);
    }
    while ((_DWORD)v8);
  }
  v63 = *(unsigned int *)(*(_QWORD *)(a1 + 120) + v85);
  for (i = v63; (_DWORD)v63; i = v63)
  {
    v64 = *(_QWORD *)(a1 + 360);
    if (a5)
    {
      v65 = v63 | ((unint64_t)*(unsigned int *)(v64 + 36 * v63 + 4) << 32);
      v67 = *(unint64_t **)(a1 + 488);
      v66 = *(_QWORD *)(a1 + 496);
      if ((unint64_t)v67 >= v66)
      {
        v69 = ((char *)v67 - *v88) >> 3;
        if ((unint64_t)(v69 + 1) >> 61)
          goto LABEL_110;
        v70 = v66 - (_QWORD)*v88;
        v71 = v70 >> 2;
        if (v70 >> 2 <= (unint64_t)(v69 + 1))
          v71 = v69 + 1;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v71;
        if (v72)
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v87, v72);
        else
          v73 = 0;
        v74 = (unint64_t *)&v73[8 * v69];
        *v74 = v65;
        v68 = v74 + 1;
        v76 = *(char **)(a1 + 480);
        v75 = *(char **)(a1 + 488);
        if (v75 != v76)
        {
          do
          {
            v77 = *((_QWORD *)v75 - 1);
            v75 -= 8;
            *--v74 = v77;
          }
          while (v75 != v76);
          v75 = *v88;
        }
        *(_QWORD *)(a1 + 480) = v74;
        *(_QWORD *)(a1 + 488) = v68;
        *(_QWORD *)(a1 + 496) = &v73[8 * v72];
        if (v75)
          operator delete(v75);
      }
      else
      {
        *v67 = v65;
        v68 = v67 + 1;
      }
      *(_QWORD *)(a1 + 488) = v68;
    }
    v99[0] = &i;
    v78 = (float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1 + 320, &i, (uint64_t)&std::piecewise_construct, v99);
    v79 = *(float *)(a1 + 144);
    if (v79 == INFINITY)
      v80 = *(float *)(a1 + 148);
    else
      v80 = v79 - v78[5];
    v81 = *(float *)(v64 + 36 * v63) - v80;
    v82 = v64 + 36 * v63;
    v84 = *(float *)(v82 + 4);
    v83 = (float *)(v82 + 4);
    if (vabds_f32(v81, v84) > a6)
      *a3 = 1;
    *v83 = v81;
    if (v81 > *(float *)(a1 + 204))
    {
      *v83 = INFINITY;
      *a4 = 1;
    }
    v63 = *(unsigned int *)(v64 + 36 * v63 + 12);
  }
}

void sub_1ADE98DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneTokensForFrame(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unsigned int v11;
  _DWORD *v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  unint64_t v25;
  _DWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  unsigned int v55;
  _DWORD *v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  char *v68;
  unint64_t v69;
  _DWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  void **v97;
  void **v98;
  void **v99;
  char **v100;
  char **v101;
  uint64_t v102;
  unsigned int v104;
  unsigned int *v105;

  v4 = result;
  v102 = a2;
  v5 = *(unsigned int *)(result[12] + 8 * a2);
  v104 = v5;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v96 = (void **)(result + 66);
    v98 = (void **)(result + 50);
    v94 = (uint64_t)(result + 68);
    v95 = (uint64_t)(result + 52);
    v100 = (char **)(result + 63);
    v93 = (uint64_t)(result + 65);
    do
    {
      v7 = v5;
      v8 = v4[45];
      v9 = v8 + 36 * v5;
      v11 = *(_DWORD *)(v9 + 12);
      v10 = (float *)(v9 + 12);
      v5 = v11;
      if (*(v10 - 2) == INFINITY)
      {
        if (v6)
          v12 = (_DWORD *)(v8 + 36 * v6 + 12);
        else
          v12 = (_DWORD *)(v4[12] + 8 * v102);
        *v12 = v5;
        if (a3)
        {
          v14 = (char *)v4[51];
          v13 = v4[52];
          if ((unint64_t)v14 >= v13)
          {
            v16 = (char *)*v98;
            v17 = (v14 - (_BYTE *)*v98) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
LABEL_119:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v19 = v13 - (_QWORD)v16;
            if (v19 >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v95, v20);
              v16 = (char *)v4[50];
              v14 = (char *)v4[51];
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[4 * v17];
            *(_DWORD *)v22 = v104;
            v15 = v22 + 4;
            while (v14 != v16)
            {
              v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            v4[50] = (uint64_t)v22;
            v4[51] = (uint64_t)v15;
            v4[52] = (uint64_t)&v21[4 * v20];
            if (v16)
              operator delete(v16);
          }
          else
          {
            *(_DWORD *)v14 = v104;
            v15 = v14 + 4;
          }
          v4[51] = (uint64_t)v15;
          v24 = (char *)v4[67];
          v25 = v4[68];
          if ((unint64_t)v24 >= v25)
          {
            v27 = (char *)*v96;
            v28 = (v24 - (_BYTE *)*v96) >> 2;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
LABEL_120:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v30 = v25 - (_QWORD)v27;
            if (v30 >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v94, v31);
              v24 = (char *)v4[67];
              v27 = (char *)v4[66];
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[4 * v28];
            *(_DWORD *)v33 = a2;
            v26 = v33 + 4;
            while (v24 != v27)
            {
              v34 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            v4[66] = (uint64_t)v33;
            v4[67] = (uint64_t)v26;
            v4[68] = (uint64_t)&v32[4 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *(_DWORD *)v24 = a2;
            v26 = v24 + 4;
          }
          v4[67] = (uint64_t)v26;
          if (std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v4 + 40, &v104))
          {
            v105 = &v104;
            v35 = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v4 + 40), &v104, (uint64_t)&std::piecewise_construct, &v105);
            v36 = v104 | ((unint64_t)*((unsigned int *)v35 + 5) << 32);
            v37 = (unint64_t *)v4[64];
            v38 = v4[65];
            if ((unint64_t)v37 >= v38)
            {
              v40 = ((char *)v37 - *v100) >> 3;
              if ((unint64_t)(v40 + 1) >> 61)
LABEL_121:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v41 = v38 - (_QWORD)*v100;
              v42 = v41 >> 2;
              if (v41 >> 2 <= (unint64_t)(v40 + 1))
                v42 = v40 + 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v43 = v42;
              if (v43)
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v93, v43);
              else
                v44 = 0;
              v45 = (unint64_t *)&v44[8 * v40];
              *v45 = v36;
              v39 = v45 + 1;
              v47 = (char *)v4[63];
              v46 = (char *)v4[64];
              if (v46 != v47)
              {
                do
                {
                  v48 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *--v45 = v48;
                }
                while (v46 != v47);
                v46 = *v100;
              }
              v4[63] = (uint64_t)v45;
              v4[64] = (uint64_t)v39;
              v4[65] = (uint64_t)&v44[8 * v43];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v4[64] = (uint64_t)v39;
          }
        }
        result = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>(v4 + 40, &v104);
        *v10 = 0.0;
        --*((_DWORD *)v4 + 77);
        v7 = v6;
      }
      v104 = v5;
      v6 = v7;
    }
    while (v5);
  }
  v49 = *(unsigned int *)(v4[15] + 8 * v102);
  v104 = v49;
  if ((_DWORD)v49)
  {
    v50 = 0;
    v97 = (void **)(v4 + 69);
    v99 = (void **)(v4 + 53);
    v101 = (char **)(v4 + 63);
    do
    {
      v51 = v49;
      v52 = v4[45];
      v53 = v52 + 36 * v49;
      v55 = *(_DWORD *)(v53 + 12);
      v54 = (float *)(v53 + 12);
      v49 = v55;
      if (*(v54 - 2) == INFINITY)
      {
        if (v50)
          v56 = (_DWORD *)(v52 + 36 * v50 + 12);
        else
          v56 = (_DWORD *)(v4[15] + 8 * v102);
        *v56 = v49;
        if (a3)
        {
          v58 = (char *)v4[54];
          v57 = v4[55];
          if ((unint64_t)v58 >= v57)
          {
            v60 = (char *)*v99;
            v61 = (v58 - (_BYTE *)*v99) >> 2;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62)
              goto LABEL_119;
            v63 = v57 - (_QWORD)v60;
            if (v63 >> 1 > v62)
              v62 = v63 >> 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
              v64 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 55), v64);
              v60 = (char *)v4[53];
              v58 = (char *)v4[54];
            }
            else
            {
              v65 = 0;
            }
            v66 = &v65[4 * v61];
            *(_DWORD *)v66 = v104;
            v59 = v66 + 4;
            while (v58 != v60)
            {
              v67 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *((_DWORD *)v66 - 1) = v67;
              v66 -= 4;
            }
            v4[53] = (uint64_t)v66;
            v4[54] = (uint64_t)v59;
            v4[55] = (uint64_t)&v65[4 * v64];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *(_DWORD *)v58 = v104;
            v59 = v58 + 4;
          }
          v4[54] = (uint64_t)v59;
          v68 = (char *)v4[70];
          v69 = v4[71];
          if ((unint64_t)v68 >= v69)
          {
            v71 = (char *)*v97;
            v72 = (v68 - (_BYTE *)*v97) >> 2;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 62)
              goto LABEL_120;
            v74 = v69 - (_QWORD)v71;
            if (v74 >> 1 > v73)
              v73 = v74 >> 1;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
              v75 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 71), v75);
              v68 = (char *)v4[70];
              v71 = (char *)v4[69];
            }
            else
            {
              v76 = 0;
            }
            v77 = &v76[4 * v72];
            *(_DWORD *)v77 = a2;
            v70 = v77 + 4;
            while (v68 != v71)
            {
              v78 = *((_DWORD *)v68 - 1);
              v68 -= 4;
              *((_DWORD *)v77 - 1) = v78;
              v77 -= 4;
            }
            v4[69] = (uint64_t)v77;
            v4[70] = (uint64_t)v70;
            v4[71] = (uint64_t)&v76[4 * v75];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_DWORD *)v68 = a2;
            v70 = v68 + 4;
          }
          v4[70] = (uint64_t)v70;
          v105 = &v104;
          v79 = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(v4 + 40), &v104, (uint64_t)&std::piecewise_construct, &v105);
          v80 = v104 | ((unint64_t)*((unsigned int *)v79 + 5) << 32);
          v81 = (unint64_t *)v4[64];
          v82 = v4[65];
          if ((unint64_t)v81 >= v82)
          {
            v84 = ((char *)v81 - *v101) >> 3;
            if ((unint64_t)(v84 + 1) >> 61)
              goto LABEL_121;
            v85 = v82 - (_QWORD)*v101;
            v86 = v85 >> 2;
            if (v85 >> 2 <= (unint64_t)(v84 + 1))
              v86 = v84 + 1;
            if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
              v87 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v87 = v86;
            if (v87)
              v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v4 + 65), v87);
            else
              v88 = 0;
            v89 = (unint64_t *)&v88[8 * v84];
            *v89 = v80;
            v83 = v89 + 1;
            v91 = (char *)v4[63];
            v90 = (char *)v4[64];
            if (v90 != v91)
            {
              do
              {
                v92 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                *--v89 = v92;
              }
              while (v90 != v91);
              v90 = *v101;
            }
            v4[63] = (uint64_t)v89;
            v4[64] = (uint64_t)v83;
            v4[65] = (uint64_t)&v88[8 * v87];
            if (v90)
              operator delete(v90);
          }
          else
          {
            *v81 = v80;
            v83 = v81 + 1;
          }
          v4[64] = (uint64_t)v83;
        }
        result = std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__erase_unique<unsigned int>(v4 + 40, &v104);
        *v54 = 0.0;
        --*((_DWORD *)v4 + 77);
        v51 = v50;
      }
      v104 = v49;
      v50 = v51;
    }
    while (v49);
  }
  return result;
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(uint64_t a1, clockid_t a2)
{
  kaldi::quasar::E2ETokenHeap *v3;
  unsigned int *v4;
  unsigned int *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t *j;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  char *v33;
  int v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int *v48;
  char *v49;
  int v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  clockid_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  char *v70;
  void *__p;
  char *v72;
  char *v73;
  _OWORD v74[2];
  int v75;
  void *v76[3];
  void *v77;
  void *v78;
  _BYTE v79[32];
  uint64_t v80;
  _QWORD v81[36];

  if (*(_BYTE *)(a1 + 472))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Skipping compaction final pruning because has been done", 55);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
    }
    return;
  }
  v3 = (kaldi::quasar::E2ETokenHeap *)(a1 + 360);
  v79[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v79, a2);
  v80 = 0;
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VisitLiveTokens<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(void)::{lambda#1}>((kaldi::quasar::E2ETokenHeap *)a1, a1);
  v4 = *(unsigned int **)(a1 + 448);
  for (i = *(unsigned int **)(a1 + 456); v4 != i; ++v4)
  {
    v6 = *v4;
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 376);
      do
      {
        v8 = v7 + 24 * v6;
        v6 = *(unsigned int *)(v8 + 16);
        *(_DWORD *)(v8 + 20) |= 0x80000000;
      }
      while ((_DWORD)v6);
    }
  }
  kaldi::quasar::E2ETokenHeap::RemoveDeadObjects(v3, (uint64_t *)v76);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = v76[0];
    do
    {
      *(_DWORD *)(v9 + 16) = v10[*(unsigned int *)(v9 + 16)];
      v9 = *(_QWORD *)(v9 + 24);
    }
    while (v9);
  }
  v11 = *(_DWORD **)(a1 + 96);
  v12 = *(_DWORD **)(a1 + 104);
  if (v11 != v12)
  {
    v13 = v76[0];
    do
    {
      *v11 = v13[*v11];
      v11 += 2;
    }
    while (v11 != v12);
  }
  v14 = *(_DWORD **)(a1 + 120);
  v15 = *(_DWORD **)(a1 + 128);
  if (v14 != v15)
  {
    v16 = v76[0];
    do
    {
      *v14 = v16[*v14];
      v14 += 2;
    }
    while (v14 != v15);
  }
  v17 = *(_DWORD **)(a1 + 576);
  v18 = *(_DWORD **)(a1 + 584);
  if (v17 != v18)
  {
    v19 = v76[0];
    do
    {
      *v17 = v19[*v17];
      ++v17;
    }
    while (v17 != v18);
  }
  v20 = *(_DWORD **)(a1 + 400);
  v21 = *(_DWORD **)(a1 + 408);
  if (v20 != v21)
  {
    v22 = v76[0];
    do
    {
      *v20 = v22[*v20];
      ++v20;
    }
    while (v20 != v21);
  }
  v23 = *(_DWORD **)(a1 + 424);
  v24 = *(_DWORD **)(a1 + 432);
  if (v23 != v24)
  {
    v25 = v76[0];
    do
    {
      *v23 = v25[*v23];
      ++v23;
    }
    while (v23 != v24);
  }
  v26 = *(_DWORD **)(a1 + 448);
  v27 = *(_DWORD **)(a1 + 456);
  if (v26 != v27)
  {
    v28 = v77;
    do
    {
      *v26 = v28[*v26];
      ++v26;
    }
    while (v26 != v27);
  }
  memset(v74, 0, sizeof(v74));
  v75 = 1065353216;
  for (j = *(uint64_t **)(a1 + 336); j; j = (uint64_t *)*j)
  {
    LODWORD(v81[0]) = *((_DWORD *)v76[0] + *((unsigned int *)j + 4));
    HIDWORD(v81[0]) = *((_DWORD *)j + 5);
    std::__hash_table<std::__hash_value_type<char32_t,char32_t>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,char32_t>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,char32_t>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,char32_t>>>::__emplace_unique_key_args<char32_t,std::pair<char32_t const,char32_t> const&>((uint64_t)v74, (unsigned int *)v81, v81);
  }
  std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign(a1 + 320, (uint64_t *)v74);
  __p = 0;
  v72 = 0;
  v73 = 0;
  v30 = (unsigned int **)(a1 + 480);
  v31 = *(unsigned int **)(a1 + 480);
  v32 = *(unsigned int **)(a1 + 488);
  if (v31 == v32)
  {
    v33 = 0;
    if (v31)
    {
LABEL_52:
      *(_QWORD *)(a1 + 488) = v31;
      operator delete(v31);
      *v30 = 0;
      *(_QWORD *)(a1 + 488) = 0;
      *(_QWORD *)(a1 + 496) = 0;
      v33 = v72;
    }
  }
  else
  {
    v33 = 0;
    do
    {
      v34 = *((_DWORD *)v76[0] + *v31);
      v35 = v31[1];
      if (v33 >= v73)
      {
        v36 = (char *)__p;
        v37 = (v33 - (_BYTE *)__p) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v73 - (_BYTE *)__p;
        if ((v73 - (_BYTE *)__p) >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v73, v40);
          v36 = (char *)__p;
          v33 = v72;
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[8 * v37];
        *(_DWORD *)v42 = v34;
        *((_DWORD *)v42 + 1) = v35;
        v43 = v42;
        if (v33 != v36)
        {
          do
          {
            v44 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v43 - 1) = v44;
            v43 -= 8;
          }
          while (v33 != v36);
          v36 = (char *)__p;
        }
        v33 = v42 + 8;
        __p = v43;
        v72 = v42 + 8;
        v73 = &v41[8 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_DWORD *)v33 = v34;
        *((_DWORD *)v33 + 1) = v35;
        v33 += 8;
      }
      v72 = v33;
      v31 += 2;
    }
    while (v31 != v32);
    v31 = *v30;
    if (*v30)
      goto LABEL_52;
  }
  v45 = v73;
  *(_QWORD *)(a1 + 480) = __p;
  *(_QWORD *)(a1 + 488) = v33;
  *(_QWORD *)(a1 + 496) = v45;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  __p = 0;
  v68 = 0;
  v69 = 0;
  v46 = (unsigned int **)(a1 + 504);
  v47 = *(unsigned int **)(a1 + 504);
  v48 = *(unsigned int **)(a1 + 512);
  if (v47 == v48)
  {
    v49 = 0;
    if (!v47)
      goto LABEL_74;
  }
  else
  {
    v49 = 0;
    do
    {
      v50 = *((_DWORD *)v76[0] + *v47);
      v51 = v47[1];
      if (v49 >= v70)
      {
        v52 = v68;
        v53 = (v49 - v68) >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v55 = v70 - v68;
        if ((v70 - v68) >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v70, v56);
          v52 = v68;
          v49 = v69;
        }
        else
        {
          v57 = 0;
        }
        v58 = &v57[8 * v53];
        *(_DWORD *)v58 = v50;
        *((_DWORD *)v58 + 1) = v51;
        v59 = v58;
        if (v49 != v52)
        {
          do
          {
            v60 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v59 - 1) = v60;
            v59 -= 8;
          }
          while (v49 != v52);
          v52 = v68;
        }
        v49 = v58 + 8;
        v68 = v59;
        v70 = &v57[8 * v56];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_DWORD *)v49 = v50;
        *((_DWORD *)v49 + 1) = v51;
        v49 += 8;
      }
      v69 = v49;
      v47 += 2;
    }
    while (v47 != v48);
    v47 = *v46;
    if (!*v46)
      goto LABEL_74;
  }
  *(_QWORD *)(a1 + 512) = v47;
  operator delete(v47);
  *v46 = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  v49 = v69;
LABEL_74:
  v61 = v70;
  *(_QWORD *)(a1 + 504) = v68;
  *(_QWORD *)(a1 + 512) = v49;
  *(_QWORD *)(a1 + 520) = v61;
  v70 = 0;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Compacted in ", 13);
    kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v62);
    v63 = (_QWORD *)std::ostream::operator<<();
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ms ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"tokens ", 7);
    v65 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" -> ", 4);
    v66 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" and forward links ", 19);
    v67 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" -> ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
  }
  if (__p)
  {
    v72 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v74);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
}

void sub_1ADE99A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a17);
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a22);
  _Unwind_Resume(a1);
}

kaldi::quasar::E2ETokenHeap *kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VisitLiveTokens<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CompactTokensAndLinks(void)::{lambda(unsigned int)#1}>(kaldi::quasar::E2ETokenHeap *result, uint64_t a2)
{
  kaldi::quasar::E2ETokenHeap *v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int *j;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *k;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *m;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *n;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *ii;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *jj;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  kaldi::quasar::E2ETokenHeap *v25;
  unsigned int v26;

  v3 = result;
  for (i = *((_QWORD *)result + 2); i; i = *(_QWORD *)(i + 24))
    result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), *(_DWORD *)(i + 16), 1);
  v5 = (unsigned int *)*((_QWORD *)v3 + 12);
  for (j = (unsigned int *)*((_QWORD *)v3 + 13);
        v5 != j;
        result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v7, 1))
  {
    v7 = *v5;
    v5 += 2;
  }
  v8 = (unsigned int *)*((_QWORD *)v3 + 15);
  for (k = (unsigned int *)*((_QWORD *)v3 + 16);
        v8 != k;
        result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v10, 1))
  {
    v10 = *v8;
    v8 += 2;
  }
  v11 = (unsigned int *)*((_QWORD *)v3 + 72);
  for (m = (unsigned int *)*((_QWORD *)v3 + 73);
        v11 != m;
        result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v13, 1))
  {
    v13 = *v11++;
  }
  v14 = (unsigned int *)*((_QWORD *)v3 + 50);
  for (n = (unsigned int *)*((_QWORD *)v3 + 51);
        v14 != n;
        result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v16, 1))
  {
    v16 = *v14++;
  }
  v17 = (unsigned int *)*((_QWORD *)v3 + 53);
  for (ii = (unsigned int *)*((_QWORD *)v3 + 54);
        v17 != ii;
        result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v19, 1))
  {
    v19 = *v17++;
  }
  v20 = (unsigned int *)*((_QWORD *)v3 + 60);
  for (jj = (unsigned int *)*((_QWORD *)v3 + 61);
        v20 != jj;
        result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken((kaldi::quasar::E2ETokenHeap *)(a2 + 360), v22, 1))
  {
    v22 = *v20;
    v20 += 2;
  }
  v24 = (unsigned int *)*((_QWORD *)v3 + 63);
  v23 = (unsigned int *)*((_QWORD *)v3 + 64);
  if (v24 != v23)
  {
    v25 = (kaldi::quasar::E2ETokenHeap *)(a2 + 360);
    do
    {
      v26 = *v24;
      v24 += 2;
      result = kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(v25, v26, 1);
    }
    while (v24 != v23);
  }
  return result;
}

uint64_t kaldi::quasar::E2ETokenHeap::RemoveDeadObjects@<X0>(kaldi::quasar::E2ETokenHeap *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;

  v4 = *((unsigned int *)this + 3);
  if (v4 >= 2)
  {
    v5 = 0;
    for (i = 1; i < v4; ++i)
    {
      v7 = *(_QWORD *)this + v5;
      v8 = *(_DWORD *)(v7 + 64) & 0x3FFFFFF;
      if (v8 && (*(_DWORD *)(v7 + 60) & 0x80000000) != 0)
      {
        kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(this, v8, 1);
        v4 = *((unsigned int *)this + 3);
      }
      v5 += 36;
    }
  }
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::RemoveDeadElements((uint64_t)this, (std::vector<unsigned int> *)a2);
  result = kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::RemoveDeadElements((uint64_t)this + 16, (std::vector<unsigned int> *)a2 + 1);
  v10 = *((unsigned int *)this + 3);
  if (v10 >= 2)
  {
    v11 = *a2;
    v12 = a2[3];
    v13 = (unsigned int *)(*(_QWORD *)this + 44);
    v14 = v10 - 1;
    do
    {
      v15 = *v13;
      v13[1] = *(_DWORD *)(v11 + 4 * v13[1]);
      v13[5] = *(_DWORD *)(v11 + 4 * (v13[5] & 0x3FFFFFF)) | v13[5] & 0xFC000000;
      *v13 = *(_DWORD *)(v12 + 4 * v15);
      v13 += 9;
      --v14;
    }
    while (v14);
  }
  v16 = *((unsigned int *)this + 7);
  if (v16 >= 2)
  {
    v17 = *a2;
    v18 = a2[3];
    v19 = (_DWORD *)(*((_QWORD *)this + 2) + 40);
    v20 = v16 - 1;
    do
    {
      *(v19 - 4) = *(_DWORD *)(v17 + 4 * *(v19 - 4));
      *v19 = *(_DWORD *)(v18 + 4 * *v19);
      v19 += 6;
      --v20;
    }
    while (v20);
  }
  return result;
}

void sub_1ADE99D90(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState *v1;

  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::E2ETokenHeap *kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(kaldi::quasar::E2ETokenHeap *this, unsigned int a2, int a3)
{
  kaldi::quasar::E2ETokenHeap *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unsigned int v13;

  if (a2)
  {
    v3 = this;
    v4 = *(_QWORD *)this;
    v5 = *(_QWORD *)this + 36 * a2;
    v8 = *(_DWORD *)(v5 + 24);
    v6 = (unsigned int *)(v5 + 24);
    v7 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      *v6 = v7 | 0x80000000;
      v9 = *(unsigned int *)(v4 + 36 * a2 + 8);
      if ((_DWORD)v9)
      {
        v10 = *((_QWORD *)this + 2);
        do
        {
          v11 = v10 + 24 * v9;
          v9 = *(unsigned int *)(v11 + 16);
          *(_DWORD *)(v11 + 20) |= 0x80000000;
        }
        while ((_DWORD)v9);
      }
      if (a3)
      {
        for (i = v4 + 36 * a2; ; i = *(_QWORD *)v3 + 36 * v13)
        {
          v13 = *(_DWORD *)(i + 12);
          if (!v13)
            break;
          this = (kaldi::quasar::E2ETokenHeap *)kaldi::quasar::E2ETokenHeap::MarkAndTraceToken(v3, *(_DWORD *)(i + 12), 0);
        }
      }
    }
  }
  return this;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    v8 = 1;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)a1;
    v7 = 1;
    v8 = 1;
    do
    {
      if ((*(_DWORD *)(v6 + v5 + 60) & 0x80000000) != 0)
      {
        if (v7 != v8)
        {
          v9 = v6 + v5 + 36;
          v10 = v6 + 36 * v8;
          v11 = *(_OWORD *)v9;
          v12 = *(_OWORD *)(v9 + 16);
          *(_DWORD *)(v10 + 32) = *(_DWORD *)(v9 + 32);
          *(_OWORD *)v10 = v11;
          *(_OWORD *)(v10 + 16) = v12;
          v6 = *(_QWORD *)a1;
        }
        *(_DWORD *)(v6 + 36 * v8 + 24) &= ~0x80000000;
        this->__begin_[v7] = v8++;
      }
      else
      {
        this->__begin_[v7] = -1;
      }
      ++v7;
      v5 += 36;
    }
    while (v4 != v7);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::ShrinkBuffer(a1, v8);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::RemoveDeadElements(uint64_t a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = *(unsigned int *)(a1 + 12);
  std::vector<int>::resize(this, v4);
  if (v4 < 2)
  {
    v8 = 1;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)a1;
    v7 = 1;
    v8 = 1;
    do
    {
      v9 = v6 + v5;
      if ((*(_DWORD *)(v6 + v5 + 44) & 0x80000000) != 0)
      {
        if (v7 != v8)
        {
          v10 = v6 + 24 * v8;
          v11 = *(_OWORD *)(v9 + 24);
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 40);
          *(_OWORD *)v10 = v11;
          v6 = *(_QWORD *)a1;
        }
        *(_DWORD *)(v6 + 24 * v8 + 20) &= ~0x80000000;
        this->__begin_[v7] = v8++;
      }
      else
      {
        this->__begin_[v7] = -1;
      }
      ++v7;
      v5 += 24;
    }
    while (v4 != v7);
  }
  return kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::ShrinkBuffer(a1, v8);
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  _QWORD v10[34];

  result = sysconf(29);
  v5 = (result - 1 + 36 * a2) & -result;
  v6 = (result - 1 + 36 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    result = madvise((void *)(v5 + *(_QWORD *)a1), v6 - v5, 7);
    if ((_DWORD)result)
    {
      v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::ShrinkBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  _QWORD v10[34];

  result = sysconf(29);
  v5 = (result - 1 + 24 * a2) & -result;
  v6 = (result - 1 + 24 * *(unsigned int *)(a1 + 12)) & -result;
  if (v6 != v5)
  {
    result = madvise((void *)(v5 + *(_QWORD *)a1), v6 - v5, 7);
    if ((_DWORD)result)
    {
      v7 = result;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Could not madvise: ", 20);
      v9 = strerror(v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, v9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t std::set<int>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADE9A1D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,quasar::UnkMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, int *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  fst *v12;
  _QWORD *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  char v19;
  _QWORD v20[2];
  char v21;
  char v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v6, &v25);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
        {
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
          if (*(_DWORD *)(v7 + 4) == a2[1])
          {
            v8 = *a2;
            v9 = *(_DWORD *)(v7 + 16);
            LODWORD(v23[0]) = *(_DWORD *)(v7 + 4);
            HIDWORD(v23[0]) = v8;
          }
          else
          {
            v23[0] = *(_QWORD *)v7;
            v9 = *(_DWORD *)(v7 + 16);
          }
          v23[1] = *(_QWORD *)(v7 + 8);
          v24 = v9;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v25 + 88))(v25, v23);
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
        if (v25)
          (*(void (**)(void))(*(_QWORD *)v25 + 8))();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v23, a1, v6);
        v10 = v23[0];
        if (a2[1] || !*a2)
          goto LABEL_24;
        v11 = FLAGS_fst_error_fatal;
        if (FLAGS_fst_error_fatal)
        {
          std::string::basic_string[abi:ne180100]<0>(v20, "FATAL");
          v12 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)v20);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v12 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
        }
        v13 = (_QWORD *)fst::cerr(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
        if (v11)
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
          if (v21 < 0)
          {
            v14 = (void *)v20[0];
LABEL_22:
            operator delete(v14);
          }
        }
        else
        {
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
          if (v18 < 0)
          {
            v14 = __p[0];
            goto LABEL_22;
          }
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
LABEL_24:
        v16 = v10;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v6, &v16);
        v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    v15 = fst::InvertProperties(v5);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v15, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1ADE9A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a20);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FinalEos()
{
  return INFINITY;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<int,std::pair<int,int>>,void *> *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *inserted;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *(uint64_t *)((char *)v8 + 20) = *(_QWORD *)((char *)a2 + 20);
      v10 = (uint64_t *)*v8;
      v8[1] = v9;
      inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v8, inserted);
      a2 = (_QWORD *)*a2;
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_multi<std::pair<int const,std::pair<int,int>> const&>(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_1ADE9A610(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1ADE9A630(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = *(_QWORD *)v16;
    if (!v16)
      break;
    v19 = *(_QWORD *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = *v7; *v7; i = *v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = (uint64_t **)i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = (uint64_t **)i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_DWORD *std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__emplace_multi<std::pair<int const,std::pair<int,int>> const&>(_QWORD *a1, uint64_t *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _QWORD *inserted;

  v4 = operator new(0x20uLL);
  v4[6] = *((_DWORD *)a2 + 2);
  v5 = *a2;
  *((_QWORD *)v4 + 2) = *a2;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = (int)v5;
  inserted = (_QWORD *)std::__hash_table<std::__hash_value_type<int,std::pair<int,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,int>>>>::__node_insert_multi_prepare((uint64_t)a1, (int)v5, v4 + 4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_1ADE9AA50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,float>,std::__tree_node<std::__value_type<int,float>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::__tree<int>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_multi<std::pair<int const,float> const&>(v5, (_QWORD *)((char *)a2 + 28));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1ADE9ABB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_multi<std::pair<int const,float> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= (int)v5)
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__assign_with_size[abi:ne180100]<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__vdeallocate((void **)a1);
    if (a4 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = a1;
    v13 = a2;
    v14 = a3;
    return std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__construct_at_end<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(v12, v13, v14);
  }
  v15 = (*(_QWORD *)(a1 + 8) - v8) >> 5;
  if (v15 < a4)
  {
    v16 = a2 + 32 * v15;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,0>(a2, v16, v8);
    v12 = a1;
    v13 = v16;
    v14 = a3;
    return std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__construct_at_end<std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>>(v12, v13, v14);
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,std::__wrap_iter<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const*>,fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,0>(a2, a3, v8);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 8);
  if (v20 != v18)
  {
    do
    {
      v21 = v20 - 32;
      result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20 - 24);
      v20 = v21;
    }
    while (v21 != v19);
  }
  *(_QWORD *)(a1 + 8) = v19;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::SymbolTableList,std::allocator<quasar::SymbolTableList>,quasar::SymbolTableList&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::SymbolTableList>::__shared_ptr_emplace[abi:ne180100]<quasar::SymbolTableList&,std::allocator<quasar::SymbolTableList>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1ADE9ADCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::SymbolTableList>::__shared_ptr_emplace[abi:ne180100]<quasar::SymbolTableList&,std::allocator<quasar::SymbolTableList>,0>(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E5D42D40;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<quasar::SymbolTableList::Data>::__init_with_size[abi:ne180100]<quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*>((char *)(a1 + 24), *a2, a2[1], (a2[1] - *a2) >> 5);
  return a1;
}

void sub_1ADE9AE34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::SymbolTableList::Data>::__init_with_size[abi:ne180100]<quasar::SymbolTableList::Data*,quasar::SymbolTableList::Data*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  if (a4)
  {
    v6 = result;
    result = std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(v7 + 8) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(v7 + 16) = v11;
      a2 += 32;
      v7 += 32;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADE9AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::SymbolTableList::Data>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<quasar::LmeInfo>::__assign_with_size[abi:ne180100]<quasar::LmeInfo*,quasar::LmeInfo*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<quasar::LmeInfo>::__vdeallocate(a1);
    if (a4 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    v13 = (uint64_t *)a2 + ((a1[1] - v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::LmeInfo *,quasar::LmeInfo *,quasar::LmeInfo *,0>((uint64_t *)a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeInfo>,quasar::LmeInfo*,quasar::LmeInfo*,quasar::LmeInfo*>(v8, (__int128 *)v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::LmeInfo *,quasar::LmeInfo *,quasar::LmeInfo *,0>((uint64_t *)a2, (uint64_t *)a3, v9);
  v15 = v14;
  v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 40;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1ADE9B05C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADE9B064(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::LmeInfo *,quasar::LmeInfo *,quasar::LmeInfo *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 2);
    *(_QWORD *)a3 = v6;
    std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v4 + 2));
    a3 += 40;
    v4 += 5;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADE9B19C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &,std::allocator<quasar::QsrTextSymbolTable>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43328;
  a1[1] = 0;
  std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADE9B200(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<quasar::QsrTextSymbolTable> const&,long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *a4;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(v4 + 96);
  *(_QWORD *)(a2 + 104) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(v4 + 112);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 120) = v8;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADE9B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADE9B5E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,void>@<X0>(uint64_t a1@<X1>, _DWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADE9B690(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::quasar::OffsetOutputLabelMapper,std::allocator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>,0>(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41338;
  a1[1] = 0;
  fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFst(a1 + 3, a2, a3);
  return a1;
}

void sub_1ADE9B6DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFst(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char v8[8];
  uint64_t v9;

  v6 = operator new();
  v8[0] = 1;
  v9 = 0;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFstImpl(v6, a2, a3, (uint64_t)v8);
  *a1 = &unk_1E5D23508;
  a1[1] = v6;
  return a1;
}

void sub_1ADE9B7C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24430;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24430;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::StdToLatticeMapper<float>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D23508;
  return v4;
}

void sub_1ADE9B9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::StateIterator(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADE9BA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40E7AEC4CDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v7;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4) = &unk_1E5D1B410;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  v7 = (_DWORD *)operator new();
  *v7 = *a3;
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Init(a1);
  return a1;
}

void sub_1ADE9BB28(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Init(uint64_t a1)
{
  uint64_t result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "map");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  *(_DWORD *)(a1 + 156) = 0;
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950000;
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 0x3FFFFFFF0004, 0);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | result;
    if (*(_DWORD *)(a1 + 156) == 2)
      *(_DWORD *)(a1 + 160) = 0;
  }
  return result;
}

void sub_1ADE9BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFstImpl(uint64_t a1)
{
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::~ArcMapFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D1B410;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
      MEMORY[0x1AF44D190](v3, 0x1000C4052888210);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((_QWORD *)a1);
}

float fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Final(uint64_t a1, int a2)
{
  int v4;
  float v5;
  int v6;
  char *MutableState;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) != 0)goto LABEL_20;
  v4 = *(_DWORD *)(a1 + 156);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 160) == a2)
        v5 = 0.0;
      else
        v5 = INFINITY;
LABEL_18:
      MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
      *(float *)MutableState = v5;
      goto LABEL_19;
    }
    v8 = *(_QWORD *)(a1 + 136);
    v6 = *(_DWORD *)(a1 + 160);
LABEL_11:
    v10 = v6 != -1 && v6 <= a2;
    v5 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, (a2 - v10));
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(a1 + 160);
  if (v6 != a2)
  {
    v8 = *(_QWORD *)(a1 + 136);
    goto LABEL_11;
  }
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  *(_DWORD *)MutableState = 0;
LABEL_19:
  *((_DWORD *)MutableState + 12) |= 9u;
LABEL_20:
  v11 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v11 + 76) == a2)
    v12 = v11 + 80;
  else
    v12 = *(_QWORD *)(v11 + 8) + 8 * (a2 + 1);
  return **(float **)v12;
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

void fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  _BOOL4 v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v14;
  char *MutableState;
  int v16;
  int v17;
  _BOOL4 v19;
  int v20;
  _BOOL4 v22;
  float v23;
  unsigned int v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;

  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == a2)
  {
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
    return;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v7 = v4 != -1 && v4 <= a2;
  v30 = 0;
  (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v5 + 136))(v5, (a2 - v7), &v27);
  while (1)
  {
    if (!(_QWORD)v27)
    {
      if (v30 >= v28)
        goto LABEL_30;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v27 + 24))(v27))
      break;
    if ((_QWORD)v27)
    {
      v8 = (unint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v27 + 32))();
      goto LABEL_16;
    }
LABEL_15:
    v8 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 16 * v30);
LABEL_16:
    v10 = *v8;
    v9 = v8[1];
    v11 = HIDWORD(v9);
    v12 = *(_DWORD *)(a1 + 160);
    if (v12 != -1 && v12 <= SHIDWORD(v9))
      LODWORD(v11) = HIDWORD(v9) + 1;
    if ((int)v11 >= *(_DWORD *)(a1 + 164))
      *(_DWORD *)(a1 + 164) = v11 + 1;
    v14 = HIDWORD(v10);
    if (SHIDWORD(v10) >= 1)
      LODWORD(v14) = **(_DWORD **)(a1 + 144) + HIDWORD(v10);
    *(_QWORD *)&v26 = v10 | ((unint64_t)v14 << 32);
    *((_QWORD *)&v26 + 1) = v9 | ((unint64_t)v11 << 32);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v26);
    if ((_QWORD)v27)
      (*(void (**)(_QWORD))(*(_QWORD *)v27 + 40))(v27);
    else
      ++v30;
  }
  if ((_QWORD)v27)
  {
    (*(void (**)(void))(*(_QWORD *)v27 + 8))();
    goto LABEL_32;
  }
LABEL_30:
  if (v29)
    --*v29;
LABEL_32:
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2) & 1) == 0|| (LODWORD(v27) = fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Final(a1, a2), LODWORD(v26) = 2139095040, *(float *)&v27 == INFINITY))
  {
    v16 = *(_DWORD *)(a1 + 156);
    if (v16 == 2)
    {
      v20 = *(_DWORD *)(a1 + 160);
      v22 = v20 != -1 && v20 <= a2;
      v23 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v22));
      *(float *)&v27 = v23;
      LODWORD(v26) = 2139095040;
      if (v23 != INFINITY)
      {
        v24 = *(_DWORD *)(a1 + 160);
        *(_QWORD *)&v27 = 0;
        *((_QWORD *)&v27 + 1) = __PAIR64__(v24, LODWORD(v23));
        v25 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v25, &v27);
      }
    }
    else if (v16 == 1)
    {
      v17 = *(_DWORD *)(a1 + 160);
      v19 = v17 != -1 && v17 <= a2;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), (a2 - v19));
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1ADE9C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2);
  v4 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v4 + 76) == a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * (a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

_QWORD *fst::ImplToFst<fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  *a1 = &unk_1E5D24430;
  if (a3)
  {
    v5 = operator new();
    fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFstImpl(v5, *(_QWORD *)(a2 + 8));
    a1[1] = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    a1[1] = v6;
    ++*(_DWORD *)(v6 + 56);
  }
  return a1;
}

void sub_1ADE9C260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40777B4A47);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::ArcMapFstImpl(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D1B410;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  v4 = (_DWORD *)operator new();
  *v4 = **(_DWORD **)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v4;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Init(a1);
  return a1;
}

void sub_1ADE9C318(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::StateIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1CAA8;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(v3 + 136);
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4);
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 156) == 2;
  fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcScaleMapper>>::CheckSuperfinal(a1);
  return a1;
}

void sub_1ADE9C39C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~StateIterator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1CAA8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::~StateIterator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E5D1CAA8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::Done_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) & 1) != 0)
      return *(_BYTE *)(a1 + 44) == 0;
  }
  else if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 24))
  {
    return *(_BYTE *)(a1 + 44) == 0;
  }
  return 0;
}

uint64_t fst::StateIterator<fst::ArcMapFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ArcMapFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::quasar::OffsetOutputLabelMapper>::Expand(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::quasar::MergeTrieFst,std::allocator<fst::quasar::MergeTrieFst>,std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,void>@<X0>(uint64_t a1@<X1>, int *a2@<X2>, int *a3@<X3>, __int128 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFst>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADE9C56C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,int &,int &,std::string const&,std::allocator<fst::quasar::MergeTrieFst>,0>(_QWORD *a1, uint64_t a2, int *a3, int *a4, __int128 *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41178;
  a1[1] = 0;
  fst::quasar::MergeTrieFst::MergeTrieFst(a1 + 3, a2, *a3, *a4, a5);
  return a1;
}

void sub_1ADE9C5C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::quasar::MergeTrieFst>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3EB10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3EB10;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::operator()@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  if (*(_BYTE *)(result[1] + 2124))
  {
    result = std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>(&v7);
    *(_OWORD *)a3 = v7;
  }
  else
  {
    v4 = a2[1];
    *(_QWORD *)a3 = *a2;
    *(_QWORD *)(a3 + 8) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  return result;
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_0>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> ()(std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::StateAccessRecordingFst,std::allocator<quasar::StateAccessRecordingFst>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADE9C788(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::StateAccessRecordingFst>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> const&,std::allocator<quasar::StateAccessRecordingFst>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44128;
  a1[1] = 0;
  quasar::StateAccessRecordingFst::StateAccessRecordingFst(a1 + 3);
  return a1;
}

void sub_1ADE9C7D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3EB68;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3EB68;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_1>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3EBC0;
  return result;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3EBC0;
}

void std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::operator()(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2,std::allocator<quasar::OnlineTransducerGraphSearchDecoder::insertLocationSpecificModels(std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::vector<int> &,quasar::Location &)::$_2>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADE9C9AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D41098;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &unk_1E5D22308;
  a1[4] = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 268697600, 1);
  return a1;
}

void sub_1ADE9CA1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

BOOL fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArc(uint64_t a1, uint64_t a2, int a3, _OWORD *a4)
{
  _BOOL8 v7;
  int32x2_t v9[18];

  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v9, *(_QWORD *)(a1 + 8), 0, 1);
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState((uint64_t)v9, a2);
  v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find((uint64_t)v9, a3);
  if (v7)
    *a4 = *(_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value((uint64_t)v9);
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(v9);
  return v7;
}

void sub_1ADE9CB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(&a9);
  _Unwind_Resume(a1);
}

void fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~NonBackoffDeterministicOnDemandFst()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADE9CBA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41060;
  a1[1] = 0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADE9CC0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::shared_ptr<fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v4 = (std::__shared_weak_count *)a3[1];
  v24 = *a3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v24, &v22, &v21);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADE9CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (****a3)(_QWORD)@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x298uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADE9CD8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,kaldi::quasar::AutoRegressiveGraphSearchDecoderConfig &,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,kaldi::quasar::DynamicClassTagDict *,std::allocator<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, void (****a4)(_QWORD), uint64_t *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42138;
  a1[1] = 0;
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AutoRegressiveGraphSearchDecoder((uint64_t)(a1 + 3), a2, a3, *a4, *a5);
  return a1;
}

void sub_1ADE9CDE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AutoRegressiveGraphSearchDecoder(uint64_t a1, uint64_t a2, uint64_t a3, void (***a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E5D33FE0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1AE146E50;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 184) = a2;
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 208) = v10;
  v11 = *(_OWORD *)(a3 + 32);
  v12 = *(_OWORD *)(a3 + 48);
  v13 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 240) = v12;
  *(_QWORD *)(a1 + 288) = a4;
  *(_QWORD *)(a1 + 296) = a5;
  *(_BYTE *)(a1 + 304) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x10000000, 0) == 0x10000000;
  *(_QWORD *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  if (*(int *)(a3 + 84) >= 0x3FFFFFF)
    v14 = 0x3FFFFFF;
  else
    v14 = *(_DWORD *)(a3 + 84);
  kaldi::quasar::E2ETokenHeap::E2ETokenHeap((kaldi::quasar::E2ETokenHeap *)(a1 + 360), v14, *(_DWORD *)(a3 + 88));
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (**a4)(a4);
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(v9, 0x3E8uLL);
  return a1;
}

void sub_1ADE9CFC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v1 + 40));
  v6 = *v4;
  if (*v4)
  {
    v1[21] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[15];
  if (v7)
  {
    v1[16] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v1[13] = v8;
    operator delete(v8);
  }
  kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::~HashList(v2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~AutoRegressiveGraphSearchDecoder(_QWORD *a1)
{
  kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~AutoRegressiveGraphSearchDecoder(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::~HashList(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v13[34];

  v2 = a1[6];
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = (_QWORD *)a1[7];
  v5 = (_BYTE *)a1[8];
  if (v5 == (_BYTE *)v4)
  {
    v7 = 0;
    v4 = (_QWORD *)a1[8];
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1AF44D160](v4[v6], 0x1020C80B07198D1);
        v4 = (_QWORD *)a1[7];
        v5 = (_BYTE *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (_BYTE *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v4 = (_QWORD *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

_QWORD *kaldi::quasar::AutoRegressiveGraphSearchDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~AutoRegressiveGraphSearchDecoder(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  *a1 = &unk_1E5D33FE0;
  v2 = a1[3];
  if (v2 != -1)
  {
    v3 = a1[5];
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = a1[2];
  a1[2] = 0;
  a1[3] = -1;
  if (v5)
  {
    v6 = a1[8];
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v7 + 24) = v6;
      v6 = v7;
    }
    while (v5);
    a1[8] = v7;
  }
  v8 = (void *)a1[76];
  if (v8)
  {
    free(v8);
    a1[76] = 0;
    a1[77] = 0;
  }
  a1[79] = 0;
  a1[78] = 0;
  v9 = (void *)a1[72];
  if (v9)
  {
    a1[73] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[69];
  if (v10)
  {
    a1[70] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[66];
  if (v11)
  {
    a1[67] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[60];
  if (v13)
  {
    a1[61] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[56];
  if (v14)
  {
    a1[57] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[53];
  if (v15)
  {
    a1[54] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[50];
  if (v16)
  {
    a1[51] = v16;
    operator delete(v16);
  }
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::ForwardLink>::Clear((uint64_t)(a1 + 47));
  kaldi::quasar::LazyBuffer<kaldi::quasar::E2ETokenHeap::Token>::Clear((uint64_t)(a1 + 45));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 40));
  v17 = (void *)a1[20];
  if (v17)
  {
    a1[21] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[15];
  if (v18)
  {
    a1[16] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[12];
  if (v19)
  {
    a1[13] = v19;
    operator delete(v19);
  }
  kaldi::HashList<std::pair<unsigned long long,unsigned long long>,unsigned int,kaldi::PairHasher<unsigned long long>,std::equal_to<std::pair<unsigned long long,unsigned long long>>>::~HashList(a1 + 2);
  return a1;
}

uint64_t *std::map<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::shared_ptr<void>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADE9D3F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void **std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](void **a1)
{
  void *v2;

  v2 = *a1;
  if (*a1)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,void *>,std::allocator<std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>,std::__map_node_handle_specifics>>>@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v3;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;

  v3 = result;
  v5 = *a2;
  if (!*a2)
  {
    *(_QWORD *)a3 = result + 1;
    *(_BYTE *)(a3 + 8) = 0;
LABEL_9:
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    return result;
  }
  result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)result, &v8, (const void **)(v5 + 32));
  if (!*result)
  {
    result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v3, v8, result, (uint64_t *)v5);
    *a2 = 0;
    if (*((_BYTE *)a2 + 9))
      *((_BYTE *)a2 + 9) = 0;
    *(_QWORD *)a3 = v5;
    *(_BYTE *)(a3 + 8) = 1;
    goto LABEL_9;
  }
  *(_QWORD *)a3 = *result;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = *a2;
  v7 = *((unsigned __int16 *)a2 + 4);
  *(_WORD *)(a3 + 24) = v7;
  *a2 = 0;
  if (v7 >= 0x100)
    *((_BYTE *)a2 + 9) = 0;
  return result;
}

void sub_1ADE9D5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADE9D698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1ADE9D7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1ADE9D990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1ADE9DB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1ADE9DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

double quasar::AudioAnalyticsDecoder::AudioAnalyticsDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  double result;

  v2 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v2 = &off_1E5D382A0;
  *(_QWORD *)&result = 0x50000000ALL;
  *(_QWORD *)(v2 + 448) = 0x50000000ALL;
  *(_BYTE *)(v2 + 57) = 0;
  return result;
}

void quasar::AudioAnalyticsDecoder::~AudioAnalyticsDecoder(void **this)
{
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::AudioAnalyticsDecoder::registerParams(quasar::AudioAnalyticsDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "audio-analytics-only");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 112, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "min-voicing-duration");
  std::string::basic_string[abi:ne180100]<0>(v4, "Minimum duration of voicing");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 112, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "acoustic-feature-window-width");
  std::string::basic_string[abi:ne180100]<0>(v4, "Minimum width of the normalization window for acoustic audio analytics features");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v4, 0, 112, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADE9DFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::AudioAnalyticsDecoder::runImpl(uint64_t a1, int32x2_t **a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  int32x2_t *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  signed int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _OWORD v41[17];
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63[4];
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *__p;
  void *v69;
  int32x2_t v70[5];
  int32x2_t *v71;
  std::__shared_weak_count *v72;
  int32x2_t *v73;
  std::__shared_weak_count *v74;

  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v73 = *a2;
  v74 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v9)
  {
    if (quasar::gLogLevel >= 1)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Error: no utterance features were provided", 42);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v44);
    }
    v14 = 2;
    if (v8)
      goto LABEL_61;
    return v14;
  }
  v12 = 0;
  v13 = (float)(*(int (**)(_QWORD))(**(_QWORD **)&(*a2)[2] + 24))(*(_QWORD *)&(*a2)[2]);
  while (kaldi::OnlineFeatureMatrix::IsValidFrame(v9, v12, 1))
    ++v12;
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v71);
  kaldi::Matrix<float>::Matrix((uint64_t)v70);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 53))
  {
    v15 = (uint64_t)a2[67];
    if (v15)
    {
      v16 = (std::__shared_weak_count *)a2[68];
      *(_QWORD *)&v44 = a2[67];
      *((_QWORD *)&v44 + 1) = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      kaldi::OnlineCacheInput::GetCachedData(v15, v71, v70);
      if (v16)
      {
        v19 = (unint64_t *)&v16->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v70)
        && kaldi::MatrixBase<float>::NumCols((uint64_t)v70))
      {
        v62 = 0;
        v61 = 0;
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&(*a2)[2] + 24))(*(_QWORD *)&(*a2)[2]);
        quasar::AudioAnalyticsProcessor::computeAnalytics((float **)v70, &v61, v21, *(_DWORD *)(a1 + 448), *(_DWORD *)(a1 + 452), 0, (uint64_t)v63);
        v22 = v62;
        if (v62)
        {
          v23 = (unint64_t *)&v62->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        *(_DWORD *)(*(_QWORD *)a3 + 576) = v12;
        v25 = *(_DWORD *)(*(_QWORD *)a4 + 8);
        quasar::RecogResult::RecogResult((quasar::RecogResult *)&v44);
        v26 = *(std::__shared_weak_count **)(*(_QWORD *)a4 + 32);
        v42 = *(_QWORD *)(*(_QWORD *)a4 + 24);
        v43 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (_QWORD *)quasar::RecogResult::setParams((uint64_t)&v44, &v42);
        v30 = quasar::RecogResult::setLmeStatus(v29, (uint64_t *)(*(_QWORD *)a3 + 584));
        quasar::RecogResult::setAudioAnalytics((uint64_t)v30, (const quasar::AudioAnalytics *)v63);
        v31 = v25 + v12;
        v32 = v43;
        if (v43)
        {
          v33 = (unint64_t *)&v43->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        HIDWORD(v51) = (float)(v13 * (float)*(unsigned int *)(*(_QWORD *)a4 + 8));
        LODWORD(v52) = (float)(v13 * (float)v31);
        (*(void (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(*(_QWORD *)a3 + 560) + 40))(*(_QWORD *)(*(_QWORD *)a3 + 560), &v44, 1);
        if (quasar::gLogLevel >= 4)
        {
          memset(v41, 0, sizeof(v41));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Audio analytics finished..", 26);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v41);
        }
        quasar::RecogResult::~RecogResult((quasar::RecogResult *)&v44);
        if (__p)
        {
          v69 = __p;
          operator delete(__p);
        }
        if (v66)
        {
          v67 = v66;
          operator delete(v66);
        }
        if (v64)
        {
          v65 = v64;
          operator delete(v64);
        }
        if (v63[0])
        {
          v63[1] = v63[0];
          operator delete(v63[0]);
        }
        goto LABEL_11;
      }
      if (quasar::gLogLevel >= 4)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"No audio features generated. Rejecting utterance.", 49);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
      }
    }
    else if (quasar::gLogLevel >= 1)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Error: Utterance features were improperly cached.", 49);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v44);
    }
    v14 = 2;
    goto LABEL_55;
  }
  if (quasar::gLogLevel >= 4)
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Utterance feature cache is disabled. Skipping audio analytics.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v44);
  }
LABEL_11:
  v14 = 0;
LABEL_55:
  kaldi::Matrix<float>::~Matrix((uint64_t)v70);
  v35 = v72;
  if (v72)
  {
    v36 = (unint64_t *)&v72->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v8 = v74;
  if (v74)
  {
LABEL_61:
    v38 = (unint64_t *)&v8->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v14;
}

void sub_1ADE9E590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a45);
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&STACK[0x2A8]);
  kaldi::Matrix<float>::~Matrix(v45 - 152);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v45 - 112);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v45 - 96);
  _Unwind_Resume(a1);
}

uint64_t quasar::AudioAnalyticsDecoder::computesAudioAnalytics(quasar::AudioAnalyticsDecoder *this)
{
  return 1;
}

uint64_t quasar::AudioAnalyticsDecoder::requiresCacheFeatInputItf(quasar::AudioAnalyticsDecoder *this)
{
  return 1;
}

uint64_t quasar::AudioAnalyticsDecoder::affectsRecognitionResults(quasar::AudioAnalyticsDecoder *this)
{
  return 1;
}

uint64_t quasar::AudioAnalyticsDecoder::supportsEager(quasar::AudioAnalyticsDecoder *this)
{
  return 0;
}

uint64_t QuasarCCorrectiveRerankingParser_new(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E5CFF3E0;
  v5[1] = a1;
  v6 = v5;
  v1 = CapiHelpers_new<QuasarCSystemConfig,quasar::SystemConfig>((uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_1ADE9E734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void **CapiHelpers_delete<QuasarCCorrectiveRerankingParser,quasar::corrective_reranking::Parser>(void **result)
{
  void **v1;

  if (result)
  {
    v1 = result;
    quasar::corrective_reranking::Models::~Models((quasar::corrective_reranking::Models *)(result + 74));
    quasar::corrective_reranking::Config::~Config(v1);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t QuasarCCorrectiveRerankingParser_runJson(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E5CFF438;
  v6[1] = a2;
  v7 = v6;
  v2 = CapiHelpers_execute<QuasarCSystemConfig,quasar::SystemConfig,int>(a1, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_1ADE9E854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF3E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF3E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  v2 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(a1 + 8));
  quasar::corrective_reranking::Parser::Parser(v2);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1ADE9E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v15, 0x1032C4038310758);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<QuasarCCorrectiveRerankingParser_new::$_0,std::allocator<QuasarCCorrectiveRerankingParser_new::$_0>,quasar::corrective_reranking::Parser * ()(void)>::target_type()
{
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF438;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::operator()(uint64_t a1, quasar::corrective_reranking::Parser **a2)
{
  quasar::corrective_reranking::Parser *v2;
  std::string v3;

  v2 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v3, *(char **)(a1 + 8));
  quasar::corrective_reranking::Parser::runJson(v2, &v3);
}

char *sub_1ADE9EA7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char __s1, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  char *v24;
  void *v26;
  char v27;
  char *v28;
  char v29;

  if (v27 < 0)
    operator delete(v26);
  if ((v29 & 0x80000000) == 0)
    return strdup((const char *)&v28);
  v24 = strdup(v28);
  operator delete(v28);
  return v24;
}

void sub_1ADE9EAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QuasarCCorrectiveRerankingParser_runJson::$_0,std::allocator<QuasarCCorrectiveRerankingParser_runJson::$_0>,char * ()(quasar::corrective_reranking::Parser const*)>::target_type()
{
}

uint64_t kaldi::quasar::Features::GetFeatureMap(kaldi::quasar::Features *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&kaldi::quasar::Features::GetFeatureMap(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&kaldi::quasar::Features::GetFeatureMap(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::quasar::Features::GetFeatureMap(void)::$_0 &&>>);
  }
  return kaldi::quasar::Features::GetFeatureMap(void)::m_heap;
}

void kaldi::quasar::GetStatePosts(int a1@<W0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  int *v23;
  _DWORD *v24;
  uint64_t v25;
  void *__p;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  v9 = (uint64_t **)(*a2 + 24 * a1);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)&v32, *v9, v9[1], v9[1] - *v9);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  v10 = *a3;
  if (a3[1] != *a3)
  {
    v11 = (uint64_t **)(v10 + 24 * a1);
    if (&v29 != (void **)v11)
    {
      v12 = *(uint64_t **)(v10 + 24 * a1 + 8);
      std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&v29, *v11, v12, v12 - *v11);
    }
    v13 = (uint64_t **)(*a4 + 24 * a1);
    if (&__p != (void **)v13)
    {
      v14 = *(uint64_t **)(*a4 + 24 * a1 + 8);
      std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&__p, *v13, v14, v14 - *v13);
    }
  }
  v15 = v32;
  if (v33 != v32)
  {
    v16 = 0;
    do
    {
      v17 = v15[v16];
      v25 = v17;
      v18 = 0;
      v19 = 0;
      if (v30 != v29)
      {
        v20 = (v30 - (_BYTE *)v29) >> 3;
        if (v20 <= 1)
          v20 = 1;
        v21 = (int *)((char *)v29 + 4);
        while (*(v21 - 1) != (_DWORD)v17)
        {
          v21 += 2;
          if (!--v20)
          {
            v19 = 0;
            goto LABEL_16;
          }
        }
        v19 = *v21;
      }
LABEL_16:
      if (v27 != __p)
      {
        v22 = (v27 - (_BYTE *)__p) >> 3;
        if (v22 <= 1)
          v22 = 1;
        v23 = (int *)((char *)__p + 4);
        while (*(v23 - 1) != (_DWORD)v17)
        {
          v23 += 2;
          if (!--v22)
            goto LABEL_24;
        }
        v18 = *v23;
      }
LABEL_24:
      v35 = &v25;
      v24 = std::__hash_table<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::ScoreTuple>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, (int *)&v25, (uint64_t)&std::piecewise_construct, (_DWORD **)&v35);
      v24[5] = HIDWORD(v17);
      v24[6] = v19;
      v24[7] = v18;
      ++v16;
      v15 = v32;
    }
    while (v16 < (v33 - (_BYTE *)v32) >> 3);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void sub_1ADE9EDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConf::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  v4 = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v4;
  if (a1 == a2)
  {
    v6 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v6;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 168), *(char **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
    v5 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v5;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 216), *(char **)(a2 + 216), *(_QWORD *)(a2 + 224), (uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 2);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 240), *(std::string **)(a2 + 240), *(__int128 **)(a2 + 248), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3));
  }
  return a1;
}

void kaldi::quasar::ProcessRegionInformation(const char *a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26[3];
  void **v27[34];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  kaldi::SplitStringToVector((const std::string *)a3, a1, 1, (uint64_t)&v28);
  v7 = v28;
  v8 = v29;
  if (v29 == v28)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Invalid list of region specifiers provided ", 43);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Using non-terminal regions for combination from ", 48);
    v10 = *(char *)(a3 + 23);
    if (v10 >= 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a3 + 23);
    else
      v12 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
    v7 = v28;
    v8 = v29;
  }
  if (v8 != v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      memset(v26, 0, sizeof(v26));
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Splitting into labels : ", 24);
        v16 = v28 + v13;
        v17 = *(char *)(v28 + v13 + 23);
        if (v17 >= 0)
          v18 = v28 + v13;
        else
          v18 = *(_QWORD *)v16;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(v16 + 23);
        else
          v19 = *(_QWORD *)(v16 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v18, v19);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
        v7 = v28;
      }
      kaldi::SplitStringToVector((const std::string *)(v7 + v13), a2, 1, (uint64_t)v26);
      v20 = a4[1];
      if (v20 >= a4[2])
      {
        v21 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a4, v26);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a4, v26);
        v21 = v20 + 24;
      }
      a4[1] = v21;
      v27[0] = (void **)v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
      ++v14;
      v7 = v28;
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3));
  }
  v27[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
}

void sub_1ADE9F100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  a12 = (void **)(v12 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CandidateFound(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  float v40;
  _QWORD v41[36];

  if (*(_DWORD *)a3 != -1)
  {
    v3 = 1;
    return v3 & 1;
  }
  v7 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    v9 = 0;
    v3 = 0;
    v10 = 0.0;
    v11 = 0.0;
    while (1)
    {
      if (*(_DWORD *)(v7 + v8 + 4) != *(_DWORD *)(a2 + 4))
        goto LABEL_22;
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" Check start ", 13);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" end ", 5);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" against start ", 15);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" end ", 5);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" lab in lat ", 12);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" lab in check ", 14);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
      }
      v17 = *a1;
      v18 = *a1 + v8;
      if ((v3 & 1) == 0)
      {
        *(_OWORD *)a3 = *(_OWORD *)v18;
        v26 = *(_OWORD *)(v18 + 16);
        v27 = *(_OWORD *)(v18 + 32);
        v28 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(a3 + 60) = *(_OWORD *)(v18 + 60);
        *(_OWORD *)(a3 + 32) = v27;
        *(_OWORD *)(a3 + 48) = v28;
        *(_OWORD *)(a3 + 16) = v26;
        if (v18 != a3)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 80), *(char **)(v17 + v8 + 80), *(_QWORD *)(v17 + v8 + 88), (uint64_t)(*(_QWORD *)(v17 + v8 + 88) - *(_QWORD *)(v17 + v8 + 80)) >> 2);
        v29 = (float)vaba_s32(vdup_lane_s32(vabd_s32(*(int32x2_t *)(a3 + 12), *(int32x2_t *)(a2 + 12)), 1), *(int32x2_t *)(a3 + 12), *(int32x2_t *)(a2 + 12)).i32[0];
        v10 = *(float *)(a3 + 52);
        v3 = 1;
        goto LABEL_23;
      }
      v19 = *(int32x2_t *)(a2 + 12);
      v20 = vabd_s32(*(int32x2_t *)(v18 + 12), v19);
      v21 = vabd_s32(*(int32x2_t *)(a3 + 12), v19);
      v22 = vcvt_f32_s32(vadd_s32(vzip2_s32(v20, v21), vzip1_s32(v20, v21)));
      v40 = v22.f32[0];
      if (v22.f32[0] >= v22.f32[1])
      {
        if (v22.f32[0] != v22.f32[1] || *(float *)(v17 + v8 + 52) <= v10)
        {
          v3 = 1;
LABEL_22:
          v29 = v11;
          goto LABEL_23;
        }
        *(_OWORD *)a3 = *(_OWORD *)v18;
        v30 = *(_OWORD *)(v18 + 16);
        v31 = *(_OWORD *)(v18 + 32);
        v32 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(a3 + 60) = *(_OWORD *)(v18 + 60);
        *(_OWORD *)(a3 + 32) = v31;
        *(_OWORD *)(a3 + 48) = v32;
        *(_OWORD *)(a3 + 16) = v30;
        if (v18 != a3)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 80), *(char **)(v17 + v8 + 80), *(_QWORD *)(v17 + v8 + 88), (uint64_t)(*(_QWORD *)(v17 + v8 + 88) - *(_QWORD *)(v17 + v8 + 80)) >> 2);
        v10 = *(float *)(*a1 + v8 + 52);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)v18;
        v23 = *(_OWORD *)(v18 + 16);
        v24 = *(_OWORD *)(v18 + 32);
        v25 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(a3 + 60) = *(_OWORD *)(v18 + 60);
        *(_OWORD *)(a3 + 32) = v24;
        *(_OWORD *)(a3 + 48) = v25;
        *(_OWORD *)(a3 + 16) = v23;
        if (v18 != a3)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 80), *(char **)(v17 + v8 + 80), *(_QWORD *)(v17 + v8 + 88), (uint64_t)(*(_QWORD *)(v17 + v8 + 88) - *(_QWORD *)(v17 + v8 + 80)) >> 2);
      }
      v3 = 1;
      v29 = v40;
LABEL_23:
      ++v9;
      v7 = *a1;
      v8 += 104;
      v11 = v29;
      if (v9 >= 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3))
        goto LABEL_26;
    }
  }
  v3 = 0;
LABEL_26:
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Found state ", 12);
    v33 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" id ", 4);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" start ", 7);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" end ", 5);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" For MBR start ", 15);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" end ", 5);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" distance is ", 13);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
  }
  return v3 & 1;
}

void sub_1ADE9F54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::GetCandidateFeatures(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, float **a5, const std::string *a6, int a7, int *a8, _DWORD *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type size;
  _QWORD *v23;
  float *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float *v34;
  float *v35;
  float *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v46;
  float *v47;
  float *v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  int v57;
  int v58;
  float v59;
  float v60;
  uint64_t v61;
  float v62;
  _BOOL4 v63;
  float v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  std::string::size_type v71;
  std::string::size_type v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  std::string::size_type v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  float *v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  float *v123;
  int v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  float v129;
  float *v130;
  float *v131;
  float *v132;
  float *v133;
  __int128 v134;
  __int128 v135;
  const void *v136;
  uint64_t v137;
  const std::string *v138;
  const std::string *v139;
  uint64_t v140;
  unint64_t v141;
  float *v142;
  float v143;
  float v144;
  _QWORD *v145;
  _OWORD v151[3];
  _OWORD v152[2];
  void *v153;
  void *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  void *v158;
  char *v159;
  char *v160;
  void *__p;
  char *v162;
  char *v163;
  std::string v164;
  std::string __str;
  float *v166;
  float *v167;
  unint64_t v168;
  float *v169;
  float *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD v175[4];

  memset(v175, 0, 24);
  if (!kaldi::quasar::CandidateFound(a2, a3, a14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"No arc to continue with", 23);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__str);
  }
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v17 = *(_DWORD *)(a14 + 28);
  v18 = *(_DWORD *)a14;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__str, 3);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Match ", 6);
    __p = (void *)*(int *)(a14 + 4);
    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, (unint64_t *)&__p))
    {
      v158 = (void *)*(int *)(a14 + 4);
      v20 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, (unint64_t *)&v158);
      if (*((char *)v20 + 47) < 0)
        std::string::__init_copy_ctor_external(&v164, (const std::string::value_type *)v20[3], v20[4]);
      else
        v164 = *(std::string *)((_BYTE *)v20 + 1);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v164, "not_in_static_vocab");
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v164;
    else
      v21 = (std::string *)v164.__r_.__value_.__r.__words[0];
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    else
      size = v164.__r_.__value_.__l.__size_;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" Find Overlapping With ", 23);
    std::ostream::operator<<();
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__str);
  }
  memset(&v164, 0, sizeof(v164));
  __p = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  if (a7)
  {
    v24 = *(float **)(a10 + 168);
    v25 = v24[30];
    v24[29] = *(float *)(a14 + 40) + v24[29];
    v24[30] = *(float *)(a14 + 36) + v25;
    v24[31] = *(float *)(a14 + 32) + v24[31];
  }
  v26 = *a2;
  if (a2[1] != *a2)
  {
    v27 = 0;
    while (1)
    {
      v28 = (int *)(v26 + 104 * v27);
      v29 = v28[10];
      v30 = *v28;
      v31 = v28[1];
      v32 = *(unsigned __int8 *)(a1 + 3);
      if (v30 == v17 && v32 != 0)
      {
        v34 = v167;
        if ((unint64_t)v167 >= v168)
        {
          v36 = v166;
          v37 = ((char *)v167 - (char *)v166) >> 3;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61)
            goto LABEL_202;
          v39 = v168 - (_QWORD)v166;
          if ((uint64_t)(v168 - (_QWORD)v166) >> 2 > v38)
            v38 = v39 >> 2;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v168, v40);
            v36 = v166;
            v34 = v167;
          }
          else
          {
            v41 = 0;
          }
          v42 = (float *)&v41[8 * v37];
          *(_DWORD *)v42 = v31;
          *((_DWORD *)v42 + 1) = v29;
          v43 = v42;
          if (v34 != v36)
          {
            do
            {
              v44 = *((_QWORD *)v34 - 1);
              v34 -= 2;
              *((_QWORD *)v43 - 1) = v44;
              v43 -= 2;
            }
            while (v34 != v36);
            v36 = v166;
          }
          v35 = v42 + 2;
          v166 = v43;
          v167 = v42 + 2;
          v168 = (unint64_t)&v41[8 * v40];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_DWORD *)v167 = v31;
          *((_DWORD *)v34 + 1) = v29;
          v35 = v34 + 2;
        }
        v167 = v35;
        v26 = *a2;
        v32 = *(unsigned __int8 *)(a1 + 3);
      }
      if (*(_DWORD *)(v26 + 104 * v27 + 28) == v18 && v32 != 0)
      {
        v46 = v170;
        if ((unint64_t)v170 >= v171)
        {
          v48 = v169;
          v49 = ((char *)v170 - (char *)v169) >> 3;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61)
LABEL_202:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v51 = v171 - (_QWORD)v169;
          if ((uint64_t)(v171 - (_QWORD)v169) >> 2 > v50)
            v50 = v51 >> 2;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v171, v52);
            v48 = v169;
            v46 = v170;
          }
          else
          {
            v53 = 0;
          }
          v54 = (float *)&v53[8 * v49];
          *(_DWORD *)v54 = v31;
          *((_DWORD *)v54 + 1) = v29;
          v55 = v54;
          if (v46 != v48)
          {
            do
            {
              v56 = *((_QWORD *)v46 - 1);
              v46 -= 2;
              *((_QWORD *)v55 - 1) = v56;
              v55 -= 2;
            }
            while (v46 != v48);
            v48 = v169;
          }
          v47 = v54 + 2;
          v169 = v55;
          v170 = v54 + 2;
          v171 = (unint64_t)&v53[8 * v52];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_DWORD *)v170 = v31;
          *((_DWORD *)v46 + 1) = v29;
          v47 = v46 + 2;
        }
        v170 = v47;
        v26 = *a2;
      }
      v57 = *(_DWORD *)(a14 + 12);
      v58 = *(_DWORD *)(a14 + 20);
      v59 = (double)v57 + (double)v58 * 0.1;
      v60 = (double)v57 + (double)v58 * -0.1;
      v61 = v26 + 104 * v27;
      v62 = (float)*(int *)(v61 + 12);
      v63 = v62 <= v59 && (float)*(int *)(v26 + 104 * v27 + 16) >= v60;
      v64 = (double)(v58 + v57) + (double)v58 * 0.1;
      v65 = v62 <= v64 && (float)*(int *)(v26 + 104 * v27 + 16) >= v60;
      if (v62 >= v60)
        break;
      if (v63 || v65)
        goto LABEL_75;
LABEL_129:
      if (++v27 >= (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a2[1] - v26) >> 3)))
        goto LABEL_130;
    }
    if ((float)*(int *)(v26 + 104 * v27 + 16) <= v64)
      v63 = 1;
    if (!v63 && !v65)
      goto LABEL_129;
LABEL_75:
    v66 = v173;
    if (v173 >= v174)
    {
      v67 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(&v172, v61);
    }
    else
    {
      std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>((uint64_t)&v172, v61);
      v67 = v66 + 104;
    }
    v173 = v67;
    *(float *)(*(_QWORD *)(a12 + 168) + 40) = *(float *)(*(_QWORD *)(a12 + 168) + 40) + 1.0;
    kaldi::quasar::WordConf::UpdatePostNumerators(a13, (float *)(*a2 + 104 * v27));
    v68 = *a2;
    v69 = *(_DWORD *)(*a2 + 104 * v27 + 4);
    if (v69 == *(_DWORD *)(a14 + 4))
    {
      kaldi::quasar::WordConf::UpdatePostNumerators(a12, (float *)(v68 + 104 * v27));
      v68 = *a2;
      v69 = *(_DWORD *)(*a2 + 104 * v27 + 4);
    }
    v70 = *(_DWORD *)(v68 + 104 * v27 + 40);
    v71 = v164.__r_.__value_.__l.__size_;
    if (v164.__r_.__value_.__l.__size_ >= v164.__r_.__value_.__r.__words[2])
    {
      v73 = (void *)v164.__r_.__value_.__r.__words[0];
      v74 = (uint64_t)(v164.__r_.__value_.__l.__size_ - v164.__r_.__value_.__r.__words[0]) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v76 = v164.__r_.__value_.__r.__words[2] - v164.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v164.__r_.__value_.__r.__words[2] - v164.__r_.__value_.__r.__words[0]) >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v75;
      if (v77)
      {
        v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v164.__r_.__value_.__r.__words[2], v77);
        v71 = v164.__r_.__value_.__l.__size_;
        v73 = (void *)v164.__r_.__value_.__r.__words[0];
      }
      else
      {
        v78 = 0;
      }
      v79 = &v78[8 * v74];
      *(_DWORD *)v79 = v69;
      *((_DWORD *)v79 + 1) = v70;
      v80 = (std::string::size_type)v79;
      if ((void *)v71 != v73)
      {
        do
        {
          v81 = *(_QWORD *)(v71 - 8);
          v71 -= 8;
          *(_QWORD *)(v80 - 8) = v81;
          v80 -= 8;
        }
        while ((void *)v71 != v73);
        v73 = (void *)v164.__r_.__value_.__r.__words[0];
      }
      v72 = (std::string::size_type)(v79 + 8);
      v164.__r_.__value_.__r.__words[0] = v80;
      v164.__r_.__value_.__l.__size_ = (std::string::size_type)(v79 + 8);
      v164.__r_.__value_.__r.__words[2] = (std::string::size_type)&v78[8 * v77];
      if (v73)
        operator delete(v73);
    }
    else
    {
      *(_DWORD *)v164.__r_.__value_.__l.__size_ = v69;
      *(_DWORD *)(v71 + 4) = v70;
      v72 = v71 + 8;
    }
    v164.__r_.__value_.__l.__size_ = v72;
    v82 = *a2 + 104 * v27;
    v83 = *(_DWORD *)(v82 + 4);
    v84 = *(_DWORD *)(v82 + 60);
    v85 = v162;
    if (v162 >= v163)
    {
      v87 = (char *)__p;
      v88 = (v162 - (_BYTE *)__p) >> 3;
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v90 = v163 - (_BYTE *)__p;
      if ((v163 - (_BYTE *)__p) >> 2 > v89)
        v89 = v90 >> 2;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
        v91 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
      {
        v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v163, v91);
        v87 = (char *)__p;
        v85 = v162;
      }
      else
      {
        v92 = 0;
      }
      v93 = &v92[8 * v88];
      *(_DWORD *)v93 = v83;
      *((_DWORD *)v93 + 1) = v84;
      v94 = v93;
      if (v85 != v87)
      {
        do
        {
          v95 = *((_QWORD *)v85 - 1);
          v85 -= 8;
          *((_QWORD *)v94 - 1) = v95;
          v94 -= 8;
        }
        while (v85 != v87);
        v87 = (char *)__p;
      }
      v86 = v93 + 8;
      __p = v94;
      v162 = v93 + 8;
      v163 = &v92[8 * v91];
      if (v87)
        operator delete(v87);
    }
    else
    {
      *(_DWORD *)v162 = v83;
      *((_DWORD *)v85 + 1) = v84;
      v86 = v85 + 8;
    }
    v162 = v86;
    v96 = *a2 + 104 * v27;
    v97 = *(_DWORD *)(v96 + 4);
    v98 = *(_DWORD *)(v96 + 64);
    v99 = v159;
    if (v159 >= v160)
    {
      v101 = (char *)v158;
      v102 = (v159 - (_BYTE *)v158) >> 3;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v104 = v160 - (_BYTE *)v158;
      if ((v160 - (_BYTE *)v158) >> 2 > v103)
        v103 = v104 >> 2;
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
        v105 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v105 = v103;
      if (v105)
      {
        v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v160, v105);
        v101 = (char *)v158;
        v99 = v159;
      }
      else
      {
        v106 = 0;
      }
      v107 = &v106[8 * v102];
      *(_DWORD *)v107 = v97;
      *((_DWORD *)v107 + 1) = v98;
      v108 = v107;
      if (v99 != v101)
      {
        do
        {
          v109 = *((_QWORD *)v99 - 1);
          v99 -= 8;
          *((_QWORD *)v108 - 1) = v109;
          v108 -= 8;
        }
        while (v99 != v101);
        v101 = (char *)v158;
      }
      v100 = v107 + 8;
      v158 = v108;
      v159 = v107 + 8;
      v160 = &v106[8 * v105];
      if (v101)
        operator delete(v101);
    }
    else
    {
      *(_DWORD *)v159 = v97;
      *((_DWORD *)v99 + 1) = v98;
      v100 = v99 + 8;
    }
    v159 = v100;
    v26 = *a2;
    goto LABEL_129;
  }
LABEL_130:
  if ((a7 & 1) != 0)
  {
    v110 = a11[1];
    if (v110 >= a11[2])
    {
      v111 = std::vector<std::vector<kaldi::ChosenArc>>::__push_back_slow_path<std::vector<kaldi::ChosenArc> const&>(a11, &v172);
    }
    else
    {
      std::vector<std::vector<kaldi::ChosenArc>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::ChosenArc> const&>((uint64_t)a11, &v172);
      v111 = v110 + 24;
    }
    a11[1] = v111;
  }
  if (*(_BYTE *)(a1 + 4))
    kaldi::quasar::WordConf::ProcessRankInfo(a12, *(_DWORD *)(a14 + 4), (uint64_t *)&v164, (uint64_t *)&__p, (uint64_t *)&v158, a13);
  v112 = 126 - 2 * __clz(((char *)v167 - (char *)v166) >> 3);
  if (v167 == v166)
    v113 = 0;
  else
    v113 = v112;
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>((uint64_t)v166, v167, (uint64_t)&v157, v113, 1);
  v114 = 126 - 2 * __clz(((char *)v170 - (char *)v169) >> 3);
  if (v170 == v169)
    v115 = 0;
  else
    v115 = v114;
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>((uint64_t)v169, v170, (uint64_t)&v157, v115, 1);
  if (v167 != v166)
  {
    v116 = ((char *)v167 - (char *)v166) >> 3;
    v117 = *(_QWORD *)(a13 + 168);
    v118 = v166 + 1;
    v119 = *(_DWORD *)v166;
    v120 = *(_QWORD *)(a12 + 168);
    if (v116 <= 1)
      v116 = 1;
    do
    {
      *(float *)(v117 + 92) = *v118 + *(float *)(v117 + 92);
      if (*((_DWORD *)v118 - 1) == v119)
      {
        *(float *)(v120 + 92) = *v118 + *(float *)(v120 + 92);
        *(_DWORD *)(a12 + 148) = v119;
      }
      v118 += 2;
      --v116;
    }
    while (v116);
  }
  if (v170 != v169)
  {
    v121 = ((char *)v170 - (char *)v169) >> 3;
    v122 = *(_QWORD *)(a13 + 168);
    v123 = v169 + 1;
    v124 = *(_DWORD *)v169;
    v125 = *(_QWORD *)(a12 + 168);
    if (v121 <= 1)
      v121 = 1;
    do
    {
      *(float *)(v122 + 100) = *v123 + *(float *)(v122 + 100);
      if (*((_DWORD *)v123 - 1) == v124)
      {
        *(float *)(v125 + 100) = *v123 + *(float *)(v125 + 100);
        *(_DWORD *)(a12 + 152) = v124;
      }
      v123 += 2;
      --v121;
    }
    while (v121);
  }
  *(_DWORD *)(a12 + 144) = *(_DWORD *)(a3 + 4);
  MEMORY[0x1AF44C914](a12 + 96, "");
  MEMORY[0x1AF44C914](a12 + 72, "");
  if (v170 != v169)
  {
    v157 = *(int *)v169;
    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v157))
    {
      v156 = *(int *)v169;
      v126 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v156);
      if (*((char *)v126 + 47) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v126[3], v126[4]);
      else
        __str = *(std::string *)((_BYTE *)v126 + 1);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "NULL");
    }
    std::string::operator=((std::string *)(a12 + 96), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v167 == v166)
    goto LABEL_170;
  v157 = *(int *)v166;
  if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v157))
  {
    v156 = *(int *)v166;
    v127 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, &v156);
    if (*((char *)v127 + 47) < 0)
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v127[3], v127[4]);
    else
      __str = *(std::string *)((_BYTE *)v127 + 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "NULL");
  }
  std::string::operator=((std::string *)(a12 + 72), &__str);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_170:
    if ((a7 & 1) != 0)
      goto LABEL_171;
LABEL_174:
    v129 = **a5;
    goto LABEL_176;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((a7 & 1) == 0)
    goto LABEL_174;
LABEL_171:
  if (*(_DWORD *)(a14 + 4))
  {
    v128 = *a8;
    *a8 = v128 + 1;
    v129 = (*a5)[v128];
    ++*a9;
  }
  else
  {
    v129 = 1.0;
  }
LABEL_176:
  v131 = v169;
  v130 = v170;
  v133 = v166;
  v132 = v167;
  v134 = *(_OWORD *)(a14 + 48);
  v151[2] = *(_OWORD *)(a14 + 32);
  v152[0] = v134;
  *(_OWORD *)((char *)v152 + 12) = *(_OWORD *)(a14 + 60);
  v135 = *(_OWORD *)(a14 + 16);
  v151[0] = *(_OWORD *)a14;
  v151[1] = v135;
  v154 = 0;
  v155 = 0;
  v136 = *(const void **)(a14 + 80);
  v137 = *(_QWORD *)(a14 + 88);
  v153 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v153, v136, v137, (v137 - (uint64_t)v136) >> 2);
  kaldi::quasar::WordConf::NormaliseWrdScores(a12, a13, a1, (uint64_t)v151, (float)(unint64_t)(((char *)v130 - (char *)v131) >> 3), (float)(unint64_t)(((char *)v132 - (char *)v133) >> 3), v129);
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  __str.__r_.__value_.__r.__words[0] = *(int *)(a3 + 4);
  v138 = (const std::string *)std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a4, (unint64_t *)&__str);
  v139 = v138;
  v140 = a4[3];
  if (!v138 && v140)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Word with ID = ", 15);
    v145 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" does not exist in word map. Is a dynamic vocabulary being used?", 64);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__str);
  }
  if (v140)
  {
    std::string::operator=((std::string *)(a12 + 24), v138 + 1);
    if (SHIBYTE(v139[1].__r_.__value_.__r.__words[2]) < 0)
      v141 = v139[1].__r_.__value_.__l.__size_;
    else
      v141 = HIBYTE(v139[1].__r_.__value_.__r.__words[2]);
    *(float *)(*(_QWORD *)(a12 + 168) + 376) = (float)v141;
  }
  std::string::operator=((std::string *)a12, a6);
  if (a7)
  {
    v142 = *(float **)(a10 + 168);
    v143 = v142[27];
    v144 = *(float *)(*(_QWORD *)(a12 + 168) + 40) + v142[28];
    v142[32] = v129 + v142[32];
    v142[27] = v143 + 1.0;
    v142[28] = v144;
  }
  if (v158)
  {
    v159 = (char *)v158;
    operator delete(v158);
  }
  if (__p)
  {
    v162 = (char *)__p;
    operator delete(__p);
  }
  if (v164.__r_.__value_.__r.__words[0])
  {
    v164.__r_.__value_.__l.__size_ = v164.__r_.__value_.__r.__words[0];
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1ADEA02D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  void *v59;
  void *v60;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a52);
  v59 = *(void **)(v57 - 216);
  if (v59)
  {
    *(_QWORD *)(v57 - 208) = v59;
    operator delete(v59);
  }
  v60 = *(void **)(v57 - 192);
  if (v60)
  {
    *(_QWORD *)(v57 - 184) = v60;
    operator delete(v60);
  }
  a52 = (void *)(v57 - 168);
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  a52 = (void *)(v57 - 144);
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  _Unwind_Resume(a1);
}

float kaldi::quasar::WordConf::UpdatePostNumerators(uint64_t a1, float *a2)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float result;

  v3 = *(float **)(a1 + 168);
  v3[9] = v3[9] + 1.0;
  v4 = exp(a2[9] / 10.0 - a2[8]) + v3[6];
  v3[6] = v4;
  v5 = exp(-a2[8]) + v3[7];
  v3[7] = v5;
  v6 = exp(a2[9] / -10.0) + v3[8];
  v3[8] = v6;
  v7 = v3[3];
  v3[2] = a2[10] + v3[2];
  v8 = v3[12];
  v3[13] = a2[15] + v3[13];
  v3[14] = a2[16] + v3[14];
  v3[3] = a2[12] + v7;
  v9 = v3[5];
  v3[4] = a2[11] + v3[4];
  v3[5] = a2[13] + v9;
  result = a2[14] + v8;
  v3[12] = result;
  return result;
}

float kaldi::quasar::WordConf::ProcessRankInfo(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  float *v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  float result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float *v35;
  float v36;
  _QWORD v37[36];

  v12 = (float *)a3[1];
  v13 = 126 - 2 * __clz(((uint64_t)v12 - *a3) >> 3);
  if (v12 == (float *)*a3)
    v14 = 0;
  else
    v14 = v13;
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(*a3, v12, (uint64_t)v37, v14, 1);
  v15 = (float *)a4[1];
  v16 = 126 - 2 * __clz(((uint64_t)v15 - *a4) >> 3);
  if (v15 == (float *)*a4)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(*a4, v15, (uint64_t)v37, v17, 1);
  v18 = (float *)a5[1];
  v19 = 126 - 2 * __clz(((uint64_t)v18 - *a5) >> 3);
  if (v18 == (float *)*a5)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::SortPred &,std::pair<int,float> *,false>(*a5, v18, (uint64_t)v37, v20, 1);
  v22 = *a3;
  if (a3[1] != *a3)
  {
    v23 = 0;
    v24 = kaldi::g_kaldi_verbose_level;
    do
    {
      if (v24 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v37, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Rank in list = ", 15);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Orig = ", 8);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" sc= ", 5);
        v27 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" LOW ", 5);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" sc= ", 5);
        v29 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" HIGH ", 6);
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" sc= ", 5);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v37);
        v24 = kaldi::g_kaldi_verbose_level;
        v22 = *a3;
      }
      if (*(_DWORD *)(v22 + 8 * v23) == a2)
        *(float *)(*(_QWORD *)(a1 + 168) + 68) = (float)(*(float *)(v22 + 8 * v23 + 4)
                                                         / (float)(unint64_t)(v23 + 1))
                                                 + *(float *)(*(_QWORD *)(a1 + 168) + 68);
      v31 = *a4;
      if (*(_DWORD *)(*a4 + 8 * v23) == a2)
        *(float *)(*(_QWORD *)(a1 + 168) + 72) = (float)(*(float *)(v31 + 8 * v23 + 4)
                                                         / (float)(unint64_t)(v23 + 1))
                                                 + *(float *)(*(_QWORD *)(a1 + 168) + 72);
      v32 = *a5;
      v33 = v23 + 1;
      v34 = (float)(unint64_t)(v23 + 1);
      if (*(_DWORD *)(*a5 + 8 * v23) == a2)
        *(float *)(*(_QWORD *)(a1 + 168) + 76) = (float)(*(float *)(v32 + 8 * v23 + 4) / v34)
                                                 + *(float *)(*(_QWORD *)(a1 + 168) + 76);
      v35 = *(float **)(a6 + 168);
      v36 = v35[18];
      v35[17] = (float)(*(float *)(v22 + 8 * v23 + 4) / v34) + v35[17];
      v35[18] = v36 + (float)(*(float *)(v31 + 8 * v23 + 4) / v34);
      result = v35[19] + (float)(*(float *)(v32 + 8 * v23 + 4) / v34);
      v35[19] = result;
      ++v23;
    }
    while (v33 < (a3[1] - v22) >> 3);
  }
  return result;
}

void sub_1ADEA07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::quasar::WordConf::NormaliseWrdScores(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7)
{
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float result;

  v7 = *(float **)(a1 + 168);
  v8 = *(float **)(a2 + 168);
  v9 = v7[18];
  v10 = 1.0;
  v11 = v7[17] / v8[17];
  if (COERCE_UNSIGNED_INT(fabs(v11)) >= 0x7F800000)
    v11 = 1.0;
  v7[17] = v11;
  v12 = v9 / v8[18];
  if ((LODWORD(v12) & 0x7FFFFFFFu) >= 0x7F800000)
    v13 = 1.0;
  else
    v13 = v12;
  v7[18] = v13;
  if (COERCE_UNSIGNED_INT(fabs(v7[19] / v8[19])) >= 0x7F800000)
    v14 = 1.0;
  else
    v14 = v7[19] / v8[19];
  v15 = vabds_f32(v11, v13);
  v16 = fabs(v11 - v13);
  v17 = 0.0;
  if (v16 >= 2139095040)
    v15 = 0.0;
  v7[19] = v14;
  v7[20] = v15;
  v18 = v11 - v14;
  v19 = vabds_f32(v11, v14);
  if ((LODWORD(v18) & 0x7FFFFFFFu) >= 0x7F800000)
    v19 = 0.0;
  v7[21] = v19;
  if (COERCE_UNSIGNED_INT(fabs(v7[25] / v8[25])) >= 0x7F800000)
    v20 = 1.0;
  else
    v20 = v7[25] / v8[25];
  v7[25] = v20;
  if (COERCE_UNSIGNED_INT(fabs(v7[23] / v8[23])) >= 0x7F800000)
    v21 = 1.0;
  else
    v21 = v7[23] / v8[23];
  v7[23] = v21;
  v22 = v7[3];
  if (COERCE_INT(fabs(v7[2] / v8[2])) >= 2139095040)
    v23 = 0.5;
  else
    v23 = v7[2] / v8[2];
  v7[2] = v23;
  v24 = v7[12];
  if (COERCE_UNSIGNED_INT(fabs(v7[13] / v8[13])) >= 0x7F800000)
    v25 = 0.5;
  else
    v25 = v7[13] / v8[13];
  v7[13] = v25;
  if (COERCE_UNSIGNED_INT(fabs(v7[14] / v8[14])) >= 0x7F800000)
    v26 = 0.5;
  else
    v26 = v7[14] / v8[14];
  v7[14] = v26;
  if (COERCE_UNSIGNED_INT(fabs(v22 / v8[3])) >= 0x7F800000)
    v27 = 1.0;
  else
    v27 = v22 / v8[3];
  v7[3] = v27;
  v28 = v7[4];
  v29 = v7[5];
  if (COERCE_INT(fabs(v28 / v8[4])) < 2139095040)
    v17 = v28 / v8[4];
  v7[4] = v17;
  if (COERCE_INT(fabs(v29 / v8[5])) >= 2139095040)
    v30 = 0.5;
  else
    v30 = v29 / v8[5];
  v7[5] = v30;
  v31 = v7[7];
  if (COERCE_UNSIGNED_INT(fabs(v7[6] / v8[6])) >= 0x7F800000)
    v32 = 0.5;
  else
    v32 = v7[6] / v8[6];
  v7[6] = v32;
  if (COERCE_INT(fabs(v31 / v8[7])) >= 2139095040)
    v33 = 0.5;
  else
    v33 = v31 / v8[7];
  v7[7] = v33;
  v34 = v7[9];
  if (COERCE_UNSIGNED_INT(fabs(v7[8] / v8[8])) >= 0x7F800000)
    v35 = 0.5;
  else
    v35 = v7[8] / v8[8];
  v7[8] = v35;
  if (COERCE_INT(fabs(v24 / v8[12])) < 2139095040)
    v10 = v24 / v8[12];
  v7[11] = v34 / v7[10];
  v7[12] = v10;
  v7[15] = vabds_f32(v23, v26);
  v7[16] = vabds_f32(v23, v25);
  v7[26] = a5;
  v7[24] = a6;
  v36 = *(_DWORD *)(a4 + 12);
  v37 = (float)(*(_DWORD *)(a4 + 16) - v36);
  *v7 = (float)v36 / (float)(1000.0 / *(float *)(a3 + 12));
  result = v37 / (float)(1000.0 / *(float *)(a3 + 12));
  v7[1] = result;
  v7[22] = a7;
  return result;
}

void kaldi::quasar::ComputeTimeBasedPosterior(int a1, unsigned int a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t *v18;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  _QWORD *v29;
  float v30;
  _QWORD v31[35];

  LODWORD(v8) = a1;
  v9 = *(_DWORD *)(a5 + 12);
  v10 = __OFSUB__(a1, v9);
  v11 = a1 - v9;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    v12 = 0;
  else
    v12 = v11;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Recomputing TBP on Ref Interval ", 32);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" - ", 3);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" for arc on ", 12);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" - ", 3);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
  v16 = 0.0;
  v17 = 0.0;
  if (v8 < a2)
  {
    v8 = (int)v8;
    do
    {
      LODWORD(v31[0]) = v8;
      v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a4, (int *)v31);
      if (v18)
      {
        if (v8 < *(int *)(a5 + 12) || v8 > *(int *)(a5 + 16))
        {
          for (i = v18[5]; i; i = *(_QWORD *)i)
            v17 = v17 + *(float *)(i + 20);
        }
        else
        {
          v21 = v12;
          v22 = *(_QWORD *)(a5 + 80);
          if (v12 < (unint64_t)((*(_QWORD *)(a5 + 88) - v22) >> 2))
          {
            ++v12;
            v23 = v18[5];
            if (v23)
            {
              v24 = *(_DWORD *)(v22 + 4 * v21);
              do
              {
                if (*(_DWORD *)(v23 + 16) == v24)
                  v25 = *(float *)(v23 + 20);
                else
                  v25 = -0.0;
                v16 = v16 + v25;
                v17 = v17 + *(float *)(v23 + 20);
                v23 = *(_QWORD *)v23;
              }
              while (v23);
            }
          }
        }
      }
      ++v8;
    }
    while (v8 < (int)a2);
  }
  if (kaldi::g_kaldi_verbose_level <= 2)
  {
    v28 = v16 / v17;
  }
  else
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Recomputed TBP is ", 18);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" / ", 3);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" = ", 3);
    v28 = v16 / v17;
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" post score avg is ", 19);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
  v30 = 1.0;
  if ((LODWORD(v28) & 0x7FFFFFFFu) < 0x7F800000)
    v30 = v28;
  *(float *)(a5 + 68) = v30;
}

void sub_1ADEA0D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ProcessArc(int a1@<W0>, kaldi::SilencePhoneSet *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _DWORD *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type size;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v40;
  unint64_t v41;
  float32x2_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t *v49;
  float v50;
  float32x2_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  double v56;
  float v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  int v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  std::string v67;
  _QWORD v68[35];
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _BYTE *v74;
  uint64_t v75;

  v72 = *(_QWORD *)(a3 + 8);
  v74 = 0;
  v75 = 0;
  v73 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v69, v73, (uint64_t)v74, (v74 - (_BYTE *)v73) >> 2);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Compact Lattice Current state=", 30);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ARC ilabel: ", 13);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" olabel: ", 9);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" weight1: ", 10);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" weight2: ", 10);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Next State=", 11);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" duration = ", 12);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" from ", 6);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" to ", 4);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" word is ", 9);
      v66 = *(int *)(a3 + 4);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a7, &v66))
      {
        v65 = *(int *)(a3 + 4);
        v26 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a7, &v65);
        if (*((char *)v26 + 47) < 0)
          std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)v26[3], v26[4]);
        else
          v67 = *(std::string *)((_BYTE *)v26 + 1);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v67, "not_in_static_vocab");
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v67;
      else
        v27 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      else
        size = v67.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, size);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
    }
  }
  v29 = v69;
  v30 = v70 - v69;
  if (v70 == v69)
  {
    v32 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v32 += !kaldi::SilencePhoneSet::isSilencePhone(a2, *(_DWORD *)&v29[4 * v31++]);
      v29 = v69;
      v30 = v70 - v69;
    }
    while (v31 < (v70 - v69) >> 2);
  }
  v33 = v30 >> 2;
  if (*(_DWORD *)(a3 + 4))
    v34 = v32;
  else
    v34 = v30 >> 2;
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Original Duration Was ", 22);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" without silence it is ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
  }
  v63 = v34;
  v36 = *(int *)(a3 + 40);
  v37 = *a4;
  v38 = *(_DWORD *)(*a4 + 4 * v36);
  if (v38 >= 1 && v38 != *(_DWORD *)(v37 + 4 * a1) + (_DWORD)v33 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Warning - state Time Mismatch - ", 32);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" and ", 5);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
    v37 = *a4;
    v36 = *(int *)(a3 + 40);
  }
  *(_DWORD *)(v37 + 4 * v36) = *(_DWORD *)(v37 + 4 * a1) + v33;
  v41 = *(int *)(v37 + 4 * a1);
  if (v41 >= *(_DWORD *)(v37 + 4 * *(int *)(a3 + 40)))
  {
    v42 = 0;
    v46 = 0.0;
    v43 = 2.0;
    v44 = -2.0;
    v56 = 1.0;
LABEL_50:
    LODWORD(v16) = 1.0;
    *(_QWORD *)&v64 = v16;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"No states in the word posterior computation - this may be because the word has 0 duration (could happen for class LM)", 117);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v68);
      v37 = *a4;
    }
    goto LABEL_52;
  }
  v42 = 0;
  LODWORD(v16) = 0;
  v64 = v16;
  v43 = 2.0;
  v44 = -2.0;
  v45 = 1.0;
  v46 = 0.0;
  do
  {
    LODWORD(v68[0]) = v41;
    v47 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a6, (int *)v68);
    if (v47)
    {
      v48 = v47 + 3;
      if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v47 + 3, (int *)&v69[4 * (v41 - *(int *)(*a4 + 4 * a1))]))
      {
        v49 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v48, (int *)&v69[4 * (v41 - *(int *)(*a4 + 4 * a1))]);
        v50 = *((float *)v49 + 5);
        v51 = (float32x2_t)v49[3];
      }
      else
      {
        v51 = 0;
        v50 = 0.0;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Couldn't find state ", 20);
          v53 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" at time ", 9);
          v54 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" defaulting posterior to 0, w1=", 31);
          v55 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" w2=", 4);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v68);
        }
      }
    }
    else
    {
      v51 = 0;
      v50 = 0.0;
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Time = ", 7);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" not in state posterior map...", 30);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      }
    }
    v46 = v46 + v50;
    v42 = vadd_f32(v42, v51);
    v45 = v45 * v50;
    if (v50 < v43)
      v43 = v50;
    if (v50 > v44)
      v44 = v50;
    v16 = v64;
    *(float *)&v16 = *(float *)&v64 + 1.0;
    v64 = v16;
    ++v41;
    v37 = *a4;
  }
  while (v41 < *(int *)(*a4 + 4 * *(int *)(a3 + 40)));
  v56 = v45;
  if (*(float *)&v16 == 0.0)
    goto LABEL_50;
LABEL_52:
  v57 = pow(v56, 1.0 / *(float *)&v64);
  v58 = *(_DWORD *)(a3 + 4);
  v59 = (*a5)++;
  v60 = *(_DWORD *)(v37 + 4 * a1);
  *(_QWORD *)(a8 + 80) = 0;
  v61 = *(_DWORD *)(a3 + 40);
  *(_QWORD *)(a8 + 88) = 0;
  *(_QWORD *)(a8 + 96) = 0;
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = v58;
  *(_DWORD *)(a8 + 8) = v59;
  *(_DWORD *)(a8 + 12) = v60;
  *(_DWORD *)(a8 + 16) = v60 + v33;
  *(_DWORD *)(a8 + 20) = v63;
  *(_DWORD *)(a8 + 24) = -1;
  *(_DWORD *)(a8 + 28) = v61;
  *(_QWORD *)(a8 + 32) = v72;
  *(float *)(a8 + 40) = v46 / *(float *)&v64;
  *(float *)(a8 + 44) = v43;
  *(float *)(a8 + 48) = v44;
  *(float *)(a8 + 52) = v57;
  *(_DWORD *)(a8 + 56) = 1065353216;
  *(float32x2_t *)(a8 + 60) = vdiv_f32(v42, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v64, 0));
  v62 = v69;
  if ((char **)(a8 + 80) != &v69)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a8 + 80), v69, (uint64_t)v70, (v70 - v69) >> 2);
    v62 = v69;
  }
  if (v62)
  {
    v70 = v62;
    operator delete(v62);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

void sub_1ADEA1480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  if (a22 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a23);
  v25 = *(void **)(v23 - 208);
  if (v25)
  {
    *(_QWORD *)(v23 - 200) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v23 - 176);
  if (v26)
  {
    *(_QWORD *)(v23 - 168) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::ComputeArcOverlap(uint64_t a1, uint64_t a2)
{
  float *v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  float v13;

  v2 = *(float **)(a1 + 168);
  v3 = *v2;
  v4 = *v2 + v2[1];
  v5 = *(float **)(a2 + 168);
  v6 = *v5;
  v7 = *v5 + v5[1];
  v8 = v7 - *v5;
  if (v7 > v4)
    v8 = v4 - *v5;
  v9 = v6 > v3;
  if (v6 < v3)
    v10 = v7 - v3;
  else
    v10 = v8;
  v11 = v4 - v3;
  if (v9 || v7 < v4)
    v13 = v10;
  else
    v13 = v11;
  if (v11 <= 0.0)
    v11 = 1.0;
  return v13 / v11;
}

void kaldi::quasar::MBRToOneBest(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD v10[3];
  int32x2_t v11;
  void *__p;
  void *v13;
  uint64_t v14;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    do
    {
      v13 = 0;
      v14 = 0;
      __p = 0;
      v10[0] = -1;
      v11 = vcvt_s32_f32(*(float32x2_t *)(*a2 + 8 * v7));
      v10[1] = *(_DWORD *)(v4 + 4 * v7);
      v8 = a3[1];
      if (v8 >= a3[2])
      {
        v9 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(a3, (uint64_t)v10);
      }
      else
      {
        std::vector<kaldi::ChosenArc>::__construct_one_at_end[abi:ne180100]<kaldi::ChosenArc const&>((uint64_t)a3, (uint64_t)v10);
        v9 = v8 + 104;
      }
      a3[1] = v9;
      if (__p)
      {
        v13 = __p;
        operator delete(__p);
      }
      ++v7;
      v4 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 2);
  }
}

void sub_1ADEA1684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::GenSausageStructFeats(uint64_t a1, const kaldi::quasar::WordConf *a2, _DWORD *a3, kaldi::quasar::WordConf *a4, uint64_t a5, _QWORD *a6)
{
  _DWORD *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  double v17;
  double v18;
  double v19;
  float v20;
  _QWORD *v21;
  char *v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  uint64_t v26;
  unsigned __int8 v27;
  std::string *p_p;
  std::string *v29;
  int64_t v30;
  std::string *v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  int64_t v40;
  std::string *v41;
  int64_t v42;
  char *v43;
  int v44;
  std::string *v45;
  char *v46;
  std::string __p;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;

  v12 = (_DWORD *)*((_QWORD *)a2 + 21);
  v12[66] = a3[10];
  v12[67] = a3[11];
  v12[68] = a3[12];
  if (!a3[1])
    v12[69] = 1065353216;
  kaldi::quasar::WordConf::WordConf(&v51, a4);
  kaldi::quasar::WordConf::WordConf(&v50, a2);
  v13 = kaldi::quasar::ComputeArcOverlap((uint64_t)&v51, (uint64_t)&v50);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v50);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v51);
  v14 = *((_QWORD *)a2 + 21);
  *(float *)(v14 + 280) = v13;
  v15 = *((_QWORD *)a4 + 21);
  v16 = 1000.0 / *(float *)(a1 + 12);
  v17 = (float)(*(float *)(v15 + 4) * v16);
  v18 = *(float *)(v14 + 4);
  v19 = v16;
  if ((v18 + v18) * v19 <= v17)
  {
    *(_DWORD *)(v14 + 308) = 1065353216;
    v20 = 1000.0 / *(float *)(a1 + 12);
    v17 = (float)(*(float *)(v15 + 4) * v20);
    v19 = v20;
  }
  if (v18 * 0.5 * v19 >= v17)
    *(_DWORD *)(v14 + 312) = 1065353216;
  *(_DWORD *)(v14 + 336) = *(_DWORD *)(a5 + 68);
  v48.__r_.__value_.__r.__words[0] = (int)a3[1];
  if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a6, (unint64_t *)&v48))
  {
    __p.__r_.__value_.__r.__words[0] = (int)a3[1];
    v21 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a6, (unint64_t *)&__p);
    if (*((char *)v21 + 47) < 0)
      std::string::__init_copy_ctor_external(&v49, (const std::string::value_type *)v21[3], v21[4]);
    else
      v49 = *(std::string *)((_BYTE *)v21 + 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "NULL");
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v48 = v49;
  v22 = (char *)a4 + 24;
  if (*((char *)a4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a4 + 3), *((_QWORD *)a4 + 4));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v22;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 5);
  }
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v48;
  else
    v23 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    size = v48.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v49;
    else
      v25 = (std::string *)v49.__r_.__value_.__r.__words[0];
    do
    {
      v25->__r_.__value_.__s.__data_[0] = __tolower(v23->__r_.__value_.__s.__data_[0]);
      v25 = (std::string *)((char *)v25 + 1);
      v23 = (std::string *)((char *)v23 + 1);
      --size;
    }
    while (size);
  }
  if (*((char *)a4 + 47) >= 0)
  {
    v26 = *((unsigned __int8 *)a4 + 47);
  }
  else
  {
    v22 = (char *)*((_QWORD *)a4 + 3);
    v26 = *((_QWORD *)a4 + 4);
  }
  v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v26)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    do
    {
      p_p->__r_.__value_.__s.__data_[0] = __tolower(*v22);
      p_p = (std::string *)((char *)p_p + 1);
      ++v22;
      --v26;
    }
    while (v26);
    v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v27 & 0x80u) == 0)
    v29 = &__p;
  else
    v29 = p_p;
  if ((v27 & 0x80u) == 0)
    v30 = v27;
  else
    v30 = __p.__r_.__value_.__l.__size_;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v49;
  else
    v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v32 = v49.__r_.__value_.__l.__size_;
  if (v30)
  {
    v33 = (char *)v31 + v32;
    if (v32 >= v30)
    {
      v39 = v29->__r_.__value_.__s.__data_[0];
      v40 = v32;
      v41 = v31;
      do
      {
        v42 = v40 - v30;
        if (v42 == -1)
          break;
        v43 = (char *)memchr(v41, v39, v42 + 1);
        if (!v43)
          break;
        v34 = v43;
        if (!memcmp(v43, v29, v30))
          goto LABEL_52;
        v41 = (std::string *)(v34 + 1);
        v40 = v33 - (v34 + 1);
      }
      while (v40 >= v30);
    }
    v34 = (char *)v31 + v32;
LABEL_52:
    if (v34 == v33)
      v35 = -1;
    else
      v35 = v34 - (char *)v31;
    if (v32)
      goto LABEL_56;
LABEL_62:
    v38 = 0;
    goto LABEL_63;
  }
  v35 = 0;
  if (!v32)
    goto LABEL_62;
LABEL_56:
  v36 = (char *)v29 + v30;
  if (v30 >= v32)
  {
    v44 = v31->__r_.__value_.__s.__data_[0];
    v45 = v29;
    do
    {
      if (v30 - v32 == -1)
        break;
      v46 = (char *)memchr(v45, v44, v30 - v32 + 1);
      if (!v46)
        break;
      v37 = v46;
      if (!memcmp(v46, v31, v32))
        goto LABEL_58;
      v45 = (std::string *)(v37 + 1);
      v30 = v36 - (v37 + 1);
    }
    while (v30 >= v32);
  }
  v37 = v36;
LABEL_58:
  v38 = v37 - (char *)v29;
  if (v37 == v36)
    v38 = -1;
LABEL_63:
  if (v35 != -1)
    *(_DWORD *)(*((_QWORD *)a2 + 21) + 300) = 1065353216;
  if (v38 != -1)
    *(_DWORD *)(*((_QWORD *)a2 + 21) + 288) = 1065353216;
  if ((v27 & 0x80) != 0)
    operator delete(p_p);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1ADEA1ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ProcessConfusions(uint64_t result, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;

  v3 = *a3;
  v4 = (uint64_t *)(*a3 + 24 * (int)result);
  v5 = *v4;
  v6 = (float)(unint64_t)(0xF83E0F83E0F83E1 * ((v4[1] - *v4) >> 3));
  v7 = *(_QWORD *)(*v4 + 264 * a2 + 168);
  *(float *)(v7 + 340) = v6;
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(*(_QWORD *)(v3 + 24 * (int)result - 24) + 144) == *(_DWORD *)(v5 + 264 * a2 + 152))
      *(_DWORD *)(v7 + 344) = 1065353216;
    v8 = *(float *)(v5 + 264 * a2 + 208);
  }
  else
  {
    *(_DWORD *)(v7 + 344) = 1065353216;
    v8 = 1.0;
  }
  *(float *)(v7 + 352) = v8;
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - v3) >> 3) - 1 == (int)result)
  {
    *(_DWORD *)(v7 + 348) = 1065353216;
    v9 = 1.0;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)(v3 + 24 * (int)result + 24) + 144) == *(_DWORD *)(v5 + 264 * a2 + 148))
      *(_DWORD *)(v7 + 348) = 1065353216;
    v9 = *(float *)(v5 + 264 * a2 + 204);
  }
  *(float *)(v7 + 356) = v9;
  return result;
}

void kaldi::quasar::AlignOneBestWithSausages(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t **v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float *v29;
  int v30;
  float *v31;
  float *v32;
  float *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  void **v37;
  uint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  int *v57;
  _QWORD *v58;
  int v59;
  _QWORD **v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD **v63;
  int v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t v73;
  float *v74;
  int v75;
  float **v76;
  float **v77;
  float **v78;
  int v79;
  float **v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t **v87;
  uint64_t v88;
  int *v89;
  int *i;
  _QWORD *v91;
  int v92;
  _QWORD **v93;
  _QWORD *v94;
  _QWORD **v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD **v100;
  _QWORD *v101;
  _QWORD **v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t j;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int v119;
  uint64_t v121;
  unint64_t v122;
  int v127;
  uint64_t *v129;
  _QWORD *v130[2];
  float **v131;
  float *v132;
  uint64_t v133;
  uint64_t *v134;
  _QWORD *v135[2];
  void **v136;
  uint64_t v137;
  void *__p;
  void *v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148[2];

  v6 = *a3;
  if (a3[1] == *a3)
    return;
  v7 = a3;
  v8 = a2;
  v9 = 0;
  v10 = 0;
  v121 = a6 + 16;
  do
  {
    v127 = *(_DWORD *)(v6 + 4 * v10);
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v11 = *v8;
    if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) <= v9)
    {
      v9 = -1;
      goto LABEL_145;
    }
    v122 = v10;
    v12 = 0;
    v13 = v9;
    v9 = -1;
    do
    {
      __p = 0;
      v139 = 0;
      v140 = 0;
      v14 = *(_QWORD *)(v11 + 24 * v13);
      if (*(_QWORD *)(v11 + 24 * v13 + 8) == v14)
      {
LABEL_11:
        if ((v12 & 1) != 0)
          goto LABEL_136;
        std::vector<std::pair<int,float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,float> const*>,std::__wrap_iter<std::pair<int,float> const*>>((uint64_t)&v142, v143, *(uint64_t **)(*a1 + 24 * v13), *(uint64_t **)(*a1 + 24 * v13 + 8), (uint64_t)(*(_QWORD *)(*a1 + 24 * v13 + 8) - *(_QWORD *)(*a1 + 24 * v13)) >> 3);
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>,std::__wrap_iter<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const*>>(&v145, v146, *(_QWORD *)(*v8 + 24 * v13), *(_QWORD *)(*v8 + 24 * v13 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*v8 + 24 * v13 + 8) - *(_QWORD *)(*v8 + 24 * v13)) >> 3));
        v12 = 0;
        goto LABEL_137;
      }
      v15 = 0;
      v16 = 0;
      v17 = -100.0;
      v18 = 4;
      while (1)
      {
        v19 = (uint64_t **)(*a1 + 24 * v13);
        if (*(_DWORD *)(v14 + v15) == v127)
          break;
        v20 = *(float *)((char *)*v19 + v18);
        if (v20 > v17)
        {
          v21 = v14 + v15;
          v136 = *(void ***)(v14 + v15 + 8);
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v137, v14 + v15 + 16);
          v141 = *(_DWORD *)(v21 + 48);
          v11 = *v8;
          v17 = v20;
        }
        ++v16;
        v14 = *(_QWORD *)(v11 + 24 * v13);
        v15 += 56;
        v18 += 8;
        if (v16 >= 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v11 + 24 * v13 + 8) - v14) >> 3))
          goto LABEL_11;
      }
      v22 = a4[1];
      if (v22 >= a4[2])
      {
        v23 = std::vector<std::vector<std::pair<int,float>>>::__push_back_slow_path<std::vector<std::pair<int,float>> const&>(a4, v19);
      }
      else
      {
        std::vector<std::vector<std::pair<int,float>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,float>> const&>((uint64_t)a4, v19);
        v23 = v22 + 24;
      }
      a4[1] = v23;
      v135[0] = 0;
      v135[1] = 0;
      v134 = (uint64_t *)v135;
      v25 = v142;
      v24 = v143;
      if (v143 == v142)
        goto LABEL_67;
      v132 = 0;
      v133 = 0;
      v131 = &v132;
      v27 = *(_QWORD *)(v23 - 24);
      v26 = *(_QWORD *)(v23 - 16);
      if (v27 != v26)
      {
        do
        {
          v28 = *(_DWORD *)(v27 + 4);
          v129 = (uint64_t *)v27;
          *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v27, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129)+ 8) = v28;
          v27 += 8;
        }
        while (v27 != v26);
        v25 = v142;
        v24 = v143;
      }
      while (v25 != v24)
      {
        v29 = v132;
        if (!v132)
          goto LABEL_30;
        v30 = *(_DWORD *)v25;
        v31 = (float *)&v132;
        do
        {
          v32 = v29;
          v33 = v31;
          v34 = *((_DWORD *)v29 + 7);
          if (v34 >= v30)
            v31 = v29;
          else
            v29 += 2;
          v29 = *(float **)v29;
        }
        while (v29);
        if (v31 == (float *)&v132)
          goto LABEL_30;
        if (v34 < v30)
          v32 = v33;
        if (v30 >= *((_DWORD *)v32 + 7))
        {
          v48 = *((float *)v25 + 1);
          if (v31[8] >= v48)
            goto LABEL_50;
          v129 = v25;
          *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v25, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129)+ 8) = v48;
          v49 = *((_DWORD *)v25 + 1);
          v129 = v25;
          v50 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v134, (int *)v25, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129);
        }
        else
        {
LABEL_30:
          v35 = a4[1];
          v38 = *(uint64_t **)(v35 - 16);
          v37 = (void **)(v35 - 16);
          v36 = v38;
          v39 = (unint64_t)v37[1];
          if ((unint64_t)v38 >= v39)
          {
            v41 = v37 - 1;
            v42 = (uint64_t)*(v37 - 1);
            v43 = ((uint64_t)v36 - v42) >> 3;
            if ((unint64_t)(v43 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v44 = v39 - v42;
            v45 = v44 >> 2;
            if (v44 >> 2 <= (unint64_t)(v43 + 1))
              v45 = v43 + 1;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            if (v46)
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v37 + 1), v46);
            else
              v47 = 0;
            v51 = (uint64_t *)&v47[8 * v43];
            *v51 = *v25;
            v40 = v51 + 1;
            v52 = (char *)*v37;
            v53 = (char *)*v41;
            if (*v37 != *v41)
            {
              do
              {
                v54 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *--v51 = v54;
              }
              while (v52 != v53);
              v52 = (char *)*v41;
            }
            *v41 = v51;
            *v37 = v40;
            v37[1] = &v47[8 * v46];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v36 = *v25;
            v40 = v36 + 1;
          }
          *v37 = v40;
          v49 = *((_DWORD *)v25 + 1);
          v129 = v25;
          v50 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v25, (uint64_t)&std::piecewise_construct, (unsigned int **)&v129);
        }
        *((_DWORD *)v50 + 8) = v49;
LABEL_50:
        ++v25;
      }
      v55 = a4[1];
      v56 = *(int **)(v55 - 24);
      v57 = *(int **)(v55 - 16);
      if (v56 != v57)
      {
        v58 = v135[0];
        do
        {
          if (v58)
          {
            v59 = *v56;
            v60 = v135;
            v61 = v58;
            do
            {
              v62 = v61;
              v63 = v60;
              v64 = *((_DWORD *)v61 + 7);
              if (v64 >= v59)
                v60 = (_QWORD **)v61;
              else
                ++v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
            if (v60 != v135)
            {
              if (v64 < v59)
                v62 = v63;
              if (v59 >= *((_DWORD *)v62 + 7))
                v56[1] = *((_DWORD *)v60 + 8);
            }
          }
          v56 += 2;
        }
        while (v56 != v57);
      }
      v143 = v142;
      std::__tree<int>::destroy((uint64_t)&v131, v132);
LABEL_67:
      v65 = (uint64_t *)(*a2 + 24 * v13);
      v66 = a5[1];
      if (v66 >= a5[2])
      {
        v67 = std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__push_back_slow_path<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>(a5, v65);
      }
      else
      {
        std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>((uint64_t)a5, v65);
        v67 = v66 + 24;
      }
      a5[1] = v67;
      v69 = v145;
      v68 = v146;
      if (v146 != v145)
      {
        v132 = 0;
        v133 = 0;
        v131 = &v132;
        v130[0] = 0;
        v130[1] = 0;
        v129 = (uint64_t *)v130;
        v71 = *(_QWORD *)(v67 - 24);
        v70 = *(_QWORD *)(v67 - 16);
        if (v71 != v70)
        {
          do
          {
            v148[0] = (_DWORD *)v71;
            v72 = std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v71, (uint64_t)&std::piecewise_construct, v148);
            v72[5] = *(uint64_t **)(v71 + 8);
            v73 = v71 + 16;
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v72 + 6), v73);
            *((_DWORD *)v72 + 20) = *(_DWORD *)(v73 + 32);
            v71 = v73 + 40;
          }
          while (v71 != v70);
          v69 = v145;
          v68 = v146;
        }
        while (v69 != v68)
        {
          v74 = v132;
          if (!v132)
            goto LABEL_84;
          v75 = *(_DWORD *)v69;
          v76 = &v132;
          do
          {
            v77 = (float **)v74;
            v78 = v76;
            v79 = *((_DWORD *)v74 + 8);
            v80 = (float **)(v74 + 2);
            if (v79 >= v75)
            {
              v80 = v77;
              v76 = v77;
            }
            v74 = *v80;
          }
          while (v74);
          if (v76 == &v132)
            goto LABEL_84;
          if (v79 < v75)
            v77 = v78;
          if (v75 >= *((_DWORD *)v77 + 8))
          {
            v148[0] = (_DWORD *)v69;
            v87 = std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v129, (int *)v69, (uint64_t)&std::piecewise_construct, v148);
            v87[5] = *(uint64_t **)(v69 + 8);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v87 + 6), v69 + 16);
          }
          else
          {
LABEL_84:
            v81 = -1 - 0x5555555555555555 * ((a5[1] - *a5) >> 3);
            v82 = *a5 + 24 * v81;
            v85 = *(_QWORD *)(v82 + 8);
            v83 = *(_QWORD *)(v82 + 16);
            v84 = (uint64_t *)(v82 + 8);
            if (v85 >= v83)
            {
              v86 = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t *)(*a5 + 24 * v81), v69);
            }
            else
            {
              std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100](v85, v69);
              v86 = v85 + 56;
              *v84 = v85 + 56;
            }
            *v84 = v86;
            v148[0] = (_DWORD *)v69;
            v87 = std::__tree<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::__map_value_compare<int,std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v131, (int *)v69, (uint64_t)&std::piecewise_construct, v148);
            v87[5] = *(uint64_t **)(v69 + 8);
            fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v87 + 6), v69 + 16);
          }
          *((_DWORD *)v87 + 20) = *(_DWORD *)(v69 + 48);
          v69 += 56;
        }
        v88 = a5[1];
        v89 = *(int **)(v88 - 24);
        for (i = *(int **)(v88 - 16); v89 != i; v89 += 14)
        {
          v91 = v135[0];
          if (v135[0])
          {
            v92 = *v89;
            v93 = v135;
            do
            {
              v94 = v91;
              v95 = v93;
              v96 = *((_DWORD *)v91 + 7);
              v97 = v91 + 1;
              if (v96 >= v92)
              {
                v97 = v94;
                v93 = (_QWORD **)v94;
              }
              v91 = (_QWORD *)*v97;
            }
            while (v91);
            if (v93 != v135)
            {
              if (v96 < v92)
                v94 = v95;
              v98 = v130[0];
              if (v92 >= *((_DWORD *)v94 + 7) && v130[0] != 0)
              {
                v100 = v130;
                do
                {
                  v101 = v98;
                  v102 = v100;
                  v103 = *((_DWORD *)v98 + 8);
                  v104 = v98 + 1;
                  if (v103 >= v92)
                  {
                    v104 = v101;
                    v100 = (_QWORD **)v101;
                  }
                  v98 = (_QWORD *)*v104;
                }
                while (v98);
                if (v100 != v130)
                {
                  if (v103 < v92)
                    v101 = v102;
                  if (v92 >= *((_DWORD *)v101 + 8))
                  {
                    *((_QWORD *)v89 + 1) = v100[5];
                    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v89 + 4), (uint64_t)(v100 + 6));
                    v89[12] = *((_DWORD *)v100 + 20);
                  }
                }
              }
            }
          }
        }
        v105 = v145;
        for (j = v146; j != v105; j -= 56)
        {
          v107 = *(void **)(j - 32);
          if (v107)
          {
            *(_QWORD *)(j - 24) = v107;
            operator delete(v107);
          }
        }
        v146 = v105;
        std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v129, v130[0]);
        std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v131, v132);
      }
      v8 = a2;
      v108 = *(_QWORD *)(*a2 + 24 * v13);
      v110 = *(_DWORD **)(a6 + 8);
      v109 = *(_QWORD *)(a6 + 16);
      if ((unint64_t)v110 >= v109)
      {
        v112 = *(_DWORD **)a6;
        v113 = ((uint64_t)v110 - *(_QWORD *)a6) >> 2;
        v114 = v113 + 1;
        if ((unint64_t)(v113 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v115 = v109 - (_QWORD)v112;
        if (v115 >> 1 > v114)
          v114 = v115 >> 1;
        if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
          v116 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v116 = v114;
        if (v116)
        {
          v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v121, v116);
          v112 = *(_DWORD **)a6;
          v110 = *(_DWORD **)(a6 + 8);
        }
        else
        {
          v117 = 0;
        }
        v118 = &v117[4 * v113];
        *(_DWORD *)v118 = *(_DWORD *)(v108 + v15);
        v111 = v118 + 4;
        while (v110 != v112)
        {
          v119 = *--v110;
          *((_DWORD *)v118 - 1) = v119;
          v118 -= 4;
        }
        *(_QWORD *)a6 = v118;
        *(_QWORD *)(a6 + 8) = v111;
        *(_QWORD *)(a6 + 16) = &v117[4 * v116];
        if (v112)
          operator delete(v112);
      }
      else
      {
        *v110 = *(_DWORD *)(v108 + v15);
        v111 = v110 + 1;
      }
      *(_QWORD *)(a6 + 8) = v111;
      v9 = v13 + 1;
      std::__tree<int>::destroy((uint64_t)&v134, v135[0]);
LABEL_136:
      v12 = 1;
LABEL_137:
      if (__p)
      {
        v139 = __p;
        operator delete(__p);
      }
      if ((v9 & 0x80000000) == 0)
        break;
      ++v13;
      v11 = *v8;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    v7 = a3;
    if (v142)
    {
      v143 = v142;
      operator delete(v142);
    }
    v10 = v122;
LABEL_145:
    v136 = (void **)&v145;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v136);
    ++v10;
    v6 = *v7;
  }
  while (v10 < (v7[1] - *v7) >> 2);
}

void sub_1ADEA25A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  std::__tree<int>::destroy((uint64_t)&a29, a30);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  v37 = *(void **)(v35 - 168);
  if (v37)
  {
    *(_QWORD *)(v35 - 160) = v37;
    operator delete(v37);
  }
  a32 = v35 - 144;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void kaldi::quasar::AddCandidateToMap(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  const void *v14;
  char v15;
  uint64_t *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v24;
  void **v25;
  uint64_t v26;
  void *__p;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;

  v5 = *a1;
  if (a1[1] != *a1)
  {
    v8 = 0;
    do
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(&v31, *(_QWORD *)(v5 + 24 * v8), *(_QWORD *)(v5 + 24 * v8 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 24 * v8 + 8) - *(_QWORD *)(v5 + 24 * v8)) >> 3));
      v9 = v31;
      if (v32 != v31)
      {
        v10 = 0;
        do
        {
          v11 = v9 + 56 * v10;
          v25 = *(void ***)(v11 + 8);
          v26 = *(_QWORD *)(v11 + 16);
          v28 = 0;
          v29 = 0;
          __p = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2);
          v30 = *(_DWORD *)(v9 + 56 * v10 + 48);
          v24 = v8;
          v34 = &v24;
          v12 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a5, &v24, (uint64_t)&std::piecewise_construct, &v34);
          v13 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v12 + 3, (int *)(v31 + 56 * v10));
          v24 = v8;
          v34 = &v24;
          std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a5, &v24, (uint64_t)&std::piecewise_construct, &v34);
          if (!v13
            && (_DWORD)v25 == *(_DWORD *)a2
            && v30 == *(_DWORD *)(a2 + 40)
            && HIDWORD(v25) == *(_DWORD *)(a2 + 4)
            && *(float *)&v26 == *(float *)(a2 + 8)
            && *((float *)&v26 + 1) == *(float *)(a2 + 12)
            && (v14 = *(const void **)(a2 + 16), v28 - (_BYTE *)__p == *(_QWORD *)(a2 + 24) - (_QWORD)v14)
            && !memcmp(__p, v14, v28 - (_BYTE *)__p))
          {
            ++*a4;
            v24 = v8;
            v34 = &v24;
            v16 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a5, &v24, (uint64_t)&std::piecewise_construct, &v34);
            v34 = (int *)(v31 + 56 * v10);
            v17 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v16 + 3), v34, (uint64_t)&std::piecewise_construct, &v34);
            *(_OWORD *)(v17 + 3) = *(_OWORD *)a3;
            v18 = *(_OWORD *)(a3 + 16);
            v19 = *(_OWORD *)(a3 + 32);
            v20 = *(_OWORD *)(a3 + 48);
            *(_OWORD *)((char *)v17 + 84) = *(_OWORD *)(a3 + 60);
            *(_OWORD *)(v17 + 9) = v20;
            *(_OWORD *)(v17 + 7) = v19;
            *(_OWORD *)(v17 + 5) = v18;
            if (v17 + 3 != (_QWORD *)a3)
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v17 + 104, *(char **)(a3 + 80), *(_QWORD *)(a3 + 88), (uint64_t)(*(_QWORD *)(a3 + 88) - *(_QWORD *)(a3 + 80)) >> 2);
            v15 = 0;
            v10 = 0x6DB6DB6DB6DB6DB7 * ((v32 - v31) >> 3);
          }
          else
          {
            v15 = 1;
          }
          if (__p)
          {
            v28 = __p;
            operator delete(__p);
          }
          if ((v15 & 1) == 0)
            break;
          ++v10;
          v9 = v31;
        }
        while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v32 - v31) >> 3));
      }
      v25 = (void **)&v31;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v25);
      ++v8;
      v5 = *a1;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void sub_1ADEA2938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  a14 = &a20;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeGenerateConfidenceSausagesOnline(uint64_t a1, kaldi::SilencePhoneSet *a2, const kaldi::TransitionModel *a3, const fst::SymbolTable *a4, uint64_t a5, _QWORD *a6, uint64_t a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, const kaldi::quasar::WordConf *a11, const kaldi::quasar::WordConf *a12, const kaldi::quasar::WordConf *a13, int a14, unsigned int a15, uint64_t *a16, _DWORD *a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,char **a22,uint64_t a23)
{
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::vector<int>::size_type v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  char *p_p;
  uint64_t i;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t *v67;
  _QWORD *v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  std::string *v72;
  std::string *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  int32x2_t v92;
  std::string *v93;
  unint64_t v94;
  _DWORD *v95;
  std::string *v96;
  _DWORD *data;
  int v98;
  std::string *v99;
  std::string *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v105;
  __int128 v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  float v121;
  uint64_t v122;
  float v123;
  float *v124;
  int v125;
  float *v126;
  _QWORD *v128;
  void **v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  int v133;
  float *v134;
  float *v135;
  float *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  _QWORD *v142;
  void **v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  int *v149;
  int *v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  std::string *v154;
  std::string *v155;
  _BYTE *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t j;
  int **v163;
  int *v164;
  unint64_t v165;
  float32x2_t *v166;
  float v167;
  float v168;
  unint64_t v169;
  float *v170;
  float v171;
  float v172;
  unint64_t v173;
  float *v174;
  float v175;
  float v176;
  float v177;
  _QWORD *v178;
  _QWORD *v179;
  __int32 v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  float v185;
  char v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  float v190;
  uint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t *v198;
  float v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t *v203;
  _QWORD *v204;
  const kaldi::SilencePhoneSet *v205;
  uint64_t v206;
  char *v207;
  int v208;
  unint64_t v209;
  const kaldi::quasar::WordConf *v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t *v216;
  float v217;
  std::string *v218;
  float v219;
  std::string *v220;
  std::string *v221;
  std::string *v222;
  std::string *v223;
  int64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  int64_t v229;
  unint64_t v230;
  uint64_t v231;
  float *v232;
  float v233;
  int v234;
  int v235;
  float *v236;
  float *v237;
  float *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  float *v244;
  int v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  float *v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  std::string::size_type *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  _QWORD *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  float v288;
  int v289;
  float v290;
  int v291;
  unint64_t v292;
  unint64_t v293;
  int *v294;
  int v295;
  float v296;
  int v297;
  int k;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  int v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _BOOL4 v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  _QWORD *v326;
  unint64_t v327;
  unsigned int v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  std::string::size_type *v336;
  _QWORD *v337;
  int v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  _QWORD *v347;
  int v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  float v353;
  unint64_t v354;
  uint64_t *v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t *v358;
  _QWORD *v359;
  const kaldi::SilencePhoneSet *v360;
  char *v361;
  uint64_t v362;
  char **v363;
  _QWORD *v364;
  unint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  int v375;
  uint64_t v376;
  unint64_t v377;
  _DWORD *v378;
  _DWORD *v379;
  _DWORD *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  int v387;
  float v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unsigned int v392;
  uint64_t *v393;
  _QWORD *v394;
  _QWORD *v395;
  _QWORD *v396;
  uint64_t *v397;
  _QWORD *v398;
  const kaldi::SilencePhoneSet *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  _DWORD *v403;
  unint64_t v404;
  _DWORD *v405;
  _DWORD *v406;
  _DWORD *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char *v412;
  char *v413;
  int v414;
  float v415;
  float v416;
  float v417;
  unint64_t v418;
  _DWORD *v419;
  _DWORD *v420;
  int v421;
  int v422;
  _DWORD *v423;
  uint64_t v424;
  int v425;
  _QWORD *v426;
  int v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  int v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  std::string::size_type v436;
  int *v437;
  std::string::size_type v438;
  std::string::size_type v439;
  uint64_t v440;
  uint64_t v441;
  int *v446;
  kaldi::quasar::WordConf *v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  int v452;
  void *v453[2];
  __int128 v454;
  void *v455;
  _QWORD *v456;
  int v457[4];
  void *v458;
  void *v459;
  void *v460;
  uint64_t v461;
  void *v462;
  uint64_t v463;
  void *v464;
  uint64_t v465;
  void *v466;
  uint64_t v467;
  int v468[4];
  void *v469;
  void *v470;
  void *v471;
  _QWORD *v472;
  void *v473;
  _DWORD *v474;
  void *v475;
  uint64_t v476;
  int *v477;
  int *v478;
  uint64_t v479;
  int v480[4];
  void *v481;
  void *v482;
  void *v483;
  _QWORD *v484;
  int32x2_t v485;
  void *v486;
  void *v487;
  uint64_t v488;
  void *v489;
  uint64_t v490;
  void *v491;
  uint64_t v492;
  std::string v493;
  void *v494;
  void *v495;
  uint64_t v496;
  void *v497;
  uint64_t v498;
  char *v499;
  void *__src[2];
  __int128 v501;
  int v502;
  __int128 v503;
  void *v504[2];
  int v505;
  void *v506;
  float *v507;
  char *v508;
  void *v509;
  char *v510;
  char *v511;
  void *v512;
  std::string *v513;
  unint64_t v514;
  uint64_t *v515;
  _QWORD *v516;
  unint64_t v517;
  std::string v518;
  void *v519;
  void *v520;
  uint64_t v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  _OWORD v525[2];
  void *v526;
  _BYTE *v527;
  uint64_t v528;
  __int128 __p;
  void *v530;
  unint64_t v531;
  uint64_t v532;
  int v533;
  __int128 v534;
  void *v535;
  void **v536;
  uint64_t v537;
  int v538;
  unsigned __int8 v539;
  int v540[6];
  uint64_t v541;
  int v542;
  uint64_t v543[3];
  _OWORD v544[3];
  _OWORD v545[2];
  void *v546;
  _BYTE *v547;
  uint64_t v548;
  _OWORD *v549;
  unint64_t v550;
  std::string *v551;
  std::string *v552;
  unint64_t v553;
  uint64_t v554;
  std::string __x;
  void *v556;
  _BYTE *v557;
  uint64_t v558;
  int v559;
  void *v560;
  char v561;
  uint64_t v562;
  float v563;
  int v564;
  int v565;
  uint64_t v566[3];
  uint64_t *v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t **v570;
  uint64_t **v571;
  uint64_t v572;
  _OWORD v573[2];
  int v574;
  uint64_t v575;
  _OWORD *v576;
  unint64_t v577;
  _BYTE v578[40];
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582[3];
  std::vector<int> v583;
  void *v584;
  _BYTE *v585;
  uint64_t v586;
  _QWORD v587[11];
  uint64_t v588[4];
  uint64_t **v589;
  uint64_t **v590;
  uint64_t *v591;
  uint64_t *v592;
  uint64_t v593;
  uint64_t v594[3];
  const void *v595;
  uint64_t v596;
  float v597;
  int v598;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v587, 3);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v587, (uint64_t)"Utterance ID is ", 16);
    v27 = *(char *)(a1 + 23);
    if (v27 >= 0)
      v28 = a1;
    else
      v28 = *(_QWORD *)a1;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a1 + 23);
    else
      v29 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v587);
  }
  v434 = a1;
  kaldi::MinimumBayesRisk::MinimumBayesRisk(v587, a7, *(unsigned __int8 *)(a5 + 1), a15, 0xFFFFFFFFLL);
  v585 = 0;
  v584 = 0;
  v586 = 0;
  v30 = (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a7 + 8) + 64)) >> 3);
  LODWORD(__x.__r_.__value_.__l.__data_) = 0;
  std::vector<int>::vector(&v583, v30, (const std::vector<int>::value_type *)&__x);
  memset(v582, 0, sizeof(v582));
  std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v582, v589, v590, 0xAAAAAAAAAAAAAAABLL * (v590 - v589));
  v580 = 0;
  v579 = 0;
  v581 = 0;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>(&v579, v591, v592, 0xAAAAAAAAAAAAAAABLL * (v592 - v591));
  std::unordered_map<unsigned long,short>::unordered_map((uint64_t)v578, (uint64_t)&v593);
  v576 = 0;
  v575 = 0;
  v577 = 0;
  memset(v573, 0, sizeof(v573));
  v574 = 1065353216;
  v571 = 0;
  v570 = 0;
  v572 = 0;
  v568 = 0;
  v567 = 0;
  v569 = 0;
  kaldi::quasar::AlignOneBestWithSausages(v582, &v579, v588, (uint64_t *)&v570, (uint64_t *)&v567, (uint64_t)&v584);
  kaldi::quasar::MBRToOneBest((uint64_t *)&v584, v594, v566);
  std::vector<std::vector<std::pair<int,float>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v582, v570, v571, 0xAAAAAAAAAAAAAAABLL * (v571 - v570));
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>((uint64_t)&v579, v567, v568, 0xAAAAAAAAAAAAAAABLL * (v568 - v567));
  v565 = 0;
  v31 = 0;
  if (v580 != v579)
  {
    v32 = 0;
    v33 = (v580 - v579) / 24;
    if (v33 <= 1)
      v33 = 1;
    do
    {
      v34 = *(int **)(v579 + 24 * v32);
      v35 = *(_QWORD *)(v579 + 24 * v32 + 8) - (_QWORD)v34;
      if (v35)
      {
        v36 = v35 / 56;
        if (v36 <= 1)
          v36 = 1;
        do
        {
          v37 = *v34;
          v34 += 14;
          v38 = v37 | a15;
          if (v37)
            v39 = 1;
          else
            v39 = v38 == 0;
          if (v39)
            ++v31;
          --v36;
        }
        while (v36);
      }
      ++v32;
    }
    while (v32 != v33);
  }
  v564 = 0;
  v433 = a7;
  v448 = a5;
  if (((*(_QWORD *)(*(_QWORD *)(a7 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a7 + 8) + 64)) & 0x7FFFFFFF8) != 0)
  {
    v447 = 0;
    v438 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v439 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v436 = *MEMORY[0x1E0DE4F50];
    v40 = "_";
    v435 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    do
    {
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(a7);
      v41 = *(_QWORD *)(a7 + 8);
      v42 = *(_QWORD *)(v41 + 64);
      v43 = *(_QWORD *)(v42 + 8 * (int)v447);
      v44 = *(_QWORD *)(v43 + 48);
      if (*(_QWORD *)(v43 + 56) == v44)
      {
        a7 = v433;
      }
      else
      {
        v45 = 0;
        do
        {
          v46 = (__int128 *)(v44 + 48 * v45);
          v534 = *v46;
          v536 = 0;
          v537 = 0;
          v535 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, *((const void **)v46 + 2), *((_QWORD *)v46 + 3), (uint64_t)(*((_QWORD *)v46 + 3) - *((_QWORD *)v46 + 2)) >> 2);
          v538 = *(_DWORD *)(v44 + 48 * v45 + 40);
          kaldi::quasar::ProcessArc((int)v447, a2, (uint64_t)&v534, (uint64_t *)&v583, &v564, a6, a8, (uint64_t)v544);
          v47 = v576;
          if ((unint64_t)v576 >= v577)
          {
            v51 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(&v575, (uint64_t)v544);
          }
          else
          {
            *v576 = v544[0];
            v48 = v544[1];
            v49 = v544[2];
            v50 = v545[0];
            *(_OWORD *)((char *)v47 + 60) = *(_OWORD *)((char *)v545 + 12);
            v47[2] = v49;
            v47[3] = v50;
            v47[1] = v48;
            *((_QWORD *)v47 + 11) = 0;
            *((_QWORD *)v47 + 12) = 0;
            *((_QWORD *)v47 + 10) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v47 + 10, v546, (uint64_t)v547, (v547 - (_BYTE *)v546) >> 2);
            v51 = (uint64_t)v47 + 104;
          }
          v576 = (_OWORD *)v51;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__x);
          v52 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v40, 1);
          v53 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v40, 1);
          std::ostream::operator<<();
          *(_QWORD *)&v522 = 0;
          v54 = 0x100000000;
          if (!__CFADD__(HIDWORD(v534), DWORD2(v534)))
            v54 = 0;
          v55 = v54 | (HIDWORD(v534) + DWORD2(v534));
          v56 = (int *)v535;
          if (v536 != v535)
          {
            v57 = ((char *)v536 - (_BYTE *)v535) >> 2;
            if (v57 <= 1)
              v57 = 1;
            v58 = 6967;
            do
            {
              v59 = *v56++;
              v55 += v58 * v59;
              v58 *= 7499;
              --v57;
            }
            while (v57);
          }
          std::stringbuf::str();
          v60 = v40;
          v61 = HIBYTE(v530);
          if (SHIBYTE(v530) < 0)
            v61 = *((_QWORD *)&__p + 1);
          p_p = (char *)&__p;
          if (SHIBYTE(v530) < 0)
            p_p = (char *)__p;
          for (i = 0; v61; --v61)
          {
            v64 = *p_p++;
            i = v64 + 7853 * i;
          }
          if (SHIBYTE(v530) < 0)
            operator delete((void *)__p);
          *(_QWORD *)&v522 = i + v55;
          *(_QWORD *)&__p = &v522;
          if (*((_WORD *)std::__hash_table<std::__hash_value_type<unsigned long,short>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,short>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,short>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,short>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v578, (unint64_t *)&v522, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 12) == 1)kaldi::quasar::AddCandidateToMap(&v579, (uint64_t)&v534, (uint64_t)v544, &v565, (uint64_t)v573);
          __x.__r_.__value_.__r.__words[0] = v436;
          *(std::string::size_type *)((char *)__x.__r_.__value_.__r.__words + *(_QWORD *)(v436 - 24)) = v439;
          __x.__r_.__value_.__r.__words[2] = v438;
          v556 = v435;
          if (v561 < 0)
            operator delete(v560);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1AF44D094](&v562);
          v40 = v60;
          if (v546)
          {
            v547 = v546;
            operator delete(v546);
          }
          if (v535)
          {
            v536 = (void **)v535;
            operator delete(v535);
          }
          ++v45;
          v44 = *(_QWORD *)(v43 + 48);
        }
        while (v45 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v43 + 56) - v44) >> 4));
        a7 = v433;
        v41 = *(_QWORD *)(v433 + 8);
        v42 = *(_QWORD *)(v41 + 64);
      }
      v447 = (kaldi::quasar::WordConf *)((char *)v447 + 1);
    }
    while ((unint64_t)v447 < (int)((unint64_t)(*(_QWORD *)(v41 + 72) - v42) >> 3));
    v65 = v565;
  }
  else
  {
    v65 = 0;
  }
  if (v65 < v31)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Needed to find ", 15);
    v432 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v432, (uint64_t)" actually only found ", 21);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__x);
  }
  v554 = 0;
  v552 = 0;
  v551 = 0;
  v553 = 0;
  v549 = 0;
  v548 = 0;
  v550 = 0;
  kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)v544);
  memset(v543, 0, sizeof(v543));
  if (v585 == v584)
  {
    v79 = kaldi::g_kaldi_verbose_level;
    v80 = v448;
    v81 = v434;
    goto LABEL_87;
  }
  v66 = 0;
  do
  {
    kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&v534);
    kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&__p);
    LODWORD(__x.__r_.__value_.__l.__data_) = v66;
    *(_QWORD *)&v503 = &__x;
    v67 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v503);
    *(_QWORD *)&v503 = (char *)v584 + 4 * v66;
    v68 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v67 + 3), (int *)v503, (uint64_t)&std::piecewise_construct, (_DWORD **)&v503);
    v69 = *(_OWORD *)(v68 + 7);
    v523 = *(_OWORD *)(v68 + 5);
    v524 = v69;
    v525[0] = *(_OWORD *)(v68 + 9);
    *(_OWORD *)((char *)v525 + 12) = *(_OWORD *)((char *)v68 + 84);
    v522 = *(_OWORD *)(v68 + 3);
    v527 = 0;
    v528 = 0;
    v526 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v526, (const void *)v68[13], v68[14], (uint64_t)(v68[14] - v68[13]) >> 2);
    v70 = *((_DWORD *)v584 + v66);
    if (DWORD1(v522))
    {
      if (!v70)
        goto LABEL_80;
    }
    else if (v70 | a15)
    {
      goto LABEL_80;
    }
    if ((_DWORD)v522 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Couldn't find arc", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__x);
    }
    v71 = v566[0];
    v521 = 0;
    v519 = 0;
    v520 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v519, v595, v596, (v596 - (uint64_t)v595) >> 2);
    if (*(char *)(v434 + 23) < 0)
      std::string::__init_copy_ctor_external(&v518, *(const std::string::value_type **)v434, *(_QWORD *)(v434 + 8));
    else
      v518 = *(std::string *)v434;
    kaldi::quasar::GetCandidateFeatures(v448, &v575, v71 + 104 * v66, a8, (float **)&v519, &v518, 1, (int *)&v554 + 1, &v554, (uint64_t)v544, v543, (uint64_t)&v534, (uint64_t)&__p, (uint64_t)&v522);
    if (SHIBYTE(v518.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v518.__r_.__value_.__l.__data_);
    if (v519)
    {
      v520 = v519;
      operator delete(v519);
    }
    v72 = v552;
    if ((unint64_t)v552 >= v553)
    {
      v73 = (std::string *)std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>((uint64_t *)&v551, (const kaldi::quasar::WordConf *)&v534);
    }
    else
    {
      kaldi::quasar::WordConf::WordConf(v552, (const kaldi::quasar::WordConf *)&v534);
      v73 = v72 + 11;
    }
    v552 = v73;
    v74 = v549;
    if ((unint64_t)v549 >= v550)
    {
      v78 = std::vector<kaldi::ChosenArc>::__push_back_slow_path<kaldi::ChosenArc const&>(&v548, (uint64_t)&v522);
    }
    else
    {
      *v549 = v522;
      v75 = v523;
      v76 = v524;
      v77 = v525[0];
      *(_OWORD *)((char *)v74 + 60) = *(_OWORD *)((char *)v525 + 12);
      v74[2] = v76;
      v74[3] = v77;
      v74[1] = v75;
      *((_QWORD *)v74 + 11) = 0;
      *((_QWORD *)v74 + 12) = 0;
      *((_QWORD *)v74 + 10) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v74 + 10, v526, (uint64_t)v527, (v527 - (_BYTE *)v526) >> 2);
      v78 = (uint64_t)v74 + 104;
    }
    v549 = (_OWORD *)v78;
LABEL_80:
    if (v526)
    {
      v527 = v526;
      operator delete(v526);
    }
    kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&__p);
    kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v534);
    ++v66;
  }
  while (v66 < (v585 - (_BYTE *)v584) >> 2);
  v79 = kaldi::g_kaldi_verbose_level;
  v80 = v448;
  v81 = v434;
  if ((_DWORD)v554 != HIDWORD(v554) && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Warning: MISMATCH BETWEEN LENGTH OF 1-BEST and LENGTH OF CONFIDENCE VECTOR", 74);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__x);
    v79 = kaldi::g_kaldi_verbose_level;
  }
LABEL_87:
  if (v79 >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Finished generating 1-best word-level confidence features for ", 62);
    v82 = (_QWORD *)std::ostream::operator<<();
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" words in utterance ", 20);
    v84 = *(char *)(v81 + 23);
    if (v84 >= 0)
      v85 = v81;
    else
      v85 = *(_QWORD *)v81;
    if (v84 >= 0)
      v86 = *(unsigned __int8 *)(v81 + 23);
    else
      v86 = *(_QWORD *)(v81 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, v85, v86);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
  }
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a9, (unsigned __int8 *)v81);
  v88 = (unsigned __int8 *)v81;
  v89 = v87;
  v90 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a10, v88);
  kaldi::quasar::WordConf::NormaliseUttScores((uint64_t)v544, (float *)v89 + 10, (float *)v90 + 10);
  v516 = 0;
  v515 = 0;
  v517 = 0;
  v93 = v551;
  if (v552 == v551)
  {
    v160 = 0;
    v159 = 0;
  }
  else
  {
    v94 = 0;
    do
    {
      v513 = 0;
      v512 = 0;
      v514 = 0;
      v510 = 0;
      v509 = 0;
      v511 = 0;
      kaldi::quasar::ComputeTimeBasedPosterior((int)(float)(*(float *)v93[11 * v94 + 7].__r_.__value_.__l.__data_ * (float)(1000.0 / *(float *)(v80 + 12))), (int)(float)((float)(1000.0 / *(float *)(v80 + 12))* (float)(*(float *)v93[11 * v94 + 7].__r_.__value_.__l.__data_+ *(float *)(v93[11 * v94 + 7].__r_.__value_.__r.__words[0] + 4))), v91, a6, v548 + 104 * v94);
      kaldi::quasar::WordConf::AddUttFeatures((uint64_t)&v551[11 * v94], (uint64_t)v544);
      v95 = (_DWORD *)(v548 + 104 * v94);
      v96 = &v551[11 * v94];
      data = v96[7].__r_.__value_.__l.__data_;
      data[66] = v95[10];
      data[67] = v95[11];
      data[68] = v95[12];
      data[82] = 1118044160;
      v98 = v95[17];
      LODWORD(v96[8].__r_.__value_.__r.__words[1]) = v98;
      data[84] = v98;
      v507 = 0;
      v506 = 0;
      v508 = 0;
      v503 = 0u;
      *(_OWORD *)v504 = 0u;
      v505 = 1065353216;
      *(_OWORD *)__src = 0u;
      v501 = 0u;
      v502 = 1065353216;
      v99 = v513;
      if ((unint64_t)v513 >= v514)
      {
        v100 = (std::string *)std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>((uint64_t *)&v512, (const kaldi::quasar::WordConf *)v96);
      }
      else
      {
        kaldi::quasar::WordConf::WordConf(v513, (const kaldi::quasar::WordConf *)v96);
        v100 = v99 + 11;
      }
      v513 = v100;
      if (*(_QWORD *)(v543[0] + 24 * v94 + 8) != *(_QWORD *)(v543[0] + 24 * v94))
      {
        v101 = 0;
        do
        {
          LODWORD(__x.__r_.__value_.__l.__data_) = v94;
          *(_QWORD *)&v534 = &__x;
          v102 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v534);
          v103 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v102 + 3, (int *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101 + 4));
          if (*(_DWORD *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101 + 4) != LODWORD(v551[11 * v94 + 6].__r_.__value_.__l.__data_)
            && *(_BYTE *)(v80 + 2) != 0)
          {
            v105 = v103;
            LODWORD(__x.__r_.__value_.__l.__data_) = v94;
            *(_QWORD *)&v534 = &__x;
            std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v534);
            if (v105)
            {
              v106 = *(_OWORD *)(v105 + 7);
              v523 = *(_OWORD *)(v105 + 5);
              v524 = v106;
              v525[0] = *(_OWORD *)(v105 + 9);
              *(_OWORD *)((char *)v525 + 12) = *(_OWORD *)((char *)v105 + 84);
              v522 = *(_OWORD *)(v105 + 3);
              v527 = 0;
              v528 = 0;
              v526 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v526, (const void *)v105[13], v105[14], (v105[14] - v105[13]) >> 2);
              kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&v534);
              kaldi::quasar::WordConf::WordConf((kaldi::quasar::WordConf *)&__p);
              v498 = 0;
              v497 = 0;
              v499 = 0;
              v107 = v582[0] + 24 * v94;
              v109 = *(_DWORD **)v107;
              v108 = *(_DWORD **)(v107 + 8);
              if (v109 != v108)
              {
                while (*v109 != *(_DWORD *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101 + 4))
                {
                  v109 += 2;
                  if (v109 == v108)
                  {
                    v109 = v108;
                    break;
                  }
                }
              }
              v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v499, 1uLL);
              v112 = v111;
              v113 = (char *)v498;
              v114 = (char *)v497;
              *(_DWORD *)v110 = v109[1];
              v115 = (uint64_t)(v110 + 4);
              v116 = v110;
              while (v113 != v114)
              {
                v117 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              v497 = v116;
              v498 = (uint64_t)(v110 + 4);
              v499 = &v110[4 * v112];
              if (v114)
              {
                operator delete(v114);
                v116 = (char *)v497;
              }
              v498 = v115;
              v118 = *(_QWORD *)(v543[0] + 24 * v94);
              v496 = 0;
              v495 = 0;
              v494 = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v494, v116, v115, (v115 - (uint64_t)v116) >> 2);
              v80 = v448;
              if (*(char *)(v434 + 23) < 0)
                std::string::__init_copy_ctor_external(&v493, *(const std::string::value_type **)v434, *(_QWORD *)(v434 + 8));
              else
                v493 = *(std::string *)v434;
              kaldi::quasar::GetCandidateFeatures(v448, &v575, v118 + 104 * v101, a8, (float **)&v494, &v493, 0, (int *)&v554 + 1, &v554, (uint64_t)v544, v543, (uint64_t)&v534, (uint64_t)&__p, (uint64_t)&v522);
              if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v493.__r_.__value_.__l.__data_);
              if (v494)
              {
                v495 = v494;
                operator delete(v494);
              }
              *(_DWORD *)(v541 + 88) = v109[1];
              kaldi::quasar::WordConf::AddUttFeatures((uint64_t)&v534, (uint64_t)v544);
              kaldi::quasar::WordConf::SetOneBestFeatures((uint64_t)&v534, (uint64_t)&v551[11 * v94]);
              kaldi::quasar::GenSausageStructFeats(v448, (const kaldi::quasar::WordConf *)&v534, (_DWORD *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101), (kaldi::quasar::WordConf *)&v551[11 * v94], v548 + 104 * v94, a8);
              kaldi::quasar::ComputeTimeBasedPosterior((int)(float)(*(float *)v551[11 * v94 + 7].__r_.__value_.__l.__data_* (float)(1000.0 / *(float *)(v448 + 12))), (int)(float)((float)(1000.0 / *(float *)(v448 + 12))* (float)(*(float *)v551[11 * v94 + 7].__r_.__value_.__l.__data_+ *(float *)(v551[11 * v94 + 7].__r_.__value_.__r.__words[0] + 4))), v119, a6, *(_QWORD *)(v543[0] + 24 * v94) + 104 * v101);
              v120 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v503, v540);
              if (v120)
              {
                v121 = *((float *)v120 + 5);
                v122 = *(_QWORD *)(v543[0] + 24 * v94);
                v123 = *(float *)(v122 + 104 * v101 + 68);
                if (v121 < v123)
                {
                  v124 = (float *)v506;
                  if (v506 == v507)
                  {
                    v126 = (float *)v506;
                  }
                  else
                  {
                    v125 = *(_DWORD *)(v122 + 104 * v101 + 4);
                    v126 = (float *)v506;
                    while (*(_DWORD *)v126 != v125 || v126[1] != v121)
                    {
                      v126 += 2;
                      if (v126 == v507)
                      {
                        v126 = v507;
                        break;
                      }
                    }
                  }
                  if (kaldi::g_kaldi_verbose_level >= 3)
                  {
                    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
                    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Candidate Update: ", 18);
                    if ((v539 & 0x80u) == 0)
                      v143 = (void **)&v536;
                    else
                      v143 = v536;
                    if ((v539 & 0x80u) == 0)
                      v144 = v539;
                    else
                      v144 = v537;
                    v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v143, v144);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" from ", 6);
                    v477 = v540;
                    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v503, v540, (uint64_t)&std::piecewise_construct, &v477);
                    v146 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)" to ", 4);
                    std::ostream::operator<<();
                    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
                    v123 = *(float *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101 + 68);
                  }
                  v124[2 * (((char *)v126 - (char *)v124) >> 3) + 1] = v123;
                  v477 = v540;
                  v80 = v448;
                  *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v503, v540, (uint64_t)&std::piecewise_construct, &v477)+ 5) = v123;
                  v147 = *(_QWORD *)(v543[0] + 24 * v94) + 104 * v101;
                  *(_DWORD *)(v541 + 332) = *(_DWORD *)(v147 + 68);
                  v542 = *(_DWORD *)(v147 + 68);
                  v477 = v540;
                  v148 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__src, v540, (uint64_t)&std::piecewise_construct, &v477);
                  kaldi::quasar::WordConf::operator=((uint64_t)v512 + 264 * *((int *)v148 + 5), (uint64_t)&v534);
                }
              }
              else
              {
                if (kaldi::g_kaldi_verbose_level >= 3)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
                  v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Add Candidate: ", 15);
                  if ((v539 & 0x80u) == 0)
                    v129 = (void **)&v536;
                  else
                    v129 = v536;
                  if ((v539 & 0x80u) == 0)
                    v130 = v539;
                  else
                    v130 = v537;
                  v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)v129, v130);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" to candidate/confusion set", 27);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
                }
                v132 = v540[0];
                v133 = *(_DWORD *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101 + 68);
                v134 = v507;
                if (v507 >= (float *)v508)
                {
                  v136 = (float *)v506;
                  v137 = ((char *)v507 - (_BYTE *)v506) >> 3;
                  v138 = v137 + 1;
                  if ((unint64_t)(v137 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v139 = v508 - (_BYTE *)v506;
                  if ((v508 - (_BYTE *)v506) >> 2 > v138)
                    v138 = v139 >> 2;
                  if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
                    v140 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v140 = v138;
                  if (v140)
                  {
                    v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v508, v140);
                    v134 = v507;
                    v136 = (float *)v506;
                  }
                  else
                  {
                    v141 = 0;
                  }
                  v149 = (int *)&v141[8 * v137];
                  *v149 = v132;
                  v149[1] = v133;
                  v150 = v149;
                  if (v134 != v136)
                  {
                    do
                    {
                      v151 = *((_QWORD *)v134 - 1);
                      v134 -= 2;
                      *((_QWORD *)v150 - 1) = v151;
                      v150 -= 2;
                    }
                    while (v134 != v136);
                    v136 = (float *)v506;
                  }
                  v135 = (float *)(v149 + 2);
                  v506 = v150;
                  v507 = (float *)(v149 + 2);
                  v508 = &v141[8 * v140];
                  if (v136)
                    operator delete(v136);
                }
                else
                {
                  *v507 = *(float *)v540;
                  *((_DWORD *)v134 + 1) = v133;
                  v135 = v134 + 2;
                }
                v507 = v135;
                v152 = *(_DWORD *)(*(_QWORD *)(v543[0] + 24 * v94) + 104 * v101 + 68);
                v477 = v540;
                *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v503, v540, (uint64_t)&std::piecewise_construct, &v477)+ 5) = v152;
                v153 = *(_QWORD *)(v543[0] + 24 * v94) + 104 * v101;
                *(_DWORD *)(v541 + 332) = *(_DWORD *)(v153 + 68);
                v542 = *(_DWORD *)(v153 + 68);
                v154 = v513;
                if ((unint64_t)v513 >= v514)
                {
                  v155 = (std::string *)std::vector<kaldi::quasar::WordConf>::__push_back_slow_path<kaldi::quasar::WordConf const&>((uint64_t *)&v512, (const kaldi::quasar::WordConf *)&v534);
                }
                else
                {
                  kaldi::quasar::WordConf::WordConf(v513, (const kaldi::quasar::WordConf *)&v534);
                  v155 = v154 + 11;
                }
                v513 = v155;
                v156 = v512;
                v477 = v540;
                *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__src, v540, (uint64_t)&std::piecewise_construct, &v477)+ 5) = 1041204193 * ((unint64_t)((char *)v155 - v156) >> 3) - 1;
              }
              if (v497)
              {
                v498 = (uint64_t)v497;
                operator delete(v497);
              }
              kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&__p);
              kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&v534);
              if (v526)
              {
                v527 = v526;
                operator delete(v526);
              }
            }
          }
          ++v101;
        }
        while (v101 < 0x4EC4EC4EC4EC4EC5
                     * ((uint64_t)(*(_QWORD *)(v543[0] + 24 * v94 + 8) - *(_QWORD *)(v543[0] + 24 * v94)) >> 3));
      }
      v157 = v516;
      if ((unint64_t)v516 >= v517)
      {
        v158 = std::vector<std::vector<kaldi::quasar::WordConf>>::__push_back_slow_path<std::vector<kaldi::quasar::WordConf> const&>((uint64_t *)&v515, (uint64_t *)&v512);
      }
      else
      {
        *v516 = 0;
        v157[1] = 0;
        v157[2] = 0;
        std::vector<kaldi::quasar::WordConf>::__init_with_size[abi:ne180100]<kaldi::quasar::WordConf*,kaldi::quasar::WordConf*>(v157, (uint64_t)v512, (uint64_t)v513, 0xF83E0F83E0F83E1 * (((char *)v513 - (_BYTE *)v512) >> 3));
        v158 = (uint64_t)(v157 + 3);
      }
      v516 = (_QWORD *)v158;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__src);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v503);
      if (v506)
      {
        v507 = (float *)v506;
        operator delete(v506);
      }
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
      std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v512;
      std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
      ++v94;
      v93 = v551;
    }
    while (v94 < 0xF83E0F83E0F83E1 * (((char *)v552 - (char *)v551) >> 3));
    v159 = v516;
    v160 = (uint64_t)v515;
  }
  v513 = 0;
  v512 = 0;
  v514 = 0;
  v510 = 0;
  v509 = 0;
  v511 = 0;
  v507 = 0;
  v506 = 0;
  v508 = 0;
  if (v159 != (_QWORD *)v160)
  {
    for (j = 0; j < 0xAAAAAAAAAAAAAAABLL * (v516 - v515); ++j)
    {
      v163 = (int **)(v160 + 24 * j);
      v164 = *v163;
      v165 = 0xF83E0F83E0F83E1 * (((char *)v163[1] - (char *)*v163) >> 3);
      v166 = (float32x2_t *)*((_QWORD *)*v163 + 21);
      v166[42].f32[1] = (float)v165;
      v166[46] = (float32x2_t)0x3F80000000000000;
      if (v165 >= 2)
      {
        v167 = v166[45].f32[0];
        v168 = v166[45].f32[1];
        v169 = v165 - 1;
        v170 = (float *)(v164 + 116);
        v171 = 0.0;
        v172 = 1.0;
        v173 = v169;
        do
        {
          v174 = (float *)*((_QWORD *)v170 - 4);
          v167 = v174[2] + v167;
          v166[45].f32[0] = v167;
          v175 = v174[3];
          if (v175 > v171)
          {
            v166[46].f32[0] = v175;
            v171 = v175;
          }
          v176 = v174[4];
          if (v176 < v172)
          {
            v166[46].f32[1] = v176;
            v172 = v176;
          }
          v168 = *v170 + v168;
          v166[45].f32[1] = v168;
          v170 += 66;
          --v173;
        }
        while (v173);
        *(float *)v92.i32 = (float)v169;
        v92 = (int32x2_t)vdiv_f32(v166[45], (float32x2_t)vdup_lane_s32(v92, 0));
        v166[45] = (float32x2_t)v92;
      }
      if (v164[36] <= 499999999)
        v177 = 0.0;
      else
        v177 = 1.0;
      v166[48].f32[1] = v177;
      v166[50].i32[0] = 1065353216;
      if (*(_BYTE *)v80)
      {
        kaldi::quasar::WordConf::ApplyModel((kaldi::quasar::WordConf *)v164, a11);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Confidence score @ word ", 24);
          v178 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)" is ", 4);
          v179 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)" MBR SCORE IS ", 14);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
        }
      }
      else
      {
        if (*(_BYTE *)(v80 + 7))
          v180 = v164[50];
        else
          v180 = v166[11].i32[0];
        v164[48] = v180;
      }
      v181 = (uint64_t)v515;
      v182 = &v515[3 * j];
      v184 = *v182;
      v183 = v182[1];
      v185 = *(float *)(v184 + 192);
      v186 = *(_DWORD *)(v184 + 144) == a15;
      v187 = 0xF83E0F83E0F83E1 * ((v183 - v184) >> 3);
      if (v187 < 2)
      {
        v190 = *(float *)(v184 + 192);
      }
      else
      {
        v188 = 456;
        v189 = 1;
        v190 = *(float *)(v184 + 192);
        do
        {
          if (*(_BYTE *)(v448 + 5))
          {
            kaldi::quasar::ProcessConfusions(j, v189, (uint64_t *)&v515);
            v181 = (uint64_t)v515;
          }
          v191 = *(_QWORD *)(v181 + 24 * j);
          v192 = v191 + v188;
          v193 = *(_DWORD **)(v191 + v188 - 24);
          v193[97] = 0;
          v194 = *(_DWORD *)(v191 + v188 - 48);
          v195 = *(_QWORD *)(v191 + 168);
          if (v194 > 499999999)
          {
            *(_DWORD *)(v195 + 396) = 1065353216;
            v193[97] = 1065353216;
          }
          v193[98] = *(_DWORD *)(v195 + 388);
          v193[100] = 0;
          kaldi::quasar::WordConf::ApplyModel((kaldi::quasar::WordConf *)(v192 - 192), a12);
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Confidence score @ alt word ", 28);
            v196 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)" is ", 4);
            v197 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)" MBR SCORE IS ", 14);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
          }
          v181 = (uint64_t)v515;
          v198 = &v515[3 * j];
          v184 = *v198;
          v183 = v198[1];
          v199 = *(float *)(v184 + v188);
          v185 = v185 + v199;
          v186 |= *(_DWORD *)(v184 + v188 - 48) == 0;
          if (v199 > v190)
            v190 = *(float *)(v184 + v188);
          ++v189;
          v187 = 0xF83E0F83E0F83E1 * ((v183 - v184) >> 3);
          v188 += 264;
        }
        while (v189 < v187);
      }
      *(_DWORD *)(*(_QWORD *)(v184 + 168) + 404) = 0;
      v200 = v183;
      if (v183 != v184)
      {
        v201 = 0;
        v202 = 0;
        do
        {
          LODWORD(__x.__r_.__value_.__l.__data_) = j;
          *(_QWORD *)&v534 = &__x;
          v203 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&v534);
          *(_QWORD *)&v534 = v515[3 * j] + v201 + 144;
          v204 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v203 + 3), (int *)v534, (uint64_t)&std::piecewise_construct, (_DWORD **)&v534);
          v206 = v515[3 * j];
          v207 = (char *)(v206 + v201 + 216);
          if (v207 != (char *)(v204 + 13))
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v207, (char *)v204[13], v204[14], (uint64_t)(v204[14] - v204[13]) >> 2);
            v206 = v515[3 * j];
          }
          kaldi::quasar::WordConf::ComputePhonesAndDurations((kaldi::quasar::WordConf *)(v206 + v201), v205, a3, a4);
          v181 = (uint64_t)v515;
          v183 = v515[3 * j];
          if (v202)
          {
            v208 = kaldi::LevenshteinEditDistance<std::string>((uint64_t *)(v183 + 240), (uint64_t *)(v183 + 240 + v201));
            v181 = (uint64_t)v515;
            v183 = v515[3 * j];
            *(float *)(*(_QWORD *)(v183 + v201 + 168) + 404) = (float)v208;
          }
          ++v202;
          v200 = *(_QWORD *)(v181 + 24 * j + 8);
          v187 = 0xF83E0F83E0F83E1 * ((v200 - v183) >> 3);
          v201 += 264;
        }
        while (v202 < v187);
      }
      if (v187 < 2)
      {
        *(_DWORD *)(*(_QWORD *)(v183 + 168) + 408) = 0;
      }
      else if (v200 != v183)
      {
        v209 = 0;
        do
        {
          if (v200 == v183)
          {
            v212 = 0x7FFFFFFF;
            v200 = v183;
            v214 = v183;
          }
          else
          {
            v210 = a12;
            v211 = 0;
            v212 = 0x7FFFFFFF;
            v213 = 240;
            v214 = v183;
            do
            {
              if (v209 != v211)
              {
                v215 = kaldi::LevenshteinEditDistance<std::string>((uint64_t *)(v214 + 264 * v209 + 240), (uint64_t *)(v214 + v213));
                if (v215 < v212)
                  v212 = v215;
                v181 = (uint64_t)v515;
              }
              ++v211;
              v216 = (uint64_t *)(v181 + 24 * j);
              v214 = *v216;
              v213 += 264;
            }
            while (v211 < 0xF83E0F83E0F83E1 * ((v216[1] - *v216) >> 3));
            v183 = *(_QWORD *)(v181 + 24 * j);
            v200 = *(_QWORD *)(v181 + 24 * j + 8);
            a12 = v210;
          }
          *(float *)(*(_QWORD *)(v214 + 264 * v209++ + 168) + 408) = (float)v212;
        }
        while (v209 < 0xF83E0F83E0F83E1 * ((v200 - v183) >> 3));
      }
      v80 = v448;
      v217 = -1.0;
      if (!(v186 & 1 | (*(_BYTE *)(v448 + 8) == 0)))
      {
        kaldi::quasar::WordConf::WordConf(&__x, *(const kaldi::quasar::WordConf **)(v181 + 24 * j));
        kaldi::quasar::WordConf::ApplyModel((kaldi::quasar::WordConf *)&__x, a13);
        v217 = v563;
        if (v563 > v190)
          v190 = v563;
        v185 = v185 + v563;
        kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&__x);
      }
      if (*(_BYTE *)(v448 + 9))
      {
        v218 = v513;
        if ((unint64_t)v513 >= v514)
        {
          v223 = (std::string *)v512;
          v224 = ((char *)v513 - (_BYTE *)v512) >> 2;
          v225 = v224 + 1;
          if ((unint64_t)(v224 + 1) >> 62)
            goto LABEL_596;
          v226 = v514 - (_QWORD)v512;
          if ((uint64_t)(v514 - (_QWORD)v512) >> 1 > v225)
            v225 = v226 >> 1;
          if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFFCLL)
            v227 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v227 = v225;
          if (v227)
          {
            v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v514, v227);
            v218 = v513;
            v223 = (std::string *)v512;
          }
          else
          {
            v228 = 0;
          }
          v232 = (float *)&v228[4 * v224];
          if (v185 == 0.0)
            v233 = 0.000001;
          else
            v233 = v185;
          *v232 = v233;
          v222 = (std::string *)(v232 + 1);
          while (v218 != v223)
          {
            v234 = HIDWORD(v218[-1].__r_.__value_.__r.__words[2]);
            v218 = (std::string *)((char *)v218 - 4);
            *((_DWORD *)v232-- - 1) = v234;
          }
          goto LABEL_279;
        }
        if (v185 == 0.0)
          v219 = 0.000001;
        else
          v219 = v185;
        *(float *)&v513->__r_.__value_.__l.__data_ = v219;
        v220 = (std::string *)((char *)v218->__r_.__value_.__r.__words + 4);
      }
      else
      {
        v221 = v513;
        if ((unint64_t)v513 >= v514)
        {
          v223 = (std::string *)v512;
          v229 = ((char *)v513 - (_BYTE *)v512) >> 2;
          v230 = v229 + 1;
          if ((unint64_t)(v229 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v231 = v514 - (_QWORD)v512;
          if ((uint64_t)(v514 - (_QWORD)v512) >> 1 > v230)
            v230 = v231 >> 1;
          if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
            v227 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v227 = v230;
          if (v227)
          {
            v228 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v514, v227);
            v221 = v513;
            v223 = (std::string *)v512;
          }
          else
          {
            v228 = 0;
          }
          v232 = (float *)&v228[4 * v229];
          *v232 = 1.0;
          v222 = (std::string *)(v232 + 1);
          while (v221 != v223)
          {
            v235 = HIDWORD(v221[-1].__r_.__value_.__r.__words[2]);
            v221 = (std::string *)((char *)v221 - 4);
            *((_DWORD *)v232-- - 1) = v235;
          }
LABEL_279:
          v512 = v232;
          v513 = v222;
          v514 = (unint64_t)&v228[4 * v227];
          if (v223)
            operator delete(v223);
          goto LABEL_281;
        }
        LODWORD(v513->__r_.__value_.__l.__data_) = 1065353216;
        v220 = (std::string *)((char *)v221->__r_.__value_.__r.__words + 4);
      }
      v222 = v220;
LABEL_281:
      v513 = v222;
      v236 = v507;
      if (v507 >= (float *)v508)
      {
        v238 = (float *)v506;
        v239 = ((char *)v507 - (_BYTE *)v506) >> 2;
        v240 = v239 + 1;
        if ((unint64_t)(v239 + 1) >> 62)
          goto LABEL_596;
        v241 = v508 - (_BYTE *)v506;
        if ((v508 - (_BYTE *)v506) >> 1 > v240)
          v240 = v241 >> 1;
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL)
          v242 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v242 = v240;
        if (v242)
        {
          v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v508, v242);
          v236 = v507;
          v238 = (float *)v506;
        }
        else
        {
          v243 = 0;
        }
        v244 = (float *)&v243[4 * v239];
        *v244 = v190;
        v237 = v244 + 1;
        while (v236 != v238)
        {
          v245 = *((_DWORD *)v236-- - 1);
          *((_DWORD *)v244-- - 1) = v245;
        }
        v506 = v244;
        v507 = v237;
        v508 = &v243[4 * v242];
        if (v238)
          operator delete(v238);
      }
      else
      {
        *v507 = v190;
        v237 = v236 + 1;
      }
      v507 = v237;
      v246 = v510;
      if (v510 >= v511)
      {
        v248 = (char *)v509;
        v249 = (v510 - (_BYTE *)v509) >> 2;
        v250 = v249 + 1;
        if ((unint64_t)(v249 + 1) >> 62)
LABEL_596:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v251 = v511 - (_BYTE *)v509;
        if ((v511 - (_BYTE *)v509) >> 1 > v250)
          v250 = v251 >> 1;
        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
          v252 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v252 = v250;
        if (v252)
        {
          v253 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v511, v252);
          v246 = v510;
          v248 = (char *)v509;
        }
        else
        {
          v253 = 0;
        }
        v254 = (float *)&v253[4 * v249];
        *v254 = v217;
        v247 = (char *)(v254 + 1);
        while (v246 != v248)
        {
          v255 = *((_DWORD *)v246 - 1);
          v246 -= 4;
          *((_DWORD *)v254-- - 1) = v255;
        }
        v509 = v254;
        v510 = v247;
        v511 = &v253[4 * v252];
        if (v248)
          operator delete(v248);
      }
      else
      {
        *(float *)v510 = v217;
        v247 = v246 + 4;
      }
      v510 = v247;
      v160 = (uint64_t)v515;
    }
  }
  v256 = *(_QWORD *)(v433 + 8);
  ++*(_DWORD *)(v256 + 56);
  v492 = v256;
  v491 = &unk_1E5D28AB0;
  if (((*(_QWORD *)(v256 + 72) - *(_QWORD *)(v256 + 64)) & 0x7FFFFFFF8) != 0)
  {
    v257 = 0;
    v258 = -1;
    do
    {
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v433);
      v259 = *(_QWORD *)(v433 + 8);
      v260 = *(_QWORD *)(v259 + 64);
      v261 = *(_QWORD *)(v260 + 8 * (int)v257);
      v262 = *(_QWORD *)(v261 + 48);
      if (*(_QWORD *)(v261 + 56) != v262)
      {
        v263 = 0;
        v264 = 0;
        do
        {
          v265 = v262 + v263;
          *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)(v262 + v263);
          v556 = 0;
          v557 = 0;
          __x.__r_.__value_.__r.__words[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__r.__words[2], *(const void **)(v262 + v263 + 16), *(_QWORD *)(v262 + v263 + 24), (uint64_t)(*(_QWORD *)(v262 + v263 + 24) - *(_QWORD *)(v262 + v263 + 16)) >> 2);
          LODWORD(v558) = *(_DWORD *)(v265 + 40);
          if (SHIDWORD(__x.__r_.__value_.__r.__words[0]) > v258)
            v258 = HIDWORD(__x.__r_.__value_.__r.__words[0]);
          if (__x.__r_.__value_.__r.__words[2])
          {
            v556 = (void *)__x.__r_.__value_.__r.__words[2];
            operator delete((void *)__x.__r_.__value_.__r.__words[2]);
          }
          ++v264;
          v262 = *(_QWORD *)(v261 + 48);
          v263 += 48;
        }
        while (v264 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v261 + 56) - v262) >> 4));
        v259 = *(_QWORD *)(v433 + 8);
        v260 = *(_QWORD *)(v259 + 64);
      }
      ++v257;
    }
    while (v257 < (int)((unint64_t)(*(_QWORD *)(v259 + 72) - v260) >> 3));
    v449 = v258 + 1;
    if (((*(_QWORD *)(v492 + 72) - *(_QWORD *)(v492 + 64)) & 0x7FFFFFFF8) != 0)
    {
      v266 = 0;
      do
      {
        *(_QWORD *)&__p = &unk_1E5D21420;
        v531 = 0;
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v491);
        v267 = v492;
        v268 = *(_QWORD *)(v492 + 64);
        *((_QWORD *)&__p + 1) = *(_QWORD *)(v268 + 8 * (int)v266);
        v530 = (void *)(v492 + 8);
        v269 = v531;
        v270 = *(_QWORD *)(*((_QWORD *)&__p + 1) + 48);
        if (v531 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)&__p + 1) + 56) - v270) >> 4))
        {
          do
          {
            v271 = v270 + 48 * v269;
            *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v271;
            v556 = 0;
            v557 = 0;
            __x.__r_.__value_.__r.__words[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__r.__words[2], *(const void **)(v271 + 16), *(_QWORD *)(v271 + 24), (uint64_t)(*(_QWORD *)(v271 + 24) - *(_QWORD *)(v271 + 16)) >> 2);
            LODWORD(v558) = *(_DWORD *)(v270 + 48 * v269 + 40);
            if (HIDWORD(__x.__r_.__value_.__r.__words[0]) == a15)
            {
              v534 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
              v536 = 0;
              v537 = 0;
              v535 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, (const void *)__x.__r_.__value_.__r.__words[2], (uint64_t)v556, (int64_t)((int64_t)v556 - __x.__r_.__value_.__r.__words[2]) >> 2);
              v538 = v558;
              DWORD1(v534) = v258 + 1;
              LODWORD(v534) = v258 + 1;
              fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&__p, (float *)&v534);
              v272 = v531;
              v273 = *(_QWORD *)(*((_QWORD *)&__p + 1) + 48);
              v274 = (std::string::size_type *)(v273 + 48 * v531);
              __x.__r_.__value_.__r.__words[0] = *v274;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&__x.__r_.__value_.__l.__size_, (uint64_t)(v274 + 1));
              LODWORD(v558) = *(_DWORD *)(v273 + 48 * v272 + 40);
              if (v535)
              {
                v536 = (void **)v535;
                operator delete(v535);
              }
            }
            if (__x.__r_.__value_.__r.__words[2])
            {
              v556 = (void *)__x.__r_.__value_.__r.__words[2];
              operator delete((void *)__x.__r_.__value_.__r.__words[2]);
            }
            v269 = v531 + 1;
            v531 = v269;
            v270 = *(_QWORD *)(*((_QWORD *)&__p + 1) + 48);
          }
          while (v269 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)&__p + 1) + 56) - v270) >> 4));
          v267 = v492;
          v268 = *(_QWORD *)(v492 + 64);
        }
        ++v266;
      }
      while (v266 < (int)((unint64_t)(*(_QWORD *)(v267 + 72) - v268) >> 3));
    }
  }
  else
  {
    v449 = 0;
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Using special symbol for silence = ", 35);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v489);
  v485 = vdup_n_s32(0x7F800000u);
  v488 = 0;
  v486 = 0;
  v487 = 0;
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v491, (uint64_t)&v489, a14, 0, 0, (uint64_t *)&v485, -1, 0);
  v275 = a19;
  if (v486)
  {
    v487 = v486;
    operator delete(v486);
    v275 = a19;
  }
  v276 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v275 + 200))(v275);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a19 + 176))(a19, v276);
  v277 = (*(uint64_t (**)(_QWORD *))(*a20 + 200))(a20);
  (*(void (**)(_QWORD *, uint64_t))(*a20 + 176))(a20, v277);
  v522 = 0u;
  v523 = 0u;
  LODWORD(v524) = 1065353216;
  v498 = 0;
  v497 = 0;
  v499 = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v503);
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(&v483);
  v278 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddState((uint64_t)&v483);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v483);
  v279 = v484;
  *((_DWORD *)v484 + 22) = v278;
  v280 = (*(uint64_t (**)(_QWORD *))(*v279 + 24))(v279);
  v279[1] = v280 & 0xCCFFFFF0007 | (((v280 >> 35) & 1) << 37) | v279[1] & 4;
  __x.__r_.__value_.__r.__words[0] = 0;
  LODWORD(__x.__r_.__value_.__r.__words[1]) = v503;
  *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)((char *)&v503 + 4);
  v558 = 0;
  v556 = 0;
  v557 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, v504[0], (uint64_t)v504[1], ((char *)v504[1] - (char *)v504[0]) >> 2);
  v559 = 1;
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v483);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v484, 0, (float *)&__x);
  if (v556)
  {
    v557 = v556;
    operator delete(v556);
  }
  v281 = (uint64_t)v515;
  if (v516 == v515)
  {
    v293 = 0xAAAAAAAAAAAAAAABLL * (v516 - v515);
  }
  else
  {
    v282 = 0;
    do
    {
      v284 = (uint64_t *)(v281 + 24 * v282);
      v283 = *v284;
      if (v284[1] != *v284)
      {
        v285 = 0;
        v286 = 0;
        do
        {
          v287 = v283 + v285;
          v288 = logf(*(float *)(v283 + v285 + 192) / *((float *)v512 + v282));
          v289 = *(_DWORD *)(v287 + 144);
          v290 = -v288;
          *(_QWORD *)&v534 = 0;
          if (v289 == a15)
            v291 = v449;
          else
            v291 = v289;
          *((float *)&v534 + 2) = -v288;
          v536 = 0;
          v537 = 0;
          v535 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, 0, 0, 0);
          if (!v286)
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddState((uint64_t)&v483);
          LODWORD(__x.__r_.__value_.__l.__data_) = v291;
          *(std::string::size_type *)((char *)__x.__r_.__value_.__r.__words + 4) = __PAIR64__(v534, v291);
          *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)((char *)&v534 + 4);
          v557 = 0;
          v558 = 0;
          v556 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, v535, (uint64_t)v536, ((char *)v536 - (_BYTE *)v535) >> 2);
          v559 = v282 + 1;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v483);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v484, v282, (float *)&__x);
          if (v556)
          {
            v557 = v556;
            operator delete(v556);
          }
          *(_QWORD *)&__p = 1065353216;
          *((float *)&__p + 2) = v290;
          v531 = 0;
          v532 = 0;
          v530 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v530, 0, 0, 0);
          LODWORD(__x.__r_.__value_.__l.__data_) = v291;
          *(std::string::size_type *)((char *)__x.__r_.__value_.__r.__words + 4) = __PAIR64__(__p, v291);
          *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)((char *)&__p + 4);
          v557 = 0;
          v558 = 0;
          v556 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, v530, v531, (uint64_t)(v531 - (_QWORD)v530) >> 2);
          v559 = v282;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v483);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v484, v282, (float *)&__x);
          if (v556)
          {
            v557 = v556;
            operator delete(v556);
          }
          LODWORD(__x.__r_.__value_.__l.__data_) = v291;
          *(std::string::size_type *)((char *)__x.__r_.__value_.__r.__words + 4) = __PAIR64__(__p, v291);
          *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)((char *)&__p + 4);
          v557 = 0;
          v558 = 0;
          v556 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, v530, v531, (uint64_t)(v531 - (_QWORD)v530) >> 2);
          v559 = v282 + 1;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v483);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v484, v282 + 1, (float *)&__x);
          if (v556)
          {
            v557 = v556;
            operator delete(v556);
          }
          if (v530)
          {
            v531 = (unint64_t)v530;
            operator delete(v530);
          }
          if (v535)
          {
            v536 = (void **)v535;
            operator delete(v535);
          }
          ++v286;
          v283 = v515[3 * v282];
          v285 += 264;
        }
        while (v286 < 0xF83E0F83E0F83E1 * ((v515[3 * v282 + 1] - v283) >> 3));
      }
      __x.__r_.__value_.__r.__words[0] = 0;
      LODWORD(__x.__r_.__value_.__r.__words[1]) = v503;
      *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)((char *)&v503 + 4);
      v557 = 0;
      v558 = 0;
      v556 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, v504[0], (uint64_t)v504[1], ((char *)v504[1] - (char *)v504[0]) >> 2);
      v292 = v282 + 1;
      v559 = v282 + 1;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v483);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v484, v282, (float *)&__x);
      if (v556)
      {
        v557 = v556;
        operator delete(v556);
      }
      v281 = (uint64_t)v515;
      v293 = 0xAAAAAAAAAAAAAAABLL * (v516 - v515);
      ++v282;
    }
    while (v292 < v293);
  }
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v480);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal((uint64_t)&v483, v293, v480);
  if (v481)
  {
    v482 = v481;
    operator delete(v481);
  }
  fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)&v483);
  v477 = 0;
  v478 = 0;
  v479 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v489, (uint64_t *)&v477);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v475);
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v473);
  v294 = v477;
  v437 = v478;
  if (v477 != v478)
  {
    v295 = 0;
    v296 = 0.0;
    while (1)
    {
      v452 = v295;
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(&v471);
      v297 = (*(uint64_t (**)(int *))(*(_QWORD *)v294 + 160))(v294);
      if (v297 >= 1)
      {
        for (k = 0; k != v297; ++k)
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddState((uint64_t)&v471);
      }
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v471);
      v299 = v472;
      *((_DWORD *)v472 + 22) = 0;
      v300 = (*(uint64_t (**)(_QWORD *))(*v299 + 24))(v299);
      v299[1] = (4 * v300) & 0x2000000000 | v300 & 0xCCFFFFF0007 | v299[1] & 4;
      v446 = v294;
      if (v297)
      {
        v301 = 0;
        v440 = v297;
        do
        {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)v294);
          v302 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v294 + 1) + 64) + 8 * (int)v301);
          (*(void (**)(void **__return_ptr, int *, uint64_t))(*(_QWORD *)v294 + 32))(__src, v294, v301);
          LODWORD(v534) = HIDWORD(__src[0]);
          LODWORD(__x.__r_.__value_.__l.__data_) = __src[0];
          LODWORD(__p) = 2139095040;
          LODWORD(v466) = 2139095040;
          if (*(float *)__src != INFINITY || *(float *)&v534 != *(float *)&v466 || (void *)v501 != __src[1])
          {
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v468);
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal((uint64_t)&v471, v301, v468);
            if (v469)
            {
              v470 = v469;
              operator delete(v469);
            }
          }
          v303 = *(_QWORD *)(v302 + 48);
          if (*(_QWORD *)(v302 + 56) != v303)
          {
            v304 = 0;
            v305 = 0;
            do
            {
              v306 = v303 + v304;
              v534 = *(_OWORD *)(v303 + v304);
              v536 = 0;
              v537 = 0;
              v535 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, *(const void **)(v303 + v304 + 16), *(_QWORD *)(v303 + v304 + 24), (uint64_t)(*(_QWORD *)(v303 + v304 + 24) - *(_QWORD *)(v303 + v304 + 16)) >> 2);
              v538 = *(_DWORD *)(v306 + 40);
              v307 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One();
              LODWORD(__p) = *(_DWORD *)v307;
              *(_QWORD *)((char *)&__p + 4) = *(_QWORD *)(v307 + 4);
              v531 = 0;
              v532 = 0;
              v530 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v530, v535, (uint64_t)v536, ((char *)v536 - (_BYTE *)v535) >> 2);
              LODWORD(v306) = v538;
              __x.__r_.__value_.__r.__words[0] = v534;
              LODWORD(__x.__r_.__value_.__r.__words[1]) = __p;
              *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)((char *)&__p + 4);
              v557 = 0;
              v558 = 0;
              v556 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, v530, v531, (uint64_t)(v531 - (_QWORD)v530) >> 2);
              v559 = v306;
              fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck((uint64_t)&v471);
              fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(v472, v301, (float *)&__x);
              if (v556)
              {
                v557 = v556;
                operator delete(v556);
              }
              if (v530)
              {
                v531 = (unint64_t)v530;
                operator delete(v530);
              }
              if (v535)
              {
                v536 = (void **)v535;
                operator delete(v535);
              }
              ++v305;
              v303 = *(_QWORD *)(v302 + 48);
              v304 += 48;
            }
            while (v305 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v302 + 56) - v303) >> 4));
          }
          if (__src[1])
          {
            *(void **)&v501 = __src[1];
            operator delete(__src[1]);
          }
          ++v301;
          v294 = v446;
        }
        while (v301 != v440);
      }
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(&v466);
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(&v464);
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(&v462);
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorFst(&v460);
      fst::ArcMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::RmWeightMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)&v471, (uint64_t)&v460);
      kaldi::quasar::compose((uint64_t)&v460, (uint64_t)&v483, (uint64_t)&v466);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(v457);
      fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t)&v466, (uint64_t)&v464, 1, 0, 0, v457, -1, 0);
      if (v458)
      {
        v459 = v458;
        operator delete(v458);
      }
      kaldi::quasar::compose((uint64_t)&v471, (uint64_t)&v464, (uint64_t)&v462);
      v309 = *(_QWORD *)(v463 + 64);
      v308 = *(_QWORD *)(v463 + 72);
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v455);
      v310 = (unint64_t)(v308 - v309) >> 3;
      if ((int)v310 >= 1)
      {
        v311 = 0;
        do
        {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState((uint64_t)&v455);
          ++v311;
        }
        while ((_DWORD)v310 != v311);
      }
      v312 = *(_DWORD *)(v463 + 88);
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v455);
      v313 = v456;
      *((_DWORD *)v456 + 22) = v312;
      v314 = (*(uint64_t (**)(_QWORD *))(*v313 + 24))(v313);
      v313[1] = (4 * v314) & 0x2000000000 | v314 & 0xCCFFFFF0007 | v313[1] & 4;
      v315 = *(_QWORD *)(v463 + 64);
      if (((*(_QWORD *)(v463 + 72) - v315) & 0x7FFFFFFF8) != 0)
        break;
LABEL_436:
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Adding hypothesis number ", 25);
        v326 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)" additional cost for non 1-best ", 32);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
      }
      if (((v456[9] - v456[8]) & 0x7FFFFFFF8) != 0)
      {
        v327 = 0;
        do
        {
          *(_QWORD *)&__p = &unk_1E5D21420;
          v531 = 0;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v455);
          v329 = v456;
          v330 = v456[8];
          *((_QWORD *)&__p + 1) = *(_QWORD *)(v330 + 8 * (int)v327);
          v530 = v456 + 1;
          v331 = v531;
          v332 = *(_QWORD *)(*((_QWORD *)&__p + 1) + 48);
          if (v531 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)&__p + 1) + 56) - v332) >> 4))
          {
            do
            {
              v333 = v332 + 48 * v331;
              *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v333;
              v556 = 0;
              v557 = 0;
              __x.__r_.__value_.__r.__words[2] = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__r.__words[2], *(const void **)(v333 + 16), *(_QWORD *)(v333 + 24), (uint64_t)(*(_QWORD *)(v333 + 24) - *(_QWORD *)(v333 + 16)) >> 2);
              LODWORD(v558) = *(_DWORD *)(v332 + 48 * v331 + 40);
              v534 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
              v536 = 0;
              v537 = 0;
              v535 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, (const void *)__x.__r_.__value_.__r.__words[2], (uint64_t)v556, (int64_t)((int64_t)v556 - __x.__r_.__value_.__r.__words[2]) >> 2);
              v538 = v558;
              *(float *)&v328 = (v296 + 1.0) * (double)v452;
              __src[0] = (void *)__PAIR64__(HIDWORD(v534), v328);
              v501 = 0uLL;
              __src[1] = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__src[1], (const void *)__x.__r_.__value_.__r.__words[2], (uint64_t)v556, (int64_t)((int64_t)v556 - __x.__r_.__value_.__r.__words[2]) >> 2);
              *((void **)&v534 + 1) = __src[0];
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v535, (char *)__src[1], v501, (uint64_t)(v501 - (unint64_t)__src[1]) >> 2);
              if (__src[1])
              {
                *(void **)&v501 = __src[1];
                operator delete(__src[1]);
              }
              if (HIDWORD(__x.__r_.__value_.__r.__words[0]) == v449)
              {
                LODWORD(v534) = a15;
                DWORD1(v534) = a15;
              }
              fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&__p, (float *)&v534);
              v334 = v531;
              v335 = *(_QWORD *)(*((_QWORD *)&__p + 1) + 48);
              v336 = (std::string::size_type *)(v335 + 48 * v531);
              __x.__r_.__value_.__r.__words[0] = *v336;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&__x.__r_.__value_.__l.__size_, (uint64_t)(v336 + 1));
              LODWORD(v558) = *(_DWORD *)(v335 + 48 * v334 + 40);
              if (v535)
              {
                v536 = (void **)v535;
                operator delete(v535);
              }
              if (__x.__r_.__value_.__r.__words[2])
              {
                v556 = (void *)__x.__r_.__value_.__r.__words[2];
                operator delete((void *)__x.__r_.__value_.__r.__words[2]);
              }
              v331 = v531 + 1;
              v531 = v331;
              v332 = *(_QWORD *)(*((_QWORD *)&__p + 1) + 48);
            }
            while (v331 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)&__p + 1) + 56) - v332) >> 4));
            v329 = v456;
            v330 = v456[8];
          }
          ++v327;
          v294 = v446;
        }
        while (v327 < (int)((unint64_t)(v329[9] - v330) >> 3));
      }
      fst::Union<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v473, (uint64_t)&v455);
      v455 = &unk_1E5D25800;
      v337 = v456;
      if (v456)
      {
        v338 = *((_DWORD *)v456 + 14) - 1;
        *((_DWORD *)v456 + 14) = v338;
        if (!v338)
          (*(void (**)(_QWORD *))(*v337 + 8))(v337);
      }
      v460 = &unk_1E5D25940;
      v339 = v461;
      if (v461)
      {
        v340 = *(_DWORD *)(v461 + 56) - 1;
        *(_DWORD *)(v461 + 56) = v340;
        if (!v340)
          (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
      }
      v462 = &unk_1E5D25940;
      v341 = v463;
      v295 = v452 + 1;
      if (v463)
      {
        v342 = *(_DWORD *)(v463 + 56) - 1;
        *(_DWORD *)(v463 + 56) = v342;
        if (!v342)
          (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
      }
      v464 = &unk_1E5D25940;
      v343 = v465;
      if (v465)
      {
        v344 = *(_DWORD *)(v465 + 56) - 1;
        *(_DWORD *)(v465 + 56) = v344;
        if (!v344)
          (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
      }
      v466 = &unk_1E5D25940;
      v345 = v467;
      if (v467)
      {
        v346 = *(_DWORD *)(v467 + 56) - 1;
        *(_DWORD *)(v467 + 56) = v346;
        if (!v346)
          (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
      }
      v471 = &unk_1E5D25940;
      v347 = v472;
      if (v472)
      {
        v348 = *((_DWORD *)v472 + 14) - 1;
        *((_DWORD *)v472 + 14) = v348;
        if (!v348)
          (*(void (**)(_QWORD *))(*v347 + 8))(v347);
      }
      v294 += 4;
      if (v294 == v437)
        goto LABEL_471;
    }
    v316 = 0;
    while (2)
    {
      v317 = *(_QWORD *)(v315 + 8 * (int)v316);
      v319 = *(_QWORD *)(v317 + 56);
      v318 = *(_QWORD *)(v317 + 64);
      if (v318 == v319)
        v320 = 0;
      else
        v320 = *(_QWORD *)(v317 + 56);
      LODWORD(__p) = *(_DWORD *)v317;
      *(_QWORD *)((char *)&__p + 4) = *(_QWORD *)(v317 + 4);
      v531 = 0;
      v532 = 0;
      v530 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v530, *(const void **)(v317 + 16), *(_QWORD *)(v317 + 24), (uint64_t)(*(_QWORD *)(v317 + 24) - *(_QWORD *)(v317 + 16)) >> 2);
      fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&__x);
      LODWORD(v534) = __p;
      LODWORD(__src[0]) = __x.__r_.__value_.__l.__data_;
      v441 = v318 - v319;
      if (*(float *)&__p != *(float *)&__x.__r_.__value_.__l.__data_
        || (LODWORD(__src[0]) = DWORD2(__p),
            LODWORD(v534) = DWORD1(__p),
            v597 = *(float *)&__x.__r_.__value_.__r.__words[1],
            v598 = HIDWORD(__x.__r_.__value_.__r.__words[0]),
            *((float *)&__p + 1) != *((float *)__x.__r_.__value_.__r.__words + 1))
        || *(float *)__src != v597)
      {
        v321 = 1;
        goto LABEL_409;
      }
      v322 = (void *)__x.__r_.__value_.__r.__words[2];
      if ((_BYTE *)(v531 - (_QWORD)v530) == (char *)v556 - __x.__r_.__value_.__r.__words[2])
      {
        v321 = memcmp(v530, (const void *)__x.__r_.__value_.__r.__words[2], v531 - (_QWORD)v530) != 0;
LABEL_409:
        v322 = (void *)__x.__r_.__value_.__r.__words[2];
        if (__x.__r_.__value_.__r.__words[2])
        {
LABEL_410:
          v556 = v322;
          operator delete(v322);
        }
      }
      else
      {
        v321 = 1;
        if (__x.__r_.__value_.__r.__words[2])
          goto LABEL_410;
      }
      if (v321)
      {
        *(_OWORD *)v453 = 0u;
        v454 = 0u;
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFinal((uint64_t)&v455, v316, (uint64_t *)v453);
        if (v453[1])
        {
          *(void **)&v454 = v453[1];
          operator delete(v453[1]);
        }
      }
      if (v318 != v319)
      {
        if ((unint64_t)(v441 / 56) <= 1)
          v323 = 1;
        else
          v323 = v441 / 56;
        v324 = v320 + 24;
        do
        {
          __x.__r_.__value_.__r.__words[0] = *(_QWORD *)(v324 - 24);
          LODWORD(__x.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v324 - 16);
          *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 4) = *(_QWORD *)(v324 - 12);
          v557 = 0;
          v558 = 0;
          v556 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v556, *(const void **)v324, *(_QWORD *)(v324 + 8), (uint64_t)(*(_QWORD *)(v324 + 8) - *(_QWORD *)v324) >> 2);
          v559 = *(_DWORD *)(v324 + 24);
          __src[0] = *(void **)((char *)&__x.__r_.__value_.__r.__words[1] + 4);
          v501 = 0uLL;
          __src[1] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__src[1], v556, (uint64_t)v557, (v557 - (_BYTE *)v556) >> 2);
          if (!v452)
            v296 = v296 + (float)(*((float *)__src + 1) * 2.0);
          *(_QWORD *)&v534 = __x.__r_.__value_.__r.__words[0];
          v325 = v559;
          *((void **)&v534 + 1) = __src[0];
          v536 = 0;
          v537 = 0;
          v535 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, __src[1], v501, (uint64_t)(v501 - (unint64_t)__src[1]) >> 2);
          v538 = v325;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v455);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(v456, v316, (float *)&v534);
          if (v535)
          {
            v536 = (void **)v535;
            operator delete(v535);
          }
          if (__src[1])
          {
            *(void **)&v501 = __src[1];
            operator delete(__src[1]);
          }
          if (v556)
          {
            v557 = v556;
            operator delete(v556);
          }
          v324 += 56;
          --v323;
        }
        while (v323);
      }
      if (v530)
      {
        v531 = (unint64_t)v530;
        operator delete(v530);
      }
      ++v316;
      v315 = *(_QWORD *)(v463 + 64);
      v294 = v446;
      if (v316 >= (int)((unint64_t)(*(_QWORD *)(v463 + 72) - v315) >> 3))
        goto LABEL_436;
      continue;
    }
  }
LABEL_471:
  *a17 = 0;
  v349 = v516;
  v350 = v515;
  if (v516 == v515)
  {
    v418 = 0xAAAAAAAAAAAAAAABLL * (v516 - v515);
    v350 = v516;
  }
  else
  {
    v351 = 0;
    v450 = a23 + 16;
    do
    {
      v352 = v350[3 * v351];
      v353 = logf(*(float *)(v352 + 192) / *((float *)v512 + v351));
      v354 = v351 + 1;
      LODWORD(__x.__r_.__value_.__l.__data_) = *(_DWORD *)(v352 + 144);
      HIDWORD(__x.__r_.__value_.__r.__words[0]) = __x.__r_.__value_.__l.__data_;
      *(float *)&__x.__r_.__value_.__r.__words[1] = -v353;
      HIDWORD(__x.__r_.__value_.__r.__words[1]) = v351 + 1;
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a19 + 208))(a19, v351, &__x);
      (*(void (**)(uint64_t))(*(_QWORD *)a19 + 200))(a19);
      ++*a17;
      LODWORD(v352) = *(_DWORD *)(v515[3 * v351] + 144);
      LODWORD(__src[0]) = v351;
      *(_QWORD *)&__p = __src;
      v355 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)__src, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *(_QWORD *)&__p = v515[3 * v351] + 144;
      v356 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v355 + 3), (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      LODWORD(__x.__r_.__value_.__l.__data_) = 0;
      *((float *)__x.__r_.__value_.__r.__words + 1) = -v353;
      v556 = 0;
      *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__l.__size_, (const void *)v356[13], v356[14], (uint64_t)(v356[14] - v356[13]) >> 2);
      LODWORD(v534) = v352;
      DWORD1(v534) = v352;
      *((_QWORD *)&v534 + 1) = __x.__r_.__value_.__r.__words[0];
      v536 = 0;
      v537 = 0;
      v535 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v535, (const void *)__x.__r_.__value_.__l.__size_, __x.__r_.__value_.__r.__words[2], (uint64_t)(__x.__r_.__value_.__r.__words[2] - __x.__r_.__value_.__l.__size_) >> 2);
      v538 = v351 + 1;
      if (__x.__r_.__value_.__l.__size_)
      {
        __x.__r_.__value_.__r.__words[2] = __x.__r_.__value_.__l.__size_;
        operator delete((void *)__x.__r_.__value_.__l.__size_);
      }
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Adding 1-best [", 15);
        v357 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v357, (uint64_t)"] pen= 0.0 score= ", 18);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
      }
      (*(void (**)(_QWORD *, uint64_t, __int128 *))(*a20 + 208))(a20, v351, &v534);
      (*(void (**)(_QWORD *))(*a20 + 200))(a20);
      LODWORD(__x.__r_.__value_.__l.__data_) = v351;
      *(_QWORD *)&__p = &__x;
      v358 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *(_QWORD *)&__p = v515[3 * v351] + 144;
      v359 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v358 + 3), (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      v361 = (char *)v515[3 * v351];
      if (v361 + 216 != (char *)(v359 + 13))
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v361 + 216, (char *)v359[13], v359[14], (uint64_t)(v359[14] - v359[13]) >> 2);
        v361 = (char *)v515[3 * v351];
      }
      kaldi::quasar::WordConf::ComputePhonesAndDurations((kaldi::quasar::WordConf *)v361, v360, a3, a4);
      v362 = v515[3 * v351];
      v363 = a22;
      if (*(_DWORD *)(v362 + 144))
      {
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Add 1-Best word ", 16);
          v364 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v364, (uint64_t)" confidence ", 12);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
          v362 = v515[3 * v351];
        }
        v366 = a22[1];
        v365 = (unint64_t)a22[2];
        if ((unint64_t)v366 >= v365)
        {
          v368 = *a22;
          v369 = (v366 - *a22) >> 2;
          v370 = v369 + 1;
          if ((unint64_t)(v369 + 1) >> 62)
            goto LABEL_598;
          v371 = v365 - (_QWORD)v368;
          if (v371 >> 1 > v370)
            v370 = v371 >> 1;
          if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFFCLL)
            v372 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v372 = v370;
          if (v372)
          {
            v373 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a22 + 2), v372);
            v368 = *a22;
            v366 = a22[1];
          }
          else
          {
            v373 = 0;
          }
          v374 = &v373[4 * v369];
          *(_DWORD *)v374 = *(_DWORD *)(v362 + 144);
          v367 = v374 + 4;
          if (v366 == v368)
          {
            v363 = a22;
          }
          else
          {
            v363 = a22;
            do
            {
              v375 = *((_DWORD *)v366 - 1);
              v366 -= 4;
              *((_DWORD *)v374 - 1) = v375;
              v374 -= 4;
            }
            while (v366 != v368);
          }
          *v363 = v374;
          v363[1] = v367;
          v363[2] = &v373[4 * v372];
          if (v368)
            operator delete(v368);
        }
        else
        {
          *(_DWORD *)v366 = *(_DWORD *)(v362 + 144);
          v367 = v366 + 4;
        }
        v363[1] = v367;
      }
      v376 = v515[3 * v351];
      if (a8[3])
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a18 + 24))(a18, v376 + 24, *(int *)(v376 + 144));
      }
      else
      {
        v378 = *(_DWORD **)(a23 + 8);
        v377 = *(_QWORD *)(a23 + 16);
        if ((unint64_t)v378 >= v377)
        {
          v380 = *(_DWORD **)a23;
          v381 = ((uint64_t)v378 - *(_QWORD *)a23) >> 2;
          v382 = v381 + 1;
          if ((unint64_t)(v381 + 1) >> 62)
LABEL_598:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v383 = v377 - (_QWORD)v380;
          if (v383 >> 1 > v382)
            v382 = v383 >> 1;
          if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFFCLL)
            v384 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v384 = v382;
          if (v384)
          {
            v385 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v450, v384);
            v380 = *(_DWORD **)a23;
            v378 = *(_DWORD **)(a23 + 8);
          }
          else
          {
            v385 = 0;
          }
          v386 = &v385[4 * v381];
          *(_DWORD *)v386 = *(_DWORD *)(v376 + 144);
          v379 = v386 + 4;
          while (v378 != v380)
          {
            v387 = *--v378;
            *((_DWORD *)v386 - 1) = v387;
            v386 -= 4;
          }
          *(_QWORD *)a23 = v386;
          *(_QWORD *)(a23 + 8) = v379;
          *(_QWORD *)(a23 + 16) = &v385[4 * v384];
          if (v380)
            operator delete(v380);
        }
        else
        {
          *v378 = *(_DWORD *)(v376 + 144);
          v379 = v378 + 1;
        }
        *(_QWORD *)(a23 + 8) = v379;
      }
      v388 = 1.0 - v353;
      v389 = v515[3 * v351];
      if ((unint64_t)(0xF83E0F83E0F83E1 * ((v515[3 * v351 + 1] - v389) >> 3)) >= 2)
      {
        v390 = 1;
        do
        {
          v391 = v389 + 264 * v390;
          *(float *)&v392 = -logf(*(float *)(v391 + 192) / *((float *)v512 + v351));
          LODWORD(__x.__r_.__value_.__l.__data_) = *(_DWORD *)(v391 + 144);
          HIDWORD(__x.__r_.__value_.__r.__words[0]) = __x.__r_.__value_.__l.__data_;
          *(float *)&__x.__r_.__value_.__r.__words[1] = *(float *)&v392;
          HIDWORD(__x.__r_.__value_.__r.__words[1]) = v351 + 1;
          (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a19 + 208))(a19, v351, &__x);
          LODWORD(v391) = *(_DWORD *)(v515[3 * v351] + 264 * v390 + 144);
          LODWORD(v471) = v351;
          __src[0] = &v471;
          v393 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&v471, (uint64_t)&std::piecewise_construct, (_DWORD **)__src);
          __src[0] = (void *)(v515[3 * v351] + 144);
          v394 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v393 + 3), (int *)__src[0], (uint64_t)&std::piecewise_construct, (_DWORD **)__src);
          __x.__r_.__value_.__r.__words[0] = __PAIR64__(v392, LODWORD(v388));
          v556 = 0;
          *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = 0uLL;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__l.__size_, (const void *)v394[13], v394[14], (uint64_t)(v394[14] - v394[13]) >> 2);
          LODWORD(__p) = v391;
          DWORD1(__p) = v391;
          *((_QWORD *)&__p + 1) = __x.__r_.__value_.__r.__words[0];
          v531 = 0;
          v532 = 0;
          v530 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v530, (const void *)__x.__r_.__value_.__l.__size_, __x.__r_.__value_.__r.__words[2], (uint64_t)(__x.__r_.__value_.__r.__words[2] - __x.__r_.__value_.__l.__size_) >> 2);
          v533 = v351 + 1;
          if (__x.__r_.__value_.__l.__size_)
          {
            __x.__r_.__value_.__r.__words[2] = __x.__r_.__value_.__l.__size_;
            operator delete((void *)__x.__r_.__value_.__l.__size_);
          }
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x, 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__x, (uint64_t)"Adding alternative [", 20);
            v395 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v395, (uint64_t)"] pen= ", 7);
            v396 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v396, (uint64_t)" score= ", 8);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__x);
          }
          (*(void (**)(_QWORD *, uint64_t, __int128 *))(*a20 + 208))(a20, v351, &__p);
          LODWORD(__x.__r_.__value_.__l.__data_) = v351;
          __src[0] = &__x;
          v397 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v573, (int *)&__x, (uint64_t)&std::piecewise_construct, (_DWORD **)__src);
          __src[0] = (void *)(v515[3 * v351] + 264 * v390 + 144);
          v398 = std::__hash_table<std::__hash_value_type<int,kaldi::ChosenArc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::ChosenArc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::ChosenArc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v397 + 3), (int *)__src[0], (uint64_t)&std::piecewise_construct, (_DWORD **)__src);
          v400 = v515[3 * v351];
          v401 = (char *)(v400 + 264 * v390 + 216);
          if (v401 != (char *)(v398 + 13))
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v401, (char *)v398[13], v398[14], (uint64_t)(v398[14] - v398[13]) >> 2);
            v400 = v515[3 * v351];
          }
          kaldi::quasar::WordConf::ComputePhonesAndDurations((kaldi::quasar::WordConf *)(v400 + 264 * v390), v399, a3, a4);
          v402 = v515[3 * v351] + 264 * v390;
          if (a8[3])
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a18 + 24))(a18, v402 + 24, *(int *)(v402 + 144));
          }
          else
          {
            v403 = (_DWORD *)(v402 + 144);
            v405 = *(_DWORD **)(a23 + 8);
            v404 = *(_QWORD *)(a23 + 16);
            if ((unint64_t)v405 >= v404)
            {
              v407 = *(_DWORD **)a23;
              v408 = ((uint64_t)v405 - *(_QWORD *)a23) >> 2;
              v409 = v408 + 1;
              if ((unint64_t)(v408 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v410 = v404 - (_QWORD)v407;
              if (v410 >> 1 > v409)
                v409 = v410 >> 1;
              if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFFCLL)
                v411 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v411 = v409;
              if (v411)
              {
                v412 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v450, v411);
                v407 = *(_DWORD **)a23;
                v405 = *(_DWORD **)(a23 + 8);
              }
              else
              {
                v412 = 0;
              }
              v413 = &v412[4 * v408];
              *(_DWORD *)v413 = *v403;
              v406 = v413 + 4;
              while (v405 != v407)
              {
                v414 = *--v405;
                *((_DWORD *)v413 - 1) = v414;
                v413 -= 4;
              }
              *(_QWORD *)a23 = v413;
              *(_QWORD *)(a23 + 8) = v406;
              *(_QWORD *)(a23 + 16) = &v412[4 * v411];
              if (v407)
                operator delete(v407);
            }
            else
            {
              *v405 = *v403;
              v406 = v405 + 1;
            }
            *(_QWORD *)(a23 + 8) = v406;
          }
          if (v530)
          {
            v531 = (unint64_t)v530;
            operator delete(v530);
          }
          ++v390;
          v389 = v515[3 * v351];
        }
        while (v390 < 0xF83E0F83E0F83E1 * ((v515[3 * v351 + 1] - v389) >> 3));
      }
      v415 = *((float *)v509 + v351);
      if (v415 > -1.0)
      {
        v416 = logf(v415 / *((float *)v512 + v351));
        __x.__r_.__value_.__r.__words[0] = 0;
        *(float *)&__x.__r_.__value_.__r.__words[1] = -v416;
        HIDWORD(__x.__r_.__value_.__r.__words[1]) = v351 + 1;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a19 + 208))(a19, v351, &__x);
        v417 = logf(*((float *)v509 + v351) / *((float *)v512 + v351));
        *(float *)&__p = v388;
        *((float *)&__p + 1) = -v417;
        v530 = 0;
        v531 = 0;
        *((_QWORD *)&__p + 1) = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)&__p + 1, 0, 0, 0);
        __x.__r_.__value_.__r.__words[0] = 0;
        *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = (unint64_t)__p;
        v556 = 0;
        v557 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x.__r_.__value_.__r.__words[2], *((const void **)&__p + 1), (uint64_t)v530, ((uint64_t)v530 - *((_QWORD *)&__p + 1)) >> 2);
        LODWORD(v558) = v351 + 1;
        if (*((_QWORD *)&__p + 1))
        {
          v530 = (void *)*((_QWORD *)&__p + 1);
          operator delete(*((void **)&__p + 1));
        }
        (*(void (**)(_QWORD *, uint64_t, std::string *))(*a20 + 208))(a20, v351, &__x);
        if (__x.__r_.__value_.__r.__words[2])
        {
          v556 = (void *)__x.__r_.__value_.__r.__words[2];
          operator delete((void *)__x.__r_.__value_.__r.__words[2]);
        }
      }
      if (v535)
      {
        v536 = (void **)v535;
        operator delete(v535);
      }
      v349 = v516;
      v350 = v515;
      v418 = 0xAAAAAAAAAAAAAAABLL * (v516 - v515);
      ++v351;
    }
    while (v354 < v418);
  }
  if (&v515 != (uint64_t **)a16)
    std::vector<std::vector<kaldi::quasar::WordConf>>::__assign_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>((uint64_t)a16, v350, v349, v418);
  (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)a19 + 184))(a19, *a17, 0.0);
  v419 = v474;
  ++v474[14];
  v420 = (_DWORD *)a20[1];
  if (v420 && (v421 = v420[14] - 1, (v420[14] = v421) == 0))
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v420 + 8))(v420);
    v423 = v474;
    a20[1] = v419;
    v473 = &unk_1E5D25800;
    v419 = v423;
    if (v423)
      goto LABEL_565;
  }
  else
  {
    a20[1] = v419;
    v473 = &unk_1E5D25800;
LABEL_565:
    v422 = v419[14] - 1;
    v419[14] = v422;
    if (!v422)
      (*(void (**)(_DWORD *))(*(_QWORD *)v419 + 8))(v419);
  }
  v475 = &unk_1E5D25580;
  v424 = v476;
  if (v476)
  {
    v425 = *(_DWORD *)(v476 + 56) - 1;
    *(_DWORD *)(v476 + 56) = v425;
    if (!v425)
      (*(void (**)(uint64_t))(*(_QWORD *)v424 + 8))(v424);
  }
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v477;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  v483 = &unk_1E5D25940;
  v426 = v484;
  if (v484)
  {
    v427 = *((_DWORD *)v484 + 14) - 1;
    *((_DWORD *)v484 + 14) = v427;
    if (!v427)
      (*(void (**)(_QWORD *))(*v426 + 8))(v426);
  }
  if (v504[0])
  {
    v504[1] = v504[0];
    operator delete(v504[0]);
  }
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v497;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v522);
  v489 = &unk_1E5D25800;
  v428 = v490;
  if (v490)
  {
    v429 = *(_DWORD *)(v490 + 56) - 1;
    *(_DWORD *)(v490 + 56) = v429;
    if (!v429)
      (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  }
  v491 = &unk_1E5D25800;
  v430 = v492;
  if (v492)
  {
    v431 = *(_DWORD *)(v492 + 56) - 1;
    *(_DWORD *)(v492 + 56) = v431;
    if (!v431)
      (*(void (**)(uint64_t))(*(_QWORD *)v430 + 8))(v430);
  }
  if (v506)
  {
    v507 = (float *)v506;
    operator delete(v506);
  }
  if (v509)
  {
    v510 = (char *)v509;
    operator delete(v509);
  }
  if (v512)
  {
    v513 = (std::string *)v512;
    operator delete(v512);
  }
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v515;
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v543;
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)v544);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v548;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v551;
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v566;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v567;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v570;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)v573);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v575;
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v578);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v579;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v582;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  if (v583.__begin_)
  {
    v583.__end_ = v583.__begin_;
    operator delete(v583.__begin_);
  }
  if (v584)
  {
    v585 = v584;
    operator delete(v584);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)v587);
}

void sub_1ADEA680C()
{
  JUMPOUT(0x1ADEA6FF0);
}

void sub_1ADEA6814(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v3;
    operator delete(v3);
  }
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x3E0]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x4E8]);
  STACK[0x748] = (unint64_t)&STACK[0x5F0];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x608]);
  STACK[0x748] = (unint64_t)&STACK[0x710];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x728];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x868];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x880];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x898];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8B0]);
  STACK[0x748] = (unint64_t)&STACK[0x8D8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x8F0]);
  STACK[0x748] = (unint64_t)&STACK[0x918];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x930];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  v4 = (void *)STACK[0x948];
  if (STACK[0x948])
  {
    STACK[0x950] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0x960];
  if (STACK[0x960])
  {
    STACK[0x968] = (unint64_t)v5;
    operator delete(v5);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x978]);
  _Unwind_Resume(a1);
}

void sub_1ADEA68E4()
{
  JUMPOUT(0x1ADEA6E64);
}

void sub_1ADEA68EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADEA6DC8);
}

void sub_1ADEA6908()
{
  JUMPOUT(0x1ADEA6E30);
}

void sub_1ADEA6914()
{
  JUMPOUT(0x1ADEA6DFCLL);
}

void sub_1ADEA6928()
{
  if (STACK[0x750])
  {
    STACK[0x758] = STACK[0x750];
    JUMPOUT(0x1ADEA6C84);
  }
  JUMPOUT(0x1ADEA6F1CLL);
}

void sub_1ADEA694C()
{
  JUMPOUT(0x1ADEA6C30);
}

void sub_1ADEA6960()
{
  JUMPOUT(0x1ADEA6A00);
}

void sub_1ADEA6980()
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x748]);
  JUMPOUT(0x1ADEA6C78);
}

void sub_1ADEA69D8()
{
  void *v0;

  v0 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1ADEA6B74);
}

void sub_1ADEA69EC()
{
  JUMPOUT(0x1ADEA6F1CLL);
}

void sub_1ADEA6A0C()
{
  JUMPOUT(0x1ADEA6DC8);
}

void sub_1ADEA6A1C()
{
  void *v0;

  v0 = (void *)STACK[0x758];
  if (STACK[0x758])
  {
    STACK[0x760] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1ADEA7024);
}

void sub_1ADEA6A2C()
{
  void *v0;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  v0 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1ADEA6B74);
}

void sub_1ADEA6A54()
{
  JUMPOUT(0x1ADEA6B8CLL);
}

void sub_1ADEA6A5C()
{
  JUMPOUT(0x1ADEA6B94);
}

void sub_1ADEA6A64()
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x748]);
  JUMPOUT(0x1ADEA6B74);
}

void sub_1ADEA6A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,_DWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_DWORD *a43,uint64_t a44,_DWORD *a45,uint64_t a46,_DWORD *a47,uint64_t a48,_DWORD *a49)
{
  void *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;

  if (__p)
    operator delete(__p);
  v49 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v49;
    operator delete(v49);
  }
  if (a36)
  {
    v50 = a36[14] - 1;
    a36[14] = v50;
    if (!v50)
      (*(void (**)(_DWORD *))(*(_QWORD *)a36 + 8))(a36);
  }
  if (a43)
  {
    v51 = a43[14] - 1;
    a43[14] = v51;
    if (!v51)
      (*(void (**)(_DWORD *))(*(_QWORD *)a43 + 8))(a43);
  }
  if (a45)
  {
    v52 = a45[14] - 1;
    a45[14] = v52;
    if (!v52)
      (*(void (**)(_DWORD *))(*(_QWORD *)a45 + 8))(a45);
  }
  if (a47)
  {
    v53 = a47[14] - 1;
    a47[14] = v53;
    if (!v53)
      (*(void (**)(_DWORD *))(*(_QWORD *)a47 + 8))(a47);
  }
  if (a49)
  {
    v54 = a49[14] - 1;
    a49[14] = v54;
    if (!v54)
      (*(void (**)(_DWORD *))(*(_QWORD *)a49 + 8))(a49);
  }
  JUMPOUT(0x1ADEA6EE8);
}

void sub_1ADEA6A94()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v0;
    operator delete(v0);
  }
  v1 = (void *)STACK[0x758];
  if (STACK[0x758])
  {
    STACK[0x760] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1ADEA7024);
}

void sub_1ADEA6AC4()
{
  unint64_t v0;
  void *v1;
  void *v2;

  STACK[0x8E0] = v0;
  v1 = (void *)STACK[0x658];
  if (STACK[0x658])
  {
    STACK[0x660] = (unint64_t)v1;
    operator delete(v1);
  }
  v2 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v2;
    operator delete(v2);
  }
  JUMPOUT(0x1ADEA70D0);
}

void sub_1ADEA6ADC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53)
{
  void *v53;

  if (__p)
    operator delete(__p);
  v53 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v53;
    operator delete(v53);
  }
  JUMPOUT(0x1ADEA6EE8);
}

void sub_1ADEA6AF0()
{
  void *v0;

  v0 = (void *)STACK[0x750];
  if (STACK[0x750])
  {
    STACK[0x758] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1ADEA6C78);
}

void sub_1ADEA6B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_DWORD *a56,uint64_t a57,_DWORD *a58,uint64_t a59,_DWORD *a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t a70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  void *v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  int v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;

  if (a56)
  {
    v71 = a56[14] - 1;
    a56[14] = v71;
    if (!v71)
      (*(void (**)(_DWORD *))(*(_QWORD *)a56 + 8))(a56);
  }
  if (a58)
  {
    v72 = a58[14] - 1;
    a58[14] = v72;
    if (!v72)
      (*(void (**)(_DWORD *))(*(_QWORD *)a58 + 8))(a58);
  }
  if (a60)
  {
    v73 = a60[14] - 1;
    a60[14] = v73;
    if (!v73)
      (*(void (**)(_DWORD *))(*(_QWORD *)a60 + 8))(a60);
  }
  STACK[0x748] = (unint64_t)&a61;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  a69 = (uint64_t)&unk_1E5D25940;
  v74 = a70;
  if (a70)
  {
    v75 = *(_DWORD *)(a70 + 56) - 1;
    *(_DWORD *)(a70 + 56) = v75;
    if (!v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  }
  v76 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v76;
    operator delete(v76);
  }
  STACK[0x748] = (unint64_t)&STACK[0x268];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x370]);
  STACK[0x210] = (unint64_t)&unk_1E5D25800;
  v77 = (_DWORD *)STACK[0x218];
  if (STACK[0x218])
  {
    v78 = v77[14] - 1;
    v77[14] = v78;
    if (!v78)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
  }
  STACK[0x220] = (unint64_t)&unk_1E5D25800;
  v79 = (_DWORD *)STACK[0x228];
  if (STACK[0x228])
  {
    v80 = v79[14] - 1;
    v79[14] = v80;
    if (!v80)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
  }
  v81 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v81;
    operator delete(v81);
  }
  v82 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v82;
    operator delete(v82);
  }
  v83 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v83;
    operator delete(v83);
  }
  STACK[0x748] = (unint64_t)&STACK[0x328];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x5F0];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x608]);
  STACK[0x748] = (unint64_t)&STACK[0x710];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x728];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x868];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x880];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x898];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8B0]);
  STACK[0x748] = (unint64_t)&STACK[0x8D8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x8F0]);
  STACK[0x748] = (unint64_t)&STACK[0x918];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x930];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  v84 = (void *)STACK[0x948];
  if (STACK[0x948])
  {
    STACK[0x950] = (unint64_t)v84;
    operator delete(v84);
  }
  v85 = (void *)STACK[0x960];
  if (STACK[0x960])
  {
    STACK[0x968] = (unint64_t)v85;
    operator delete(v85);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x978]);
  _Unwind_Resume(a1);
}

void sub_1ADEA6B2C()
{
  JUMPOUT(0x1ADEA6F94);
}

void sub_1ADEA6B3C()
{
  if (STACK[0x4F8])
  {
    STACK[0x500] = STACK[0x4F8];
    JUMPOUT(0x1ADEA6C04);
  }
  JUMPOUT(0x1ADEA6F94);
}

void sub_1ADEA6B44()
{
  void *v0;

  v0 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x4F8])
  {
    STACK[0x500] = STACK[0x4F8];
    JUMPOUT(0x1ADEA6C04);
  }
  JUMPOUT(0x1ADEA6F94);
}

void sub_1ADEA6B4C()
{
  JUMPOUT(0x1ADEA7024);
}

void sub_1ADEA6B54()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x658];
  if (STACK[0x658])
  {
    STACK[0x660] = (unint64_t)v0;
    operator delete(v0);
  }
  v1 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1ADEA70D0);
}

void sub_1ADEA6B60()
{
  JUMPOUT(0x1ADEA6CC4);
}

void sub_1ADEA6B68()
{
  JUMPOUT(0x1ADEA70D0);
}

void sub_1ADEA6B70()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v0;
    operator delete(v0);
  }
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x3E0]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x4E8]);
  v1 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v1;
    operator delete(v1);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x280]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x2B0]);
  v2 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v2;
    operator delete(v2);
  }
  STACK[0x748] = (unint64_t)&STACK[0x2F8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x310];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  JUMPOUT(0x1ADEA7088);
}

void sub_1ADEA6BB4()
{
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = STACK[0x3F0];
    JUMPOUT(0x1ADEA6C6CLL);
  }
  JUMPOUT(0x1ADEA6C78);
}

void sub_1ADEA6BBC()
{
  void *v0;

  v0 = (void *)STACK[0x760];
  if (STACK[0x760])
  {
    STACK[0x768] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = STACK[0x3F0];
    JUMPOUT(0x1ADEA6BF4);
  }
  JUMPOUT(0x1ADEA6BF8);
}

void sub_1ADEA6BE4()
{
  if (STACK[0x760])
  {
    STACK[0x768] = STACK[0x760];
    JUMPOUT(0x1ADEA6BF4);
  }
  if (STACK[0x4F8])
  {
    STACK[0x500] = STACK[0x4F8];
    JUMPOUT(0x1ADEA6C04);
  }
  JUMPOUT(0x1ADEA6F94);
}

void sub_1ADEA6C54()
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x748]);
  JUMPOUT(0x1ADEA6C60);
}

void sub_1ADEA6C74()
{
  void *v0;

  v0 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1ADEA6F1CLL);
}

void sub_1ADEA6C8C(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x748]);
  v2 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v4;
    operator delete(v4);
  }
  STACK[0x748] = (unint64_t)&STACK[0x328];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x5F0];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x608]);
  STACK[0x748] = (unint64_t)&STACK[0x710];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x728];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x868];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x880];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x898];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8B0]);
  STACK[0x748] = (unint64_t)&STACK[0x8D8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x8F0]);
  STACK[0x748] = (unint64_t)&STACK[0x918];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x930];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  v5 = (void *)STACK[0x948];
  if (STACK[0x948])
  {
    STACK[0x950] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x960];
  if (STACK[0x960])
  {
    STACK[0x968] = (unint64_t)v6;
    operator delete(v6);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x978]);
  _Unwind_Resume(a1);
}

void sub_1ADEA6CA0(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v4;
    operator delete(v4);
  }
  STACK[0x748] = (unint64_t)&STACK[0x328];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x5F0];
  std::vector<std::vector<kaldi::ChosenArc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)&STACK[0x608]);
  STACK[0x748] = (unint64_t)&STACK[0x710];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x728];
  std::vector<kaldi::quasar::WordConf>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x868];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x880];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x898];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::ChosenArc>>>>::~__hash_table((uint64_t)&STACK[0x8B0]);
  STACK[0x748] = (unint64_t)&STACK[0x8D8];
  std::vector<kaldi::ChosenArc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x8F0]);
  STACK[0x748] = (unint64_t)&STACK[0x918];
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  STACK[0x748] = (unint64_t)&STACK[0x930];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  v5 = (void *)STACK[0x948];
  if (STACK[0x948])
  {
    STACK[0x950] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x960];
  if (STACK[0x960])
  {
    STACK[0x968] = (unint64_t)v6;
    operator delete(v6);
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&STACK[0x978]);
  _Unwind_Resume(a1);
}

void sub_1ADEA6CA8()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x748]);
  JUMPOUT(0x1ADEA6CB4);
}

void sub_1ADEA6CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_DWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_DWORD *a43,uint64_t a44,_DWORD *a45,uint64_t a46,_DWORD *a47,uint64_t a48,_DWORD *a49)
{
  void *v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;

  v49 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v49;
    operator delete(v49);
  }
  v50 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v50;
    operator delete(v50);
  }
  if (STACK[0x758])
  {
    STACK[0x760] = STACK[0x758];
    JUMPOUT(0x1ADEA6D90);
  }
  if (a36)
  {
    v51 = a36[14] - 1;
    a36[14] = v51;
    if (!v51)
      (*(void (**)(_DWORD *))(*(_QWORD *)a36 + 8))(a36);
  }
  if (a43)
  {
    v52 = a43[14] - 1;
    a43[14] = v52;
    if (!v52)
      (*(void (**)(_DWORD *))(*(_QWORD *)a43 + 8))(a43);
  }
  if (a45)
  {
    v53 = a45[14] - 1;
    a45[14] = v53;
    if (!v53)
      (*(void (**)(_DWORD *))(*(_QWORD *)a45 + 8))(a45);
  }
  if (a47)
  {
    v54 = a47[14] - 1;
    a47[14] = v54;
    if (!v54)
      (*(void (**)(_DWORD *))(*(_QWORD *)a47 + 8))(a47);
  }
  if (a49)
  {
    v55 = a49[14] - 1;
    a49[14] = v55;
    if (!v55)
      (*(void (**)(_DWORD *))(*(_QWORD *)a49 + 8))(a49);
  }
  JUMPOUT(0x1ADEA6EE8);
}

void sub_1ADEA6CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_DWORD *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_DWORD *a43,uint64_t a44,_DWORD *a45,uint64_t a46,_DWORD *a47,uint64_t a48,_DWORD *a49)
{
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  if (a36)
  {
    v49 = a36[14] - 1;
    a36[14] = v49;
    if (!v49)
      (*(void (**)(_DWORD *))(*(_QWORD *)a36 + 8))(a36);
  }
  if (a43)
  {
    v50 = a43[14] - 1;
    a43[14] = v50;
    if (!v50)
      (*(void (**)(_DWORD *))(*(_QWORD *)a43 + 8))(a43);
  }
  if (a45)
  {
    v51 = a45[14] - 1;
    a45[14] = v51;
    if (!v51)
      (*(void (**)(_DWORD *))(*(_QWORD *)a45 + 8))(a45);
  }
  if (a47)
  {
    v52 = a47[14] - 1;
    a47[14] = v52;
    if (!v52)
      (*(void (**)(_DWORD *))(*(_QWORD *)a47 + 8))(a47);
  }
  if (a49)
  {
    v53 = a49[14] - 1;
    a49[14] = v53;
    if (!v53)
      (*(void (**)(_DWORD *))(*(_QWORD *)a49 + 8))(a49);
  }
  JUMPOUT(0x1ADEA6EE8);
}

void sub_1ADEA6CFC()
{
  JUMPOUT(0x1ADEA6D40);
}

void sub_1ADEA6D04()
{
  if (STACK[0x760])
  {
    STACK[0x768] = STACK[0x760];
    JUMPOUT(0x1ADEA6D80);
  }
  JUMPOUT(0x1ADEA6D84);
}

void sub_1ADEA6D0C()
{
  void *v0;

  v0 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x760])
  {
    STACK[0x768] = STACK[0x760];
    JUMPOUT(0x1ADEA6D80);
  }
  JUMPOUT(0x1ADEA6D84);
}

void sub_1ADEA6D14()
{
  JUMPOUT(0x1ADEA6D84);
}

void sub_1ADEA6D1C()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v0;
    operator delete(v0);
  }
  if (STACK[0x4F8])
  {
    STACK[0x500] = STACK[0x4F8];
    JUMPOUT(0x1ADEA6ED4);
  }
  v1 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1ADEA6EE8);
}

void sub_1ADEA6D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_DWORD *a56,uint64_t a57,_DWORD *a58,uint64_t a59,_DWORD *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t a70;
  void *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  void *v76;
  _DWORD *v77;
  int v78;
  _DWORD *v79;
  int v80;

  v70 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v70;
    operator delete(v70);
  }
  if (a56)
  {
    v71 = a56[14] - 1;
    a56[14] = v71;
    if (!v71)
      (*(void (**)(_DWORD *))(*(_QWORD *)a56 + 8))(a56);
  }
  if (a58)
  {
    v72 = a58[14] - 1;
    a58[14] = v72;
    if (!v72)
      (*(void (**)(_DWORD *))(*(_QWORD *)a58 + 8))(a58);
  }
  if (a60)
  {
    v73 = a60[14] - 1;
    a60[14] = v73;
    if (!v73)
      (*(void (**)(_DWORD *))(*(_QWORD *)a60 + 8))(a60);
  }
  STACK[0x748] = (unint64_t)&a61;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  a69 = &unk_1E5D25940;
  v74 = a70;
  if (a70)
  {
    v75 = *(_DWORD *)(a70 + 56) - 1;
    *(_DWORD *)(a70 + 56) = v75;
    if (!v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  }
  v76 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v76;
    operator delete(v76);
  }
  STACK[0x748] = (unint64_t)&STACK[0x268];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x748]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&STACK[0x370]);
  STACK[0x210] = (unint64_t)&unk_1E5D25800;
  v77 = (_DWORD *)STACK[0x218];
  if (STACK[0x218])
  {
    v78 = v77[14] - 1;
    v77[14] = v78;
    if (!v78)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
  }
  STACK[0x220] = (unint64_t)&unk_1E5D25800;
  v79 = (_DWORD *)STACK[0x228];
  if (STACK[0x228])
  {
    v80 = v79[14] - 1;
    v79[14] = v80;
    if (!v80)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
  }
  JUMPOUT(0x1ADEA7058);
}

void sub_1ADEA6D50()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v0;
    operator delete(v0);
  }
  v1 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v1;
    operator delete(v1);
  }
  JUMPOUT(0x1ADEA6D74);
}

void sub_1ADEA6E9C()
{
  JUMPOUT(0x1ADEA6EC8);
}

void sub_1ADEA6EA4()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x760];
  if (STACK[0x760])
  {
    STACK[0x768] = (unint64_t)v0;
    operator delete(v0);
  }
  v1 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v1;
    operator delete(v1);
  }
  if (STACK[0x4F8])
  {
    STACK[0x500] = STACK[0x4F8];
    JUMPOUT(0x1ADEA6ED4);
  }
  JUMPOUT(0x1ADEA6ED8);
}

uint64_t kaldi::quasar::WordConf::NormaliseUttScores(uint64_t result, float *a2, float *a3)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v3 = *(float **)(result + 168);
  v4 = v3[27];
  if (COERCE_UNSIGNED_INT(fabs(v3[28] / v4)) >= 0x7F800000)
    v5 = 1.0;
  else
    v5 = v3[28] / v4;
  v6 = v3[29];
  if (COERCE_INT(fabs(v3[30] / v4)) >= 2139095040)
    v7 = 0.5;
  else
    v7 = v3[30] / v4;
  v8 = v3[32];
  if (COERCE_INT(fabs(v3[31] / v4)) >= 2139095040)
    v9 = 0.5;
  else
    v9 = v3[31] / v4;
  v3[30] = v7;
  v3[31] = v9;
  v10 = v6 / v4;
  if ((LODWORD(v10) & 0x7FFFFFFFu) >= 0x7F800000)
    v11 = 0.5;
  else
    v11 = v10;
  v3[28] = v5;
  v3[29] = v11;
  v12 = v8 / v4;
  if ((LODWORD(v12) & 0x7FFFFFFFu) >= 0x7F800000)
    v13 = 0.5;
  else
    v13 = v12;
  v3[32] = v13;
  v14 = *a2;
  if ((*(_DWORD *)a2 & 0x7FFFFFFFu) >= 0x7F800000)
    v14 = 0.0;
  v3[33] = v14;
  v15 = a2[1];
  if ((LODWORD(v15) & 0x7FFFFFFFu) >= 0x7F800000)
    v15 = 0.0;
  v3[34] = v15;
  v16 = a2[2];
  if ((LODWORD(v16) & 0x7FFFFFFFu) >= 0x7F800000)
    v16 = 0.0;
  v3[35] = v16;
  v17 = *a3;
  if ((*(_DWORD *)a3 & 0x7FFFFFFFu) >= 0x7F800000)
    v17 = 0.0;
  v3[36] = v17;
  v18 = a3[1];
  if ((LODWORD(v18) & 0x7FFFFFFFu) >= 0x7F800000)
    v18 = 0.0;
  v3[37] = v18;
  v19 = a3[2];
  if ((LODWORD(v19) & 0x7FFFFFFFu) >= 0x7F800000)
    v19 = 0.0;
  v3[38] = v19;
  return result;
}

float kaldi::quasar::WordConf::AddUttFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  v2 = *(_QWORD *)(a2 + 168);
  v3 = *(_QWORD *)(a1 + 168);
  *(_DWORD *)(v3 + 108) = *(_DWORD *)(v2 + 108);
  *(_DWORD *)(v3 + 112) = *(_DWORD *)(v2 + 112);
  *(_DWORD *)(v3 + 116) = *(_DWORD *)(v2 + 116);
  *(_DWORD *)(v3 + 120) = *(_DWORD *)(v2 + 120);
  *(_DWORD *)(v3 + 124) = *(_DWORD *)(v2 + 124);
  *(_DWORD *)(v3 + 128) = *(_DWORD *)(v2 + 128);
  *(_DWORD *)(v3 + 132) = *(_DWORD *)(v2 + 132);
  *(_DWORD *)(v3 + 136) = *(_DWORD *)(v2 + 136);
  *(_DWORD *)(v3 + 140) = *(_DWORD *)(v2 + 140);
  *(_DWORD *)(v3 + 144) = *(_DWORD *)(v2 + 144);
  *(_DWORD *)(v3 + 148) = *(_DWORD *)(v2 + 148);
  result = *(float *)(v2 + 152);
  *(float *)(v3 + 152) = result;
  return result;
}

float kaldi::quasar::WordConf::SetOneBestFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  v2 = *(_QWORD *)(a2 + 168);
  v3 = *(_QWORD *)(a1 + 168);
  *(_DWORD *)(v3 + 156) = *(_DWORD *)v2;
  *(_DWORD *)(v3 + 160) = *(_DWORD *)(v2 + 4);
  *(_DWORD *)(v3 + 164) = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v3 + 168) = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(v3 + 172) = *(_DWORD *)(v2 + 16);
  *(_DWORD *)(v3 + 176) = *(_DWORD *)(v2 + 20);
  *(_DWORD *)(v3 + 180) = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v3 + 184) = *(_DWORD *)(v2 + 28);
  *(_DWORD *)(v3 + 188) = *(_DWORD *)(v2 + 32);
  *(_DWORD *)(v3 + 192) = *(_DWORD *)(v2 + 36);
  *(_DWORD *)(v3 + 196) = *(_DWORD *)(v2 + 40);
  *(_DWORD *)(v3 + 200) = *(_DWORD *)(v2 + 44);
  *(_DWORD *)(v3 + 204) = *(_DWORD *)(v2 + 48);
  *(_DWORD *)(v3 + 208) = *(_DWORD *)(v2 + 52);
  *(_DWORD *)(v3 + 212) = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v3 + 216) = *(_DWORD *)(v2 + 60);
  *(_DWORD *)(v3 + 220) = *(_DWORD *)(v2 + 64);
  *(_DWORD *)(v3 + 224) = *(_DWORD *)(v2 + 68);
  *(_DWORD *)(v3 + 228) = *(_DWORD *)(v2 + 72);
  *(_DWORD *)(v3 + 232) = *(_DWORD *)(v2 + 76);
  *(_DWORD *)(v3 + 236) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v3 + 240) = *(_DWORD *)(v2 + 84);
  *(_DWORD *)(v3 + 244) = *(_DWORD *)(v2 + 88);
  *(_DWORD *)(v3 + 248) = *(_DWORD *)(v2 + 92);
  *(_DWORD *)(v3 + 252) = *(_DWORD *)(v2 + 96);
  *(_DWORD *)(v3 + 256) = *(_DWORD *)(v2 + 100);
  *(_DWORD *)(v3 + 260) = *(_DWORD *)(v2 + 104);
  result = *(float *)(v2 + 388);
  *(float *)(v3 + 392) = result;
  return result;
}

void kaldi::quasar::WordConf::ApplyModel(kaldi::quasar::WordConf *this, const kaldi::quasar::WordConf *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v7;
  float v8;
  float v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[36];

  v4 = *((_QWORD *)this + 21);
  v3 = *((_QWORD *)this + 22);
  v5 = kaldi::g_kaldi_verbose_level;
  if (v3 != v4)
  {
    v7 = 0;
    v8 = *((float *)a2 + 49);
    do
    {
      v8 = v8 + (float)(*(float *)(v4 + 4 * v7) * *(float *)(*((_QWORD *)a2 + 21) + 4 * v7));
      v9 = expf(v8);
      *((float *)this + 48) = v9 / (float)(v9 + 1.0);
      if (v5 >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Scaling feature ", 16);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" with value of ", 15);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" by weight = ", 13);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
        v5 = kaldi::g_kaldi_verbose_level;
        v4 = *((_QWORD *)this + 21);
        v3 = *((_QWORD *)this + 22);
      }
      ++v7;
    }
    while (v7 < (v3 - v4) >> 2);
  }
  if ((*((_DWORD *)this + 48) & 0x7FFFFFFFu) > 0x7F7FFFFF || *((float *)this + 48) == 0.0)
  {
    if (v5 >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Warning - confidence is NaN or inf, or will be inf in log - confidence model could be bad/compromised. Defaulting to 1.0", 120);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      v5 = kaldi::g_kaldi_verbose_level;
    }
    *((_DWORD *)this + 48) = 1065353216;
  }
  if (v5 >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Confidence score is ", 20);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
}

void sub_1ADEA75E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::WordConf::ComputePhonesAndDurations(kaldi::quasar::WordConf *this, const kaldi::SilencePhoneSet *a2, const kaldi::TransitionModel *a3, const fst::SymbolTable *a4)
{
  const fst::SymbolTable *v4;
  uint64_t v6;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  int *v41;
  char *v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  void *v56[3];
  void *v57;
  char *v58;
  char *v59;
  void *__p;
  char *v61;
  char *v62;
  void **v63;

  v4 = a4;
  __p = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  memset(v56, 0, sizeof(v56));
  v6 = *((_QWORD *)this + 27);
  if (*((_QWORD *)this + 28) != v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = -1;
    do
    {
      v11 = v10;
      v12 = kaldi::TransitionModel::TransitionIdToPhone(a3, *(_DWORD *)(v6 + 4 * v8));
      v10 = v12;
      if (v8 && v12 != v11)
      {
        v13 = v61;
        if (v61 >= v62)
        {
          v15 = (char *)__p;
          v16 = (v61 - (_BYTE *)__p) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            goto LABEL_78;
          v18 = v62 - (_BYTE *)__p;
          if ((v62 - (_BYTE *)__p) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v19);
            v15 = (char *)__p;
            v13 = v61;
          }
          else
          {
            v20 = 0;
          }
          v21 = (int *)&v20[4 * v16];
          *v21 = v11;
          v14 = (char *)(v21 + 1);
          while (v13 != v15)
          {
            v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v22;
          }
          __p = v21;
          v61 = v14;
          v62 = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v61 = v11;
          v14 = v13 + 4;
        }
        v61 = v14;
        v23 = v58;
        if (v58 >= v59)
        {
          v25 = (char *)v57;
          v26 = (v58 - (_BYTE *)v57) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
LABEL_78:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = v59 - (_BYTE *)v57;
          if ((v59 - (_BYTE *)v57) >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v29);
            v25 = (char *)v57;
            v23 = v58;
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = v9;
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v32 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          v57 = v31;
          v58 = v24;
          v59 = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v58 = v9;
          v24 = v23 + 4;
        }
        v9 = 0;
        v58 = v24;
      }
      ++v9;
      ++v8;
      v6 = *((_QWORD *)this + 27);
    }
    while (v8 < (*((_QWORD *)this + 28) - v6) >> 2);
    v4 = a4;
    if (v9)
    {
      v33 = v61;
      if (v61 >= v62)
      {
        v35 = (char *)__p;
        v36 = (v61 - (_BYTE *)__p) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          goto LABEL_79;
        v38 = v62 - (_BYTE *)__p;
        if ((v62 - (_BYTE *)__p) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v62, v39);
          v35 = (char *)__p;
          v33 = v61;
        }
        else
        {
          v40 = 0;
        }
        v41 = (int *)&v40[4 * v36];
        v42 = &v40[4 * v39];
        *v41 = v10;
        v34 = (char *)(v41 + 1);
        while (v33 != v35)
        {
          v43 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *--v41 = v43;
        }
        __p = v41;
        v61 = v34;
        v62 = v42;
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v61 = v10;
        v34 = v33 + 4;
      }
      v61 = v34;
      v44 = v58;
      if (v58 < v59)
      {
        *(_DWORD *)v58 = v9;
        v45 = v44 + 4;
LABEL_72:
        v58 = v45;
        goto LABEL_73;
      }
      v46 = (char *)v57;
      v47 = (v58 - (_BYTE *)v57) >> 2;
      v48 = v47 + 1;
      if (!((unint64_t)(v47 + 1) >> 62))
      {
        v49 = v59 - (_BYTE *)v57;
        if ((v59 - (_BYTE *)v57) >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v50);
          v46 = (char *)v57;
          v44 = v58;
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[4 * v47];
        v53 = &v51[4 * v50];
        *(_DWORD *)v52 = v9;
        v45 = v52 + 4;
        while (v44 != v46)
        {
          v54 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v52 - 1) = v54;
          v52 -= 4;
        }
        v57 = v52;
        v58 = v45;
        v59 = v53;
        if (v46)
          operator delete(v46);
        goto LABEL_72;
      }
LABEL_79:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_73:
  kaldi::quasar::PhoneIdsAndDurationsToString((uint64_t *)&__p, &v57, (uint64_t)v4, (uint64_t)this + 120, (uint64_t *)this + 30);
  v63 = v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (v57)
  {
    v58 = (char *)v57;
    operator delete(v57);
  }
  if (__p)
  {
    v61 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADEA79E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char *a20)
{
  a20 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinEditDistance<std::string>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::vector<int>::pointer v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 **v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v39;
  unint64_t v40;
  std::vector<int> v41;
  std::vector<int> v42;

  v3 = *a1;
  v2 = a1[1];
  v40 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  std::vector<int>::vector(&v42, (int)v40 + 1);
  std::vector<int>::vector(&v41, (int)v40 + 1);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3);
  begin = v42.__begin_;
  end = v42.__end_;
  if (v42.__end_ != v42.__begin_)
  {
    v7 = 0;
    v8 = v42.__end_ - v42.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      begin[v7] = v7;
      ++v7;
    }
    while (v8 != v7);
  }
  if ((int)v4 >= 1)
  {
    v39 = (v4 + 1);
    v9 = 1;
    do
    {
      v10 = v42.__begin_;
      v11 = *v42.__begin_ + 1;
      v12 = (char *)v41.__begin_;
      *v41.__begin_ = v11;
      if ((int)v40 >= 1)
      {
        v13 = *a1 + 24 * v9 - 24;
        v14 = *a2;
        v15 = 1;
        do
        {
          v16 = v10[v15 - 1];
          v17 = (unsigned __int8 **)(v14 + 24 * (v15 - 1));
          v18 = *(unsigned __int8 *)(v13 + 23);
          if ((v18 & 0x80u) == 0)
            v19 = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 23);
          else
            v19 = *(unsigned __int8 **)(v13 + 8);
          v20 = (unsigned __int8 *)*((unsigned __int8 *)v17 + 23);
          v21 = (char)v20;
          if ((char)v20 < 0)
            v20 = v17[1];
          if (v19 == v20)
          {
            if (v21 >= 0)
              v22 = (unsigned __int8 *)(v14 + 24 * (v15 - 1));
            else
              v22 = *v17;
            if ((v18 & 0x80) != 0)
            {
              v32 = memcmp(*(const void **)v13, v22, *(_QWORD *)(v13 + 8)) == 0;
            }
            else if (*(_BYTE *)(v13 + 23))
            {
              v23 = v18 - 1;
              v24 = (unsigned __int8 *)v13;
              do
              {
                v26 = *v24++;
                v25 = v26;
                v28 = *v22++;
                v27 = v28;
                v30 = v23-- != 0;
                v31 = v25 == v27;
                v32 = v25 == v27;
              }
              while (v31 && v30);
            }
            else
            {
              v32 = 1;
            }
          }
          else
          {
            v32 = 0;
          }
          v33 = v16 + !v32;
          v34 = v10[v15];
          if (v11 < v34)
            v34 = v11;
          if (v34 + 1 < v33)
            v11 = v34 + 1;
          else
            v11 = v33;
          *(_DWORD *)&v12[4 * v15++] = v11;
        }
        while (v15 != (_DWORD)v40 + 1);
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v42, v12, (uint64_t)v41.__end_, ((char *)v41.__end_ - v12) >> 2);
      ++v9;
    }
    while (v9 != v39);
    end = v42.__end_;
  }
  v35 = *(end - 1);
  if (v41.__begin_)
  {
    v41.__end_ = v41.__begin_;
    operator delete(v41.__begin_);
  }
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
  return v35;
}

void sub_1ADEA7C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  v3 = *(_QWORD *)(v2 + 4);
  a1[2] = 0;
  a1 += 2;
  *(_QWORD *)((char *)a1 - 12) = v3;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, 0, 0, 0);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  v8 = *(_QWORD *)(a3 + 1);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1ADEA7E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1)
{
  uint64_t v1[2];
  _OWORD v2[2];
  uint64_t v3;
  char *v4;
  _OWORD v5[2];
  char v6;
  void **v7;

  v3 = a1;
  v4 = &v6;
  memset(v5, 0, sizeof(v5));
  v1[0] = a1;
  v1[1] = (uint64_t)&v6;
  memset(v2, 0, sizeof(v2));
  fst::StateMap<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, v1);
  v7 = (void **)v2;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)v5;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1ADEA7EF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v1;
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(_QWORD *)(v3 - 40) = v4;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One();
    *(_DWORD *)v2 = *(_DWORD *)v3;
    *(_QWORD *)(v2 + 4) = *(_QWORD *)(v3 + 4);
    fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One(void)::one = v2;
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::One(void)::one;
}

void sub_1ADEA7FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::compose(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  void *v11;
  uint64_t v12;
  char v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v6 = FLAGS_fst_default_cache_gc;
  v7 = FLAGS_fst_default_cache_gc_limit;
  v8 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(v8, a2, 0, 1);
  v13[0] = v6;
  v14 = v7;
  v15 = 0;
  v16 = 0;
  v17 = v8;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v11 = &unk_1E5D19320;
  v12 = fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v13);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 168))(a3, &v11);
  v11 = &unk_1E5D26968;
  result = v12;
  if (v12)
  {
    v10 = *(_DWORD *)(v12 + 56) - 1;
    *(_DWORD *)(v12 + 56) = v10;
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADEA80E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
    fst::NbestAsFsts<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a10);
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, int *a6, int a7, char a8)
{
  int v16;
  uint64_t v17;
  void *__p;
  _BYTE *v19;
  uint64_t v20;
  _DWORD v21[5];
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  _QWORD v34[9];
  uint64_t v35[3];

  memset(v35, 0, sizeof(v35));
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>((uint64_t)v34, a1, (uint64_t)v35);
  v16 = *a6;
  v17 = *(_QWORD *)(a6 + 1);
  v19 = 0;
  v20 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a6 + 2), *((_QWORD *)a6 + 3), (uint64_t)(*((_QWORD *)a6 + 3) - *((_QWORD *)a6 + 2)) >> 2);
  *(_QWORD *)v21 = v34;
  *(_QWORD *)&v21[3] = 0x3A800000FFFFFFFFLL;
  v22 = 0;
  v23 = a3;
  v24 = a4;
  v25 = 0;
  v26 = a5;
  v27 = a8;
  v28 = v16;
  v29 = v17;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, __p, (uint64_t)v19, (v19 - (_BYTE *)__p) >> 2);
  v33 = a7;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a1, a2, v35, (uint64_t)v21);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  fst::AutoQueue<int>::~AutoQueue(v34);
  *(_QWORD *)v21 = v35;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
}

void sub_1ADEA827C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a25);
  a14 = v25 - 104;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

_QWORD *fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  *(_DWORD *)a1 = *(_DWORD *)v2;
  v3 = *(_QWORD *)(v2 + 4);
  a1[2] = 0;
  a1 += 2;
  *(_QWORD *)((char *)a1 - 12) = v3;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, 0, 0, 0);
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *(_DWORD *)a3 = *(_DWORD *)v3;
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(v3 + 4);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 16), *(const void **)(v3 + 16), *(_QWORD *)(v3 + 24), (uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 2);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D25940;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

kaldi::quasar::WordConf *kaldi::quasar::WordConf::WordConf(kaldi::quasar::WordConf *this)
{
  char *v2;
  std::string *v3;
  char *v4;
  char *v5;
  std::string *v6;
  char *v7;
  uint64_t FeatureMap;
  const std::string *v9;
  const std::string *v10;
  std::string *v11;

  *((_OWORD *)this + 3) = 0u;
  v2 = (char *)this + 48;
  *((_OWORD *)this + 6) = 0u;
  v3 = (std::string *)((char *)this + 96);
  *((_QWORD *)this + 21) = 0;
  v4 = (char *)this + 168;
  v5 = (char *)this + 24;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  v6 = (std::string *)((char *)this + 72);
  v7 = (char *)this + 120;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  FeatureMap = kaldi::quasar::Features::GetFeatureMap(this);
  std::vector<float>::resize((uint64_t)v4, *(_QWORD *)(FeatureMap + 24), &kaldi::quasar::kConfidenceFeatureDefaultLow);
  v9 = (const std::string *)MEMORY[0x1AF44C914](v2, "INIT");
  std::string::operator=((std::string *)this, v9);
  MEMORY[0x1AF44C914](v5, "NULL");
  v10 = (const std::string *)MEMORY[0x1AF44C914](v7, "");
  v11 = std::string::operator=(v3, v10);
  std::string::operator=(v6, v11);
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 18) = -1;
  *((_QWORD *)this + 19) = -1;
  *((_QWORD *)this + 20) = -1;
  *((_DWORD *)this + 48) = -1082130432;
  return this;
}

void sub_1ADEA84E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a2);
  v10 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v2 + 224) = v12;
    operator delete(v12);
  }
  v13 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v2 + 176) = v13;
    operator delete(v13);
  }
  if (*(char *)(v2 + 143) < 0)
    operator delete(*v7);
  if (*(char *)(v2 + 119) < 0)
    operator delete(*v6);
  if (*(char *)(v2 + 95) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::WordConf::WordConf(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t FeatureMap;
  const std::string *v7;
  int v8;
  _DWORD *v9;
  int v10;
  std::locale::id *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  unsigned __int8 v14;
  _QWORD *v15;
  int64_t size;
  std::string *p_str;
  _BYTE *v18;
  std::string *v19;
  _BYTE *v20;
  std::string::size_type v21;
  int64_t v22;
  std::string *v23;
  _BYTE *v24;
  size_t v25;
  std::string *v26;
  _BYTE *v27;
  std::string::size_type v28;
  size_t v29;
  std::string *v30;
  unint64_t v31;
  char *v32;
  kaldi::quasar::Features *v33;
  double v34;
  void *v35;
  float v36;
  std::string *v37;
  std::string::size_type v38;
  int v39;
  _QWORD *v41;
  unsigned __int8 *v42;
  kaldi::quasar::Features *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  kaldi::quasar::Features *v49;
  _QWORD *v50;
  _QWORD *v51;
  const std::string *v52;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  std::string v58;
  std::string v59;
  _BYTE v60[15];
  char v61;
  std::string __str;
  _BYTE v63[9];

  *(_OWORD *)(a1 + 48) = 0u;
  v4 = a1 + 48;
  *(_QWORD *)(a1 + 168) = 0;
  v5 = (_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  FeatureMap = kaldi::quasar::Features::GetFeatureMap((kaldi::quasar::Features *)a1);
  std::vector<float>::resize((uint64_t)v5, *(_QWORD *)(FeatureMap + 24), &kaldi::quasar::kConfidenceFeatureDefaultLow);
  v7 = (const std::string *)MEMORY[0x1AF44C914](v4, "MODEL");
  std::string::operator=((std::string *)a1, v7);
  v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 4)
    {
LABEL_7:
      memset(&__str, 0, sizeof(__str));
      v61 = 0;
      kaldi::Input::Input(v60, a2, &v61);
      v10 = 0;
      v11 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      while (1)
      {
        v12 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v60);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
        v13 = std::locale::use_facet((const std::locale *)&v59, v11);
        v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v59);
        v15 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)&__str, v14);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
        {
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Read in Confidence Model , added ", 33);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" features", 9);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
          }
          kaldi::Input::~Input((kaldi::Input *)v60);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          return a1;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        v18 = (char *)p_str + size;
        if (size >= 1)
        {
          v19 = p_str;
          do
          {
            v20 = memchr(v19, 32, size);
            if (!v20)
              break;
            if (*v20 == 32)
              goto LABEL_21;
            v19 = (std::string *)(v20 + 1);
            size = v18 - (_BYTE *)v19;
          }
          while (v18 - (_BYTE *)v19 > 0);
        }
        v20 = v18;
LABEL_21:
        if (v20 == v18)
          v21 = -1;
        else
          v21 = v20 - (_BYTE *)p_str;
        std::string::basic_string(&v59, &__str, 0, v21, (std::allocator<char> *)v63);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v22 = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &__str;
        else
          v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v24 = (char *)v23 + v22;
        if (v22 < 1)
        {
          v28 = 0;
        }
        else
        {
          v25 = v22;
          v26 = v23;
          do
          {
            v27 = memchr(v26, 32, v25);
            if (!v27)
              break;
            if (*v27 == 32)
              goto LABEL_36;
            v26 = (std::string *)(v27 + 1);
            v25 = v24 - (_BYTE *)v26;
          }
          while (v24 - (_BYTE *)v26 > 0);
          v27 = (char *)v23 + v22;
LABEL_36:
          if (v27 == v24)
            v28 = 0;
          else
            v28 = v27 - (_BYTE *)v23 + 1;
          v29 = v22;
          v30 = v23;
          do
          {
            v31 = (unint64_t)memchr(v30, 32, v29);
            if (!v31)
              break;
            if (*(_BYTE *)v31 == 32)
              goto LABEL_46;
            v30 = (std::string *)(v31 + 1);
            v29 = v24 - (_BYTE *)v30;
          }
          while (v24 - (_BYTE *)v30 > 0);
        }
        v31 = (unint64_t)v23 + v22;
LABEL_46:
        v32 = (char *)v23 + ~v31;
        if ((_BYTE *)v31 == v24)
          v32 = 0;
        std::string::basic_string(&v58, &__str, v28, (std::string::size_type)&v32[v22], (std::allocator<char> *)v63);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v58.__r_.__value_.__r.__words[0];
          v34 = atof(v58.__r_.__value_.__l.__data_);
          operator delete(v35);
        }
        else
        {
          v34 = atof((const char *)&v58);
        }
        v36 = v34;
        if ((*((_BYTE *)&v59.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (v59.__r_.__value_.__l.__size_ == 8 && *(_QWORD *)v59.__r_.__value_.__l.__data_ == 0x746E6174736E6F63)
            goto LABEL_76;
          if (v59.__r_.__value_.__l.__size_ != 9)
            goto LABEL_63;
          v37 = (std::string *)v59.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(v59.__r_.__value_.__r.__words[2]) == 8)
          {
            if (v59.__r_.__value_.__r.__words[0] != 0x746E6174736E6F63)
              goto LABEL_63;
            goto LABEL_76;
          }
          if (HIBYTE(v59.__r_.__value_.__r.__words[2]) != 9)
            goto LABEL_63;
          v37 = &v59;
        }
        v38 = v37->__r_.__value_.__r.__words[0];
        v39 = v37->__r_.__value_.__s.__data_[8];
        if (v38 != 0x7065637265746E69 || v39 != 116)
        {
LABEL_63:
          v41 = (_QWORD *)kaldi::quasar::Features::GetFeatureMap(v33);
          v42 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v41, (unsigned __int8 *)&v59);
          v43 = (kaldi::quasar::Features *)kaldi::quasar::Features::GetFeatureMap((kaldi::quasar::Features *)v42);
          if (!v42)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
            v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Feature ", 8);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = &v59;
            else
              v55 = (std::string *)v59.__r_.__value_.__r.__words[0];
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            else
              v56 = v59.__r_.__value_.__l.__size_;
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" is not in the model definition.", 32);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
          }
          v44 = (_QWORD *)kaldi::quasar::Features::GetFeatureMap(v43);
          *(float *)(*v5
                   + 4
                   * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v44, (unsigned __int8 *)&v59)+ 10)) = v36;
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, 3);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Setting ", 8);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v46 = &v59;
            else
              v46 = (std::string *)v59.__r_.__value_.__r.__words[0];
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            else
              v47 = v59.__r_.__value_.__l.__size_;
            v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
            v49 = (kaldi::quasar::Features *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" to ", 4);
            v50 = (_QWORD *)kaldi::quasar::Features::GetFeatureMap(v49);
            std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v50, (unsigned __int8 *)&v59);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
          }
          ++v10;
          goto LABEL_73;
        }
LABEL_76:
        *(float *)(a1 + 196) = v36;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Setting constant term/intercept to ", 35);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
        }
LABEL_73:
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
      }
    }
    v9 = *(_DWORD **)a2;
  }
  else
  {
    v9 = (_DWORD *)a2;
    if (v8 != 4)
      goto LABEL_7;
  }
  if (*v9 != 1280070990)
    goto LABEL_7;
  v52 = (const std::string *)MEMORY[0x1AF44C914](v4, "NULL");
  std::string::operator=((std::string *)a1, v52);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"No Confidence Model Supplied.", 29);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v58);
  }
  *(_DWORD *)(a1 + 196) = -1027080192;
  return a1;
}

void sub_1ADEA8BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v16;
  void *v17;

  if (*(char *)(v14 - 153) < 0)
    operator delete(*(void **)(v14 - 176));
  kaldi::Input::~Input((kaldi::Input *)(v14 - 152));
  if (*(char *)(v14 - 113) < 0)
    operator delete(*(void **)(v14 - 136));
  a12 = (void **)(v12 + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  v16 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 224) = v16;
    operator delete(v16);
  }
  v17 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 176) = v17;
    operator delete(v17);
  }
  if (*(char *)(v12 + 143) < 0)
    operator delete(*(void **)(v12 + 120));
  if (*(char *)(v12 + 119) < 0)
    operator delete(*(void **)(v12 + 96));
  if (*(char *)(v12 + 95) < 0)
    operator delete(*(void **)(v12 + 72));
  if (*(char *)(v12 + 71) < 0)
    operator delete(*a11);
  if (*(char *)(v12 + 47) < 0)
    operator delete(*(void **)(v12 + 24));
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

void sub_1ADEA8BE4()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 176));
  JUMPOUT(0x1ADEA8C1CLL);
}

void sub_1ADEA8C18()
{
  JUMPOUT(0x1ADEA8C20);
}

void kaldi::quasar::PhoneIdsAndDurationsToString(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void ***v12;
  std::string::size_type size;
  char v14;
  void **v15;
  size_t v16;
  std::string *v17;
  _BYTE *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  char v29;
  __int128 *v30;
  size_t v31;
  std::string *v32;
  __int128 *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  char v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  __int128 *v48[3];
  std::string v49;
  void **v50[5];

  v50[2] = *(void ***)MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  std::vector<std::string>::__clear[abi:ne180100](a5);
  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10 && a2[1] - *a2 == v10 - v9)
  {
    v11 = 0;
    v12 = (void ***)(a4 + 8);
    do
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(&v49, a3, *(int *)(v9 + 4 * v11));
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      v14 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v49.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_76;
      memset(v48, 0, sizeof(v48));
      kaldi::SplitStringToVector(&v49, "_", 0, (uint64_t)v48);
      if (*(char *)(a4 + 23) < 0)
      {
        v15 = *v12;
        if (*v12)
          goto LABEL_14;
      }
      else if (*(_BYTE *)(a4 + 23))
      {
        v15 = *v12;
LABEL_14:
        if (*(char *)(a4 + 23) >= 0)
          v16 = *(unsigned __int8 *)(a4 + 23);
        else
          v16 = (size_t)v15;
        std::string::basic_string[abi:ne180100]((uint64_t)&v43, v16 + 1);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v43;
        else
          v17 = (std::string *)v43.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if (*(char *)(a4 + 23) >= 0)
            v18 = (_BYTE *)a4;
          else
            v18 = *(_BYTE **)a4;
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
        v19 = *((char *)v48[0] + 23);
        if (v19 >= 0)
          v20 = (const std::string::value_type *)v48[0];
        else
          v20 = *(const std::string::value_type **)v48[0];
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v48[0] + 23);
        else
          v21 = *((_QWORD *)v48[0] + 1);
        v22 = std::string::append(&v43, v20, v21);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v44, "_");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v42, *(_DWORD *)(*a2 + 4 * v11));
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v42;
        else
          v26 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        else
          v27 = v42.__r_.__value_.__l.__size_;
        v28 = std::string::append(&v45, (const std::string::value_type *)v26, v27);
        v29 = 0;
        goto LABEL_56;
      }
      v30 = v48[0];
      if (*((char *)v48[0] + 23) >= 0)
        v31 = *((unsigned __int8 *)v48[0] + 23);
      else
        v31 = *((_QWORD *)v48[0] + 1);
      std::string::basic_string[abi:ne180100]((uint64_t)&v47, v31 + 1);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v47;
      else
        v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if (v31)
      {
        if (*((char *)v30 + 23) >= 0)
          v33 = v30;
        else
          v33 = *(__int128 **)v30;
        memmove(v32, v33, v31);
      }
      *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 95;
      std::to_string(&v46, *(_DWORD *)(*a2 + 4 * v11));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v46;
      else
        v34 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        v35 = v46.__r_.__value_.__l.__size_;
      v28 = std::string::append(&v47, (const std::string::value_type *)v34, v35);
      v29 = 1;
LABEL_56:
      v36 = v28->__r_.__value_.__r.__words[0];
      v50[0] = (void **)v28->__r_.__value_.__l.__size_;
      *(void ***)((char *)v50 + 7) = *(void ***)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
      v37 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_QWORD *)a4 = v36;
      *v12 = v50[0];
      *(void ***)(a4 + 15) = *(void ***)((char *)v50 + 7);
      *(_BYTE *)(a4 + 23) = v37;
      if ((v29 & 1) != 0)
      {
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_72;
        v38 = (void *)v47.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_72;
        v38 = (void *)v43.__r_.__value_.__r.__words[0];
      }
      operator delete(v38);
LABEL_72:
      v39 = a5[1];
      if (v39 >= a5[2])
      {
        v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, v48[0]);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v48[0]);
        v40 = v39 + 24;
      }
      a5[1] = v40;
      v50[0] = (void **)v48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v50);
      v14 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
LABEL_76:
      if (v14 < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      ++v11;
      v9 = *a1;
    }
    while (v11 < (a1[1] - *a1) >> 2);
  }
}

void sub_1ADEA90BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  uint64_t v49;

  if (a42 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  *(_QWORD *)(v49 - 120) = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 120));
  if (*(char *)(v49 - 129) < 0)
    operator delete(*(void **)(v49 - 152));
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26968;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v7;
  fst *v8;
  _QWORD *v9;
  char v11;
  _BYTE v12[12];
  void *__p;
  _BYTE *v14;

  *(_QWORD *)a1 = &unk_1E5D1BDA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v12);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)v12;
  *(_QWORD *)(a1 + 68) = *(_QWORD *)&v12[4];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), __p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
  *(_DWORD *)(a1 + 104) = -1;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  *(_BYTE *)(a1 + 114) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool((_QWORD *)(a1 + 120), 1);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    if (v7 == 1)
    {
      *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
    }
    else if (v7 != 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(v12, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(v12, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)v12);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (SHIBYTE(__p) < 0)
        operator delete(*(void **)v12);
      *(_DWORD *)(a1 + 32) = 3;
      *(_BYTE *)(a1 + 114) = 1;
    }
  }
  return a1;
}

void sub_1ADEA9370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  _QWORD *v19;
  void **v20;
  quasar::Bitmap *v21;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  v19[15] = &unk_1E5D19698;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(v19 + 16);
  quasar::Bitmap::~Bitmap(v21);
  v23 = *v20;
  if (*v20)
  {
    v19[11] = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19698;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19698;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADEA94BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4012E4573CLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 114))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Next_(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 112))
  {
    *(_BYTE *)(result + 112) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Final_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19698;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADEA9674(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Size()
{
  return 40;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A650;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADEA975C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A650;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::Size()
{
  return 48;
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  quasar::Bitmap *v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;

  *a1 = &unk_1E5D1BDA8;
  v2 = (_QWORD *)a1[3];
  v3 = (quasar::Bitmap *)(a1 + 15);
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v4 = (_DWORD *)v2[3];
      if (v4)
        --*v4;
    }
    v2[5] = a1[22];
    a1[22] = v2;
  }
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  a1[15] = &unk_1E5D19698;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Link>::~MemoryArena(a1 + 16);
  quasar::Bitmap::~Bitmap(v3);
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D1BDA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 68) = v5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::MemoryPool((_QWORD *)(a1 + 120), 1);
  return a1;
}

void sub_1ADEA99A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 114) = 1;
    }
    v6 = *(_QWORD **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD **)(v3 + 24);
    }
    else
    {
      v7 = *(_QWORD **)(v3 + 176);
      if (v7)
      {
        *(_QWORD *)(v3 + 176) = v7[5];
      }
      else
      {
        v7 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((_QWORD *)(v3 + 128), 1);
        v7[5] = 0;
      }
      v8 = *(_QWORD *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, a2, v7);
      *(_QWORD *)(v3 + 24) = v7;
    }
    if (*v7)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 80))(*v7, 16, 16);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 104) = a2;
  }
  return result;
}

void sub_1ADEA9B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 113) = 1;
  if (*(_BYTE *)(a1 + 114))
  {
    result = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 112) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 112) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Search(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  unint64_t v30;

  v2 = **(_QWORD **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = 2;
    else
      v3 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v4 = *(_QWORD **)(a1 + 24);
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 56))(*v4);
    else
      v4[4] = 0;
    while (1)
    {
      v14 = *(_QWORD **)(a1 + 24);
      if (*v14)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14) & 1) != 0)
          return 0;
      }
      else if (v14[4] >= v14[2])
      {
        return 0;
      }
      v15 = *(uint64_t **)(a1 + 24);
      v16 = *v15;
      if (*(_DWORD *)(a1 + 32))
      {
        v17 = v16 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) : v15[1] + 56 * v15[4];
        v18 = (_DWORD *)(v17 + 4);
      }
      else
      {
        v18 = (_DWORD *)(v16 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16) : v15[1] + 56 * v15[4]);
      }
      v19 = *(_DWORD *)(a1 + 40);
      v20 = *v18 <= v19 ? 0 : 7;
      if (*v18 == v19)
        v20 = 1;
      if (v20)
        break;
      v21 = *(_QWORD **)(a1 + 24);
      if (*v21)
        (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 40))(*v21);
      else
        ++v21[4];
    }
    result = 0;
    if (v20 == 1)
      return 1;
    return result;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v6 = 0;
LABEL_53:
    v23 = *(uint64_t **)(a1 + 24);
    result = *v23;
    if (*v23)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v23[4] = v6;
    }
    return result;
  }
  v6 = 0;
  while (1)
  {
    v7 = (v5 + v6) >> 1;
    v8 = *(_QWORD **)(a1 + 24);
    if (*v8)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    else
      v8[4] = v7;
    v9 = *(uint64_t **)(a1 + 24);
    v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 56 * v9[4];
      v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 56 * v9[4]);
    }
    v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13)
      break;
    v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5)
      goto LABEL_53;
  }
  if (*v12 < v13)
  {
    v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    v24 = *(_QWORD **)(a1 + 24);
    --v7;
    if (*v24)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v24 + 64))(*v24, v7);
    else
      v24[4] = v7;
    v25 = *(uint64_t **)(a1 + 24);
    v26 = *v25;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v26)
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
      else
        v27 = v25[1] + 56 * v25[4];
      v28 = (_DWORD *)(v27 + 4);
    }
    else if (v26)
    {
      v28 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    }
    else
    {
      v28 = (_DWORD *)(v25[1] + 56 * v25[4]);
    }
    if (*v28 != *(_DWORD *)(a1 + 40))
    {
      v29 = *(_QWORD **)(a1 + 24);
      v30 = v7 + 1;
      if (*v29)
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v29 + 64))(*v29, v30);
      else
        v29[4] = v30;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(uint64_t a1)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 112))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 113))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
  {
    if (v4)
      v6 = 2;
    else
      v6 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6, 15);
    v4 = *(_DWORD *)(a1 + 32);
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *v7;
  if (v4)
  {
    if (v8)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    else
      v9 = v7[1] + 56 * v7[4];
    v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
  else
  {
    v10 = (_DWORD *)(v7[1] + 56 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 112))
    return a1 + 56;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 80))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 24),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  }
  else
  {
    return v3[1] + 56 * v3[4];
  }
}

void fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26968;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFst(v4, a1, a2);
  return v4;
}

void sub_1ADEAA214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADEAA2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADEAA3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1FF68;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1BFE8;
  *a2 = v4;
  return result;
}

void sub_1ADEAA490(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::GallicArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,(fst::GallicType)3>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1, a2);
}

uint64_t fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  char v18;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(v6, a1, a2, a3);
  if (!*(_BYTE *)(a3 + 56))
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x200000000, 1);
    if (((v7 | (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x200000000, 1)) & 0x200000000) == 0)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: Weights must be a commutative semiring: ", 52);
      v11 = fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type();
      v12 = *(char *)(v11 + 23);
      if (v12 >= 0)
        v13 = v11;
      else
        v13 = *(_QWORD *)v11;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v11 + 23);
      else
        v14 = *(_QWORD *)(v11 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
      if (v17 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(v6 + 8) |= 4uLL;
    }
  }
  return v6;
}

void sub_1ADEAA634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void *__p[2];
  unsigned __int8 v8;
  std::string v9;
  char __s[2];

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Type();
    std::operator+<char>();
    strcpy(__s, "4");
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    if ((v8 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v8 & 0x80u) == 0)
      v4 = v8;
    else
      v4 = (std::string::size_type)__p[1];
    v5 = std::string::append(&v9, (const std::string::value_type *)v3, v4);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if ((char)v8 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type(void)::type = v2;
  }
  return fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Type(void)::type;
}

void sub_1ADEAA794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  MEMORY[0x1AF44D190](v21, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase(a1, a2, a3, (char *)a4) = &unk_1E5D1D9A0;
  v8 = *(__n128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__n128 *)operator new();
    fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1ADEAA9AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl(a1, a4);
  *v7 = &unk_1E5D20708;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1ADEAAA64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1ADEAABA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1ADEAAD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C402C4AA645);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  __n128 v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  void *v16;
  _BYTE *v17;
  float v18;
  float v19[3];
  void *__p;
  _BYTE *v21;
  float v22;
  float v23[3];
  void *v24;
  _BYTE *v25;
  float v26;
  float v27;
  float v28;
  float v29;

  v6 = *(_QWORD *)(a1[22] + 80);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  (*(void (**)(float *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1[18] + 8) + 32))(&v22, *(_QWORD *)(a1[18] + 8), v8);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v18);
  *(float *)&v14 = v22;
  v29 = v18;
  v9.n128_f32[0] = v22;
  v10 = v22 == v18
     && (v29 = v23[1], *(float *)&v14 = v23[0], v27 = v19[1], v28 = v19[0], v9.n128_f32[0] = v23[0], v23[0] == v19[0])
     && (v9.n128_f32[0] = v29, v29 == v27)
     && v25 - (_BYTE *)v24 == v21 - (_BYTE *)__p
     && memcmp(v24, __p, v25 - (_BYTE *)v24) == 0;
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    *(float *)a3 = v22;
    *(_QWORD *)((char *)a3 + 4) = *(_QWORD *)v23;
    a3[3] = 0;
    a3[4] = 0;
    a3[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 2, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
  }
  else
  {
    v11 = v7[1];
    (*(void (**)(float *__return_ptr, _QWORD, uint64_t, __n128))(**(_QWORD **)(a1[19] + 8) + 32))(&v18, *(_QWORD *)(a1[19] + 8), v11, v9);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v14);
    v29 = v18;
    v28 = *(float *)&v14;
    v12 = v18 == *(float *)&v14
       && (v28 = v19[1], v29 = v19[0], v27 = *((float *)&v14 + 1), v26 = v15, v19[0] == *((float *)&v14 + 1))
       && v28 == v26
       && v21 - (_BYTE *)__p == v17 - (_BYTE *)v16
       && memcmp(__p, v16, v21 - (_BYTE *)__p) == 0;
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
    if (v12)
    {
      *(float *)a3 = v18;
      *(_QWORD *)((char *)a3 + 4) = *(_QWORD *)v19;
      a3[3] = 0;
      a3[4] = 0;
      a3[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 2, __p, (uint64_t)v21, (v21 - (_BYTE *)__p) >> 2);
    }
    else
    {
      v13 = a1[17];
      LOBYTE(v14) = *(_BYTE *)(v6 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetState(v13, v8, v11, &v14);
      fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)&v22, (uint64_t)&v18, a3);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_1ADEAB074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v9[8];
  unint64_t v10;

  *(_QWORD *)a1 = &unk_1E5D22860;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B758;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *a2;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  v5 = v4;
  if (!v4)
  {
    v5 = operator new();
    v6 = *((_QWORD *)a2 + 1);
    v9[0] = *a2;
    v10 = v6;
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorCacheStore((_QWORD *)v5, v9);
    v7 = v10;
    *(_BYTE *)(v5 + 72) = v10 == 0;
    *(_DWORD *)(v5 + 76) = -1;
    *(_QWORD *)(v5 + 80) = 0;
    *(_BYTE *)(v5 + 88) = v9[0];
    if (v7 <= 0x1FA0)
      v7 = 8096;
    *(_QWORD *)(v5 + 96) = v7;
    *(_BYTE *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 112) = 0;
    v4 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(a1 + 120) = v5;
  *(_BYTE *)(a1 + 128) = v4 == 0;
  return a1;
}

void sub_1ADEAB1E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  const fst::SymbolTable *v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)&__str);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
  result = *(_QWORD *)(a1 + 48);
  if (result != v14)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v14)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

void sub_1ADEAB3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B758;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D22860;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADEAB5B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 != a1[1])
  {
    v3 = 0;
    v2 = a1[1];
    do
    {
      fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(_QWORD *)(v2 + 8 * v3++));
      v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

void fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(uint64_t a1)
{
  void *v2;
  void **v3;

  if (a1)
  {
    v3 = (void **)(a1 + 56);
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v2);
    }
    operator delete((void *)a1);
  }
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(v6, a2, 1, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SortedMatcher(a5, a3, 0, 1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1ADEAB794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4012E4573CLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D9A0;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    v3 = v2[1];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1AF44D190](v2, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;
  uint64_t v7;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D9A0;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD **)(a2 + 136);
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  v4[1] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[1] + 16))(v5[1], 1);
  v4[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  v4[3] = -1;
  *((_BYTE *)v4 + 32) = -1;
  *(_QWORD *)(a1 + 136) = v4;
  v6 = *(__n128 *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 32))(v6.n128_u64[0], v6);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
  v7 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v7, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v7;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1ADEAB984(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFstImplBase(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl((uint64_t)a1, a2, 1u);
  *(_QWORD *)v4 = &unk_1E5D20708;
  std::string::operator=((std::string *)(v4 + 16), (const std::string *)(a2 + 16));
  a1[1] = a1[1] & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = a1[5];
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    a1[5] = v7;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a1[6];
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    a1[6] = v10;
  }
  return a1;
}

void sub_1ADEABAC8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D22860;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B758;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADEABC54(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

char *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 8;
  if (a2 >= (unint64_t)((v7 - v6) >> 3))
  {
    v13 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v5, a2 + 1, &v13);
  }
  else
  {
    v8 = *(char **)(v6 + 8 * a2);
    if (v8)
      return v8;
  }
  v8 = (char *)operator new(0x58uLL);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(v8);
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v8;
  if (*(_BYTE *)a1)
  {
    v9 = operator new(0x18uLL);
    v9[4] = a2;
    v11 = *(_QWORD *)(a1 + 32);
    v10 = (_QWORD *)(a1 + 32);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
    ++v10[2];
  }
  return v8;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x58uLL);
        fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>>((_QWORD *)(a1 + 56), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
  *(_QWORD *)(a1 + 80) = *(unsigned int *)(a2 + 80);
  return a1;
}

void sub_1ADEABFFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADEAC07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v4, v6);
      v6 += 56;
      v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADEAC130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  v4 = *(_QWORD *)(a3 + 12);
  *(_QWORD *)(a2 + 24) = 0;
  v5 = a2 + 24;
  *(_QWORD *)(a2 + 12) = v4;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 24), *(const void **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(a3 + 48);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 32);
    if (v3)
    {
      *(_QWORD *)(v1 - 24) = v3;
      operator delete(v3);
    }
    v1 -= 56;
  }
}

void fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::SetState(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  float v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  float v15;
  void *v16;
  _BYTE *v17;
  float v18;
  int v19;
  float v20;
  int v21;

  if (*(_DWORD *)(a1 + 24) != (_DWORD)a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(&v14, *(_QWORD *)(a1 + 16), a2);
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v10);
    v8 = 0;
    v21 = v14;
    v20 = *(float *)&v10;
    if (*(float *)&v14 == *(float *)&v10)
    {
      v21 = HIDWORD(v14);
      v20 = v15;
      v19 = HIDWORD(v10);
      v18 = v11;
      v8 = *((float *)&v14 + 1) == *((float *)&v10 + 1)
        && v20 == v18
        && v17 - (_BYTE *)v16 == v13 - (_BYTE *)__p
        && memcmp(v16, __p, v17 - (_BYTE *)v16) == 0;
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
    v9 = v6 == v7 && v8;
    *(_BYTE *)(a1 + 33) = v9;
    *(_BYTE *)(a1 + 34) = v7 == 0;
  }
}

void sub_1ADEAC3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 152) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1ADEAC4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t *v14;
  __int128 v15;
  void *__p;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;

  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(a7, a4);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v15);
  LODWORD(v19) = a8 - 1;
  HIDWORD(v19) = a8 << 31 >> 31;
  v20 = v15;
  v21 = *(_QWORD *)((char *)&v15 + 4);
  v23 = 0;
  v24 = 0;
  v22 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, __p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 2);
  v25 = a6;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, a7, &v19, a8);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a5 + 136))(a5, a6, &v15);
  while (1)
  {
    if (!(_QWORD)v15)
    {
      if (v18 >= (unint64_t)__p)
        goto LABEL_15;
LABEL_9:
      v14 = (uint64_t *)(*((_QWORD *)&v15 + 1) + 56 * v18);
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15 + 24))(v15))
      break;
    if (!(_QWORD)v15)
      goto LABEL_9;
    v14 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 32))();
LABEL_10:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, a7, v14, a8);
    if ((_QWORD)v15)
      (*(void (**)(_QWORD))(*(_QWORD *)v15 + 40))(v15);
    else
      ++v18;
  }
  if ((_QWORD)v15)
  {
    (*(void (**)(void))(*(_QWORD *)v15 + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17)
    --*(_DWORD *)v17;
LABEL_17:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArcs(a1, a2);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_1ADEAC6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, int a5)
{
  int *v10;
  _BOOL8 result;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char v16;
  unsigned __int8 *v17;
  char v18;
  int v19;
  char v20;
  int v21;
  char v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *__p;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  int v38;

  v10 = (int *)a4 + 1;
  if (!a5)
    v10 = (int *)a4;
  result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a3, *v10);
  if (result)
  {
    for (result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3);
          !result;
          result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
    {
      v12 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a3);
      v32 = *(_QWORD *)v12;
      v33 = *(_DWORD *)(v12 + 8);
      v34 = *(_QWORD *)(v12 + 12);
      v36 = 0;
      v37 = 0;
      v35 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, *(const void **)(v12 + 24), *(_QWORD *)(v12 + 32), (uint64_t)(*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24)) >> 2);
      v38 = *(_DWORD *)(v12 + 48);
      v25 = *a4;
      v26 = *((_DWORD *)a4 + 2);
      v27 = *(uint64_t *)((char *)a4 + 12);
      v29 = 0;
      v30 = 0;
      v13 = (const void *)a4[3];
      v14 = a4[4];
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
      v31 = *((_DWORD *)a4 + 12);
      if (a5)
      {
        v15 = *(unsigned __int8 **)(a1 + 136);
        if (HIDWORD(v25) != -1)
        {
          if ((_DWORD)v32 == -1)
          {
            v19 = v15[32];
            if (v19)
              v20 = -1;
            else
              v20 = 0;
            v24 = v20;
            if (v19)
              goto LABEL_34;
          }
          else
          {
            if (HIDWORD(v25))
              v16 = 0;
            else
              v16 = -1;
            v24 = v16;
            if (!HIDWORD(v25))
              goto LABEL_34;
          }
          goto LABEL_28;
        }
        if (!v15[33])
        {
          v24 = v15[34] ^ 1;
LABEL_28:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, (int *)&v25, (uint64_t)&v32, &v24);
        }
      }
      else
      {
        v17 = *(unsigned __int8 **)(a1 + 136);
        if (HIDWORD(v32) != -1)
        {
          if ((_DWORD)v25 == -1)
          {
            v21 = v17[32];
            if (v21)
              v22 = -1;
            else
              v22 = 0;
            v24 = v22;
            if (v21)
              goto LABEL_34;
          }
          else
          {
            if (HIDWORD(v32))
              v18 = 0;
            else
              v18 = -1;
            v24 = v18;
            if (!HIDWORD(v32))
              goto LABEL_34;
          }
          goto LABEL_33;
        }
        if (!v17[33])
        {
          v24 = v17[34] ^ 1;
LABEL_33:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, (int *)&v32, (uint64_t)&v25, &v24);
        }
      }
LABEL_34:
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (*(_BYTE *)(a3 + 112))
      {
        *(_BYTE *)(a3 + 112) = 0;
      }
      else
      {
        v23 = *(_QWORD **)(a3 + 24);
        if (*v23)
          (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 40))(*v23);
        else
          ++v23[4];
      }
    }
  }
  return result;
}

void sub_1ADEAC9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 7);
  v6 = *((_QWORD *)MutableState + 8) - v5;
  if (v6)
  {
    v7 = v6 / 56;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 48);
    do
    {
      v11 = *v9;
      v9 += 14;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 20) |= 0xAu;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, int *a3, uint64_t a4, char *a5)
{
  int v7;
  int v8;
  int v9;
  int Id;
  uint64_t *MutableState;
  int v12;
  uint64_t v13;
  void *__p;
  _BYTE *v15;
  _DWORD v16[3];
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;

  v7 = *(_DWORD *)(a4 + 48);
  LODWORD(v22) = a3[12];
  HIDWORD(v22) = v7;
  v23 = *a5;
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(a3 + 2), a4 + 8, &v12);
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v22, 1);
  v16[0] = v8;
  v16[1] = v9;
  v16[2] = v12;
  v17 = v13;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v18, __p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
  v21 = Id;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::PushArc(MutableState, (uint64_t)v16);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_1ADEACB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  float v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float *v11;
  std::vector<unsigned int>::pointer begin;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  float32x2_t v18;
  std::vector<unsigned int> v19;
  float v20;
  float v21;
  float v22;

  v6 = *(float *)a1;
  v7 = NAN;
  if (*(float *)a1 != -INFINITY)
  {
    v8 = *(float *)a2;
    v7 = NAN;
    if (*(float *)a2 != -INFINITY)
    {
      v9 = v8 == INFINITY || v6 == INFINITY;
      v10 = v6 + v8;
      if (v9)
        v7 = INFINITY;
      else
        v7 = v10;
    }
  }
  v18 = vadd_f32(*(float32x2_t *)(a1 + 4), *(float32x2_t *)(a2 + 4));
  v11 = (float *)fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
  *(float *)&v19.__begin_ = v7;
  v22 = 0.0;
  v22 = *v11;
  if (v7 == v22
    && (v22 = v18.f32[1],
        LODWORD(v19.__begin_) = v18.i32[0],
        v21 = 0.0,
        v21 = v11[1],
        v20 = 0.0,
        v20 = v11[2],
        v18.f32[0] == v21)
    && v22 == v20)
  {
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(a3);
  }
  else
  {
    memset(&v19, 0, sizeof(v19));
    std::vector<int>::resize(&v19, ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2)+ ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2));
    begin = v19.__begin_;
    v13 = *(_BYTE **)(a1 + 16);
    v14 = *(_BYTE **)(a1 + 24);
    v15 = v14 - v13;
    if (v14 != v13)
      memmove(v19.__begin_, v13, v14 - v13);
    v16 = *(_BYTE **)(a2 + 16);
    v17 = *(_BYTE **)(a2 + 24);
    if (v17 != v16)
      memmove((char *)begin + v15, v16, v17 - v16);
    *(float *)a3 = v7;
    *(float32x2_t *)((char *)a3 + 4) = v18;
    a3[3] = 0;
    a3[4] = 0;
    a3[2] = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3 + 2, v19.__begin_, (uint64_t)v19.__end_, v19.__end_ - v19.__begin_);
    if (v19.__begin_)
    {
      v19.__end_ = v19.__begin_;
      operator delete(v19.__begin_);
    }
  }
}

void sub_1ADEACD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  uint64_t v2;
  uint64_t v3;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero();
    *(_DWORD *)v2 = *(_DWORD *)v3;
    *(_QWORD *)(v2 + 4) = *(_QWORD *)(v3 + 4);
    fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero(void)::zero = v2;
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADEACE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero()
{
  unsigned __int8 v0;
  int32x2_t *v2;

  if ((v0 & 1) == 0
  {
    v2 = (int32x2_t *)operator new();
    *v2 = vdup_n_s32(0x7F800000u);
    v2[1].i32[0] = 2139095040;
    fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero(void)::zero = (uint64_t)v2;
  }
  return fst::PairWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Zero(void)::zero;
}

void sub_1ADEACEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 20);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 20) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + *(_QWORD *)(a1 + 112) + 88;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[9];
  v3 = (uint64_t)(a1 + 9);
  v5 = *(_QWORD *)(v3 - 8);
  if (v5 >= v4)
  {
    result = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1 + 7, a2);
  }
  else
  {
    std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(v3, *(_QWORD *)(v3 - 8), a2);
    result = v5 + 56;
    a1[8] = v5 + 56;
  }
  a1[8] = result;
  return result;
}

void sub_1ADEACFB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 20) |= 4u;
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve((uint64_t *)MutableState + 7, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 84))
  {
    *(_DWORD *)(v5 + 80) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 20) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 21))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 20);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 8) - *((_QWORD *)MutableState + 7) + 88;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 20);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 20) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADEAD45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Reset(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *__p;
  _BYTE *v5;

  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v2);
  *(_DWORD *)a1 = v2;
  *(_QWORD *)(a1 + 4) = v3;
  if (&v2 != (int *)a1)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), (char *)__p, (uint64_t)v5, (v5 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)(a1 + 56));
}

void sub_1ADEAD544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADEAD608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(a1, v7 - 56, v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1ADEAD744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,std::reverse_iterator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(_QWORD *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

uint64_t fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 16), *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  return a1;
}

void fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>::Delete(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(a1[7] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 19))
  {
    *((_DWORD *)a1 + 19) = -1;
    a1[10] = 0;
  }
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Delete(a1);
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Delete(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Destroy(*(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)));
  v2 = a1[6];
  *(_QWORD *)(a1[1] + 8 * *(int *)(a1[7] + 16)) = 0;
  v3 = (uint64_t *)a1[7];
  v5 = *v3;
  v4 = v3[1];
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)v3[1] = v5;
  a1[6] = v2 - 1;
  a1[7] = v4;
  operator delete(v3);
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::construct[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 56;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1ADEADA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  uint64_t v9;
  void *__p;
  _BYTE *v11;

  *(_QWORD *)a1 = &unk_1E5D1F900;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 144) + 16))(*(_QWORD *)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 152) + 16))(*(_QWORD *)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v8);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), __p, (uint64_t)v11, (v11 - (_BYTE *)__p) >> 2);
  *(_DWORD *)(a1 + 104) = -1;
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (a4 == 1)
    *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
  return a1;
}

void sub_1ADEADBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADEADC64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C402C4AA645);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != 4
        || (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 168))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(*(_QWORD *)(result + 32), *v3);
    result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetState(*(_QWORD *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 104) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v2 = (uint64_t *)(a1 + 40);
      v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    v2 = (uint64_t *)(a1 + 32);
    v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 48)
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(*(_QWORD *)(a1 + 32))
      && fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(*(_QWORD *)(a1 + 40));
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 56;
  else
    return a1 + 112;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD *)(result + 32);
      v1 = *(_QWORD *)(result + 40);
    }
    else
    {
      v1 = *(_QWORD *)(result + 32);
      v2 = *(_QWORD *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *a1 = &unk_1E5D1F900;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[17];
  if (v4)
  {
    a1[18] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  char v9;
  _BYTE v10[12];
  void *__p;
  _BYTE *v12;

  *(_QWORD *)a1 = &unk_1E5D1F900;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 16))(*(_QWORD *)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 40) + 16))(*(_QWORD *)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(v10);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)v10;
  *(_QWORD *)(a1 + 68) = *(_QWORD *)&v10[4];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), __p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 2);
  *(_DWORD *)(a1 + 104) = -1;
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(v10, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(v10, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)v10);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (SHIBYTE(__p) < 0)
      operator delete(*(void **)v10);
    *(_BYTE *)(a1 + 168) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
  return a1;
}

void sub_1ADEAE154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  uint64_t v19;
  void **v20;
  void **v21;
  void *v23;
  void *v24;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  v23 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 144) = v23;
    operator delete(v23);
  }
  v24 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v19 + 88) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  int *v10;

  result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a3, a2);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a3);
    v10 = (int *)(v9 + 4);
    if (v8)
      v10 = (int *)v9;
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char matched;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;

  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a2)
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
    {
      if (*(_BYTE *)(a2 + 112))
      {
        *(_BYTE *)(a2 + 112) = 0;
      }
      else
      {
        v6 = *(_QWORD **)(a2 + 24);
        if (*v6)
          (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
        else
          ++v6[4];
      }
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a2))
      {
        v7 = *(_DWORD *)(a1 + 28);
        v8 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a2);
        v9 = (int *)(v8 + 4);
        if (v7)
          v9 = (int *)v8;
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Find(a3, *v9))
        {
          break;
        }
        if (*(_BYTE *)(a2 + 112))
        {
          *(_BYTE *)(a2 + 112) = 0;
        }
        else
        {
          v10 = *(_QWORD **)(a2 + 24);
          if (*v10)
            (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 40))(*v10);
          else
            ++v10[4];
        }
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Done(a3))
    {
      v11 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a2);
      v12 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Value(a3);
      if (*(_BYTE *)(a3 + 112))
      {
        *(_BYTE *)(a3 + 112) = 0;
      }
      else
      {
        v13 = *(_QWORD **)(a3 + 24);
        if (*v13)
          (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
        else
          ++v13[4];
      }
      v14 = *(unsigned int *)(a1 + 24);
      if (*(_DWORD *)(a1 + 28))
        v15 = v12;
      else
        v15 = v11;
      v25 = *(_QWORD *)v15;
      v26 = *(_DWORD *)(v15 + 8);
      v27 = *(_QWORD *)(v15 + 12);
      v29 = 0;
      v30 = 0;
      v28 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v28, *(const void **)(v15 + 24), *(_QWORD *)(v15 + 32), (uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 2);
      v31 = *(_DWORD *)(v15 + 48);
      if (!*(_DWORD *)(a1 + 28))
        v11 = v12;
      v18 = *(_QWORD *)v11;
      v19 = *(_DWORD *)(v11 + 8);
      v20 = *(_QWORD *)(v11 + 12);
      v22 = 0;
      v23 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v11 + 24), *(_QWORD *)(v11 + 32), (uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 2);
      v24 = *(_DWORD *)(v11 + 48);
      matched = fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, v14, &v25, &v18);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if ((matched & 1) != 0)
        return 1;
    }
  }
  return 0;
}

void sub_1ADEAE4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v10;
  uint64_t v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  char v15;

  v5 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 136);
  v6 = a3[1];
  if (v6 == -1)
  {
    if (v5[33])
      return 0;
    LOBYTE(v5) = v5[34] ^ 1;
  }
  else if (*a4 == -1)
  {
    v7 = 0;
    LODWORD(v5) = v5[32];
    if ((_DWORD)v5)
      return v7;
  }
  else
  {
    LOBYTE(v5) = 0;
    if (!v6)
      return 0;
  }
  v8 = a4[12];
  LODWORD(v14) = a3[12];
  HIDWORD(v14) = v8;
  v15 = (char)v5;
  *(_DWORD *)(a1 + 112) = *a3;
  *(_DWORD *)(a1 + 116) = a4[1];
  fst::Times<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>((uint64_t)(a3 + 2), (uint64_t)(a4 + 2), &v10);
  *(_DWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 124) = v11;
  if ((int *)(a1 + 120) != &v10)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 136), (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  v7 = 1;
  *(_DWORD *)(a1 + 160) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 176), &v14, 1);
  return v7;
}

void sub_1ADEAE5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  const void **v3;
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string v10;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    v3 = (const void **)fst::TropicalWeightTpl<float>::Type();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_LT_", v3, (void **)&v10.__r_.__value_.__l.__data_);
    v4 = fst::LatticeWeightTpl<float>::Type();
    v5 = *(char *)(v4 + 23);
    if (v5 >= 0)
      v6 = (const std::string::value_type *)v4;
    else
      v6 = *(const std::string::value_type **)v4;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v4 + 23);
    else
      v7 = *(_QWORD *)(v4 + 8);
    v8 = std::string::append(&v10, v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Type(void)::type = v2;
  }
  return fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>::Type(void)::type;
}

void sub_1ADEAE6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFstImplBase<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>,std::allocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(&v12, a1, a2);
    v7 = v12;
    v8 = v13;
    v10 = 0;
    v11 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v14, (uint64_t)v15, (v15 - (_BYTE *)v14) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final(a1, a2, a3);
}

void sub_1ADEAE7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::SetFinal(uint64_t a1, int a2, int *a3)
{
  char *MutableState;
  int v5;
  uint64_t v6;
  void *__p;
  _BYTE *v8;
  uint64_t v9;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v5 = *a3;
  v6 = *(_QWORD *)(a3 + 1);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 2);
  *(_DWORD *)MutableState = v5;
  *(_QWORD *)(MutableState + 4) = v6;
  if (MutableState != (char *)&v5)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 16, (char *)__p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 20) |= 9u;
}

void sub_1ADEAE8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v5 + 76) == a2)
    v6 = (uint64_t *)(v5 + 80);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v5 + 8) + 8 * (a2 + 1));
  v7 = *v6;
  *(_DWORD *)a3 = *(_DWORD *)v7;
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(v7 + 4);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a3 + 16), *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
}

unint64_t fst::TestProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADEAEA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<unsigned int>::size_type v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  const void *v23;
  size_t v24;
  _BYTE *v25;
  _BOOL4 v26;
  _BYTE *v27;
  int v28;
  std::vector<unsigned int>::pointer end;
  unsigned int *v30;
  std::vector<unsigned int>::pointer begin;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  std::vector<unsigned int>::pointer v39;
  unsigned int *v40;
  std::vector<unsigned int>::pointer v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  unsigned int *v47;
  unsigned int v48;
  const void *v49;
  size_t v50;
  unint64_t v51;
  std::vector<unsigned int>::pointer v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  std::vector<unsigned int>::pointer v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  __n128 v63;
  _BOOL4 v64;
  _BYTE *v65;
  __n128 v66;
  _BOOL4 v67;
  _BYTE *v68;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  float v74;
  void *__p;
  _BYTE *v76;
  uint64_t v77;
  float v78;
  void *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  std::vector<unsigned int> v89;
  std::vector<unsigned int> v90;
  uint64_t v91;
  _QWORD v92[2];
  unint64_t *v93;
  unint64_t *v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v97 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v91 = 0;
      v92[0] = 0;
      v92[1] = 0;
      v93 = &v97;
      fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(v7, &v91, 0);
      v9 = v97;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_175;
    v70 = a3;
    v12 = a2 & 0xC0000;
    v13 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v13 = 0x10425A850000;
    v14 = v9 | v13;
    v15 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v14 |= 0x100000uLL;
    v97 = v14;
    memset(&v90, 0, sizeof(v90));
    memset(&v89, 0, sizeof(v89));
    v88 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v86);
    v72 = 0;
    v71 = v7;
LABEL_12:
    if (!v86)
    {
      if ((int)v88 >= v87)
        goto LABEL_167;
      goto LABEL_17;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86))
    {
      if (v86)
      {
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v86 + 24))();
LABEL_18:
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v16);
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v90.__end_ = v90.__begin_;
        v89.__end_ = v89.__begin_;
        if (v12)
          std::vector<int>::reserve(&v90, v17);
        if (v15)
          std::vector<int>::reserve(&v89, v17);
        v85 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v16, &v81);
        v18 = 1;
        while (1)
        {
          if (v81)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81))
            {
              if (v81)
              {
                (*(void (**)(void))(*(_QWORD *)v81 + 8))();
              }
              else
              {
LABEL_110:
                if (v84)
                  --*(_DWORD *)v84;
              }
              v7 = v71;
              if (!v12
                || (std::__sort<std::__less<int,int> &,int *>(),
                    (std::vector<unsigned int>::pointer)((char *)v90.__end_ - (char *)v90.__begin_) < (std::vector<unsigned int>::pointer)5))
              {
LABEL_119:
                if (!v15)
                  goto LABEL_130;
LABEL_120:
                std::__sort<std::__less<int,int> &,int *>();
                if ((std::vector<unsigned int>::pointer)((char *)v89.__end_ - (char *)v89.__begin_) >= (std::vector<unsigned int>::pointer)5)
                {
                  v57 = v89.__end_ - v89.__begin_;
                  if (v57 <= 2)
                    v57 = 2;
                  v58 = v89.__begin_ + 1;
                  v59 = *v89.__begin_;
                  v60 = v57 - 1;
                  while (1)
                  {
                    v62 = *v58++;
                    v61 = v62;
                    if (v62 == v59)
                      break;
                    v59 = v61;
                    if (!--v60)
                      goto LABEL_130;
                  }
                  v97 = v97 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                }
                goto LABEL_130;
              }
              v51 = v90.__end_ - v90.__begin_;
              if (v51 <= 2)
                v51 = 2;
              v52 = v90.__begin_ + 1;
              v53 = *v90.__begin_;
              v54 = v51 - 1;
              while (1)
              {
                v56 = *v52++;
                v55 = v56;
                if (v56 == v53)
                  break;
                v53 = v55;
                if (!--v54)
                  goto LABEL_119;
              }
              v97 = v97 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
              if (v15)
                goto LABEL_120;
LABEL_130:
              if (v72 >= 1)
                v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v71 + 32))(&v81, v71, v16);
              fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v77);
              LODWORD(v73) = v81;
              v101 = *(float *)&v77;
              v63.n128_u32[0] = v81;
              if (*(float *)&v81 != *(float *)&v77
                || (LODWORD(v73) = HIDWORD(v81),
                    v101 = *(float *)&v82,
                    v100 = *((float *)&v77 + 1),
                    v99 = v78,
                    v63.n128_u32[0] = HIDWORD(v81),
                    *((float *)&v81 + 1) != *((float *)&v77 + 1))
                || (v63.n128_f32[0] = v101, v101 != v99))
              {
                v64 = 1;
                goto LABEL_136;
              }
              v65 = v79;
              if (v84 - (_BYTE *)v83 == v80 - (_BYTE *)v79)
              {
                v64 = memcmp(v83, v79, v84 - (_BYTE *)v83) != 0;
LABEL_136:
                v65 = v79;
                if (v79)
                {
LABEL_137:
                  v80 = v65;
                  operator delete(v65);
                }
              }
              else
              {
                v64 = 1;
                if (v79)
                  goto LABEL_137;
              }
              if (v64)
              {
                fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v77);
                LODWORD(v73) = v81;
                v101 = *(float *)&v77;
                v66.n128_u32[0] = v81;
                if (*(float *)&v81 != *(float *)&v77
                  || (LODWORD(v73) = HIDWORD(v81),
                      v101 = *(float *)&v82,
                      v100 = *((float *)&v77 + 1),
                      v99 = v78,
                      v66.n128_u32[0] = HIDWORD(v81),
                      *((float *)&v81 + 1) != *((float *)&v77 + 1))
                  || (v66.n128_f32[0] = v101, v101 != v99))
                {
                  v67 = 1;
                  goto LABEL_143;
                }
                v68 = v79;
                if (v84 - (_BYTE *)v83 == v80 - (_BYTE *)v79)
                {
                  v67 = memcmp(v83, v79, v84 - (_BYTE *)v83) != 0;
LABEL_143:
                  v68 = v79;
                  if (v79)
                  {
LABEL_144:
                    v80 = v68;
                    operator delete(v68);
                  }
                }
                else
                {
                  v67 = 1;
                  if (v79)
                    goto LABEL_144;
                }
                if (v67)
                  v97 = v97 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                ++v72;
              }
              else if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v71 + 40))(v71, v16, v63) != 1)
              {
                v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              }
              if (v83)
              {
                v84 = (char *)v83;
                operator delete(v83);
              }
              if (v93)
              {
                v94 = v93;
                operator delete(v93);
              }
              if (v86)
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v86 + 32))(v86, v66);
              else
                ++v88;
              goto LABEL_12;
            }
            if (v81)
            {
              v19 = (*(uint64_t (**)(void))(*(_QWORD *)v81 + 32))();
              goto LABEL_29;
            }
          }
          else if (v85 >= (unint64_t)v83)
          {
            goto LABEL_110;
          }
          v19 = v82 + 56 * v85;
LABEL_29:
          v20 = *(_DWORD *)v19;
          v21 = *(_DWORD *)v19;
          if (*(_DWORD *)v19 != *(_DWORD *)(v19 + 4))
          {
            v97 = v97 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
            v21 = *(_DWORD *)(v19 + 4);
          }
          if (v20 | v21)
          {
            if (v20)
            {
              if (!v21)
                goto LABEL_39;
              goto LABEL_35;
            }
            v22 = v97;
          }
          else
          {
            v22 = v97 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
          }
          v97 = v22 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
          if (!v21)
          {
LABEL_39:
            v97 = v97 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
            if ((v18 & 1) != 0)
              goto LABEL_44;
            goto LABEL_40;
          }
LABEL_35:
          if ((v18 & 1) != 0)
            goto LABEL_44;
LABEL_40:
          if (v20 < (int)v91)
            v97 = v97 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
          if (v21 < SHIDWORD(v91))
            v97 = v97 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::One(&v77);
          LODWORD(v73) = 0;
          LODWORD(v73) = *(_DWORD *)(v19 + 8);
          v101 = *(float *)&v77;
          if (*(float *)&v73 != *(float *)&v77)
            goto LABEL_49;
          LODWORD(v73) = 0;
          LODWORD(v73) = *(_DWORD *)(v19 + 12);
          v101 = 0.0;
          v101 = *(float *)(v19 + 16);
          v100 = *((float *)&v77 + 1);
          v99 = v78;
          if (*(float *)&v73 != *((float *)&v77 + 1)
            || v101 != v99
            || (v23 = *(const void **)(v19 + 24),
                v24 = *(_QWORD *)(v19 + 32) - (_QWORD)v23,
                v25 = v79,
                v24 != v80 - (_BYTE *)v79)
            || memcmp(v23, v79, v24))
          {
LABEL_49:
            fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v73);
            v101 = 0.0;
            v101 = *(float *)(v19 + 8);
            v100 = *(float *)&v73;
            if (v101 != *(float *)&v73
              || (v101 = 0.0,
                  v101 = *(float *)(v19 + 12),
                  v100 = 0.0,
                  v100 = *(float *)(v19 + 16),
                  v99 = *((float *)&v73 + 1),
                  v98 = v74,
                  v101 != *((float *)&v73 + 1))
              || v100 != v98)
            {
              v26 = 1;
              goto LABEL_53;
            }
            v49 = *(const void **)(v19 + 24);
            v50 = *(_QWORD *)(v19 + 32) - (_QWORD)v49;
            v27 = __p;
            if (v50 == v76 - (_BYTE *)__p)
            {
              v26 = memcmp(v49, __p, v50) != 0;
LABEL_53:
              v27 = __p;
              if (__p)
              {
LABEL_54:
                v76 = v27;
                operator delete(v27);
              }
            }
            else
            {
              v26 = 1;
              if (__p)
                goto LABEL_54;
            }
            v25 = v79;
            if (!v79)
              goto LABEL_57;
LABEL_56:
            v80 = v25;
            operator delete(v25);
            goto LABEL_57;
          }
          v26 = 0;
          if (v25)
            goto LABEL_56;
LABEL_57:
          if (v26)
            v97 = v97 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
          v28 = *(_DWORD *)(v19 + 48);
          if (v28 <= (int)v16)
            v97 = v97 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v28 != (_DWORD)v16 + 1)
            v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
          v91 = *(_QWORD *)v19;
          fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)v92, v19 + 8);
          v96 = *(_DWORD *)(v19 + 48);
          if (v12)
          {
            end = v90.__end_;
            if (v90.__end_ >= v90.__end_cap_.__value_)
            {
              begin = v90.__begin_;
              v32 = v90.__end_ - v90.__begin_;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_177;
              v34 = (char *)v90.__end_cap_.__value_ - (char *)v90.__begin_;
              if (((char *)v90.__end_cap_.__value_ - (char *)v90.__begin_) >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v90.__end_cap_, v35);
                begin = v90.__begin_;
                end = v90.__end_;
              }
              else
              {
                v36 = 0;
              }
              v37 = (unsigned int *)&v36[4 * v32];
              *v37 = *(_DWORD *)v19;
              v30 = v37 + 1;
              while (end != begin)
              {
                v38 = *--end;
                *--v37 = v38;
              }
              v90.__begin_ = v37;
              v90.__end_ = v30;
              v90.__end_cap_.__value_ = (unsigned int *)&v36[4 * v35];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v90.__end_ = *(_DWORD *)v19;
              v30 = end + 1;
            }
            v90.__end_ = v30;
          }
          if (v15)
          {
            v39 = v89.__end_;
            if (v89.__end_ >= v89.__end_cap_.__value_)
            {
              v41 = v89.__begin_;
              v42 = v89.__end_ - v89.__begin_;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
LABEL_177:
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v44 = (char *)v89.__end_cap_.__value_ - (char *)v89.__begin_;
              if (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89.__end_cap_, v45);
                v41 = v89.__begin_;
                v39 = v89.__end_;
              }
              else
              {
                v46 = 0;
              }
              v47 = (unsigned int *)&v46[4 * v42];
              *v47 = *(_DWORD *)(v19 + 4);
              v40 = v47 + 1;
              while (v39 != v41)
              {
                v48 = *--v39;
                *--v47 = v48;
              }
              v89.__begin_ = v47;
              v89.__end_ = v40;
              v89.__end_cap_.__value_ = (unsigned int *)&v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *v89.__end_ = *(_DWORD *)(v19 + 4);
              v40 = v39 + 1;
            }
            v89.__end_ = v40;
          }
          if (v81)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v81 + 40))(v81);
            v18 = 0;
          }
          else
          {
            v18 = 0;
            ++v85;
          }
        }
      }
LABEL_17:
      v16 = v88;
      goto LABEL_18;
    }
    if (v86)
      (*(void (**)(void))(*(_QWORD *)v86 + 8))();
LABEL_167:
    a3 = v70;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
    {
      v97 = v97 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    if (v89.__begin_)
    {
      v89.__end_ = v89.__begin_;
      operator delete(v89.__begin_);
    }
    if (v90.__begin_)
    {
      v90.__end_ = v90.__begin_;
      operator delete(v90.__begin_);
    }
    v9 = v97;
LABEL_175:
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1ADEAF564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 48);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 48);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 48);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 48), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>,(fst::GallicType)1>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 56 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADEAFD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::FinishState(uint64_t a1, int a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int *i;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  float v27;
  void *v28;
  _BYTE *v29;
  float v30;
  int v31;
  float v32;
  int v33;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v26);
  fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::Zero(&v22);
  v33 = v26;
  v32 = *(float *)&v22;
  v6 = *(float *)&v26 != *(float *)&v22
    || (v33 = HIDWORD(v26), v32 = v27, v31 = HIDWORD(v22), v30 = v23, *((float *)&v26 + 1) != *((float *)&v22 + 1))
    || v32 != v30
    || v29 - (_BYTE *)v28 != v25 - (_BYTE *)__p
    || memcmp(v28, __p, v29 - (_BYTE *)v28) != 0;
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v6)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) != *(_DWORD *)(v7 + 4 * a2))
    goto LABEL_26;
  v8 = 0;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = v9[1];
  v11 = **(_QWORD **)(a1 + 16);
  v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
  do
  {
    v13 = *v12--;
    v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
  }
  while ((_DWORD)v13 != a2);
  v14 = *(_QWORD **)a1;
  v15 = **(_QWORD **)(a1 + 72);
  for (i = (int *)(v10 - 4); ; --i)
  {
    v17 = *i;
    if (v14)
      *(_DWORD *)(*v14 + 4 * v17) = *(_DWORD *)(a1 + 48);
    v18 = v17 >> 6;
    v19 = 1 << v17;
    if ((v8 & 1) == 0)
      break;
    *(_QWORD *)(v11 + 8 * v18) |= v19;
    *(_QWORD *)(v15 + 8 * v18) &= ~v19;
    if ((_DWORD)v17 == a2)
    {
      v9[1] = i;
      goto LABEL_25;
    }
LABEL_23:
    ;
  }
  *(_QWORD *)(v15 + 8 * v18) &= ~v19;
  if ((_DWORD)v17 != a2)
    goto LABEL_23;
  v9[1] = i;
  **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
LABEL_25:
  ++*(_DWORD *)(a1 + 48);
LABEL_26:
  if (a3 != -1)
  {
    v20 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v20 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v20 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v21 = *(_DWORD *)(v7 + 4 * a2);
    if (v21 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v21;
  }
}

void sub_1ADEB006C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19918;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADEB00F4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A8D0;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADEB01DC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A8D0;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADEB05E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 56 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(56 * v24, 0x10100407878D4B7uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[7 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 7;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 7) = *(_QWORD *)v23;
    fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>::operator=((uint64_t)(v15 - 6), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 48);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 7;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 56 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADEB082C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>::ComposeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D19320;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADEB08E8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D26968;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 7);
    v9 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v19 + 8) - v8) >> 3);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 56 * v20 + 48);
      do
      {
        v14 = *v12;
        v12 += 14;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 21);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

